[{"task_id": "HumanEval_0_has_close_elements", "prompt": "#lang racket\n\n;; Check if in given list of numbers, are any two numbers closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "#lang racket\n\n;; Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n;; separate those group into separate strings and return the list of those.\n;; Separate groups are balanced (each open brace is properly closed) and not nested within each other\n;; Ignore any spaces in the input string.\n;; >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n;; (list \"()\" \"(())\" \"(()())\")\n(define (separate_paren_groups paren_string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\" \"((()))\" \"()\" \"((())()())\") 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\") 0.001)\n    (check-within (candidate \"(()(())((())))\") (list \"(()(())((())))\") 0.001)\n    (check-within (candidate \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "#lang racket\n\n;; Given a positive floating point number, it can be decomposed into\n;; and integer part (largest integer smaller than given number) and decimals\n;; (leftover part always smaller than 1).\n;; Return the decimal part of the number.\n;; >>> (truncate_number 3.5)\n;; 0.5\n(define (truncate_number number)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n    (check-within (candidate 3.5) 0.5 0.001)\n    (check-within (candidate 1.25) 0.25 0.001)\n    (check-within (candidate 123.0) 0.0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_3_below_zero", "prompt": "#lang racket\n\n;; You're given a list of deposit and withdrawal operations on a bank account that starts with\n;; zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n;; at that point function should return #t. Otherwise it should return #f.\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n(define (below_zero operations)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 2 -3 1 2 -3)) #f 0.001)\n    (check-within (candidate (list 1 2 -4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f 0.001)\n    (check-within (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t 0.001)\n    (check-within (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is the average absolute difference between each\n;; element and a centerpoint (mean in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n    (check-within (candidate (list 1.0 2.0)) 0.5 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0)) 1.0 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_5_intersperse", "prompt": "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse numbers delimeter)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-within (candidate (list ) 7) (list ) 0.001)\n    (check-within (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2) 0.001)\n    (check-within (candidate (list 2 2 2) 2) (list 2 2 2 2 2) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "#lang racket\n\n;; Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n;; For each of the group, output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"(()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens paren_string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n    (check-within (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3) 0.001)\n    (check-within (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4) 0.001)\n    (check-within (candidate \"(()(())((())))\") (list 4) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "#lang racket\n\n;; Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n(define (filter_by_substring strings substring)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\") 0.001)\n    (check-within (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_8_sum_product", "prompt": "#lang racket\n\n;; For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n;; Empty sum should be equal to 0 and empty product should be equal to 1.\n;; >>> (sum_product (list ))\n;; (list 0 1)\n;; >>> (sum_product (list 1 2 3 4))\n;; (list 10 24)\n(define (sum_product numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n    (check-within (candidate (list )) (list 0 1) 0.001)\n    (check-within (candidate (list 1 1 1)) (list 3 1) 0.001)\n    (check-within (candidate (list 100 0)) (list 100 0) 0.001)\n    (check-within (candidate (list 3 5 7)) (list 15 105) 0.001)\n    (check-within (candidate (list 10)) (list 10 10) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "#lang racket\n\n;; From a given list of integers, generate a list of rolling maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 1)) (list 4 4 4 4) 0.001)\n    (check-within (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"x\") \"x\" 0.001)\n    (check-within (candidate \"xyz\") \"xyzyx\" 0.001)\n    (check-within (candidate \"xyx\") \"xyx\" 0.001)\n    (check-within (candidate \"jerry\") \"jerryrrej\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_11_string_xor", "prompt": "#lang racket\n\n;; Input are two strings a and b consisting only of 1s and 0s.\n;; Perform binary XOR on these inputs and return result also as a string.\n;; >>> (string_xor \"010\" \"110\")\n;; \"100\"\n(define (string_xor a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n    (check-within (candidate \"111000\" \"101010\") \"010010\" 0.001)\n    (check-within (candidate \"1\" \"1\") \"0\" 0.001)\n    (check-within (candidate \"0101\" \"0000\") \"0101\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_12_longest", "prompt": "#lang racket\n\n;; Out of list of strings, return the longest one. Return the first one in case of multiple\n;; strings of the same length. Return #f in case the input list is empty.\n;; >>> (longest (list ))\n;; #f\n;; >>> (longest (list \"a\" \"b\" \"c\"))\n;; \"a\"\n;; >>> (longest (list \"a\" \"bb\" \"ccc\"))\n;; \"ccc\"\n(define (longest strings)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"x\" 0.001)\n    (check-within (candidate (list \"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\")) \"zzzz\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-within (candidate 3 7) 1 0.001)\n    (check-within (candidate 10 15) 5 0.001)\n    (check-within (candidate 49 14) 7 0.001)\n    (check-within (candidate 144 60) 12 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "#lang racket\n\n;; Return list of all prefixes from shortest to longest of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\")\n(define (all_prefixes string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\") 0.001)\n    (check-within (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "#lang racket\n\n;; Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;; >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-within (candidate 0) \"0\" 0.001)\n    (check-within (candidate 3) \"0 1 2 3\" 0.001)\n    (check-within (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "#lang racket\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4\n(define (count_distinct_characters string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abcde\") 5 0.001)\n    (check-within (candidate \"abcdecadeCADE\") 5 0.001)\n    (check-within (candidate \"aaaaAAAAaaaa\") 1 0.001)\n    (check-within (candidate \"Jerry jERRY JeRRRY\") 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_17_parse_music", "prompt": "#lang racket\n\n;; Input to this function is a string representing musical notes in a special ASCII format.\n;; Your task is to parse this string and return list of integers corresponding to how many beats does each\n;; not last.\n;; Here is a legend:\n;; 'o' - whole note, lasts four beats\n;; 'o|' - half note, lasts two beats\n;; '.|' - quater note, lasts one beat\n;; >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n;; (list 4 2 1 2 2 1 1 1 1 4 4)\n(define (parse_music music_string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_music))\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"o o o o\") (list 4 4 4 4) 0.001)\n    (check-within (candidate \".| .| .| .|\") (list 1 1 1 1) 0.001)\n    (check-within (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4 4 4 4) 0.001)\n    (check-within (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1 4 2 4 2) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "#lang racket\n\n;; Find how many times a given substring can be found in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-within (candidate \"\" \"x\") 0 0.001)\n    (check-within (candidate \"xyxyxyx\" \"x\") 4 0.001)\n    (check-within (candidate \"cacacacac\" \"cac\") 4 0.001)\n    (check-within (candidate \"john doe\" \"john\") 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three five\"\n(define (sort_numbers numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"three\") \"three\" 0.001)\n    (check-within (candidate \"three five nine\") \"three five nine\" 0.001)\n    (check-within (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\" 0.001)\n    (check-within (candidate \"six five four three two one zero\") \"zero one two three four five six\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "#lang racket\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0) 0.001)\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "#lang racket\n\n;; Given list of numbers (of at least two elements), apply a linear transform to that list,\n;; such that the smallest number will become 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-within (candidate (list 2.0 49.9)) (list 0.0 1.0) 0.001)\n    (check-within (candidate (list 100.0 49.9)) (list 1.0 0.0) 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0) 0.001)\n    (check-within (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n    (check-within (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers values)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9) 0.001)\n    (check-within (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_23_strlen", "prompt": "#lang racket\n\n;; Return length of given string\n;; >>> (strlen \"\")\n;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"x\") 1 0.001)\n    (check-within (candidate \"asdasnakj\") 9 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-within (candidate 3) 1 0.001)\n    (check-within (candidate 7) 1 0.001)\n    (check-within (candidate 10) 5 0.001)\n    (check-within (candidate 100) 50 0.001)\n    (check-within (candidate 49) 7 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_25_factorize", "prompt": "#lang racket\n\n;; Return list of prime factors of given integer in the order from smallest to largest.\n;; Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n;; Input number should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n(define (factorize n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n    (check-within (candidate 2) (list 2) 0.001)\n    (check-within (candidate 4) (list 2 2) 0.001)\n    (check-within (candidate 8) (list 2 2 2) 0.001)\n    (check-within (candidate 57) (list 3 19) 0.001)\n    (check-within (candidate 3249) (list 3 3 19 19) 0.001)\n    (check-within (candidate 185193) (list 3 3 3 19 19 19) 0.001)\n    (check-within (candidate 20577) (list 3 19 19 19) 0.001)\n    (check-within (candidate 18) (list 2 3 3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "#lang racket\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4)) (list 1 2 3 4) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_27_flip_case", "prompt": "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n;; >>> (flip_case \"Hello\")\n;; \"hELLO\"\n(define (flip_case string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hello!\") \"hELLO!\" 0.001)\n    (check-within (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_28_concatenate", "prompt": "#lang racket\n\n;; Concatenate list of strings into a single string\n;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"c\"))\n;; \"abc\"\n(define (concatenate strings)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n    (check-within (candidate (list )) \"\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\")) \"xyz\" 0.001)\n    (check-within (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "#lang racket\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-within (candidate (list ) \"john\") (list ) 0.001)\n    (check-within (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_30_get_positive", "prompt": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-within (candidate (list -1 -2 4 5 6)) (list 4 5 6) 0.001)\n    (check-within (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1) 0.001)\n    (check-within (candidate (list -1 -2)) (list ) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_31_is_prime", "prompt": "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 101) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 13441) #t 0.001)\n    (check-within (candidate 61) #t 0.001)\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 11) #t 0.001)\n    (check-within (candidate 17) #t 0.001)\n    (check-within (candidate 85) #f 0.001)\n    (check-within (candidate 77) #f 0.001)\n    (check-within (candidate 255379) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_33_sort_third", "prompt": "#lang racket\n\n;; This function takes a list l and returns a list l' such that\n;; l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n;; to the values of the corresponding indicies of l, but sorted.\n;; >>> (sort_third (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_third (list 5 6 3 4 8 9 2))\n;; (list 2 6 3 4 8 9 5)\n(define (sort_third l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_third))\n    (check-within (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5) 0.001)\n    (check-within (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5) 0.001)\n    (check-within (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5) 0.001)\n    (check-within (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_34_unique", "prompt": "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-within (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_35_max_element", "prompt": "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; 123\n(define (max_element l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "#lang racket\n\n;; Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n;; >>> (fizz_buzz 50)\n;; 0\n;; >>> (fizz_buzz 78)\n;; 2\n;; >>> (fizz_buzz 79)\n;; 3\n(define (fizz_buzz n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n    (check-within (candidate 50) 0 0.001)\n    (check-within (candidate 78) 2 0.001)\n    (check-within (candidate 79) 3 0.001)\n    (check-within (candidate 100) 3 0.001)\n    (check-within (candidate 200) 6 0.001)\n    (check-within (candidate 4000) 192 0.001)\n    (check-within (candidate 10000) 639 0.001)\n    (check-within (candidate 100000) 8026 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_37_sort_even", "prompt": "#lang racket\n\n;; This function takes a list l and returns a list l' such that\n;; l' is identical to l in the odd indicies, while its values at the even indicies are equal\n;; to the values of the even indicies of l, but sorted.\n;; >>> (sort_even (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_even (list 5 6 3 4))\n;; (list 3 6 5 4)\n(define (sort_even l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_even))\n    (check-within (candidate (list 1 2 3)) (list 1 2 3) 0.001)\n    (check-within (candidate (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123) 0.001)\n    (check-within (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "#lang racket\n\n;; prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n;; 89\n(define (prime_fib n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n    (check-within (candidate 1) 2 0.001)\n    (check-within (candidate 2) 3 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 13 0.001)\n    (check-within (candidate 5) 89 0.001)\n    (check-within (candidate 6) 233 0.001)\n    (check-within (candidate 7) 1597 0.001)\n    (check-within (candidate 8) 28657 0.001)\n    (check-within (candidate 9) 514229 0.001)\n    (check-within (candidate 10) 433494437 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "#lang racket\n\n;; triples_sum_to_zero takes a list of integers as an input.\n;; it returns #t if there are three distinct elements in the list that\n;; sum to zero, and #f otherwise.\n;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;; #f\n;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -1)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #t 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 1 2 5 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 9 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list 1 3 5 -100)) #f 0.001)\n    (check-within (candidate (list 100 3 5 -100)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "#lang racket\n\n;; Imagine a road that's a perfectly straight infinitely long line.\n;; n cars are driving left to right;  simultaneously, a different set of n cars\n;; are driving right to left.   The two sets of cars start out being very far from\n;; each other.  All cars move in the same speed.  Two cars are said to collide\n;; when a car that's moving left to right hits a car that's moving right to left.\n;; However, the cars are infinitely sturdy and strong; as a result, they continue moving\n;; in their trajectory as if they did not collide.\n;; This function outputs the number of such collisions.\n(define (car_race_collision n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 9 0.001)\n    (check-within (candidate 4) 16 0.001)\n    (check-within (candidate 8) 64 0.001)\n    (check-within (candidate 10) 100 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_42_incr_list", "prompt": "#lang racket\n\n;; Return list with elements incremented by 1.\n;; >>> (incr_list (list 1 2 3))\n;; (list 2 3 4)\n;; >>> (incr_list (list 5 3 5 2 3 3 9 0 123))\n;; (list 6 4 6 3 4 4 10 1 124)\n(define (incr_list l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incr_list))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 4 3 2) 0.001)\n    (check-within (candidate (list 5 2 5 2 3 3 9 0 123)) (list 6 3 6 3 4 4 10 1 124) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n;; it returns #t if there are two distinct elements in the list that\n;; sum to zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;; >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-within (candidate (list 1 3 5 0)) #f 0.001)\n    (check-within (candidate (list 1 3 -2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 -5 3 5 7)) #t 0.001)\n    (check-within (candidate (list 1)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 30)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 3 2 31)) #t 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 30)) #f 0.001)\n    (check-within (candidate (list -3 9 -1 4 2 31)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_44_change_base", "prompt": "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return string representation after the conversion.\n;; base numbers are less than 10.\n;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>> (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n    (check-within (candidate 8 3) \"22\" 0.001)\n    (check-within (candidate 9 3) \"100\" 0.001)\n    (check-within (candidate 234 2) \"11101010\" 0.001)\n    (check-within (candidate 16 2) \"10000\" 0.001)\n    (check-within (candidate 8 2) \"1000\" 0.001)\n    (check-within (candidate 7 2) \"111\" 0.001)\n    (check-within (candidate 2 3) \"2\" 0.001)\n    (check-within (candidate 3 4) \"3\" 0.001)\n    (check-within (candidate 4 5) \"4\" 0.001)\n    (check-within (candidate 5 6) \"5\" 0.001)\n    (check-within (candidate 6 7) \"6\" 0.001)\n    (check-within (candidate 7 8) \"7\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "#lang racket\n\n;; Given length of a side and high return area for a triangle.\n;; >>> (triangle_area 5 3)\n;; 7.5\n(define (triangle_area a h)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 5 3) 7.5 0.001)\n    (check-within (candidate 2 2) 2.0 0.001)\n    (check-within (candidate 10 8) 40.0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_46_fib4", "prompt": "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 28 0.001)\n    (check-within (candidate 10) 104 0.001)\n    (check-within (candidate 12) 386 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_47_median", "prompt": "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n(define (median l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-within (candidate (list 3 1 2 4 5)) 3 0.001)\n    (check-within (candidate (list -10 4 6 1000 10 20)) 8.0 0.001)\n    (check-within (candidate (list 5)) 5 0.001)\n    (check-within (candidate (list 6 5)) 5.5 0.001)\n    (check-within (candidate (list 8 1 3 9 9 2 7)) 7 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "#lang racket\n\n;; Checks if given string is a palindrome\n;; >>> (is_palindrome \"\")\n;; #t\n;; >>> (is_palindrome \"aba\")\n;; #t\n;; >>> (is_palindrome \"aaaaa\")\n;; #t\n;; >>> (is_palindrome \"zbcd\")\n;; #f\n(define (is_palindrome text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n    (check-within (candidate \"\") #t 0.001)\n    (check-within (candidate \"aba\") #t 0.001)\n    (check-within (candidate \"aaaaa\") #t 0.001)\n    (check-within (candidate \"zbcd\") #f 0.001)\n    (check-within (candidate \"xywyx\") #t 0.001)\n    (check-within (candidate \"xywyz\") #f 0.001)\n    (check-within (candidate \"xywzx\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_49_modp", "prompt": "#lang racket\n\n;; Return 2^n modulo p (be aware of numerics).\n;; >>> (modp 3 5)\n;; 3\n;; >>> (modp 1101 101)\n;; 2\n;; >>> (modp 0 101)\n;; 1\n;; >>> (modp 3 11)\n;; 8\n;; >>> (modp 100 101)\n;; 1\n(define (modp n p)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n    (check-within (candidate 3 5) 3 0.001)\n    (check-within (candidate 1101 101) 2 0.001)\n    (check-within (candidate 0 101) 1 0.001)\n    (check-within (candidate 3 11) 8 0.001)\n    (check-within (candidate 100 101) 1 0.001)\n    (check-within (candidate 30 5) 4 0.001)\n    (check-within (candidate 31 5) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "#lang racket\n\n;; remove_vowels is a function that takes string and returns string without vowels.\n;; >>> (remove_vowels \"\")\n;; \"\"\n;; >>> (remove_vowels \"abcdef\")\n;; \"bcdf\"\n;; >>> (remove_vowels \"aaaaa\")\n;; \"\"\n;; >>> (remove_vowels \"aaBAA\")\n;; \"B\"\n;; >>> (remove_vowels \"zbcd\")\n;; \"zbcd\"\n(define (remove_vowels text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"abcdef\nghijklm\") \"bcdf\nghjklm\" 0.001)\n    (check-within (candidate \"fedcba\") \"fdcb\" 0.001)\n    (check-within (candidate \"eeeee\") \"\" 0.001)\n    (check-within (candidate \"acBAA\") \"cB\" 0.001)\n    (check-within (candidate \"EcBOO\") \"cB\" 0.001)\n    (check-within (candidate \"ybcd\") \"ybcd\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "#lang racket\n\n;; Return #t if all numbers in the list l are below threshold t.\n;; >>> (below_threshold (list 1 2 4 10) 100)\n;; #t\n;; >>> (below_threshold (list 1 20 4 10) 5)\n;; #f\n(define (below_threshold l t)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n    (check-within (candidate (list 1 2 4 10) 100) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 5) #f 0.001)\n    (check-within (candidate (list 1 20 4 10) 21) #t 0.001)\n    (check-within (candidate (list 1 20 4 10) 22) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 11) #t 0.001)\n    (check-within (candidate (list 1 8 4 10) 10) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_53_add", "prompt": "#lang racket\n\n;; Add two numbers x and y\n;; >>> (add 2 3)\n;; 5\n;; >>> (add 5 7)\n;; 12\n(define (add x y)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate 0 1) 1 0.001)\n    (check-within (candidate 1 0) 1 0.001)\n    (check-within (candidate 2 3) 5 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 5) 12 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_54_same_chars", "prompt": "#lang racket\n\n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f\n(define (same_chars s0 s1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabc\") #t 0.001)\n    (check-within (candidate \"dddddddabc\" \"abcd\") #t 0.001)\n    (check-within (candidate \"eabcd\" \"dddddddabc\") #f 0.001)\n    (check-within (candidate \"abcd\" \"dddddddabcf\") #f 0.001)\n    (check-within (candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f 0.001)\n    (check-within (candidate \"aabb\" \"aaccc\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_55_fib", "prompt": "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> (fib 10)\n;; 55\n;; >>> (fib 1)\n;; 1\n;; >>> (fib 8)\n;; 21\n(define (fib n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-within (candidate 10) 55 0.001)\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 8) 21 0.001)\n    (check-within (candidate 11) 89 0.001)\n    (check-within (candidate 12) 144 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "#lang racket\n\n;; brackets is a string of \"<\" and \">\".\n;; return #t if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing \"<\")\n;; #f\n;; >>> (correct_bracketing \"<>\")\n;; #t\n;; >>> (correct_bracketing \"<<><>>\")\n;; #t\n;; >>> (correct_bracketing \"><<>\")\n;; #f\n(define (correct_bracketing brackets)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"<>\") #t 0.001)\n    (check-within (candidate \"<<><>>\") #t 0.001)\n    (check-within (candidate \"<><><<><>><>\") #t 0.001)\n    (check-within (candidate \"<><><<<><><>><>><<><><<>>>\") #t 0.001)\n    (check-within (candidate \"<<<><>>>>\") #f 0.001)\n    (check-within (candidate \"><<>\") #f 0.001)\n    (check-within (candidate \"<\") #f 0.001)\n    (check-within (candidate \"<<<<\") #f 0.001)\n    (check-within (candidate \">\") #f 0.001)\n    (check-within (candidate \"<<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>><<>\") #f 0.001)\n    (check-within (candidate \"<><><<><>><>>><>\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_57_monotonic", "prompt": "#lang racket\n\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-within (candidate (list 1 2 4 10)) #t 0.001)\n    (check-within (candidate (list 1 2 4 20)) #t 0.001)\n    (check-within (candidate (list 1 20 4 10)) #f 0.001)\n    (check-within (candidate (list 4 1 0 -10)) #t 0.001)\n    (check-within (candidate (list 4 1 1 0)) #t 0.001)\n    (check-within (candidate (list 1 2 3 2 5 60)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 60)) #t 0.001)\n    (check-within (candidate (list 9 9 9 9)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_58_common", "prompt": "#lang racket\n\n;; Return sorted unique common elements for two lists.\n;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common l1 l2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-within (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653) 0.001)\n    (check-within (candidate (list 5 3 2 8) (list 3 2)) (list 2 3) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4) 0.001)\n    (check-within (candidate (list 4 3 2 8) (list )) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "#lang racket\n\n;; Return the largest prime factor of n. Assume n > 1 and is not a prime.\n;; >>> (largest_prime_factor 13195)\n;; 29\n;; >>> (largest_prime_factor 2048)\n;; 2\n(define (largest_prime_factor n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n    (check-within (candidate 15) 5 0.001)\n    (check-within (candidate 27) 3 0.001)\n    (check-within (candidate 63) 7 0.001)\n    (check-within (candidate 330) 11 0.001)\n    (check-within (candidate 13195) 29 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "#lang racket\n\n;; sum_to_n is a function that sums numbers from 1 to n.\n;; >>> (sum_to_n 30)\n;; 465\n;; >>> (sum_to_n 100)\n;; 5050\n;; >>> (sum_to_n 5)\n;; 15\n;; >>> (sum_to_n 10)\n;; 55\n;; >>> (sum_to_n 1)\n;; 1\n(define (sum_to_n n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 6) 21 0.001)\n    (check-within (candidate 11) 66 0.001)\n    (check-within (candidate 30) 465 0.001)\n    (check-within (candidate 100) 5050 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return #t if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing brackets)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n    (check-within (candidate \"()\") #t 0.001)\n    (check-within (candidate \"(()())\") #t 0.001)\n    (check-within (candidate \"()()(()())()\") #t 0.001)\n    (check-within (candidate \"()()((()()())())(()()(()))\") #t 0.001)\n    (check-within (candidate \"((()())))\") #f 0.001)\n    (check-within (candidate \")(()\") #f 0.001)\n    (check-within (candidate \"(\") #f 0.001)\n    (check-within (candidate \"((((\") #f 0.001)\n    (check-within (candidate \")\") #f 0.001)\n    (check-within (candidate \"(()\") #f 0.001)\n    (check-within (candidate \"()()(()())())(()\") #f 0.001)\n    (check-within (candidate \"()()(()())()))()\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_62_derivative", "prompt": "#lang racket\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;;  Return derivative of this polynomial in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list 2 6)\n(define (derivative xs)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n    (check-within (candidate (list 3 1 2 4 5)) (list 1 4 12 20) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 6) 0.001)\n    (check-within (candidate (list 3 2 1)) (list 2 2) 0.001)\n    (check-within (candidate (list 3 2 1 0 4)) (list 2 2 0 16) 0.001)\n    (check-within (candidate (list 1)) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_63_fibfib", "prompt": "#lang racket\n\n;; The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1) == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n;; Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n;; >>> (fibfib 1)\n;; 0\n;; >>> (fibfib 5)\n;; 4\n;; >>> (fibfib 8)\n;; 24\n(define (fibfib n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 1) 0 0.001)\n    (check-within (candidate 5) 4 0.001)\n    (check-within (candidate 8) 24 0.001)\n    (check-within (candidate 10) 81 0.001)\n    (check-within (candidate 12) 274 0.001)\n    (check-within (candidate 14) 927 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n;; a word as input and returns the number of vowels in the string.\n;; Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n    (check-within (candidate \"abcde\") 2 0.001)\n    (check-within (candidate \"Alone\") 3 0.001)\n    (check-within (candidate \"key\") 2 0.001)\n    (check-within (candidate \"bye\") 1 0.001)\n    (check-within (candidate \"keY\") 2 0.001)\n    (check-within (candidate \"bYe\") 1 0.001)\n    (check-within (candidate \"ACEDY\") 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "#lang racket\n\n;; Circular shift the digits of the integer x, shift the digits right by shift\n;; and return the result as a string.\n;; If shift > number of digits, return digits reversed.\n;; >>> (circular_shift 12 1)\n;; \"21\"\n;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n    (check-within (candidate 100 2) \"001\" 0.001)\n    (check-within (candidate 12 2) \"12\" 0.001)\n    (check-within (candidate 97 8) \"79\" 0.001)\n    (check-within (candidate 12 1) \"21\" 0.001)\n    (check-within (candidate 11 101) \"11\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_66_digitSum", "prompt": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"abAB\") 131 0.001)\n    (check-within (candidate \"abcCd\") 67 0.001)\n    (check-within (candidate \"helloE\") 69 0.001)\n    (check-within (candidate \"woArBld\") 131 0.001)\n    (check-within (candidate \"aAaaaXa\") 153 0.001)\n    (check-within (candidate \" How are yOu?\") 151 0.001)\n    (check-within (candidate \"You arE Very Smart\") 327 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "#lang racket\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19\n(define (fruit_distribution s n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n    (check-within (candidate \"5 apples and 6 oranges\" 19) 8 0.001)\n    (check-within (candidate \"5 apples and 6 oranges\" 21) 10 0.001)\n    (check-within (candidate \"0 apples and 1 oranges\" 3) 2 0.001)\n    (check-within (candidate \"1 apples and 0 oranges\" 3) 2 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 100) 95 0.001)\n    (check-within (candidate \"2 apples and 3 oranges\" 5) 0 0.001)\n    (check-within (candidate \"1 apples and 100 oranges\" 120) 19 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_68_pluck", "prompt": "#lang racket\n\n;; \"Given a list representing a branch of a tree that has non-negative integer nodes\n;; your task is to pluck one of the nodes and return it.\n;; The plucked node should be the node with the smallest even value.\n;; If multiple nodes with the same smallest even value are found return the node that has smallest index.\n;; The plucked node should be returned in a list, [ smalest_value, its index ],\n;; If there are no even values or the given list is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>> (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;;              so we will choose the first zero, which has the smallest index.\n;; Constraints:\n;;     * 1 <= nodes.length <= 10000\n;;     * 0 <= node.value\n(define (pluck arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-within (candidate (list 4 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 1) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5 0 3 0 4 2)) (list 0 1) 0.001)\n    (check-within (candidate (list 1 2 3 0 5 3)) (list 0 3) 0.001)\n    (check-within (candidate (list 5 4 8 4 8)) (list 4 1) 0.001)\n    (check-within (candidate (list 7 6 7 1)) (list 6 1) 0.001)\n    (check-within (candidate (list 7 9 7 1)) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_69_search", "prompt": "#lang racket\n\n;; You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n;; zero, and has a frequency greater than or equal to the value of the integer itself. \n;; The frequency of an integer is the number of times it appears in the list.\n;; If no such a value exist, return -1.\n;; Examples:\n;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list 1 2 2 3 3 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 5 5 5 5 1)) 1 0.001)\n    (check-within (candidate (list 4 1 4 1 4 4)) 4 0.001)\n    (check-within (candidate (list 3 3)) -1 0.001)\n    (check-within (candidate (list 8 8 8 8 8 8 8 8)) 8 0.001)\n    (check-within (candidate (list 2 3 3 2 2)) 2 0.001)\n    (check-within (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1)) 1 0.001)\n    (check-within (candidate (list 3 2 8 2)) 2 0.001)\n    (check-within (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1 0.001)\n    (check-within (candidate (list 8 8 3 6 5 6 4)) -1 0.001)\n    (check-within (candidate (list 6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1 0.001)\n    (check-within (candidate (list 1 9 10 1 3)) 1 0.001)\n    (check-within (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10)) 5 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n    (check-within (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4 0.001)\n    (check-within (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2 0.001)\n    (check-within (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1 0.001)\n    (check-within (candidate (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4 0.001)\n    (check-within (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7)) 4 0.001)\n    (check-within (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1)) 2 0.001)\n    (check-within (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8)) -1 0.001)\n    (check-within (candidate (list 10)) -1 0.001)\n    (check-within (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2 0.001)\n    (check-within (candidate (list 5 4 10 2 1 1 10 3 6 1 8)) 1 0.001)\n    (check-within (candidate (list 7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1 0.001)\n    (check-within (candidate (list 3 10 10 9 2)) -1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "#lang racket\n\n;; Given list of integers, return list in strange order.\n;; Strange sorting, is when you start with the minimum value,\n;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-within (candidate (list 1 2 3 4)) (list 1 4 2 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3) 0.001)\n    (check-within (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7) 0.001)\n    (check-within (candidate (list 5 5 5 5)) (list 5 5 5 5) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5) 0.001)\n    (check-within (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2) 0.001)\n    (check-within (candidate (list 111111)) (list 111111) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return the area of\n;; the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define (triangle_area a b c)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate 3 4 5) 6.0 0.001)\n    (check-within (candidate 1 2 10) -1 0.001)\n    (check-within (candidate 4 8 5) 8.18 0.001)\n    (check-within (candidate 2 2 2) 1.73 0.001)\n    (check-within (candidate 1 2 3) -1 0.001)\n    (check-within (candidate 10 5 7) 16.25 0.001)\n    (check-within (candidate 2 6 3) -1 0.001)\n    (check-within (candidate 1 1 1) 0.43 0.001)\n    (check-within (candidate 2 2 10) -1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "#lang racket\n\n;; Write a function that returns #t if the object q will fly, and #f otherwise.\n;; The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n;; Example:\n;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum possible weight.\n;; >>> (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.\n(define (will_it_fly q w)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n    (check-within (candidate (list 3 2 3) 9) #t 0.001)\n    (check-within (candidate (list 1 2) 5) #f 0.001)\n    (check-within (candidate (list 3) 5) #t 0.001)\n    (check-within (candidate (list 3 2 3) 1) #f 0.001)\n    (check-within (candidate (list 1 2 3) 6) #f 0.001)\n    (check-within (candidate (list 5) 5) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "#lang racket\n\n;; Given a list arr of integers, find the minimum number of elements that\n;; need to be changed to make the list palindromic. A palindromic list is a list that\n;; is read the same backwards and forwards. In one change, you can change one element to any other element.\n;; For example:\n;; >>> (smallest_change (list 1 2 3 5 4 7 9 6))\n;; 4\n;; >>> (smallest_change (list 1 2 3 4 3 2 2))\n;; 1\n;; >>> (smallest_change (list 1 2 3 2 1))\n;; 0\n(define (smallest_change arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_change))\n    (check-within (candidate (list 1 2 3 5 4 7 9 6)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 2)) 1 0.001)\n    (check-within (candidate (list 1 4 2)) 1 0.001)\n    (check-within (candidate (list 1 4 4 2)) 1 0.001)\n    (check-within (candidate (list 1 2 3 2 1)) 0 0.001)\n    (check-within (candidate (list 3 1 1 3)) 0 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_74_total_match", "prompt": "#lang racket\n\n;; Write a function that accepts two lists of strings and returns the list that has \n;; total number of chars in the all strings of the list less than the other list.\n;; if the two lists have the same number of chars, return the first list.\n;; Examples\n;; >>> (total_match (list ) (list ))\n;; (list )\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"Hi\"))\n;; (list \"hI\" \"Hi\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\"))\n;; (list \"hi\" \"admin\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\"))\n;; (list \"hI\" \"hi\" \"hi\")\n;; >>> (total_match (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\"))\n;; (list \"4\")\n(define (total_match lst1 lst2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n    (check-within (candidate (list ) (list )) (list ) 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\")) (list \"4\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\") 0.001)\n    (check-within (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hii\")) (list \"hi\" \"admin\") 0.001)\n    (check-within (candidate (list ) (list \"this\")) (list ) 0.001)\n    (check-within (candidate (list \"this\") (list )) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "#lang racket\n\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n(define (is_multiply_prime a)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n    (check-within (candidate 5) #f 0.001)\n    (check-within (candidate 30) #t 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n    (check-within (candidate 105) #t 0.001)\n    (check-within (candidate 126) #f 0.001)\n    (check-within (candidate 729) #f 0.001)\n    (check-within (candidate 891) #f 0.001)\n    (check-within (candidate 1001) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "#lang racket\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; #t\n;; >>> (is_simple_power 2 2)\n;; #t\n;; >>> (is_simple_power 8 2)\n;; #t\n;; >>> (is_simple_power 3 2)\n;; #f\n;; >>> (is_simple_power 3 1)\n;; #f\n;; >>> (is_simple_power 5 3)\n;; #f\n(define (is_simple_power x n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-within (candidate 16 2) #t 0.001)\n    (check-within (candidate 143214 16) #f 0.001)\n    (check-within (candidate 4 2) #t 0.001)\n    (check-within (candidate 9 3) #t 0.001)\n    (check-within (candidate 16 4) #t 0.001)\n    (check-within (candidate 24 2) #f 0.001)\n    (check-within (candidate 128 4) #f 0.001)\n    (check-within (candidate 12 6) #f 0.001)\n    (check-within (candidate 1 1) #t 0.001)\n    (check-within (candidate 1 12) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_77_iscube", "prompt": "#lang racket\n\n;; Write a function that takes an integer a and returns #t \n;; if this ingeger is a cube of some integer number.\n;; Note: you may assume the input is always valid.\n;; Examples:\n;; >>> (iscube 1)\n;; #t\n;; >>> (iscube 2)\n;; #f\n;; >>> (iscube -1)\n;; #t\n;; >>> (iscube 64)\n;; #t\n;; >>> (iscube 0)\n;; #t\n;; >>> (iscube 180)\n;; #f\n(define (iscube a)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate iscube))\n    (check-within (candidate 1) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate -1) #t 0.001)\n    (check-within (candidate 64) #t 0.001)\n    (check-within (candidate 180) #f 0.001)\n    (check-within (candidate 1000) #t 0.001)\n    (check-within (candidate 0) #t 0.001)\n    (check-within (candidate 1729) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_78_hex_key", "prompt": "#lang racket\n\n;; You have been tasked to write a function that receives \n;; a hexadecimal number as a string and counts the number of hexadecimal \n;; digits that are primes (prime number, or a prime, is a natural number \n;; greater than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are always uppercase.\n;; Examples:\n;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\")\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n    (check-within (candidate \"AB\") 1 0.001)\n    (check-within (candidate \"1077E\") 2 0.001)\n    (check-within (candidate \"ABED1A33\") 4 0.001)\n    (check-within (candidate \"2020\") 2 0.001)\n    (check-within (candidate \"123456789ABCDEF0\") 6 0.001)\n    (check-within (candidate \"112233445566778899AABBCCDDEEFF00\") 12 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "#lang racket\n\n;; You will be given a number in decimal form and your task is to convert it to\n;; binary format. The function should return a string, with each character representing a binary\n;; number. Each character in the string will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n;; The extra characters are there to help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 0) \"db0db\" 0.001)\n    (check-within (candidate 32) \"db100000db\" 0.001)\n    (check-within (candidate 103) \"db1100111db\" 0.001)\n    (check-within (candidate 15) \"db1111db\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_80_is_happy", "prompt": "#lang racket\n\n;; You are given a string s.\n;; Your task is to check if the string is haprkt or not.\n;; A string is haprkt if its length is at least 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy \"a\")\n;; #f\n;; >>> (is_happy \"aa\")\n;; #f\n;; >>> (is_happy \"abcd\")\n;; #t\n;; >>> (is_happy \"aabb\")\n;; #f\n;; >>> (is_happy \"adb\")\n;; #t\n;; >>> (is_happy \"xyy\")\n;; #f\n(define (is_happy s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-within (candidate \"a\") #f 0.001)\n    (check-within (candidate \"aa\") #f 0.001)\n    (check-within (candidate \"abcd\") #t 0.001)\n    (check-within (candidate \"aabb\") #f 0.001)\n    (check-within (candidate \"adb\") #t 0.001)\n    (check-within (candidate \"xyy\") #f 0.001)\n    (check-within (candidate \"iopaxpoi\") #t 0.001)\n    (check-within (candidate \"iopaxioi\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "#lang racket\n\n;; It is the last week of the semester and the teacher has to give the grades\n;; to students. The teacher has been making her own algorithm for grading.\n;; The only problem is, she has lost the code she used for grading.\n;; She has given you a list of GPAs for some students and you have to write \n;; a function that can output a list of letter grades using the following table:\n;;          GPA       |    Letter grade\n;;           4.0                A+\n;;         > 3.7                A \n;;         > 3.3                A- \n;;         > 3.0                B+\n;;         > 2.7                B \n;;         > 2.3                B-\n;;         > 2.0                C+\n;;         > 1.7                C\n;;         > 1.3                C-\n;;         > 1.0                D+ \n;;         > 0.7                D \n;;         > 0.0                D-\n;;           0.0                E\n;; Example:\n;; >>> (grade_equation (list 4.0 3 1.7 2 3.5))\n;; (list \"A+\" \"B\" \"C-\" \"C\" \"A-\")\n(define (numerical_letter_grade grades)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n    (check-within (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\" \"C\" \"A-\") 0.001)\n    (check-within (candidate (list 1.2)) (list \"D+\") 0.001)\n    (check-within (candidate (list 0.5)) (list \"D-\") 0.001)\n    (check-within (candidate (list 0.0)) (list \"E\") 0.001)\n    (check-within (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list \"D\" \"D-\" \"C-\" \"B\" \"B+\") 0.001)\n    (check-within (candidate (list 0.0 0.7)) (list \"E\" \"D-\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_82_prime_length", "prompt": "#lang racket\n\n;; Write a function that takes a string and returns #t if the string\n;; length is a prime number or #f otherwise\n;; Examples\n;; >>> (prime_length \"Hello\")\n;; #t\n;; >>> (prime_length \"abcdcba\")\n;; #t\n;; >>> (prime_length \"kittens\")\n;; #t\n;; >>> (prime_length \"orange\")\n;; #f\n(define (prime_length string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n    (check-within (candidate \"Hello\") #t 0.001)\n    (check-within (candidate \"abcdcba\") #t 0.001)\n    (check-within (candidate \"kittens\") #t 0.001)\n    (check-within (candidate \"orange\") #f 0.001)\n    (check-within (candidate \"wow\") #t 0.001)\n    (check-within (candidate \"world\") #t 0.001)\n    (check-within (candidate \"MadaM\") #t 0.001)\n    (check-within (candidate \"Wow\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"HI\") #t 0.001)\n    (check-within (candidate \"go\") #t 0.001)\n    (check-within (candidate \"gogo\") #f 0.001)\n    (check-within (candidate \"aaaaaaaaaaaaaaa\") #f 0.001)\n    (check-within (candidate \"Madam\") #t 0.001)\n    (check-within (candidate \"M\") #f 0.001)\n    (check-within (candidate \"0\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "#lang racket\n\n;; Given a positive integer n, return the count of the numbers of n-digit\n;; positive integers that start or end with 1.\n(define (starts_one_ends n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-within (candidate 1) 1 0.001)\n    (check-within (candidate 2) 18 0.001)\n    (check-within (candidate 3) 180 0.001)\n    (check-within (candidate 4) 1800 0.001)\n    (check-within (candidate 5) 18000 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_84_solve", "prompt": "#lang racket\n\n;; Given a positive integer N, return the total sum of its digits in binary.\n;; Example\n;; >>> (solve 1000)\n;; \"1\"\n;; >>> (solve 150)\n;; \"110\"\n;; >>> (solve 147)\n;; \"1100\"\n;; Variables:\n;;     @N integer\n;;          Constraints: 0 \u2264 N \u2264 10000.\n;; Output:\n;;      a string of binary number\n(define (solve N)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate 1000) \"1\" 0.001)\n    (check-within (candidate 150) \"110\" 0.001)\n    (check-within (candidate 147) \"1100\" 0.001)\n    (check-within (candidate 333) \"1001\" 0.001)\n    (check-within (candidate 963) \"10010\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_85_add", "prompt": "#lang racket\n\n;; Given a non-empty list of integers lst. add the even elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n;; 2\n(define (add lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-within (candidate (list 4 88)) 88 0.001)\n    (check-within (candidate (list 4 5 6 7 2 122)) 122 0.001)\n    (check-within (candidate (list 4 0 6 7)) 0 0.001)\n    (check-within (candidate (list 4 4 6 8)) 12 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "#lang racket\n\n;; Write a function that takes a string and returns an ordered version of it.\n;; Ordered version of string, is a string where all words (separated by space)\n;; are replaced by a new word where all the characters arranged in\n;; ascending order based on ascii value.\n;; Note: You should keep the order of words and blank spaces in the sentence.\n;; For example:\n;; >>> (anti_shuffle \"Hi\")\n;; \"Hi\"\n;; >>> (anti_shuffle \"hello\")\n;; \"ehllo\"\n;; >>> (anti_shuffle \"Hello World!!!\")\n;; \"Hello !!!Wdlor\"\n(define (anti_shuffle s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate anti_shuffle))\n    (check-within (candidate \"Hi\") \"Hi\" 0.001)\n    (check-within (candidate \"hello\") \"ehllo\" 0.001)\n    (check-within (candidate \"number\") \"bemnru\" 0.001)\n    (check-within (candidate \"abcd\") \"abcd\" 0.001)\n    (check-within (candidate \"Hello World!!!\") \"Hello !!!Wdlor\" 0.001)\n    (check-within (candidate \"\") \"\" 0.001)\n    (check-within (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_87_get_row", "prompt": "#lang racket\n\n;; You are given a 2 dimensional data, as a nested lists,\n;; which is similar to matrix, however, unlike matrices,\n;; each row may contain a different number of columns.\n;; Given lst, and integer x, find integers x in the list,\n;; and return list of lists, [(x1, y1), (x2, y2) ...] such that\n;; each list is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates initially by rows in ascending order.\n;; Also, sort coordinates of the row by columns in descending order.\n;; Examples:\n;; >>> (get_row (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n;; (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0))\n;; >>> (get_row (list ) 1)\n;; (list )\n;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n;; (list (list 2 2))\n(define (get_row lst x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)) 0.001)\n    (check-within (candidate (list ) 1) (list ) 0.001)\n    (check-within (candidate (list (list 1)) 2) (list ) 0.001)\n    (check-within (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_88_sort_array", "prompt": "#lang racket\n\n;; Given a list of non-negative integers, return a corkt of the given list after sorting,\n;; you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n;; or sort it in descending order if the sum( first index value, last index value) is even.\n;; Note:\n;; * don't change the given list.\n;; Examples:\n;; >>> (sort_array (list ))\n;; (list )\n;; >>> (sort_array (list 5))\n;; (list 5)\n;; >>> (sort_array (list 2 4 3 0 1 5))\n;; (list 0 1 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n(define (sort_array array)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 5)) (list 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3 4 5) 0.001)\n    (check-within (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0) 0.001)\n    (check-within (candidate (list 2 1)) (list 1 2) 0.001)\n    (check-within (candidate (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87) 0.001)\n    (check-within (candidate (list 21 14 23 11)) (list 23 21 14 11) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_89_encrypt", "prompt": "#lang racket\n\n;; Create a function encrypt that takes a string as an argument and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet should be rotated in a manner such that the letters \n;; shift down by two multiplied to two places.\n;; For example:\n;; >>> (encrypt \"hi\")\n;; \"lm\"\n;; >>> (encrypt \"asdfghjkl\")\n;; \"ewhjklnop\"\n;; >>> (encrypt \"gf\")\n;; \"kj\"\n;; >>> (encrypt \"et\")\n;; \"ix\"\n(define (encrypt s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n    (check-within (candidate \"hi\") \"lm\" 0.001)\n    (check-within (candidate \"asdfghjkl\") \"ewhjklnop\" 0.001)\n    (check-within (candidate \"gf\") \"kj\" 0.001)\n    (check-within (candidate \"et\") \"ix\" 0.001)\n    (check-within (candidate \"faewfawefaewg\") \"jeiajeaijeiak\" 0.001)\n    (check-within (candidate \"hellomyfriend\") \"lippsqcjvmirh\" 0.001)\n    (check-within (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" 0.001)\n    (check-within (candidate \"a\") \"e\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "#lang racket\n\n;; You are given a list of integers.\n;; Write a function next_smallest() that returns the 2nd smallest element of the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n(define (next_smallest lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n    (check-within (candidate (list 1 2 3 4 5)) 2 0.001)\n    (check-within (candidate (list 5 1 4 3 2)) 2 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list 1 1 1 1 0)) 1 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n    (check-within (candidate (list -35 34 12 -45)) -35 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_91_is_bored", "prompt": "#lang racket\n\n;; You'll be given a string of words, and your task is to count the number\n;; of boredoms. A boredom is a sentence that starts with the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-within (candidate \"Hello world\") 0 0.001)\n    (check-within (candidate \"Is the sky blue?\") 0 0.001)\n    (check-within (candidate \"I love It !\") 1 0.001)\n    (check-within (candidate \"bIt\") 0 0.001)\n    (check-within (candidate \"I feel good today. I will be productive. will kill It\") 2 0.001)\n    (check-within (candidate \"You and I are going for a walk\") 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_92_any_int", "prompt": "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n;; Returns false in any other cases.\n;; Examples\n;; >>> (any_int 5 2 7)\n;; #t\n;; >>> (any_int 3 2 2)\n;; #f\n;; >>> (any_int 3 -2 1)\n;; #t\n;; >>> (any_int 3.6 -2.2 2)\n;; #f\n(define (any_int x y z)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n    (check-within (candidate 2 3 1) #t 0.001)\n    (check-within (candidate 2.5 2 3) #f 0.001)\n    (check-within (candidate 1.5 5 3.5) #f 0.001)\n    (check-within (candidate 2 6 2) #f 0.001)\n    (check-within (candidate 4 2 2) #t 0.001)\n    (check-within (candidate 2.2 2.2 2.2) #f 0.001)\n    (check-within (candidate -4 6 2) #t 0.001)\n    (check-within (candidate 2 1 1) #t 0.001)\n    (check-within (candidate 3 4 7) #t 0.001)\n    (check-within (candidate 3.0 4 7) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_93_encode", "prompt": "#lang racket\n\n;; Write a function that takes a message, and encodes in such a \n;; way that it swaps case of all letters, replaces all vowels in \n;; the message with the letter that appears 2 places ahead of that \n;; vowel in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n(define (encode message)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-within (candidate \"TEST\") \"tgst\" 0.001)\n    (check-within (candidate \"Mudasir\") \"mWDCSKR\" 0.001)\n    (check-within (candidate \"YES\") \"ygs\" 0.001)\n    (check-within (candidate \"This is a message\") \"tHKS KS C MGSSCGG\" 0.001)\n    (check-within (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "#lang racket\n\n;; You are given a list of integers.\n;; You need to find the largest prime value and return the sum of its digits.\n;; Examples:\n;; >>> (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n;; 10\n;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n;; 25\n;; >>> (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n;; 13\n;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))\n;; 11\n;; >>> (skjkasdkd (list 0 81 12 3 1 21))\n;; 3\n;; >>> (skjkasdkd (list 0 8 1 2 1 7))\n;; 7\n(define (skjkasdkd lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n    (check-within (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3)) 10 0.001)\n    (check-within (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1)) 25 0.001)\n    (check-within (candidate (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3)) 13 0.001)\n    (check-within (candidate (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6)) 11 0.001)\n    (check-within (candidate (list 0 81 12 3 1 21)) 3 0.001)\n    (check-within (candidate (list 0 8 1 2 1 7)) 7 0.001)\n    (check-within (candidate (list 8191)) 19 0.001)\n    (check-within (candidate (list 8191 123456 127 7)) 19 0.001)\n    (check-within (candidate (list 127 97 8192)) 10 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"))) #t 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\"))) #f 0.001)\n    (check-within (candidate #hash((\"p\" .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f 0.001)\n    (check-within (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"))) #f 0.001)\n    (check-within (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\"))) #t 0.001)\n    (check-within (candidate #hash((\"fruit\" .  \"Orange\") (\"taste\" .  \"Sweet\"))) #t 0.001)\n    (check-within (candidate #hash()) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "#lang racket\n\n;; Implement a function that takes an non-negative integer and returns a list of the first n\n;; integers that are prime numbers and less than n.\n;; for example:\n;; >>> (count_up_to 5)\n;; (list 2 3)\n;; >>> (count_up_to 11)\n;; (list 2 3 5 7)\n;; >>> (count_up_to 0)\n;; (list )\n;; >>> (count_up_to 20)\n;; (list 2 3 5 7 11 13 17 19)\n;; >>> (count_up_to 1)\n;; (list )\n;; >>> (count_up_to 18)\n;; (list 2 3 5 7 11 13 17)\n(define (count_up_to n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_up_to))\n    (check-within (candidate 5) (list 2 3) 0.001)\n    (check-within (candidate 6) (list 2 3 5) 0.001)\n    (check-within (candidate 7) (list 2 3 5) 0.001)\n    (check-within (candidate 10) (list 2 3 5 7) 0.001)\n    (check-within (candidate 0) (list ) 0.001)\n    (check-within (candidate 22) (list 2 3 5 7 11 13 17 19) 0.001)\n    (check-within (candidate 1) (list ) 0.001)\n    (check-within (candidate 18) (list 2 3 5 7 11 13 17) 0.001)\n    (check-within (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43) 0.001)\n    (check-within (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_97_multiply", "prompt": "#lang racket\n\n;; Complete the function that takes two integers and returns \n;; the product of their unit digits.\n;; Assume the input is always valid.\n;; Examples:\n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n(define (multiply a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n    (check-within (candidate 148 412) 16 0.001)\n    (check-within (candidate 19 28) 72 0.001)\n    (check-within (candidate 2020 1851) 0 0.001)\n    (check-within (candidate 14 -15) 20 0.001)\n    (check-within (candidate 76 67) 42 0.001)\n    (check-within (candidate 17 27) 49 0.001)\n    (check-within (candidate 0 1) 0 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_98_count_upper", "prompt": "#lang racket\n\n;; Given a string s, count the number of uppercase vowels in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>> (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define (count_upper s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-within (candidate \"aBCdEf\") 1 0.001)\n    (check-within (candidate \"abcdefg\") 0 0.001)\n    (check-within (candidate \"dBBE\") 0 0.001)\n    (check-within (candidate \"B\") 0 0.001)\n    (check-within (candidate \"U\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n    (check-within (candidate \"EEEE\") 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "#lang racket\n\n;; Create a function that takes a value (string) representing a number\n;; and returns the closest integer to it. If the number is equidistant\n;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding away from zero means that if the given number is equidistant\n;; from two integers, the one you should return is the one that is the\n;; farthest from zero. For example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"-14.5\") should return -15.\n(define (closest_integer value)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-within (candidate \"10\") 10 0.001)\n    (check-within (candidate \"14.5\") 15 0.001)\n    (check-within (candidate \"-15.5\") -16 0.001)\n    (check-within (candidate \"15.3\") 15 0.001)\n    (check-within (candidate \"0\") 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "#lang racket\n\n;; Given a positive integer n, you have to make a pile of n levels of stones.\n;; The first level has n stones.\n;; The number of stones in the next level is:\n;;     - the next odd number if n is odd.\n;;     - the next even number if n is even.\n;; Return the number of stones in each level in a list, where element at index\n;; i represents the number of stones in the level (i+1).\n;; Examples:\n;; >>> (make_a_pile 3)\n;; (list 3 5 7)\n(define (make_a_pile n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n    (check-within (candidate 3) (list 3 5 7) 0.001)\n    (check-within (candidate 4) (list 4 6 8 10) 0.001)\n    (check-within (candidate 5) (list 5 7 9 11 13) 0.001)\n    (check-within (candidate 6) (list 6 8 10 12 14 16) 0.001)\n    (check-within (candidate 8) (list 8 10 12 14 16 18 20 22) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_101_words_string", "prompt": "#lang racket\n\n;; You will be given a string of words separated by commas or spaces. Your task is\n;; to split the string into words and return a list of the words.\n;; For example:\n;; >>> (words_string \"Hi, my name is John\")\n;; (list \"Hi\" \"my\" \"name\" \"is\" \"John\")\n;; >>> (words_string \"One, two, three, four, five, six\")\n;; (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\")\n(define (words_string s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_string))\n    (check-within (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\" \"is\" \"John\") 0.001)\n    (check-within (candidate \"One, two, three, four, five, six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\") 0.001)\n    (check-within (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\") 0.001)\n    (check-within (candidate \"\") (list ) 0.001)\n    (check-within (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_102_choose_num", "prompt": "#lang racket\n\n;; This function takes two positive numbers x and y and returns the\n;; biggest even integer number that is in the range [x, y] inclusive. If \n;; there's no such number, then the function should return -1.\n;; For example:\n;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num x y)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n    (check-within (candidate 12 15) 14 0.001)\n    (check-within (candidate 13 12) -1 0.001)\n    (check-within (candidate 33 12354) 12354 0.001)\n    (check-within (candidate 5234 5233) -1 0.001)\n    (check-within (candidate 6 29) 28 0.001)\n    (check-within (candidate 27 10) -1 0.001)\n    (check-within (candidate 7 7) -1 0.001)\n    (check-within (candidate 546 546) 546 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "#lang racket\n\n;; You are given two positive integers n and m, and your task is to compute the\n;; average of the integers from n through m (including n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n    (check-within (candidate 1 5) \"0b11\" 0.001)\n    (check-within (candidate 7 13) \"0b1010\" 0.001)\n    (check-within (candidate 964 977) \"0b1111001010\" 0.001)\n    (check-within (candidate 996 997) \"0b1111100100\" 0.001)\n    (check-within (candidate 560 851) \"0b1011000010\" 0.001)\n    (check-within (candidate 185 546) \"0b101101110\" 0.001)\n    (check-within (candidate 362 496) \"0b110101101\" 0.001)\n    (check-within (candidate 350 902) \"0b1001110010\" 0.001)\n    (check-within (candidate 197 233) \"0b11010111\" 0.001)\n    (check-within (candidate 7 5) -1 0.001)\n    (check-within (candidate 5 1) -1 0.001)\n    (check-within (candidate 5 5) \"0b101\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "#lang racket\n\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n;; (list )\n(define (unique_digits x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-within (candidate (list 15 33 1422 1)) (list 1 15 33) 0.001)\n    (check-within (candidate (list 152 323 1422 10)) (list ) 0.001)\n    (check-within (candidate (list 12345 2033 111 151)) (list 111 151) 0.001)\n    (check-within (candidate (list 135 103 31)) (list 31 135) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_105_by_length", "prompt": "#lang racket\n\n;; Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;;   If the list is empty, return an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;;   If the list has any strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\")\n(define (by_length arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-within (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\") 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -1 55)) (list \"One\") 0.001)\n    (check-within (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\") 0.001)\n    (check-within (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_106_f", "prompt": "#lang racket\n\n;; Implement the function f that takes n as a parameter,\n;; and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n;; or the sum of numbers from 1 to i otherwise.\n;; i starts from 1.\n;; the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n;; Example:\n;; >>> (f 5)\n;; (list 1 2 6 24 15)\n(define (f n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5) (list 1 2 6 24 15) 0.001)\n    (check-within (candidate 7) (list 1 2 6 24 15 720 28) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n    (check-within (candidate 3) (list 1 2 6) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "#lang racket\n\n;; Given a positive integer n, return a list that has the number of even and odd\n;; integer palindromes that fall within the range(1, n), inclusive.\n;; Example 1:\n;; >>> (even_odd_palindrome 3)\n;; (list 1 2)\n;;     Explanation:\n;;     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n;; Example 2:\n;; >>> (even_odd_palindrome 12)\n;; (list 4 6)\n;;     Explanation:\n;;     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n;; Note:\n;;     1. 1 <= n <= 10^3\n;;     2. returned list has the number of even and odd integer palindromes respectively.\n(define (even_odd_palindrome n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_palindrome))\n    (check-within (candidate 123) (list 8 13) 0.001)\n    (check-within (candidate 12) (list 4 6) 0.001)\n    (check-within (candidate 3) (list 1 2) 0.001)\n    (check-within (candidate 63) (list 6 8) 0.001)\n    (check-within (candidate 25) (list 5 6) 0.001)\n    (check-within (candidate 19) (list 4 6) 0.001)\n    (check-within (candidate 9) (list 4 5) 0.001)\n    (check-within (candidate 1) (list 0 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_108_count_nums", "prompt": "#lang racket\n\n;; Write a function count_nums which takes a list of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list -1 -2 0)) 0 0.001)\n    (check-within (candidate (list 1 1 2 -2 3 4 5)) 6 0.001)\n    (check-within (candidate (list 1 6 9 -6 0 1 5)) 5 0.001)\n    (check-within (candidate (list 1 100 98 -7 1 -1)) 4 0.001)\n    (check-within (candidate (list 12 23 34 -45 -56 0)) 5 0.001)\n    (check-within (candidate (list 0 1)) 1 0.001)\n    (check-within (candidate (list 1)) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "#lang racket\n\n;; We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n;; numbers in the list will be randomly ordered. Your task is to determine if\n;; it is possible to get a list sorted in non-decreasing order by performing \n;; the following operation on the given list:\n;;     You are allowed to perform right shift operation any number of times.\n;; One right shift operation means shifting all elements of the list by one\n;; position in the right direction. The last element of the list will be moved to\n;; the starting position in the list i.e. 0th index. \n;; If it is possible to obtain the sorted list by performing the above operation\n;; then return #t else return #f.\n;; If the given list is empty then return #t.\n;; Note: The given list is guaranteed to have unique elements.\n;; For Example:\n;; >>> (move_one_ball (list 3 4 5 1 2))\n;; #t\n;; Explanation: By performin 2 right shift operations, non-decreasing order can\n;;              be achieved for the given list.\n;; >>> (move_one_ball (list 3 5 4 1 2))\n;; #f\n;; Explanation:It is not possible to get non-decreasing order for the given\n;;             list by performing any number of right shift operations.\n(define (move_one_ball arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_one_ball))\n    (check-within (candidate (list 3 4 5 1 2)) #t 0.001)\n    (check-within (candidate (list 3 5 10 1 2)) #t 0.001)\n    (check-within (candidate (list 4 3 1 2)) #f 0.001)\n    (check-within (candidate (list 3 5 4 1 2)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_110_exchange", "prompt": "#lang racket\n\n;; In this problem, you will implement a function that takes two lists of numbers,\n;; and determines whether it is possible to perform an exchange of elements\n;; between them to make lst1 a list of only even numbers.\n;; There is no limit on the number of exchanged elements between lst1 and lst2.\n;; If it is possible to exchange elements between the lst1 and lst2 to make\n;; all the elements of lst1 to be even, return \"YES\".\n;; Otherwise, return \"NO\".\n;; For example:\n;; >>> (exchange (list 1 2 3 4) (list 1 2 3 4))\n;; \"YES\"\n;; >>> (exchange (list 1 2 3 4) (list 1 5 3 4))\n;; \"NO\"\n;; It is assumed that the input lists will be non-empty.\n(define (exchange lst1 lst2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate exchange))\n    (check-within (candidate (list 1 2 3 4) (list 1 2 3 4)) \"YES\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 1 5 3 4)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 2 1 4 3)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 4)) \"YES\" 0.001)\n    (check-within (candidate (list 5 7 3) (list 2 6 3)) \"NO\" 0.001)\n    (check-within (candidate (list 3 2 6 1 8 9) (list 3 5 5 1 1 1)) \"NO\" 0.001)\n    (check-within (candidate (list 100 200) (list 200 200)) \"YES\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_111_histogram", "prompt": "#lang racket\n\n;; Given a string representing a space separated lowercase letters, return a hash\n;; of the letter with the most repetition and containing the corresponding count.\n;; If several letters have the same occurrence, return all of them.\n;; Example:\n;; >>> (histogram \"a b c\")\n;; #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1))\n;; >>> (histogram \"a b b a\")\n;; #hash((\"a\" .  2) (\"b\" .  2))\n;; >>> (histogram \"a b c a b\")\n;; #hash((\"a\" .  2) (\"b\" .  2))\n;; >>> (histogram \"b b b b a\")\n;; #hash((\"b\" .  4))\n;; >>> (histogram \"\")\n;; #hash()\n(define (histogram test)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n    (check-within (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)) 0.001)\n    (check-within (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1) (\"d\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"b b b b a\") #hash((\"b\" .  4)) 0.001)\n    (check-within (candidate \"r t g\") #hash((\"r\" .  1) (\"t\" .  1) (\"g\" .  1)) 0.001)\n    (check-within (candidate \"\") #hash() 0.001)\n    (check-within (candidate \"a\") #hash((\"a\" .  1)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "#lang racket\n\n;; Task\n;; We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n;; then check if the result string is palindrome.\n;; A string is called palindrome if it reads the same backward as forward.\n;; You should return a list containing the result string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n(define (reverse_delete s c)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n    (check-within (candidate \"abcde\" \"ae\") (list \"bcd\" #f) 0.001)\n    (check-within (candidate \"abcdef\" \"b\") (list \"acdef\" #f) 0.001)\n    (check-within (candidate \"abcdedcba\" \"ab\") (list \"cdedc\" #t) 0.001)\n    (check-within (candidate \"dwik\" \"w\") (list \"dik\" #f) 0.001)\n    (check-within (candidate \"a\" \"a\") (list \"\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t) 0.001)\n    (check-within (candidate \"vabba\" \"v\") (list \"abba\" #t) 0.001)\n    (check-within (candidate \"mamma\" \"mia\") (list \"\" #t) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_113_odd_count", "prompt": "#lang racket\n\n;; Given a list of strings, where each string consists of only digits, return a list.\n;; Each element i of the output should be \"the number of odd elements in the\n;; string i of the input.\" where all the i's should be replaced by the number\n;; of odd digits in the i'th string of the input.\n;; >>> (odd_count (list \"1234567\"))\n;; (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n;; >>> (odd_count (list \"3\" \"11111111\"))\n;; (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\n(define (odd_count lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n    (check-within (candidate (list \"1234567\")) (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\") 0.001)\n    (check-within (candidate (list \"3\" \"11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\") 0.001)\n    (check-within (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "#lang racket\n\n;; Given a list of integers nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n    (check-within (candidate (list 2 3 4 1 2 4)) 1 0.001)\n    (check-within (candidate (list -1 -2 -3)) -6 0.001)\n    (check-within (candidate (list -1 -2 -3 2 -10)) -14 0.001)\n    (check-within (candidate (list -9999999999999999)) -9999999999999999 0.001)\n    (check-within (candidate (list 0 10 20 1000000)) 0 0.001)\n    (check-within (candidate (list -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 100 -1 -2 -3 10 -5)) -6 0.001)\n    (check-within (candidate (list 10 11 13 8 3 4)) 3 0.001)\n    (check-within (candidate (list 100 -33 32 -1 0 -2)) -33 0.001)\n    (check-within (candidate (list -10)) -10 0.001)\n    (check-within (candidate (list 7)) 7 0.001)\n    (check-within (candidate (list 1 -1)) -1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_115_max_fill", "prompt": "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents a single well,\n;; and each 1 in a row represents a single unit of water.\n;; Each well has a corresponding bucket that can be used to extract water from it, \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets to empty the wells.\n;; Output the number of times you need to lower the buckets.\n;; Example 1:\n;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;;     * all wells have the same length\n;;     * 1 <= grid.length <= 10^2\n;;     * 1 <= grid[:,1].length <= 10^2\n;;     * grid[i][j] -> 0 | 1\n;;     * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n    (check-within (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6 0.001)\n    (check-within (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5 0.001)\n    (check-within (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4 0.001)\n    (check-within (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_116_sort_array", "prompt": "#lang racket\n\n;; In this Kata, you have to sort a list of non-negative integers according to\n;; number of ones in their binary representation in ascending order.\n;; For similar number of ones, sort based on decimal value.\n;; It must be implemented like this:\n;; >>> (sort_array (list 1 5 2 3 4))\n;; (list 1 2 3 4 5)\n;; >>> (sort_array (list -2 -3 -4 -5 -6))\n;; (list -6 -5 -4 -3 -2)\n;; >>> (sort_array (list 1 0 2 3 4))\n;; (list 0 1 2 3 4)\n(define (sort_array arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n    (check-within (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5) 0.001)\n    (check-within (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3) 0.001)\n    (check-within (candidate (list 1 0 2 3 4)) (list 0 1 2 4 3) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4 3 3 5 5 5 7 77) 0.001)\n    (check-within (candidate (list 3 6 44 12 32 5)) (list 32 3 5 6 12 44) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n    (check-within (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_117_select_words", "prompt": "#lang racket\n\n;; Given a string s and a natural number n, you have been tasked to implement \n;; a function that returns a list of all words from string s that contain exactly \n;; n consonants, in order these words appear in the string s.\n;; If the string s is empty then the function should return an empty list.\n;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-within (candidate \"Mary had a little lamb\" 4) (list \"little\") 0.001)\n    (check-within (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\") 0.001)\n    (check-within (candidate \"simple white space\" 2) (list ) 0.001)\n    (check-within (candidate \"Hello world\" 4) (list \"world\") 0.001)\n    (check-within (candidate \"Uncle sam\" 3) (list \"Uncle\") 0.001)\n    (check-within (candidate \"\" 4) (list ) 0.001)\n    (check-within (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "#lang racket\n\n;; You are given a word. Your task is to find the closest vowel that stands between \n;; two consonants from the right side of the word (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n;; find any vowel met the above condition. \n;; You may assume that the given string contains English letter only.\n;; Example:\n;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\")\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n    (check-within (candidate \"yogurt\") \"u\" 0.001)\n    (check-within (candidate \"full\") \"u\" 0.001)\n    (check-within (candidate \"easy\") \"\" 0.001)\n    (check-within (candidate \"eAsy\") \"\" 0.001)\n    (check-within (candidate \"ali\") \"\" 0.001)\n    (check-within (candidate \"bad\") \"a\" 0.001)\n    (check-within (candidate \"most\") \"o\" 0.001)\n    (check-within (candidate \"ab\") \"\" 0.001)\n    (check-within (candidate \"ba\") \"\" 0.001)\n    (check-within (candidate \"quick\") \"\" 0.001)\n    (check-within (candidate \"anime\") \"i\" 0.001)\n    (check-within (candidate \"Asia\") \"\" 0.001)\n    (check-within (candidate \"Above\") \"o\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_119_match_parens", "prompt": "#lang racket\n\n;; You are given a list of two strings, both strings consist of open\n;; parentheses '(' or close parentheses ')' only.\n;; Your job is to check if it is possible to concatenate the two strings in\n;; some order, that the resulting string will be good.\n;; A string S is considered to be good if and only if all parentheses in S\n;; are balanced. For example: the string '(())()' is good, while the string\n;; '())' is not.\n;; Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n;; Examples:\n;; >>> (match_parens (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n;; \"No\"\n(define (match_parens lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n    (check-within (candidate (list \"()(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \")\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(())\" \"())())\")) \"No\" 0.001)\n    (check-within (candidate (list \")())\" \"(()()(\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"(())))\" \"(()())((\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"()\" \"())\")) \"No\" 0.001)\n    (check-within (candidate (list \"(()(\" \"()))()\")) \"Yes\" 0.001)\n    (check-within (candidate (list \"((((\" \"((())\")) \"No\" 0.001)\n    (check-within (candidate (list \")(()\" \"(()(\")) \"No\" 0.001)\n    (check-within (candidate (list \")(\" \")(\")) \"No\" 0.001)\n    (check-within (candidate (list \"(\" \")\")) \"Yes\" 0.001)\n    (check-within (candidate (list \")\" \"(\")) \"Yes\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_120_maximum", "prompt": "#lang racket\n\n;; Given a list arr of integers and a positive integer k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n;; Example 1:\n;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example 2:\n;; >>> (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum (list -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;;     1. The length of the list will be in the range of [1, 1000].\n;;     2. The elements in the list will be in the range of [-1000, 1000].\n;;     3. 0 <= k <= len(arr)\n(define (maximum arr k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate (list -3 -4 5) 3) (list -4 -3 5) 0.001)\n    (check-within (candidate (list 4 -4 4) 2) (list 4 4) 0.001)\n    (check-within (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2) 0.001)\n    (check-within (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123) 0.001)\n    (check-within (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20) 0.001)\n    (check-within (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15) 0.001)\n    (check-within (candidate (list -1 0 2 5 3 -10) 2) (list 3 5) 0.001)\n    (check-within (candidate (list 1 0 5 -7) 1) (list 5) 0.001)\n    (check-within (candidate (list 4 -4) 2) (list -4 4) 0.001)\n    (check-within (candidate (list -10 10) 2) (list -10 10) 0.001)\n    (check-within (candidate (list 1 2 3 -23 243 -400 0) 0) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_121_solution", "prompt": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-within (candidate (list 5 8 7 1)) 12 0.001)\n    (check-within (candidate (list 3 3 3 3 3)) 9 0.001)\n    (check-within (candidate (list 30 13 24 321)) 0 0.001)\n    (check-within (candidate (list 5 9)) 5 0.001)\n    (check-within (candidate (list 2 4 8)) 0 0.001)\n    (check-within (candidate (list 30 13 23 32)) 23 0.001)\n    (check-within (candidate (list 3 13 2 9)) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_122_add_elements", "prompt": "#lang racket\n\n;; Given a non-empty list of integers arr and an integer k, return\n;; the sum of the elements with at most two digits from the first k elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7 8 9) 4)\n;; 24\n;; Constraints:\n;;     1. 1 <= len(arr) <= 100\n;;     2. 1 <= k <= len(arr)\n(define (add_elements arr k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n    (check-within (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4 0.001)\n    (check-within (candidate (list 111 121 3 4000 5 6) 2) 0 0.001)\n    (check-within (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125 0.001)\n    (check-within (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24 0.001)\n    (check-within (candidate (list 1) 1) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "#lang racket\n\n;; Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n;; The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n;; as follows: start with any positive integer n. Then each term is obtained from the \n;; previous term as follows: if the previous term is even, the next term is one half of \n;; the previous term. If the previous term is odd, the next term is 3 times the previous\n;; term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n;; Note: \n;;     1. Collatz(1) is [1].\n;;     2. returned list sorted in increasing order.\n;; For example:\n;; get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n;; >>> (get_odd_collatz 5)\n;; (list 1 5)\n(define (get_odd_collatz n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n    (check-within (candidate 14) (list 1 5 7 11 13 17) 0.001)\n    (check-within (candidate 5) (list 1 5) 0.001)\n    (check-within (candidate 12) (list 1 3 5) 0.001)\n    (check-within (candidate 1) (list 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_124_valid_date", "prompt": "#lang racket\n\n;; You have to write a function which validates a given date string and\n;; returns #t if the date is valid otherwise #f.\n;; The date is valid if all of the following rules are satisfied:\n;; 1. The date string is not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n;; >>> (valid_date \"03-11-2000\")\n;; #t\n;; >>> (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date \"04-0-2040\")\n;; #f\n;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date \"06/04/2020\")\n;; #f\n(define (valid_date date)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n    (check-within (candidate \"03-11-2000\") #t 0.001)\n    (check-within (candidate \"15-01-2012\") #f 0.001)\n    (check-within (candidate \"04-0-2040\") #f 0.001)\n    (check-within (candidate \"06-04-2020\") #t 0.001)\n    (check-within (candidate \"01-01-2007\") #t 0.001)\n    (check-within (candidate \"03-32-2011\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"04-31-3000\") #f 0.001)\n    (check-within (candidate \"06-06-2005\") #t 0.001)\n    (check-within (candidate \"21-31-2000\") #f 0.001)\n    (check-within (candidate \"04-12-2003\") #t 0.001)\n    (check-within (candidate \"04122003\") #f 0.001)\n    (check-within (candidate \"20030412\") #f 0.001)\n    (check-within (candidate \"2003-04\") #f 0.001)\n    (check-within (candidate \"2003-04-12\") #f 0.001)\n    (check-within (candidate \"04-2003\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_125_split_words", "prompt": "#lang racket\n\n;; Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n;; should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n;; Examples\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n    (check-within (candidate \"Hello world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello,world!\") (list \"Hello\" \"world!\") 0.001)\n    (check-within (candidate \"Hello world,!\") (list \"Hello\" \"world,!\") 0.001)\n    (check-within (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\" \"!\") 0.001)\n    (check-within (candidate \"abcdef\") 3 0.001)\n    (check-within (candidate \"aaabb\") 2 0.001)\n    (check-within (candidate \"aaaBb\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "#lang racket\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n    (check-within (candidate (list 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7)) #t 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 7)) #f 0.001)\n    (check-within (candidate (list )) #t 0.001)\n    (check-within (candidate (list 1)) #t 0.001)\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 2 2 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 3 3 3 4)) #f 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_127_intersection", "prompt": "#lang racket\n\n;; You are given two intervals,\n;; where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n;; The given intervals are closed which means that the interval (start, end)\n;; includes both start and end.\n;; For each given interval, it is assumed that its start is less or equal its end.\n;; Your task is to determine whether the length of intersection of these two \n;; intervals is a prime number.\n;; Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n;; which its length is 1, which not a prime number.\n;; If the length of the intersection is a prime number, return \"YES\",\n;; otherwise, return \"NO\".\n;; If the two intervals don't intersect, return \"NO\".\n;; [input/output] samples:\n;; >>> (intersection (list 1 2) (list 2 3))\n;; \"NO\"\n;; >>> (intersection (list -1 1) (list 0 4))\n;; \"NO\"\n;; >>> (intersection (list -3 -1) (list -5 5))\n;; \"YES\"\n(define (intersection interval1 interval2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection))\n    (check-within (candidate (list 1 2) (list 2 3)) \"NO\" 0.001)\n    (check-within (candidate (list -1 1) (list 0 4)) \"NO\" 0.001)\n    (check-within (candidate (list -3 -1) (list -5 5)) \"YES\" 0.001)\n    (check-within (candidate (list -2 2) (list -4 0)) \"YES\" 0.001)\n    (check-within (candidate (list -11 2) (list -1 -1)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 3 5)) \"NO\" 0.001)\n    (check-within (candidate (list 1 2) (list 1 2)) \"NO\" 0.001)\n    (check-within (candidate (list -2 -2) (list -3 -2)) \"NO\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "#lang racket\n\n;; You are given a list arr of integers and you need to return\n;; sum of magnitudes of integers multiplied by product of all signs\n;; of each number in the list, represented by 1, -1 or 0.\n;; Note: return #f for empty arr.\n;; Example:\n;; >>> (prod_signs (list 1 2 2 -4))\n;; 9\n;; >>> (prod_signs (list 0 1))\n;; 0\n;; >>> (prod_signs (list ))\n;; #f\n(define (prod_signs arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n    (check-within (candidate (list 1 2 2 -4)) -9 0.001)\n    (check-within (candidate (list 0 1)) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 -1 1)) -10 0.001)\n    (check-within (candidate (list )) #f 0.001)\n    (check-within (candidate (list 2 4 1 2 -1 -1 9)) 20 0.001)\n    (check-within (candidate (list -1 1 -1 1)) 4 0.001)\n    (check-within (candidate (list -1 1 1 1)) -4 0.001)\n    (check-within (candidate (list -1 1 1 0)) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_129_minPath", "prompt": "#lang racket\n\n;; Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n;; each cell of the grid contains a value. Every integer in the range [1, N * N]\n;; inclusive appears exactly once on the cells of the grid.\n;; You have to find the minimum path of length k in the grid. You can start\n;; from any cell, and in each step you can move to any of the neighbor cells,\n;; in other words, you can go to cells which share an edge with you current\n;; cell.\n;; Please note that a path of length k means visiting exactly k cells (not\n;; necessarily distinct).\n;; You CANNOT go off the grid.\n;; A path A (of length k) is considered less than a path B (of length k) if\n;; after making the ordered lists of the values on the cells that A and B go\n;; through (let's call them lst_A and lst_B), lst_A is lexicographically less\n;; than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n;; such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n;; lst_A[j] = lst_B[j].\n;; It is guaranteed that the answer is unique.\n;; Return an ordered list of the values on the cells that the minimum path go through.\n;; Examples:    \n;; >>> (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)\n;; (list 1 2 1)\n;; >>> (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)\n;; (list 1)\n(define (minPath grid k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minPath))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)\n    (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)\n    (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)\n    (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)\n    (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)\n    (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)\n    (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2) 0.001)\n    (check-within (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_130_tri", "prompt": "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n;; the last couple centuries. However, what people don't know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n;; tri(1) = 3\n;; tri(n) = 1 + n / 2, if n is even.\n;; tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n;; For example:\n;; tri(2) = 1 + (2 / 2) = 2\n;; tri(4) = 3\n;; tri(3) = tri(2) + tri(1) + tri(4)\n;;        = 2 + 3 + 3 = 8 \n;; You are given a non-negative integer number n, you have to a return a list of the \n;; first n + 1 numbers of the Tribonacci sequence.\n;; Examples:\n;; >>> (tri 3)\n;; (list 1 3 2 8)\n(define (tri n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-within (candidate 3) (list 1 3 2 8) 0.001)\n    (check-within (candidate 4) (list 1 3 2 8 3) 0.001)\n    (check-within (candidate 5) (list 1 3 2 8 3 15) 0.001)\n    (check-within (candidate 6) (list 1 3 2 8 3 15 4) 0.001)\n    (check-within (candidate 7) (list 1 3 2 8 3 15 4 24) 0.001)\n    (check-within (candidate 8) (list 1 3 2 8 3 15 4 24 5) 0.001)\n    (check-within (candidate 9) (list 1 3 2 8 3 15 4 24 5 35) 0.001)\n    (check-within (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11) 0.001)\n    (check-within (candidate 0) (list 1) 0.001)\n    (check-within (candidate 1) (list 1 3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_131_digits", "prompt": "#lang racket\n\n;; Given a positive integer n, return the product of the odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n    (check-within (candidate 5) 5 0.001)\n    (check-within (candidate 54) 5 0.001)\n    (check-within (candidate 120) 1 0.001)\n    (check-within (candidate 5014) 5 0.001)\n    (check-within (candidate 98765) 315 0.001)\n    (check-within (candidate 5576543) 2625 0.001)\n    (check-within (candidate 2468) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_132_is_nested", "prompt": "#lang racket\n\n;; Create a function that takes a string as input which contains only square brackets.\n;; The function should return #t if and only if there is a valid subsequence of brackets \n;; where at least one bracket in the subsequence is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\")\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define (is_nested string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n    (check-within (candidate \"[[]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]][[[[[]\") #f 0.001)\n    (check-within (candidate \"[][]\") #f 0.001)\n    (check-within (candidate \"[]\") #f 0.001)\n    (check-within (candidate \"[[[[]]]]\") #t 0.001)\n    (check-within (candidate \"[]]]]]]]]]]\") #f 0.001)\n    (check-within (candidate \"[][][[]]\") #t 0.001)\n    (check-within (candidate \"[[]\") #f 0.001)\n    (check-within (candidate \"[]]\") #f 0.001)\n    (check-within (candidate \"[[]][[\") #t 0.001)\n    (check-within (candidate \"[[][]]\") #t 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"[[[[[[[[\") #f 0.001)\n    (check-within (candidate \"]]]]]]]]\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 2.0 3.0)) 14 0.001)\n    (check-within (candidate (list 1.0 3.0 5.0 7.0)) 84 0.001)\n    (check-within (candidate (list 1.4 4.2 0.0)) 29 0.001)\n    (check-within (candidate (list -2.4 1.0 1.0)) 6 0.001)\n    (check-within (candidate (list 100.0 1.0 15.0 2.0)) 10230 0.001)\n    (check-within (candidate (list 10000.0 10000.0)) 200000000 0.001)\n    (check-within (candidate (list -1.4 4.6 6.3)) 75 0.001)\n    (check-within (candidate (list -1.4 17.9 18.9 19.9)) 1086 0.001)\n    (check-within (candidate (list 0.0)) 0 0.001)\n    (check-within (candidate (list -1.0)) 1 0.001)\n    (check-within (candidate (list -1.0 1.0 0.0)) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "#lang racket\n\n;; Create a function that returns #t if the last character\n;; of a given string is an alphabetical character and is not\n;; a part of a word, and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n(define (check_if_last_char_is_a_letter txt)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n    (check-within (candidate \"apple\") #f 0.001)\n    (check-within (candidate \"apple pi e\") #t 0.001)\n    (check-within (candidate \"eeeee\") #f 0.001)\n    (check-within (candidate \"A\") #t 0.001)\n    (check-within (candidate \"Pumpkin pie \") #f 0.001)\n    (check-within (candidate \"Pumpkin pie 1\") #f 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"eeeee e \") #f 0.001)\n    (check-within (candidate \"apple pie\") #f 0.001)\n    (check-within (candidate \"apple pi e \") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "#lang racket\n\n;; Create a function which returns the largest index of an element which\n;; is not greater than or equal to the element immediately preceding it. If\n;; no such element exists then return -1. The given list will not contain\n;; duplicate values.\n;; Examples:\n;; >>> (can_arrange (list 1 2 4 3 5))\n;; 3\n;; >>> (can_arrange (list 1 2 3))\n;; -1\n(define (can_arrange arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate can_arrange))\n    (check-within (candidate (list 1 2 4 3 5)) 3 0.001)\n    (check-within (candidate (list 1 2 4 5)) -1 0.001)\n    (check-within (candidate (list 1 4 2 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 4 8 5 7 3)) 4 0.001)\n    (check-within (candidate (list )) -1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "#lang racket\n\n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive integers in a list.\n;; If there is no negative or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n    (check-within (candidate (list 2 4 1 3 5 7)) (list #f 1) 0.001)\n    (check-within (candidate (list 2 4 1 3 5 7 0)) (list #f 1) 0.001)\n    (check-within (candidate (list 1 3 2 4 5 6 -2)) (list -2 1) 0.001)\n    (check-within (candidate (list 4 5 3 6 2 7 -7)) (list -7 2) 0.001)\n    (check-within (candidate (list 7 3 8 4 9 2 5 -9)) (list -9 2) 0.001)\n    (check-within (candidate (list )) (list #f #f) 0.001)\n    (check-within (candidate (list 0)) (list #f #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6)) (list -1 #f) 0.001)\n    (check-within (candidate (list -1 -3 -5 -6 0)) (list -1 #f) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 1)) (list -3 1) 0.001)\n    (check-within (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_137_compare_one", "prompt": "#lang racket\n\n;; Create a function that takes integers, floats, or strings representing\n;; real numbers, and returns the larger variable in its given variable type.\n;; Return #f if the values are equal.\n;; Note: If a real number is represented as a string, the floating point might be . or ,\n;; >>> (compare_one 1 2.5)\n;; 2.5\n;; >>> (compare_one 1 \"2,3\")\n;; \"2,3\"\n;; >>> (compare_one \"5,1\" \"6\")\n;; \"6\"\n;; >>> (compare_one \"1\" 1)\n;; #f\n(define (compare_one a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare_one))\n    (check-within (candidate 1 2) 2 0.001)\n    (check-within (candidate 1 2.5) 2.5 0.001)\n    (check-within (candidate 2 3) 3 0.001)\n    (check-within (candidate 5 6) 6 0.001)\n    (check-within (candidate 1 \"2,3\") \"2,3\" 0.001)\n    (check-within (candidate \"5,1\" \"6\") \"6\" 0.001)\n    (check-within (candidate \"1\" \"2\") \"2\" 0.001)\n    (check-within (candidate \"1\" 1) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "#lang racket\n\n;; Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even 8)\n;; #t\n(define (is_equal_to_sum_even n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n    (check-within (candidate 4) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n    (check-within (candidate 8) #t 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 11) #f 0.001)\n    (check-within (candidate 12) #t 0.001)\n    (check-within (candidate 13) #f 0.001)\n    (check-within (candidate 16) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "#lang racket\n\n;; The Brazilian factorial is defined as:\n;; brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n;; where n > 0\n;; For example:\n;; >>> (special_factorial 4)\n;; 288\n;; The function will receive an integer as input and should return the special\n;; factorial of this integer.\n(define (special_factorial n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n    (check-within (candidate 4) 288 0.001)\n    (check-within (candidate 5) 34560 0.001)\n    (check-within (candidate 7) 125411328000 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "#lang racket\n\n;; Given a string text, replace all spaces in it with underscores, \n;; and if a string has more than 2 consecutive spaces, \n;; then replace all consecutive spaces with - \n;; >>> (fix_spaces \" Example\")\n;; \"Example\"\n;; >>> (fix_spaces \" Example 1\")\n;; \"Example_1\"\n;; >>> (fix_spaces \" Example 2\")\n;; \"_Example_2\"\n;; >>> (fix_spaces \" Example 3\")\n;; \"_Example-3\"\n(define (fix_spaces text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n    (check-within (candidate \"Example\") \"Example\" 0.001)\n    (check-within (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\" 0.001)\n    (check-within (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\" 0.001)\n    (check-within (candidate \"Exa   mple\") \"Exa-mple\" 0.001)\n    (check-within (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "#lang racket\n\n;; Create a function which takes a string representing a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n;; A file's name is considered to be valid if and only if all the following conditions \n;; are met:\n;; - There should not be more than three digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one dot '.'\n;; - The substring before the dot should not be empty, and it starts with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;; >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n    (check-within (candidate \"example.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"1example.dll\") \"No\" 0.001)\n    (check-within (candidate \"s1sdf3.asd\") \"No\" 0.001)\n    (check-within (candidate \"K.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"MY16FILE3.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"His12FILE94.exe\") \"No\" 0.001)\n    (check-within (candidate \"_Y.txt\") \"No\" 0.001)\n    (check-within (candidate \"?aREYA.exe\") \"No\" 0.001)\n    (check-within (candidate \"/this_is_valid.dll\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.wow\") \"No\" 0.001)\n    (check-within (candidate \"this_is_valid.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"this_is_valid.txtexe\") \"No\" 0.001)\n    (check-within (candidate \"#this2_i4s_5valid.ten\") \"No\" 0.001)\n    (check-within (candidate \"@this1_is6_valid.exe\") \"No\" 0.001)\n    (check-within (candidate \"this_is_12valid.6exe4.txt\") \"No\" 0.001)\n    (check-within (candidate \"all.exe.txt\") \"No\" 0.001)\n    (check-within (candidate \"I563_No.exe\") \"Yes\" 0.001)\n    (check-within (candidate \"Is3youfault.txt\") \"Yes\" 0.001)\n    (check-within (candidate \"no_one#knows.dll\") \"Yes\" 0.001)\n    (check-within (candidate \"1I563_Yes3.exe\") \"No\" 0.001)\n    (check-within (candidate \"I563_Yes3.txtt\") \"No\" 0.001)\n    (check-within (candidate \"final..txt\") \"No\" 0.001)\n    (check-within (candidate \"final132\") \"No\" 0.001)\n    (check-within (candidate \"_f4indsartal132.\") \"No\" 0.001)\n    (check-within (candidate \".txt\") \"No\" 0.001)\n    (check-within (candidate \"s.\") \"No\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "#lang racket\n\n;; \"\n;; This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n;; multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n;; change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n;; Examples:\n;; >>> lst\n;; (list 1 2 3)\n;; >>> lst\n;; (list )\n;; >>> lst\n;; (list -1 -5 2 -1 -5)\n(define (sum_squares lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 1 4 9)) 14 0.001)\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 1 1 1 1 1 1 1 1 1)) 9 0.001)\n    (check-within (candidate (list -1 -1 -1 -1 -1 -1 -1 -1 -1)) -3 0.001)\n    (check-within (candidate (list 0)) 0 0.001)\n    (check-within (candidate (list -1 -5 2 -1 -5)) -126 0.001)\n    (check-within (candidate (list -56 -99 1 0 -2)) 3030 0.001)\n    (check-within (candidate (list -1 0 0 0 0 0 0 0 -1)) 0 0.001)\n    (check-within (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37)) -14196 0.001)\n    (check-within (candidate (list -1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10)) -1448 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "#lang racket\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;;     * 1 <= len(sentence) <= 100\n;;     * sentence contains only letters\n(define (words_in_sentence sentence)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n    (check-within (candidate \"This is a test\") \"is\" 0.001)\n    (check-within (candidate \"lets go for swimming\") \"go for\" 0.001)\n    (check-within (candidate \"there is no place available here\") \"there is no place\" 0.001)\n    (check-within (candidate \"Hi I am Hussein\") \"Hi am Hussein\" 0.001)\n    (check-within (candidate \"go for it\") \"go for it\" 0.001)\n    (check-within (candidate \"here\") \"\" 0.001)\n    (check-within (candidate \"here is\") \"is\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_144_simplify", "prompt": "#lang racket\n\n;; Your task is to implement a function that will simplify the expression\n;; x * n. The function returns #t if x * n evaluates to a whole number and #f\n;; otherwise. Both x and n, are string representation of a fraction, and have the following format,\n;; <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n;; You can assume that x, and n are valid fractions, and do not have zero as denominator.\n;; >>> (simplify \"1/5\" \"5/1\")\n;; #t\n;; >>> (simplify \"1/6\" \"2/1\")\n;; #f\n;; >>> (simplify \"7/10\" \"10/2\")\n;; #f\n(define (simplify x n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/6\" \"2/1\") #f 0.001)\n    (check-within (candidate \"5/1\" \"3/1\") #t 0.001)\n    (check-within (candidate \"7/10\" \"10/2\") #f 0.001)\n    (check-within (candidate \"2/10\" \"50/10\") #t 0.001)\n    (check-within (candidate \"7/2\" \"4/2\") #t 0.001)\n    (check-within (candidate \"11/6\" \"6/1\") #t 0.001)\n    (check-within (candidate \"2/3\" \"5/2\") #f 0.001)\n    (check-within (candidate \"5/2\" \"3/5\") #f 0.001)\n    (check-within (candidate \"2/4\" \"8/4\") #t 0.001)\n    (check-within (candidate \"2/4\" \"4/2\") #t 0.001)\n    (check-within (candidate \"1/5\" \"5/1\") #t 0.001)\n    (check-within (candidate \"1/5\" \"1/5\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "#lang racket\n\n;; Write a function which sorts the given list of integers\n;; in ascending order according to the sum of their digits.\n;; Note: if there are several items with similar sum of their digits,\n;; order them based on their index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )\n(define (order_by_points nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-within (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11) 0.001)\n    (check-within (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457) 0.001)\n    (check-within (candidate (list )) (list ) 0.001)\n    (check-within (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "#lang racket\n\n;; Write a function that takes a list of numbers as input and returns \n;; the number of elements in the list that are greater than 10 and both \n;; first and last digits of a number are odd (1, 3, 5, 7, 9).\n;; For example:\n;; >>> (specialFilter (list 15 -73 14 -15))\n;; 1\n;; >>> (specialFilter (list 33 -2 -3 45 21 109))\n;; 2\n(define (specialFilter nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n    (check-within (candidate (list 5 -2 1 -5)) 0 0.001)\n    (check-within (candidate (list 15 -73 14 -15)) 1 0.001)\n    (check-within (candidate (list 33 -2 -3 45 21 109)) 2 0.001)\n    (check-within (candidate (list 43 -12 93 125 121 109)) 4 0.001)\n    (check-within (candidate (list 71 -2 -33 75 21 19)) 3 0.001)\n    (check-within (candidate (list 1)) 0 0.001)\n    (check-within (candidate (list )) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "#lang racket\n\n;; You are given a positive integer n. You have to create an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n;;     and a[i] + a[j] + a[k] is a multiple of 3.\n;;     Example :\n;;     >>> (get_max_triples 5)\n;;     1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-within (candidate 5) 1 0.001)\n    (check-within (candidate 6) 4 0.001)\n    (check-within (candidate 10) 36 0.001)\n    (check-within (candidate 100) 53361 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_148_bf", "prompt": "#lang racket\n\n;; There are eight planets in our solar system: the closerst to the Sun \n;; is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n;; Uranus, Neptune.\n;; Write a function that takes two planet names as strings planet1 and planet2. \n;; The function should return a list containing all planets whose orbits are \n;; located between the orbit of planet1 and the orbit of planet2, sorted by \n;; the proximity to the sun. \n;; The function should return an empty list if planet1 or planet2\n;; are not correct planet names. \n;; Examples\n;; >>> (bf \"Jupiter\" \"Neptune\")\n;; (list \"Saturn\" \"Uranus\")\n;; >>> (bf \"Earth\" \"Mercury\")\n;; \"Venus\"\n;; >>> (bf \"Mercury\" \"Uranus\")\n;; (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\")\n(define (bf planet1 planet2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bf))\n    (check-within (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Mercury\") (list \"Venus\") 0.001)\n    (check-within (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\") 0.001)\n    (check-within (candidate \"Neptune\" \"Venus\") (list \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\") 0.001)\n    (check-within (candidate \"Earth\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Mars\" \"Earth\") (list ) 0.001)\n    (check-within (candidate \"Jupiter\" \"Makemake\") (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "#lang racket\n\n;; Write a function that accepts a list of strings as a parameter,\n;; deletes the strings that have odd lengths from it,\n;; and returns the resulted list with a sorted order,\n;; The list is always a list of strings and never a list of numbers,\n;; and it may contain duplicates.\n;; The order of the list should be ascending by length of each word, and you\n;; should return the list sorted by that rule.\n;; If two words have the same length, sort the list alphabetically.\n;; The function should return a list of strings in sorted order.\n;; You may assume that all words will have the same length.\n;; For example:\n;; >>> (list_sort (list \"aa\" \"a\" \"aaa\"))\n;; (list \"aa\")\n;; >>> (list_sort (list \"ab\" \"a\" \"aaa\" \"cd\"))\n;; (list \"ab\" \"cd\")\n(define (sorted_list_sum lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n    (check-within (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\") 0.001)\n    (check-within (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\") 0.001)\n    (check-within (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\") 0.001)\n    (check-within (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"au\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\")) (list ) 0.001)\n    (check-within (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\")) (list \"cc\" \"dd\" \"aaaa\" \"bbbb\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "#lang racket\n\n;; A simple program which should return the value of x if n is \n;; a prime number and should return the value of y otherwise.\n;; Examples:\n;; >>> (x_or_y 7 34 12)\n;; 34\n;; >>> (x_or_y 15 8 5)\n;; 5\n(define (x_or_y n x y)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n    (check-within (candidate 7 34 12) 34 0.001)\n    (check-within (candidate 15 8 5) 5 0.001)\n    (check-within (candidate 3 33 5212) 33 0.001)\n    (check-within (candidate 1259 3 52) 3 0.001)\n    (check-within (candidate 7919 -1 12) -1 0.001)\n    (check-within (candidate 3609 1245 583) 583 0.001)\n    (check-within (candidate 91 56 129) 129 0.001)\n    (check-within (candidate 6 34 1234) 1234 0.001)\n    (check-within (candidate 1 2 0) 0 0.001)\n    (check-within (candidate 2 2 0) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-within (candidate (list )) 0 0.001)\n    (check-within (candidate (list 5.0 4.0)) 25 0.001)\n    (check-within (candidate (list 0.1 0.2 0.3)) 0 0.001)\n    (check-within (candidate (list -10.0 -20.0 -30.0)) 0 0.001)\n    (check-within (candidate (list -1.0 -2.0 8.0)) 0 0.001)\n    (check-within (candidate (list 0.2 3.0 5.0)) 34 0.001)\n    (check-within (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_152_compare", "prompt": "#lang racket\n\n;; I think we all remember that feeling when the result of some long-awaited\n;; event is finally known. The feelings and thoughts you have at that moment are\n;; definitely worth noting down and comparing.\n;; Your task is to determine if a person correctly guessed the results of a number of matches.\n;; You are given two lists of scores and guesses of equal length, where each index shows a match. \n;; Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n;; the value is 0, and if not, the value is the absolute difference between the guess and the score.\n;; example:\n;; >>> (compare (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2))\n;; (list 0 0 0 0 3 3)\n;; >>> (compare (list 0 5 0 0 0 4) (list 4 1 1 0 0 -2))\n;; (list 4 4 1 0 0 6)\n(define (compare game guess)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n    (check-within (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3) 0.001)\n    (check-within (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0) 0.001)\n    (check-within (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "#lang racket\n\n;; You will be given the name of a class (a string) and a list of extensions.\n;; The extensions are to be used to load additional classes to the class. The\n;; strength of the extension is as follows: Let CAP be the number of the uppercase\n;; letters in the extension's name, and let SM be the number of lowercase letters \n;; in the extension's name, the strength is given by the fraction CAP - SM. \n;; You should find the strongest extension and return a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are two or more extensions with the same strength, you should\n;; choose the one that comes first in the list.\n;; For example, if you are given \"Slices\" as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension class_name extensions)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-within (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\" 0.001)\n    (check-within (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\" 0.001)\n    (check-within (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\" 0.001)\n    (check-within (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\" 0.001)\n    (check-within (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\" 0.001)\n    (check-within (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\" 0.001)\n    (check-within (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\" 0.001)\n    (check-within (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\" 0.001)\n    (check-within (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "#lang racket\n\n;; You are given 2 words. You need to return #t if the second word or any of its rotations is a substring in the first word\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n(define (cycpattern_check a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n    (check-within (candidate \"xyzw\" \"xyw\") #f 0.001)\n    (check-within (candidate \"yello\" \"ell\") #t 0.001)\n    (check-within (candidate \"whattup\" \"ptut\") #f 0.001)\n    (check-within (candidate \"efef\" \"fee\") #t 0.001)\n    (check-within (candidate \"abab\" \"aabb\") #f 0.001)\n    (check-within (candidate \"winemtt\" \"tinem\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "#lang racket\n\n;; Given an integer. return a list that has the number of even and odd digits respectively.\n;; Example:\n;;     >>> (even_odd_count -12)\n;;     (list 1 1)\n;;     >>> (even_odd_count 123)\n;;     (list 1 2)\n(define (even_odd_count num)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-within (candidate 7) (list 0 1) 0.001)\n    (check-within (candidate -78) (list 1 1) 0.001)\n    (check-within (candidate 3452) (list 2 2) 0.001)\n    (check-within (candidate 346211) (list 3 3) 0.001)\n    (check-within (candidate -345821) (list 3 3) 0.001)\n    (check-within (candidate -2) (list 1 0) 0.001)\n    (check-within (candidate -45347) (list 2 3) 0.001)\n    (check-within (candidate 0) (list 1 0) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman number)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n    (check-within (candidate 19) \"xix\" 0.001)\n    (check-within (candidate 152) \"clii\" 0.001)\n    (check-within (candidate 251) \"ccli\" 0.001)\n    (check-within (candidate 426) \"cdxxvi\" 0.001)\n    (check-within (candidate 500) \"d\" 0.001)\n    (check-within (candidate 1) \"i\" 0.001)\n    (check-within (candidate 4) \"iv\" 0.001)\n    (check-within (candidate 43) \"xliii\" 0.001)\n    (check-within (candidate 90) \"xc\" 0.001)\n    (check-within (candidate 94) \"xciv\" 0.001)\n    (check-within (candidate 532) \"dxxxii\" 0.001)\n    (check-within (candidate 900) \"cm\" 0.001)\n    (check-within (candidate 994) \"cmxciv\" 0.001)\n    (check-within (candidate 1000) \"m\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return #t if the three\n;; sides form a right-angled triangle, #f otherwise.\n;; A right-angled triangle is a triangle in which one angle is right angle or \n;; 90 degree.\n;; Example:\n;; >>> (right_angle_triangle 3 4 5)\n;; #t\n;; >>> (right_angle_triangle 1 2 3)\n;; #f\n(define (right_angle_triangle a b c)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n    (check-within (candidate 3 4 5) #t 0.001)\n    (check-within (candidate 1 2 3) #f 0.001)\n    (check-within (candidate 10 6 8) #t 0.001)\n    (check-within (candidate 2 2 2) #f 0.001)\n    (check-within (candidate 7 24 25) #t 0.001)\n    (check-within (candidate 10 5 7) #f 0.001)\n    (check-within (candidate 5 12 13) #t 0.001)\n    (check-within (candidate 15 8 17) #t 0.001)\n    (check-within (candidate 48 55 73) #t 0.001)\n    (check-within (candidate 1 1 1) #f 0.001)\n    (check-within (candidate 2 2 10) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_158_find_max", "prompt": "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The list contains different words. Return the word with maximum number\n;; of unique characters. If multiple strings have maximum number of unique\n;; characters, return the one which comes first in lexicographical order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-within (candidate (list \"name\" \"of\" \"string\")) \"string\" 0.001)\n    (check-within (candidate (list \"name\" \"enam\" \"game\")) \"enam\" 0.001)\n    (check-within (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\" 0.001)\n    (check-within (candidate (list \"abc\" \"cba\")) \"abc\" 0.001)\n    (check-within (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\" 0.001)\n    (check-within (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\" 0.001)\n    (check-within (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\" 0.001)\n    (check-within (candidate (list \"b\")) \"b\" 0.001)\n    (check-within (candidate (list \"play\" \"play\" \"play\")) \"play\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_159_eat", "prompt": "#lang racket\n\n;; You're a hungry rabbit, and you already have eaten a certain number of carrots,\n;; but now you need to eat more carrots to complete the day's meals.\n;; you should return a list of [ total number of eaten carrots after your meals,\n;;                                 the number of carrots left after your meals ]\n;; if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n;; Example:\n;; >>> (eat 5 6 10)\n;; (list 11 4)\n;; >>> (eat 4 8 9)\n;; (list 12 1)\n;; >>> (eat 1 10 10)\n;; (list 11 0)\n;; >>> (eat 2 11 5)\n;; (list 7 0)\n;; Variables:\n;; @number : integer\n;;     the number of carrots that you have eaten.\n;; @need : integer\n;;     the number of carrots that you need to eat.\n;; @remaining : integer\n;;     the number of remaining carrots thet exist in stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <= 1000\n;; * 0 <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n    (check-within (candidate 5 6 10) (list 11 4) 0.001)\n    (check-within (candidate 4 8 9) (list 12 1) 0.001)\n    (check-within (candidate 1 10 10) (list 11 0) 0.001)\n    (check-within (candidate 2 11 5) (list 7 0) 0.001)\n    (check-within (candidate 4 5 7) (list 9 2) 0.001)\n    (check-within (candidate 4 5 1) (list 5 0) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "#lang racket\n\n;; Given two lists operator, and operand. The first list has basic algebra operations, and \n;; the second list is a list of integers. Use the two given lists to build the algebric \n;; expression and return the evaluation of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;; Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; list = [2, 3, 4, 5]\n;; result = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;;     The length of operator list is equal to the length of operand list minus one.\n;;     Operand is a list of of non-negative integers.\n;;     Operator list has at least one operator, and operand list has at least two operands.\n(define (do_algebra operator operand)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n    (check-within (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37 0.001)\n    (check-within (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9 0.001)\n    (check-within (candidate (list \"//\" \"*\") (list 7 3 4)) 8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_161_solve", "prompt": "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-within (candidate \"AsDf\") \"aSdF\" 0.001)\n    (check-within (candidate \"1234\") \"4321\" 0.001)\n    (check-within (candidate \"ab\") \"AB\" 0.001)\n    (check-within (candidate \"#a@C\") \"#A@c\" 0.001)\n    (check-within (candidate \"#AsdfW^45\") \"#aSDFw^45\" 0.001)\n    (check-within (candidate \"#6@2\") \"2@6#\" 0.001)\n    (check-within (candidate \"#$a^D\") \"#$A^d\" 0.001)\n    (check-within (candidate \"#ccc\") \"#CCC\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "#lang racket\n\n;; Given a string 'text', return its md5 hash equivalent string.\n;; If 'text' is an empty string, return #f.\n;; >>> (string_to_md5 \"Hello world\")\n;; \"3e25960a79dbc69b674cd4ec67a72c62\"\n(define (string_to_md5 text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n    (check-within (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\" 0.001)\n    (check-within (candidate \"\") #f 0.001)\n    (check-within (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\" 0.001)\n    (check-within (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "#lang racket\n\n;; Given two positive integers a and b, return the even digits between a\n;; and b, in ascending order.\n;; For example:\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n(define (generate_integers a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n    (check-within (candidate 2 10) (list 2 4 6 8) 0.001)\n    (check-within (candidate 10 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 132 2) (list 2 4 6 8) 0.001)\n    (check-within (candidate 17 89) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "#lang racket\n\n;; Write a rktthon function to identify non-prime numbers.\n(define (is_not_prime n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_not_prime))\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 35) #t 0.001)\n    (check-within (candidate 37) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "#lang racket\n\n;; Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n(define (heap_queue_largest nums n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_queue_largest))\n    (check-within (candidate (list 25 35 22 85 14 65 75 22 58) 3) (list 85 75 65) 0.001)\n    (check-within (candidate (list 25 35 22 85 14 65 75 22 58) 2) (list 85 75) 0.001)\n    (check-within (candidate (list 25 35 22 85 14 65 75 22 58) 5) (list 85 75 65 58 35) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the two numbers differ at one bit position only or not.\n(define (differ_At_One_Bit_Pos a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate differ_At_One_Bit_Pos))\n    (check-within (candidate 13 9) #t 0.001)\n    (check-within (candidate 15 8) #f 0.001)\n    (check-within (candidate 2 4) #f 0.001)\n    (check-within (candidate 2 3) #t 0.001)\n    (check-within (candidate 5 1) #t 0.001)\n    (check-within (candidate 1 5) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_8_square_nums", "prompt": "#lang racket\n\n;; Write a function to find squares of individual elements in a list.\n(define (square_nums nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_nums))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 4 9 16 25 36 49 64 81 100) 0.001)\n    (check-within (candidate (list 10 20 30)) (list 100 400 900) 0.001)\n    (check-within (candidate (list 12 15)) (list 144 225) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "#lang racket\n\n;; Write a rktthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n(define (find_Rotations str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Rotations))\n    (check-within (candidate \"aaaa\") 1 0.001)\n    (check-within (candidate \"ab\") 2 0.001)\n    (check-within (candidate \"abc\") 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "#lang racket\n\n;; Write a rktthon function to remove first and last occurrence of a given character from the string.\n(define (remove_Occ s ch)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_Occ))\n    (check-within (candidate \"hello\" \"l\") \"heo\" 0.001)\n    (check-within (candidate \"abcda\" \"a\") \"bcd\" 0.001)\n    (check-within (candidate \"PHP\" \"P\") \"H\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-within (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)) 0.001)\n    (check-within (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_14_find_Volume", "prompt": "#lang racket\n\n;; Write a rktthon function to find the volume of a triangular prism.\n(define (find_Volume l b h)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Volume))\n    (check-within (candidate 10 8 6) 240 0.001)\n    (check-within (candidate 3 2 2) 6 0.001)\n    (check-within (candidate 1 2 1) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "#lang racket\n\n;; Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n(define (text_lowercase_underscore text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_lowercase_underscore))\n    (check-within (candidate \"aab_cbbbc\") #t 0.001)\n    (check-within (candidate \"aab_Abbbc\") #f 0.001)\n    (check-within (candidate \"Aaab_abbbc\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "#lang racket\n\n;; Write a function that returns the perimeter of a square given its side length as input.\n(define (square_perimeter a)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_perimeter))\n    (check-within (candidate 10) 40 0.001)\n    (check-within (candidate 5) 20 0.001)\n    (check-within (candidate 4) 16 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "#lang racket\n\n;; Write a function to remove characters from the first string which are present in the second string.\n(define (remove_dirty_chars string second_string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_dirty_chars))\n    (check-within (candidate \"probasscurve\" \"pros\") \"bacuve\" 0.001)\n    (check-within (candidate \"digitalindia\" \"talent\") \"digiidi\" 0.001)\n    (check-within (candidate \"exoticmiles\" \"toxic\") \"emles\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "#lang racket\n\n;; Write a function to find whether a given list of integers contains any duplicate element.\n(define (test_duplicate arraynums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_duplicate))\n    (check-within (candidate (list 1 2 3 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 4)) #t 0.001)\n    (check-within (candidate (list 1 1 2 2 3 3 4 4 5)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_20_is_woodall", "prompt": "#lang racket\n\n;; Write a function to check if the given number is woodball or not.\n(define (is_woodall x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_woodall))\n    (check-within (candidate 383) #t 0.001)\n    (check-within (candidate 254) #f 0.001)\n    (check-within (candidate 200) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_56_checks", "prompt": "#lang racket\n\n;; Write a rktthon function to check if a given number is one less than twice its reverse.\n(define (checks n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate checks))\n    (check-within (candidate 70) #f 0.001)\n    (check-within (candidate 23) #f 0.001)\n    (check-within (candidate 73) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "#lang racket\n\n;; Write a rktthon function to find the largest number that can be formed with the given list of digits.\n(define (find_Max_Num arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Max_Num))\n    (check-within (candidate (list 1 2 3)) 321 0.001)\n    (check-within (candidate (list 4 5 6 1)) 6541 0.001)\n    (check-within (candidate (list 1 2 3 9)) 9321 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given two integers have opposite sign or not.\n(define (opposite_Signs x y)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate opposite_Signs))\n    (check-within (candidate 1 -2) #t 0.001)\n    (check-within (candidate 3 2) #f 0.001)\n    (check-within (candidate -10 -10) #f 0.001)\n    (check-within (candidate -2 2) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "#lang racket\n\n;; Write a function to find the nth octagonal number.\n(define (is_octagonal n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_octagonal))\n    (check-within (candidate 5) 65 0.001)\n    (check-within (candidate 10) 280 0.001)\n    (check-within (candidate 15) 645 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of substrings with the sum of digits equal to their length.\n(define (count_Substrings s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Substrings))\n    (check-within (candidate \"112112\") 6 0.001)\n    (check-within (candidate \"111\") 6 0.001)\n    (check-within (candidate \"1101112\") 12 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_62_smallest_num", "prompt": "#lang racket\n\n;; Write a rktthon function to find smallest number in a list.\n(define (smallest_num xs)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_num))\n    (check-within (candidate (list 10 20 1 45 99)) 1 0.001)\n    (check-within (candidate (list 1 2 3)) 1 0.001)\n    (check-within (candidate (list 45 46 50 60)) 45 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_63_max_difference", "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between available pairs in the given list list.\n(define (max_difference test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_difference))\n    (check-within (candidate (list (list 3 5) (list 1 7) (list 10 3) (list 1 2))) 7 0.001)\n    (check-within (candidate (list (list 4 6) (list 2 17) (list 9 13) (list 11 12))) 15 0.001)\n    (check-within (candidate (list (list 12 35) (list 21 27) (list 13 23) (list 41 22))) 23 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_64_subject_marks", "prompt": "#lang racket\n\n;; Write a function to sort a list of lists using the second value of each list.\n(define (subject_marks subjectmarks)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate subject_marks))\n    (check-within (candidate (list (list \"English\" 88) (list \"Science\" 90) (list \"Maths\" 97) (list \"Social sciences\" 82))) (list (list \"Social sciences\" 82) (list \"English\" 88) (list \"Science\" 90) (list \"Maths\" 97)) 0.001)\n    (check-within (candidate (list (list \"Telugu\" 49) (list \"Hindhi\" 54) (list \"Social\" 33))) (list (list \"Social\" 33) (list \"Telugu\" 49) (list \"Hindhi\" 54)) 0.001)\n    (check-within (candidate (list (list \"Physics\" 96) (list \"Chemistry\" 97) (list \"Biology\" 45))) (list (list \"Biology\" 45) (list \"Physics\" 96) (list \"Chemistry\" 97)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "#lang racket\n\n;; Write a function to flatten a list and sum all of its elements.\n(define (recursive_list_sum data_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate recursive_list_sum))\n    (check-within (candidate (list 1 2 (list 3 4) (list 5 6))) 21 0.001)\n    (check-within (candidate (list 7 10 (list 15 14) (list 19 41))) 106 0.001)\n    (check-within (candidate (list 10 20 (list 30 40) (list 50 60))) 210 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_66_pos_count", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of positive numbers in a list.\n(define (pos_count list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pos_count))\n    (check-within (candidate (list 1 -2 3 -4)) 2 0.001)\n    (check-within (candidate (list 3 4 5 -1)) 3 0.001)\n    (check-within (candidate (list 1 2 3 4)) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_67_bell_number", "prompt": "#lang racket\n\n;; Write a function to find the number of ways to partition a set of Bell numbers.\n(define (bell_number n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bell_number))\n    (check-within (candidate 2) 2 0.001)\n    (check-within (candidate 10) 115975 0.001)\n    (check-within (candidate 56) 6775685320645824322581483068371419745979053216268760300 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given list is monotonic or not.\n(define (is_Monotonic A)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Monotonic))\n    (check-within (candidate (list 6 5 4 4)) #t 0.001)\n    (check-within (candidate (list 1 2 2 3)) #t 0.001)\n    (check-within (candidate (list 1 3 2)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_69_is_sublist", "prompt": "#lang racket\n\n;; Write a function to check whether a list contains the given sublist or not.\n(define (is_sublist l s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sublist))\n    (check-within (candidate (list 2 4 3 5 7) (list 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 3 5 7) (list 4 3)) #t 0.001)\n    (check-within (candidate (list 2 4 3 5 7) (list 1 6)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_70_get_equal", "prompt": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-within (candidate (list (list 11 22 33) (list 44 55 66))) #t 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6 7))) #f 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4))) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_71_comb_sort", "prompt": "#lang racket\n\n;; Write a function to sort a list of elements.\n(define (comb_sort nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate comb_sort))\n    (check-within (candidate (list 5 15 37 25 79)) (list 5 15 25 37 79) 0.001)\n    (check-within (candidate (list 41 32 15 19 22)) (list 15 19 22 32 41) 0.001)\n    (check-within (candidate (list 99 15 13 47)) (list 13 15 47 99) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_72_dif_Square", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given number can be represented as the difference of two squares or not.\n(define (dif_Square n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dif_Square))\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 15) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "#lang racket\n\n;; Write a function to check whether it follows the sequence given in the patterns list.\n(define (is_samepatterns colors patterns)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_samepatterns))\n    (check-within (candidate (list \"red\" \"green\" \"green\") (list \"a\" \"b\" \"b\")) #t 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"greenn\") (list \"a\" \"b\" \"b\")) #f 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"greenn\") (list \"a\" \"b\")) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_75_find_tuples", "prompt": "#lang racket\n\n;; Write a function to find lists which have all elements divisible by k from the given list of lists.\n(define (find_tuples test_list K)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_tuples))\n    (check-within (candidate (list (list 6 24 12) (list 7 9 6) (list 12 18 21)) 6) (list (list 6 24 12)) 0.001)\n    (check-within (candidate (list (list 5 25 30) (list 4 2 3) (list 7 8 9)) 5) (list (list 5 25 30)) 0.001)\n    (check-within (candidate (list (list 7 9 16) (list 8 16 4) (list 19 17 18)) 4) (list (list 8 16 4)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_77_is_Diff", "prompt": "#lang racket\n\n;; Write a rktthon function to find whether a number is divisible by 11.\n(define (is_Diff n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Diff))\n    (check-within (candidate 12345) #f 0.001)\n    (check-within (candidate 1212112) #t 0.001)\n    (check-within (candidate 1212) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_79_word_len", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the length of the word is odd or not.\n(define (word_len s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate word_len))\n    (check-within (candidate \"Hadoop\") #f 0.001)\n    (check-within (candidate \"great\") #t 0.001)\n    (check-within (candidate \"structure\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "#lang racket\n\n;; Write a function to find the nth tetrahedral number.\n(define (tetrahedral_number n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tetrahedral_number))\n    (check-within (candidate 5) 35 0.001)\n    (check-within (candidate 6) 56 0.001)\n    (check-within (candidate 7) 84 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_83_get_Char", "prompt": "#lang racket\n\n;; Write a rktthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n(define (get_Char strr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_Char))\n    (check-within (candidate \"abc\") \"f\" 0.001)\n    (check-within (candidate \"gfg\") \"t\" 0.001)\n    (check-within (candidate \"ab\") \"c\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_84_sequence", "prompt": "#lang racket\n\n;; Write a function to find the nth number in the newman conway sequence.\n(define (sequence n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequence))\n    (check-within (candidate 10) 6 0.001)\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 3) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "#lang racket\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate centered_hexagonal_number))\n    (check-within (candidate 10) 271 0.001)\n    (check-within (candidate 2) 7 0.001)\n    (check-within (candidate 9) 217 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "#lang racket\n\n;; Write a function to merge three dictionaries into a single hash.\n(define (merge_dictionaries_three dict1 dict2 dict3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge_dictionaries_three))\n    (check-within (candidate #hash((\"R\" .  \"Red\") (\"B\" .  \"Black\") (\"P\" .  \"Pink\")) #hash((\"G\" .  \"Green\") (\"W\" .  \"White\")) #hash((\"O\" .  \"Orange\") (\"W\" .  \"White\") (\"B\" .  \"Black\"))) #hash((\"B\" .  \"Black\") (\"R\" .  \"Red\") (\"P\" .  \"Pink\") (\"G\" .  \"Green\") (\"W\" .  \"White\") (\"O\" .  \"Orange\")) 0.001)\n    (check-within (candidate #hash((\"R\" .  \"Red\") (\"B\" .  \"Black\") (\"P\" .  \"Pink\")) #hash((\"G\" .  \"Green\") (\"W\" .  \"White\")) #hash((\"L\" .  \"lavender\") (\"B\" .  \"Blue\"))) #hash((\"W\" .  \"White\") (\"P\" .  \"Pink\") (\"B\" .  \"Black\") (\"R\" .  \"Red\") (\"G\" .  \"Green\") (\"L\" .  \"lavender\")) 0.001)\n    (check-within (candidate #hash((\"R\" .  \"Red\") (\"B\" .  \"Black\") (\"P\" .  \"Pink\")) #hash((\"L\" .  \"lavender\") (\"B\" .  \"Blue\")) #hash((\"G\" .  \"Green\") (\"W\" .  \"White\"))) #hash((\"B\" .  \"Black\") (\"P\" .  \"Pink\") (\"R\" .  \"Red\") (\"G\" .  \"Green\") (\"L\" .  \"lavender\") (\"W\" .  \"White\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_88_freq_count", "prompt": "#lang racket\n\n;; Write a function to get the frequency of all the elements in a list, returned as a hash.\n(define (freq_count list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate freq_count))\n    (check-within (candidate (list 10 10 10 10 20 20 20 20 40 40 50 50 30)) #hash((10 .  4) (20 .  4) (40 .  2) (50 .  2) (30 .  1)) 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 4 1 3 1 4)) #hash((1 .  3) (2 .  2) (3 .  3) (4 .  3)) 0.001)\n    (check-within (candidate (list 5 6 7 4 9 10 4 5 6 7 9 5)) #hash((10 .  1) (5 .  3) (6 .  2) (7 .  2) (4 .  2) (9 .  2)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_89_closest_num", "prompt": "#lang racket\n\n;; Write a function to find the closest smaller number than n.\n(define (closest_num N)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_num))\n    (check-within (candidate 11) 10 0.001)\n    (check-within (candidate 7) 6 0.001)\n    (check-within (candidate 12) 11 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_90_len_log", "prompt": "#lang racket\n\n;; Write a rktthon function to find the length of the longest word.\n(define (len_log list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate len_log))\n    (check-within (candidate (list \"python\" \"PHP\" \"bigdata\")) 7 0.001)\n    (check-within (candidate (list \"a\" \"ab\" \"abc\")) 3 0.001)\n    (check-within (candidate (list \"small\" \"big\" \"tall\")) 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_91_find_substring", "prompt": "#lang racket\n\n;; Write a function to check if a string is present as a substring in a given list of string values.\n(define (find_substring str1 sub_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_substring))\n    (check-within (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"ack\") #t 0.001)\n    (check-within (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"abc\") #f 0.001)\n    (check-within (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"ange\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_92_is_undulating", "prompt": "#lang racket\n\n;; Write a function to check whether the given number is undulating or not.\n(define (is_undulating n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_undulating))\n    (check-within (candidate 1212121) #t 0.001)\n    (check-within (candidate 1991) #f 0.001)\n    (check-within (candidate 121) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_93_power", "prompt": "#lang racket\n\n;; Write a function to calculate the value of 'a' to the power 'b'.\n(define (power a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power))\n    (check-within (candidate 3 4) 81 0.001)\n    (check-within (candidate 2 3) 8 0.001)\n    (check-within (candidate 5 5) 3125 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_94_index_minimum", "prompt": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-within (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\" 0.001)\n    (check-within (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\" 0.001)\n    (check-within (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "#lang racket\n\n;; Write a rktthon function to find the length of the smallest list in a list of lists.\n(define (Find_Min_Length lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Min_Length))\n    (check-within (candidate (list (list 1) (list 1 2))) 1 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 2 3) (list 1 2 3 4))) 2 0.001)\n    (check-within (candidate (list (list 3 3 3) (list 4 4 4 4))) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_96_divisor", "prompt": "#lang racket\n\n;; Write a rktthon function to find the number of divisors of a given integer.\n(define (divisor n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisor))\n    (check-within (candidate 15) 4 0.001)\n    (check-within (candidate 12) 6 0.001)\n    (check-within (candidate 9) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "#lang racket\n\n;; Write a function to find frequency of each element in a flattened list of lists, returned in a hash.\n(define (frequency_lists list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate frequency_lists))\n    (check-within (candidate (list (list 1 2 3 2) (list 4 5 6 2) (list 7 8 9 5))) #hash((1 .  1) (2 .  3) (3 .  1) (4 .  1) (5 .  2) (6 .  1) (7 .  1) (8 .  1) (9 .  1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12))) #hash((1 .  1) (2 .  1) (3 .  1) (4 .  1) (5 .  1) (6 .  1) (7 .  1) (8 .  1) (9 .  1) (10 .  1) (11 .  1) (12 .  1)) 0.001)\n    (check-within (candidate (list (list 20 30 40 17) (list 18 16 14 13) (list 10 20 30 40))) #hash((20 .  2) (30 .  2) (40 .  2) (17 .  1) (18 .  1) (16 .  1) (14 .  1) (13 .  1) (10 .  1)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "#lang racket\n\n;; Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n(define (decimal_to_binary n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 8) \"1000\" 0.001)\n    (check-within (candidate 18) \"10010\" 0.001)\n    (check-within (candidate 7) \"111\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "#lang racket\n\n;; Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n(define (next_smallest_palindrome num)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest_palindrome))\n    (check-within (candidate 99) 101 0.001)\n    (check-within (candidate 1221) 1331 0.001)\n    (check-within (candidate 120) 121 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_101_kth_element", "prompt": "#lang racket\n\n;; Write a function to find the kth element in the given list using 1-based indexing.\n(define (kth_element arr k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate kth_element))\n    (check-within (candidate (list 12 3 5 7 19) 2) 3 0.001)\n    (check-within (candidate (list 17 24 8 23) 3) 8 0.001)\n    (check-within (candidate (list 16 21 25 36 4) 4) 36 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-within (candidate \"python_program\") \"PythonProgram\" 0.001)\n    (check-within (candidate \"python_language\") \"PythonLanguage\" 0.001)\n    (check-within (candidate \"programming_language\") \"ProgrammingLanguage\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "#lang racket\n\n;; Write a function to find the Eulerian number a(n, m).\n(define (eulerian_num n m)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eulerian_num))\n    (check-within (candidate 3 1) 4 0.001)\n    (check-within (candidate 4 1) 11 0.001)\n    (check-within (candidate 5 3) 26 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "#lang racket\n\n;; Write a function to sort each sublist of strings in a given list of lists.\n(define (sort_sublists input_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_sublists))\n    (check-within (candidate (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"white\" \"black\" \"orange\"))) (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"black\" \"orange\" \"white\")) 0.001)\n    (check-within (candidate (list (list \" red \" \"green\") (list \"blue \" \" black\") (list \" orange\" \"brown\"))) (list (list \" red \" \"green\") (list \" black\" \"blue \") (list \" orange\" \"brown\")) 0.001)\n    (check-within (candidate (list (list \"zilver\" \"gold\") (list \"magnesium\" \"aluminium\") (list \"steel\" \"bronze\"))) (list (list \"gold\" \"zilver\") (list \"aluminium\" \"magnesium\") (list \"bronze\" \"steel\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_105_count", "prompt": "#lang racket\n\n;; Write a rktthon function to count true booleans in the given list.\n(define (count lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count))\n    (check-within (candidate (list #t #f #t)) 2 0.001)\n    (check-within (candidate (list #f #f)) 0 0.001)\n    (check-within (candidate (list #t #t #t)) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_106_add_lists", "prompt": "#lang racket\n\n;; Write a function to append the given list to the given lists.\n(define (add_lists test_list test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_lists))\n    (check-within (candidate (list 5 6 7) (list 9 10)) (list 9 10 5 6 7) 0.001)\n    (check-within (candidate (list 6 7 8) (list 10 11)) (list 10 11 6 7 8) 0.001)\n    (check-within (candidate (list 7 8 9) (list 11 12)) (list 11 12 7 8 9) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "#lang racket\n\n;; Write a function to merge three lists into a single sorted list.\n(define (merge_sorted_list num1 num2 num3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge_sorted_list))\n    (check-within (candidate (list 25 24 15 4 5 29 110) (list 19 20 11 56 25 233 154) (list 24 26 54 48)) (list 4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233) 0.001)\n    (check-within (candidate (list 1 3 5 6 8 9) (list 2 5 7 11) (list 1 4 7 8 12)) (list 1 1 2 3 4 5 5 6 7 7 8 8 9 11 12) 0.001)\n    (check-within (candidate (list 18 14 10 9 8 7 9 3 2 4 1) (list 25 35 22 85 14 65 75 25 58) (list 12 74 9 50 61 41)) (list 1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "#lang racket\n\n;; Write a rktthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n(define (odd_Equivalent s n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_Equivalent))\n    (check-within (candidate \"011001\" 6) 3 0.001)\n    (check-within (candidate \"11011\" 5) 4 0.001)\n    (check-within (candidate \"1010\" 4) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_113_check_integer", "prompt": "#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_integer))\n    (check-within (candidate \"python\") #f 0.001)\n    (check-within (candidate \"1\") #t 0.001)\n    (check-within (candidate \"12345\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "#lang racket\n\n;; Write a function to convert a given list of positive integers into a single integer.\n(define (tuple_to_int nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_int))\n    (check-within (candidate (list 1 2 3)) 123 0.001)\n    (check-within (candidate (list 4 5 6)) 456 0.001)\n    (check-within (candidate (list 5 6 7)) 567 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_117_list_to_float", "prompt": "#lang racket\n\n;; Write a function to convert all possible convertible elements in a list of lists to floats.\n(define (list_to_float test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_to_float))\n    (check-within (candidate (list (list \"3\" \"4\") (list \"1\" \"26.45\") (list \"7.32\" \"8\") (list \"4\" \"8\"))) (list (list 3.0 4.0) (list 1.0 26.45) (list 7.32 8.0) (list 4.0 8.0)) 0.001)\n    (check-within (candidate (list (list \"4\" \"4\") (list \"2\" \"27\") (list \"4.12\" \"9\") (list \"7\" \"11\"))) (list (list 4.0 4.0) (list 2.0 27.0) (list 4.12 9.0) (list 7.0 11.0)) 0.001)\n    (check-within (candidate (list (list \"6\" \"78\") (list \"5\" \"26.45\") (list \"1.33\" \"4\") (list \"82\" \"13\"))) (list (list 6.0 78.0) (list 5.0 26.45) (list 1.33 4.0) (list 82.0 13.0)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_118_string_to_list", "prompt": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-within (candidate \"python programming\") (list \"python\" \"programming\") 0.001)\n    (check-within (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\") 0.001)\n    (check-within (candidate \"write a program\") (list \"write\" \"a\" \"program\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_119_search", "prompt": "#lang racket\n\n;; Write a rktthon function to find the element that appears only once in a sorted list.\n(define (search arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 1 1 2 2 3)) 3 0.001)\n    (check-within (candidate (list 1 1 3 3 4 4 5 5 7 7 8)) 8 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4 4)) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-within (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36 0.001)\n    (check-within (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200 0.001)\n    (check-within (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-within (candidate 999) 504 0.001)\n    (check-within (candidate 9999) 31626 0.001)\n    (check-within (candidate 99) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_125_find_length", "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-within (candidate \"11000010001\") 6 0.001)\n    (check-within (candidate \"10111\") 1 0.001)\n    (check-within (candidate \"11011101100101\") 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_126_sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of common divisors of two given numbers.\n(define (sum a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum))\n    (check-within (candidate 10 15) 6 0.001)\n    (check-within (candidate 100 150) 93 0.001)\n    (check-within (candidate 4 6) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_127_multiply_int", "prompt": "#lang racket\n\n;; Write a function to multiply two integers.\n(define (multiply_int x y)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply_int))\n    (check-within (candidate 10 20) 200 0.001)\n    (check-within (candidate 5 10) 50 0.001)\n    (check-within (candidate 4 8) 32 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_128_long_words", "prompt": "#lang racket\n\n;; Write a function to find words that are longer than n characters from a given list of words.\n(define (long_words n str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate long_words))\n    (check-within (candidate 3 \"python is a programming language\") (list \"python\" \"programming\" \"language\") 0.001)\n    (check-within (candidate 2 \"writing a program\") (list \"writing\" \"program\") 0.001)\n    (check-within (candidate 5 \"sorting list\") (list \"sorting\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "#lang racket\n\n;; Write a function to calculate whether the matrix is a magic square.\n(define (magic_square_test my_matrix)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate magic_square_test))\n    (check-within (candidate (list (list 7 12 1 14) (list 2 13 8 11) (list 16 3 10 5) (list 9 6 15 4))) #t 0.001)\n    (check-within (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 8))) #t 0.001)\n    (check-within (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 7))) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_occurrences))\n    (check-within (candidate (list 2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2)) 2 0.001)\n    (check-within (candidate (list 2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18)) 8 0.001)\n    (check-within (candidate (list 10 20 20 30 40 90 80 50 30 20 50 10)) 20 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "#lang racket\n\n;; Write a rktthon function to reverse only the vowels of a given string (where y is not a vowel).\n(define (reverse_vowels str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_vowels))\n    (check-within (candidate \"Python\") \"Python\" 0.001)\n    (check-within (candidate \"USA\") \"ASU\" 0.001)\n    (check-within (candidate \"ab\") \"ab\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_132_tup_string", "prompt": "#lang racket\n\n;; Write a function to convert a list to a string.\n(define (tup_string tup1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tup_string))\n    (check-within (candidate (list \"e\" \"x\" \"e\" \"r\" \"c\" \"i\" \"s\" \"e\" \"s\")) \"exercises\" 0.001)\n    (check-within (candidate (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\")) \"python\" 0.001)\n    (check-within (candidate (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\")) \"program\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-within (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32 0.001)\n    (check-within (candidate (list 10 15 -14 13 -18 12 -20)) -52 0.001)\n    (check-within (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "#lang racket\n\n;; Write a function to find the nth hexagonal number.\n(define (hexagonal_num n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hexagonal_num))\n    (check-within (candidate 10) 190 0.001)\n    (check-within (candidate 5) 45 0.001)\n    (check-within (candidate 7) 91 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n(define (is_Sum_Of_Powers_Of_Two n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sum_Of_Powers_Of_Two))\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 7) #f 0.001)\n    (check-within (candidate 14) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "#lang racket\n\n;; Write a function to sort a list of elements.\n(define (pancake_sort nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pancake_sort))\n    (check-within (candidate (list 15 79 25 38 69)) (list 15 25 38 69 79) 0.001)\n    (check-within (candidate (list 98 12 54 36 85)) (list 12 36 54 85 98) 0.001)\n    (check-within (candidate (list 41 42 32 12 23)) (list 12 23 32 41 42) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_142_count_samepair", "prompt": "#lang racket\n\n;; Write a function to count number items that are identical in the same position of three given lists.\n(define (count_samepair list1 list2 list3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_samepair))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9) (list 2 1 3 1 2 6 7 9)) 3 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 8) (list 2 1 3 1 2 6 7 8)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 2 6 7 8) (list 2 2 3 1 2 6 7 8) (list 2 1 3 1 2 6 7 8)) 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_143_find_lists", "prompt": "#lang racket\n\n;; Write a function to find number of lists present in the given list.\n(define (find_lists Input)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_lists))\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8))) 2 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4) (list 5 6))) 3 0.001)\n    (check-within (candidate (list 9 8 7 6 5 4 3 2 1)) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "#lang racket\n\n;; Write a rktthon function to find the maximum difference between any two elements in a given list.\n(define (max_Abs_Diff arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_Abs_Diff))\n    (check-within (candidate (list 2 1 5 3)) 4 0.001)\n    (check-within (candidate (list 9 3 2 5 1)) 8 0.001)\n    (check-within (candidate (list 3 2 1)) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_160_find_solution", "prompt": "#lang racket\n\n;; Write a function that returns integers x and y that satisfy ax + by = n as a list, or return #f if no solution exists.\n(define (find_solution a b n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_solution))\n    (check-within (candidate 2 3 7) (list 2 1) 0.001)\n    (check-within (candidate 4 2 7) #f 0.001)\n    (check-within (candidate 1 13 17) (list 4 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_161_remove_elements", "prompt": "#lang racket\n\n;; Write a function to remove all elements from a given list present in another list.\n(define (remove_elements list1 list2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_elements))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) (list 2 4 6 8)) (list 1 3 5 7 9 10) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) (list 1 3 5 7)) (list 2 4 6 8 9 10) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) (list 5 7)) (list 1 2 3 4 6 8 9 10) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_162_sum_series", "prompt": "#lang racket\n\n;; Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n(define (sum_series n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_series))\n    (check-within (candidate 6) 12 0.001)\n    (check-within (candidate 10) 30 0.001)\n    (check-within (candidate 9) 25 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "#lang racket\n\n;; Write a function to determine if the sum of the divisors of two integers are the same.\n(define (are_equivalent num1 num2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate are_equivalent))\n    (check-within (candidate 36 57) #f 0.001)\n    (check-within (candidate 2 4) #f 0.001)\n    (check-within (candidate 23 47) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_165_count_char_position", "prompt": "#lang racket\n\n;; Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n(define (count_char_position str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_char_position))\n    (check-within (candidate \"xbcefg\") 2 0.001)\n    (check-within (candidate \"ABcED\") 3 0.001)\n    (check-within (candidate \"AbgdeF\") 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "#lang racket\n\n;; Write a function that counts the number of pairs of integers in a list that xor to an even number.\n(define (find_even_pair A)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_even_pair))\n    (check-within (candidate (list 5 4 7 2 1)) 4 0.001)\n    (check-within (candidate (list 7 2 8 1 0 5 11)) 9 0.001)\n    (check-within (candidate (list 1 2 3)) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "#lang racket\n\n;; Write a rktthon function to find the smallest power of 2 greater than or equal to n.\n(define (next_power_of_2 n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_power_of_2))\n    (check-within (candidate 0) 1 0.001)\n    (check-within (candidate 5) 8 0.001)\n    (check-within (candidate 17) 32 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_168_frequency", "prompt": "#lang racket\n\n;; Write a function to count the number of occurrences of a number in a given list.\n(define (frequency a x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate frequency))\n    (check-within (candidate (list 1 2 3) 4) 0 0.001)\n    (check-within (candidate (list 1 2 2 3 3 3 4) 3) 3 0.001)\n    (check-within (candidate (list 0 1 2 3 1 2) 1) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "#lang racket\n\n;; Write a function to find the sum of numbers in a list within a range specified by two indices.\n(define (sum_range_list list1 m n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_range_list))\n    (check-within (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 8 10) 29 0.001)\n    (check-within (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 5 7) 16 0.001)\n    (check-within (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 7 10) 38 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "#lang racket\n\n;; Write a function to find the perimeter of a regular pentagon from the length of its sides.\n(define (perimeter_pentagon a)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perimeter_pentagon))\n    (check-within (candidate 5) 25 0.001)\n    (check-within (candidate 10) 50 0.001)\n    (check-within (candidate 15) 75 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_172_count_occurance", "prompt": "#lang racket\n\n;; Write a function to count the number of occurence of the string 'std' in a given string.\n(define (count_occurance s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_occurance))\n    (check-within (candidate \"letstdlenstdporstd\") 3 0.001)\n    (check-within (candidate \"truststdsolensporsd\") 1 0.001)\n    (check-within (candidate \"makestdsostdworthit\") 2 0.001)\n    (check-within (candidate \"stds\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_222_check_type", "prompt": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-within (candidate (list 5 6 7 3 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 \"4\")) #f 0.001)\n    (check-within (candidate (list 3 2 1 4 5)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_223_is_majority", "prompt": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-within (candidate (list 1 2 3 3 3 3 10) 7 3) #t 0.001)\n    (check-within (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f 0.001)\n    (check-within (candidate (list 1 1 1 2 2) 5 1) #t 0.001)\n    (check-within (candidate (list 1 1 2 2) 5 1) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of set bits (binary digits with value 1) in a given number.\n(define (count_Set_Bits n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Set_Bits))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 4) 1 0.001)\n    (check-within (candidate 6) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "#lang racket\n\n;; Write a rktthon function to remove the characters which have odd index values of a given string.\n(define (odd_values_string str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_values_string))\n    (check-within (candidate \"abcdef\") \"ace\" 0.001)\n    (check-within (candidate \"python\") \"pto\" 0.001)\n    (check-within (candidate \"data\") \"dt\" 0.001)\n    (check-within (candidate \"lambs\") \"lms\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_227_min_of_three", "prompt": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-within (candidate 10 20 0) 0 0.001)\n    (check-within (candidate 19 15 18) 15 0.001)\n    (check-within (candidate -10 -20 -30) -30 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether all the bits are unset in the given range or not.\n(define (all_Bits_Set_In_The_Given_Range n l r)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_Bits_Set_In_The_Given_Range))\n    (check-within (candidate 4 1 2) #t 0.001)\n    (check-within (candidate 17 2 4) #t 0.001)\n    (check-within (candidate 39 4 6) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "#lang racket\n\n;; Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n(define (re_arrange_array arr n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate re_arrange_array))\n    (check-within (candidate (list -1 2 -3 4 5 6 -7 8 9) 9) (list -1 -3 -7 4 5 6 2 8 9) 0.001)\n    (check-within (candidate (list 12 -14 -26 13 15) 5) (list -14 -26 12 13 15) 0.001)\n    (check-within (candidate (list 10 24 36 -42 -39 -78 85) 7) (list -42 -39 -78 10 24 36 85) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_230_replace_blank", "prompt": "#lang racket\n\n;; Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n(define (replace_blank str1 char)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_blank))\n    (check-within (candidate \"hello people\" \"@\") \"hello@people\" 0.001)\n    (check-within (candidate \"python program language\" \"$\") \"python$program$language\" 0.001)\n    (check-within (candidate \"blank space\" \"-\") \"blank-space\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_234_volume_cube", "prompt": "#lang racket\n\n;; Write a function to find the volume of a cube given its side length.\n(define (volume_cube l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate volume_cube))\n    (check-within (candidate 3) 27 0.001)\n    (check-within (candidate 2) 8 0.001)\n    (check-within (candidate 5) 125 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_237_check_occurences", "prompt": "#lang racket\n\n;; Write a function that takes in a list of lists and returns a hash mapping each unique list to the number of times it occurs in the list.\n(define (check_occurences test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-within (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)) 0.001)\n    (check-within (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)) 0.001)\n    (check-within (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of non-empty substrings of a given string.\n(define (number_of_substrings str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_of_substrings))\n    (check-within (candidate \"abc\") 6 0.001)\n    (check-within (candidate \"abcd\") 10 0.001)\n    (check-within (candidate \"abcde\") 15 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "#lang racket\n\n;; Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n(define (get_total_number_of_sequences m n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_total_number_of_sequences))\n    (check-within (candidate 10 4) 4 0.001)\n    (check-within (candidate 5 2) 6 0.001)\n    (check-within (candidate 16 3) 84 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_240_replace_list", "prompt": "#lang racket\n\n;; Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n(define (replace_list list1 list2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_list))\n    (check-within (candidate (list 1 3 5 7 9 10) (list 2 4 6 8)) (list 1 3 5 7 9 2 4 6 8) 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list 5 6 7 8)) (list 1 2 3 4 5 6 7 8) 0.001)\n    (check-within (candidate (list \"red\" \"blue\" \"green\") (list \"yellow\")) (list \"red\" \"blue\" \"yellow\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_242_count_charac", "prompt": "#lang racket\n\n;; Write a function to count the total number of characters in a string.\n(define (count_charac str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_charac))\n    (check-within (candidate \"python programming\") 18 0.001)\n    (check-within (candidate \"language\") 8 0.001)\n    (check-within (candidate \"words\") 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "#lang racket\n\n;; Write a rktthon function to find the next perfect square greater than a given number.\n(define (next_Perfect_Square N)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_Perfect_Square))\n    (check-within (candidate 35) 36 0.001)\n    (check-within (candidate 6) 9 0.001)\n    (check-within (candidate 9) 16 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_245_max_sum", "prompt": "#lang racket\n\n;; Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n(define (max_sum arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum))\n    (check-within (candidate (list 1 15 51 45 33 100 12 18 9)) 194 0.001)\n    (check-within (candidate (list 80 60 30 40 20 10)) 210 0.001)\n    (check-within (candidate (list 2 3 14 16 21 23 29 30)) 138 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_247_lps", "prompt": "#lang racket\n\n;; Write a function to find the length of the longest palindromic subsequence in the given string.\n(define (lps str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lps))\n    (check-within (candidate \"TENS FOR TENS\") 5 0.001)\n    (check-within (candidate \"CARDIO FOR CARDS\") 7 0.001)\n    (check-within (candidate \"PART OF THE JOURNEY IS PART\") 9 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_249_intersection_array", "prompt": "#lang racket\n\n;; Write a function to find the intersection of two lists.\n(define (intersection_array array_nums1 array_nums2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection_array))\n    (check-within (candidate (list 1 2 3 5 7 8 9 10) (list 1 2 4 8 9)) (list 1 2 8 9) 0.001)\n    (check-within (candidate (list 1 2 3 5 7 8 9 10) (list 3 5 7 9)) (list 3 5 7 9) 0.001)\n    (check-within (candidate (list 1 2 3 5 7 8 9 10) (list 10 20 30 40)) (list 10) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_250_count_X", "prompt": "#lang racket\n\n;; Write a rktthon function that takes in a list and an element and counts the occcurences of the element in the list.\n(define (count_X tup x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_X))\n    (check-within (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 4) 0 0.001)\n    (check-within (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 10) 3 0.001)\n    (check-within (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 8) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_251_insert_element", "prompt": "#lang racket\n\n;; Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n(define (insert_element list element)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate insert_element))\n    (check-within (candidate (list \"Red\" \"Green\" \"Black\") \"c\") (list \"c\" \"Red\" \"c\" \"Green\" \"c\" \"Black\") 0.001)\n    (check-within (candidate (list \"python\" \"java\") \"program\") (list \"program\" \"python\" \"program\" \"java\") 0.001)\n    (check-within (candidate (list \"happy\" \"sad\") \"laugh\") (list \"laugh\" \"happy\" \"laugh\" \"sad\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_252_convert", "prompt": "#lang racket\n\n;; Write a rktthon function to convert complex numbers to polar coordinates.\n(define (convert numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert))\n    (check-within (candidate 1) (list 1.0 0.0) 0.001)\n    (check-within (candidate 4) (list 4.0 0.0) 0.001)\n    (check-within (candidate 5) (list 5.0 0.0) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_253_count_integer", "prompt": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-within (candidate (list 1 2 \"abc\" 1.2)) 2 0.001)\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 1 1.2 4 5.1)) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "#lang racket\n\n;; Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n(define (combinations_colors l n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate combinations_colors))\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\") 1) (list (list \"Red\") (list \"Green\") (list \"Blue\")) 0.001)\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\") 2) (list (list \"Red\" \"Red\") (list \"Red\" \"Green\") (list \"Red\" \"Blue\") (list \"Green\" \"Green\") (list \"Green\" \"Blue\") (list \"Blue\" \"Blue\")) 0.001)\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\") 3) (list (list \"Red\" \"Red\" \"Red\") (list \"Red\" \"Red\" \"Green\") (list \"Red\" \"Red\" \"Blue\") (list \"Red\" \"Green\" \"Green\") (list \"Red\" \"Green\" \"Blue\") (list \"Red\" \"Blue\" \"Blue\") (list \"Green\" \"Green\" \"Green\") (list \"Green\" \"Green\" \"Blue\") (list \"Green\" \"Blue\" \"Blue\") (list \"Blue\" \"Blue\" \"Blue\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "#lang racket\n\n;; Write a rktthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n(define (count_Primes_nums n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Primes_nums))\n    (check-within (candidate 5) 2 0.001)\n    (check-within (candidate 10) 4 0.001)\n    (check-within (candidate 100) 25 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "#lang racket\n\n;; Write a function that takes in two numbers and returns a list with the second number and then the first number.\n(define (swap_numbers a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_numbers))\n    (check-within (candidate 10 20) (list 20 10) 0.001)\n    (check-within (candidate 15 17) (list 17 15) 0.001)\n    (check-within (candidate 100 200) (list 200 100) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "#lang racket\n\n;; Write a function to maximize the given two lists.\n(define (maximize_elements test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximize_elements))\n    (check-within (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 6 7) (list 4 9) (list 2 9) (list 7 10)) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 7 8) (list 5 10) (list 3 10) (list 8 11)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 8 9) (list 6 11) (list 4 11) (list 9 12)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_260_newman_prime", "prompt": "#lang racket\n\n;; Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n(define (newman_prime n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate newman_prime))\n    (check-within (candidate 3) 7 0.001)\n    (check-within (candidate 4) 17 0.001)\n    (check-within (candidate 5) 41 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_261_division_elements", "prompt": "#lang racket\n\n;; Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n(define (division_elements test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate division_elements))\n    (check-within (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 2 2 2 3) 0.001)\n    (check-within (candidate (list 12 6 8 16) (list 6 3 4 4)) (list 2 2 2 4) 0.001)\n    (check-within (candidate (list 20 14 36 18) (list 5 7 6 9)) (list 4 2 6 2) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "#lang racket\n\n;; Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\n(define (split_two_parts list1 L)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_two_parts))\n    (check-within (candidate (list 1 1 2 3 4 4 5 1) 3) (list (list 1 1 2) (list 3 4 4 5 1)) 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"c\" \"d\") 2) (list (list \"a\" \"b\") (list \"c\" \"d\")) 0.001)\n    (check-within (candidate (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\") 4) (list (list \"p\" \"y\" \"t\" \"h\") (list \"o\" \"n\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_264_dog_age", "prompt": "#lang racket\n\n;; Write a function to calculate a dog's age in dog's years.\n(define (dog_age h_age)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dog_age))\n    (check-within (candidate 12) 61 0.001)\n    (check-within (candidate 15) 73 0.001)\n    (check-within (candidate 24) 109 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_265_list_split", "prompt": "#lang racket\n\n;; Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n(define (list_split S step)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_split))\n    (check-within (candidate (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\") 3) (list (list \"a\" \"d\" \"g\" \"j\" \"m\") (list \"b\" \"e\" \"h\" \"k\" \"n\") (list \"c\" \"f\" \"i\" \"l\")) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14) 3) (list (list 1 4 7 10 13) (list 2 5 8 11 14) (list 3 6 9 12)) 0.001)\n    (check-within (candidate (list \"python\" \"java\" \"C\" \"C++\" \"DBMS\" \"SQL\") 2) (list (list \"python\" \"C\" \"DBMS\") (list \"java\" \"C++\" \"SQL\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "#lang racket\n\n;; Write a function to find the lateral surface area of a cube given its side length.\n(define (lateralsurface_cube l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lateralsurface_cube))\n    (check-within (candidate 5) 100 0.001)\n    (check-within (candidate 9) 324 0.001)\n    (check-within (candidate 10) 400 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_267_square_Sum", "prompt": "#lang racket\n\n;; Write a rktthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n(define (square_Sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-within (candidate 2) 10 0.001)\n    (check-within (candidate 3) 35 0.001)\n    (check-within (candidate 4) 84 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_268_find_star_num", "prompt": "#lang racket\n\n;; Write a function to find the n'th star number.\n(define (find_star_num n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_star_num))\n    (check-within (candidate 3) 37 0.001)\n    (check-within (candidate 4) 73 0.001)\n    (check-within (candidate 5) 121 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_269_ascii_value", "prompt": "#lang racket\n\n;; Write a function to find the ascii value of a character.\n(define (ascii_value k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate ascii_value))\n    (check-within (candidate \"A\") 65 0.001)\n    (check-within (candidate \"R\") 82 0.001)\n    (check-within (candidate \"S\") 83 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of even numbers at even positions of a list.\n(define (sum_even_and_even_index arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_even_and_even_index))\n    (check-within (candidate (list 5 6 12 1 18 8)) 30 0.001)\n    (check-within (candidate (list 3 20 17 9 2 10 18 13 6 18)) 26 0.001)\n    (check-within (candidate (list 5 6 12 1)) 12 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "#lang racket\n\n;; Write a rktthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n(define (even_Power_Sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_Power_Sum))\n    (check-within (candidate 2) 1056 0.001)\n    (check-within (candidate 3) 8832 0.001)\n    (check-within (candidate 1) 32 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_272_rear_extract", "prompt": "#lang racket\n\n;; Write a function that takes in a list of lists and returns a list containing the rear element of each list.\n(define (rear_extract test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-within (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19) 0.001)\n    (check-within (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45) 0.001)\n    (check-within (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_273_substract_elements", "prompt": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-within (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13) 0.001)\n    (check-within (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13) 0.001)\n    (check-within (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "#lang racket\n\n;; Write a rktthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n(define (even_binomial_Coeff_Sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_binomial_Coeff_Sum))\n    (check-within (candidate 4) 8 0.001)\n    (check-within (candidate 6) 32 0.001)\n    (check-within (candidate 2) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_277_dict_filter", "prompt": "#lang racket\n\n;; Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.\n(define (dict_filter dict n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dict_filter))\n    (check-within (candidate #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Kierra Gentry\" .  165) (\"Pierre Cox\" .  190)) 170) #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Pierre Cox\" .  190)) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Kierra Gentry\" .  165) (\"Pierre Cox\" .  190)) 180) #hash((\"Alden Cantrell\" .  180) (\"Pierre Cox\" .  190)) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Kierra Gentry\" .  165) (\"Pierre Cox\" .  190)) 190) #hash((\"Pierre Cox\" .  190)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "#lang racket\n\n;; Write a function to find the number of elements that occurs before the list element in the given list.\n(define (count_first_elements test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_first_elements))\n    (check-within (candidate (list 1 5 7 (list 4 6) 10)) 3 0.001)\n    (check-within (candidate (list 2 9 (list 5 7) 11)) 2 0.001)\n    (check-within (candidate (list 11 15 5 8 (list 2 3) 8)) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "#lang racket\n\n;; Write a function to find the nth decagonal number.\n(define (is_num_decagonal n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_num_decagonal))\n    (check-within (candidate 3) 27 0.001)\n    (check-within (candidate 7) 175 0.001)\n    (check-within (candidate 10) 370 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_280_sequential_search", "prompt": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-within (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3) 0.001)\n    (check-within (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7) 0.001)\n    (check-within (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_281_all_unique", "prompt": "#lang racket\n\n;; Write a rktthon function to check if the elements of a given list are unique or not.\n(define (all_unique test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_unique))\n    (check-within (candidate (list 1 2 3)) #t 0.001)\n    (check-within (candidate (list 1 2 1 2)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_282_sub_list", "prompt": "#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-within (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3) 0.001)\n    (check-within (candidate (list 1 2) (list 3 4)) (list -2 -2) 0.001)\n    (check-within (candidate (list 90 120) (list 50 70)) (list 40 50) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_283_validate", "prompt": "#lang racket\n\n;; Write a rktthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n(define (validate n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate validate))\n    (check-within (candidate 1234) #t 0.001)\n    (check-within (candidate 51241) #f 0.001)\n    (check-within (candidate 321) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_284_check_element", "prompt": "#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-within (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f 0.001)\n    (check-within (candidate (list 1 2 3 4) 7) #f 0.001)\n    (check-within (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "#lang racket\n\n;; Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n(define (text_match_two_three text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_two_three))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abbbba\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "#lang racket\n\n;; Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n(define (max_sub_array_sum_repeated a n k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum_repeated))\n    (check-within (candidate (list 10 20 -30 -1) 4 3) 30 0.001)\n    (check-within (candidate (list -1 10 20) 3 2) 59 0.001)\n    (check-within (candidate (list -1 -2 -3) 3 3) -1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_287_square_Sum", "prompt": "#lang racket\n\n;; Write a rktthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n(define (square_Sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-within (candidate 2) 20 0.001)\n    (check-within (candidate 3) 56 0.001)\n    (check-within (candidate 4) 120 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_290_max_length", "prompt": "#lang racket\n\n;; Write a function to find the list of maximum length in a list of lists.\n(define (max_length list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_length))\n    (check-within (candidate (list (list 0) (list 1 3) (list 5 7) (list 9 11) (list 13 15 17))) (list 3 (list 13 15 17)) 0.001)\n    (check-within (candidate (list (list 1) (list 5 7) (list 10 12 14 15))) (list 4 (list 10 12 14 15)) 0.001)\n    (check-within (candidate (list (list 5) (list 15 20 25))) (list 3 (list 15 20 25)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "#lang racket\n\n;; Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n(define (count_no_of_ways n k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_no_of_ways))\n    (check-within (candidate 2 4) 16 0.001)\n    (check-within (candidate 3 2) 6 0.001)\n    (check-within (candidate 4 4) 228 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_292_find", "prompt": "#lang racket\n\n;; Write a rktthon function to find quotient of two numbers (rounded down to the nearest integer).\n(define (find n m)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find))\n    (check-within (candidate 10 3) 3 0.001)\n    (check-within (candidate 4 2) 2 0.001)\n    (check-within (candidate 20 5) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "#lang racket\n\n;; Write a function to find the third side of a right angled triangle.\n(define (otherside_rightangle w h)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate otherside_rightangle))\n    (check-within (candidate 7 8) 10.63014581273465 0.001)\n    (check-within (candidate 3 4) 5 0.001)\n    (check-within (candidate 7 15) 16.55294535724685 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_294_max_val", "prompt": "#lang racket\n\n;; Write a function to find the maximum value in a given heterogeneous list.\n(define (max_val listval)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_val))\n    (check-within (candidate (list \"Python\" 3 2 4 5 \"version\")) 5 0.001)\n    (check-within (candidate (list \"Python\" 15 20 25)) 25 0.001)\n    (check-within (candidate (list \"Python\" 30 20 40 50 \"version\")) 50 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_295_sum_div", "prompt": "#lang racket\n\n;; Write a function to return the sum of all divisors of a number.\n(define (sum_div number)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_div))\n    (check-within (candidate 8) 7 0.001)\n    (check-within (candidate 12) 16 0.001)\n    (check-within (candidate 7) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "#lang racket\n\n;; Write a rktthon function to count inversions in a list.\n(define (get_Inv_Count arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_Inv_Count))\n    (check-within (candidate (list 1 20 6 4 5)) 5 0.001)\n    (check-within (candidate (list 1 2 1)) 1 0.001)\n    (check-within (candidate (list 1 2 5 6 1)) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_297_flatten_list", "prompt": "#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-within (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120) 0.001)\n    (check-within (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-within (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212) 0.001)\n    (check-within (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72) 0.001)\n    (check-within (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_304_find_Element", "prompt": "#lang racket\n\n;; Write a rktthon function to find element at a given index after number of rotations.\n(define (find_Element arr ranges rotations index)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Element))\n    (check-within (candidate (list 1 2 3 4 5) (list (list 0 2) (list 0 3)) 2 1) 3 0.001)\n    (check-within (candidate (list 1 2 3 4) (list (list 0 1) (list 0 2)) 1 2) 3 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list (list 0 1) (list 0 2)) 1 1) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_305_start_withp", "prompt": "#lang racket\n\n;; Write a function to return two words from a list of words starting with letter 'p'.\n(define (start_withp words)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate start_withp))\n    (check-within (candidate (list \"Python PHP\" \"Java JavaScript\" \"c c++\")) (list \"Python\" \"PHP\") 0.001)\n    (check-within (candidate (list \"Python Programming\" \"Java Programming\")) (list \"Python\" \"Programming\") 0.001)\n    (check-within (candidate (list \"Pqrst Pqr\" \"qrstuv\")) (list \"Pqrst\" \"Pqr\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "#lang racket\n\n;; Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max_sum_increasing_subseq a n index k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_increasing_subseq))\n    (check-within (candidate (list 1 101 2 3 100 4 5) 7 4 6) 11 0.001)\n    (check-within (candidate (list 1 101 2 3 100 4 5) 7 2 5) 7 0.001)\n    (check-within (candidate (list 11 15 19 21 26 28 31) 7 2 4) 71 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_308_large_product", "prompt": "#lang racket\n\n;; Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n(define (large_product nums1 nums2 N)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate large_product))\n    (check-within (candidate (list 1 2 3 4 5 6) (list 3 6 8 9 10 6) 3) (list 60 54 50) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 3 6 8 9 10 6) 4) (list 60 54 50 48) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 3 6 8 9 10 6) 5) (list 60 54 50 48 45) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_309_maximum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the maximum of two numbers.\n(define (maximum a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate 5 10) 10 0.001)\n    (check-within (candidate -1 -2) -1 0.001)\n    (check-within (candidate 9 7) 9 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "#lang racket\n\n;; Write a function to convert a given string to a list of characters.\n(define (string_to_tuple str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_tuple))\n    (check-within (candidate \"python 3.0\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\" \"3\" \".\" \"0\") 0.001)\n    (check-within (candidate \"item1\") (list \"i\" \"t\" \"e\" \"m\" \"1\") 0.001)\n    (check-within (candidate \"15.10\") (list \"1\" \"5\" \".\" \"1\" \"0\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "#lang racket\n\n;; Write a rktthon function to find the highest power of 2 that is less than or equal to n.\n(define (highest_Power_of_2 n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate highest_Power_of_2))\n    (check-within (candidate 10) 8 0.001)\n    (check-within (candidate 19) 16 0.001)\n    (check-within (candidate 32) 32 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_389_find_lucas", "prompt": "#lang racket\n\n;; Write a function to find the n'th lucas number.\n(define (find_lucas n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_lucas))\n    (check-within (candidate 9) 76 0.001)\n    (check-within (candidate 4) 7 0.001)\n    (check-within (candidate 3) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_390_add_string", "prompt": "#lang racket\n\n;; Write a function to apply a given format string to all of the elements in a list.\n(define (add_string list_ string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_string))\n    (check-within (candidate (list 1 2 3 4) \"temp{0}\") (list \"temp1\" \"temp2\" \"temp3\" \"temp4\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"c\" \"d\") \"python{0}\") (list \"pythona\" \"pythonb\" \"pythonc\" \"pythond\") 0.001)\n    (check-within (candidate (list 5 6 7 8) \"string{0}\") (list \"string5\" \"string6\" \"string7\" \"string8\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "#lang racket\n\n;; Write a function to convert more than one list to nested hash.\n(define (convert_list_dictionary l1 l2 l3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert_list_dictionary))\n    (check-within (candidate (list \"S001\" \"S002\" \"S003\" \"S004\") (list \"Adina Park\" \"Leyton Marsh\" \"Duncan Boyle\" \"Saim Richards\") (list 85 98 89 92)) (list #hash((\"S001\" .  #hash((\"Adina Park\" .  85)))) #hash((\"S002\" .  #hash((\"Leyton Marsh\" .  98)))) #hash((\"S003\" .  #hash((\"Duncan Boyle\" .  89)))) #hash((\"S004\" .  #hash((\"Saim Richards\" .  92))))) 0.001)\n    (check-within (candidate (list \"abc\" \"def\" \"ghi\" \"jkl\") (list \"python\" \"program\" \"language\" \"programs\") (list 100 200 300 400)) (list #hash((\"abc\" .  #hash((\"python\" .  100)))) #hash((\"def\" .  #hash((\"program\" .  200)))) #hash((\"ghi\" .  #hash((\"language\" .  300)))) #hash((\"jkl\" .  #hash((\"programs\" .  400))))) 0.001)\n    (check-within (candidate (list \"A1\" \"A2\" \"A3\" \"A4\") (list \"java\" \"C\" \"C++\" \"DBMS\") (list 10 20 30 40)) (list #hash((\"A1\" .  #hash((\"java\" .  10)))) #hash((\"A2\" .  #hash((\"C\" .  20)))) #hash((\"A3\" .  #hash((\"C++\" .  30)))) #hash((\"A4\" .  #hash((\"DBMS\" .  40))))) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "#lang racket\n\n;; Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n(define (get_max_sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_sum))\n    (check-within (candidate 60) 106 0.001)\n    (check-within (candidate 10) 12 0.001)\n    (check-within (candidate 2) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_393_max_length_list", "prompt": "#lang racket\n\n;; Write a function to find the list with maximum length.\n(define (max_length_list input_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_length_list))\n    (check-within (candidate (list (list 0) (list 1 3) (list 5 7) (list 9 11) (list 13 15 17))) (list 3 (list 13 15 17)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5) (list 1 2 3 4) (list 1 2 3) (list 1 2) (list 1))) (list 5 (list 1 2 3 4 5)) 0.001)\n    (check-within (candidate (list (list 3 4 5) (list 6 7 8 9) (list 10 11 12))) (list 4 (list 6 7 8 9)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_394_check_distinct", "prompt": "#lang racket\n\n;; Write a function to check if given list contains no duplicates.\n(define (check_distinct test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_distinct))\n    (check-within (candidate (list 1 4 5 6 1 4)) #f 0.001)\n    (check-within (candidate (list 1 4 5 6)) #t 0.001)\n    (check-within (candidate (list 2 3 4 5 6)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "#lang racket\n\n;; Write a rktthon function to find the first non-repeated character in a given string.\n(define (first_non_repeating_character str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_non_repeating_character))\n    (check-within (candidate \"abcabc\") #f 0.001)\n    (check-within (candidate \"abc\") \"a\" 0.001)\n    (check-within (candidate \"ababc\") \"c\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_396_check_char", "prompt": "#lang racket\n\n;; Write a function to check whether the given string starts and ends with the same character or not.\n(define (check_char string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_char))\n    (check-within (candidate \"abba\") \"Valid\" 0.001)\n    (check-within (candidate \"a\") \"Valid\" 0.001)\n    (check-within (candidate \"abcd\") \"Invalid\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_397_median_numbers", "prompt": "#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-within (candidate 25 55 65) 55.0 0.001)\n    (check-within (candidate 20 10 30) 20.0 0.001)\n    (check-within (candidate 15 45 75) 45.0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "#lang racket\n\n;; Write a function to compute the sum of digits of each number of a given list.\n(define (sum_of_digits nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_of_digits))\n    (check-within (candidate (list 10 2 56)) 14 0.001)\n    (check-within (candidate (list (list 10 20 4 5 \"b\" 70 \"a\"))) 19 0.001)\n    (check-within (candidate (list 10 20 -4 5 -70)) 19 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "#lang racket\n\n;; Write a function to perform the mathematical bitwise xor operation across the given lists.\n(define (bitwise_xor test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bitwise_xor))\n    (check-within (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 15 6 5 10) 0.001)\n    (check-within (candidate (list 11 5 7 10) (list 6 3 4 4)) (list 13 6 3 14) 0.001)\n    (check-within (candidate (list 12 6 8 11) (list 7 4 5 6)) (list 11 2 13 13) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_400_extract_freq", "prompt": "#lang racket\n\n;; Write a function to extract the number of unique lists in the given list.\n(define (extract_freq test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_freq))\n    (check-within (candidate (list (list 3 4) (list 1 2) (list 4 3) (list 5 6))) 3 0.001)\n    (check-within (candidate (list (list 4 15) (list 2 3) (list 5 4) (list 6 7))) 4 0.001)\n    (check-within (candidate (list (list 5 16) (list 2 3) (list 6 5) (list 6 9))) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-within (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_404_minimum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the minimum of two numbers.\n(define (minimum a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimum))\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate -5 -4) -5 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "#lang racket\n\n;; Write a function to check whether an element exists within a list.\n(define (check_tuplex tuplex tuple1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_tuplex))\n    (check-within (candidate (list \"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\") \"r\") #t 0.001)\n    (check-within (candidate (list \"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\") \"5\") #f 0.001)\n    (check-within (candidate (list \"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\") 3) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_406_find_Parity", "prompt": "#lang racket\n\n;; Write a rktthon function to find whether the parity of a given number is odd.\n(define (find_Parity x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Parity))\n    (check-within (candidate 12) #f 0.001)\n    (check-within (candidate 7) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "#lang racket\n\n;; Write a function to create the next bigger number by rearranging the digits of a given number.\n(define (rearrange_bigger n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rearrange_bigger))\n    (check-within (candidate 12) 21 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 102) 120 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "#lang racket\n\n;; Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n(define (k_smallest_pairs nums1 nums2 k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate k_smallest_pairs))\n    (check-within (candidate (list 1 3 7) (list 2 4 6) 2) (list (list 1 2) (list 1 4)) 0.001)\n    (check-within (candidate (list 1 3 7) (list 2 4 6) 1) (list (list 1 2)) 0.001)\n    (check-within (candidate (list 1 3 7) (list 2 4 6) 7) (list (list 1 2) (list 1 4) (list 3 2) (list 1 6) (list 3 4) (list 3 6) (list 7 2)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-within (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8 0.001)\n    (check-within (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30 0.001)\n    (check-within (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_410_min_val", "prompt": "#lang racket\n\n;; Write a function to find the minimum value in a given heterogeneous list.\n(define (min_val listval)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_val))\n    (check-within (candidate (list \"Python\" 3 2 4 5 \"version\")) 2 0.001)\n    (check-within (candidate (list \"Python\" 15 20 25)) 15 0.001)\n    (check-within (candidate (list \"Python\" 30 20 40 50 \"version\")) 20 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-within (candidate \"android_tv\") \"AndroidTv\" 0.001)\n    (check-within (candidate \"google_pixel\") \"GooglePixel\" 0.001)\n    (check-within (candidate \"apple_watch\") \"AppleWatch\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_412_remove_odd", "prompt": "#lang racket\n\n;; Write a rktthon function to remove odd numbers from a given list.\n(define (remove_odd l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-within (candidate (list 1 2 3)) (list 2) 0.001)\n    (check-within (candidate (list 2 4 6)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 10 20 3)) (list 10 20) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-within (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\") 0.001)\n    (check-within (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98) 0.001)\n    (check-within (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_414_overlapping", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether any value in a sequence exists in a sequence or not.\n(define (overlapping list1 list2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate overlapping))\n    (check-within (candidate (list 1 2 3 4 5) (list 6 7 8 9)) #f 0.001)\n    (check-within (candidate (list 1 2 3) (list 4 5 6)) #f 0.001)\n    (check-within (candidate (list 1 4 5) (list 1 4 5)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_415_max_Product", "prompt": "#lang racket\n\n;; Write a rktthon function to find a pair with highest product from a given list of integers.\n(define (max_Product arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_Product))\n    (check-within (candidate (list 1 2 3 4 7 0 8 4)) (list 7 8) 0.001)\n    (check-within (candidate (list 0 -1 -2 -4 5 0 -6)) (list -4 -6) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_417_group_tuples", "prompt": "#lang racket\n\n;; Write a function to find common first element in given list of lists.\n(define (group_tuples Input)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate group_tuples))\n    (check-within (candidate (list (list \"x\" \"y\") (list \"x\" \"z\") (list \"w\" \"t\"))) (list (list \"x\" \"y\" \"z\") (list \"w\" \"t\")) 0.001)\n    (check-within (candidate (list (list \"a\" \"b\") (list \"a\" \"c\") (list \"d\" \"e\"))) (list (list \"a\" \"b\" \"c\") (list \"d\" \"e\")) 0.001)\n    (check-within (candidate (list (list \"f\" \"g\") (list \"f\" \"g\") (list \"h\" \"i\"))) (list (list \"f\" \"g\" \"g\") (list \"h\" \"i\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_418_Find_Max", "prompt": "#lang racket\n\n;; Write a rktthon function to find the element of a list having maximum length.\n(define (Find_Max lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Max))\n    (check-within (candidate (list (list \"A\") (list \"A\" \"B\") (list \"A\" \"B\" \"C\"))) (list \"A\" \"B\" \"C\") 0.001)\n    (check-within (candidate (list (list 1) (list 1 2) (list 1 2 3))) (list 1 2 3) 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 2 3) (list 1 5 6 1))) (list 1 5 6 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "#lang racket\n\n;; Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n(define (round_and_sum list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate round_and_sum))\n    (check-within (candidate (list 22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5)) 243 0.001)\n    (check-within (candidate (list 5 2 9 24.3 29)) 345 0.001)\n    (check-within (candidate (list 25.0 56.7 89.2)) 513 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the cube sum of first n even natural numbers.\n(define (cube_Sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_Sum))\n    (check-within (candidate 2) 72 0.001)\n    (check-within (candidate 3) 288 0.001)\n    (check-within (candidate 4) 800 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "#lang racket\n\n;; Write a function to concatenate each element of list by the delimiter.\n(define (concatenate_tuple test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate_tuple))\n    (check-within (candidate (list \"ID\" \"is\" 4 \"UTS\")) \"ID-is-4-UTS\" 0.001)\n    (check-within (candidate (list \"QWE\" \"is\" 4 \"RTY\")) \"QWE-is-4-RTY\" 0.001)\n    (check-within (candidate (list \"ZEN\" \"is\" 4 \"OP\")) \"ZEN-is-4-OP\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "#lang racket\n\n;; Write a rktthon function to find the average of cubes of first n natural numbers.\n(define (find_Average_Of_Cube n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Average_Of_Cube))\n    (check-within (candidate 2) 4.5 0.001)\n    (check-within (candidate 3) 12 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_424_extract_rear", "prompt": "#lang racket\n\n;; Write a function to extract only the rear index element of each string in the given list.\n(define (extract_rear test_tuple)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_rear))\n    (check-within (candidate (list \"Mers\" \"for\" \"Vers\")) (list \"s\" \"r\" \"s\") 0.001)\n    (check-within (candidate (list \"Avenge\" \"for\" \"People\")) (list \"e\" \"r\" \"e\") 0.001)\n    (check-within (candidate (list \"Gotta\" \"get\" \"go\")) (list \"a\" \"t\" \"o\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "#lang racket\n\n;; Write a function to count the number of sublists containing a particular element.\n(define (count_element_in_list list1 x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_element_in_list))\n    (check-within (candidate (list (list 1 3) (list 5 7) (list 1 11) (list 1 15 7)) 1) 3 0.001)\n    (check-within (candidate (list (list \"A\" \"B\") (list \"A\" \"C\") (list \"A\" \"D\" \"E\") (list \"B\" \"C\" \"D\")) \"A\") 3 0.001)\n    (check-within (candidate (list (list \"A\" \"B\") (list \"A\" \"C\") (list \"A\" \"D\" \"E\") (list \"B\" \"C\" \"D\")) \"E\") 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "#lang racket\n\n;; Write a function to filter odd numbers.\n(define (filter_oddnumbers nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_oddnumbers))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 3 5 7 9) 0.001)\n    (check-within (candidate (list 10 20 45 67 84 93)) (list 45 67 93) 0.001)\n    (check-within (candidate (list 5 7 9 8 6 4 3)) (list 5 7 9 3) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_427_change_date_format", "prompt": "#lang racket\n\n;; Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n(define (change_date_format dt)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_date_format))\n    (check-within (candidate \"2026-01-02\") \"02-01-2026\" 0.001)\n    (check-within (candidate \"2020-11-13\") \"13-11-2020\" 0.001)\n    (check-within (candidate \"2021-04-26\") \"26-04-2021\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_428_shell_sort", "prompt": "#lang racket\n\n;; Write a function to sort the given list by using shell sort.\n(define (shell_sort my_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate shell_sort))\n    (check-within (candidate (list 12 23 4 5 3 2 12 81 56 95)) (list 2 3 4 5 12 12 23 56 81 95) 0.001)\n    (check-within (candidate (list 24 22 39 34 87 73 68)) (list 22 24 34 39 68 73 87) 0.001)\n    (check-within (candidate (list 32 30 16 96 82 83 74)) (list 16 30 32 74 82 83 96) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_429_and_tuples", "prompt": "#lang racket\n\n;; Write a function to extract the elementwise and lists from the given two lists.\n(define (and_tuples test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate and_tuples))\n    (check-within (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 0 0 2 1) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 5 6 7 8)) (list 1 2 3 0) 0.001)\n    (check-within (candidate (list 8 9 11 12) (list 7 13 14 17)) (list 0 9 10 0) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-within (candidate 5 3 2) -198 0.001)\n    (check-within (candidate 9 8 4) -2336 0.001)\n    (check-within (candidate 2 4 6) -130 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_431_common_element", "prompt": "#lang racket\n\n;; Write a function that takes two lists and returns true if they have at least one common element.\n(define (common_element list1 list2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common_element))\n    (check-within (candidate (list 1 2 3 4 5) (list 5 6 7 8 9)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list 6 7 8 9)) #f 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"c\") (list \"d\" \"b\" \"e\")) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "#lang racket\n\n;; Write a function to find the median length of a trapezium.\n(define (median_trapezium base1 base2 height)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_trapezium))\n    (check-within (candidate 15 25 35) 20 0.001)\n    (check-within (candidate 10 20 30) 15 0.001)\n    (check-within (candidate 6 9 4) 7.5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_433_check_greater", "prompt": "#lang racket\n\n;; Write a function to check whether the entered number is greater than the elements of the given list.\n(define (check_greater arr number)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_greater))\n    (check-within (candidate (list 1 2 3 4 5) 4) #f 0.001)\n    (check-within (candidate (list 2 3 4 5 6) 8) #t 0.001)\n    (check-within (candidate (list 9 7 4 8 6 1) 11) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_434_text_match_one", "prompt": "#lang racket\n\n;; Write a function that matches a string that has an a followed by one or more b's.\n(define (text_match_one text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_one))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abba\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_435_last_Digit", "prompt": "#lang racket\n\n;; Write a rktthon function to find the last digit of a given number.\n(define (last_Digit n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last_Digit))\n    (check-within (candidate 123) 3 0.001)\n    (check-within (candidate 25) 5 0.001)\n    (check-within (candidate 30) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_436_neg_nos", "prompt": "#lang racket\n\n;; Write a rktthon function to return the negative numbers in a list.\n(define (neg_nos list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate neg_nos))\n    (check-within (candidate (list -1 4 5 -6)) (list -1 -6) 0.001)\n    (check-within (candidate (list -1 -2 3 4)) (list -1 -2) 0.001)\n    (check-within (candidate (list -7 -6 8 9)) (list -7 -6) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_437_remove_odd", "prompt": "#lang racket\n\n;; Write a function to remove odd characters in a string.\n(define (remove_odd str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-within (candidate \"python\") \"yhn\" 0.001)\n    (check-within (candidate \"program\") \"rga\" 0.001)\n    (check-within (candidate \"language\") \"agae\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "#lang racket\n\n;; Write a function to count bidirectional list pairs.\n(define (count_bidirectional test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_bidirectional))\n    (check-within (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 3 0.001)\n    (check-within (candidate (list (list 5 6) (list 1 3) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 2 0.001)\n    (check-within (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 2) (list 6 5) (list 2 1))) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "#lang racket\n\n;; Write a function to join a list of multiple integers into a single integer.\n(define (multiple_to_single L)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiple_to_single))\n    (check-within (candidate (list 11 33 50)) 113350 0.001)\n    (check-within (candidate (list -1 2 3 4 5 6)) -123456 0.001)\n    (check-within (candidate (list 10 15 20 25)) 10152025 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverb_position))\n    (check-within (candidate \"clearly!! we can see the sky\") (list 0 7 \"clearly\") 0.001)\n    (check-within (candidate \"seriously!! there are many roses\") (list 0 9 \"seriously\") 0.001)\n    (check-within (candidate \"unfortunately!! sita is going to home\") (list 0 13 \"unfortunately\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "#lang racket\n\n;; Write a function to find the surface area of a cube of a given size.\n(define (surfacearea_cube l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate surfacearea_cube))\n    (check-within (candidate 5) 150 0.001)\n    (check-within (candidate 3) 54 0.001)\n    (check-within (candidate 10) 600 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_442_positive_count", "prompt": "#lang racket\n\n;; Write a function to find the ration of positive numbers in a list of integers.\n(define (positive_count nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate positive_count))\n    (check-within (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8)) 0.54 0.001)\n    (check-within (candidate (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 0.69 0.001)\n    (check-within (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) 0.56 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_443_largest_neg", "prompt": "#lang racket\n\n;; Write a rktthon function to find the largest negative number from the given list.\n(define (largest_neg list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_neg))\n    (check-within (candidate (list 1 2 3 -4 -6)) -6 0.001)\n    (check-within (candidate (list 1 2 3 -8 -9)) -9 0.001)\n    (check-within (candidate (list 1 2 3 4 -1)) -1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "#lang racket\n\n;; Write a function to trim each list by k in the given lists.\n(define (trim_tuple test_list K)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate trim_tuple))\n    (check-within (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 2) (list (list 2) (list 9) (list 2) (list 2)) 0.001)\n    (check-within (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 1) (list (list 3 2 1) (list 4 9 2) (list 1 2 3) (list 8 2 1)) 0.001)\n    (check-within (candidate (list (list 7 8 4 9) (list 11 8 12 4) (list 4 1 7 8) (list 3 6 9 7)) 1) (list (list 8 4) (list 8 12) (list 1 7) (list 6 9)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "#lang racket\n\n;; Write a function to perform index wise multiplication of list elements in the given two lists.\n(define (index_multiplication test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_multiplication))\n    (check-within (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 6 21) (list 12 45) (list 2 9) (list 7 30)) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 14 32) (list 20 60) (list 6 20) (list 16 44)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 24 45) (list 30 77) (list 12 33) (list 27 60)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "#lang racket\n\n;; Write a rktthon function to count the occurence of all elements of list in a list.\n(define (count_Occurrence tup lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Occurrence))\n    (check-within (candidate (list \"a\" \"a\" \"c\" \"b\" \"d\") (list \"a\" \"b\")) 3 0.001)\n    (check-within (candidate (list 1 2 3 1 4 6 7 1 4) (list 1 4 7)) 6 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 1 2)) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_447_cube_nums", "prompt": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000) 0.001)\n    (check-within (candidate (list 10 20 30)) (list 1000 8000 27000) 0.001)\n    (check-within (candidate (list 12 15)) (list 1728 3375) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_448_cal_sum", "prompt": "#lang racket\n\n;; Write a function to calculate the sum of perrin numbers.\n(define (cal_sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cal_sum))\n    (check-within (candidate 9) 49 0.001)\n    (check-within (candidate 10) 66 0.001)\n    (check-within (candidate 11) 88 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_450_extract_string", "prompt": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-within (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\") 0.001)\n    (check-within (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\") 0.001)\n    (check-within (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "#lang racket\n\n;; Write a function to remove all whitespaces from the given string.\n(define (remove_whitespaces text1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_whitespaces))\n    (check-within (candidate \" Google    Flutter \") \"GoogleFlutter\" 0.001)\n    (check-within (candidate \" Google    Dart \") \"GoogleDart\" 0.001)\n    (check-within (candidate \" iOS    Swift \") \"iOSSwift\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_452_loss_amount", "prompt": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-within (candidate 1500 1200) 0 0.001)\n    (check-within (candidate 100 200) 100 0.001)\n    (check-within (candidate 2000 5000) 3000 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of even factors of a number.\n(define (sumofFactors n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumofFactors))\n    (check-within (candidate 18) 26 0.001)\n    (check-within (candidate 30) 48 0.001)\n    (check-within (candidate 6) 8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "#lang racket\n\n;; Write a function that matches a word containing 'z'.\n(define (text_match_wordz text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz))\n    (check-within (candidate \"pythonz.\") #t 0.001)\n    (check-within (candidate \"xyz.\") #t 0.001)\n    (check-within (candidate \"  lang  .\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "#lang racket\n\n;; Write a function to check whether the given month number contains 31 days or not.\n(define (check_monthnumb_number monthnum2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_monthnumb_number))\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "#lang racket\n\n;; Write a function to reverse each string in a given list of string values.\n(define (reverse_string_list stringlist)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_string_list))\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\" \"White\" \"Black\")) (list \"deR\" \"neerG\" \"eulB\" \"etihW\" \"kcalB\") 0.001)\n    (check-within (candidate (list \"john\" \"amal\" \"joel\" \"george\")) (list \"nhoj\" \"lama\" \"leoj\" \"egroeg\") 0.001)\n    (check-within (candidate (list \"jack\" \"john\" \"mary\")) (list \"kcaj\" \"nhoj\" \"yram\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_457_Find_Min", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sublist having minimum length.\n(define (Find_Min lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Min))\n    (check-within (candidate (list (list 1) (list 1 2) (list 1 2 3))) (list 1) 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 1 1) (list 1 2 7 8))) (list 1 1) 0.001)\n    (check-within (candidate (list (list \"x\") (list \"x\" \"y\") (list \"x\" \"y\" \"z\"))) (list \"x\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "#lang racket\n\n;; Write a function to find the area of a rectangle.\n(define (rectangle_area l b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rectangle_area))\n    (check-within (candidate 10 20) 200 0.001)\n    (check-within (candidate 10 5) 50 0.001)\n    (check-within (candidate 4 2) 8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "#lang racket\n\n;; Write a function to remove uppercase substrings from a given string.\n(define (remove_uppercase str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_uppercase))\n    (check-within (candidate \"cAstyoUrFavoRitETVshoWs\") \"cstyoravoitshos\" 0.001)\n    (check-within (candidate \"wAtchTheinTernEtrAdIo\") \"wtchheinerntrdo\" 0.001)\n    (check-within (candidate \"VoicESeaRchAndreComMendaTionS\") \"oiceachndreomendaion\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_460_Extract", "prompt": "#lang racket\n\n;; Write a rktthon function to get the first element of each sublist.\n(define (Extract lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Extract))\n    (check-within (candidate (list (list 1 2) (list 3 4 5) (list 6 7 8 9))) (list 1 3 6) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5))) (list 1 4) 0.001)\n    (check-within (candidate (list (list 9 8 1) (list 1 2))) (list 9 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "#lang racket\n\n;; Write a rktthon function to count the upper case characters in a given string.\n(define (upper_ctr str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate upper_ctr))\n    (check-within (candidate \"PYthon\") 1 0.001)\n    (check-within (candidate \"BigData\") 1 0.001)\n    (check-within (candidate \"program\") 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_462_combinations_list", "prompt": "#lang racket\n\n;; Write a function to find all possible combinations of the elements of a given list.\n(define (combinations_list list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate combinations_list))\n    (check-within (candidate (list \"orange\" \"red\" \"green\" \"blue\")) (list (list ) (list \"orange\") (list \"red\") (list \"red\" \"orange\") (list \"green\") (list \"green\" \"orange\") (list \"green\" \"red\") (list \"green\" \"red\" \"orange\") (list \"blue\") (list \"blue\" \"orange\") (list \"blue\" \"red\") (list \"blue\" \"red\" \"orange\") (list \"blue\" \"green\") (list \"blue\" \"green\" \"orange\") (list \"blue\" \"green\" \"red\") (list \"blue\" \"green\" \"red\" \"orange\")) 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"blue\" \"white\" \"black\" \"orange\")) (list (list ) (list \"red\") (list \"green\") (list \"green\" \"red\") (list \"blue\") (list \"blue\" \"red\") (list \"blue\" \"green\") (list \"blue\" \"green\" \"red\") (list \"white\") (list \"white\" \"red\") (list \"white\" \"green\") (list \"white\" \"green\" \"red\") (list \"white\" \"blue\") (list \"white\" \"blue\" \"red\") (list \"white\" \"blue\" \"green\") (list \"white\" \"blue\" \"green\" \"red\") (list \"black\") (list \"black\" \"red\") (list \"black\" \"green\") (list \"black\" \"green\" \"red\") (list \"black\" \"blue\") (list \"black\" \"blue\" \"red\") (list \"black\" \"blue\" \"green\") (list \"black\" \"blue\" \"green\" \"red\") (list \"black\" \"white\") (list \"black\" \"white\" \"red\") (list \"black\" \"white\" \"green\") (list \"black\" \"white\" \"green\" \"red\") (list \"black\" \"white\" \"blue\") (list \"black\" \"white\" \"blue\" \"red\") (list \"black\" \"white\" \"blue\" \"green\") (list \"black\" \"white\" \"blue\" \"green\" \"red\") (list \"orange\") (list \"orange\" \"red\") (list \"orange\" \"green\") (list \"orange\" \"green\" \"red\") (list \"orange\" \"blue\") (list \"orange\" \"blue\" \"red\") (list \"orange\" \"blue\" \"green\") (list \"orange\" \"blue\" \"green\" \"red\") (list \"orange\" \"white\") (list \"orange\" \"white\" \"red\") (list \"orange\" \"white\" \"green\") (list \"orange\" \"white\" \"green\" \"red\") (list \"orange\" \"white\" \"blue\") (list \"orange\" \"white\" \"blue\" \"red\") (list \"orange\" \"white\" \"blue\" \"green\") (list \"orange\" \"white\" \"blue\" \"green\" \"red\") (list \"orange\" \"black\") (list \"orange\" \"black\" \"red\") (list \"orange\" \"black\" \"green\") (list \"orange\" \"black\" \"green\" \"red\") (list \"orange\" \"black\" \"blue\") (list \"orange\" \"black\" \"blue\" \"red\") (list \"orange\" \"black\" \"blue\" \"green\") (list \"orange\" \"black\" \"blue\" \"green\" \"red\") (list \"orange\" \"black\" \"white\") (list \"orange\" \"black\" \"white\" \"red\") (list \"orange\" \"black\" \"white\" \"green\") (list \"orange\" \"black\" \"white\" \"green\" \"red\") (list \"orange\" \"black\" \"white\" \"blue\") (list \"orange\" \"black\" \"white\" \"blue\" \"red\") (list \"orange\" \"black\" \"white\" \"blue\" \"green\") (list \"orange\" \"black\" \"white\" \"blue\" \"green\" \"red\")) 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"black\" \"orange\")) (list (list ) (list \"red\") (list \"green\") (list \"green\" \"red\") (list \"black\") (list \"black\" \"red\") (list \"black\" \"green\") (list \"black\" \"green\" \"red\") (list \"orange\") (list \"orange\" \"red\") (list \"orange\" \"green\") (list \"orange\" \"green\" \"red\") (list \"orange\" \"black\") (list \"orange\" \"black\" \"red\") (list \"orange\" \"black\" \"green\") (list \"orange\" \"black\" \"green\" \"red\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "#lang racket\n\n;; Write a function to find the maximum product sublist of the given list.\n(define (max_subarray_product arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_subarray_product))\n    (check-within (candidate (list 1 -2 -3 0 7 -8 -2)) 112 0.001)\n    (check-within (candidate (list 6 -3 -10 0 2)) 180 0.001)\n    (check-within (candidate (list -2 -40 0 -2 -3)) 80 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_464_check_value", "prompt": "#lang racket\n\n;; Write a function to check if all values are same in a hash.\n(define (check_value dict n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_value))\n    (check-within (candidate #hash((\"Cierra Vega\" .  12) (\"Alden Cantrell\" .  12) (\"Kierra Gentry\" .  12) (\"Pierre Cox\" .  12)) 10) #f 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  12) (\"Alden Cantrell\" .  12) (\"Kierra Gentry\" .  12) (\"Pierre Cox\" .  12)) 12) #t 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  12) (\"Alden Cantrell\" .  12) (\"Kierra Gentry\" .  12) (\"Pierre Cox\" .  12)) 5) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_465_drop_empty", "prompt": "#lang racket\n\n;; Write a function to drop empty items from a given hash.\n(define (drop_empty dict1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate drop_empty))\n    (check-within (candidate #hash((\"c1\" .  \"Red\") (\"c2\" .  \"Green\") (\"c3\" .  #f))) #hash((\"c1\" .  \"Red\") (\"c2\" .  \"Green\")) 0.001)\n    (check-within (candidate #hash((\"c1\" .  \"Red\") (\"c2\" .  #f) (\"c3\" .  #f))) #hash((\"c1\" .  \"Red\")) 0.001)\n    (check-within (candidate #hash((\"c1\" .  #f) (\"c2\" .  \"Green\") (\"c3\" .  #f))) #hash((\"c2\" .  \"Green\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_468_max_product", "prompt": "#lang racket\n\n;; Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n(define (max_product arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product))\n    (check-within (candidate (list 3 100 4 5 150 6)) 3000 0.001)\n    (check-within (candidate (list 4 42 55 68 80)) 50265600 0.001)\n    (check-within (candidate (list 10 22 9 33 21 50 41 60)) 2460 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-within (candidate (list 1 5 7 8 10)) (list 6 12 15 18) 0.001)\n    (check-within (candidate (list 2 6 8 9 11)) (list 8 14 17 20) 0.001)\n    (check-within (candidate (list 3 7 9 10 12)) (list 10 16 19 22) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_471_find_remainder", "prompt": "#lang racket\n\n;; Write a rktthon function to find the product of the list multiplication modulo n.\n(define (find_remainder arr n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_remainder))\n    (check-within (candidate (list 100 10 5 25 35 14) 11) 9 0.001)\n    (check-within (candidate (list 1 1 1) 1) 0 0.001)\n    (check-within (candidate (list 1 2 1) 2) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given list contains consecutive numbers or not.\n(define (check_Consecutive l)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_Consecutive))\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 5 6)) #f 0.001)\n    (check-within (candidate (list 1 2 1)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_474_replace_char", "prompt": "#lang racket\n\n;; Write a function to replace characters in a string.\n(define (replace_char str1 ch newch)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_char))\n    (check-within (candidate \"polygon\" \"y\" \"l\") \"pollgon\" 0.001)\n    (check-within (candidate \"character\" \"c\" \"a\") \"aharaater\" 0.001)\n    (check-within (candidate \"python\" \"l\" \"a\") \"python\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_475_sort_counter", "prompt": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-within (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)) 0.001)\n    (check-within (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)) 0.001)\n    (check-within (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_476_big_sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of the largest and smallest value in a given list.\n(define (big_sum nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate big_sum))\n    (check-within (candidate (list 1 2 3)) 4 0.001)\n    (check-within (candidate (list -1 2 3 4)) 3 0.001)\n    (check-within (candidate (list 2 3 6)) 8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_477_is_lower", "prompt": "#lang racket\n\n;; Write a rktthon function to convert the given string to lower case.\n(define (is_lower string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_lower))\n    (check-within (candidate \"InValid\") \"invalid\" 0.001)\n    (check-within (candidate \"TruE\") \"true\" 0.001)\n    (check-within (candidate \"SenTenCE\") \"sentence\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "#lang racket\n\n;; Write a function to remove lowercase substrings from a given string.\n(define (remove_lowercase str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_lowercase))\n    (check-within (candidate \"PYTHon\") \"PYTH\" 0.001)\n    (check-within (candidate \"FInD\") \"FID\" 0.001)\n    (check-within (candidate \"STRinG\") \"STRG\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_479_first_Digit", "prompt": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-within (candidate 123) 1 0.001)\n    (check-within (candidate 456) 4 0.001)\n    (check-within (candidate 12) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_554_Split", "prompt": "#lang racket\n\n;; Write a rktthon function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-within (candidate (list 1 2 3 4 5 6)) (list 1 3 5) 0.001)\n    (check-within (candidate (list 10 11 12 13)) (list 11 13) 0.001)\n    (check-within (candidate (list 7 8 9 1)) (list 7 9 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_555_difference", "prompt": "#lang racket\n\n;; Write a rktthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n(define (difference n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate difference))\n    (check-within (candidate 3) 30 0.001)\n    (check-within (candidate 5) 210 0.001)\n    (check-within (candidate 2) 6 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of pairs whose xor value is odd.\n(define (find_Odd_Pair A N)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Odd_Pair))\n    (check-within (candidate (list 5 4 7 2 1) 5) 6 0.001)\n    (check-within (candidate (list 7 2 8 1 0 5 11) 7) 12 0.001)\n    (check-within (candidate (list 1 2 3) 3) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_557_toggle_string", "prompt": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-within (candidate \"Python\") \"pYTHON\" 0.001)\n    (check-within (candidate \"Pangram\") \"pANGRAM\" 0.001)\n    (check-within (candidate \"LIttLE\") \"liTTle\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of the per-digit difference between two integers.\n(define (digit_distance_nums n1 n2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digit_distance_nums))\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate 23 56) 6 0.001)\n    (check-within (candidate 123 256) 7 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum))\n    (check-within (candidate (list -2 -3 4 -1 -2 1 5 -3) 8) 7 0.001)\n    (check-within (candidate (list -3 -4 5 -2 -3 2 6 -4) 8) 8 0.001)\n    (check-within (candidate (list -4 -5 6 -3 -4 3 7 -5) 8) 10 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_560_union_elements", "prompt": "#lang racket\n\n;; Write a function to find the union of the elements of two given lists and output them in sorted order.\n(define (union_elements test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate union_elements))\n    (check-within (candidate (list 3 4 5 6) (list 5 7 4 10)) (list 3 4 5 6 7 10) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 3 4 5 6)) (list 1 2 3 4 5 6) 0.001)\n    (check-within (candidate (list 11 12 13 14) (list 13 15 16 17)) (list 11 12 13 14 15 16 17) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "#lang racket\n\n;; Write a rktthon function to find the length of the longest sublists.\n(define (Find_Max_Length lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Max_Length))\n    (check-within (candidate (list (list 1) (list 1 4) (list 5 6 7 8))) 4 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 2) (list 3 2 1))) 3 0.001)\n    (check-within (candidate (list (list 7) (list 22 23) (list 13 14 15) (list 10 20 30 40 50))) 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_563_extract_values", "prompt": "#lang racket\n\n;; Write a function to extract values between quotation marks from a string.\n(define (extract_values text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_values))\n    (check-within (candidate \"\"Python\", \"PHP\", \"Java\"\") (list \"Python\" \"PHP\" \"Java\") 0.001)\n    (check-within (candidate \"\"python\",\"program\",\"language\"\") (list \"python\" \"program\" \"language\") 0.001)\n    (check-within (candidate \"\"red\",\"blue\",\"green\",\"yellow\"\") (list \"red\" \"blue\" \"green\" \"yellow\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "#lang racket\n\n;; Write a rktthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n(define (count_Pairs arr n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Pairs))\n    (check-within (candidate (list 1 2 1) 3) 2 0.001)\n    (check-within (candidate (list 1 1 1 1) 4) 0 0.001)\n    (check-within (candidate (list 1 2 3 4 5) 5) 10 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_565_split", "prompt": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-within (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\") 0.001)\n    (check-within (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\") 0.001)\n    (check-within (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_566_sum_digits", "prompt": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-within (candidate 345) 12 0.001)\n    (check-within (candidate 12) 3 0.001)\n    (check-within (candidate 97) 16 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_567_issort_list", "prompt": "#lang racket\n\n;; Write a function to check whether a specified list is sorted or not.\n(define (issort_list list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate issort_list))\n    (check-within (candidate (list 1 2 4 6 8 10 12 14 16 17)) #t 0.001)\n    (check-within (candidate (list 1 2 4 6 8 10 12 14 20 17)) #f 0.001)\n    (check-within (candidate (list 1 2 4 6 8 10 15 14 20)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_568_empty_list", "prompt": "#lang racket\n\n;; Write a function to create a list of N empty dictionaries.\n(define (empty_list length)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate empty_list))\n    (check-within (candidate 5) (list #hash() #hash() #hash() #hash() #hash()) 0.001)\n    (check-within (candidate 6) (list #hash() #hash() #hash() #hash() #hash() #hash()) 0.001)\n    (check-within (candidate 7) (list #hash() #hash() #hash() #hash() #hash() #hash() #hash()) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "#lang racket\n\n;; Write a function to sort each sublist of strings in a given list of lists.\n(define (sort_sublists list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_sublists))\n    (check-within (candidate (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"white\" \"black\" \"orange\"))) (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"black\" \"orange\" \"white\")) 0.001)\n    (check-within (candidate (list (list \"green\" \"orange\") (list \"black\") (list \"green\" \"orange\") (list \"white\"))) (list (list \"green\" \"orange\") (list \"black\") (list \"green\" \"orange\") (list \"white\")) 0.001)\n    (check-within (candidate (list (list \"a\" \"b\") (list \"d\" \"c\") (list \"g\" \"h\") (list \"f\" \"e\"))) (list (list \"a\" \"b\") (list \"c\" \"d\") (list \"g\" \"h\") (list \"e\" \"f\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "#lang racket\n\n;; Write a rktthon function to remove duplicate numbers from a given number of lists.\n(define (two_unique_nums nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate two_unique_nums))\n    (check-within (candidate (list 1 2 3 2 3 4 5)) (list 1 4 5) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 5)) (list 1 3 4 5) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 2 3 4 5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_573_unique_product", "prompt": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-within (candidate (list 10 20 30 40 20 50 60 40)) 720000000 0.001)\n    (check-within (candidate (list 1 2 3 1)) 6 0.001)\n    (check-within (candidate (list 7 8 9 0 1 1)) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "#lang racket\n\n;; Write a function to find the surface area of a cylinder.\n(define (surfacearea_cylinder r h)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate surfacearea_cylinder))\n    (check-within (candidate 10 5) 942.45 0.001)\n    (check-within (candidate 4 5) 226.18800000000002 0.001)\n    (check-within (candidate 4 10) 351.848 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-within (candidate (list 1 4 3 5) (list 1 2)) #f 0.001)\n    (check-within (candidate (list 1 2 1) (list 1 2 1)) #t 0.001)\n    (check-within (candidate (list 1 0 2 2) (list 2 2 0)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "#lang racket\n\n;; Write a rktthon function to find the last digit in factorial of a given number.\n(define (last_Digit_Factorial n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last_Digit_Factorial))\n    (check-within (candidate 4) 4 0.001)\n    (check-within (candidate 21) 0 0.001)\n    (check-within (candidate 30) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "#lang racket\n\n;; Write a function to interleave 3 lists of the same length into a single flat list.\n(define (interleave_lists list1 list2 list3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate interleave_lists))\n    (check-within (candidate (list 1 2 3 4 5 6 7) (list 10 20 30 40 50 60 70) (list 100 200 300 400 500 600 700)) (list 1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700) 0.001)\n    (check-within (candidate (list 10 20) (list 15 2) (list 5 10)) (list 10 15 5 20 2 10) 0.001)\n    (check-within (candidate (list 11 44) (list 10 15) (list 20 5)) (list 11 10 20 44 15 5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "#lang racket\n\n;; Write a function to find the dissimilar elements in the given two lists.\n(define (find_dissimilar test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_dissimilar))\n    (check-within (candidate (list 3 4 5 6) (list 5 7 4 10)) (list 3 6 7 10) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 7 2 3 9)) (list 1 4 7 9) 0.001)\n    (check-within (candidate (list 21 11 25 26) (list 26 34 21 36)) (list 34 36 11 25) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_580_extract_even", "prompt": "#lang racket\n\n;; Write a function to remove uneven elements in the nested mixed list.\n(define (extract_even test_tuple)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_even))\n    (check-within (candidate (list 4 5 (list 7 6 (list 2 4)) 6 8)) (list 4 (list 6 (list 2 4)) 6 8) 0.001)\n    (check-within (candidate (list 5 6 (list 8 7 (list 4 8)) 7 9)) (list 6 (list 8 (list 4 8))) 0.001)\n    (check-within (candidate (list 5 6 (list 9 8 (list 4 6)) 8 10)) (list 6 (list 8 (list 4 6)) 8 10) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_581_surface_Area", "prompt": "#lang racket\n\n;; Write a rktthon function to find the surface area of a square rktramid with a given base edge and height.\n(define (surface_Area b s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate surface_Area))\n    (check-within (candidate 3 4) 33 0.001)\n    (check-within (candidate 4 5) 56 0.001)\n    (check-within (candidate 1 2) 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_583_catalan_number", "prompt": "#lang racket\n\n;; Write a function which returns nth catalan number.\n(define (catalan_number num)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate catalan_number))\n    (check-within (candidate 10) 16796 0.001)\n    (check-within (candidate 9) 4862 0.001)\n    (check-within (candidate 7) 429 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "#lang racket\n\n;; Write a function to find the first adverb ending with ly and its positions in a given string.\n(define (find_adverbs text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverbs))\n    (check-within (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\" 0.001)\n    (check-within (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\" 0.001)\n    (check-within (candidate \"Complete the task quickly\") \"18-25: quickly\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_585_expensive_items", "prompt": "#lang racket\n\n;; Write a function to find the n most expensive items in a given dataset.\n(define (expensive_items items n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate expensive_items))\n    (check-within (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 0.001)\n    (check-within (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09))) 2) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1))) 0.001)\n    (check-within (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09)) #hash((\"name\" .  \"Item-4\") (\"price\" .  22.75))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_586_split_Arr", "prompt": "#lang racket\n\n;; Write a rktthon function to split a list at the nth eelment and add the first part to the end.\n(define (split_Arr l n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_Arr))\n    (check-within (candidate (list 12 10 5 6 52 36) 2) (list 5 6 52 36 12 10) 0.001)\n    (check-within (candidate (list 1 2 3 4) 1) (list 2 3 4 1) 0.001)\n    (check-within (candidate (list 0 1 2 3 4 5 6 7) 3) (list 3 4 5 6 7 0 1 2) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_587_list_tuple", "prompt": "#lang racket\n\n;; Write a function to convert a list to a list.\n(define (list_tuple listx)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_tuple))\n    (check-within (candidate (list 5 10 7 4 15 3)) (list 5 10 7 4 15 3) 0.001)\n    (check-within (candidate (list 2 4 5 6 2 3 4 4 7)) (list 2 4 5 6 2 3 4 4 7) 0.001)\n    (check-within (candidate (list 58 44 56)) (list 58 44 56) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_588_big_diff", "prompt": "#lang racket\n\n;; Write a rktthon function to find the difference between largest and smallest value in a given list.\n(define (big_diff nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate big_diff))\n    (check-within (candidate (list 1 2 3 4)) 3 0.001)\n    (check-within (candidate (list 4 5 12)) 8 0.001)\n    (check-within (candidate (list 9 2 3)) 7 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-within (candidate 1 30) (list 1 4 9 16 25) 0.001)\n    (check-within (candidate 50 100) (list 64 81 100) 0.001)\n    (check-within (candidate 100 200) (list 100 121 144 169 196) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_591_swap_List", "prompt": "#lang racket\n\n;; Write a rktthon function to interchange the first and last elements in a list.\n(define (swap_List newList)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_List))\n    (check-within (candidate (list 12 35 9 56 24)) (list 24 35 9 56 12) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 3 2 1) 0.001)\n    (check-within (candidate (list 4 5 6)) (list 6 5 4) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of the product of consecutive binomial co-efficients.\n(define (sum_Of_product n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_Of_product))\n    (check-within (candidate 3) 15 0.001)\n    (check-within (candidate 4) 56 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "#lang racket\n\n;; Write a function to remove leading zeroes from an ip address.\n(define (removezero_ip ip)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate removezero_ip))\n    (check-within (candidate \"216.08.094.196\") \"216.8.94.196\" 0.001)\n    (check-within (candidate \"12.01.024\") \"12.1.24\" 0.001)\n    (check-within (candidate \"216.08.094.0196\") \"216.8.94.196\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "#lang racket\n\n;; Write a function to find the difference of the first even and first odd number of a given list.\n(define (diff_even_odd list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate diff_even_odd))\n    (check-within (candidate (list 1 3 5 7 4 1 6 8)) 3 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) 1 0.001)\n    (check-within (candidate (list 1 5 7 9 10)) 9 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "#lang racket\n\n;; Write a rktthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n(define (min_Swaps str1 str2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_Swaps))\n    (check-within (candidate \"1101\" \"1110\") 1 0.001)\n    (check-within (candidate \"111\" \"000\") \"Not Possible\" 0.001)\n    (check-within (candidate \"111\" \"110\") \"Not Possible\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_597_find_kth", "prompt": "#lang racket\n\n;; Write a function to find kth element from the given two sorted lists.\n(define (find_kth arr1 arr2 k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_kth))\n    (check-within (candidate (list 2 3 6 7 9) (list 1 4 8 10) 5) 6 0.001)\n    (check-within (candidate (list 100 112 256 349 770) (list 72 86 113 119 265 445 892) 7) 256 0.001)\n    (check-within (candidate (list 3 4 7 8 10) (list 2 5 9 11) 6) 8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-within (candidate 153) #t 0.001)\n    (check-within (candidate 259) #f 0.001)\n    (check-within (candidate 4458) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_599_sum_average", "prompt": "#lang racket\n\n;; Write a function to find sum and average of first n natural numbers.\n(define (sum_average number)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_average))\n    (check-within (candidate 10) (list 55 5.5) 0.001)\n    (check-within (candidate 15) (list 120 8.0) 0.001)\n    (check-within (candidate 20) (list 210 10.5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_600_is_Even", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given number is even or not.\n(define (is_Even n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Even))\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 2) #t 0.001)\n    (check-within (candidate 3) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "#lang racket\n\n;; Write a rktthon function to find the first repeated character in a given string.\n(define (first_repeated_char str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_repeated_char))\n    (check-within (candidate \"abcabc\") \"a\" 0.001)\n    (check-within (candidate \"abc\") #f 0.001)\n    (check-within (candidate \"123123\") \"1\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_603_get_ludic", "prompt": "#lang racket\n\n;; Write a function to get all lucid numbers smaller than or equal to a given integer.\n(define (get_ludic n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_ludic))\n    (check-within (candidate 10) (list 1 2 3 5 7) 0.001)\n    (check-within (candidate 25) (list 1 2 3 5 7 11 13 17 23 25) 0.001)\n    (check-within (candidate 45) (list 1 2 3 5 7 11 13 17 23 25 29 37 41 43) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_604_reverse_words", "prompt": "#lang racket\n\n;; Write a function to reverse words seperated by spaces in a given string.\n(define (reverse_words s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_words))\n    (check-within (candidate \"python program\") \"program python\" 0.001)\n    (check-within (candidate \"java language\") \"language java\" 0.001)\n    (check-within (candidate \"indian man\") \"man indian\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_605_prime_num", "prompt": "#lang racket\n\n;; Write a function to check if the given integer is a prime number.\n(define (prime_num num)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_num))\n    (check-within (candidate 13) #t 0.001)\n    (check-within (candidate 7) #t 0.001)\n    (check-within (candidate -1010) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_606_radian_degree", "prompt": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-within (candidate 90) 1.5707963267948966 0.001)\n    (check-within (candidate 60) 1.0471975511965976 0.001)\n    (check-within (candidate 120) 2.0943951023931953 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_607_find_literals", "prompt": "#lang racket\n\n;; Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n(define (find_literals text pattern)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_literals))\n    (check-within (candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") (list \"fox\" 16 19) 0.001)\n    (check-within (candidate \"Its been a very crazy procedure right\" \"crazy\") (list \"crazy\" 16 21) 0.001)\n    (check-within (candidate \"Hardest choices required strongest will\" \"will\") (list \"will\" 35 39) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_608_bell_Number", "prompt": "#lang racket\n\n;; Write a rktthon function to find nth bell number.\n(define (bell_Number n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bell_Number))\n    (check-within (candidate 2) 2 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 15 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "#lang racket\n\n;; Write a rktthon function which takes a list and returns a list with the same elements, but the k'th element removed.\n(define (remove_kth_element list1 L)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_kth_element))\n    (check-within (candidate (list 1 1 2 3 4 4 5 1) 3) (list 1 1 3 4 4 5 1) 0.001)\n    (check-within (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4) 4) (list 0 0 1 3 4 4 5 6 6 6 7 8 9 4 4) 0.001)\n    (check-within (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10) 5) (list 10 10 15 19 18 17 26 26 17 18 10) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-within (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19 0.001)\n    (check-within (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10 0.001)\n    (check-within (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_612_merge", "prompt": "#lang racket\n\n;; Write a rktthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n(define (merge lst)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge))\n    (check-within (candidate (list (list \"x\" \"y\") (list \"a\" \"b\") (list \"m\" \"n\"))) (list (list \"x\" \"a\" \"m\") (list \"y\" \"b\" \"n\")) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4) (list 5 6) (list 7 8))) (list (list 1 3 5 7) (list 2 4 6 8)) 0.001)\n    (check-within (candidate (list (list \"x\" \"y\" \"z\") (list \"a\" \"b\" \"c\") (list \"m\" \"n\" \"o\"))) (list (list \"x\" \"a\" \"m\") (list \"y\" \"b\" \"n\") (list \"z\" \"c\" \"o\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "#lang racket\n\n;; Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n(define (cummulative_sum test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cummulative_sum))\n    (check-within (candidate (list (list 1 3) (list 5 6 7) (list 2 6))) 30 0.001)\n    (check-within (candidate (list (list 2 4) (list 6 7 8) (list 3 7))) 37 0.001)\n    (check-within (candidate (list (list 3 5) (list 7 8 9) (list 4 8))) 44 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_615_average_tuple", "prompt": "#lang racket\n\n;; Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n(define (average_tuple nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-within (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25) 0.001)\n    (check-within (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75) 0.001)\n    (check-within (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "#lang racket\n\n;; Write a function which takes two lists of the same length and performs the element wise modulo.\n(define (tuple_modulo test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_modulo))\n    (check-within (candidate (list 10 4 5 6) (list 5 6 7 5)) (list 0 4 5 1) 0.001)\n    (check-within (candidate (list 11 5 6 7) (list 6 7 8 6)) (list 5 5 6 1) 0.001)\n    (check-within (candidate (list 12 6 7 8) (list 7 8 9 7)) (list 5 6 7 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "#lang racket\n\n;; Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n(define (min_Jumps steps d)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_Jumps))\n    (check-within (candidate (list 3 4) 11) 3.5 0.001)\n    (check-within (candidate (list 3 4) 0) 0 0.001)\n    (check-within (candidate (list 11 14) 11) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_618_div_list", "prompt": "#lang racket\n\n;; Write a function to divide two lists element wise.\n(define (div_list nums1 nums2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate div_list))\n    (check-within (candidate (list 4 5 6) (list 1 2 3)) (list 4.0 2.5 2.0) 0.001)\n    (check-within (candidate (list 3 2) (list 1 4)) (list 3.0 0.5) 0.001)\n    (check-within (candidate (list 90 120) (list 50 70)) (list 1.8 1.7142857142857142) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_619_move_num", "prompt": "#lang racket\n\n;; Write a function to move all the numbers to the end of the given string.\n(define (move_num test_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_num))\n    (check-within (candidate \"I1love143you55three3000thousand\") \"Iloveyouthreethousand1143553000\" 0.001)\n    (check-within (candidate \"Avengers124Assemble\") \"AvengersAssemble124\" 0.001)\n    (check-within (candidate \"Its11our12path13to14see15things16do17things\") \"Itsourpathtoseethingsdothings11121314151617\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_622_get_median", "prompt": "#lang racket\n\n;; Write a function to find the median of two sorted lists of same size.\n(define (get_median arr1 arr2 n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_median))\n    (check-within (candidate (list 1 12 15 26 38) (list 2 13 17 30 45) 5) 16.0 0.001)\n    (check-within (candidate (list 2 4 8 9) (list 7 13 19 28) 4) 8.5 0.001)\n    (check-within (candidate (list 3 6 14 23 36 42) (list 2 18 27 39 49 55) 6) 25.0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_623_nth_nums", "prompt": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100) 0.001)\n    (check-within (candidate (list 10 20 30) 3) (list 1000 8000 27000) 0.001)\n    (check-within (candidate (list 12 15) 5) (list 248832 759375) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_624_is_upper", "prompt": "#lang racket\n\n;; Write a rktthon function to convert a given string to uppercase.\n(define (is_upper string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_upper))\n    (check-within (candidate \"person\") \"PERSON\" 0.001)\n    (check-within (candidate \"final\") \"FINAL\" 0.001)\n    (check-within (candidate \"Valid\") \"VALID\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_625_swap_List", "prompt": "#lang racket\n\n;; Write a rktthon function to interchange the first and last element in a given list.\n(define (swap_List newList)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_List))\n    (check-within (candidate (list 1 2 3)) (list 3 2 1) 0.001)\n    (check-within (candidate (list 1 2 3 4 4)) (list 4 2 3 4 1) 0.001)\n    (check-within (candidate (list 4 5 6)) (list 6 5 4) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_626_triangle_area", "prompt": "#lang racket\n\n;; Write a rktthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n(define (triangle_area r)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate -1) #f 0.001)\n    (check-within (candidate 0) 0 0.001)\n    (check-within (candidate 2) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "#lang racket\n\n;; Write a rktthon function to find the smallest missing number from a sorted list of natural numbers.\n(define (find_First_Missing array)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_First_Missing))\n    (check-within (candidate (list 0 1 2 3)) 4 0.001)\n    (check-within (candidate (list 0 1 2 6 9)) 3 0.001)\n    (check-within (candidate (list 2 3 5 8 9)) 0 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-within (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\" 0.001)\n    (check-within (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\" 0.001)\n    (check-within (candidate \"I love Coding\") \"I%20love%20Coding\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_629_Split", "prompt": "#lang racket\n\n;; Write a rktthon function to find even numbers from a list of numbers.\n(define (Split list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-within (candidate (list 1 2 3 4 5)) (list 2 4) 0.001)\n    (check-within (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0) 0.001)\n    (check-within (candidate (list 8 12 15 19)) (list 8 12) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "#lang racket\n\n;; Write a function to extract all the adjacent coordinates of the given coordinate list.\n(define (get_coordinates test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_coordinates))\n    (check-within (candidate (list 3 4)) (list (list 2 3) (list 2 4) (list 2 5) (list 3 3) (list 3 4) (list 3 5) (list 4 3) (list 4 4) (list 4 5)) 0.001)\n    (check-within (candidate (list 4 5)) (list (list 3 4) (list 3 5) (list 3 6) (list 4 4) (list 4 5) (list 4 6) (list 5 4) (list 5 5) (list 5 6)) 0.001)\n    (check-within (candidate (list 5 6)) (list (list 4 5) (list 4 6) (list 4 7) (list 5 5) (list 5 6) (list 5 7) (list 6 5) (list 6 6) (list 6 7)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "#lang racket\n\n;; Write a function to replace whitespaces with an underscore and vice versa in a given string.\n(define (replace_spaces text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-within (candidate \"Jumanji The Jungle\") \"Jumanji_The_Jungle\" 0.001)\n    (check-within (candidate \"The_Avengers\") \"The Avengers\" 0.001)\n    (check-within (candidate \"Fast and Furious\") \"Fast_and_Furious\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_632_move_zero", "prompt": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-within (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0) 0.001)\n    (check-within (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0) 0.001)\n    (check-within (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of xor of all pairs of numbers in the given list.\n(define (pair_xor_Sum arr n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pair_xor_Sum))\n    (check-within (candidate (list 5 9 7 6) 4) 47 0.001)\n    (check-within (candidate (list 7 3 5) 3) 12 0.001)\n    (check-within (candidate (list 7 3) 2) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_635_heap_sort", "prompt": "#lang racket\n\n;; Write a function to sort the given list.\n(define (heap_sort iterable)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_sort))\n    (check-within (candidate (list 1 3 5 7 9 2 4 6 8 0)) (list 0 1 2 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 25 35 22 85 14 65 75 25 58)) (list 14 22 25 25 35 58 65 75 85) 0.001)\n    (check-within (candidate (list 7 1 9 5)) (list 1 5 7 9) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "#lang racket\n\n;; Write a function to check whether the given amount has no profit and no loss\n(define (noprofit_noloss actual_cost sale_amount)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate noprofit_noloss))\n    (check-within (candidate 1500 1200) #f 0.001)\n    (check-within (candidate 100 100) #t 0.001)\n    (check-within (candidate 2000 5000) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_638_wind_chill", "prompt": "#lang racket\n\n;; Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n(define (wind_chill v t)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate wind_chill))\n    (check-within (candidate 120 35) 40 0.001)\n    (check-within (candidate 40 20) 19 0.001)\n    (check-within (candidate 10 8) 6 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_639_sample_nam", "prompt": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-within (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16 0.001)\n    (check-within (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10 0.001)\n    (check-within (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "#lang racket\n\n;; Write a function to remove the parenthesis and what is inbetween them from a string.\n(define (remove_parenthesis items)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_parenthesis))\n    (check-within (candidate (list \"python (chrome)\")) \"python\" 0.001)\n    (check-within (candidate (list \"string(.abc)\")) \"string\" 0.001)\n    (check-within (candidate (list \"alpha(num)\")) \"alpha\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "#lang racket\n\n;; Write a function to find the nth nonagonal number.\n(define (is_nonagonal n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nonagonal))\n    (check-within (candidate 10) 325 0.001)\n    (check-within (candidate 15) 750 0.001)\n    (check-within (candidate 18) 1089 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "#lang racket\n\n;; Write a function that checks if a strings contains 'z', except at the start and end of the word.\n(define (text_match_wordz_middle text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz_middle))\n    (check-within (candidate \"pythonzabc.\") #t 0.001)\n    (check-within (candidate \"zxyabc.\") #f 0.001)\n    (check-within (candidate \"  lang  .\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "#lang racket\n\n;; Write a rktthon function to reverse a list upto a given position.\n(define (reverse_Array_Upto_K input k)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_Array_Upto_K))\n    (check-within (candidate (list 1 2 3 4 5 6) 4) (list 4 3 2 1 5 6) 0.001)\n    (check-within (candidate (list 4 5 6 7) 2) (list 5 4 6 7) 0.001)\n    (check-within (candidate (list 9 8 7 6 5) 3) (list 7 8 9 6 5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "#lang racket\n\n;; Write a function to add a hash to the list. The output should be a list.\n(define (add_dict_to_tuple test_tup test_dict)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_dict_to_tuple))\n    (check-within (candidate (list 4 5 6) #hash((\"MSAM\" .  1) (\"is\" .  2) (\"best\" .  3))) (list 4 5 6 #hash((\"MSAM\" .  1) (\"is\" .  2) (\"best\" .  3))) 0.001)\n    (check-within (candidate (list 1 2 3) #hash((\"UTS\" .  2) (\"is\" .  3) (\"Worst\" .  4))) (list 1 2 3 #hash((\"UTS\" .  2) (\"is\" .  3) (\"Worst\" .  4))) 0.001)\n    (check-within (candidate (list 8 9 10) #hash((\"POS\" .  3) (\"is\" .  4) (\"Okay\" .  5))) (list 8 9 10 #hash((\"POS\" .  3) (\"is\" .  4) (\"Okay\" .  5))) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "#lang racket\n\n;; Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n(define (maxAverageOfPath cost)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxAverageOfPath))\n    (check-within (candidate (list (list 1 2 3) (list 6 5 4) (list 7 3 9))) 5.2 0.001)\n    (check-within (candidate (list (list 2 3 4) (list 7 6 5) (list 8 4 10))) 6.2 0.001)\n    (check-within (candidate (list (list 3 4 5) (list 8 7 6) (list 9 5 11))) 7.2 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9))) 5.8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_722_filter_data", "prompt": "#lang racket\n\n;; The input is given as - a hash with a student name as a key and a list of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-within (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4 0.001)\n    (check-within (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11 0.001)\n    (check-within (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1 0.001)\n    (check-within (candidate (list 0 1 1 2) (list 0 1 2 2)) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-within (candidate 2 100) 115 0.001)\n    (check-within (candidate 8 10) 37 0.001)\n    (check-within (candidate 8 15) 62 0.001)\n    (check-within (candidate 3 3) 9 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "#lang racket\n\n;; Write a function to extract values between quotation marks \" \" of the given string.\n(define (extract_quotation text1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_quotation))\n    (check-within (candidate \"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\") (list \"A53\" \"multi\" \"Processor\") 0.001)\n    (check-within (candidate \"Cast your \"favorite\" entertainment \"apps\"\") (list \"favorite\" \"apps\") 0.001)\n    (check-within (candidate \"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\") (list \"4k Ultra HD\" \"HDR 10\") 0.001)\n    (check-within (candidate \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "#lang racket\n\n;; Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the list is equal to t_i * t_{i+1}.\n(define (multiply_elements test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply_elements))\n    (check-within (candidate (list 1 5 7 8 10)) (list 5 35 56 80) 0.001)\n    (check-within (candidate (list 2 4 5 6 7)) (list 8 20 30 42) 0.001)\n    (check-within (candidate (list 12 13 14 9 15)) (list 156 182 126 135) 0.001)\n    (check-within (candidate (list 12)) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_728_sum_list", "prompt": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-within (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65) 0.001)\n    (check-within (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10) 0.001)\n    (check-within (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "#lang racket\n\n;; Write a function to remove consecutive duplicates of a given list.\n(define (consecutive_duplicates nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate consecutive_duplicates))\n    (check-within (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list 0 1 2 3 4 5 6 7 8 9 4) 0.001)\n    (check-within (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list 10 15 19 18 17 26 17 18 10) 0.001)\n    (check-within (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list \"a\" \"b\" \"c\" \"d\") 0.001)\n    (check-within (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\" \"a\" \"a\")) (list \"a\" \"b\" \"c\" \"d\" \"a\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "#lang racket\n\n;; Write a function to find the lateral surface area of a cone given radius r and the height h.\n(define (lateralsurface_cone r h)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lateralsurface_cone))\n    (check-within (candidate 5 12) 204.20352248333654 0.001)\n    (check-within (candidate 10 15) 566.3586699569488 0.001)\n    (check-within (candidate 19 17) 1521.8090132193388 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "#lang racket\n\n;; Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n(define (replace_specialchar text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_specialchar))\n    (check-within (candidate \"Python language, Programming language.\") \"Python:language::Programming:language:\" 0.001)\n    (check-within (candidate \"a b c,d e f\") \"a:b:c:d:e:f\" 0.001)\n    (check-within (candidate \"ram reshma,ram rahim\") \"ram:reshma:ram:rahim\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "#lang racket\n\n;; Write a function to find the index of the first occurrence of a given number in a sorted list.\n(define (find_first_occurrence A x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_first_occurrence))\n    (check-within (candidate (list 2 5 5 5 6 6 8 9 9 9) 5) 1 0.001)\n    (check-within (candidate (list 2 3 5 5 6 6 8 9 9 9) 5) 2 0.001)\n    (check-within (candidate (list 2 4 1 5 6 6 8 9 9 9) 6) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "#lang racket\n\n;; Write a rktthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n(define (sum_Of_Subarray_Prod arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_Of_Subarray_Prod))\n    (check-within (candidate (list 1 2 3)) 20 0.001)\n    (check-within (candidate (list 1 2)) 5 0.001)\n    (check-within (candidate (list 1 2 3 4)) 84 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "#lang racket\n\n;; Write a rktthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n(define (toggle_middle_bits n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_middle_bits))\n    (check-within (candidate 9) 15 0.001)\n    (check-within (candidate 10) 12 0.001)\n    (check-within (candidate 11) 13 0.001)\n    (check-within (candidate 65) 127 0.001)\n    (check-within (candidate 77) 115 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_736_left_insertion", "prompt": "#lang racket\n\n;; Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rktthon-exercises/data-structures-and-algorithms/rktthon-data-structure-exercise-24.php\n(define (left_insertion a x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_insertion))\n    (check-within (candidate (list 1 2 4 5) 6) 4 0.001)\n    (check-within (candidate (list 1 2 4 5) 3) 2 0.001)\n    (check-within (candidate (list 1 2 4 5) 7) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_737_check_str", "prompt": "#lang racket\n\n;; Write a function to check whether the given string is starting with a vowel or not using regex.\n(define (check_str string)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_str))\n    (check-within (candidate \"annie\") #t 0.001)\n    (check-within (candidate \"dawood\") #f 0.001)\n    (check-within (candidate \"Else\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "#lang racket\n\n;; Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rktthon-exercises/data-structures-and-algorithms/rktthon-recursion-exercise-9.php\n(define (geometric_sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate geometric_sum))\n    (check-within (candidate 7) 1.9921875 0.001)\n    (check-within (candidate 4) 1.9375 0.001)\n    (check-within (candidate 8) 1.99609375 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_739_find_Index", "prompt": "#lang racket\n\n;; Write a rktthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n(define (find_Index n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Index))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 14 0.001)\n    (check-within (candidate 4) 45 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "#lang racket\n\n;; Write a function to convert the given list to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/rktthon-convert-list-to-adjacent-pair-hash/\n(define (tuple_to_dict test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_dict))\n    (check-within (candidate (list 1 5 7 10 13 5)) #hash((1 .  5) (7 .  10) (13 .  5)) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #hash((1 .  2) (3 .  4) (5 .  6)) 0.001)\n    (check-within (candidate (list 7 8 9 10 11 12)) #hash((7 .  8) (9 .  10) (11 .  12)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether all the characters are same or not.\n(define (all_Characters_Same s)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_Characters_Same))\n    (check-within (candidate \"python\") #f 0.001)\n    (check-within (candidate \"aaa\") #t 0.001)\n    (check-within (candidate \"data\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "#lang racket\n\n;; Write a function to caluclate the area of a tetrahedron.\n(define (area_tetrahedron side)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate area_tetrahedron))\n    (check-within (candidate 3) 15.588457268119894 0.001)\n    (check-within (candidate 20) 692.8203230275509 0.001)\n    (check-within (candidate 10) 173.20508075688772 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_743_rotate_right", "prompt": "#lang racket\n\n;; Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/rktthon-program-right-rotate-list-n/\n(define (rotate_right list m)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rotate_right))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 3) (list 8 9 10 1 2 3 4 5 6 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 9 10 1 2 3 4 5 6 7 8) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 5) (list 6 7 8 9 10 1 2 3 4 5) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_744_check_none", "prompt": "#lang racket\n\n;; Write a function to check if the given list has any none value or not.\n(define (check_none test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_none))\n    (check-within (candidate (list 10 4 5 6 #f)) #t 0.001)\n    (check-within (candidate (list 7 8 9 11 14)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 #f)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rktthon-exercises/lambda/rktthon-lambda-exercise-24.php\n(define (divisible_by_digits startnum endnum)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisible_by_digits))\n    (check-within (candidate 1 22) (list 1 2 3 4 5 6 7 8 9 11 12 15 22) 0.001)\n    (check-within (candidate 1 15) (list 1 2 3 4 5 6 7 8 9 11 12 15) 0.001)\n    (check-within (candidate 20 25) (list 22 24) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_746_sector_area", "prompt": "#lang racket\n\n;; Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return #f if the angle is larger than 360 degrees.\n(define (sector_area r a)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sector_area))\n    (check-within (candidate 4 45) 6.283185307179586 0.001)\n    (check-within (candidate 9 45) 31.808625617596654 0.001)\n    (check-within (candidate 9 361) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "#lang racket\n\n;; Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n(define (lcs_of_three X Y Z)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lcs_of_three))\n    (check-within (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2 0.001)\n    (check-within (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5 0.001)\n    (check-within (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "#lang racket\n\n;; Write a function to put spaces between words starting with capital letters in a given string.\n(define (capital_words_spaces str1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate capital_words_spaces))\n    (check-within (candidate \"Python\") \"Python\" 0.001)\n    (check-within (candidate \"PythonProgrammingExamples\") \"Python Programming Examples\" 0.001)\n    (check-within (candidate \"GetReadyToBeCodingFreak\") \"Get Ready To Be Coding Freak\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "#lang racket\n\n;; Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/rktthon-sort-numeric-strings-in-a-list/\n(define (sort_numeric_strings nums_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numeric_strings))\n    (check-within (candidate (list \"4\" \"12\" \"45\" \"7\" \"0\" \"100\" \"200\" \"-12\" \"-500\")) (list -500 -12 0 4 7 12 45 100 200) 0.001)\n    (check-within (candidate (list \"2\" \"3\" \"8\" \"4\" \"7\" \"9\" \"8\" \"2\" \"6\" \"5\" \"1\" \"6\" \"1\" \"2\" \"3\" \"4\" \"6\" \"9\" \"1\" \"2\")) (list 1 1 1 2 2 2 2 3 3 4 4 5 6 6 6 7 8 8 9 9) 0.001)\n    (check-within (candidate (list \"1\" \"3\" \"5\" \"7\" \"1\" \"3\" \"13\" \"15\" \"17\" \"5\" \"7 \" \"9\" \"1\" \"11\")) (list 1 1 1 3 3 5 5 7 7 9 11 13 15 17) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_750_add_tuple", "prompt": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-within (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10) 0.001)\n    (check-within (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11) 0.001)\n    (check-within (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "#lang racket\n\n;; Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n(define (check_min_heap arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_min_heap))\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 2 3 4 5 10 15)) #t 0.001)\n    (check-within (candidate (list 2 10 4 5 3 15)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "#lang racket\n\n;; Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n(define (jacobsthal_num n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate jacobsthal_num))\n    (check-within (candidate 5) 11 0.001)\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 4) 5 0.001)\n    (check-within (candidate 13) 2731 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_753_min_k", "prompt": "#lang racket\n\n;; Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/rktthon-find-minimum-k-records-from-list-list/ - in this case a verbatim corkt of test cases\n(define (min_k test_list K)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_k))\n    (check-within (candidate (list (list \"Manjeet\" 10) (list \"Akshat\" 4) (list \"Akash\" 2) (list \"Nikhil\" 8)) 2) (list (list \"Akash\" 2) (list \"Akshat\" 4)) 0.001)\n    (check-within (candidate (list (list \"Sanjeev\" 11) (list \"Angat\" 5) (list \"Akash\" 3) (list \"Nepin\" 9)) 3) (list (list \"Akash\" 3) (list \"Angat\" 5) (list \"Nepin\" 9)) 0.001)\n    (check-within (candidate (list (list \"tanmay\" 14) (list \"Amer\" 11) (list \"Ayesha\" 9) (list \"SKD\" 16)) 1) (list (list \"Ayesha\" 9)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-within (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7) 0.001)\n    (check-within (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6) 0.001)\n    (check-within (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5) 0.001)\n    (check-within (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_755_second_smallest", "prompt": "#lang racket\n\n;; Write a function to find the second smallest number in a list.\n(define (second_smallest numbers)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate second_smallest))\n    (check-within (candidate (list 1 2 -8 -2 0 -2)) -2 0.001)\n    (check-within (candidate (list 1 1 -0.5 0 2 -2 -2)) -0.5 0.001)\n    (check-within (candidate (list 2 2)) #f 0.001)\n    (check-within (candidate (list 2 2 2)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rktthon-exercises/re/rktthon-re-exercise-3.php\n(define (text_match_zero_one text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_zero_one))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abbbba\") #t 0.001)\n    (check-within (candidate \"dsabbbba\") #t 0.001)\n    (check-within (candidate \"asbbbba\") #f 0.001)\n    (check-within (candidate \"abaaa\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "#lang racket\n\n;; Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/rktthon-program-to-count-the-pairs-of-reverse-strings/\n(define (count_reverse_pairs test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_reverse_pairs))\n    (check-within (candidate (list \"julia\" \"best\" \"tseb\" \"for\" \"ailuj\")) 2 0.001)\n    (check-within (candidate (list \"geeks\" \"best\" \"for\" \"skeeg\")) 1 0.001)\n    (check-within (candidate (list \"makes\" \"best\" \"sekam\" \"for\" \"rof\")) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_759_is_decimal", "prompt": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-within (candidate \"123.11\") #t 0.001)\n    (check-within (candidate \"e666.86\") #f 0.001)\n    (check-within (candidate \"3.124587\") #f 0.001)\n    (check-within (candidate \"1.11\") #t 0.001)\n    (check-within (candidate \"1.1.11\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_760_unique_Element", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether a list of numbers contains only one distinct element or not.\n(define (unique_Element arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_Element))\n    (check-within (candidate (list 1 1 1)) #t 0.001)\n    (check-within (candidate (list 1 2 1 2)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "#lang racket\n\n;; Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n(define (check_monthnumber_number monthnum3)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_monthnumber_number))\n    (check-within (candidate 6) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate 12) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "#lang racket\n\n;; Write a rktthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n(define (find_min_diff arr n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_min_diff))\n    (check-within (candidate (list 1 5 3 19 18 25) 6) 1 0.001)\n    (check-within (candidate (list 4 3 2 6) 4) 1 0.001)\n    (check-within (candidate (list 30 5 20 9) 4) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_764_number_ctr", "prompt": "#lang racket\n\n;; Write a rktthon function to count number of digits in a given string.\n(define (number_ctr str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_ctr))\n    (check-within (candidate \"program2bedone\") 1 0.001)\n    (check-within (candidate \"3wonders\") 1 0.001)\n    (check-within (candidate \"123\") 3 0.001)\n    (check-within (candidate \"3wond-1ers2\") 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_765_is_polite", "prompt": "#lang racket\n\n;; Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n(define (is_polite n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_polite))\n    (check-within (candidate 7) 11 0.001)\n    (check-within (candidate 4) 7 0.001)\n    (check-within (candidate 9) 13 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_766_pair_wise", "prompt": "#lang racket\n\n;; Write a function to return a list of all pairs of consecutive items in a given list.\n(define (pair_wise l1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pair_wise))\n    (check-within (candidate (list 1 1 2 3 3 4 4 5)) (list (list 1 1) (list 1 2) (list 2 3) (list 3 3) (list 3 4) (list 4 4) (list 4 5)) 0.001)\n    (check-within (candidate (list 1 5 7 9 10)) (list (list 1 5) (list 5 7) (list 7 9) (list 9 10)) 0.001)\n    (check-within (candidate (list 5 1 9 7 10)) (list (list 5 1) (list 1 9) (list 9 7) (list 7 10)) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list (list 1 2) (list 2 3) (list 3 4) (list 4 5) (list 5 6) (list 6 7) (list 7 8) (list 8 9) (list 9 10)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n(define (get_pairs_count arr sum)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_pairs_count))\n    (check-within (candidate (list 1 1 1 1) 2) 6 0.001)\n    (check-within (candidate (list 1 5 7 -1 5) 6) 3 0.001)\n    (check-within (candidate (list 1 -2 3) 1) 1 0.001)\n    (check-within (candidate (list -1 -2 3) -3) 1 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_769_Diff", "prompt": "#lang racket\n\n;; Write a rktthon function to get the difference between two lists.\n(define (Diff li1 li2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Diff))\n    (check-within (candidate (list 10 15 20 25 30 35 40) (list 25 40 35)) (list 10 20 30 15) 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list 6 7 1)) (list 2 3 4 5 6 7) 0.001)\n    (check-within (candidate (list 1 2 3) (list 6 7 1)) (list 2 3 6 7) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of fourth power of first n odd natural numbers.\n(define (odd_num_sum n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_num_sum))\n    (check-within (candidate 2) 82 0.001)\n    (check-within (candidate 3) 707 0.001)\n    (check-within (candidate 4) 3108 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_771_check_expression", "prompt": "#lang racket\n\n;; Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n(define (check_expression exp)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_expression))\n    (check-within (candidate \"{()}[{}]\") #t 0.001)\n    (check-within (candidate \"{()}[{]\") #f 0.001)\n    (check-within (candidate \"{()}[{}][]({})\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_772_remove_length", "prompt": "#lang racket\n\n;; Write a function to remove all the words with k length in the given string.\n(define (remove_length test_str K)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_length))\n    (check-within (candidate \"The person is most value tet\" 3) \"person is most value\" 0.001)\n    (check-within (candidate \"If you told me about this ok\" 4) \"If you me about ok\" 0.001)\n    (check-within (candidate \"Forces of darkeness is come into the play\" 4) \"Forces of darkeness is the\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. Return #f if there is no match.\n(define (occurance_substring text pattern)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate occurance_substring))\n    (check-within (candidate \"python programming, python language\" \"python\") (list \"python\" 0 6) 0.001)\n    (check-within (candidate \"python programming,programming language\" \"programming\") (list \"programming\" 7 18) 0.001)\n    (check-within (candidate \"python programming,programming language\" \"language\") (list \"language\" 31 39) 0.001)\n    (check-within (candidate \"c++ programming, c++ language\" \"python\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_775_odd_position", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether every odd index contains odd numbers of a given list.\n(define (odd_position nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_position))\n    (check-within (candidate (list 2 1 4 3 6 7 6 3)) #t 0.001)\n    (check-within (candidate (list 4 1 2)) #t 0.001)\n    (check-within (candidate (list 1 2 3)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_776_count_vowels", "prompt": "#lang racket\n\n;; Write a function to count those characters which have vowels as their neighbors in the given string.\n(define (count_vowels test_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_vowels))\n    (check-within (candidate \"bestinstareels\") 7 0.001)\n    (check-within (candidate \"partofthejourneyistheend\") 12 0.001)\n    (check-within (candidate \"amazonprime\") 5 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_777_find_sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-within (candidate (list 1 2 3 1 1 4 5 6)) 21 0.001)\n    (check-within (candidate (list 1 10 9 4 2 10 10 45 4)) 71 0.001)\n    (check-within (candidate (list 12 10 9 45 2 10 10 45 10)) 78 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-within (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)) 0.001)\n    (check-within (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)) 0.001)\n    (check-within (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_780_find_combinations", "prompt": "#lang racket\n\n;; Write a function to find the combinations of sums with lists in the given list list. https://www.geeksforgeeks.org/rktthon-combinations-of-sum-with-lists-in-list-list/\n(define (find_combinations test_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_combinations))\n    (check-within (candidate (list (list 2 4) (list 6 7) (list 5 1) (list 6 10))) (list (list 8 11) (list 7 5) (list 8 14) (list 11 8) (list 12 17) (list 11 11)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 7 8) (list 6 2) (list 7 11))) (list (list 10 13) (list 9 7) (list 10 16) (list 13 10) (list 14 19) (list 13 13)) 0.001)\n    (check-within (candidate (list (list 4 6) (list 8 9) (list 7 3) (list 8 12))) (list (list 12 15) (list 11 9) (list 12 18) (list 15 12) (list 16 21) (list 15 15)) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_781_count_divisors", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the count of divisors is even. https://www.w3resource.com/rktthon-exercises/basic/rktthon-basic-1-exercise-24.php\n(define (count_divisors n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_divisors))\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 100) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n(define (odd_length_sum arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_length_sum))\n    (check-within (candidate (list 1 2 4)) 14 0.001)\n    (check-within (candidate (list 1 2 1 2)) 15 0.001)\n    (check-within (candidate (list 1 7)) 8 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "#lang racket\n\n;; Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n(define (rgb_to_hsv r g b)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rgb_to_hsv))\n    (check-within (candidate 255 255 255) (list 0.0 0.0 100.0) 0.001)\n    (check-within (candidate 0 215 0) (list 120.0 100.0 84.31372549019608) 0.001)\n    (check-within (candidate 10 215 110) (list 149.26829268292684 95.34883720930233 84.31372549019608) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "#lang racket\n\n;; Write a function to find the product of first even and odd number of a given list.\n(define (mul_even_odd list1)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mul_even_odd))\n    (check-within (candidate (list 1 3 5 7 4 1 6 8)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 1 5 7 9 10)) 10 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "#lang racket\n\n;; Write a function to convert list string to integer list.\n(define (tuple_str_int test_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_str_int))\n    (check-within (candidate \"(7, 8, 9)\") (list 7 8 9) 0.001)\n    (check-within (candidate \"(1, 2, 3)\") (list 1 2 3) 0.001)\n    (check-within (candidate \"(4, 5, 6)\") (list 4 5 6) 0.001)\n    (check-within (candidate \"(7, 81, 19)\") (list 7 81 19) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_786_right_insertion", "prompt": "#lang racket\n\n;; Write a function to locate the right insertion point for a specified value in sorted order.\n(define (right_insertion a x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_insertion))\n    (check-within (candidate (list 1 2 4 5) 6) 4 0.001)\n    (check-within (candidate (list 1 2 4 5) 3) 2 0.001)\n    (check-within (candidate (list 1 2 4 5) 7) 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_787_text_match_three", "prompt": "#lang racket\n\n;; Write a function that matches a string that has an a followed by three 'b'.\n(define (text_match_three text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_three))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abbbba\") #t 0.001)\n    (check-within (candidate \"caacabbbba\") #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_788_new_tuple", "prompt": "#lang racket\n\n;; Write a function to create a new list from the given string and list.\n(define (new_tuple test_list test_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate new_tuple))\n    (check-within (candidate (list \"WEB\" \"is\") \"best\") (list \"WEB\" \"is\" \"best\") 0.001)\n    (check-within (candidate (list \"We\" \"are\") \"Developers\") (list \"We\" \"are\" \"Developers\") 0.001)\n    (check-within (candidate (list \"Part\" \"is\") \"Wrong\") (list \"Part\" \"is\" \"Wrong\") 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_790_even_position", "prompt": "#lang racket\n\n;; Write a rktthon function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3)) #f 0.001)\n    (check-within (candidate (list 2 1 4)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_791_remove_nested", "prompt": "#lang racket\n\n;; Write a function to remove lists from the given list.\n(define (remove_nested test_tup)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_nested))\n    (check-within (candidate (list 1 5 7 (list 4 6) 10)) (list 1 5 7 10) 0.001)\n    (check-within (candidate (list 2 6 8 (list 5 7) 11)) (list 2 6 8 11) 0.001)\n    (check-within (candidate (list 3 7 9 (list 6 8) 12)) (list 3 7 9 12) 0.001)\n    (check-within (candidate (list 3 7 9 (list 6 8) (list 5 12) 12)) (list 3 7 9 12) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_792_count_list", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of lists in a given number of lists.\n(define (count_list input_list)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_list))\n    (check-within (candidate (list (list 1 3) (list 5 7) (list 9 11) (list 13 15 17))) 4 0.001)\n    (check-within (candidate (list (list 1 2) (list 2 3) (list 4 5))) 3 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0))) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_793_last", "prompt": "#lang racket\n\n;; Write a rktthon function to find the last position of an element in a sorted list.\n(define (last arr x)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last))\n    (check-within (candidate (list 1 2 3) 1) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 4) 1) 2 0.001)\n    (check-within (candidate (list 2 3 2 3 6 8 9) 3) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n(define (text_starta_endb text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_starta_endb))\n    (check-within (candidate \"aabbbb\") #t 0.001)\n    (check-within (candidate \"aabAbbbc\") #f 0.001)\n    (check-within (candidate \"accddbbjjj\") #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_796_return_sum", "prompt": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-within (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600 0.001)\n    (check-within (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88 0.001)\n    (check-within (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of all odd natural numbers within the range l and r.\n(define (sum_in_range l r)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_in_range))\n    (check-within (candidate 2 5) 8 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 13) 40 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_798__sum", "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of a list.\n(define (_sum arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate _sum))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 15 12 13 10)) 50 0.001)\n    (check-within (candidate (list 0 1 2)) 3 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_799_left_rotate", "prompt": "#lang racket\n\n;; Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n(define (left_rotate n d)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_rotate))\n    (check-within (candidate 16 2) 64 0.001)\n    (check-within (candidate 10 2) 40 0.001)\n    (check-within (candidate 99 3) 792 0.001)\n    (check-within (candidate 99 3) 792 0.001)\n    (check-within (candidate 1 3) 8 0.001)\n    (check-within (candidate 5 3) 40 0.001)\n    (check-within (candidate 29 3) 232 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "#lang racket\n\n;; Write a function to remove all whitespaces from a string.\n(define (remove_all_spaces text)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_all_spaces))\n    (check-within (candidate \"python  program\") \"pythonprogram\" 0.001)\n    (check-within (candidate \"python   programming    language\") \"pythonprogramminglanguage\" 0.001)\n    (check-within (candidate \"python                     program\") \"pythonprogram\" 0.001)\n    (check-within (candidate \"   python                     program\") \"pythonprogram\" 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-within (candidate 1 1 1) 3 0.001)\n    (check-within (candidate -1 -2 -3) 0 0.001)\n    (check-within (candidate 1 2 2) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_802_count_rotation", "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n(define (count_rotation arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_rotation))\n    (check-within (candidate (list 3 2 1)) 1 0.001)\n    (check-within (candidate (list 4 5 1 2 3)) 2 0.001)\n    (check-within (candidate (list 7 8 9 1 2 3)) 3 0.001)\n    (check-within (candidate (list 1 2 3)) 0 0.001)\n    (check-within (candidate (list 1 3 2)) 2 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "#lang racket\n\n;; Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n(define (is_perfect_square n)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_perfect_square))\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 36) #t 0.001)\n    (check-within (candidate 14) #f 0.001)\n    (check-within (candidate 196) #t 0.001)\n    (check-within (candidate 125) #f 0.001)\n    (check-within (candidate 15625) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_804_is_product_even", "prompt": "#lang racket\n\n;; Write a function to check whether the product of numbers in a list is even or not.\n(define (is_product_even arr)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_product_even))\n    (check-within (candidate (list 1 2 3)) #t 0.001)\n    (check-within (candidate (list 1 2 1 4)) #t 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12) 0.001)\n    (check-within (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10) 0.001)\n    (check-within (candidate (list (list 2 3 1))) (list 2 3 1) 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "#lang racket\n\n;; Write a function to find maximum run of uppercase characters in the given string.\n(define (max_run_uppercase test_str)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_run_uppercase))\n    (check-within (candidate \"GeMKSForGERksISBESt\") 5 0.001)\n    (check-within (candidate \"PrECIOusMOVemENTSYT\") 6 0.001)\n    (check-within (candidate \"GooGLEFluTTER\") 4 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_807_first_odd", "prompt": "#lang racket\n\n;; Write a rktthon function to find the first odd number in a given list of numbers.\n(define (first_odd nums)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_odd))\n    (check-within (candidate (list 1 3 5)) 1 0.001)\n    (check-within (candidate (list 2 4 1 3)) 1 0.001)\n    (check-within (candidate (list 8 9 1)) 9 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_808_check_K", "prompt": "#lang racket\n\n;; Write a function to check if the given lists contain the k or not.\n(define (check_K test_tup K)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_K))\n    (check-within (candidate (list 10 4 5 6 8) 6) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) 7) #f 0.001)\n    (check-within (candidate (list 7 8 9 44 11 12) 11) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}, {"task_id": "mbpp_809_check_smaller", "prompt": "#lang racket\n\n;; Write a function to check if each element of second list is smaller than its corresponding element in the first list.\n(define (check_smaller test_tup1 test_tup2)\n", "test": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_smaller))\n    (check-within (candidate (list 1 2 3) (list 2 3 4)) #f 0.001)\n    (check-within (candidate (list 4 5 6) (list 3 4 5)) #t 0.001)\n    (check-within (candidate (list 11 12 13) (list 10 11 12)) #t 0.001)\n))\n\n(test-humaneval)", "language": "rkt"}]