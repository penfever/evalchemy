[{"task_id": "HumanEval_0_has_close_elements", "prompt": "-- Check if in given table of numbers, are any two numbers closer to each other than\n-- given threshold.\n-- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\n-- false\n-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n-- true\nlocal function has_close_elements(numbers, threshold)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "-- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n-- separate those group into separate strings and return the table of those.\n-- Separate groups are balanced (each open brace is properly closed) and not nested within each other\n-- Ignore any spaces in the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()', '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "-- Given a positive floating point number, it can be decomposed into\n-- and integer part (largest integer smaller than given number) and decimals\n-- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n-- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_3_below_zero", "prompt": "-- You're given a table of deposit and withdrawal operations on a bank account that starts with\n-- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n-- at that point function should return true. Otherwise it should return false.\n-- >>> below_zero({1, 2, 3})\n-- false\n-- >>> below_zero({1, 2, -4, 5})\n-- true\nlocal function below_zero(operations)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_zero\n    lu.assertEquals(candidate({}), false)\n    lu.assertEquals(candidate({1, 2, -3, 1, 2, -3}), false)\n    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)\n    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)\n    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -5}), true)\n    lu.assertEquals(candidate({1, -2, 2, -2, 5, -5, 4, -4}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_5_intersperse", "prompt": "-- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1, 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings, substring)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_8_sum_product", "prompt": "-- For a given table of integers, return a table consisting of a sum and a product of all the integers in a table.\n-- Empty sum should be equal to 0 and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n-- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n-- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_11_string_xor", "prompt": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_12_longest", "prompt": "-- Out of table of strings, return the longest one. Return the first one in case of multiple\n-- strings of the same length. Return nil in case the input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3, 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "-- Return table of all prefixes from shortest to longest of the input string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "-- Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n-- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "-- Given a string, find out how many distinct characters (regardless of case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_17_parse_music", "prompt": "-- Input to this function is a string representing musical notes in a special ASCII format.\n-- Your task is to parse this string and return table of integers corresponding to how many beats does each\n-- not last.\n-- Here is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "-- Find how many times a given substring can be found in the original string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>> how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\nlocal function how_many_times(string, substring)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25, 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "-- Filter given table of any lua values only for integers\n-- >>> filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_23_strlen", "prompt": "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n-- 3\nlocal function strlen(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_25_factorize", "prompt": "-- Return table of prime factors of given integer in the order from smallest to largest.\n-- Each of the factors should be tableed number of times corresponding to how many times it appeares in factorization.\n-- Input number should be equal to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n-- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "-- From a table of integers, remove all elements that occur more than once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1, 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_27_flip_case", "prompt": "-- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'), 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_28_concatenate", "prompt": "-- Concatenate table of strings into a single string\n-- >>> concatenate({})\n-- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc', 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings, prefix)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_30_get_positive", "prompt": "-- Return only positive numbers in the table.\n-- >>> get_positive({-1, 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_31_is_prime", "prompt": "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n-- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_33_sort_third", "prompt": "-- This function takes a table l and returns a table l' such that\n-- l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n-- to the values of the corresponding indicies of l, but sorted.\n-- >>> sort_third({1, 2, 3})\n-- {1, 2, 3}\n-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})\n-- {2, 6, 3, 4, 8, 9, 5}\nlocal function sort_third(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_third\n    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})\n    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})\n    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})\n    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_34_unique", "prompt": "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_35_max_element", "prompt": "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n-- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal function max_element(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "-- Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n-- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_37_sort_even", "prompt": "-- This function takes a table l and returns a table l' such that\n-- l' is identical to l in the odd indicies, while its values at the even indicies are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1, 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal function sort_even(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "-- prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n-- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns true if there are three distinct elements in the table that\n-- sum to zero, and false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1, 3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n-- false\nlocal function triples_sum_to_zero(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1, 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "-- Imagine a road that's a perfectly straight infinitely long line.\n-- n cars are driving left to right;  simultaneously, a different set of n cars\n-- are driving right to left.   The two sets of cars start out being very far from\n-- each other.  All cars move in the same speed.  Two cars are said to collide\n-- when a car that's moving left to right hits a car that's moving right to left.\n-- However, the cars are infinitely sturdy and strong; as a result, they continue moving\n-- in their trajectory as if they did not collide.\n-- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_42_incr_list", "prompt": "-- Return table with elements incremented by 1.\n-- >>> incr_list({1, 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns true if there are two distinct elements in the table that\n-- sum to zero, and false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1, 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n-- false\nlocal function pairs_sum_to_zero(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_44_change_base", "prompt": "-- Change numerical base of input number x to base.\n-- return string representation after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "-- Given length of a side and high return area for a triangle.\n-- >>> triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_46_fib4", "prompt": "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) -> 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n-- Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n-- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_47_median", "prompt": "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2, 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n-- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n-- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_49_modp", "prompt": "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n-- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "-- remove_vowels is a function that takes string and returns string without vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "-- Return true if all numbers in the table l are below threshold t.\n-- >>> below_threshold({1, 2, 4, 10}, 100)\n-- true\n-- >>> below_threshold({1, 20, 4, 10}, 5)\n-- false\nlocal function below_threshold(l, t)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_threshold\n    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 5), false)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)\n    lu.assertEquals(candidate({1, 8, 4, 10}, 11), true)\n    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_53_add", "prompt": "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n-- 12\nlocal function add(x, y)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_54_same_chars", "prompt": "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n-- true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd', 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n-- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function same_chars(s0, s1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_55_fib", "prompt": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n-- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n-- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_57_monotonic", "prompt": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_58_common", "prompt": "-- Return sorted unique common elements for two tables.\n-- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5, 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n-- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n-- 2\nlocal function largest_prime_factor(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n-- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n-- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n-- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n-- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_62_derivative", "prompt": "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2] * x^2 + ....\n--  Return derivative of this polynomial in the same form.\n-- >>> derivative({3, 1, 2, 4, 5})\n-- {1, 4, 12, 20}\n-- >>> derivative({1, 2, 3})\n-- {2, 6}\nlocal function derivative(xs)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3, 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_63_fibfib", "prompt": "-- The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n-- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n-- Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n-- 24\nlocal function fibfib(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "-- Write a function vowels_count which takes a string representing\n-- a word as input and returns the number of vowels in the string.\n-- Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n-- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "-- Circular shift the digits of the integer x, shift the digits right by shift\n-- and return the result as a string.\n-- If shift > number of digits, return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12, 2)\n-- '12'\nlocal function circular_shift(x, shift)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_66_digitSum", "prompt": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum('')\n-- 0\n-- >>> digitSum('abAB')\n-- 131\n-- >>> digitSum('abcCd')\n-- 67\n-- >>> digitSum('helloE')\n-- 69\n-- >>> digitSum('woArBld')\n-- 131\n-- >>> digitSum('aAaaaXa')\n-- 153\nlocal function digitSum(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "-- In this task, you will be given a string that represents a number of apples and oranges \n-- that are distributed in a basket of fruit this basket contains \n-- apples, oranges, and mango fruits. Given the string that represents the total number of \n-- the oranges and apples and an integer that represent the total number of the fruits \n-- in the basket return the number of the mango fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges', 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n-- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function fruit_distribution(s, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_68_pluck", "prompt": "-- \"Given a table representing a branch of a tree that has non-negative integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The plucked node should be the node with the smallest even value.\n-- If multiple nodes with the same smallest even value are found return the node that has smallest index.\n-- The plucked node should be returned in a table, [ smalest_value, its index ],\n-- If there are no even values or the given table is empty, return [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>> pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest value, but  there are two zeros,\n--              so we will choose the first zero, which has the smallest index.\n-- Constraints:\n--     * 1 <= nodes.length <= 10000\n--     * 0 <= node.value\nlocal function pluck(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_69_search", "prompt": "-- You are given a non-empty table of positive integers. Return the greatest integer that is greater than \n-- zero, and has a frequency greater than or equal to the value of the integer itself. \n-- The frequency of an integer is the number of times it appears in the table.\n-- If no such a value exist, return -1.\n-- Examples:\n-- >>> search({4, 1, 2, 2, 3, 1})\n-- 2\n-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})\n-- 3\n-- >>> search({5, 5, 4, 4, 4})\n-- -1\nlocal function search(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n    lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}), 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}), -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n    lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "-- Given table of integers, return table in strange order.\n-- Strange sorting, is when you start with the minimum value,\n-- then maximum of the remaining integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1, 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5, 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "-- Given the lengths of the three sides of a triangle. Return the area of\n-- the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when the sum of any two sides is greater \n-- than the third side.\n-- Example:\n-- >>> triangle_area(3, 4, 5)\n-- 6.0\n-- >>> triangle_area(1, 2, 10)\n-- -1\nlocal function triangle_area(a, b, c)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "-- Write a function that returns true if the object q will fly, and false otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2, 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n-- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "-- Given a table arr of integers, find the minimum number of elements that\n-- need to be changed to make the table palindromic. A palindromic table is a table that\n-- is read the same backwards and forwards. In one change, you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n-- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3, 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_74_total_match", "prompt": "-- Write a function that accepts two tables of strings and returns the table that has \n-- total number of chars in the all strings of the table less than the other table.\n-- if the two tables have the same number of chars, return the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi', 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi', 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'}, {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "-- Write a function that returns true if the given number is the multiplication of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\nlocal function is_multiply_prime(a)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "-- Your task is to write a function that returns true if a number x is a simple\n-- power of n and false in other cases.\n-- x is a simple power of n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>> is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>> is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n-- >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_77_iscube", "prompt": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n-- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n-- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_78_hex_key", "prompt": "-- You have been tasked to write a function that receives \n-- a hexadecimal number as a string and counts the number of hexadecimal \n-- digits that are primes (prime number, or a prime, is a natural number \n-- greater than 1 that is not a product of two smaller natural numbers).\n-- Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n-- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n-- 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "-- You will be given a number in decimal form and your task is to convert it to\n-- binary format. The function should return a string, with each character representing a binary\n-- number. Each character in the string will be '0' or '1'.\n-- There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n-- The extra characters are there to help with the format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n-- 'db100000db'\nlocal function decimal_to_binary(decimal)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_80_is_happy", "prompt": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy('a')\n-- false\n-- >>> is_happy('aa')\n-- false\n-- >>> is_happy('abcd')\n-- true\n-- >>> is_happy('aabb')\n-- false\n-- >>> is_happy('adb')\n-- true\n-- >>> is_happy('xyy')\n-- false\nlocal function is_happy(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "-- It is the last week of the semester and the teacher has to give the grades\n-- to students. The teacher has been making her own algorithm for grading.\n-- The only problem is, she has lost the code she used for grading.\n-- She has given you a table of GPAs for some students and you have to write \n-- a function that can output a table of letter grades using the following table:\n--          GPA       |    Letter grade\n--           4.0                A+\n--         > 3.7                A \n--         > 3.3                A- \n--         > 3.0                B+\n--         > 2.7                B \n--         > 2.3                B-\n--         > 2.0                C+\n--         > 1.7                C\n--         > 1.3                C-\n--         > 1.0                D+ \n--         > 0.7                D \n--         > 0.0                D-\n--           0.0                E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B', 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_82_prime_length", "prompt": "-- Write a function that takes a string and returns true if the string\n-- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n-- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n-- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "-- Given a positive integer n, return the count of the numbers of n-digit\n-- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_84_solve", "prompt": "-- Given a positive integer N, return the total sum of its digits in binary.\n-- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n-- '1100'\n-- Variables:\n--     @N integer\n--          Constraints: 0 \u2264 N \u2264 10000.\n-- Output:\n--      a string of binary number\nlocal function solve(N)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_85_add", "prompt": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function add(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "-- Write a function that takes a string and returns an ordered version of it.\n-- Ordered version of string, is a string where all words (separated by space)\n-- are replaced by a new word where all the characters arranged in\n-- ascending order based on ascii value.\n-- Note: You should keep the order of words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n-- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_87_get_row", "prompt": "-- You are given a 2 dimensional data, as a nested tables,\n-- which is similar to matrix, however, unlike matrices,\n-- each row may contain a different number of columns.\n-- Given lst, and integer x, find integers x in the table,\n-- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_88_sort_array", "prompt": "-- Given a table of non-negative integers, return a colua of the given table after sorting,\n-- you will sort the given table in ascending order if the sum( first index value, last index value) is odd,\n-- or sort it in descending order if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n-- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0, 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2, 1, 0}\nlocal function sort_array(array)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_89_encrypt", "prompt": "-- Create a function encrypt that takes a string as an argument and\n-- returns a string encrypted with the alphabet being rotated. \n-- The alphabet should be rotated in a manner such that the letters \n-- shift down by two multiplied to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n-- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\nlocal function encrypt(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'), 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'), 'e')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "-- You are given a table of integers.\n-- Write a function next_smallest() that returns the 2nd smallest element of the table.\n-- Return nil if there is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5, 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1, 1})\n-- None\nlocal function next_smallest(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_91_is_bored", "prompt": "-- You'll be given a string of words, and your task is to count the number\n-- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n-- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n-- 1\nlocal function is_bored(S)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_92_any_int", "prompt": "-- Create a function that takes 3 numbers.\n-- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n-- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n-- true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n-- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_93_encode", "prompt": "-- Write a function that takes a message, and encodes in such a \n-- way that it swaps case of all letters, replaces all vowels in \n-- the message with the letter that appears 2 places ahead of that \n-- vowel in the english alphabet. \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n-- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "-- You are given a table of integers.\n-- You need to find the largest prime value and return the sum of its digits.\n-- Examples:\n-- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n-- 10\n-- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n-- 25\n-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n-- 13\n-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n-- 11\n-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})\n-- 3\n-- >>> skjkasdkd({0, 8, 1, 2, 1, 7})\n-- 7\nlocal function skjkasdkd(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = skjkasdkd\n    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n    lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a'] = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE'] = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "-- Implement a function that takes an non-negative integer and returns a table of the first n\n-- integers that are prime numbers and less than n.\n-- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n-- {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3, 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n-- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_97_multiply", "prompt": "-- Complete the function that takes two integers and returns \n-- the product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n-- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020, 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_98_count_upper", "prompt": "-- Given a string s, count the number of uppercase vowels in even indices.\n-- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n-- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "-- Create a function that takes a value (string) representing a number\n-- and returns the closest integer to it. If the number is equidistant\n-- from two integers, round it away from zero.\n-- Examples\n-- >>> closest_integer('10')\n-- 10\n-- >>> closest_integer('15.3')\n-- 15\n-- Note:\n-- Rounding away from zero means that if the given number is equidistant\n-- from two integers, the one you should return is the one that is the\n-- farthest from zero. For example closest_integer(\"14.5\") should\n-- return 15 and closest_integer(\"-14.5\") should return -15.\nlocal function closest_integer(value)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_integer\n    lu.assertEquals(candidate('10'), 10)\n    lu.assertEquals(candidate('14.5'), 15)\n    lu.assertEquals(candidate('-15.5'), -16)\n    lu.assertEquals(candidate('15.3'), 15)\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "-- Given a positive integer n, you have to make a pile of n levels of stones.\n-- The first level has n stones.\n-- The number of stones in the next level is:\n--     - the next odd number if n is odd.\n--     - the next even number if n is even.\n-- Return the number of stones in each level in a table, where element at index\n-- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_101_words_string", "prompt": "-- You will be given a string of words separated by commas or spaces. Your task is\n-- to split the string into words and return a table of the words.\n-- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name', 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One', 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_102_choose_num", "prompt": "-- This function takes two positive numbers x and y and returns the\n-- biggest even integer number that is in the range [x, y] inclusive. If \n-- there's no such number, then the function should return -1.\n-- For example:\n-- >>> choose_num(12, 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function choose_num(x, y)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "-- You are given two positive integers n and m, and your task is to compute the\n-- average of the integers from n through m (including n and m). \n-- Round the answer to the nearest integer and convert that to binary.\n-- If n is greater than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>> rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20, 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function unique_digits(x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_105_by_length", "prompt": "-- Given a table of integers, sort the integers that are between 1 and 9 inclusive,\n-- reverse the resulting table, and then replace each digit by its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}\n--   If the table is empty, return an empty table:\n-- >>> by_length({})\n-- {}\n--   If the table has any strange number ignore it:\n-- >>> by_length({1, -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_106_f", "prompt": "-- Implement the function f that takes n as a parameter,\n-- and returns a table of size n, such that the value of the element at index i is the factorial of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal function f(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "-- Given a positive integer n, return a table that has the number of even and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n-- Example 1:\n-- >>> even_odd_palindrome(3)\n-- {1, 2}\n--     Explanation:\n--     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n-- Example 2:\n-- >>> even_odd_palindrome(12)\n-- {4, 6}\n--     Explanation:\n--     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n-- Note:\n--     1. 1 <= n <= 10^3\n--     2. returned table has the number of even and odd integer palindromes respectively.\nlocal function even_odd_palindrome(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12), {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63), {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19), {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1), {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_108_count_nums", "prompt": "-- Write a function count_nums which takes a table of integers and returns\n-- the number of elements which has a sum of digits > 0.\n-- If a number is negative, then its first signed digit will be negative:\n-- e.g. -123 has signed digits -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n-- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n-- numbers in the table will be randomly ordered. Your task is to determine if\n-- it is possible to get a table sorted in non-decreasing order by performing \n-- the following operation on the given table:\n--     You are allowed to perform right shift operation any number of times.\n-- One right shift operation means shifting all elements of the table by one\n-- position in the right direction. The last element of the table will be moved to\n-- the starting position in the table i.e. 0th index. \n-- If it is possible to obtain the sorted table by performing the above operation\n-- then return true else return false.\n-- If the given table is empty then return true.\n-- Note: The given table is guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3, 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations, non-decreasing order can\n--              be achieved for the given table.\n-- >>> move_one_ball({3, 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing order for the given\n--             table by performing any number of right shift operations.\nlocal function move_one_ball(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_110_exchange", "prompt": "-- In this problem, you will implement a function that takes two tables of numbers,\n-- and determines whether it is possible to perform an exchange of elements\n-- between them to make lst1 a table of only even numbers.\n-- There is no limit on the number of exchanged elements between lst1 and lst2.\n-- If it is possible to exchange elements between the lst1 and lst2 to make\n-- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n-- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_111_histogram", "prompt": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n-- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b'] = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "-- Task\n-- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n-- then check if the result string is palindrome.\n-- A string is called palindrome if it reads the same backward as forward.\n-- You should return a table containing the result string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde', 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef', false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal function reverse_delete(s, c)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_113_odd_count", "prompt": "-- Given a table of strings, where each string consists of only digits, return a table.\n-- Each element i of the output should be \"the number of odd elements in the\n-- string i of the input.\" where all the i's should be replaced by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n-- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3', '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function odd_count(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3', '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271', '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum({2, 3, 4, 1, 2, 4})\n-- 1\n-- >>> minSubArraySum({-1, -2, -3})\n-- -6\nlocal function minSubArraySum(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_115_max_fill", "prompt": "-- You are given a rectangular grid of wells. Each row represents a single well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well has a corresponding bucket that can be used to extract water from it, \n-- and all buckets have the same capacity.\n-- Your task is to use the buckets to empty the wells.\n-- Output the number of times you need to lower the buckets.\n-- Example 1:\n-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)\n-- 6\n-- Example 2:\n-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2)\n-- 5\n-- Example 3:\n-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)\n-- 0\n-- Constraints:\n--     * all wells have the same length\n--     * 1 <= grid.length <= 10^2\n--     * 1 <= grid[:,1].length <= 10^2\n--     * grid[i][j] -> 0 | 1\n--     * 1 <= capacity <= 10\nlocal function max_fill(grid, capacity)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_116_sort_array", "prompt": "-- In this Kata, you have to sort a table of non-negative integers according to\n-- number of ones in their binary representation in ascending order.\n-- For similar number of ones, sort based on decimal value.\n-- It must be implemented like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2, -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n-- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_117_select_words", "prompt": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n-- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>> select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world', 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function select_words(s, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n-- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n-- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_119_match_parens", "prompt": "-- You are given a table of two strings, both strings consist of open\n-- parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it is possible to concatenate the two strings in\n-- some order, that the resulting string will be good.\n-- A string S is considered to be good if and only if all parentheses in S\n-- are balanced. For example: the string '(())()' is good, while the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n-- Examples:\n-- >>> match_parens({'()(', ')'})\n-- 'Yes'\n-- >>> match_parens({')', ')'})\n-- 'No'\nlocal function match_parens(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')', ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((', '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n    lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_120_maximum", "prompt": "-- Given a table arr of integers and a positive integer k, return a sorted table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4, -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)\n-- {2}\n-- Note:\n--     1. The length of the table will be in the range of [1, 1000].\n--     2. The elements in the table will be in the range of [-1000, 1000].\n--     3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_121_solution", "prompt": "-- Given a non-empty table of integers, return the sum of all of the odd elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7, 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13, 24, 321})\n-- 0\nlocal function solution(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3, 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_122_add_elements", "prompt": "-- Given a non-empty table of integers arr and an integer k, return\n-- the sum of the elements with at most two digits from the first k elements of arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n-- 24\n-- Constraints:\n--     1. 1 <= len(arr) <= 100\n--     2. 1 <= k <= len(arr)\nlocal function add_elements(arr, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "-- Given a positive integer n, return a sorted table that has the odd numbers in collatz sequence.\n-- The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n-- as follows: start with any positive integer n. Then each term is obtained from the \n-- previous term as follows: if the previous term is even, the next term is one half of \n-- the previous term. If the previous term is odd, the next term is 3 times the previous\n-- term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n-- Note: \n--     1. Collatz(1) is [1].\n--     2. returned table sorted in increasing order.\n-- For example:\n-- get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n-- >>> get_odd_collatz(5)\n-- {1, 5}\nlocal function get_odd_collatz(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_odd_collatz\n    lu.assertEquals(candidate(14), {1, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(5), {1, 5})\n    lu.assertEquals(candidate(12), {1, 3, 5})\n    lu.assertEquals(candidate(1), {1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_124_valid_date", "prompt": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n-- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n-- false\nlocal function valid_date(date)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_125_split_words", "prompt": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted({5})\n-- true\n-- >>> is_sorted({1, 2, 3, 4, 5})\n-- true\n-- >>> is_sorted({1, 3, 2, 4, 5})\n-- false\n-- >>> is_sorted({1, 2, 3, 4, 5, 6})\n-- true\n-- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})\n-- true\n-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})\n-- false\n-- >>> is_sorted({1, 2, 2, 3, 3, 4})\n-- true\n-- >>> is_sorted({1, 2, 2, 2, 3, 4})\n-- false\nlocal function is_sorted(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_127_intersection", "prompt": "-- You are given two intervals,\n-- where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed which means that the interval (start, end)\n-- includes both start and end.\n-- For each given interval, it is assumed that its start is less or equal its end.\n-- Your task is to determine whether the length of intersection of these two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n-- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise, return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>> intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n-- 'YES'\nlocal function intersection(interval1, interval2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "-- You are given a table arr of integers and you need to return\n-- sum of magnitudes of integers multiplied by product of all signs\n-- of each number in the table, represented by 1, -1 or 0.\n-- Note: return nil for empty arr.\n-- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n-- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1, 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_129_minPath", "prompt": "-- Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n-- each cell of the grid contains a value. Every integer in the range [1, N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have to find the minimum path of length k in the grid. You can start\n-- from any cell, and in each step you can move to any of the neighbor cells,\n-- in other words, you can go to cells which share an edge with you current\n-- cell.\n-- Please note that a path of length k means visiting exactly k cells (not\n-- necessarily distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered less than a path B (of length k) if\n-- after making the ordered tables of the values on the cells that A and B go\n-- through (let's call them lst_A and lst_B), lst_A is lexicographically less\n-- than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer is unique.\n-- Return an ordered table of the values on the cells that the minimum path go through.\n-- Examples:    \n-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3)\n-- {1, 2, 1}\n-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)\n-- {1}\nlocal function minPath(grid, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_130_tri", "prompt": "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n-- the last couple centuries. However, what people don't know is Tribonacci sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n--        = 2 + 3 + 3 = 8 \n-- You are given a non-negative integer number n, you have to a return a table of the \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- {1, 3, 2, 8}\nlocal function tri(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_131_digits", "prompt": "-- Given a positive integer n, return the product of the odd digits.\n-- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n-- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_132_is_nested", "prompt": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]')\n-- true\n-- >>> is_nested('[]]]]]]][[[[[]')\n-- false\n-- >>> is_nested('[][]')\n-- false\n-- >>> is_nested('[]')\n-- false\n-- >>> is_nested('[[][]]')\n-- true\n-- >>> is_nested('[[]][[')\n-- true\nlocal function is_nested(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "-- You are given a table of numbers.\n-- You need to return the sum of squared numbers in the given table,\n-- round each element in the table to the upper int(Ceiling) first.\n-- Examples:\n-- >>> lst({1.0, 2.0, 3.0})\n-- 14\n-- >>> lst({1.0, 4.0, 9.0})\n-- 98\n-- >>> lst({1.0, 3.0, 5.0, 7.0})\n-- 84\n-- >>> lst({1.4, 4.2, 0.0})\n-- 29\n-- >>> lst({-2.4, 1.0, 1.0})\n-- 6\nlocal function sum_squares(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}), 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "-- Create a function that returns true if the last character\n-- of a given string is an alphabetical character and is not\n-- a part of a word, and false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n-- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n-- >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal function check_if_last_char_is_a_letter(txt)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "-- Create a function which returns the largest index of an element which\n-- is not greater than or equal to the element immediately preceding it. If\n-- no such element exists then return -1. The given table will not contain\n-- duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n-- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "-- Create a function that returns a table (a, b), where 'a' is\n-- the largest of negative integers, and 'b' is the smallest\n-- of positive integers in a table.\n-- If there is no negative or positive integers, return them as nil.\n-- Examples:\n-- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})\n-- {None, 1}\n-- >>> largest_smallest_integers({})\n-- {None, None}\n-- >>> largest_smallest_integers({0})\n-- {None, None}\nlocal function largest_smallest_integers(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}), {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_137_compare_one", "prompt": "-- Create a function that takes integers, floats, or strings representing\n-- real numbers, and returns the larger variable in its given variable type.\n-- Return nil if the values are equal.\n-- Note: If a real number is represented as a string, the floating point might be . or ,\n-- >>> compare_one(1, 2.5)\n-- 2.5\n-- >>> compare_one(1, '2,3')\n-- '2,3'\n-- >>> compare_one('5,1', '6')\n-- '6'\n-- >>> compare_one('1', 1)\n-- None\nlocal function compare_one(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare_one\n    lu.assertEquals(candidate(1, 2), 2)\n    lu.assertEquals(candidate(1, 2.5), 2.5)\n    lu.assertEquals(candidate(2, 3), 3)\n    lu.assertEquals(candidate(5, 6), 6)\n    lu.assertEquals(candidate(1, '2,3'), '2,3')\n    lu.assertEquals(candidate('5,1', '6'), '6')\n    lu.assertEquals(candidate('1', '2'), '2')\n    lu.assertEquals(candidate('1', 1), None)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "-- Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n-- Example\n-- >>> is_equal_to_sum_even(4)\n-- false\n-- >>> is_equal_to_sum_even(6)\n-- false\n-- >>> is_equal_to_sum_even(8)\n-- true\nlocal function is_equal_to_sum_even(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_equal_to_sum_even\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(11), false)\n    lu.assertEquals(candidate(12), true)\n    lu.assertEquals(candidate(13), false)\n    lu.assertEquals(candidate(16), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n-- 288\n-- The function will receive an integer as input and should return the special\n-- factorial of this integer.\nlocal function special_factorial(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "-- Given a string text, replace all spaces in it with underscores, \n-- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive spaces with - \n-- >>> fix_spaces(' Example')\n-- 'Example'\n-- >>> fix_spaces(' Example 1')\n-- 'Example_1'\n-- >>> fix_spaces(' Example 2')\n-- '_Example_2'\n-- >>> fix_spaces(' Example 3')\n-- '_Example-3'\nlocal function fix_spaces(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "-- Create a function which takes a string representing a file's name, and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n-- A file's name is considered to be valid if and only if all the following conditions \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring before the dot should not be empty, and it starts with a letter from \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n-- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'), 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'), 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'), 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "-- \"\n-- This function will take a table of integers. For all entries in the table, the function shall square the integer entry if its index is a \n-- multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n-- change the entries in the table whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n-- Examples:\n-- >>> lst\n-- {1, 2, 3}\n-- >>> lst\n-- {}\n-- >>> lst\n-- {-1, -5, 2, -1, -5}\nlocal function sum_squares(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({1, 4, 9}), 14)\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 1, 1, 1, 1, 1, 1}), 9)\n    lu.assertEquals(candidate({-1, -1, -1, -1, -1, -1, -1, -1, -1}), -3)\n    lu.assertEquals(candidate({0}), 0)\n    lu.assertEquals(candidate({-1, -5, 2, -1, -5}), -126)\n    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)\n    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)\n    lu.assertEquals(candidate({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)\n    lu.assertEquals(candidate({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), -1448)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "-- You are given a string representing a sentence,\n-- the sentence contains some words separated by a space,\n-- and you have to return a string that contains the words from the original sentence,\n-- whose lengths are prime numbers,\n-- the order of the words in the new string should be the same as the original one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n--     * 1 <= len(sentence) <= 100\n--     * sentence contains only letters\nlocal function words_in_sentence(sentence)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_144_simplify", "prompt": "-- Your task is to implement a function that will simplify the expression\n-- x * n. The function returns true if x * n evaluates to a whole number and false\n-- otherwise. Both x and n, are string representation of a fraction, and have the following format,\n-- <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n-- You can assume that x, and n are valid fractions, and do not have zero as denominator.\n-- >>> simplify('1/5', '5/1')\n-- true\n-- >>> simplify('1/6', '2/1')\n-- false\n-- >>> simplify('7/10', '10/2')\n-- false\nlocal function simplify(x, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = simplify\n    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/6', '2/1'), false)\n    lu.assertEquals(candidate('5/1', '3/1'), true)\n    lu.assertEquals(candidate('7/10', '10/2'), false)\n    lu.assertEquals(candidate('2/10', '50/10'), true)\n    lu.assertEquals(candidate('7/2', '4/2'), true)\n    lu.assertEquals(candidate('11/6', '6/1'), true)\n    lu.assertEquals(candidate('2/3', '5/2'), false)\n    lu.assertEquals(candidate('5/2', '3/5'), false)\n    lu.assertEquals(candidate('2/4', '8/4'), true)\n    lu.assertEquals(candidate('2/4', '4/2'), true)\n    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/5', '1/5'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1, -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2, -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "-- You are given a positive integer n. You have to create an integer table a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n--     and a[i] + a[j] + a[k] is a multiple of 3.\n--     Example :\n--     >>> get_max_triples(5)\n--     1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_148_bf", "prompt": "-- There are eight planets in our solar system: the closerst to the Sun \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus, Neptune.\n-- Write a function that takes two planet names as strings planet1 and planet2. \n-- The function should return a table containing all planets whose orbits are \n-- located between the orbit of planet1 and the orbit of planet2, sorted by \n-- the proximity to the sun. \n-- The function should return an empty table if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n-- >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter', 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "-- Write a function that accepts a table of strings as a parameter,\n-- deletes the strings that have odd lengths from it,\n-- and returns the resulted table with a sorted order,\n-- The table is always a table of strings and never a table of numbers,\n-- and it may contain duplicates.\n-- The order of the table should be ascending by length of each word, and you\n-- should return the table sorted by that rule.\n-- If two words have the same length, sort the table alphabetically.\n-- The function should return a table of strings in sorted order.\n-- You may assume that all words will have the same length.\n-- For example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "-- A simple program which should return the value of x if n is \n-- a prime number and should return the value of y otherwise.\n-- Examples:\n-- >>> x_or_y(7, 34, 12)\n-- 34\n-- >>> x_or_y(15, 8, 5)\n-- 5\nlocal function x_or_y(n, x, y)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = x_or_y\n    lu.assertEquals(candidate(7, 34, 12), 34)\n    lu.assertEquals(candidate(15, 8, 5), 5)\n    lu.assertEquals(candidate(3, 33, 5212), 33)\n    lu.assertEquals(candidate(1259, 3, 52), 3)\n    lu.assertEquals(candidate(7919, -1, 12), -1)\n    lu.assertEquals(candidate(3609, 1245, 583), 583)\n    lu.assertEquals(candidate(91, 56, 129), 129)\n    lu.assertEquals(candidate(6, 34, 1234), 1234)\n    lu.assertEquals(candidate(1, 2, 0), 0)\n    lu.assertEquals(candidate(2, 2, 0), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1, -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n-- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_152_compare", "prompt": "-- I think we all remember that feeling when the result of some long-awaited\n-- event is finally known. The feelings and thoughts you have at that moment are\n-- definitely worth noting down and comparing.\n-- Your task is to determine if a person correctly guessed the results of a number of matches.\n-- You are given two tables of scores and guesses of equal length, where each index shows a match. \n-- Return a table of the same length denoting how far off each guess was. If they have guessed correctly,\n-- the value is 0, and if not, the value is the absolute difference between the guess and the score.\n-- example:\n-- >>> compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})\n-- {0, 0, 0, 0, 3, 3}\n-- >>> compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})\n-- {4, 4, 1, 0, 0, 6}\nlocal function compare(game, guess)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0, 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}), {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0, 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "-- You will be given the name of a class (a string) and a table of extensions.\n-- The extensions are to be used to load additional classes to the class. The\n-- strength of the extension is as follows: Let CAP be the number of the uppercase\n-- letters in the extension's name, and let SM be the number of lowercase letters \n-- in the extension's name, the strength is given by the fraction CAP - SM. \n-- You should find the strongest extension and return a string in this \n-- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions with the same strength, you should\n-- choose the one that comes first in the table.\n-- For example, if you are given \"Slices\" as the class and a table of the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n-- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class', {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name, extensions)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "-- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n-- >>> cycpattern_check('abcd', 'abd')\n-- false\n-- >>> cycpattern_check('hello', 'ell')\n-- true\n-- >>> cycpattern_check('whassup', 'psus')\n-- false\n-- >>> cycpattern_check('abab', 'baa')\n-- true\n-- >>> cycpattern_check('efef', 'eeff')\n-- false\n-- >>> cycpattern_check('himenss', 'simen')\n-- true\nlocal function cycpattern_check(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello', 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef', 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt', 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n--     >>> even_odd_count(-12)\n--     {1, 1}\n--     >>> even_odd_count(123)\n--     {1, 2}\nlocal function even_odd_count(num)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "-- Given the lengths of the three sides of a triangle. Return true if the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n-- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1, 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_158_find_max", "prompt": "-- Write a function that accepts a table of strings.\n-- The table contains different words. Return the word with maximum number\n-- of unique characters. If multiple strings have maximum number of unique\n-- characters, return the one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of', 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n-- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_159_eat", "prompt": "-- You're a hungry rabbit, and you already have eaten a certain number of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n-- you should return a table of [ total number of eaten carrots after your meals,\n--                                 the number of carrots left after your meals ]\n-- if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n-- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1, 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number : integer\n--     the number of carrots that you have eaten.\n-- @need : integer\n--     the number of carrots that you need to eat.\n-- @remaining : integer\n--     the number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function eat(number, need, remaining)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "-- Given two tables operator, and operand. The first table has basic algebra operations, and \n-- the second table is a table of integers. Use the two given tables to build the algebric \n-- expression and return the evaluation of this expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n-- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n--     The length of operator table is equal to the length of operand table minus one.\n--     Operand is a table of of non-negative integers.\n--     Operator table has at least one operator, and operand table has at least two operands.\nlocal function do_algebra(operator, operand)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_161_solve", "prompt": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n-- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text' is an empty string, return nil.\n-- >>> string_to_md5('Hello world')\n-- '3e25960a79dbc69b674cd4ec67a72c62'\nlocal function string_to_md5(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "-- Write a lua function to identify non-prime numbers.\nlocal function is_not_prime(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_not_prime\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(35), true)\n    lu.assertEquals(candidate(37), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "-- Write a lua function to check whether the two numbers differ at one bit position only or not.\nlocal function differ_At_One_Bit_Pos(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = differ_At_One_Bit_Pos\n    lu.assertEquals(candidate(13, 9), true)\n    lu.assertEquals(candidate(15, 8), false)\n    lu.assertEquals(candidate(2, 4), false)\n    lu.assertEquals(candidate(2, 3), true)\n    lu.assertEquals(candidate(5, 1), true)\n    lu.assertEquals(candidate(1, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_8_square_nums", "prompt": "-- Write a function to find squares of individual elements in a table.\nlocal function square_nums(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})\n    lu.assertEquals(candidate({10, 20, 30}), {100, 400, 900})\n    lu.assertEquals(candidate({12, 15}), {144, 225})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "-- Write a lua function to find the minimum number of rotations (greater than 0) required to get the same string.\nlocal function find_Rotations(str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Rotations\n    lu.assertEquals(candidate('aaaa'), 1)\n    lu.assertEquals(candidate('ab'), 2)\n    lu.assertEquals(candidate('abc'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "-- Write a lua function to remove first and last occurrence of a given character from the string.\nlocal function remove_Occ(s, ch)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_Occ\n    lu.assertEquals(candidate('hello', 'l'), 'heo')\n    lu.assertEquals(candidate('abcda', 'a'), 'bcd')\n    lu.assertEquals(candidate('PHP', 'P'), 'H')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_14_find_Volume", "prompt": "-- Write a lua function to find the volume of a triangular prism.\nlocal function find_Volume(l, b, h)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Volume\n    lu.assertEquals(candidate(10, 8, 6), 240)\n    lu.assertEquals(candidate(3, 2, 2), 6)\n    lu.assertEquals(candidate(1, 2, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "-- Write a function that returns the perimeter of a square given its side length as input.\nlocal function square_perimeter(a)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_perimeter\n    lu.assertEquals(candidate(10), 40)\n    lu.assertEquals(candidate(5), 20)\n    lu.assertEquals(candidate(4), 16)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "-- Write a function to remove characters from the first string which are present in the second string.\nlocal function remove_dirty_chars(string, second_string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_dirty_chars\n    lu.assertEquals(candidate('probasscurve', 'pros'), 'bacuve')\n    lu.assertEquals(candidate('digitalindia', 'talent'), 'digiidi')\n    lu.assertEquals(candidate('exoticmiles', 'toxic'), 'emles')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "-- Write a function to find whether a given table of integers contains any duplicate element.\nlocal function test_duplicate(arraynums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = test_duplicate\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 4}), true)\n    lu.assertEquals(candidate({1, 1, 2, 2, 3, 3, 4, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_20_is_woodall", "prompt": "-- Write a function to check if the given number is woodball or not.\nlocal function is_woodall(x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_woodall\n    lu.assertEquals(candidate(383), true)\n    lu.assertEquals(candidate(254), false)\n    lu.assertEquals(candidate(200), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_56_checks", "prompt": "-- Write a lua function to check if a given number is one less than twice its reverse.\nlocal function checks(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = checks\n    lu.assertEquals(candidate(70), false)\n    lu.assertEquals(candidate(23), false)\n    lu.assertEquals(candidate(73), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "-- Write a lua function to find the largest number that can be formed with the given table of digits.\nlocal function find_Max_Num(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Max_Num\n    lu.assertEquals(candidate({1, 2, 3}), 321)\n    lu.assertEquals(candidate({4, 5, 6, 1}), 6541)\n    lu.assertEquals(candidate({1, 2, 3, 9}), 9321)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "-- Write a lua function to check whether the given two integers have opposite sign or not.\nlocal function opposite_Signs(x, y)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = opposite_Signs\n    lu.assertEquals(candidate(1, -2), true)\n    lu.assertEquals(candidate(3, 2), false)\n    lu.assertEquals(candidate(-10, -10), false)\n    lu.assertEquals(candidate(-2, 2), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "-- Write a function to find the nth octagonal number.\nlocal function is_octagonal(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_octagonal\n    lu.assertEquals(candidate(5), 65)\n    lu.assertEquals(candidate(10), 280)\n    lu.assertEquals(candidate(15), 645)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "-- Write a lua function to count the number of substrings with the sum of digits equal to their length.\nlocal function count_Substrings(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Substrings\n    lu.assertEquals(candidate('112112'), 6)\n    lu.assertEquals(candidate('111'), 6)\n    lu.assertEquals(candidate('1101112'), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_62_smallest_num", "prompt": "-- Write a lua function to find smallest number in a table.\nlocal function smallest_num(xs)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_num\n    lu.assertEquals(candidate({10, 20, 1, 45, 99}), 1)\n    lu.assertEquals(candidate({1, 2, 3}), 1)\n    lu.assertEquals(candidate({45, 46, 50, 60}), 45)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_63_max_difference", "prompt": "-- Write a function to find the maximum difference between available pairs in the given table table.\nlocal function max_difference(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_difference\n    lu.assertEquals(candidate({{3, 5}, {1, 7}, {10, 3}, {1, 2}}), 7)\n    lu.assertEquals(candidate({{4, 6}, {2, 17}, {9, 13}, {11, 12}}), 15)\n    lu.assertEquals(candidate({{12, 35}, {21, 27}, {13, 23}, {41, 22}}), 23)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_64_subject_marks", "prompt": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_66_pos_count", "prompt": "-- Write a lua function to count the number of positive numbers in a table.\nlocal function pos_count(list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pos_count\n    lu.assertEquals(candidate({1, -2, 3, -4}), 2)\n    lu.assertEquals(candidate({3, 4, 5, -1}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_67_bell_number", "prompt": "-- Write a function to find the number of ways to partition a set of Bell numbers.\nlocal function bell_number(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(10), 115975)\n    lu.assertEquals(candidate(56), 6775685320645824322581483068371419745979053216268760300)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "-- Write a lua function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_69_is_sublist", "prompt": "-- Write a function to check whether a table contains the given subtable or not.\nlocal function is_sublist(l, s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sublist\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {3, 7}), false)\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {4, 3}), true)\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {1, 6}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_70_get_equal", "prompt": "-- Write a function to find whether all the given tables have equal length or not.\nlocal function get_equal(Input)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_equal\n    lu.assertEquals(candidate({{11, 22, 33}, {44, 55, 66}}), true)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6, 7}}), false)\n    lu.assertEquals(candidate({{1, 2}, {3, 4}}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_71_comb_sort", "prompt": "-- Write a function to sort a table of elements.\nlocal function comb_sort(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_72_dif_Square", "prompt": "-- Write a lua function to check whether the given number can be represented as the difference of two squares or not.\nlocal function dif_Square(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dif_Square\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(15), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "-- Write a function to check whether it follows the sequence given in the patterns table.\nlocal function is_samepatterns(colors, patterns)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_samepatterns\n    lu.assertEquals(candidate({'red', 'green', 'green'}, {'a', 'b', 'b'}), true)\n    lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b', 'b'}), false)\n    lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b'}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_75_find_tuples", "prompt": "-- Write a function to find tables which have all elements divisible by k from the given table of tables.\nlocal function find_tuples(test_list, K)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_tuples\n    lu.assertEquals(candidate({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6), {{6, 24, 12}})\n    lu.assertEquals(candidate({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5), {{5, 25, 30}})\n    lu.assertEquals(candidate({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4), {{8, 16, 4}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_77_is_Diff", "prompt": "-- Write a lua function to find whether a number is divisible by 11.\nlocal function is_Diff(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Diff\n    lu.assertEquals(candidate(12345), false)\n    lu.assertEquals(candidate(1212112), true)\n    lu.assertEquals(candidate(1212), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_79_word_len", "prompt": "-- Write a lua function to check whether the length of the word is odd or not.\nlocal function word_len(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = word_len\n    lu.assertEquals(candidate('Hadoop'), false)\n    lu.assertEquals(candidate('great'), true)\n    lu.assertEquals(candidate('structure'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "-- Write a function to find the nth tetrahedral number.\nlocal function tetrahedral_number(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tetrahedral_number\n    lu.assertEquals(candidate(5), 35)\n    lu.assertEquals(candidate(6), 56)\n    lu.assertEquals(candidate(7), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_83_get_Char", "prompt": "-- Write a lua function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nlocal function get_Char(strr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Char\n    lu.assertEquals(candidate('abc'), 'f')\n    lu.assertEquals(candidate('gfg'), 't')\n    lu.assertEquals(candidate('ab'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_84_sequence", "prompt": "-- Write a function to find the nth number in the newman conway sequence.\nlocal function sequence(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sequence\n    lu.assertEquals(candidate(10), 6)\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(3), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "-- Write a function to find nth centered hexagonal number.\nlocal function centered_hexagonal_number(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = centered_hexagonal_number\n    lu.assertEquals(candidate(10), 271)\n    lu.assertEquals(candidate(2), 7)\n    lu.assertEquals(candidate(9), 217)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "-- Write a function to merge three dictionaries into a single table.\nlocal function merge_dictionaries_three(dict1, dict2, dict3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge_dictionaries_three\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['O'] = 'Orange', ['W'] = 'White', ['B'] = 'Black'}), {['B'] = 'Black', ['R'] = 'Red', ['P'] = 'Pink', ['G'] = 'Green', ['W'] = 'White', ['O'] = 'Orange'})\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['L'] = 'lavender', ['B'] = 'Blue'}), {['W'] = 'White', ['P'] = 'Pink', ['B'] = 'Black', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender'})\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['L'] = 'lavender', ['B'] = 'Blue'}, {['G'] = 'Green', ['W'] = 'White'}), {['B'] = 'Black', ['P'] = 'Pink', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender', ['W'] = 'White'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_88_freq_count", "prompt": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_89_closest_num", "prompt": "-- Write a function to find the closest smaller number than n.\nlocal function closest_num(N)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_num\n    lu.assertEquals(candidate(11), 10)\n    lu.assertEquals(candidate(7), 6)\n    lu.assertEquals(candidate(12), 11)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_90_len_log", "prompt": "-- Write a lua function to find the length of the longest word.\nlocal function len_log(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = len_log\n    lu.assertEquals(candidate({'python', 'PHP', 'bigdata'}), 7)\n    lu.assertEquals(candidate({'a', 'ab', 'abc'}), 3)\n    lu.assertEquals(candidate({'small', 'big', 'tall'}), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_91_find_substring", "prompt": "-- Write a function to check if a string is present as a substring in a given table of string values.\nlocal function find_substring(str1, sub_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_substring\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ack'), true)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'abc'), false)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ange'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_92_is_undulating", "prompt": "-- Write a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_93_power", "prompt": "-- Write a function to calculate the value of 'a' to the power 'b'.\nlocal function power(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power\n    lu.assertEquals(candidate(3, 4), 81)\n    lu.assertEquals(candidate(2, 3), 8)\n    lu.assertEquals(candidate(5, 5), 3125)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_94_index_minimum", "prompt": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "-- Write a lua function to find the length of the smallest table in a table of tables.\nlocal function Find_Min_Length(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_96_divisor", "prompt": "-- Write a lua function to find the number of divisors of a given integer.\nlocal function divisor(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "-- Write a function to find frequency of each element in a flattened table of tables, returned in a table.\nlocal function frequency_lists(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = frequency_lists\n    lu.assertEquals(candidate({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}), {[1] = 1, [2] = 3, [3] = 1, [4] = 1, [5] = 2, [6] = 1, [7] = 1, [8] = 1, [9] = 1})\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}), {[1] = 1, [2] = 1, [3] = 1, [4] = 1, [5] = 1, [6] = 1, [7] = 1, [8] = 1, [9] = 1, [10] = 1, [11] = 1, [12] = 1})\n    lu.assertEquals(candidate({{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}}), {[20] = 2, [30] = 2, [40] = 2, [17] = 1, [18] = 1, [16] = 1, [14] = 1, [13] = 1, [10] = 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "-- Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlocal function next_smallest_palindrome(num)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest_palindrome\n    lu.assertEquals(candidate(99), 101)\n    lu.assertEquals(candidate(1221), 1331)\n    lu.assertEquals(candidate(120), 121)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_101_kth_element", "prompt": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "-- Write a function to find the Eulerian number a(n, m).\nlocal function eulerian_num(n, m)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eulerian_num\n    lu.assertEquals(candidate(3, 1), 4)\n    lu.assertEquals(candidate(4, 1), 11)\n    lu.assertEquals(candidate(5, 3), 26)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(input_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{' red ', 'green'}, {'blue ', ' black'}, {' orange', 'brown'}}), {{' red ', 'green'}, {' black', 'blue '}, {' orange', 'brown'}})\n    lu.assertEquals(candidate({{'zilver', 'gold'}, {'magnesium', 'aluminium'}, {'steel', 'bronze'}}), {{'gold', 'zilver'}, {'aluminium', 'magnesium'}, {'bronze', 'steel'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_105_count", "prompt": "-- Write a lua function to count true booleans in the given table.\nlocal function count(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count\n    lu.assertEquals(candidate({true, false, true}), 2)\n    lu.assertEquals(candidate({false, false}), 0)\n    lu.assertEquals(candidate({true, true, true}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_106_add_lists", "prompt": "-- Write a function to append the given table to the given tables.\nlocal function add_lists(test_list, test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_lists\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {9, 10, 5, 6, 7})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {10, 11, 6, 7, 8})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "-- Write a function to merge three tables into a single sorted table.\nlocal function merge_sorted_list(num1, num2, num3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge_sorted_list\n    lu.assertEquals(candidate({25, 24, 15, 4, 5, 29, 110}, {19, 20, 11, 56, 25, 233, 154}, {24, 26, 54, 48}), {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233})\n    lu.assertEquals(candidate({1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}), {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12})\n    lu.assertEquals(candidate({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, {25, 35, 22, 85, 14, 65, 75, 25, 58}, {12, 74, 9, 50, 61, 41}), {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "-- Write a lua function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nlocal function odd_Equivalent(s, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_Equivalent\n    lu.assertEquals(candidate('011001', 6), 3)\n    lu.assertEquals(candidate('11011', 5), 4)\n    lu.assertEquals(candidate('1010', 4), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_113_check_integer", "prompt": "-- Write a function to check if a string represents an integer or not.\nlocal function check_integer(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_integer\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('1'), true)\n    lu.assertEquals(candidate('12345'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "-- Write a function to convert a given table of positive integers into a single integer.\nlocal function tuple_to_int(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_int\n    lu.assertEquals(candidate({1, 2, 3}), 123)\n    lu.assertEquals(candidate({4, 5, 6}), 456)\n    lu.assertEquals(candidate({5, 6, 7}), 567)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_117_list_to_float", "prompt": "-- Write a function to convert all possible convertible elements in a table of tables to floats.\nlocal function list_to_float(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_to_float\n    lu.assertEquals(candidate({{'3', '4'}, {'1', '26.45'}, {'7.32', '8'}, {'4', '8'}}), {{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}})\n    lu.assertEquals(candidate({{'4', '4'}, {'2', '27'}, {'4.12', '9'}, {'7', '11'}}), {{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}})\n    lu.assertEquals(candidate({{'6', '78'}, {'5', '26.45'}, {'1.33', '4'}, {'82', '13'}}), {{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_118_string_to_list", "prompt": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_119_search", "prompt": "-- Write a lua function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "-- Write a function to sum all amicable numbers from 1 to a specified number.\nlocal function amicable_numbers_sum(limit)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = amicable_numbers_sum\n    lu.assertEquals(candidate(999), 504)\n    lu.assertEquals(candidate(9999), 31626)\n    lu.assertEquals(candidate(99), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_125_find_length", "prompt": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_126_sum", "prompt": "-- Write a lua function to find the sum of common divisors of two given numbers.\nlocal function sum(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum\n    lu.assertEquals(candidate(10, 15), 6)\n    lu.assertEquals(candidate(100, 150), 93)\n    lu.assertEquals(candidate(4, 6), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_127_multiply_int", "prompt": "-- Write a function to multiply two integers.\nlocal function multiply_int(x, y)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_int\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(5, 10), 50)\n    lu.assertEquals(candidate(4, 8), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_128_long_words", "prompt": "-- Write a function to find words that are longer than n characters from a given table of words.\nlocal function long_words(n, str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = long_words\n    lu.assertEquals(candidate(3, 'python is a programming language'), {'python', 'programming', 'language'})\n    lu.assertEquals(candidate(2, 'writing a program'), {'writing', 'program'})\n    lu.assertEquals(candidate(5, 'sorting list'), {'sorting'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "-- Write a function to calculate whether the matrix is a magic square.\nlocal function magic_square_test(my_matrix)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = magic_square_test\n    lu.assertEquals(candidate({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "-- Write a lua function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_132_tup_string", "prompt": "-- Write a function to convert a table to a string.\nlocal function tup_string(tup1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tup_string\n    lu.assertEquals(candidate({'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'}), 'exercises')\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}), 'python')\n    lu.assertEquals(candidate({'p', 'r', 'o', 'g', 'r', 'a', 'm'}), 'program')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "-- Write a function to calculate the sum of the negative numbers of a given table of numbers.\nlocal function sum_negativenum(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_negativenum\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), -32)\n    lu.assertEquals(candidate({10, 15, -14, 13, -18, 12, -20}), -52)\n    lu.assertEquals(candidate({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}), -894)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "-- Write a function to find the nth hexagonal number.\nlocal function hexagonal_num(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hexagonal_num\n    lu.assertEquals(candidate(10), 190)\n    lu.assertEquals(candidate(5), 45)\n    lu.assertEquals(candidate(7), 91)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "-- Write a lua function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nlocal function is_Sum_Of_Powers_Of_Two(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sum_Of_Powers_Of_Two\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(7), false)\n    lu.assertEquals(candidate(14), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "-- Write a function to sort a table of elements.\nlocal function pancake_sort(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pancake_sort\n    lu.assertEquals(candidate({15, 79, 25, 38, 69}), {15, 25, 38, 69, 79})\n    lu.assertEquals(candidate({98, 12, 54, 36, 85}), {12, 36, 54, 85, 98})\n    lu.assertEquals(candidate({41, 42, 32, 12, 23}), {12, 23, 32, 41, 42})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_142_count_samepair", "prompt": "-- Write a function to count number items that are identical in the same position of three given tables.\nlocal function count_samepair(list1, list2, list3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_samepair\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}, {2, 1, 3, 1, 2, 6, 7, 9}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 2, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_143_find_lists", "prompt": "-- Write a function to find number of tables present in the given table.\nlocal function find_lists(Input)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_lists\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}}), 2)\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}}), 3)\n    lu.assertEquals(candidate({9, 8, 7, 6, 5, 4, 3, 2, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "-- Write a lua function to find the maximum difference between any two elements in a given table.\nlocal function max_Abs_Diff(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Abs_Diff\n    lu.assertEquals(candidate({2, 1, 5, 3}), 4)\n    lu.assertEquals(candidate({9, 3, 2, 5, 1}), 8)\n    lu.assertEquals(candidate({3, 2, 1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_160_find_solution", "prompt": "-- Write a function that returns integers x and y that satisfy ax + by = n as a table, or return nil if no solution exists.\nlocal function find_solution(a, b, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_solution\n    lu.assertEquals(candidate(2, 3, 7), {2, 1})\n    lu.assertEquals(candidate(4, 2, 7), None)\n    lu.assertEquals(candidate(1, 13, 17), {4, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_161_remove_elements", "prompt": "-- Write a function to remove all elements from a given table present in another table.\nlocal function remove_elements(list1, list2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_elements\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7}), {2, 4, 6, 8, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7}), {1, 2, 3, 4, 6, 8, 9, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_162_sum_series", "prompt": "-- Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nlocal function sum_series(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_series\n    lu.assertEquals(candidate(6), 12)\n    lu.assertEquals(candidate(10), 30)\n    lu.assertEquals(candidate(9), 25)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "-- Write a function to determine if the sum of the divisors of two integers are the same.\nlocal function are_equivalent(num1, num2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = are_equivalent\n    lu.assertEquals(candidate(36, 57), false)\n    lu.assertEquals(candidate(2, 4), false)\n    lu.assertEquals(candidate(23, 47), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_165_count_char_position", "prompt": "-- Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nlocal function count_char_position(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_char_position\n    lu.assertEquals(candidate('xbcefg'), 2)\n    lu.assertEquals(candidate('ABcED'), 3)\n    lu.assertEquals(candidate('AbgdeF'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "-- Write a function that counts the number of pairs of integers in a table that xor to an even number.\nlocal function find_even_pair(A)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_even_pair\n    lu.assertEquals(candidate({5, 4, 7, 2, 1}), 4)\n    lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}), 9)\n    lu.assertEquals(candidate({1, 2, 3}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "-- Write a lua function to find the smallest power of 2 greater than or equal to n.\nlocal function next_power_of_2(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_power_of_2\n    lu.assertEquals(candidate(0), 1)\n    lu.assertEquals(candidate(5), 8)\n    lu.assertEquals(candidate(17), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_168_frequency", "prompt": "-- Write a function to count the number of occurrences of a number in a given table.\nlocal function frequency(a, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = frequency\n    lu.assertEquals(candidate({1, 2, 3}, 4), 0)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 3, 4}, 3), 3)\n    lu.assertEquals(candidate({0, 1, 2, 3, 1, 2}, 1), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "-- Write a function to find the sum of numbers in a table within a range specified by two indices.\nlocal function sum_range_list(list1, m, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_range_list\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10), 29)\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7), 16)\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10), 38)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "-- Write a function to find the perimeter of a regular pentagon from the length of its sides.\nlocal function perimeter_pentagon(a)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perimeter_pentagon\n    lu.assertEquals(candidate(5), 25)\n    lu.assertEquals(candidate(10), 50)\n    lu.assertEquals(candidate(15), 75)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_172_count_occurance", "prompt": "-- Write a function to count the number of occurence of the string 'std' in a given string.\nlocal function count_occurance(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_occurance\n    lu.assertEquals(candidate('letstdlenstdporstd'), 3)\n    lu.assertEquals(candidate('truststdsolensporsd'), 1)\n    lu.assertEquals(candidate('makestdsostdworthit'), 2)\n    lu.assertEquals(candidate('stds'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_222_check_type", "prompt": "-- Write a function to check if all the elements in table have same data type or not.\nlocal function check_type(test_tuple)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_type\n    lu.assertEquals(candidate({5, 6, 7, 3, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, '4'}), false)\n    lu.assertEquals(candidate({3, 2, 1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_223_is_majority", "prompt": "-- Write a function that takes in a sorted table, its length (n), and an element and returns whether the element is the majority element in the given sorted table. (The majority element is the element that occurs more than n/2 times.)\nlocal function is_majority(arr, n, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_majority\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 3, 10}, 7, 3), true)\n    lu.assertEquals(candidate({1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), false)\n    lu.assertEquals(candidate({1, 1, 1, 2, 2}, 5, 1), true)\n    lu.assertEquals(candidate({1, 1, 2, 2}, 5, 1), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "-- Write a lua function to count the number of set bits (binary digits with value 1) in a given number.\nlocal function count_Set_Bits(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Set_Bits\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(4), 1)\n    lu.assertEquals(candidate(6), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "-- Write a lua function to remove the characters which have odd index values of a given string.\nlocal function odd_values_string(str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_values_string\n    lu.assertEquals(candidate('abcdef'), 'ace')\n    lu.assertEquals(candidate('python'), 'pto')\n    lu.assertEquals(candidate('data'), 'dt')\n    lu.assertEquals(candidate('lambs'), 'lms')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_227_min_of_three", "prompt": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "-- Write a lua function to check whether all the bits are unset in the given range or not.\nlocal function all_Bits_Set_In_The_Given_Range(n, l, r)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_Bits_Set_In_The_Given_Range\n    lu.assertEquals(candidate(4, 1, 2), true)\n    lu.assertEquals(candidate(17, 2, 4), true)\n    lu.assertEquals(candidate(39, 4, 6), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "-- Write a function that takes in a table and an integer n, and re-arranges the first n elements of the given table so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nlocal function re_arrange_array(arr, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = re_arrange_array\n    lu.assertEquals(candidate({-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), {-1, -3, -7, 4, 5, 6, 2, 8, 9})\n    lu.assertEquals(candidate({12, -14, -26, 13, 15}, 5), {-14, -26, 12, 13, 15})\n    lu.assertEquals(candidate({10, 24, 36, -42, -39, -78, 85}, 7), {-42, -39, -78, 10, 24, 36, 85})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_230_replace_blank", "prompt": "-- Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nlocal function replace_blank(str1, char)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_blank\n    lu.assertEquals(candidate('hello people', '@'), 'hello@people')\n    lu.assertEquals(candidate('python program language', '$'), 'python$program$language')\n    lu.assertEquals(candidate('blank space', '-'), 'blank-space')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_234_volume_cube", "prompt": "-- Write a function to find the volume of a cube given its side length.\nlocal function volume_cube(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = volume_cube\n    lu.assertEquals(candidate(3), 27)\n    lu.assertEquals(candidate(2), 8)\n    lu.assertEquals(candidate(5), 125)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_237_check_occurences", "prompt": "-- Write a function that takes in a table of tables and returns a table mapping each unique table to the number of times it occurs in the table.\nlocal function check_occurences(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_occurences\n    lu.assertEquals(candidate({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}), {[{1, 3}] = 2, [{2, 5}] = 2, [{3, 6}] = 1})\n    lu.assertEquals(candidate({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}), {[{2, 4}] = 2, [{3, 6}] = 2, [{4, 7}] = 1})\n    lu.assertEquals(candidate({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}), {[{2, 13}] = 1, [{11, 23}] = 1, [{12, 25}] = 2, [{16, 23}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "-- Write a lua function to count the number of non-empty substrings of a given string.\nlocal function number_of_substrings(str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = number_of_substrings\n    lu.assertEquals(candidate('abc'), 6)\n    lu.assertEquals(candidate('abcd'), 10)\n    lu.assertEquals(candidate('abcde'), 15)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "-- Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlocal function get_total_number_of_sequences(m, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_total_number_of_sequences\n    lu.assertEquals(candidate(10, 4), 4)\n    lu.assertEquals(candidate(5, 2), 6)\n    lu.assertEquals(candidate(16, 3), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_240_replace_list", "prompt": "-- Write a function that takes in two tables and replaces the last element of the first table with the elements of the second table.\nlocal function replace_list(list1, list2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_list\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 2, 4, 6, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8}), {1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({'red', 'blue', 'green'}, {'yellow'}), {'red', 'blue', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_242_count_charac", "prompt": "-- Write a function to count the total number of characters in a string.\nlocal function count_charac(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_charac\n    lu.assertEquals(candidate('python programming'), 18)\n    lu.assertEquals(candidate('language'), 8)\n    lu.assertEquals(candidate('words'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "-- Write a lua function to find the next perfect square greater than a given number.\nlocal function next_Perfect_Square(N)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_Perfect_Square\n    lu.assertEquals(candidate(35), 36)\n    lu.assertEquals(candidate(6), 9)\n    lu.assertEquals(candidate(9), 16)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_245_max_sum", "prompt": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_247_lps", "prompt": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_249_intersection_array", "prompt": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_250_count_X", "prompt": "-- Write a lua function that takes in a table and an element and counts the occcurences of the element in the table.\nlocal function count_X(tup, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_X\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4), 0)\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10), 3)\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_251_insert_element", "prompt": "-- Write a function that takes in a table and an element and inserts the element before each element in the table, and returns the resulting table.\nlocal function insert_element(list, element)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = insert_element\n    lu.assertEquals(candidate({'Red', 'Green', 'Black'}, 'c'), {'c', 'Red', 'c', 'Green', 'c', 'Black'})\n    lu.assertEquals(candidate({'python', 'java'}, 'program'), {'program', 'python', 'program', 'java'})\n    lu.assertEquals(candidate({'happy', 'sad'}, 'laugh'), {'laugh', 'happy', 'laugh', 'sad'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_252_convert", "prompt": "-- Write a lua function to convert complex numbers to polar coordinates.\nlocal function convert(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert\n    lu.assertEquals(candidate(1), {1.0, 0.0})\n    lu.assertEquals(candidate(4), {4.0, 0.0})\n    lu.assertEquals(candidate(5), {5.0, 0.0})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_253_count_integer", "prompt": "-- Write a lua function that returns the number of integer elements in a given table.\nlocal function count_integer(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_integer\n    lu.assertEquals(candidate({1, 2, 'abc', 1.2}), 2)\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1.2, 4, 5.1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "-- Write a function that takes in a table and length n, and generates all combinations (with repetition) of the elements of the table and returns a table with a table for each combination.\nlocal function combinations_colors(l, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_colors\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 1), {{'Red'}, {'Green'}, {'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 2), {{'Red', 'Red'}, {'Red', 'Green'}, {'Red', 'Blue'}, {'Green', 'Green'}, {'Green', 'Blue'}, {'Blue', 'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 3), {{'Red', 'Red', 'Red'}, {'Red', 'Red', 'Green'}, {'Red', 'Red', 'Blue'}, {'Red', 'Green', 'Green'}, {'Red', 'Green', 'Blue'}, {'Red', 'Blue', 'Blue'}, {'Green', 'Green', 'Green'}, {'Green', 'Green', 'Blue'}, {'Green', 'Blue', 'Blue'}, {'Blue', 'Blue', 'Blue'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "-- Write a lua function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nlocal function count_Primes_nums(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Primes_nums\n    lu.assertEquals(candidate(5), 2)\n    lu.assertEquals(candidate(10), 4)\n    lu.assertEquals(candidate(100), 25)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "-- Write a function that takes in two numbers and returns a table with the second number and then the first number.\nlocal function swap_numbers(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_numbers\n    lu.assertEquals(candidate(10, 20), {20, 10})\n    lu.assertEquals(candidate(15, 17), {17, 15})\n    lu.assertEquals(candidate(100, 200), {200, 100})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "-- Write a function to maximize the given two tables.\nlocal function maximize_elements(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximize_elements\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 7}, {4, 9}, {2, 9}, {7, 10}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{7, 8}, {5, 10}, {3, 10}, {8, 11}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{8, 9}, {6, 11}, {4, 11}, {9, 12}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_260_newman_prime", "prompt": "-- Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nlocal function newman_prime(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = newman_prime\n    lu.assertEquals(candidate(3), 7)\n    lu.assertEquals(candidate(4), 17)\n    lu.assertEquals(candidate(5), 41)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_261_division_elements", "prompt": "-- Write a function that takes in two tables and performs mathematical division operation element-wise across the given tables.\nlocal function division_elements(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = division_elements\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {2, 2, 2, 3})\n    lu.assertEquals(candidate({12, 6, 8, 16}, {6, 3, 4, 4}), {2, 2, 2, 4})\n    lu.assertEquals(candidate({20, 14, 36, 18}, {5, 7, 6, 9}), {4, 2, 6, 2})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "-- Write a function that takes in a table and an integer L and splits the given table into two parts where the length of the first part of the table is L, and returns the resulting tables in a table.\nlocal function split_two_parts(list1, L)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_two_parts\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {{1, 1, 2}, {3, 4, 4, 5, 1}})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 2), {{'a', 'b'}, {'c', 'd'}})\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}, 4), {{'p', 'y', 't', 'h'}, {'o', 'n'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_264_dog_age", "prompt": "-- Write a function to calculate a dog's age in dog's years.\nlocal function dog_age(h_age)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dog_age\n    lu.assertEquals(candidate(12), 61)\n    lu.assertEquals(candidate(15), 73)\n    lu.assertEquals(candidate(24), 109)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_265_list_split", "prompt": "-- Write a function that takes in a table and an integer n and splits a table for every nth element, returning a table of the resulting tables.\nlocal function list_split(S, step)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_split\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})\n    lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "-- Write a function to find the lateral surface area of a cube given its side length.\nlocal function lateralsurface_cube(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lateralsurface_cube\n    lu.assertEquals(candidate(5), 100)\n    lu.assertEquals(candidate(9), 324)\n    lu.assertEquals(candidate(10), 400)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_267_square_Sum", "prompt": "-- Write a lua function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlocal function square_Sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_Sum\n    lu.assertEquals(candidate(2), 10)\n    lu.assertEquals(candidate(3), 35)\n    lu.assertEquals(candidate(4), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_268_find_star_num", "prompt": "-- Write a function to find the n'th star number.\nlocal function find_star_num(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_star_num\n    lu.assertEquals(candidate(3), 37)\n    lu.assertEquals(candidate(4), 73)\n    lu.assertEquals(candidate(5), 121)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_269_ascii_value", "prompt": "-- Write a function to find the ascii value of a character.\nlocal function ascii_value(k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = ascii_value\n    lu.assertEquals(candidate('A'), 65)\n    lu.assertEquals(candidate('R'), 82)\n    lu.assertEquals(candidate('S'), 83)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "-- Write a lua function to find the sum of even numbers at even positions of a table.\nlocal function sum_even_and_even_index(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_even_and_even_index\n    lu.assertEquals(candidate({5, 6, 12, 1, 18, 8}), 30)\n    lu.assertEquals(candidate({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}), 26)\n    lu.assertEquals(candidate({5, 6, 12, 1}), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "-- Write a lua function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nlocal function even_Power_Sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_Power_Sum\n    lu.assertEquals(candidate(2), 1056)\n    lu.assertEquals(candidate(3), 8832)\n    lu.assertEquals(candidate(1), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_272_rear_extract", "prompt": "-- Write a function that takes in a table of tables and returns a table containing the rear element of each table.\nlocal function rear_extract(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rear_extract\n    lu.assertEquals(candidate({{1, 'Rash', 21}, {2, 'Varsha', 20}, {3, 'Kil', 19}}), {21, 20, 19})\n    lu.assertEquals(candidate({{1, 'Sai', 36}, {2, 'Ayesha', 25}, {3, 'Salman', 45}}), {36, 25, 45})\n    lu.assertEquals(candidate({{1, 'Sudeep', 14}, {2, 'Vandana', 36}, {3, 'Dawood', 56}}), {14, 36, 56})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_273_substract_elements", "prompt": "-- Write a function that takes in two tables and subtracts the elements of the first table by the elements of the second table with the same index.\nlocal function substract_elements(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = substract_elements\n    lu.assertEquals(candidate({10, 4, 5}, {2, 5, 18}), {8, -1, -13})\n    lu.assertEquals(candidate({11, 2, 3}, {24, 45, 16}), {-13, -43, -13})\n    lu.assertEquals(candidate({7, 18, 9}, {10, 11, 12}), {-3, 7, -3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "-- Write a lua function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlocal function even_binomial_Coeff_Sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_binomial_Coeff_Sum\n    lu.assertEquals(candidate(4), 8)\n    lu.assertEquals(candidate(6), 32)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_277_dict_filter", "prompt": "-- Write a function that takes in a table and integer n and filters the table to only include entries with values greater than or equal to n.\nlocal function dict_filter(dict, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_filter\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 170), {['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 180), {['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 190), {['Pierre Cox'] = 190})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "-- Write a function to find the number of elements that occurs before the table element in the given table.\nlocal function count_first_elements(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_first_elements\n    lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), 3)\n    lu.assertEquals(candidate({2, 9, {5, 7}, 11}), 2)\n    lu.assertEquals(candidate({11, 15, 5, 8, {2, 3}, 8}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "-- Write a function to find the nth decagonal number.\nlocal function is_num_decagonal(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_num_decagonal\n    lu.assertEquals(candidate(3), 27)\n    lu.assertEquals(candidate(7), 175)\n    lu.assertEquals(candidate(10), 370)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_280_sequential_search", "prompt": "-- Write a function that takes in a table and element and returns a table containing a boolean that indicates if the element is in the table and the index position of the element (or -1 if the element is not found).\nlocal function sequential_search(dlist, item)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sequential_search\n    lu.assertEquals(candidate({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31), {true, 3})\n    lu.assertEquals(candidate({12, 32, 45, 62, 35, 47, 44, 61}, 61), {true, 7})\n    lu.assertEquals(candidate({9, 10, 17, 19, 22, 39, 48, 56}, 48), {true, 6})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_281_all_unique", "prompt": "-- Write a lua function to check if the elements of a given table are unique or not.\nlocal function all_unique(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_unique\n    lu.assertEquals(candidate({1, 2, 3}), true)\n    lu.assertEquals(candidate({1, 2, 1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_282_sub_list", "prompt": "-- Write a function to subtract two tables element-wise.\nlocal function sub_list(nums1, nums2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sub_list\n    lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), {-3, -3, -3})\n    lu.assertEquals(candidate({1, 2}, {3, 4}), {-2, -2})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {40, 50})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_283_validate", "prompt": "-- Write a lua function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_284_check_element", "prompt": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "-- Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nlocal function text_match_two_three(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_two_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "-- Write a function to find the largest sum of a contiguous table in the modified table which is formed by repeating the given table k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum_repeated\n    lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)\n    lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)\n    lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_287_square_Sum", "prompt": "-- Write a lua function takes in an integer n and returns the sum of squares of first n even natural numbers.\nlocal function square_Sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_Sum\n    lu.assertEquals(candidate(2), 20)\n    lu.assertEquals(candidate(3), 56)\n    lu.assertEquals(candidate(4), 120)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_290_max_length", "prompt": "-- Write a function to find the table of maximum length in a table of tables.\nlocal function max_length(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_length\n    lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})\n    lu.assertEquals(candidate({{1}, {5, 7}, {10, 12, 14, 15}}), {4, {10, 12, 14, 15}})\n    lu.assertEquals(candidate({{5}, {15, 20, 25}}), {3, {15, 20, 25}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "-- Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlocal function count_no_of_ways(n, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_no_of_ways\n    lu.assertEquals(candidate(2, 4), 16)\n    lu.assertEquals(candidate(3, 2), 6)\n    lu.assertEquals(candidate(4, 4), 228)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_292_find", "prompt": "-- Write a lua function to find quotient of two numbers (rounded down to the nearest integer).\nlocal function find(n, m)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find\n    lu.assertEquals(candidate(10, 3), 3)\n    lu.assertEquals(candidate(4, 2), 2)\n    lu.assertEquals(candidate(20, 5), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_294_max_val", "prompt": "-- Write a function to find the maximum value in a given heterogeneous table.\nlocal function max_val(listval)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_val\n    lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 5)\n    lu.assertEquals(candidate({'Python', 15, 20, 25}), 25)\n    lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 50)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_295_sum_div", "prompt": "-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "-- Write a lua function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_297_flatten_list", "prompt": "-- Write a function to flatten a given nested table structure.\nlocal function flatten_list(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flatten_list\n    lu.assertEquals(candidate({0, 10, {20, 30}, 40, 50, {60, 70, 80}, {90, 100, 110, 120}}), {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120})\n    lu.assertEquals(candidate({{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}}), {10, 20, 40, 30, 56, 25, 10, 20, 33, 40})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_304_find_Element", "prompt": "-- Write a lua function to find element at a given index after number of rotations.\nlocal function find_Element(arr, ranges, rotations, index)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_305_start_withp", "prompt": "-- Write a function to return two words from a table of words starting with letter 'p'.\nlocal function start_withp(words)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = start_withp\n    lu.assertEquals(candidate({'Python PHP', 'Java JavaScript', 'c c++'}), {'Python', 'PHP'})\n    lu.assertEquals(candidate({'Python Programming', 'Java Programming'}), {'Python', 'Programming'})\n    lu.assertEquals(candidate({'Pqrst Pqr', 'qrstuv'}), {'Pqrst', 'Pqr'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "-- Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlocal function max_sum_increasing_subseq(a, n, index, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_increasing_subseq\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), 11)\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), 7)\n    lu.assertEquals(candidate({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), 71)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_308_large_product", "prompt": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_309_maximum", "prompt": "-- Write a lua function to find the maximum of two numbers.\nlocal function maximum(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate(5, 10), 10)\n    lu.assertEquals(candidate(-1, -2), -1)\n    lu.assertEquals(candidate(9, 7), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "-- Write a function to convert a given string to a table of characters.\nlocal function string_to_tuple(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_tuple\n    lu.assertEquals(candidate('python 3.0'), {'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'})\n    lu.assertEquals(candidate('item1'), {'i', 't', 'e', 'm', '1'})\n    lu.assertEquals(candidate('15.10'), {'1', '5', '.', '1', '0'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "-- Write a lua function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_389_find_lucas", "prompt": "-- Write a function to find the n'th lucas number.\nlocal function find_lucas(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_lucas\n    lu.assertEquals(candidate(9), 76)\n    lu.assertEquals(candidate(4), 7)\n    lu.assertEquals(candidate(3), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_390_add_string", "prompt": "-- Write a function to apply a given format string to all of the elements in a table.\nlocal function add_string(list_, string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_string\n    lu.assertEquals(candidate({1, 2, 3, 4}, 'temp{0}'), {'temp1', 'temp2', 'temp3', 'temp4'})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 'python{0}'), {'pythona', 'pythonb', 'pythonc', 'pythond'})\n    lu.assertEquals(candidate({5, 6, 7, 8}, 'string{0}'), {'string5', 'string6', 'string7', 'string8'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "-- Write a function to convert more than one table to nested table.\nlocal function convert_list_dictionary(l1, l2, l3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_393_max_length_list", "prompt": "-- Write a function to find the table with maximum length.\nlocal function max_length_list(input_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_length_list\n    lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1}}), {5, {1, 2, 3, 4, 5}})\n    lu.assertEquals(candidate({{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}}), {4, {6, 7, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_394_check_distinct", "prompt": "-- Write a function to check if given table contains no duplicates.\nlocal function check_distinct(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_distinct\n    lu.assertEquals(candidate({1, 4, 5, 6, 1, 4}), false)\n    lu.assertEquals(candidate({1, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "-- Write a lua function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_396_check_char", "prompt": "-- Write a function to check whether the given string starts and ends with the same character or not.\nlocal function check_char(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_char\n    lu.assertEquals(candidate('abba'), 'Valid')\n    lu.assertEquals(candidate('a'), 'Valid')\n    lu.assertEquals(candidate('abcd'), 'Invalid')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_397_median_numbers", "prompt": "-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "-- Write a function to perform the mathematical bitwise xor operation across the given tables.\nlocal function bitwise_xor(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bitwise_xor\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {15, 6, 5, 10})\n    lu.assertEquals(candidate({11, 5, 7, 10}, {6, 3, 4, 4}), {13, 6, 3, 14})\n    lu.assertEquals(candidate({12, 6, 8, 11}, {7, 4, 5, 6}), {11, 2, 13, 13})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_400_extract_freq", "prompt": "-- Write a function to extract the number of unique tables in the given table.\nlocal function extract_freq(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_freq\n    lu.assertEquals(candidate({{3, 4}, {1, 2}, {4, 3}, {5, 6}}), 3)\n    lu.assertEquals(candidate({{4, 15}, {2, 3}, {5, 4}, {6, 7}}), 4)\n    lu.assertEquals(candidate({{5, 16}, {2, 3}, {6, 5}, {6, 9}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_404_minimum", "prompt": "-- Write a lua function to find the minimum of two numbers.\nlocal function minimum(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minimum\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(-5, -4), -5)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "-- Write a function to check whether an element exists within a table.\nlocal function check_tuplex(tuplex, tuple1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_tuplex\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 'r'), true)\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, '5'), false)\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 3), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_406_find_Parity", "prompt": "-- Write a lua function to find whether the parity of a given number is odd.\nlocal function find_Parity(x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Parity\n    lu.assertEquals(candidate(12), false)\n    lu.assertEquals(candidate(7), true)\n    lu.assertEquals(candidate(10), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "-- Write a function to find k number of smallest pairs which consist of one element from the first table and one element from the second table.\nlocal function k_smallest_pairs(nums1, nums2, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "-- Write a function to find the minimum product from the pairs of tables within a given table.\nlocal function min_product_tuple(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_410_min_val", "prompt": "-- Write a function to find the minimum value in a given heterogeneous table.\nlocal function min_val(listval)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_val\n    lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 2)\n    lu.assertEquals(candidate({'Python', 15, 20, 25}), 15)\n    lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 20)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_412_remove_odd", "prompt": "-- Write a lua function to remove odd numbers from a given table.\nlocal function remove_odd(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate({1, 2, 3}), {2})\n    lu.assertEquals(candidate({2, 4, 6}), {2, 4, 6})\n    lu.assertEquals(candidate({10, 20, 3}), {10, 20})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "-- Write a function to extract the nth element from a given table of tables.\nlocal function extract_nth_element(list1, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_nth_element\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 0), {'Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'})\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 2), {99, 96, 94, 98})\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 1), {98, 97, 91, 94})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_414_overlapping", "prompt": "-- Write a lua function to check whether any value in a sequence exists in a sequence or not.\nlocal function overlapping(list1, list2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = overlapping\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), false)\n    lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), false)\n    lu.assertEquals(candidate({1, 4, 5}, {1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_415_max_Product", "prompt": "-- Write a lua function to find a pair with highest product from a given table of integers.\nlocal function max_Product(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Product\n    lu.assertEquals(candidate({1, 2, 3, 4, 7, 0, 8, 4}), {7, 8})\n    lu.assertEquals(candidate({0, -1, -2, -4, 5, 0, -6}), {-4, -6})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_417_group_tuples", "prompt": "-- Write a function to find common first element in given table of tables.\nlocal function group_tuples(Input)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_418_Find_Max", "prompt": "-- Write a lua function to find the element of a table having maximum length.\nlocal function Find_Max(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max\n    lu.assertEquals(candidate({{'A'}, {'A', 'B'}, {'A', 'B', 'C'}}), {'A', 'B', 'C'})\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1, 2, 3})\n    lu.assertEquals(candidate({{1, 1}, {1, 2, 3}, {1, 5, 6, 1}}), {1, 5, 6, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "-- Write a function to round every number of a given table of numbers and print the total sum multiplied by the length of the table.\nlocal function round_and_sum(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = round_and_sum\n    lu.assertEquals(candidate({22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), 243)\n    lu.assertEquals(candidate({5, 2, 9, 24.3, 29}), 345)\n    lu.assertEquals(candidate({25.0, 56.7, 89.2}), 513)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "-- Write a lua function to find the cube sum of first n even natural numbers.\nlocal function cube_Sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cube_Sum\n    lu.assertEquals(candidate(2), 72)\n    lu.assertEquals(candidate(3), 288)\n    lu.assertEquals(candidate(4), 800)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "-- Write a function to concatenate each element of table by the delimiter.\nlocal function concatenate_tuple(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate_tuple\n    lu.assertEquals(candidate({'ID', 'is', 4, 'UTS'}), 'ID-is-4-UTS')\n    lu.assertEquals(candidate({'QWE', 'is', 4, 'RTY'}), 'QWE-is-4-RTY')\n    lu.assertEquals(candidate({'ZEN', 'is', 4, 'OP'}), 'ZEN-is-4-OP')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "-- Write a lua function to find the average of cubes of first n natural numbers.\nlocal function find_Average_Of_Cube(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Average_Of_Cube\n    lu.assertEquals(candidate(2), 4.5)\n    lu.assertEquals(candidate(3), 12)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_424_extract_rear", "prompt": "-- Write a function to extract only the rear index element of each string in the given table.\nlocal function extract_rear(test_tuple)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_rear\n    lu.assertEquals(candidate({'Mers', 'for', 'Vers'}), {'s', 'r', 's'})\n    lu.assertEquals(candidate({'Avenge', 'for', 'People'}), {'e', 'r', 'e'})\n    lu.assertEquals(candidate({'Gotta', 'get', 'go'}), {'a', 't', 'o'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "-- Write a function to count the number of subtables containing a particular element.\nlocal function count_element_in_list(list1, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_element_in_list\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 11}, {1, 15, 7}}, 1), 3)\n    lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'A'), 3)\n    lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'E'), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "-- Write a function to filter odd numbers.\nlocal function filter_oddnumbers(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_oddnumbers\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 3, 5, 7, 9})\n    lu.assertEquals(candidate({10, 20, 45, 67, 84, 93}), {45, 67, 93})\n    lu.assertEquals(candidate({5, 7, 9, 8, 6, 4, 3}), {5, 7, 9, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_427_change_date_format", "prompt": "-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_428_shell_sort", "prompt": "-- Write a function to sort the given table by using shell sort.\nlocal function shell_sort(my_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = shell_sort\n    lu.assertEquals(candidate({12, 23, 4, 5, 3, 2, 12, 81, 56, 95}), {2, 3, 4, 5, 12, 12, 23, 56, 81, 95})\n    lu.assertEquals(candidate({24, 22, 39, 34, 87, 73, 68}), {22, 24, 34, 39, 68, 73, 87})\n    lu.assertEquals(candidate({32, 30, 16, 96, 82, 83, 74}), {16, 30, 32, 74, 82, 83, 96})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_429_and_tuples", "prompt": "-- Write a function to extract the elementwise and tables from the given two tables.\nlocal function and_tuples(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = and_tuples\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {0, 0, 2, 1})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {5, 6, 7, 8}), {1, 2, 3, 0})\n    lu.assertEquals(candidate({8, 9, 11, 12}, {7, 13, 14, 17}), {0, 9, 10, 0})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "-- Write a function to find the directrix of a parabola.\nlocal function parabola_directrix(a, b, c)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parabola_directrix\n    lu.assertEquals(candidate(5, 3, 2), -198)\n    lu.assertEquals(candidate(9, 8, 4), -2336)\n    lu.assertEquals(candidate(2, 4, 6), -130)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_431_common_element", "prompt": "-- Write a function that takes two tables and returns true if they have at least one common element.\nlocal function common_element(list1, list2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common_element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8, 9}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), None)\n    lu.assertEquals(candidate({'a', 'b', 'c'}, {'d', 'b', 'e'}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "-- Write a function to find the median length of a trapezium.\nlocal function median_trapezium(base1, base2, height)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_trapezium\n    lu.assertEquals(candidate(15, 25, 35), 20)\n    lu.assertEquals(candidate(10, 20, 30), 15)\n    lu.assertEquals(candidate(6, 9, 4), 7.5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_433_check_greater", "prompt": "-- Write a function to check whether the entered number is greater than the elements of the given table.\nlocal function check_greater(arr, number)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_greater\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, 4), false)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}, 8), true)\n    lu.assertEquals(candidate({9, 7, 4, 8, 6, 1}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_434_text_match_one", "prompt": "-- Write a function that matches a string that has an a followed by one or more b's.\nlocal function text_match_one(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_one\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abba'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_435_last_Digit", "prompt": "-- Write a lua function to find the last digit of a given number.\nlocal function last_Digit(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last_Digit\n    lu.assertEquals(candidate(123), 3)\n    lu.assertEquals(candidate(25), 5)\n    lu.assertEquals(candidate(30), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_436_neg_nos", "prompt": "-- Write a lua function to return the negative numbers in a table.\nlocal function neg_nos(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = neg_nos\n    lu.assertEquals(candidate({-1, 4, 5, -6}), {-1, -6})\n    lu.assertEquals(candidate({-1, -2, 3, 4}), {-1, -2})\n    lu.assertEquals(candidate({-7, -6, 8, 9}), {-7, -6})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_437_remove_odd", "prompt": "-- Write a function to remove odd characters in a string.\nlocal function remove_odd(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate('python'), 'yhn')\n    lu.assertEquals(candidate('program'), 'rga')\n    lu.assertEquals(candidate('language'), 'agae')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "-- Write a function to count bidirectional table pairs.\nlocal function count_bidirectional(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "-- Write a function to find the first adverb and their positions in a given sentence.\nlocal function find_adverb_position(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_adverb_position\n    lu.assertEquals(candidate('clearly!! we can see the sky'), {0, 7, 'clearly'})\n    lu.assertEquals(candidate('seriously!! there are many roses'), {0, 9, 'seriously'})\n    lu.assertEquals(candidate('unfortunately!! sita is going to home'), {0, 13, 'unfortunately'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "-- Write a function to find the surface area of a cube of a given size.\nlocal function surfacearea_cube(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surfacearea_cube\n    lu.assertEquals(candidate(5), 150)\n    lu.assertEquals(candidate(3), 54)\n    lu.assertEquals(candidate(10), 600)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_442_positive_count", "prompt": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_443_largest_neg", "prompt": "-- Write a lua function to find the largest negative number from the given table.\nlocal function largest_neg(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_neg\n    lu.assertEquals(candidate({1, 2, 3, -4, -6}), -6)\n    lu.assertEquals(candidate({1, 2, 3, -8, -9}), -9)\n    lu.assertEquals(candidate({1, 2, 3, 4, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "-- Write a function to trim each table by k in the given tables.\nlocal function trim_tuple(test_list, K)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = trim_tuple\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2), {{2}, {9}, {2}, {2}})\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1), {{3, 2, 1}, {4, 9, 2}, {1, 2, 3}, {8, 2, 1}})\n    lu.assertEquals(candidate({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1), {{8, 4}, {8, 12}, {1, 7}, {6, 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "-- Write a function to perform index wise multiplication of table elements in the given two tables.\nlocal function index_multiplication(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_multiplication\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 21}, {12, 45}, {2, 9}, {7, 30}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{14, 32}, {20, 60}, {6, 20}, {16, 44}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{24, 45}, {30, 77}, {12, 33}, {27, 60}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "-- Write a lua function to count the occurence of all elements of table in a table.\nlocal function count_Occurrence(tup, lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Occurrence\n    lu.assertEquals(candidate({'a', 'a', 'c', 'b', 'd'}, {'a', 'b'}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 1, 4, 6, 7, 1, 4}, {1, 4, 7}), 6)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {1, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_447_cube_nums", "prompt": "-- Write a function to find cubes of individual elements in a table.\nlocal function cube_nums(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cube_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000})\n    lu.assertEquals(candidate({10, 20, 30}), {1000, 8000, 27000})\n    lu.assertEquals(candidate({12, 15}), {1728, 3375})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_448_cal_sum", "prompt": "-- Write a function to calculate the sum of perrin numbers.\nlocal function cal_sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cal_sum\n    lu.assertEquals(candidate(9), 49)\n    lu.assertEquals(candidate(10), 66)\n    lu.assertEquals(candidate(11), 88)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_450_extract_string", "prompt": "-- Write a function to extract specified size of strings from a given table of string values.\nlocal function extract_string(str, l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_string\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 8), {'practice', 'solution'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 6), {'Python'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 9), {'exercises'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "-- Write a function to remove all whitespaces from the given string.\nlocal function remove_whitespaces(text1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_whitespaces\n    lu.assertEquals(candidate(' Google    Flutter '), 'GoogleFlutter')\n    lu.assertEquals(candidate(' Google    Dart '), 'GoogleDart')\n    lu.assertEquals(candidate(' iOS    Swift '), 'iOSSwift')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_452_loss_amount", "prompt": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "-- Write a lua function to find the sum of even factors of a number.\nlocal function sumofFactors(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sumofFactors\n    lu.assertEquals(candidate(18), 26)\n    lu.assertEquals(candidate(30), 48)\n    lu.assertEquals(candidate(6), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "-- Write a function that matches a word containing 'z'.\nlocal function text_match_wordz(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz\n    lu.assertEquals(candidate('pythonz.'), true)\n    lu.assertEquals(candidate('xyz.'), true)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "-- Write a function to check whether the given month number contains 31 days or not.\nlocal function check_monthnumb_number(monthnum2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_monthnumb_number\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(6), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "-- Write a function to reverse each string in a given table of string values.\nlocal function reverse_string_list(stringlist)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_string_list\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue', 'White', 'Black'}), {'deR', 'neerG', 'eulB', 'etihW', 'kcalB'})\n    lu.assertEquals(candidate({'john', 'amal', 'joel', 'george'}), {'nhoj', 'lama', 'leoj', 'egroeg'})\n    lu.assertEquals(candidate({'jack', 'john', 'mary'}), {'kcaj', 'nhoj', 'yram'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_457_Find_Min", "prompt": "-- Write a lua function to find the subtable having minimum length.\nlocal function Find_Min(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1})\n    lu.assertEquals(candidate({{1, 1}, {1, 1, 1}, {1, 2, 7, 8}}), {1, 1})\n    lu.assertEquals(candidate({{'x'}, {'x', 'y'}, {'x', 'y', 'z'}}), {'x'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "-- Write a function to find the area of a rectangle.\nlocal function rectangle_area(l, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rectangle_area\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(10, 5), 50)\n    lu.assertEquals(candidate(4, 2), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "-- Write a function to remove uppercase substrings from a given string.\nlocal function remove_uppercase(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_uppercase\n    lu.assertEquals(candidate('cAstyoUrFavoRitETVshoWs'), 'cstyoravoitshos')\n    lu.assertEquals(candidate('wAtchTheinTernEtrAdIo'), 'wtchheinerntrdo')\n    lu.assertEquals(candidate('VoicESeaRchAndreComMendaTionS'), 'oiceachndreomendaion')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_460_Extract", "prompt": "-- Write a lua function to get the first element of each subtable.\nlocal function Extract(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Extract\n    lu.assertEquals(candidate({{1, 2}, {3, 4, 5}, {6, 7, 8, 9}}), {1, 3, 6})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5}}), {1, 4})\n    lu.assertEquals(candidate({{9, 8, 1}, {1, 2}}), {9, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "-- Write a lua function to count the upper case characters in a given string.\nlocal function upper_ctr(str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = upper_ctr\n    lu.assertEquals(candidate('PYthon'), 1)\n    lu.assertEquals(candidate('BigData'), 1)\n    lu.assertEquals(candidate('program'), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_462_combinations_list", "prompt": "-- Write a function to find all possible combinations of the elements of a given table.\nlocal function combinations_list(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_list\n    lu.assertEquals(candidate({'orange', 'red', 'green', 'blue'}), {{}, {'orange'}, {'red'}, {'red', 'orange'}, {'green'}, {'green', 'orange'}, {'green', 'red'}, {'green', 'red', 'orange'}, {'blue'}, {'blue', 'orange'}, {'blue', 'red'}, {'blue', 'red', 'orange'}, {'blue', 'green'}, {'blue', 'green', 'orange'}, {'blue', 'green', 'red'}, {'blue', 'green', 'red', 'orange'}})\n    lu.assertEquals(candidate({'red', 'green', 'blue', 'white', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'blue'}, {'blue', 'red'}, {'blue', 'green'}, {'blue', 'green', 'red'}, {'white'}, {'white', 'red'}, {'white', 'green'}, {'white', 'green', 'red'}, {'white', 'blue'}, {'white', 'blue', 'red'}, {'white', 'blue', 'green'}, {'white', 'blue', 'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'black', 'blue'}, {'black', 'blue', 'red'}, {'black', 'blue', 'green'}, {'black', 'blue', 'green', 'red'}, {'black', 'white'}, {'black', 'white', 'red'}, {'black', 'white', 'green'}, {'black', 'white', 'green', 'red'}, {'black', 'white', 'blue'}, {'black', 'white', 'blue', 'red'}, {'black', 'white', 'blue', 'green'}, {'black', 'white', 'blue', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'blue'}, {'orange', 'blue', 'red'}, {'orange', 'blue', 'green'}, {'orange', 'blue', 'green', 'red'}, {'orange', 'white'}, {'orange', 'white', 'red'}, {'orange', 'white', 'green'}, {'orange', 'white', 'green', 'red'}, {'orange', 'white', 'blue'}, {'orange', 'white', 'blue', 'red'}, {'orange', 'white', 'blue', 'green'}, {'orange', 'white', 'blue', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}, {'orange', 'black', 'blue'}, {'orange', 'black', 'blue', 'red'}, {'orange', 'black', 'blue', 'green'}, {'orange', 'black', 'blue', 'green', 'red'}, {'orange', 'black', 'white'}, {'orange', 'black', 'white', 'red'}, {'orange', 'black', 'white', 'green'}, {'orange', 'black', 'white', 'green', 'red'}, {'orange', 'black', 'white', 'blue'}, {'orange', 'black', 'white', 'blue', 'red'}, {'orange', 'black', 'white', 'blue', 'green'}, {'orange', 'black', 'white', 'blue', 'green', 'red'}})\n    lu.assertEquals(candidate({'red', 'green', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_464_check_value", "prompt": "-- Write a function to check if all values are same in a table.\nlocal function check_value(dict, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_value\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 10), false)\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 12), true)\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 5), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_465_drop_empty", "prompt": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_468_max_product", "prompt": "-- Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that table.\nlocal function max_product(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product\n    lu.assertEquals(candidate({3, 100, 4, 5, 150, 6}), 3000)\n    lu.assertEquals(candidate({4, 42, 55, 68, 80}), 50265600)\n    lu.assertEquals(candidate({10, 22, 9, 33, 21, 50, 41, 60}), 2460)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "-- Write a function to find the pairwise addition of the neighboring elements of the given table.\nlocal function add_pairwise(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_471_find_remainder", "prompt": "-- Write a lua function to find the product of the table multiplication modulo n.\nlocal function find_remainder(arr, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_remainder\n    lu.assertEquals(candidate({100, 10, 5, 25, 35, 14}, 11), 9)\n    lu.assertEquals(candidate({1, 1, 1}, 1), 0)\n    lu.assertEquals(candidate({1, 2, 1}, 2), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "-- Write a lua function to check whether the given table contains consecutive numbers or not.\nlocal function check_Consecutive(l)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_Consecutive\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 5, 6}), false)\n    lu.assertEquals(candidate({1, 2, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_474_replace_char", "prompt": "-- Write a function to replace characters in a string.\nlocal function replace_char(str1, ch, newch)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_char\n    lu.assertEquals(candidate('polygon', 'y', 'l'), 'pollgon')\n    lu.assertEquals(candidate('character', 'c', 'a'), 'aharaater')\n    lu.assertEquals(candidate('python', 'l', 'a'), 'python')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_475_sort_counter", "prompt": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_476_big_sum", "prompt": "-- Write a lua function to find the sum of the largest and smallest value in a given table.\nlocal function big_sum(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = big_sum\n    lu.assertEquals(candidate({1, 2, 3}), 4)\n    lu.assertEquals(candidate({-1, 2, 3, 4}), 3)\n    lu.assertEquals(candidate({2, 3, 6}), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_477_is_lower", "prompt": "-- Write a lua function to convert the given string to lower case.\nlocal function is_lower(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_lower\n    lu.assertEquals(candidate('InValid'), 'invalid')\n    lu.assertEquals(candidate('TruE'), 'true')\n    lu.assertEquals(candidate('SenTenCE'), 'sentence')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "-- Write a function to remove lowercase substrings from a given string.\nlocal function remove_lowercase(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_lowercase\n    lu.assertEquals(candidate('PYTHon'), 'PYTH')\n    lu.assertEquals(candidate('FInD'), 'FID')\n    lu.assertEquals(candidate('STRinG'), 'STRG')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_479_first_Digit", "prompt": "-- Write a lua function to find the first digit of a given number.\nlocal function first_Digit(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_Digit\n    lu.assertEquals(candidate(123), 1)\n    lu.assertEquals(candidate(456), 4)\n    lu.assertEquals(candidate(12), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_554_Split", "prompt": "-- Write a lua function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_555_difference", "prompt": "-- Write a lua function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlocal function difference(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = difference\n    lu.assertEquals(candidate(3), 30)\n    lu.assertEquals(candidate(5), 210)\n    lu.assertEquals(candidate(2), 6)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "-- Write a lua function to count the number of pairs whose xor value is odd.\nlocal function find_Odd_Pair(A, N)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Odd_Pair\n    lu.assertEquals(candidate({5, 4, 7, 2, 1}, 5), 6)\n    lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}, 7), 12)\n    lu.assertEquals(candidate({1, 2, 3}, 3), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_557_toggle_string", "prompt": "-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "-- Write a lua function to find the sum of the per-digit difference between two integers.\nlocal function digit_distance_nums(n1, n2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digit_distance_nums\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(23, 56), 6)\n    lu.assertEquals(candidate(123, 256), 7)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_560_union_elements", "prompt": "-- Write a function to find the union of the elements of two given tables and output them in sorted order.\nlocal function union_elements(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = union_elements\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 4, 5, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {3, 4, 5, 6}), {1, 2, 3, 4, 5, 6})\n    lu.assertEquals(candidate({11, 12, 13, 14}, {13, 15, 16, 17}), {11, 12, 13, 14, 15, 16, 17})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "-- Write a lua function to find the length of the longest subtables.\nlocal function Find_Max_Length(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max_Length\n    lu.assertEquals(candidate({{1}, {1, 4}, {5, 6, 7, 8}}), 4)\n    lu.assertEquals(candidate({{0, 1}, {2, 2}, {3, 2, 1}}), 3)\n    lu.assertEquals(candidate({{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}}), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_563_extract_values", "prompt": "-- Write a function to extract values between quotation marks from a string.\nlocal function extract_values(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_values\n    lu.assertEquals(candidate('\"Python\", \"PHP\", \"Java\"'), {'Python', 'PHP', 'Java'})\n    lu.assertEquals(candidate('\"python\",\"program\",\"language\"'), {'python', 'program', 'language'})\n    lu.assertEquals(candidate('\"red\",\"blue\",\"green\",\"yellow\"'), {'red', 'blue', 'green', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "-- Write a lua function which takes a table of integers and counts the number of possible unordered pairs where both elements are unequal.\nlocal function count_Pairs(arr, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Pairs\n    lu.assertEquals(candidate({1, 2, 1}, 3), 2)\n    lu.assertEquals(candidate({1, 1, 1, 1}, 4), 0)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, 5), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_565_split", "prompt": "-- Write a lua function to split a string into characters.\nlocal function split(word)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split\n    lu.assertEquals(candidate('python'), {'p', 'y', 't', 'h', 'o', 'n'})\n    lu.assertEquals(candidate('Name'), {'N', 'a', 'm', 'e'})\n    lu.assertEquals(candidate('program'), {'p', 'r', 'o', 'g', 'r', 'a', 'm'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_566_sum_digits", "prompt": "-- Write a function to get the sum of the digits of a non-negative integer.\nlocal function sum_digits(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_digits\n    lu.assertEquals(candidate(345), 12)\n    lu.assertEquals(candidate(12), 3)\n    lu.assertEquals(candidate(97), 16)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_567_issort_list", "prompt": "-- Write a function to check whether a specified table is sorted or not.\nlocal function issort_list(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = issort_list\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 16, 17}), true)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 20, 17}), false)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 15, 14, 20}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_568_empty_list", "prompt": "-- Write a function to create a table of N empty dictionaries.\nlocal function empty_list(length)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = empty_list\n    lu.assertEquals(candidate(5), {{}, {}, {}, {}, {}})\n    lu.assertEquals(candidate(6), {{}, {}, {}, {}, {}, {}})\n    lu.assertEquals(candidate(7), {{}, {}, {}, {}, {}, {}, {}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'d', 'c'}, {'g', 'h'}, {'f', 'e'}}), {{'a', 'b'}, {'c', 'd'}, {'g', 'h'}, {'e', 'f'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "-- Write a lua function to remove duplicate numbers from a given number of tables.\nlocal function two_unique_nums(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = two_unique_nums\n    lu.assertEquals(candidate({1, 2, 3, 2, 3, 4, 5}), {1, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 5}), {1, 3, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_573_unique_product", "prompt": "-- Write a lua function to calculate the product of the unique numbers in a given table.\nlocal function unique_product(list_data)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "-- Write a function to find the surface area of a cylinder.\nlocal function surfacearea_cylinder(r, h)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surfacearea_cylinder\n    lu.assertEquals(candidate(10, 5), 942.45)\n    lu.assertEquals(candidate(4, 5), 226.18800000000002)\n    lu.assertEquals(candidate(4, 10), 351.848)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "-- Write a lua function to check whether a table is subtable of another or not.\nlocal function is_Sub_Array(A, B)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sub_Array\n    lu.assertEquals(candidate({1, 4, 3, 5}, {1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 1}, {1, 2, 1}), true)\n    lu.assertEquals(candidate({1, 0, 2, 2}, {2, 2, 0}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "-- Write a lua function to find the last digit in factorial of a given number.\nlocal function last_Digit_Factorial(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last_Digit_Factorial\n    lu.assertEquals(candidate(4), 4)\n    lu.assertEquals(candidate(21), 0)\n    lu.assertEquals(candidate(30), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "-- Write a function to interleave 3 tables of the same length into a single flat table.\nlocal function interleave_lists(list1, list2, list3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "-- Write a function to find the dissimilar elements in the given two tables.\nlocal function find_dissimilar(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_dissimilar\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {7, 2, 3, 9}), {1, 4, 7, 9})\n    lu.assertEquals(candidate({21, 11, 25, 26}, {26, 34, 21, 36}), {34, 36, 11, 25})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_580_extract_even", "prompt": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_581_surface_Area", "prompt": "-- Write a lua function to find the surface area of a square luaramid with a given base edge and height.\nlocal function surface_Area(b, s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surface_Area\n    lu.assertEquals(candidate(3, 4), 33)\n    lu.assertEquals(candidate(4, 5), 56)\n    lu.assertEquals(candidate(1, 2), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_583_catalan_number", "prompt": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "-- Write a function to find the first adverb ending with ly and its positions in a given string.\nlocal function find_adverbs(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_adverbs\n    lu.assertEquals(candidate('Clearly, he has no excuse for such behavior.'), '0-7: Clearly')\n    lu.assertEquals(candidate('Please handle the situation carefuly'), '28-36: carefuly')\n    lu.assertEquals(candidate('Complete the task quickly'), '18-25: quickly')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_585_expensive_items", "prompt": "-- Write a function to find the n most expensive items in a given dataset.\nlocal function expensive_items(items, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = expensive_items\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}}, 2), {{['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-1', ['price'] = 101.1}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}, {['name'] = 'Item-4', ['price'] = 22.75}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_586_split_Arr", "prompt": "-- Write a lua function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_587_list_tuple", "prompt": "-- Write a function to convert a table to a table.\nlocal function list_tuple(listx)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_tuple\n    lu.assertEquals(candidate({5, 10, 7, 4, 15, 3}), {5, 10, 7, 4, 15, 3})\n    lu.assertEquals(candidate({2, 4, 5, 6, 2, 3, 4, 4, 7}), {2, 4, 5, 6, 2, 3, 4, 4, 7})\n    lu.assertEquals(candidate({58, 44, 56}), {58, 44, 56})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_588_big_diff", "prompt": "-- Write a lua function to find the difference between largest and smallest value in a given table.\nlocal function big_diff(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = big_diff\n    lu.assertEquals(candidate({1, 2, 3, 4}), 3)\n    lu.assertEquals(candidate({4, 5, 12}), 8)\n    lu.assertEquals(candidate({9, 2, 3}), 7)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_591_swap_List", "prompt": "-- Write a lua function to interchange the first and last elements in a table.\nlocal function swap_List(newList)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_List\n    lu.assertEquals(candidate({12, 35, 9, 56, 24}), {24, 35, 9, 56, 12})\n    lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})\n    lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "-- Write a lua function to find the sum of the product of consecutive binomial co-efficients.\nlocal function sum_Of_product(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_Of_product\n    lu.assertEquals(candidate(3), 15)\n    lu.assertEquals(candidate(4), 56)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "-- Write a function to remove leading zeroes from an ip address.\nlocal function removezero_ip(ip)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = removezero_ip\n    lu.assertEquals(candidate('216.08.094.196'), '216.8.94.196')\n    lu.assertEquals(candidate('12.01.024'), '12.1.24')\n    lu.assertEquals(candidate('216.08.094.0196'), '216.8.94.196')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "-- Write a function to find the difference of the first even and first odd number of a given table.\nlocal function diff_even_odd(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = diff_even_odd\n    lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 1)\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "-- Write a lua function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_597_find_kth", "prompt": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_599_sum_average", "prompt": "-- Write a function to find sum and average of first n natural numbers.\nlocal function sum_average(number)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_average\n    lu.assertEquals(candidate(10), {55, 5.5})\n    lu.assertEquals(candidate(15), {120, 8.0})\n    lu.assertEquals(candidate(20), {210, 10.5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_600_is_Even", "prompt": "-- Write a lua function to check whether the given number is even or not.\nlocal function is_Even(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Even\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(2), true)\n    lu.assertEquals(candidate(3), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "-- Write a lua function to find the first repeated character in a given string.\nlocal function first_repeated_char(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_repeated_char\n    lu.assertEquals(candidate('abcabc'), 'a')\n    lu.assertEquals(candidate('abc'), None)\n    lu.assertEquals(candidate('123123'), '1')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_603_get_ludic", "prompt": "-- Write a function to get all lucid numbers smaller than or equal to a given integer.\nlocal function get_ludic(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_ludic\n    lu.assertEquals(candidate(10), {1, 2, 3, 5, 7})\n    lu.assertEquals(candidate(25), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25})\n    lu.assertEquals(candidate(45), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_604_reverse_words", "prompt": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_605_prime_num", "prompt": "-- Write a function to check if the given integer is a prime number.\nlocal function prime_num(num)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_num\n    lu.assertEquals(candidate(13), true)\n    lu.assertEquals(candidate(7), true)\n    lu.assertEquals(candidate(-1010), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_606_radian_degree", "prompt": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_607_find_literals", "prompt": "-- Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nlocal function find_literals(text, pattern)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_literals\n    lu.assertEquals(candidate('The quick brown fox jumps over the lazy dog.', 'fox'), {'fox', 16, 19})\n    lu.assertEquals(candidate('Its been a very crazy procedure right', 'crazy'), {'crazy', 16, 21})\n    lu.assertEquals(candidate('Hardest choices required strongest will', 'will'), {'will', 35, 39})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_608_bell_Number", "prompt": "-- Write a lua function to find nth bell number.\nlocal function bell_Number(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_Number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 15)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "-- Write a lua function which takes a table and returns a table with the same elements, but the k'th element removed.\nlocal function remove_kth_element(list1, L)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_kth_element\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {1, 1, 3, 4, 4, 5, 1})\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), {0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), {10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "-- Write a function which given a matrix represented as a table of tables returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_612_merge", "prompt": "-- Write a lua function which takes a table of tables, where each subtable has two elements, and returns a table of two tables where the first table has the first element of each subtable and the second one has the second.\nlocal function merge(lst)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge\n    lu.assertEquals(candidate({{'x', 'y'}, {'a', 'b'}, {'m', 'n'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}, {7, 8}}), {{1, 3, 5, 7}, {2, 4, 6, 8}})\n    lu.assertEquals(candidate({{'x', 'y', 'z'}, {'a', 'b', 'c'}, {'m', 'n', 'o'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}, {'z', 'c', 'o'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "-- Write a function to find the cumulative sum of all the values that are present in the given table of tables.\nlocal function cummulative_sum(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cummulative_sum\n    lu.assertEquals(candidate({{1, 3}, {5, 6, 7}, {2, 6}}), 30)\n    lu.assertEquals(candidate({{2, 4}, {6, 7, 8}, {3, 7}}), 37)\n    lu.assertEquals(candidate({{3, 5}, {7, 8, 9}, {4, 8}}), 44)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_615_average_tuple", "prompt": "-- Write a function which takes a tables of tables and returns the average value for each subtable as a table.\nlocal function average_tuple(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = average_tuple\n    lu.assertEquals(candidate({{10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4}}), {30.5, 34.25, 27.0, 23.25})\n    lu.assertEquals(candidate({{1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3}}), {25.5, -18.0, 3.75})\n    lu.assertEquals(candidate({{100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40}}), {305.0, 342.5, 270.0, 232.5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "-- Write a function which takes two tables of the same length and performs the element wise modulo.\nlocal function tuple_modulo(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_modulo\n    lu.assertEquals(candidate({10, 4, 5, 6}, {5, 6, 7, 5}), {0, 4, 5, 1})\n    lu.assertEquals(candidate({11, 5, 6, 7}, {6, 7, 8, 6}), {5, 5, 6, 1})\n    lu.assertEquals(candidate({12, 6, 7, 8}, {7, 8, 9, 7}), {5, 6, 7, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "-- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Jumps\n    lu.assertEquals(candidate({3, 4}, 11), 3.5)\n    lu.assertEquals(candidate({3, 4}, 0), 0)\n    lu.assertEquals(candidate({11, 14}, 11), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_618_div_list", "prompt": "-- Write a function to divide two tables element wise.\nlocal function div_list(nums1, nums2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_619_move_num", "prompt": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_622_get_median", "prompt": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_623_nth_nums", "prompt": "-- Write a function to compute the n-th power of each number in a table.\nlocal function nth_nums(nums, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = nth_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})\n    lu.assertEquals(candidate({10, 20, 30}, 3), {1000, 8000, 27000})\n    lu.assertEquals(candidate({12, 15}, 5), {248832, 759375})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_624_is_upper", "prompt": "-- Write a lua function to convert a given string to uppercase.\nlocal function is_upper(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_upper\n    lu.assertEquals(candidate('person'), 'PERSON')\n    lu.assertEquals(candidate('final'), 'FINAL')\n    lu.assertEquals(candidate('Valid'), 'VALID')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_625_swap_List", "prompt": "-- Write a lua function to interchange the first and last element in a given table.\nlocal function swap_List(newList)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_List\n    lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 4}), {4, 2, 3, 4, 1})\n    lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_626_triangle_area", "prompt": "-- Write a lua function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nlocal function triangle_area(r)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(-1), None)\n    lu.assertEquals(candidate(0), 0)\n    lu.assertEquals(candidate(2), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "-- Write a lua function to find the smallest missing number from a sorted table of natural numbers.\nlocal function find_First_Missing(array)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_First_Missing\n    lu.assertEquals(candidate({0, 1, 2, 3}), 4)\n    lu.assertEquals(candidate({0, 1, 2, 6, 9}), 3)\n    lu.assertEquals(candidate({2, 3, 5, 8, 9}), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "-- Write a function to replace all spaces in the given string with '%20'.\nlocal function replace_spaces(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_spaces\n    lu.assertEquals(candidate('My Name is Dawood'), 'My%20Name%20is%20Dawood')\n    lu.assertEquals(candidate('I am a Programmer'), 'I%20am%20a%20Programmer')\n    lu.assertEquals(candidate('I love Coding'), 'I%20love%20Coding')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_629_Split", "prompt": "-- Write a lua function to find even numbers from a table of numbers.\nlocal function Split(list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {2, 4})\n    lu.assertEquals(candidate({4, 5, 6, 7, 8, 0, 1}), {4, 6, 8, 0})\n    lu.assertEquals(candidate({8, 12, 15, 19}), {8, 12})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "-- Write a function to extract all the adjacent coordinates of the given coordinate table.\nlocal function get_coordinates(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_coordinates\n    lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})\n    lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "-- Write a function to replace whitespaces with an underscore and vice versa in a given string.\nlocal function replace_spaces(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_spaces\n    lu.assertEquals(candidate('Jumanji The Jungle'), 'Jumanji_The_Jungle')\n    lu.assertEquals(candidate('The_Avengers'), 'The Avengers')\n    lu.assertEquals(candidate('Fast and Furious'), 'Fast_and_Furious')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_632_move_zero", "prompt": "-- Write a lua function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "-- Write a lua function to find the sum of xor of all pairs of numbers in the given table.\nlocal function pair_xor_Sum(arr, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pair_xor_Sum\n    lu.assertEquals(candidate({5, 9, 7, 6}, 4), 47)\n    lu.assertEquals(candidate({7, 3, 5}, 3), 12)\n    lu.assertEquals(candidate({7, 3}, 2), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_635_heap_sort", "prompt": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_638_wind_chill", "prompt": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_639_sample_nam", "prompt": "-- Write a function to sum the length of the names of a given table of names after removing the names that start with a lowercase letter.\nlocal function sample_nam(sample_names)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sample_nam\n    lu.assertEquals(candidate({'sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'}), 16)\n    lu.assertEquals(candidate({'php', 'res', 'Python', 'abcd', 'Java', 'aaa'}), 10)\n    lu.assertEquals(candidate({'abcd', 'Python', 'abba', 'aba'}), 6)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "-- Write a function to remove the parenthesis and what is inbetween them from a string.\nlocal function remove_parenthesis(items)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_parenthesis\n    lu.assertEquals(candidate({'python (chrome)'}), 'python')\n    lu.assertEquals(candidate({'string(.abc)'}), 'string')\n    lu.assertEquals(candidate({'alpha(num)'}), 'alpha')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "-- Write a function to find the nth nonagonal number.\nlocal function is_nonagonal(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nonagonal\n    lu.assertEquals(candidate(10), 325)\n    lu.assertEquals(candidate(15), 750)\n    lu.assertEquals(candidate(18), 1089)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "-- Write a function that checks if a strings contains 'z', except at the start and end of the word.\nlocal function text_match_wordz_middle(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz_middle\n    lu.assertEquals(candidate('pythonzabc.'), true)\n    lu.assertEquals(candidate('zxyabc.'), false)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "-- Write a lua function to reverse a table upto a given position.\nlocal function reverse_Array_Upto_K(input, k)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_Array_Upto_K\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 4), {4, 3, 2, 1, 5, 6})\n    lu.assertEquals(candidate({4, 5, 6, 7}, 2), {5, 4, 6, 7})\n    lu.assertEquals(candidate({9, 8, 7, 6, 5}, 3), {7, 8, 9, 6, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "-- Write a function to add a table to the table. The output should be a table.\nlocal function add_dict_to_tuple(test_tup, test_dict)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_dict_to_tuple\n    lu.assertEquals(candidate({4, 5, 6}, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}), {4, 5, 6, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}})\n    lu.assertEquals(candidate({1, 2, 3}, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}), {1, 2, 3, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}})\n    lu.assertEquals(candidate({8, 9, 10}, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}), {8, 9, 10, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "-- Given a square matrix of size N*N given as a table of tables, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_722_filter_data", "prompt": "-- The input is given as - a table with a student name as a key and a table of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "-- The input is defined as two tables of the same length. Write a function to count indices where the tables have the same values.\nlocal function count_same_pair(nums1, nums2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_same_pair\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}), 4)\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 11)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 1)\n    lu.assertEquals(candidate({0, 1, 1, 2}, {0, 1, 2, 2}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "-- Write a function to extract values between quotation marks \" \" of the given string.\nlocal function extract_quotation(text1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_quotation\n    lu.assertEquals(candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'), {'A53', 'multi', 'Processor'})\n    lu.assertEquals(candidate('Cast your \"favorite\" entertainment \"apps\"'), {'favorite', 'apps'})\n    lu.assertEquals(candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support'), {'4k Ultra HD', 'HDR 10'})\n    lu.assertEquals(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "-- Write a function that takes as input a table of numbers (t_1,...,t_{N+1}) and returns a table of length N where the i-th element of the table is equal to t_i * t_{i+1}.\nlocal function multiply_elements(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_elements\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {5, 35, 56, 80})\n    lu.assertEquals(candidate({2, 4, 5, 6, 7}), {8, 20, 30, 42})\n    lu.assertEquals(candidate({12, 13, 14, 9, 15}), {156, 182, 126, 135})\n    lu.assertEquals(candidate({12}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_728_sum_list", "prompt": "-- Write a function takes as input two tables [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nlocal function sum_list(lst1, lst2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_list\n    lu.assertEquals(candidate({10, 20, 30}, {15, 25, 35}), {25, 45, 65})\n    lu.assertEquals(candidate({1, 2, 3}, {5, 6, 7}), {6, 8, 10})\n    lu.assertEquals(candidate({15, 20, 30}, {15, 45, 75}), {30, 65, 105})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "-- Write a function to remove consecutive duplicates of a given table.\nlocal function consecutive_duplicates(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {10, 15, 19, 18, 17, 26, 17, 18, 10})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {'a', 'b', 'c', 'd'})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'}), {'a', 'b', 'c', 'd', 'a'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "-- Write a function to find the lateral surface area of a cone given radius r and the height h.\nlocal function lateralsurface_cone(r, h)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lateralsurface_cone\n    lu.assertEquals(candidate(5, 12), 204.20352248333654)\n    lu.assertEquals(candidate(10, 15), 566.3586699569488)\n    lu.assertEquals(candidate(19, 17), 1521.8090132193388)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "-- Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nlocal function replace_specialchar(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_specialchar\n    lu.assertEquals(candidate('Python language, Programming language.'), 'Python:language::Programming:language:')\n    lu.assertEquals(candidate('a b c,d e f'), 'a:b:c:d:e:f')\n    lu.assertEquals(candidate('ram reshma,ram rahim'), 'ram:reshma:ram:rahim')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "-- Write a lua function to find sum of products of all possible subtables of a given table. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subtables/\nlocal function sum_Of_Subarray_Prod(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_Of_Subarray_Prod\n    lu.assertEquals(candidate({1, 2, 3}), 20)\n    lu.assertEquals(candidate({1, 2}), 5)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "-- Write a lua function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlocal function toggle_middle_bits(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_middle_bits\n    lu.assertEquals(candidate(9), 15)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(11), 13)\n    lu.assertEquals(candidate(65), 127)\n    lu.assertEquals(candidate(77), 115)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_736_left_insertion", "prompt": "-- Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/lua-exercises/data-structures-and-algorithms/lua-data-structure-exercise-24.php\nlocal function left_insertion(a, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_737_check_str", "prompt": "-- Write a function to check whether the given string is starting with a vowel or not using regex.\nlocal function check_str(string)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_str\n    lu.assertEquals(candidate('annie'), true)\n    lu.assertEquals(candidate('dawood'), false)\n    lu.assertEquals(candidate('Else'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "-- Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/lua-exercises/data-structures-and-algorithms/lua-recursion-exercise-9.php\nlocal function geometric_sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = geometric_sum\n    lu.assertEquals(candidate(7), 1.9921875)\n    lu.assertEquals(candidate(4), 1.9375)\n    lu.assertEquals(candidate(8), 1.99609375)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_739_find_Index", "prompt": "-- Write a lua function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlocal function find_Index(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Index\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 14)\n    lu.assertEquals(candidate(4), 45)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/lua-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "-- Write a lua function to check whether all the characters are same or not.\nlocal function all_Characters_Same(s)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_Characters_Same\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('aaa'), true)\n    lu.assertEquals(candidate('data'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "-- Write a function to caluclate the area of a tetrahedron.\nlocal function area_tetrahedron(side)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = area_tetrahedron\n    lu.assertEquals(candidate(3), 15.588457268119894)\n    lu.assertEquals(candidate(20), 692.8203230275509)\n    lu.assertEquals(candidate(10), 173.20508075688772)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_743_rotate_right", "prompt": "-- Write a function to rotate a given table by specified number of items to the right direction. https://www.geeksforgeeks.org/lua-program-right-rotate-table-n/\nlocal function rotate_right(list, m)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rotate_right\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), {8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {9, 10, 1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), {6, 7, 8, 9, 10, 1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_744_check_none", "prompt": "-- Write a function to check if the given table has any none value or not.\nlocal function check_none(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_none\n    lu.assertEquals(candidate({10, 4, 5, 6, None}), true)\n    lu.assertEquals(candidate({7, 8, 9, 11, 14}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, None}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/lua-exercises/lambda/lua-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_746_sector_area", "prompt": "-- Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.\nlocal function sector_area(r, a)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sector_area\n    lu.assertEquals(candidate(4, 45), 6.283185307179586)\n    lu.assertEquals(candidate(9, 45), 31.808625617596654)\n    lu.assertEquals(candidate(9, 361), None)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "-- Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nlocal function lcs_of_three(X, Y, Z)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lcs_of_three\n    lu.assertEquals(candidate('AGGT12', '12TXAYB', '12XBA'), 2)\n    lu.assertEquals(candidate('Reels', 'Reelsfor', 'ReelsforReels'), 5)\n    lu.assertEquals(candidate('abcd1e2', 'bc12ea', 'bd1ea'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "-- Write a function to put spaces between words starting with capital letters in a given string.\nlocal function capital_words_spaces(str1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = capital_words_spaces\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('PythonProgrammingExamples'), 'Python Programming Examples')\n    lu.assertEquals(candidate('GetReadyToBeCodingFreak'), 'Get Ready To Be Coding Freak')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/lua-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_750_add_tuple", "prompt": "-- Write a function to add the given table to the given table.\nlocal function add_tuple(test_list, test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_tuple\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {5, 6, 7, 9, 10})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {6, 7, 8, 10, 11})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {7, 8, 9, 11, 12})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "-- Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nlocal function jacobsthal_num(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = jacobsthal_num\n    lu.assertEquals(candidate(5), 11)\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(4), 5)\n    lu.assertEquals(candidate(13), 2731)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_753_min_k", "prompt": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/lua-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_755_second_smallest", "prompt": "-- Write a function to find the second smallest number in a table.\nlocal function second_smallest(numbers)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = second_smallest\n    lu.assertEquals(candidate({1, 2, -8, -2, 0, -2}), -2)\n    lu.assertEquals(candidate({1, 1, -0.5, 0, 2, -2, -2}), -0.5)\n    lu.assertEquals(candidate({2, 2}), None)\n    lu.assertEquals(candidate({2, 2, 2}), None)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "-- Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/lua-exercises/re/lua-re-exercise-3.php\nlocal function text_match_zero_one(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_zero_one\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('dsabbbba'), true)\n    lu.assertEquals(candidate('asbbbba'), false)\n    lu.assertEquals(candidate('abaaa'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "-- Write a function to count the pairs of reverse strings in the given string table. https://www.geeksforgeeks.org/lua-program-to-count-the-pairs-of-reverse-strings/\nlocal function count_reverse_pairs(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_reverse_pairs\n    lu.assertEquals(candidate({'julia', 'best', 'tseb', 'for', 'ailuj'}), 2)\n    lu.assertEquals(candidate({'geeks', 'best', 'for', 'skeeg'}), 1)\n    lu.assertEquals(candidate({'makes', 'best', 'sekam', 'for', 'rof'}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_759_is_decimal", "prompt": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_760_unique_Element", "prompt": "-- Write a lua function to check whether a table of numbers contains only one distinct element or not.\nlocal function unique_Element(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_Element\n    lu.assertEquals(candidate({1, 1, 1}), true)\n    lu.assertEquals(candidate({1, 2, 1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "-- Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nlocal function check_monthnumber_number(monthnum3)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_monthnumber_number\n    lu.assertEquals(candidate(6), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(12), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "-- Write a lua function to find the minimum difference between any two elements in a given table. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nlocal function find_min_diff(arr, n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_min_diff\n    lu.assertEquals(candidate({1, 5, 3, 19, 18, 25}, 6), 1)\n    lu.assertEquals(candidate({4, 3, 2, 6}, 4), 1)\n    lu.assertEquals(candidate({30, 5, 20, 9}, 4), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_764_number_ctr", "prompt": "-- Write a lua function to count number of digits in a given string.\nlocal function number_ctr(str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = number_ctr\n    lu.assertEquals(candidate('program2bedone'), 1)\n    lu.assertEquals(candidate('3wonders'), 1)\n    lu.assertEquals(candidate('123'), 3)\n    lu.assertEquals(candidate('3wond-1ers2'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_765_is_polite", "prompt": "-- Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nlocal function is_polite(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_polite\n    lu.assertEquals(candidate(7), 11)\n    lu.assertEquals(candidate(4), 7)\n    lu.assertEquals(candidate(9), 13)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_766_pair_wise", "prompt": "-- Write a function to return a table of all pairs of consecutive items in a given table.\nlocal function pair_wise(l1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pair_wise\n    lu.assertEquals(candidate({1, 1, 2, 3, 3, 4, 4, 5}), {{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), {{1, 5}, {5, 7}, {7, 9}, {9, 10}})\n    lu.assertEquals(candidate({5, 1, 9, 7, 10}), {{5, 1}, {1, 9}, {9, 7}, {7, 10}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "-- Write a lua function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a table of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_769_Diff", "prompt": "-- Write a lua function to get the difference between two tables.\nlocal function Diff(li1, li2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Diff\n    lu.assertEquals(candidate({10, 15, 20, 25, 30, 35, 40}, {25, 40, 35}), {10, 20, 30, 15})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 1}), {2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3}, {6, 7, 1}), {2, 3, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "-- Write a lua function to find the sum of fourth power of first n odd natural numbers.\nlocal function odd_num_sum(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_num_sum\n    lu.assertEquals(candidate(2), 82)\n    lu.assertEquals(candidate(3), 707)\n    lu.assertEquals(candidate(4), 3108)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_771_check_expression", "prompt": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_772_remove_length", "prompt": "-- Write a function to remove all the words with k length in the given string.\nlocal function remove_length(test_str, K)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_length\n    lu.assertEquals(candidate('The person is most value tet', 3), 'person is most value')\n    lu.assertEquals(candidate('If you told me about this ok', 4), 'If you me about ok')\n    lu.assertEquals(candidate('Forces of darkeness is come into the play', 4), 'Forces of darkeness is the')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "-- Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\nlocal function occurance_substring(text, pattern)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = occurance_substring\n    lu.assertEquals(candidate('python programming, python language', 'python'), {'python', 0, 6})\n    lu.assertEquals(candidate('python programming,programming language', 'programming'), {'programming', 7, 18})\n    lu.assertEquals(candidate('python programming,programming language', 'language'), {'language', 31, 39})\n    lu.assertEquals(candidate('c++ programming, c++ language', 'python'), None)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_775_odd_position", "prompt": "-- Write a lua function to check whether every odd index contains odd numbers of a given table.\nlocal function odd_position(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_position\n    lu.assertEquals(candidate({2, 1, 4, 3, 6, 7, 6, 3}), true)\n    lu.assertEquals(candidate({4, 1, 2}), true)\n    lu.assertEquals(candidate({1, 2, 3}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_776_count_vowels", "prompt": "-- Write a function to count those characters which have vowels as their neighbors in the given string.\nlocal function count_vowels(test_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_vowels\n    lu.assertEquals(candidate('bestinstareels'), 7)\n    lu.assertEquals(candidate('partofthejourneyistheend'), 12)\n    lu.assertEquals(candidate('amazonprime'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_777_find_sum", "prompt": "-- Write a lua function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "-- Write a function to pack consecutive duplicates of a given table elements into subtables.\nlocal function pack_consecutive_duplicates(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pack_consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {{0, 0}, {1}, {2}, {3}, {4, 4}, {5}, {6, 6, 6}, {7}, {8}, {9}, {4, 4}})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {{10, 10}, {15}, {19}, {18, 18}, {17}, {26, 26}, {17}, {18}, {10}})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {{'a', 'a'}, {'b'}, {'c'}, {'d', 'd'}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_780_find_combinations", "prompt": "-- Write a function to find the combinations of sums with tables in the given table table. https://www.geeksforgeeks.org/lua-combinations-of-sum-with-tables-in-table-table/\nlocal function find_combinations(test_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_combinations\n    lu.assertEquals(candidate({{2, 4}, {6, 7}, {5, 1}, {6, 10}}), {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}})\n    lu.assertEquals(candidate({{3, 5}, {7, 8}, {6, 2}, {7, 11}}), {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}})\n    lu.assertEquals(candidate({{4, 6}, {8, 9}, {7, 3}, {8, 12}}), {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_781_count_divisors", "prompt": "-- Write a lua function to check whether the count of divisors is even. https://www.w3resource.com/lua-exercises/basic/lua-basic-1-exercise-24.php\nlocal function count_divisors(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_divisors\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(100), false)\n    lu.assertEquals(candidate(125), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "-- Write a lua function to find the sum of all odd length subtables. https://www.geeksforgeeks.org/sum-of-all-odd-length-subtables/\nlocal function odd_length_sum(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_length_sum\n    lu.assertEquals(candidate({1, 2, 4}), 14)\n    lu.assertEquals(candidate({1, 2, 1, 2}), 15)\n    lu.assertEquals(candidate({1, 7}), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "-- Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nlocal function rgb_to_hsv(r, g, b)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rgb_to_hsv\n    lu.assertEquals(candidate(255, 255, 255), {0.0, 0.0, 100.0})\n    lu.assertEquals(candidate(0, 215, 0), {120.0, 100.0, 84.31372549019608})\n    lu.assertEquals(candidate(10, 215, 110), {149.26829268292684, 95.34883720930233, 84.31372549019608})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "-- Write a function to find the product of first even and odd number of a given table.\nlocal function mul_even_odd(list1)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mul_even_odd\n    lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "-- Write a function to convert table string to integer table.\nlocal function tuple_str_int(test_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_str_int\n    lu.assertEquals(candidate('(7, 8, 9)'), {7, 8, 9})\n    lu.assertEquals(candidate('(1, 2, 3)'), {1, 2, 3})\n    lu.assertEquals(candidate('(4, 5, 6)'), {4, 5, 6})\n    lu.assertEquals(candidate('(7, 81, 19)'), {7, 81, 19})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_786_right_insertion", "prompt": "-- Write a function to locate the right insertion point for a specified value in sorted order.\nlocal function right_insertion(a, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_787_text_match_three", "prompt": "-- Write a function that matches a string that has an a followed by three 'b'.\nlocal function text_match_three(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('caacabbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_788_new_tuple", "prompt": "-- Write a function to create a new table from the given string and table.\nlocal function new_tuple(test_list, test_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = new_tuple\n    lu.assertEquals(candidate({'WEB', 'is'}, 'best'), {'WEB', 'is', 'best'})\n    lu.assertEquals(candidate({'We', 'are'}, 'Developers'), {'We', 'are', 'Developers'})\n    lu.assertEquals(candidate({'Part', 'is'}, 'Wrong'), {'Part', 'is', 'Wrong'})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_790_even_position", "prompt": "-- Write a lua function to check whether every even index contains even numbers of a given table.\nlocal function even_position(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_position\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3}), false)\n    lu.assertEquals(candidate({2, 1, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_791_remove_nested", "prompt": "-- Write a function to remove tables from the given table.\nlocal function remove_nested(test_tup)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_nested\n    lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), {1, 5, 7, 10})\n    lu.assertEquals(candidate({2, 6, 8, {5, 7}, 11}), {2, 6, 8, 11})\n    lu.assertEquals(candidate({3, 7, 9, {6, 8}, 12}), {3, 7, 9, 12})\n    lu.assertEquals(candidate({3, 7, 9, {6, 8}, {5, 12}, 12}), {3, 7, 9, 12})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_792_count_list", "prompt": "-- Write a lua function to count the number of tables in a given number of tables.\nlocal function count_list(input_list)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_list\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), 4)\n    lu.assertEquals(candidate({{1, 2}, {2, 3}, {4, 5}}), 3)\n    lu.assertEquals(candidate({{1, 0}, {2, 0}}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_793_last", "prompt": "-- Write a lua function to find the last position of an element in a sorted table.\nlocal function last(arr, x)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last\n    lu.assertEquals(candidate({1, 2, 3}, 1), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, 4}, 1), 2)\n    lu.assertEquals(candidate({2, 3, 2, 3, 6, 8, 9}, 3), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "-- Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nlocal function text_starta_endb(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_starta_endb\n    lu.assertEquals(candidate('aabbbb'), true)\n    lu.assertEquals(candidate('aabAbbbc'), false)\n    lu.assertEquals(candidate('accddbbjjj'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_796_return_sum", "prompt": "-- Write function to find the sum of all items in the given table.\nlocal function return_sum(dict)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = return_sum\n    lu.assertEquals(candidate({['a'] = 100, ['b'] = 200, ['c'] = 300}), 600)\n    lu.assertEquals(candidate({['a'] = 25, ['b'] = 18, ['c'] = 45}), 88)\n    lu.assertEquals(candidate({['a'] = 36, ['b'] = 39, ['c'] = 49}), 124)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "-- Write a lua function to find the sum of all odd natural numbers within the range l and r.\nlocal function sum_in_range(l, r)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_in_range\n    lu.assertEquals(candidate(2, 5), 8)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7, 13), 40)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_798__sum", "prompt": "-- Write a lua function to find the sum of a table.\nlocal function _sum(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = _sum\n    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({15, 12, 13, 10}), 50)\n    lu.assertEquals(candidate({0, 1, 2}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_799_left_rotate", "prompt": "-- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_rotate\n    lu.assertEquals(candidate(16, 2), 64)\n    lu.assertEquals(candidate(10, 2), 40)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(1, 3), 8)\n    lu.assertEquals(candidate(5, 3), 40)\n    lu.assertEquals(candidate(29, 3), 232)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "-- Write a function to remove all whitespaces from a string.\nlocal function remove_all_spaces(text)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_all_spaces\n    lu.assertEquals(candidate('python  program'), 'pythonprogram')\n    lu.assertEquals(candidate('python   programming    language'), 'pythonprogramminglanguage')\n    lu.assertEquals(candidate('python                     program'), 'pythonprogram')\n    lu.assertEquals(candidate('   python                     program'), 'pythonprogram')\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "-- Write a lua function to count the number of equal numbers from three given integers.\nlocal function test_three_equal(x, y, z)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = test_three_equal\n    lu.assertEquals(candidate(1, 1, 1), 3)\n    lu.assertEquals(candidate(-1, -2, -3), 0)\n    lu.assertEquals(candidate(1, 2, 2), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_802_count_rotation", "prompt": "-- Write a lua function to count the number of rotations required to generate a sorted table. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-table/\nlocal function count_rotation(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_rotation\n    lu.assertEquals(candidate({3, 2, 1}), 1)\n    lu.assertEquals(candidate({4, 5, 1, 2, 3}), 2)\n    lu.assertEquals(candidate({7, 8, 9, 1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 2, 3}), 0)\n    lu.assertEquals(candidate({1, 3, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "-- Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nlocal function is_perfect_square(n)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_perfect_square\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(36), true)\n    lu.assertEquals(candidate(14), false)\n    lu.assertEquals(candidate(196), true)\n    lu.assertEquals(candidate(125), false)\n    lu.assertEquals(candidate(15625), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_804_is_product_even", "prompt": "-- Write a function to check whether the product of numbers in a table is even or not.\nlocal function is_product_even(arr)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_product_even\n    lu.assertEquals(candidate({1, 2, 3}), true)\n    lu.assertEquals(candidate({1, 2, 1, 4}), true)\n    lu.assertEquals(candidate({1, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "-- Write a function that returns the table in a table of tables whose sum of elements is the highest.\nlocal function max_sum_list(lists)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_list\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {10, 11, 12})\n    lu.assertEquals(candidate({{3, 2, 1}, {6, 5, 4}, {12, 11, 10}}), {12, 11, 10})\n    lu.assertEquals(candidate({{2, 3, 1}}), {2, 3, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_807_first_odd", "prompt": "-- Write a lua function to find the first odd number in a given table of numbers.\nlocal function first_odd(nums)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_odd\n    lu.assertEquals(candidate({1, 3, 5}), 1)\n    lu.assertEquals(candidate({2, 4, 1, 3}), 1)\n    lu.assertEquals(candidate({8, 9, 1}), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_808_check_K", "prompt": "-- Write a function to check if the given tables contain the k or not.\nlocal function check_K(test_tup, K)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_K\n    lu.assertEquals(candidate({10, 4, 5, 6, 8}, 6), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 7), false)\n    lu.assertEquals(candidate({7, 8, 9, 44, 11, 12}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}, {"task_id": "mbpp_809_check_smaller", "prompt": "-- Write a function to check if each element of second table is smaller than its corresponding element in the first table.\nlocal function check_smaller(test_tup1, test_tup2)\n", "test": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_smaller\n    lu.assertEquals(candidate({1, 2, 3}, {2, 3, 4}), false)\n    lu.assertEquals(candidate({4, 5, 6}, {3, 4, 5}), true)\n    lu.assertEquals(candidate({11, 12, 13}, {10, 11, 12}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "language": "lua"}]