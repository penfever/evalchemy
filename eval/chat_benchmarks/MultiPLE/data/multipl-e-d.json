[{"task_id": "HumanEval_0_has_close_elements", "prompt": "import std.math;\n/*\n Check if in given array of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nfalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\ntrue\n*/\nbool has_close_elements(float[] numbers, float threshold) \n", "test": "unittest\n{\n    alias candidate = has_close_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true);\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the array of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]\n*/\nstring[] separate_paren_groups(string paren_string) \n", "test": "unittest\n{\n    alias candidate = separate_paren_groups;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n    assert(candidate(\"(()(())((())))\") == [\"(()(())((())))\"]);\n    assert(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\nfloat truncate_number(float number) \n", "test": "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_3_below_zero", "prompt": "import std.math;\nimport std.typecons;\n/*\n You're given an array of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero([1L, 2L, 3L])\nfalse\n>>> below_zero([1L, 2L, -4L, 5L])\ntrue\n*/\nbool below_zero(long[] operations) \n", "test": "unittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n*/\nfloat mean_absolute_deviation(float[] numbers) \n", "test": "unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_5_intersperse", "prompt": "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n>>> intersperse([], 4L)\n[]\n>>> intersperse([1L, 2L, 3L], 4L)\n[1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n", "test": "unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n[2L, 3L, 1L, 3L]\n*/\nlong[] parse_nested_parens(string paren_string) \n", "test": "unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings only for ones that contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring(string[] strings, string substring) \n", "test": "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_8_sum_product", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given array of integers, return a tuple consisting of a sum and a product of all the integers in an array.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\ntuple(0L, 1L)\n>>> sum_product([1L, 2L, 3L, 4L])\ntuple(10L, 24L)\n*/\nTuple!(long, long) sum_product(long[] numbers) \n", "test": "unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "import std.math;\nimport std.typecons;\n/*\n From a given array of integers, generate an array of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1L, 2L, 3L, 2L, 3L, 4L, 2L])\n[1L, 2L, 3L, 3L, 3L, 4L, 4L]\n*/\nlong[] rolling_max(long[] numbers) \n", "test": "unittest\n{\n    alias candidate = rolling_max;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 1L]) == [4L, 4L, 4L, 4L]);\n    assert(candidate([3L, 2L, 3L, 100L, 3L]) == [3L, 3L, 3L, 100L, 100L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "import std.math;\nimport std.typecons;\n/*\n Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"\n*/\nstring make_palindrome(string string) \n", "test": "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_11_string_xor", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\nstring string_xor(string a, string b) \n", "test": "unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_12_longest", "prompt": "import std.math;\nimport std.typecons;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return null in case the input array is empty.\n>>> longest([])\nNone\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\n*/\nNullable!(string) longest(string[] strings) \n", "test": "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3L, 5L)\n1L\n>>> greatest_common_divisor(25L, 15L)\n5L\n*/\nlong greatest_common_divisor(long a, long b) \n", "test": "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]\n*/\nstring[] all_prefixes(string string) \n", "test": "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0L)\n\"0\"\n>>> string_sequence(5L)\n\"0 1 2 3 4 5\"\n*/\nstring string_sequence(long n) \n", "test": "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3L\n>>> count_distinct_characters(\"Jerry\")\n4L\n*/\nlong count_distinct_characters(string string) \n", "test": "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_17_parse_music", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return array of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n[4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nlong[] parse_music(string music_string) \n", "test": "unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "import std.math;\nimport std.typecons;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0L\n>>> how_many_times(\"aaa\", \"a\")\n3L\n>>> how_many_times(\"aaaa\", \"aa\")\n3L\n*/\nlong how_many_times(string string, string substring) \n", "test": "unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers(\"three one five\")\n\"one three five\"\n*/\nstring sort_numbers(string numbers) \n", "test": "unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\n From a supplied array of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\ntuple(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\ntuple(2.0, 2.0)\n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n", "test": "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "import std.math;\nimport std.typecons;\n/*\n Given array of numbers (of at least two elements), apply a linear transform to that array,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n*/\nfloat[] rescale_to_unit(float[] numbers) \n", "test": "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_23_strlen", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return length of given string\n>>> strlen(\"\")\n0L\n>>> strlen(\"abc\")\n3L\n*/\nlong strlen(string string) \n", "test": "unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15L)\n5L\n*/\nlong largest_divisor(long n) \n", "test": "unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_25_factorize", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8L)\n[2L, 2L, 2L]\n>>> factorize(25L)\n[5L, 5L]\n>>> factorize(70L)\n[2L, 5L, 7L]\n*/\nlong[] factorize(long n) \n", "test": "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "import std.math;\nimport std.typecons;\n/*\n From an array of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n[1L, 3L, 4L]\n*/\nlong[] remove_duplicates(long[] numbers) \n", "test": "unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_27_flip_case", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\nstring flip_case(string string) \n", "test": "unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_28_concatenate", "prompt": "import std.math;\nimport std.typecons;\n/*\n Concatenate array of strings into a single string\n>>> concatenate([])\n\"\"\n>>> concatenate([\"a\", \"b\", \"c\"])\n\"abc\"\n*/\nstring concatenate(string[] strings) \n", "test": "unittest\n{\n    alias candidate = concatenate;\n\n    assert(candidate([]) == \"\");\n    assert(candidate([\"x\", \"y\", \"z\"]) == \"xyz\");\n    assert(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], \"a\")\n[]\n>>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n", "test": "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_30_get_positive", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn only positive numbers in the array.\n>>> get_positive([-1L, 2L, -4L, 5L, 6L])\n[2L, 5L, 6L]\n>>> get_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n[5L, 3L, 2L, 3L, 9L, 123L, 1L]\n*/\nlong[] get_positive(long[] l) \n", "test": "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_31_is_prime", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6L)\nfalse\n>>> is_prime(101L)\ntrue\n>>> is_prime(11L)\ntrue\n>>> is_prime(13441L)\ntrue\n>>> is_prime(61L)\ntrue\n>>> is_prime(4L)\nfalse\n>>> is_prime(1L)\nfalse\n*/\nbool is_prime(long n) \n", "test": "unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_33_sort_third", "prompt": "import std.math;\nimport std.typecons;\n/*\nThis function takes an array l and returns an array l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1L, 2L, 3L])\n[1L, 2L, 3L]\n>>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n[2L, 6L, 3L, 4L, 8L, 9L, 5L]\n*/\nlong[] sort_third(long[] l) \n", "test": "unittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_34_unique", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements in an array\n>>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[0L, 2L, 3L, 5L, 9L, 123L]\n*/\nlong[] unique(long[] l) \n", "test": "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_35_max_element", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn maximum element in the array.\n>>> max_element([1L, 2L, 3L])\n3L\n>>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n123L\n*/\nlong max_element(long[] l) \n", "test": "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50L)\n0L\n>>> fizz_buzz(78L)\n2L\n>>> fizz_buzz(79L)\n3L\n*/\nlong fizz_buzz(long n) \n", "test": "unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_37_sort_even", "prompt": "import std.math;\nimport std.typecons;\n/*\nThis function takes an array l and returns an array l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1L, 2L, 3L])\n[1L, 2L, 3L]\n>>> sort_even([5L, 6L, 3L, 4L])\n[3L, 6L, 5L, 4L]\n*/\nlong[] sort_even(long[] l) \n", "test": "unittest\n{\n    alias candidate = sort_even;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [-10L, 3L, -5L, 2L, -3L, 3L, 5L, 0L, 9L, 1L, 123L]);\n    assert(candidate([5L, 8L, -12L, 4L, 23L, 2L, 3L, 11L, 12L, -10L]) == [-12L, 8L, 3L, 4L, 5L, 2L, 12L, 11L, 23L, -10L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "import std.math;\nimport std.typecons;\n/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1L)\n2L\n>>> prime_fib(2L)\n3L\n>>> prime_fib(3L)\n5L\n>>> prime_fib(4L)\n13L\n>>> prime_fib(5L)\n89L\n*/\nlong prime_fib(long n) \n", "test": "unittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L) == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L) == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "import std.math;\nimport std.typecons;\n/*\ntriples_sum_to_zero takes an array of integers as an input.\nit returns true if there are three distinct elements in the array that\nsum to zero, and false otherwise.\n>>> triples_sum_to_zero([1L, 3L, 5L, 0L])\nfalse\n>>> triples_sum_to_zero([1L, 3L, -2L, 1L])\ntrue\n>>> triples_sum_to_zero([1L, 2L, 3L, 7L])\nfalse\n>>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\ntrue\n>>> triples_sum_to_zero([1L])\nfalse\n*/\nbool triples_sum_to_zero(long[] l) \n", "test": "unittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "import std.math;\nimport std.typecons;\n/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.\n*/\nlong car_race_collision(long n) \n", "test": "unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_42_incr_list", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn array with elements incremented by 1.\n>>> incr_list([1L, 2L, 3L])\n[2L, 3L, 4L]\n>>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list(long[] l) \n", "test": "unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "import std.math;\nimport std.typecons;\n/*\npairs_sum_to_zero takes an array of integers as an input.\nit returns true if there are two distinct elements in the array that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\nfalse\n>>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\nfalse\n>>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\nfalse\n>>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\ntrue\n>>> pairs_sum_to_zero([1L])\nfalse\n*/\nbool pairs_sum_to_zero(long[] l) \n", "test": "unittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_44_change_base", "prompt": "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8L, 3L)\n\"22\"\n>>> change_base(8L, 2L)\n\"1000\"\n>>> change_base(7L, 2L)\n\"111\"\n*/\nstring change_base(long x, long base) \n", "test": "unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5L, 3L)\n7.5\n*/\nfloat triangle_area(long a, long h) \n", "test": "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L, 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L, 8L) == 40.0);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_46_fib4", "prompt": "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5L)\n4L\n>>> fib4(6L)\n8L\n>>> fib4(7L)\n14L\n*/\nlong fib4(long n) \n", "test": "unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_47_median", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn median of elements in the array l.\n>>> median([3L, 1L, 2L, 4L, 5L])\n3L\n>>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n15.0\n*/\nfloat median(long[] l) \n", "test": "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "import std.math;\nimport std.typecons;\n/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\nbool is_palindrome(string text) \n", "test": "unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_49_modp", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3L, 5L)\n3L\n>>> modp(1101L, 101L)\n2L\n>>> modp(0L, 101L)\n1L\n>>> modp(3L, 11L)\n8L\n>>> modp(100L, 101L)\n1L\n*/\nlong modp(long n, long p) \n", "test": "unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "import std.math;\nimport std.typecons;\n/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\nstring remove_vowels(string text) \n", "test": "unittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\") == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers in the array l are below threshold t.\n>>> below_threshold([1L, 2L, 4L, 10L], 100L)\ntrue\n>>> below_threshold([1L, 20L, 4L, 10L], 5L)\nfalse\n*/\nbool below_threshold(long[] l, long t) \n", "test": "unittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_53_add", "prompt": "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n>>> add(2L, 3L)\n5L\n>>> add(5L, 7L)\n12L\n*/\nlong add(long x, long y) \n", "test": "unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_54_same_chars", "prompt": "import std.math;\nimport std.typecons;\n/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\nbool same_chars(string s0, string s1) \n", "test": "unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_55_fib", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn n-th Fibonacci number.\n>>> fib(10L)\n55L\n>>> fib(1L)\n1L\n>>> fib(8L)\n21L\n*/\nlong fib(long n) \n", "test": "unittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\" and \">\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\nbool correct_bracketing(string brackets) \n", "test": "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_57_monotonic", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements are monotonically increasing or decreasing.\n>>> monotonic([1L, 2L, 4L, 20L])\ntrue\n>>> monotonic([1L, 20L, 4L, 10L])\nfalse\n>>> monotonic([4L, 1L, 0L, -10L])\ntrue\n*/\nbool monotonic(long[] l) \n", "test": "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_58_common", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common elements for two arrays.\n>>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n[1L, 5L, 653L]\n>>> common([5L, 3L, 2L, 8L], [3L, 2L])\n[2L, 3L]\n*/\nlong[] common(long[] l1, long[] l2) \n", "test": "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195L)\n29L\n>>> largest_prime_factor(2048L)\n2L\n*/\nlong largest_prime_factor(long n) \n", "test": "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "import std.math;\nimport std.typecons;\n/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30L)\n465L\n>>> sum_to_n(100L)\n5050L\n>>> sum_to_n(5L)\n15L\n>>> sum_to_n(10L)\n55L\n>>> sum_to_n(1L)\n1L\n*/\nlong sum_to_n(long n) \n", "test": "unittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"(\" and \")\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\nbool correct_bracketing(string brackets) \n", "test": "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_62_derivative", "prompt": "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3L, 1L, 2L, 4L, 5L])\n[1L, 4L, 12L, 20L]\n>>> derivative([1L, 2L, 3L])\n[2L, 6L]\n*/\nlong[] derivative(long[] xs) \n", "test": "unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_63_fibfib", "prompt": "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1L)\n0L\n>>> fibfib(5L)\n4L\n>>> fibfib(8L)\n24L\n*/\nlong fibfib(long n) \n", "test": "unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2L\n>>> vowels_count(\"ACEDY\")\n3L\n*/\nlong vowels_count(string s) \n", "test": "unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12L, 1L)\n\"21\"\n>>> circular_shift(12L, 2L)\n\"12\"\n*/\nstring circular_shift(long x, long shift) \n", "test": "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_66_digitSum", "prompt": "import std.math;\nimport std.typecons;\n/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n>>> digitSum(\"\")\n0L\n>>> digitSum(\"abAB\")\n131L\n>>> digitSum(\"abcCd\")\n67L\n>>> digitSum(\"helloE\")\n69L\n>>> digitSum(\"woArBld\")\n131L\n>>> digitSum(\"aAaaaXa\")\n153L\n*/\nlong digitSum(string s) \n", "test": "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\") == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\") == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\" How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "import std.math;\nimport std.typecons;\n/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\n>>> fruit_distribution(\"5 apples and 6 oranges\", 19L)\n8L\n>>> fruit_distribution(\"0 apples and 1 oranges\", 3L)\n2L\n>>> fruit_distribution(\"2 apples and 3 oranges\", 100L)\n95L\n>>> fruit_distribution(\"100 apples and 1 oranges\", 120L)\n19L\n*/\nlong fruit_distribution(string s, long n) \n", "test": "unittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_68_pluck", "prompt": "import std.math;\nimport std.typecons;\n/*\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in an array, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nExample 1:\n>>> pluck([4L, 2L, 3L])\n[2L, 1L]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\n>>> pluck([1L, 2L, 3L])\n[2L, 1L]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>> pluck([])\n[]\nExample 4:\n>>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n[0L, 1L]\nExplanation: 0 is the smallest value, but  there are two zeros,\n             so we will choose the first zero, which has the smallest index.\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\nlong[] pluck(long[] arr) \n", "test": "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_69_search", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a non-empty array of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the array.\nIf no such a value exist, return -1.\nExamples:\n>>> search([4L, 1L, 2L, 2L, 3L, 1L])\n2L\n>>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n3L\n>>> search([5L, 5L, 4L, 4L, 4L])\n-1L\n*/\nlong search(long[] lst) \n", "test": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L, 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L, 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L, 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L, 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven array of integers, return array in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list([1L, 2L, 3L, 4L])\n[1L, 4L, 2L, 3L]\n>>> strange_sort_list([5L, 5L, 5L, 5L])\n[5L, 5L, 5L, 5L]\n>>> strange_sort_list([])\n[]\n*/\nlong[] strange_sort_list(long[] lst) \n", "test": "unittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\n>>> triangle_area(3L, 4L, 5L)\n6.0\n>>> triangle_area(1L, 2L, 10L)\n-1L\n*/\nfloat triangle_area(long a, long b, long c) \n", "test": "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n>>> will_it_fly([1L, 2L], 5L)\nfalse\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n>>> will_it_fly([3L, 2L, 3L], 1L)\nfalse\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n>>> will_it_fly([3L, 2L, 3L], 9L)\ntrue\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n>>> will_it_fly([3L], 5L)\ntrue\n# 3 is less than the maximum possible weight, and it's balanced.\n*/\nbool will_it_fly(long[] q, long w) \n", "test": "unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n>>> smallest_change([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L])\n4L\n>>> smallest_change([1L, 2L, 3L, 4L, 3L, 2L, 2L])\n1L\n>>> smallest_change([1L, 2L, 3L, 2L, 1L])\n0L\n*/\nlong smallest_change(long[] arr) \n", "test": "unittest\n{\n    alias candidate = smallest_change;\n\n    assert(candidate([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 3L, 2L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 2L, 3L, 2L, 1L]) == 0L);\n    assert(candidate([3L, 1L, 1L, 3L]) == 0L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([0L, 1L]) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_74_total_match", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts two arrays of strings and returns the array that has \ntotal number of chars in the all strings of the array less than the other array.\nif the two arrays have the same number of chars, return the first array.\nExamples\n>>> total_match([], [])\n[]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n[\"hI\", \"Hi\"]\n>>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n[\"hi\", \"admin\"]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n[\"hI\", \"hi\", \"hi\"]\n>>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n[\"4\"]\n*/\nstring[] total_match(string[] lst1, string[] lst2) \n", "test": "unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\n>>> is_multiply_prime(30L)\ntrue\n30 = 2 * 3 * 5\n*/\nbool is_multiply_prime(long a) \n", "test": "unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\n>>> is_simple_power(1L, 4L)\ntrue\n>>> is_simple_power(2L, 2L)\ntrue\n>>> is_simple_power(8L, 2L)\ntrue\n>>> is_simple_power(3L, 2L)\nfalse\n>>> is_simple_power(3L, 1L)\nfalse\n>>> is_simple_power(5L, 3L)\nfalse\n*/\nbool is_simple_power(long x, long n) \n", "test": "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_77_iscube", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\n>>> iscube(1L)\ntrue\n>>> iscube(2L)\nfalse\n>>> iscube(-1L)\ntrue\n>>> iscube(64L)\ntrue\n>>> iscube(0L)\ntrue\n>>> iscube(180L)\nfalse\n*/\nbool iscube(long a) \n", "test": "unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_78_hex_key", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\n>>> hex_key(\"AB\")\n1L\n>>> hex_key(\"1077E\")\n2L\n>>> hex_key(\"ABED1A33\")\n4L\n>>> hex_key(\"123456789ABCDEF0\")\n6L\n>>> hex_key(\"2020\")\n2L\n*/\nlong hex_key(string num) \n", "test": "unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\n>>> decimal_to_binary(15L)\n\"db1111db\"\n>>> decimal_to_binary(32L)\n\"db100000db\"\n*/\nstring decimal_to_binary(long decimal) \n", "test": "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_80_is_happy", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\nYour task is to check if the string is hapd or not.\nA string is hapd if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>> is_happy(\"a\")\nfalse\n>>> is_happy(\"aa\")\nfalse\n>>> is_happy(\"abcd\")\ntrue\n>>> is_happy(\"aabb\")\nfalse\n>>> is_happy(\"adb\")\ntrue\n>>> is_happy(\"xyy\")\nfalse\n*/\nbool is_happy(string s) \n", "test": "unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you an array of GPAs for some students and you have to write \na function that can output an array of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\nExample:\n>>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n*/\nstring[] numerical_letter_grade(float[] grades) \n", "test": "unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_82_prime_length", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\ntrue\n>>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\n*/\nbool prime_length(string string) \n", "test": "unittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\nlong starts_one_ends(long n) \n", "test": "unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_84_solve", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\n>>> solve(1000L)\n\"1\"\n>>> solve(150L)\n\"110\"\n>>> solve(147L)\n\"1100\"\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\nstring solve(long N) \n", "test": "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_85_add", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers lst. add the even elements that are at odd indices..\nExamples:\n>>> add([4L, 2L, 6L, 7L])\n2L\n*/\nlong add(long[] lst) \n", "test": "unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\")\n\"Hello !!!Wdlor\"\n*/\nstring anti_shuffle(string s) \n", "test": "unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_87_get_row", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the array,\nand return array of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\n>>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\n[tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]\n>>> get_row([], 1L)\n[]\n>>> get_row([[], [1L], [1L, 2L, 3L]], 3L)\n[tuple(2L, 2L)]\n*/\nTuple!(long, long)[] get_row(long[][] lst, long x) \n", "test": "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L, 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L, 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L, 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L), tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]], 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L, 2L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_88_sort_array", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of non-negative integers, return a cod of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5L])\n[5L]\n>>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n[0L, 1L, 2L, 3L, 4L, 5L]\n>>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n[6L, 5L, 4L, 3L, 2L, 1L, 0L]\n*/\nlong[] sort_array(long[] array) \n", "test": "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_89_encrypt", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\n>>> encrypt(\"hi\")\n\"lm\"\n>>> encrypt(\"asdfghjkl\")\n\"ewhjklnop\"\n>>> encrypt(\"gf\")\n\"kj\"\n>>> encrypt(\"et\")\n\"ix\"\n*/\nstring encrypt(string s) \n", "test": "unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the array.\nReturn null if there is no such element.\n>>> next_smallest([1L, 2L, 3L, 4L, 5L])\n2L\n>>> next_smallest([5L, 1L, 4L, 3L, 2L])\n2L\n>>> next_smallest([])\nNone\n>>> next_smallest([1L, 1L])\nNone\n*/\nNullable!(long) next_smallest(long[] lst) \n", "test": "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_91_is_bored", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0L\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1L\n*/\nlong is_bored(string S) \n", "test": "unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_92_any_int", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n>>> any_int(5L, 2L, 7L)\ntrue\n>>> any_int(3L, 2L, 2L)\nfalse\n>>> any_int(3L, -2L, 1L)\ntrue\n>>> any_int(3.6, -2.2, 2L)\nfalse\n*/\nbool any_int(float x, float y, float z) \n", "test": "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_93_encode", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \nExamples:\n>>> encode(\"test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n\"tHKS KS C MGSSCGG\"\n*/\nstring encode(string message) \n", "test": "unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\n>>> skjkasdkd([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L])\n10L\n>>> skjkasdkd([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L])\n25L\n>>> skjkasdkd([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L])\n13L\n>>> skjkasdkd([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L])\n11L\n>>> skjkasdkd([0L, 81L, 12L, 3L, 1L, 21L])\n3L\n>>> skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L])\n7L\n*/\nlong skjkasdkd(long[] lst) \n", "test": "unittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) == 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L]) == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L, 97L, 8192L]) == 10L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an associative array, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given associative array is empty.\nExamples:\n>>> check_dict_case([\"a\": \"apple\", \"b\": \"banana\"].nullable)\ntrue\n>>> check_dict_case([\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\nfalse\n>>> check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\nfalse\n>>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable)\nfalse\n>>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable)\ntrue\n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n", "test": "unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "import std.math;\nimport std.typecons;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\n>>> count_up_to(5L)\n[2L, 3L]\n>>> count_up_to(11L)\n[2L, 3L, 5L, 7L]\n>>> count_up_to(0L)\n[]\n>>> count_up_to(20L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n>>> count_up_to(1L)\n[]\n>>> count_up_to(18L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L]\n*/\nlong[] count_up_to(long n) \n", "test": "unittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_97_multiply", "prompt": "import std.math;\nimport std.typecons;\n/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply(148L, 412L)\n16L\n>>> multiply(19L, 28L)\n72L\n>>> multiply(2020L, 1851L)\n0L\n>>> multiply(14L, -15L)\n20L\n*/\nlong multiply(long a, long b) \n", "test": "unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_98_count_upper", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string s, count the number of uppercase vowels in even indices.\nFor example:\n>>> count_upper(\"aBCdEf\")\n1L\n>>> count_upper(\"abcdefg\")\n0L\n>>> count_upper(\"dBBE\")\n0L\n*/\nlong count_upper(string s) \n", "test": "unittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10L\n>>> closest_integer(\"15.3\")\n15L\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\nlong closest_integer(string value) \n", "test": "unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "import std.math;\n/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in an array, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3L)\n[3L, 5L, 7L]\n*/\nlong[] make_a_pile(long n) \n", "test": "unittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_101_words_string", "prompt": "import std.math;\n/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\n>>> words_string(\"Hi, my name is John\")\n[\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>>> words_string(\"One, two, three, four, five, six\")\n[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n*/\nstring[] words_string(string s) \n", "test": "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\") == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_102_choose_num", "prompt": "import std.math;\n/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\nFor example:\n>>> choose_num(12L, 15L)\n14L\n>>> choose_num(13L, 12L)\n-1L\n*/\nlong choose_num(long x, long y) \n", "test": "unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "import std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \nelements that hasn't any even digit.\nNote: Returned array should be sorted in increasing order.\nFor example:\n>>> unique_digits([15L, 33L, 1422L, 1L])\n[1L, 15L, 33L]\n>>> unique_digits([152L, 323L, 1422L, 10L])\n[]\n*/\nlong[] unique_digits(long[] x) \n", "test": "unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_105_by_length", "prompt": "import std.math;\n/*\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  If the array is empty, return an empty array:\n>>> by_length([])\n[]\n  If the array has any strange number ignore it:\n>>> by_length([1L, -1L, 55L])\n[\"One\"]\n*/\nstring[] by_length(long[] arr) \n", "test": "unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_106_f", "prompt": "import std.math;\n/*\n Implement the function f that takes n as a parameter,\nand returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n>>> f(5L)\n[1L, 2L, 6L, 24L, 15L]\n*/\nlong[] f(long n) \n", "test": "unittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L, 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L, 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L, 6L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\n>>> even_odd_palindrome(3L)\ntuple(1L, 2L)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\n>>> even_odd_palindrome(12L)\ntuple(4L, 6L)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n*/\nTuple!(long, long) even_odd_palindrome(long n) \n", "test": "unittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_108_count_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\n0L\n>>> count_nums([-1L, 11L, -11L])\n1L\n>>> count_nums([1L, 1L, 2L])\n3L\n*/\nlong count_nums(long[] arr) \n", "test": "unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "import std.math;\nimport std.typecons;\n/*\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing the above operation\nthen return true else return false.\nIf the given array is empty then return true.\nNote: The given array is guaranteed to have unique elements.\nFor Example:\n>>> move_one_ball([3L, 4L, 5L, 1L, 2L])\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\n>>> move_one_ball([3L, 5L, 4L, 1L, 2L])\nfalse\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n*/\nbool move_one_ball(long[] arr) \n", "test": "unittest\n{\n    alias candidate = move_one_ball;\n\n    assert(candidate([3L, 4L, 5L, 1L, 2L]) == true);\n    assert(candidate([3L, 5L, 10L, 1L, 2L]) == true);\n    assert(candidate([4L, 3L, 1L, 2L]) == false);\n    assert(candidate([3L, 5L, 4L, 1L, 2L]) == false);\n    assert(candidate([]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_110_exchange", "prompt": "import std.math;\nimport std.typecons;\n/*\nIn this problem, you will implement a function that takes two arrays of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 an array of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L])\n\"YES\"\n>>> exchange([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L])\n\"NO\"\nIt is assumed that the input arrays will be non-empty.\n*/\nstring exchange(long[] lst1, long[] lst2) \n", "test": "unittest\n{\n    alias candidate = exchange;\n\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L]) == \"YES\");\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L]) == \"NO\");\n    assert(candidate([1L, 2L, 3L, 4L], [2L, 1L, 4L, 3L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 4L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 3L]) == \"NO\");\n    assert(candidate([3L, 2L, 6L, 1L, 8L, 9L], [3L, 5L, 5L, 1L, 1L, 1L]) == \"NO\");\n    assert(candidate([100L, 200L], [200L, 200L]) == \"YES\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_111_histogram", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string representing a space separated lowercase letters, return an associative array\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\nExample:\n>>> histogram(\"a b c\")\n[\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n>>> histogram(\"a b b a\")\n[\"a\": 2L, \"b\": 2L].nullable\n>>> histogram(\"a b c a b\")\n[\"a\": 2L, \"b\": 2L].nullable\n>>> histogram(\"b b b b a\")\n[\"b\": 4L].nullable\n>>> histogram(\"\")\n___null_dict___\n*/\nNullable!(long[string]) histogram(string test) \n", "test": "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "import std.math;\nimport std.typecons;\n/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\n>>> reverse_delete(\"abcde\", \"ae\")\ntuple(\"bcd\", false)\n>>> reverse_delete(\"abcdef\", \"b\")\ntuple(\"acdef\", false)\n>>> reverse_delete(\"abcdedcba\", \"ab\")\ntuple(\"cdedc\", true)\n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n", "test": "unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_113_odd_count", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of strings, where each string consists of only digits, return an array.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count([\"1234567\"])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count([\"3\", \"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n*/\nstring[] odd_count(string[] lst) \n", "test": "unittest\n{\n    alias candidate = odd_count;\n\n    assert(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n    assert(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n    assert(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\n>>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n1L\n>>> minSubArraySum([-1L, -2L, -3L])\n-6L\n*/\nlong minSubArraySum(long[] nums) \n", "test": "unittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_115_max_fill", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n>>> max_fill([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L)\n6L\nExample 2:\n>>> max_fill([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L)\n5L\nExample 3:\n>>> max_fill([[0L, 0L, 0L], [0L, 0L, 0L]], 5L)\n0L\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n*/\nlong max_fill(long[][] grid, long capacity) \n", "test": "unittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_116_sort_array", "prompt": "import std.math;\nimport std.typecons;\n/*\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array([1L, 5L, 2L, 3L, 4L])\n[1L, 2L, 3L, 4L, 5L]\n>>> sort_array([-2L, -3L, -4L, -5L, -6L])\n[-6L, -5L, -4L, -3L, -2L]\n>>> sort_array([1L, 0L, 2L, 3L, 4L])\n[0L, 1L, 2L, 3L, 4L]\n*/\nlong[] sort_array(long[] arr) \n", "test": "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_117_select_words", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns an array of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty array.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a little lamb\", 4L)\n[\"little\"]\n>>> select_words(\"Mary had a little lamb\", 3L)\n[\"Mary\", \"lamb\"]\n>>> select_words(\"simple white space\", 2L)\n[]\n>>> select_words(\"Hello world\", 4L)\n[\"world\"]\n>>> select_words(\"Uncle sam\", 3L)\n[\"Uncle\"]\n*/\nstring[] select_words(string s, long n) \n", "test": "unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \nYou may assume that the given string contains English letter only.\nExample:\n>>> get_closest_vowel(\"yogurt\")\n\"u\"\n>>> get_closest_vowel(\"FULL\")\n\"U\"\n>>> get_closest_vowel(\"quick\")\n\"\"\n>>> get_closest_vowel(\"ab\")\n\"\"\n*/\nstring get_closest_vowel(string word) \n", "test": "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_119_match_parens", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n>>> match_parens([\"()(\", \")\"])\n\"Yes\"\n>>> match_parens([\")\", \")\"])\n\"No\"\n*/\nstring match_parens(string[] lst) \n", "test": "unittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\")())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"(()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) == \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\")(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_120_maximum", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array arr of integers and a positive integer k, return a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum([-3L, -4L, 5L], 3L)\n[-4L, -3L, 5L]\nExample 2:\n>>> maximum([4L, -4L, 4L], 2L)\n[4L, 4L]\nExample 3:\n>>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n[2L]\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n*/\nlong[] maximum(long[] arr, long k) \n", "test": "unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_121_solution", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\nExamples\n>>> solution([5L, 8L, 7L, 1L])\n12L\n>>> solution([3L, 3L, 3L, 3L, 3L])\n9L\n>>> solution([30L, 13L, 24L, 321L])\n0L\n*/\nlong solution(long[] lst) \n", "test": "unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_122_add_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\n>>> add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n24L\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\nlong add_elements(long[] arr, long k) \n", "test": "unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote: \n    1. Collatz(1) is [1].\n    2. returned array sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>>> get_odd_collatz(5L)\n[1L, 5L]\n*/\nlong[] get_odd_collatz(long n) \n", "test": "unittest\n{\n    alias candidate = get_odd_collatz;\n\n    assert(candidate(14L) == [1L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(5L) == [1L, 5L]);\n    assert(candidate(12L) == [1L, 3L, 5L]);\n    assert(candidate(1L) == [1L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_124_valid_date", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n>>> valid_date(\"03-11-2000\")\ntrue\n>>> valid_date(\"15-01-2012\")\nfalse\n>>> valid_date(\"04-0-2040\")\nfalse\n>>> valid_date(\"06-04-2020\")\ntrue\n>>> valid_date(\"06/04/2020\")\nfalse\n*/\nbool valid_date(string date) \n", "test": "unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of numbers, return whether or not they are sorted\nin ascending order. If array has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted([5L])\ntrue\n>>> is_sorted([1L, 2L, 3L, 4L, 5L])\ntrue\n>>> is_sorted([1L, 3L, 2L, 4L, 5L])\nfalse\n>>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\ntrue\n>>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\ntrue\n>>> is_sorted([1L, 3L, 2L, 4L, 5L, 6L, 7L])\nfalse\n>>> is_sorted([1L, 2L, 2L, 3L, 3L, 4L])\ntrue\n>>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\nfalse\n*/\nbool is_sorted(long[] lst) \n", "test": "unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_127_intersection", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\n>>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\"NO\"\n>>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n\"NO\"\n>>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n\"YES\"\n*/\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2) \n", "test": "unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return null for empty arr.\nExample:\n>>> prod_signs([1L, 2L, 2L, -4L])\n9L\n>>> prod_signs([0L, 1L])\n0L\n>>> prod_signs([])\nNone\n*/\nNullable!(long) prod_signs(long[] arr) \n", "test": "unittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result = candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get == -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L, 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L, 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_129_minPath", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered arrays of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered array of the values on the cells that the minimum path go through.\nExamples:    \n>>> minPath([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L)\n[1L, 2L, 1L]\n>>> minPath([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L)\n[1L]\n*/\nlong[] minPath(long[][] grid, long k) \n", "test": "unittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L) == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L, 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L, 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L, 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L, 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L, 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L], [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L, 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_130_tri", "prompt": "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return an array of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3L)\n[1L, 3L, 2L, 8L]\n*/\nlong[] tri(long n) \n", "test": "unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_131_digits", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> digits(1L)\n1L\n>>> digits(4L)\n0L\n>>> digits(235L)\n15L\n*/\nlong digits(long n) \n", "test": "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) == 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n    assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_132_is_nested", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue\n*/\nbool is_nested(string string) \n", "test": "unittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\") == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"[][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"[[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"[][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"[]]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"[[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"[[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of numbers.\nYou need to return the sum of squared numbers in the given array,\nround each element in the array to the upper int(Ceiling) first.\nExamples:\n>>> lst([1.0, 2.0, 3.0])\n14L\n>>> lst([1.0, 4.0, 9.0])\n98L\n>>> lst([1.0, 3.0, 5.0, 7.0])\n84L\n>>> lst([1.4, 4.2, 0.0])\n29L\n>>> lst([-2.4, 1.0, 1.0])\n6L\n*/\nlong sum_squares(float[] lst) \n", "test": "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\n>>> check_if_last_char_is_a_letter(\"apple pie\")\nfalse\n>>> check_if_last_char_is_a_letter(\"apple pi e\")\ntrue\n>>> check_if_last_char_is_a_letter(\"apple pi e \")\nfalse\n>>> check_if_last_char_is_a_letter(\"\")\nfalse\n*/\nbool check_if_last_char_is_a_letter(string txt) \n", "test": "unittest\n{\n    alias candidate = check_if_last_char_is_a_letter;\n\n    assert(candidate(\"apple\") == false);\n    assert(candidate(\"apple pi e\") == true);\n    assert(candidate(\"eeeee\") == false);\n    assert(candidate(\"A\") == true);\n    assert(candidate(\"Pumpkin pie \") == false);\n    assert(candidate(\"Pumpkin pie 1\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"eeeee e \") == false);\n    assert(candidate(\"apple pie\") == false);\n    assert(candidate(\"apple pi e \") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\n>>> can_arrange([1L, 2L, 4L, 3L, 5L])\n3L\n>>> can_arrange([1L, 2L, 3L])\n-1L\n*/\nlong can_arrange(long[] arr) \n", "test": "unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in an array.\nIf there is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\ntuple(None, 1L)\n>>> largest_smallest_integers([])\ntuple(None, None)\n>>> largest_smallest_integers([0L])\ntuple(None, None)\n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst) \n", "test": "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "import std.math;\nimport std.typecons;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\n>>> is_equal_to_sum_even(4L)\nfalse\n>>> is_equal_to_sum_even(6L)\nfalse\n>>> is_equal_to_sum_even(8L)\ntrue\n*/\nbool is_equal_to_sum_even(long n) \n", "test": "unittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4L)\n288L\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\nlong special_factorial(long n) \n", "test": "unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n>>> fix_spaces(\" Example\")\n\"Example\"\n>>> fix_spaces(\" Example 1\")\n\"Example_1\"\n>>> fix_spaces(\" Example 2\")\n\"_Example_2\"\n>>> fix_spaces(\" Example 3\")\n\"_Example-3\"\n*/\nstring fix_spaces(string text) \n", "test": "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\n>>> file_name_check(\"example.txt\")\n\"Yes\"\n>>> file_name_check(\"1example.dll\")\n\"No\"\n*/\nstring file_name_check(string file_name) \n", "test": "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\") == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n    assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\") == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\") == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\") == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\") == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"s.\") == \"No\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "import std.math;\nimport std.typecons;\n/*\n\"\nThis function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1L, 2L, 3L]\n>>> lst\n[]\n>>> lst\n[-1L, -5L, 2L, -1L, -5L]\n*/\nlong sum_squares(long[] lst) \n", "test": "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>> words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\nstring words_in_sentence(string sentence) \n", "test": "unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_144_simplify", "prompt": "import std.math;\nimport std.typecons;\n/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n>>> simplify(\"1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"7/10\", \"10/2\")\nfalse\n*/\nbool simplify(string x, string n) \n", "test": "unittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\", \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\", \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/5\", \"1/5\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function which sorts the given array of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original array.\nFor example:\n>>> order_by_points([1L, 11L, -1L, -11L, -12L])\n[-1L, -11L, 1L, -12L, 11L]\n>>> order_by_points([])\n[]\n*/\nlong[] order_by_points(long[] nums) \n", "test": "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n>>> specialFilter([15L, -73L, 14L, -15L])\n1L\n>>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n2L\n*/\nlong specialFilter(long[] nums) \n", "test": "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "import std.math;\nimport std.typecons;\n/*\n    You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    Example :\n    >>> get_max_triples(5L)\n    1L\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n*/\nlong get_max_triples(long n) \n", "test": "unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts an array of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted array with a sorted order,\nThe array is always an array of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the array should be ascending by length of each word, and you\nshould return the array sorted by that rule.\nIf two words have the same length, sort the array alphabetically.\nThe function should return an array of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\n>>> list_sort([\"aa\", \"a\", \"aaa\"])\n[\"aa\"]\n>>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n[\"ab\", \"cd\"]\n*/\nstring[] sorted_list_sum(string[] lst) \n", "test": "unittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "import std.math;\nimport std.typecons;\n/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\nExamples:\n>>> x_or_y(7L, 34L, 12L)\n34L\n>>> x_or_y(15L, 8L, 5L)\n5L\n*/\nlong x_or_y(long n, long x, long y) \n", "test": "unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of numbers, return the sum of squares of the numbers\nin the array that are odd. Ignore numbers that are negative or not integers.\n>>> double_the_difference([1L, 3L, 2L, 0L])\n10L\n>>> double_the_difference([-1L, -2L, 0L])\n0L\n>>> double_the_difference([9L, -2L])\n81L\n>>> double_the_difference([0L])\n0L\nIf the input array is empty, return 0.\n*/\nlong double_the_difference(float[] lst) \n", "test": "unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_152_compare", "prompt": "import std.math;\nimport std.typecons;\n/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n>>> compare([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n[0L, 0L, 0L, 0L, 3L, 3L]\n>>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n[4L, 4L, 1L, 0L, 0L, 6L]\n*/\nlong[] compare(long[] game, long[] guess) \n", "test": "unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou will be given the name of a class (a string) and an array of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the array.\nFor example, if you are given \"Slices\" as the class and an array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class.AA\"\n*/\nstring Strongest_Extension(string class_name, string[] extensions) \n", "test": "unittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\");\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n>>> cycpattern_check(\"abcd\", \"abd\")\nfalse\n>>> cycpattern_check(\"hello\", \"ell\")\ntrue\n>>> cycpattern_check(\"whassup\", \"psus\")\nfalse\n>>> cycpattern_check(\"abab\", \"baa\")\ntrue\n>>> cycpattern_check(\"efef\", \"eeff\")\nfalse\n>>> cycpattern_check(\"himenss\", \"simen\")\ntrue\n*/\nbool cycpattern_check(string a, string b) \n", "test": "unittest\n{\n    alias candidate = cycpattern_check;\n\n    assert(candidate(\"xyzw\", \"xyw\") == false);\n    assert(candidate(\"yello\", \"ell\") == true);\n    assert(candidate(\"whattup\", \"ptut\") == false);\n    assert(candidate(\"efef\", \"fee\") == true);\n    assert(candidate(\"abab\", \"aabb\") == false);\n    assert(candidate(\"winemtt\", \"tinem\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n*/\nTuple!(long, long) even_odd_count(long num) \n", "test": "unittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19L)\n\"xix\"\n>>> int_to_mini_roman(152L)\n\"clii\"\n>>> int_to_mini_roman(426L)\n\"cdxxvi\"\n*/\nstring int_to_mini_roman(long number) \n", "test": "unittest\n{\n    alias candidate = int_to_mini_roman;\n\n    assert(candidate(19L) == \"xix\");\n    assert(candidate(152L) == \"clii\");\n    assert(candidate(251L) == \"ccli\");\n    assert(candidate(426L) == \"cdxxvi\");\n    assert(candidate(500L) == \"d\");\n    assert(candidate(1L) == \"i\");\n    assert(candidate(4L) == \"iv\");\n    assert(candidate(43L) == \"xliii\");\n    assert(candidate(90L) == \"xc\");\n    assert(candidate(94L) == \"xciv\");\n    assert(candidate(532L) == \"dxxxii\");\n    assert(candidate(900L) == \"cm\");\n    assert(candidate(994L) == \"cmxciv\");\n    assert(candidate(1000L) == \"m\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\n>>> right_angle_triangle(3L, 4L, 5L)\ntrue\n>>> right_angle_triangle(1L, 2L, 3L)\nfalse\n*/\nbool right_angle_triangle(long a, long b, long c) \n", "test": "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_158_find_max", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts an array of strings.\nThe array contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n>>> find_max([\"name\", \"of\", \"string\"])\n\"string\"\n>>> find_max([\"name\", \"enam\", \"game\"])\n\"enam\"\n>>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\"aaaaaaa\"\n*/\nstring find_max(string[] words) \n", "test": "unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_159_eat", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n>>> eat(5L, 6L, 10L)\n[11L, 4L]\n>>> eat(4L, 8L, 9L)\n[12L, 1L]\n>>> eat(1L, 10L, 10L)\n[11L, 0L]\n>>> eat(2L, 11L, 5L)\n[7L, 0L]\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n*/\nlong[] eat(long number, long need, long remaining) \n", "test": "unittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven two arrays operator, and operand. The first array has basic algebra operations, and \nthe second array is an array of integers. Use the two given arrays to build the algebric \nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\n    The length of operator array is equal to the length of operand array minus one.\n    Operand is an array of of non-negative integers.\n    Operator array has at least one operator, and operand array has at least two operands.\n*/\nlong do_algebra(string[] operator, long[] operand) \n", "test": "unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_161_solve", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n>>> solve(\"1234\")\n\"4321\"\n>>> solve(\"ab\")\n\"AB\"\n>>> solve(\"#a@C\")\n\"#A@c\"\n*/\nstring solve(string s) \n", "test": "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\") == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\") == \"#CCC\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return null.\n>>> string_to_md5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\nNullable!(string) string_to_md5(string text) \n", "test": "unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\n>>> generate_integers(2L, 8L)\n[2L, 4L, 6L, 8L]\n>>> generate_integers(8L, 2L)\n[2L, 4L, 6L, 8L]\n>>> generate_integers(10L, 14L)\n[]\n*/\nlong[] generate_integers(long a, long b) \n", "test": "unittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to identify non-prime numbers.\n*/\nbool is_not_prime(long n) \n", "test": "unittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n largest integers from a given array of numbers, returned in descending order.\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n", "test": "unittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n", "test": "unittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_8_square_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find squares of individual elements in an array.\n*/\nlong[] square_nums(long[] nums) \n", "test": "unittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n*/\nlong find_Rotations(string str) \n", "test": "unittest\n{\n    alias candidate = find_Rotations;\n\n    assert(candidate(\"aaaa\") == 1L);\n    assert(candidate(\"ab\") == 2L);\n    assert(candidate(\"abc\") == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove first and last occurrence of a given character from the string.\n*/\nstring remove_Occ(string s, string ch) \n", "test": "unittest\n{\n    alias candidate = remove_Occ;\n\n    assert(candidate(\"hello\", \"l\") == \"heo\");\n    assert(candidate(\"abcda\", \"a\") == \"bcd\");\n    assert(candidate(\"PHP\", \"P\") == \"H\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n*/\nlong[][] sort_matrix(long[][] M) \n", "test": "unittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_14_find_Volume", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the volume of a triangular prism.\n*/\nlong find_Volume(long l, long b, long h) \n", "test": "unittest\n{\n    alias candidate = find_Volume;\n\n    assert(candidate(10L, 8L, 6L) == 240L);\n    assert(candidate(3L, 2L, 2L) == 6L);\n    assert(candidate(1L, 2L, 1L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n*/\nbool text_lowercase_underscore(string text) \n", "test": "unittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that returns the perimeter of a square given its side length as input.\n*/\nlong square_perimeter(long a) \n", "test": "unittest\n{\n    alias candidate = square_perimeter;\n\n    assert(candidate(10L) == 40L);\n    assert(candidate(5L) == 20L);\n    assert(candidate(4L) == 16L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove characters from the first string which are present in the second string.\n*/\nstring remove_dirty_chars(string string, string second_string) \n", "test": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n*/\nbool test_duplicate(long[] arraynums) \n", "test": "unittest\n{\n    alias candidate = test_duplicate;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);\n    assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_20_is_woodall", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given number is woodball or not.\n*/\nbool is_woodall(long x) \n", "test": "unittest\n{\n    alias candidate = is_woodall;\n\n    assert(candidate(383L) == true);\n    assert(candidate(254L) == false);\n    assert(candidate(200L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_56_checks", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check if a given number is one less than twice its reverse.\n*/\nbool checks(long n) \n", "test": "unittest\n{\n    alias candidate = checks;\n\n    assert(candidate(70L) == false);\n    assert(candidate(23L) == false);\n    assert(candidate(73L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the largest number that can be formed with the given array of digits.\n*/\nlong find_Max_Num(long[] arr) \n", "test": "unittest\n{\n    alias candidate = find_Max_Num;\n\n    assert(candidate([1L, 2L, 3L]) == 321L);\n    assert(candidate([4L, 5L, 6L, 1L]) == 6541L);\n    assert(candidate([1L, 2L, 3L, 9L]) == 9321L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given two integers have opposite sign or not.\n*/\nbool opposite_Signs(long x, long y) \n", "test": "unittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth octagonal number.\n*/\nlong is_octagonal(long n) \n", "test": "unittest\n{\n    alias candidate = is_octagonal;\n\n    assert(candidate(5L) == 65L);\n    assert(candidate(10L) == 280L);\n    assert(candidate(15L) == 645L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n*/\nlong count_Substrings(string s) \n", "test": "unittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_62_smallest_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find smallest number in an array.\n*/\nlong smallest_num(long[] xs) \n", "test": "unittest\n{\n    alias candidate = smallest_num;\n\n    assert(candidate([10L, 20L, 1L, 45L, 99L]) == 1L);\n    assert(candidate([1L, 2L, 3L]) == 1L);\n    assert(candidate([45L, 46L, 50L, 60L]) == 45L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_63_max_difference", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum difference between available pairs in the given tuple array.\n*/\nlong max_difference(Tuple!(long, long)[] test_list) \n", "test": "unittest\n{\n    alias candidate = max_difference;\n\n    assert(candidate([tuple(3L, 5L), tuple(1L, 7L), tuple(10L, 3L), tuple(1L, 2L)]) == 7L);\n    assert(candidate([tuple(4L, 6L), tuple(2L, 17L), tuple(9L, 13L), tuple(11L, 12L)]) == 15L);\n    assert(candidate([tuple(12L, 35L), tuple(21L, 27L), tuple(13L, 23L), tuple(41L, 22L)]) == 23L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_64_subject_marks", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an array of tuples using the second value of each tuple.\n*/\nTuple!(string, long)[] subject_marks(Tuple!(string, long)[] subjectmarks) \n", "test": "unittest\n{\n    alias candidate = subject_marks;\n\n    assert(candidate([tuple(\"English\", 88L), tuple(\"Science\", 90L), tuple(\"Maths\", 97L), tuple(\"Social sciences\", 82L)]) == [tuple(\"Social sciences\", 82L), tuple(\"English\", 88L), tuple(\"Science\", 90L), tuple(\"Maths\", 97L)]);\n    assert(candidate([tuple(\"Telugu\", 49L), tuple(\"Hindhi\", 54L), tuple(\"Social\", 33L)]) == [tuple(\"Social\", 33L), tuple(\"Telugu\", 49L), tuple(\"Hindhi\", 54L)]);\n    assert(candidate([tuple(\"Physics\", 96L), tuple(\"Chemistry\", 97L), tuple(\"Biology\", 45L)]) == [tuple(\"Biology\", 45L), tuple(\"Physics\", 96L), tuple(\"Chemistry\", 97L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_66_pos_count", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of positive numbers in an array.\n*/\nlong pos_count(long[] list) \n", "test": "unittest\n{\n    alias candidate = pos_count;\n\n    assert(candidate([1L, -2L, 3L, -4L]) == 2L);\n    assert(candidate([3L, 4L, 5L, -1L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_67_bell_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n*/\nlong bell_number(long n) \n", "test": "unittest\n{\n    alias candidate = bell_number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(10L) == 115975L);\n    assert(candidate(56L) == 6775685320645824322581483068371419745979053216268760300L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given array is monotonic or not.\n*/\nbool is_Monotonic(long[] A) \n", "test": "unittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_69_is_sublist", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether an array contains the given subarray or not.\n*/\nbool is_sublist(long[] l, long[] s) \n", "test": "unittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_70_get_equal", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find whether all the given arrays have equal length or not.\n*/\nbool get_equal(long[][] Input) \n", "test": "unittest\n{\n    alias candidate = get_equal;\n\n    assert(candidate([[11L, 22L, 33L], [44L, 55L, 66L]]) == true);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L, 7L]]) == false);\n    assert(candidate([[1L, 2L], [3L, 4L]]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_71_comb_sort", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an array of elements.\n*/\nlong[] comb_sort(long[] nums) \n", "test": "unittest\n{\n    alias candidate = comb_sort;\n\n    assert(candidate([5L, 15L, 37L, 25L, 79L]) == [5L, 15L, 25L, 37L, 79L]);\n    assert(candidate([41L, 32L, 15L, 19L, 22L]) == [15L, 19L, 22L, 32L, 41L]);\n    assert(candidate([99L, 15L, 13L, 47L]) == [13L, 15L, 47L, 99L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_72_dif_Square", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given number can be represented as the difference of two squares or not.\n*/\nbool dif_Square(long n) \n", "test": "unittest\n{\n    alias candidate = dif_Square;\n\n    assert(candidate(5L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(15L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n", "test": "unittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_75_find_tuples", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find tuples which have all elements divisible by k from the given array of tuples.\n*/\nTuple!(long, long, long)[] find_tuples(Tuple!(long, long, long)[] test_list, long K) \n", "test": "unittest\n{\n    alias candidate = find_tuples;\n\n    assert(candidate([tuple(6L, 24L, 12L), tuple(7L, 9L, 6L), tuple(12L, 18L, 21L)], 6L) == [tuple(6L, 24L, 12L)]);\n    assert(candidate([tuple(5L, 25L, 30L), tuple(4L, 2L, 3L), tuple(7L, 8L, 9L)], 5L) == [tuple(5L, 25L, 30L)]);\n    assert(candidate([tuple(7L, 9L, 16L), tuple(8L, 16L, 4L), tuple(19L, 17L, 18L)], 4L) == [tuple(8L, 16L, 4L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_77_is_Diff", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find whether a number is divisible by 11.\n*/\nbool is_Diff(long n) \n", "test": "unittest\n{\n    alias candidate = is_Diff;\n\n    assert(candidate(12345L) == false);\n    assert(candidate(1212112L) == true);\n    assert(candidate(1212L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_79_word_len", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the length of the word is odd or not.\n*/\nbool word_len(string s) \n", "test": "unittest\n{\n    alias candidate = word_len;\n\n    assert(candidate(\"Hadoop\") == false);\n    assert(candidate(\"great\") == true);\n    assert(candidate(\"structure\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth tetrahedral number.\n*/\nlong tetrahedral_number(long n) \n", "test": "unittest\n{\n    alias candidate = tetrahedral_number;\n\n    assert(candidate(5L) == 35L);\n    assert(candidate(6L) == 56L);\n    assert(candidate(7L) == 84L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_83_get_Char", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n*/\nstring get_Char(string strr) \n", "test": "unittest\n{\n    alias candidate = get_Char;\n\n    assert(candidate(\"abc\") == \"f\");\n    assert(candidate(\"gfg\") == \"t\");\n    assert(candidate(\"ab\") == \"c\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_84_sequence", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth number in the newman conway sequence.\n*/\nlong sequence(long n) \n", "test": "unittest\n{\n    alias candidate = sequence;\n\n    assert(candidate(10L) == 6L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(3L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find nth centered hexagonal number.\n*/\nlong centered_hexagonal_number(long n) \n", "test": "unittest\n{\n    alias candidate = centered_hexagonal_number;\n\n    assert(candidate(10L) == 271L);\n    assert(candidate(2L) == 7L);\n    assert(candidate(9L) == 217L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to merge three dictionaries into a single associative array.\n*/\nNullable!(string[string]) merge_dictionaries_three(Nullable!(string[string]) dict1, Nullable!(string[string]) dict2, Nullable!(string[string]) dict3) \n", "test": "unittest\n{\n    alias candidate = merge_dictionaries_three;\n\n{\n        auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable, [\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"].nullable);\n        assert(!result.isNull && result.get == [\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"]);\n}\n\n{\n        auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable, [\"L\": \"lavender\", \"B\": \"Blue\"].nullable);\n        assert(!result.isNull && result.get == [\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"]);\n}\n\n{\n        auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"L\": \"lavender\", \"B\": \"Blue\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable);\n        assert(!result.isNull && result.get == [\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"]);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_88_freq_count", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to get the frequency of all the elements in an array, returned as an associative array.\n*/\nNullable!(long[long]) freq_count(long[] list1) \n", "test": "unittest\n{\n    alias candidate = freq_count;\n\n{\n        auto result = candidate([10L, 10L, 10L, 10L, 20L, 20L, 20L, 20L, 40L, 40L, 50L, 50L, 30L]);\n        assert(!result.isNull && result.get == [10L: 4L, 20L: 4L, 40L: 2L, 50L: 2L, 30L: 1L]);\n}\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 3L, 2L, 4L, 1L, 3L, 1L, 4L]);\n        assert(!result.isNull && result.get == [1L: 3L, 2L: 2L, 3L: 3L, 4L: 3L]);\n}\n\n{\n        auto result = candidate([5L, 6L, 7L, 4L, 9L, 10L, 4L, 5L, 6L, 7L, 9L, 5L]);\n        assert(!result.isNull && result.get == [10L: 1L, 5L: 3L, 6L: 2L, 7L: 2L, 4L: 2L, 9L: 2L]);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_89_closest_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the closest smaller number than n.\n*/\nlong closest_num(long N) \n", "test": "unittest\n{\n    alias candidate = closest_num;\n\n    assert(candidate(11L) == 10L);\n    assert(candidate(7L) == 6L);\n    assert(candidate(12L) == 11L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_90_len_log", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the length of the longest word.\n*/\nlong len_log(string[] list1) \n", "test": "unittest\n{\n    alias candidate = len_log;\n\n    assert(candidate([\"python\", \"PHP\", \"bigdata\"]) == 7L);\n    assert(candidate([\"a\", \"ab\", \"abc\"]) == 3L);\n    assert(candidate([\"small\", \"big\", \"tall\"]) == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_91_find_substring", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if a string is present as a substring in a given array of string values.\n*/\nbool find_substring(string[] str1, string sub_str) \n", "test": "unittest\n{\n    alias candidate = find_substring;\n\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == true);\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == false);\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_92_is_undulating", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given number is undulating or not.\n*/\nbool is_undulating(long n) \n", "test": "unittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_93_power", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n*/\nlong power(long a, long b) \n", "test": "unittest\n{\n    alias candidate = power;\n\n    assert(candidate(3L, 4L) == 81L);\n    assert(candidate(2L, 3L) == 8L);\n    assert(candidate(5L, 5L) == 3125L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_94_index_minimum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tGiven an array of tuples, write a function that returns the first value of the tuple with the smallest second value.\n*/\nstring index_minimum(Tuple!(string, long)[] test_list) \n", "test": "unittest\n{\n    alias candidate = index_minimum;\n\n    assert(candidate([tuple(\"Rash\", 143L), tuple(\"Manjeet\", 200L), tuple(\"Varsha\", 100L)]) == \"Varsha\");\n    assert(candidate([tuple(\"Yash\", 185L), tuple(\"Dawood\", 125L), tuple(\"Sanya\", 175L)]) == \"Dawood\");\n    assert(candidate([tuple(\"Sai\", 345L), tuple(\"Salman\", 145L), tuple(\"Ayesha\", 96L)]) == \"Ayesha\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the length of the smallest array in an array of arrays.\n*/\nlong Find_Min_Length(long[][] lst) \n", "test": "unittest\n{\n    alias candidate = Find_Min_Length;\n\n    assert(candidate([[1L], [1L, 2L]]) == 1L);\n    assert(candidate([[1L, 2L], [1L, 2L, 3L], [1L, 2L, 3L, 4L]]) == 2L);\n    assert(candidate([[3L, 3L, 3L], [4L, 4L, 4L, 4L]]) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_96_divisor", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the number of divisors of a given integer.\n*/\nlong divisor(long n) \n", "test": "unittest\n{\n    alias candidate = divisor;\n\n    assert(candidate(15L) == 4L);\n    assert(candidate(12L) == 6L);\n    assert(candidate(9L) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find frequency of each element in a flattened array of arrays, returned in an associative array.\n*/\nNullable!(long[long]) frequency_lists(long[][] list1) \n", "test": "unittest\n{\n    alias candidate = frequency_lists;\n\n{\n        auto result = candidate([[1L, 2L, 3L, 2L], [4L, 5L, 6L, 2L], [7L, 8L, 9L, 5L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 3L, 3L: 1L, 4L: 1L, 5L: 2L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L]);\n}\n\n{\n        auto result = candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 1L, 3L: 1L, 4L: 1L, 5L: 1L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L, 10L: 1L, 11L: 1L, 12L: 1L]);\n}\n\n{\n        auto result = candidate([[20L, 30L, 40L, 17L], [18L, 16L, 14L, 13L], [10L, 20L, 30L, 40L]]);\n        assert(!result.isNull && result.get == [20L: 2L, 30L: 2L, 40L: 2L, 17L: 1L, 18L: 1L, 16L: 1L, 14L: 1L, 13L: 1L, 10L: 1L]);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n*/\nstring decimal_to_binary(long n) \n", "test": "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(8L) == \"1000\");\n    assert(candidate(18L) == \"10010\");\n    assert(candidate(7L) == \"111\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "import std.math;\n/*\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n*/\nlong next_smallest_palindrome(long num) \n", "test": "unittest\n{\n    alias candidate = next_smallest_palindrome;\n\n    assert(candidate(99L) == 101L);\n    assert(candidate(1221L) == 1331L);\n    assert(candidate(120L) == 121L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_101_kth_element", "prompt": "import std.math;\n/*\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n*/\nlong kth_element(long[] arr, long k) \n", "test": "unittest\n{\n    alias candidate = kth_element;\n\n    assert(candidate([12L, 3L, 5L, 7L, 19L], 2L) == 3L);\n    assert(candidate([17L, 24L, 8L, 23L], 3L) == 8L);\n    assert(candidate([16L, 21L, 25L, 36L, 4L], 4L) == 36L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "import std.math;\n/*\n\tWrite a function to convert a snake case string to camel case string.\n*/\nstring snake_to_camel(string word) \n", "test": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "import std.math;\n/*\n\tWrite a function to find the Eulerian number a(n, m).\n*/\nlong eulerian_num(long n, long m) \n", "test": "unittest\n{\n    alias candidate = eulerian_num;\n\n    assert(candidate(3L, 1L) == 4L);\n    assert(candidate(4L, 1L) == 11L);\n    assert(candidate(5L, 3L) == 26L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "import std.math;\n/*\n\tWrite a function to sort each subarray of strings in a given array of arrays.\n*/\nstring[][] sort_sublists(string[][] input_list) \n", "test": "unittest\n{\n    alias candidate = sort_sublists;\n\n    assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);\n    assert(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]);\n    assert(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_105_count", "prompt": "import std.math;\n/*\n\tWrite a dthon function to count true booleans in the given array.\n*/\nlong count(bool[] lst) \n", "test": "unittest\n{\n    alias candidate = count;\n\n    assert(candidate([true, false, true]) == 2L);\n    assert(candidate([false, false]) == 0L);\n    assert(candidate([true, true, true]) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_106_add_lists", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to append the given array to the given tuples.\n*/\nTuple!(long, long, long, long, long) add_lists(long[] test_list, Tuple!(long, long) test_tup) \n", "test": "unittest\n{\n    alias candidate = add_lists;\n\n    assert(candidate([5L, 6L, 7L], tuple(9L, 10L)) == tuple(9L, 10L, 5L, 6L, 7L));\n    assert(candidate([6L, 7L, 8L], tuple(10L, 11L)) == tuple(10L, 11L, 6L, 7L, 8L));\n    assert(candidate([7L, 8L, 9L], tuple(11L, 12L)) == tuple(11L, 12L, 7L, 8L, 9L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to merge three arrays into a single sorted array.\n*/\nlong[] merge_sorted_list(long[] num1, long[] num2, long[] num3) \n", "test": "unittest\n{\n    alias candidate = merge_sorted_list;\n\n    assert(candidate([25L, 24L, 15L, 4L, 5L, 29L, 110L], [19L, 20L, 11L, 56L, 25L, 233L, 154L], [24L, 26L, 54L, 48L]) == [4L, 5L, 11L, 15L, 19L, 20L, 24L, 24L, 25L, 25L, 26L, 29L, 48L, 54L, 56L, 110L, 154L, 233L]);\n    assert(candidate([1L, 3L, 5L, 6L, 8L, 9L], [2L, 5L, 7L, 11L], [1L, 4L, 7L, 8L, 12L]) == [1L, 1L, 2L, 3L, 4L, 5L, 5L, 6L, 7L, 7L, 8L, 8L, 9L, 11L, 12L]);\n    assert(candidate([18L, 14L, 10L, 9L, 8L, 7L, 9L, 3L, 2L, 4L, 1L], [25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L], [12L, 74L, 9L, 50L, 61L, 41L]) == [1L, 2L, 3L, 4L, 7L, 8L, 9L, 9L, 9L, 10L, 12L, 14L, 14L, 18L, 22L, 25L, 25L, 35L, 41L, 50L, 58L, 61L, 65L, 74L, 75L, 85L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n*/\nlong odd_Equivalent(string s, long n) \n", "test": "unittest\n{\n    alias candidate = odd_Equivalent;\n\n    assert(candidate(\"011001\", 6L) == 3L);\n    assert(candidate(\"11011\", 5L) == 4L);\n    assert(candidate(\"1010\", 4L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_113_check_integer", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if a string represents an integer or not.\n*/\nbool check_integer(string text) \n", "test": "unittest\n{\n    alias candidate = check_integer;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"1\") == true);\n    assert(candidate(\"12345\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n*/\nlong tuple_to_int(Tuple!(long, long, long) nums) \n", "test": "unittest\n{\n    alias candidate = tuple_to_int;\n\n    assert(candidate(tuple(1L, 2L, 3L)) == 123L);\n    assert(candidate(tuple(4L, 5L, 6L)) == 456L);\n    assert(candidate(tuple(5L, 6L, 7L)) == 567L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_117_list_to_float", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert all possible convertible elements in an array of arrays to floats.\n*/\nTuple!(float, float)[] list_to_float(Tuple!(string, string)[] test_list) \n", "test": "unittest\n{\n    alias candidate = list_to_float;\n\n    assert(candidate([tuple(\"3\", \"4\"), tuple(\"1\", \"26.45\"), tuple(\"7.32\", \"8\"), tuple(\"4\", \"8\")]) == [tuple(3.0, 4.0), tuple(1.0, 26.45), tuple(7.32, 8.0), tuple(4.0, 8.0)]);\n    assert(candidate([tuple(\"4\", \"4\"), tuple(\"2\", \"27\"), tuple(\"4.12\", \"9\"), tuple(\"7\", \"11\")]) == [tuple(4.0, 4.0), tuple(2.0, 27.0), tuple(4.12, 9.0), tuple(7.0, 11.0)]);\n    assert(candidate([tuple(\"6\", \"78\"), tuple(\"5\", \"26.45\"), tuple(\"1.33\", \"4\"), tuple(\"82\", \"13\")]) == [tuple(6.0, 78.0), tuple(5.0, 26.45), tuple(1.33, 4.0), tuple(82.0, 13.0)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_118_string_to_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a string to an array of strings split on the space character.\n*/\nstring[] string_to_list(string string) \n", "test": "unittest\n{\n    alias candidate = string_to_list;\n\n    assert(candidate(\"python programming\") == [\"python\", \"programming\"]);\n    assert(candidate(\"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"]);\n    assert(candidate(\"write a program\") == [\"write\", \"a\", \"program\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_119_search", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n*/\nlong search(long[] arr) \n", "test": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given array.\n*/\nlong max_product_tuple(Tuple!(long, long)[] list1) \n", "test": "unittest\n{\n    alias candidate = max_product_tuple;\n\n    assert(candidate([tuple(2L, 7L), tuple(2L, 6L), tuple(1L, 8L), tuple(4L, 9L)]) == 36L);\n    assert(candidate([tuple(10L, 20L), tuple(15L, 2L), tuple(5L, 10L)]) == 200L);\n    assert(candidate([tuple(11L, 44L), tuple(10L, 15L), tuple(20L, 5L), tuple(12L, 9L)]) == 484L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n*/\nlong amicable_numbers_sum(long limit) \n", "test": "unittest\n{\n    alias candidate = amicable_numbers_sum;\n\n    assert(candidate(999L) == 504L);\n    assert(candidate(9999L) == 31626L);\n    assert(candidate(99L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_125_find_length", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n*/\nlong find_length(string string) \n", "test": "unittest\n{\n    alias candidate = find_length;\n\n    assert(candidate(\"11000010001\") == 6L);\n    assert(candidate(\"10111\") == 1L);\n    assert(candidate(\"11011101100101\") == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_126_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of common divisors of two given numbers.\n*/\nlong sum(long a, long b) \n", "test": "unittest\n{\n    alias candidate = sum;\n\n    assert(candidate(10L, 15L) == 6L);\n    assert(candidate(100L, 150L) == 93L);\n    assert(candidate(4L, 6L) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_127_multiply_int", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to multiply two integers.\n*/\nlong multiply_int(long x, long y) \n", "test": "unittest\n{\n    alias candidate = multiply_int;\n\n    assert(candidate(10L, 20L) == 200L);\n    assert(candidate(5L, 10L) == 50L);\n    assert(candidate(4L, 8L) == 32L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_128_long_words", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find words that are longer than n characters from a given array of words.\n*/\nstring[] long_words(long n, string str) \n", "test": "unittest\n{\n    alias candidate = long_words;\n\n    assert(candidate(3L, \"python is a programming language\") == [\"python\", \"programming\", \"language\"]);\n    assert(candidate(2L, \"writing a program\") == [\"writing\", \"program\"]);\n    assert(candidate(5L, \"sorting list\") == [\"sorting\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate whether the matrix is a magic square.\n*/\nbool magic_square_test(long[][] my_matrix) \n", "test": "unittest\n{\n    alias candidate = magic_square_test;\n\n    assert(candidate([[7L, 12L, 1L, 14L], [2L, 13L, 8L, 11L], [16L, 3L, 10L, 5L], [9L, 6L, 15L, 4L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 8L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 7L]]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the item with maximum frequency in a given array.\n*/\nlong max_occurrences(long[] nums) \n", "test": "unittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to reverse only the vowels of a given string (where y is not a vowel).\n*/\nstring reverse_vowels(string str1) \n", "test": "unittest\n{\n    alias candidate = reverse_vowels;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"USA\") == \"ASU\");\n    assert(candidate(\"ab\") == \"ab\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_132_tup_string", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert an array to a string.\n*/\nstring tup_string(string[] tup1) \n", "test": "unittest\n{\n    alias candidate = tup_string;\n\n    assert(candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]) == \"exercises\");\n    assert(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == \"python\");\n    assert(candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]) == \"program\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the sum of the negative numbers of a given array of numbers.\n*/\nlong sum_negativenum(long[] nums) \n", "test": "unittest\n{\n    alias candidate = sum_negativenum;\n\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == -32L);\n    assert(candidate([10L, 15L, -14L, 13L, -18L, 12L, -20L]) == -52L);\n    assert(candidate([19L, -65L, 57L, 39L, 152L, -639L, 121L, 44L, 90L, -190L]) == -894L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth hexagonal number.\n*/\nlong hexagonal_num(long n) \n", "test": "unittest\n{\n    alias candidate = hexagonal_num;\n\n    assert(candidate(10L) == 190L);\n    assert(candidate(5L) == 45L);\n    assert(candidate(7L) == 91L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n*/\nbool is_Sum_Of_Powers_Of_Two(long n) \n", "test": "unittest\n{\n    alias candidate = is_Sum_Of_Powers_Of_Two;\n\n    assert(candidate(10L) == true);\n    assert(candidate(7L) == false);\n    assert(candidate(14L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an array of elements.\n*/\nlong[] pancake_sort(long[] nums) \n", "test": "unittest\n{\n    alias candidate = pancake_sort;\n\n    assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);\n    assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);\n    assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_142_count_samepair", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count number items that are identical in the same position of three given arrays.\n*/\nlong count_samepair(long[] list1, long[] list2, long[] list3) \n", "test": "unittest\n{\n    alias candidate = count_samepair;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 9L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 9L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 8L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 2L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 8L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 8L]) == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the maximum difference between any two elements in a given array.\n*/\nlong max_Abs_Diff(long[] arr) \n", "test": "unittest\n{\n    alias candidate = max_Abs_Diff;\n\n    assert(candidate([2L, 1L, 5L, 3L]) == 4L);\n    assert(candidate([9L, 3L, 2L, 5L, 1L]) == 8L);\n    assert(candidate([3L, 2L, 1L]) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_160_find_solution", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n*/\nNullable!(Tuple!(long, long)) find_solution(long a, long b, long n) \n", "test": "unittest\n{\n    alias candidate = find_solution;\n\n{\n        auto result = candidate(2L, 3L, 7L);\n        assert(!result.isNull && result.get == tuple(2L, 1L));\n}\n\n{\n        auto result = candidate(4L, 2L, 7L);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(1L, 13L, 17L);\n        assert(!result.isNull && result.get == tuple(4L, 1L));\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_161_remove_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all elements from a given array present in another array.\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n", "test": "unittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_162_sum_series", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n*/\nlong sum_series(long n) \n", "test": "unittest\n{\n    alias candidate = sum_series;\n\n    assert(candidate(6L) == 12L);\n    assert(candidate(10L) == 30L);\n    assert(candidate(9L) == 25L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n*/\nbool are_equivalent(long num1, long num2) \n", "test": "unittest\n{\n    alias candidate = are_equivalent;\n\n    assert(candidate(36L, 57L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(23L, 47L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_165_count_char_position", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n*/\nlong count_char_position(string str1) \n", "test": "unittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that counts the number of pairs of integers in an array that xor to an even number.\n*/\nlong find_even_pair(long[] A) \n", "test": "unittest\n{\n    alias candidate = find_even_pair;\n\n    assert(candidate([5L, 4L, 7L, 2L, 1L]) == 4L);\n    assert(candidate([7L, 2L, 8L, 1L, 0L, 5L, 11L]) == 9L);\n    assert(candidate([1L, 2L, 3L]) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n*/\nlong next_power_of_2(long n) \n", "test": "unittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_168_frequency", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the number of occurrences of a number in a given array.\n*/\nlong frequency(long[] a, long x) \n", "test": "unittest\n{\n    alias candidate = frequency;\n\n    assert(candidate([1L, 2L, 3L], 4L) == 0L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 3L, 4L], 3L) == 3L);\n    assert(candidate([0L, 1L, 2L, 3L, 1L, 2L], 1L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the sum of numbers in an array within a range specified by two indices.\n*/\nlong sum_range_list(long[] list1, long m, long n) \n", "test": "unittest\n{\n    alias candidate = sum_range_list;\n\n    assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 8L, 10L) == 29L);\n    assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 5L, 7L) == 16L);\n    assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 7L, 10L) == 38L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n*/\nlong perimeter_pentagon(long a) \n", "test": "unittest\n{\n    alias candidate = perimeter_pentagon;\n\n    assert(candidate(5L) == 25L);\n    assert(candidate(10L) == 50L);\n    assert(candidate(15L) == 75L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_172_count_occurance", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n*/\nlong count_occurance(string s) \n", "test": "unittest\n{\n    alias candidate = count_occurance;\n\n    assert(candidate(\"letstdlenstdporstd\") == 3L);\n    assert(candidate(\"truststdsolensporsd\") == 1L);\n    assert(candidate(\"makestdsostdworthit\") == 2L);\n    assert(candidate(\"stds\") == 1L);\n    assert(candidate(\"\") == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_223_is_majority", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n*/\nbool is_majority(long[] arr, long n, long x) \n", "test": "unittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of set bits (binary digits with value 1) in a given number.\n*/\nlong count_Set_Bits(long n) \n", "test": "unittest\n{\n    alias candidate = count_Set_Bits;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 1L);\n    assert(candidate(6L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove the characters which have odd index values of a given string.\n*/\nstring odd_values_string(string str) \n", "test": "unittest\n{\n    alias candidate = odd_values_string;\n\n    assert(candidate(\"abcdef\") == \"ace\");\n    assert(candidate(\"python\") == \"pto\");\n    assert(candidate(\"data\") == \"dt\");\n    assert(candidate(\"lambs\") == \"lms\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_227_min_of_three", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find minimum of three numbers.\n*/\nlong min_of_three(long a, long b, long c) \n", "test": "unittest\n{\n    alias candidate = min_of_three;\n\n    assert(candidate(10L, 20L, 0L) == 0L);\n    assert(candidate(19L, 15L, 18L) == 15L);\n    assert(candidate(-10L, -20L, -30L) == -30L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether all the bits are unset in the given range or not.\n*/\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) \n", "test": "unittest\n{\n    alias candidate = all_Bits_Set_In_The_Given_Range;\n\n    assert(candidate(4L, 1L, 2L) == true);\n    assert(candidate(17L, 2L, 4L) == true);\n    assert(candidate(39L, 4L, 6L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n*/\nlong[] re_arrange_array(long[] arr, long n) \n", "test": "unittest\n{\n    alias candidate = re_arrange_array;\n\n    assert(candidate([-1L, 2L, -3L, 4L, 5L, 6L, -7L, 8L, 9L], 9L) == [-1L, -3L, -7L, 4L, 5L, 6L, 2L, 8L, 9L]);\n    assert(candidate([12L, -14L, -26L, 13L, 15L], 5L) == [-14L, -26L, 12L, 13L, 15L]);\n    assert(candidate([10L, 24L, 36L, -42L, -39L, -78L, 85L], 7L) == [-42L, -39L, -78L, 10L, 24L, 36L, 85L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_230_replace_blank", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n*/\nstring replace_blank(string str1, string char) \n", "test": "unittest\n{\n    alias candidate = replace_blank;\n\n    assert(candidate(\"hello people\", \"@\") == \"hello@people\");\n    assert(candidate(\"python program language\", \"$\") == \"python$program$language\");\n    assert(candidate(\"blank space\", \"-\") == \"blank-space\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_234_volume_cube", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the volume of a cube given its side length.\n*/\nlong volume_cube(long l) \n", "test": "unittest\n{\n    alias candidate = volume_cube;\n\n    assert(candidate(3L) == 27L);\n    assert(candidate(2L) == 8L);\n    assert(candidate(5L) == 125L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of non-empty substrings of a given string.\n*/\nlong number_of_substrings(string str) \n", "test": "unittest\n{\n    alias candidate = number_of_substrings;\n\n    assert(candidate(\"abc\") == 6L);\n    assert(candidate(\"abcd\") == 10L);\n    assert(candidate(\"abcde\") == 15L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n*/\nlong get_total_number_of_sequences(long m, long n) \n", "test": "unittest\n{\n    alias candidate = get_total_number_of_sequences;\n\n    assert(candidate(10L, 4L) == 4L);\n    assert(candidate(5L, 2L) == 6L);\n    assert(candidate(16L, 3L) == 84L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_242_count_charac", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the total number of characters in a string.\n*/\nlong count_charac(string str1) \n", "test": "unittest\n{\n    alias candidate = count_charac;\n\n    assert(candidate(\"python programming\") == 18L);\n    assert(candidate(\"language\") == 8L);\n    assert(candidate(\"words\") == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the next perfect square greater than a given number.\n*/\nlong next_Perfect_Square(long N) \n", "test": "unittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_245_max_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n*/\nlong max_sum(long[] arr) \n", "test": "unittest\n{\n    alias candidate = max_sum;\n\n    assert(candidate([1L, 15L, 51L, 45L, 33L, 100L, 12L, 18L, 9L]) == 194L);\n    assert(candidate([80L, 60L, 30L, 40L, 20L, 10L]) == 210L);\n    assert(candidate([2L, 3L, 14L, 16L, 21L, 23L, 29L, 30L]) == 138L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_247_lps", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n*/\nlong lps(string str) \n", "test": "unittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_249_intersection_array", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the intersection of two arrays.\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n", "test": "unittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_250_count_X", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in a tuple and an element and counts the occcurences of the element in the array.\n*/\nlong count_X(long[] tup, long x) \n", "test": "unittest\n{\n    alias candidate = count_X;\n\n    assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 4L) == 0L);\n    assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 10L) == 3L);\n    assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 8L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_251_insert_element", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\n*/\nstring[] insert_element(string[] list, string element) \n", "test": "unittest\n{\n    alias candidate = insert_element;\n\n    assert(candidate([\"Red\", \"Green\", \"Black\"], \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]);\n    assert(candidate([\"python\", \"java\"], \"program\") == [\"program\", \"python\", \"program\", \"java\"]);\n    assert(candidate([\"happy\", \"sad\"], \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_252_convert", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to convert complex numbers to polar coordinates.\n*/\nTuple!(float, float) convert(long numbers) \n", "test": "unittest\n{\n    alias candidate = convert;\n\n    assert(candidate(1L) == tuple(1.0, 0.0));\n    assert(candidate(4L) == tuple(4.0, 0.0));\n    assert(candidate(5L) == tuple(5.0, 0.0));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\n*/\nstring[][] combinations_colors(string[] l, long n) \n", "test": "unittest\n{\n    alias candidate = combinations_colors;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\"], 1L) == [[\"Red\"], [\"Green\"], [\"Blue\"]]);\n    assert(candidate([\"Red\", \"Green\", \"Blue\"], 2L) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);\n    assert(candidate([\"Red\", \"Green\", \"Blue\"], 3L) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n*/\nlong count_Primes_nums(long n) \n", "test": "unittest\n{\n    alias candidate = count_Primes_nums;\n\n    assert(candidate(5L) == 2L);\n    assert(candidate(10L) == 4L);\n    assert(candidate(100L) == 25L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in two numbers and returns an array with the second number and then the first number.\n*/\nlong[] swap_numbers(long a, long b) \n", "test": "unittest\n{\n    alias candidate = swap_numbers;\n\n    assert(candidate(10L, 20L) == [20L, 10L]);\n    assert(candidate(15L, 17L) == [17L, 15L]);\n    assert(candidate(100L, 200L) == [200L, 100L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to maximize the given two arrays.\n*/\nlong[][] maximize_elements(long[][] test_tup1, long[][] test_tup2) \n", "test": "unittest\n{\n    alias candidate = maximize_elements;\n\n    assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[6L, 7L], [4L, 9L], [2L, 9L], [7L, 10L]]);\n    assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[7L, 8L], [5L, 10L], [3L, 10L], [8L, 11L]]);\n    assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[8L, 9L], [6L, 11L], [4L, 11L], [9L, 12L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_260_newman_prime", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n*/\nlong newman_prime(long n) \n", "test": "unittest\n{\n    alias candidate = newman_prime;\n\n    assert(candidate(3L) == 7L);\n    assert(candidate(4L) == 17L);\n    assert(candidate(5L) == 41L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_261_division_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n*/\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = division_elements;\n\n    assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(2L, 2L, 2L, 3L));\n    assert(candidate(tuple(12L, 6L, 8L, 16L), tuple(6L, 3L, 4L, 4L)) == tuple(2L, 2L, 2L, 4L));\n    assert(candidate(tuple(20L, 14L, 36L, 18L), tuple(5L, 7L, 6L, 9L)) == tuple(4L, 2L, 6L, 2L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_264_dog_age", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate a dog's age in dog's years.\n*/\nlong dog_age(long h_age) \n", "test": "unittest\n{\n    alias candidate = dog_age;\n\n    assert(candidate(12L) == 61L);\n    assert(candidate(15L) == 73L);\n    assert(candidate(24L) == 109L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the lateral surface area of a cube given its side length.\n*/\nlong lateralsurface_cube(long l) \n", "test": "unittest\n{\n    alias candidate = lateralsurface_cube;\n\n    assert(candidate(5L) == 100L);\n    assert(candidate(9L) == 324L);\n    assert(candidate(10L) == 400L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_267_square_Sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n*/\nlong square_Sum(long n) \n", "test": "unittest\n{\n    alias candidate = square_Sum;\n\n    assert(candidate(2L) == 10L);\n    assert(candidate(3L) == 35L);\n    assert(candidate(4L) == 84L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_268_find_star_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n'th star number.\n*/\nlong find_star_num(long n) \n", "test": "unittest\n{\n    alias candidate = find_star_num;\n\n    assert(candidate(3L) == 37L);\n    assert(candidate(4L) == 73L);\n    assert(candidate(5L) == 121L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_269_ascii_value", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the ascii value of a character.\n*/\nlong ascii_value(string k) \n", "test": "unittest\n{\n    alias candidate = ascii_value;\n\n    assert(candidate(\"A\") == 65L);\n    assert(candidate(\"R\") == 82L);\n    assert(candidate(\"S\") == 83L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of even numbers at even positions of an array.\n*/\nlong sum_even_and_even_index(long[] arr) \n", "test": "unittest\n{\n    alias candidate = sum_even_and_even_index;\n\n    assert(candidate([5L, 6L, 12L, 1L, 18L, 8L]) == 30L);\n    assert(candidate([3L, 20L, 17L, 9L, 2L, 10L, 18L, 13L, 6L, 18L]) == 26L);\n    assert(candidate([5L, 6L, 12L, 1L]) == 12L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n*/\nlong even_Power_Sum(long n) \n", "test": "unittest\n{\n    alias candidate = even_Power_Sum;\n\n    assert(candidate(2L) == 1056L);\n    assert(candidate(3L) == 8832L);\n    assert(candidate(1L) == 32L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_272_rear_extract", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array of tuples and returns an array containing the rear element of each tuple.\n*/\nlong[] rear_extract(Tuple!(long, string, long)[] test_list) \n", "test": "unittest\n{\n    alias candidate = rear_extract;\n\n    assert(candidate([tuple(1L, \"Rash\", 21L), tuple(2L, \"Varsha\", 20L), tuple(3L, \"Kil\", 19L)]) == [21L, 20L, 19L]);\n    assert(candidate([tuple(1L, \"Sai\", 36L), tuple(2L, \"Ayesha\", 25L), tuple(3L, \"Salman\", 45L)]) == [36L, 25L, 45L]);\n    assert(candidate([tuple(1L, \"Sudeep\", 14L), tuple(2L, \"Vandana\", 36L), tuple(3L, \"Dawood\", 56L)]) == [14L, 36L, 56L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_273_substract_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n*/\nTuple!(long, long, long) substract_elements(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = substract_elements;\n\n    assert(candidate(tuple(10L, 4L, 5L), tuple(2L, 5L, 18L)) == tuple(8L, -1L, -13L));\n    assert(candidate(tuple(11L, 2L, 3L), tuple(24L, 45L, 16L)) == tuple(-13L, -43L, -13L));\n    assert(candidate(tuple(7L, 18L, 9L), tuple(10L, 11L, 12L)) == tuple(-3L, 7L, -3L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n*/\nlong even_binomial_Coeff_Sum(long n) \n", "test": "unittest\n{\n    alias candidate = even_binomial_Coeff_Sum;\n\n    assert(candidate(4L) == 8L);\n    assert(candidate(6L) == 32L);\n    assert(candidate(2L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_277_dict_filter", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an associative array and integer n and filters the associative array to only include entries with values greater than or equal to n.\n*/\nNullable!(long[string]) dict_filter(Nullable!(long[string]) dict, long n) \n", "test": "unittest\n{\n    alias candidate = dict_filter;\n\n{\n        auto result = candidate([\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Kierra Gentry\": 165L, \"Pierre Cox\": 190L].nullable, 170L);\n        assert(!result.isNull && result.get == [\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Pierre Cox\": 190L]);\n}\n\n{\n        auto result = candidate([\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Kierra Gentry\": 165L, \"Pierre Cox\": 190L].nullable, 180L);\n        assert(!result.isNull && result.get == [\"Alden Cantrell\": 180L, \"Pierre Cox\": 190L]);\n}\n\n{\n        auto result = candidate([\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Kierra Gentry\": 165L, \"Pierre Cox\": 190L].nullable, 190L);\n        assert(!result.isNull && result.get == [\"Pierre Cox\": 190L]);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth decagonal number.\n*/\nlong is_num_decagonal(long n) \n", "test": "unittest\n{\n    alias candidate = is_num_decagonal;\n\n    assert(candidate(3L) == 27L);\n    assert(candidate(7L) == 175L);\n    assert(candidate(10L) == 370L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_280_sequential_search", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n*/\nTuple!(bool, long) sequential_search(long[] dlist, long item) \n", "test": "unittest\n{\n    alias candidate = sequential_search;\n\n    assert(candidate([11L, 23L, 58L, 31L, 56L, 77L, 43L, 12L, 65L, 19L], 31L) == tuple(true, 3L));\n    assert(candidate([12L, 32L, 45L, 62L, 35L, 47L, 44L, 61L], 61L) == tuple(true, 7L));\n    assert(candidate([9L, 10L, 17L, 19L, 22L, 39L, 48L, 56L], 48L) == tuple(true, 6L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_281_all_unique", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check if the elements of a given array are unique or not.\n*/\nbool all_unique(long[] test_list) \n", "test": "unittest\n{\n    alias candidate = all_unique;\n\n    assert(candidate([1L, 2L, 3L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_282_sub_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to subtract two arrays element-wise.\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n", "test": "unittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_283_validate", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n*/\nbool validate(long n) \n", "test": "unittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n*/\nbool text_match_two_three(string text) \n", "test": "unittest\n{\n    alias candidate = text_match_two_three;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abbbba\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n*/\nlong max_sub_array_sum_repeated(long[] a, long n, long k) \n", "test": "unittest\n{\n    alias candidate = max_sub_array_sum_repeated;\n\n    assert(candidate([10L, 20L, -30L, -1L], 4L, 3L) == 30L);\n    assert(candidate([-1L, 10L, 20L], 3L, 2L) == 59L);\n    assert(candidate([-1L, -2L, -3L], 3L, 3L) == -1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_287_square_Sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n*/\nlong square_Sum(long n) \n", "test": "unittest\n{\n    alias candidate = square_Sum;\n\n    assert(candidate(2L) == 20L);\n    assert(candidate(3L) == 56L);\n    assert(candidate(4L) == 120L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_290_max_length", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the array of maximum length in an array of arrays.\n*/\nTuple!(long, long[]) max_length(long[][] list1) \n", "test": "unittest\n{\n    alias candidate = max_length;\n\n    assert(candidate([[0L], [1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == tuple(3L, [13L, 15L, 17L]));\n    assert(candidate([[1L], [5L, 7L], [10L, 12L, 14L, 15L]]) == tuple(4L, [10L, 12L, 14L, 15L]));\n    assert(candidate([[5L], [15L, 20L, 25L]]) == tuple(3L, [15L, 20L, 25L]));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n*/\nlong count_no_of_ways(long n, long k) \n", "test": "unittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_292_find", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find quotient of two numbers (rounded down to the nearest integer).\n*/\nlong find(long n, long m) \n", "test": "unittest\n{\n    alias candidate = find;\n\n    assert(candidate(10L, 3L) == 3L);\n    assert(candidate(4L, 2L) == 2L);\n    assert(candidate(20L, 5L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the third side of a right angled triangle.\n*/\nfloat otherside_rightangle(long w, long h) \n", "test": "unittest\n{\n    alias candidate = otherside_rightangle;\n\n    assert(candidate(7L, 8L) == 10.63014581273465);\n    assert(candidate(3L, 4L) == 5L);\n    assert(candidate(7L, 15L) == 16.55294535724685);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_295_sum_div", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to return the sum of all divisors of a number.\n*/\nlong sum_div(long number) \n", "test": "unittest\n{\n    alias candidate = sum_div;\n\n    assert(candidate(8L) == 7L);\n    assert(candidate(12L) == 16L);\n    assert(candidate(7L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count inversions in an array.\n*/\nlong get_Inv_Count(long[] arr) \n", "test": "unittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the maximum aggregate from the array of tuples.\n*/\nTuple!(string, long) max_aggregate(Tuple!(string, long)[] stdata) \n", "test": "unittest\n{\n    alias candidate = max_aggregate;\n\n    assert(candidate([tuple(\"Juan Whelan\", 90L), tuple(\"Sabah Colley\", 88L), tuple(\"Peter Nichols\", 7L), tuple(\"Juan Whelan\", 122L), tuple(\"Sabah Colley\", 84L)]) == tuple(\"Juan Whelan\", 212L));\n    assert(candidate([tuple(\"Juan Whelan\", 50L), tuple(\"Sabah Colley\", 48L), tuple(\"Peter Nichols\", 37L), tuple(\"Juan Whelan\", 22L), tuple(\"Sabah Colley\", 14L)]) == tuple(\"Juan Whelan\", 72L));\n    assert(candidate([tuple(\"Juan Whelan\", 10L), tuple(\"Sabah Colley\", 20L), tuple(\"Peter Nichols\", 30L), tuple(\"Juan Whelan\", 40L), tuple(\"Sabah Colley\", 50L)]) == tuple(\"Sabah Colley\", 70L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_304_find_Element", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find element at a given index after number of rotations.\n*/\nlong find_Element(long[] arr, long[][] ranges, long rotations, long index) \n", "test": "unittest\n{\n    alias candidate = find_Element;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [[0L, 2L], [0L, 3L]], 2L, 1L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L], [[0L, 1L], [0L, 2L]], 1L, 2L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [[0L, 1L], [0L, 2L]], 1L, 1L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_305_start_withp", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to return two words from an array of words starting with letter 'p'.\n*/\nTuple!(string, string) start_withp(string[] words) \n", "test": "unittest\n{\n    alias candidate = start_withp;\n\n    assert(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == tuple(\"Python\", \"PHP\"));\n    assert(candidate([\"Python Programming\", \"Java Programming\"]) == tuple(\"Python\", \"Programming\"));\n    assert(candidate([\"Pqrst Pqr\", \"qrstuv\"]) == tuple(\"Pqrst\", \"Pqr\"));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n*/\nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n", "test": "unittest\n{\n    alias candidate = max_sum_increasing_subseq;\n\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 4L, 6L) == 11L);\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 2L, 5L) == 7L);\n    assert(candidate([11L, 15L, 19L, 21L, 26L, 28L, 31L], 7L, 2L, 4L) == 71L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_308_large_product", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n*/\nlong[] large_product(long[] nums1, long[] nums2, long N) \n", "test": "unittest\n{\n    alias candidate = large_product;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 3L) == [60L, 54L, 50L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 4L) == [60L, 54L, 50L, 48L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 5L) == [60L, 54L, 50L, 48L, 45L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_309_maximum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the maximum of two numbers.\n*/\nlong maximum(long a, long b) \n", "test": "unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate(5L, 10L) == 10L);\n    assert(candidate(-1L, -2L) == -1L);\n    assert(candidate(9L, 7L) == 9L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a given string to an array of characters.\n*/\nstring[] string_to_tuple(string str1) \n", "test": "unittest\n{\n    alias candidate = string_to_tuple;\n\n    assert(candidate(\"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]);\n    assert(candidate(\"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"]);\n    assert(candidate(\"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the highest power of 2 that is less than or equal to n.\n*/\nlong highest_Power_of_2(long n) \n", "test": "unittest\n{\n    alias candidate = highest_Power_of_2;\n\n    assert(candidate(10L) == 8L);\n    assert(candidate(19L) == 16L);\n    assert(candidate(32L) == 32L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_389_find_lucas", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n'th lucas number.\n*/\nlong find_lucas(long n) \n", "test": "unittest\n{\n    alias candidate = find_lucas;\n\n    assert(candidate(9L) == 76L);\n    assert(candidate(4L) == 7L);\n    assert(candidate(3L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert more than one array to nested associative array.\n*/\nNone[] convert_list_dictionary(string[] l1, string[] l2, long[] l3) \n", "test": "unittest\n{\n    alias candidate = convert_list_dictionary;\n\n    assert(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85L, 98L, 89L, 92L]) == [[\"S001\": [\"Adina Park\": 85L].nullable].nullable, [\"S002\": [\"Leyton Marsh\": 98L].nullable].nullable, [\"S003\": [\"Duncan Boyle\": 89L].nullable].nullable, [\"S004\": [\"Saim Richards\": 92L].nullable].nullable]);\n    assert(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100L, 200L, 300L, 400L]) == [[\"abc\": [\"python\": 100L].nullable].nullable, [\"def\": [\"program\": 200L].nullable].nullable, [\"ghi\": [\"language\": 300L].nullable].nullable, [\"jkl\": [\"programs\": 400L].nullable].nullable]);\n    assert(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10L, 20L, 30L, 40L]) == [[\"A1\": [\"java\": 10L].nullable].nullable, [\"A2\": [\"C\": 20L].nullable].nullable, [\"A3\": [\"C++\": 30L].nullable].nullable, [\"A4\": [\"DBMS\": 40L].nullable].nullable]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n*/\nlong get_max_sum(long n) \n", "test": "unittest\n{\n    alias candidate = get_max_sum;\n\n    assert(candidate(60L) == 106L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(2L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_393_max_length_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the array with maximum length.\n*/\nTuple!(long, long[]) max_length_list(long[][] input_list) \n", "test": "unittest\n{\n    alias candidate = max_length_list;\n\n    assert(candidate([[0L], [1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == tuple(3L, [13L, 15L, 17L]));\n    assert(candidate([[1L, 2L, 3L, 4L, 5L], [1L, 2L, 3L, 4L], [1L, 2L, 3L], [1L, 2L], [1L]]) == tuple(5L, [1L, 2L, 3L, 4L, 5L]));\n    assert(candidate([[3L, 4L, 5L], [6L, 7L, 8L, 9L], [10L, 11L, 12L]]) == tuple(4L, [6L, 7L, 8L, 9L]));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_394_check_distinct", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if given array contains no duplicates.\n*/\nbool check_distinct(long[] test_tup) \n", "test": "unittest\n{\n    alias candidate = check_distinct;\n\n    assert(candidate([1L, 4L, 5L, 6L, 1L, 4L]) == false);\n    assert(candidate([1L, 4L, 5L, 6L]) == true);\n    assert(candidate([2L, 3L, 4L, 5L, 6L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first non-repeated character in a given string.\n*/\nNullable!(string) first_non_repeating_character(string str1) \n", "test": "unittest\n{\n    alias candidate = first_non_repeating_character;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"ababc\");\n        assert(!result.isNull && result.get == \"c\");\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_396_check_char", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n*/\nstring check_char(string string) \n", "test": "unittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_397_median_numbers", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the median of three numbers.\n*/\nfloat median_numbers(long a, long b, long c) \n", "test": "unittest\n{\n    alias candidate = median_numbers;\n\n    assert(candidate(25L, 55L, 65L) == 55.0);\n    assert(candidate(20L, 10L, 30L) == 20.0);\n    assert(candidate(15L, 45L, 75L) == 45.0);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n*/\nTuple!(long, long, long, long) bitwise_xor(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = bitwise_xor;\n\n    assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(15L, 6L, 5L, 10L));\n    assert(candidate(tuple(11L, 5L, 7L, 10L), tuple(6L, 3L, 4L, 4L)) == tuple(13L, 6L, 3L, 14L));\n    assert(candidate(tuple(12L, 6L, 8L, 11L), tuple(7L, 4L, 5L, 6L)) == tuple(11L, 2L, 13L, 13L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_400_extract_freq", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract the number of unique tuples in the given array.\n*/\nlong extract_freq(Tuple!(long, long)[] test_list) \n", "test": "unittest\n{\n    alias candidate = extract_freq;\n\n    assert(candidate([tuple(3L, 4L), tuple(1L, 2L), tuple(4L, 3L), tuple(5L, 6L)]) == 3L);\n    assert(candidate([tuple(4L, 15L), tuple(2L, 3L), tuple(5L, 4L), tuple(6L, 7L)]) == 4L);\n    assert(candidate([tuple(5L, 16L), tuple(2L, 3L), tuple(6L, 5L), tuple(6L, 9L)]) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to perform index wise addition of array elements in the given two nested arrays.\n*/\nlong[][] add_nested_tuples(long[][] test_tup1, long[][] test_tup2) \n", "test": "unittest\n{\n    alias candidate = add_nested_tuples;\n\n    assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[7L, 10L], [7L, 14L], [3L, 10L], [8L, 13L]]);\n    assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[9L, 12L], [9L, 16L], [5L, 12L], [10L, 15L]]);\n    assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[11L, 14L], [11L, 18L], [7L, 14L], [12L, 17L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_404_minimum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the minimum of two numbers.\n*/\nlong minimum(long a, long b) \n", "test": "unittest\n{\n    alias candidate = minimum;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(-5L, -4L) == -5L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_406_find_Parity", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find whether the parity of a given number is odd.\n*/\nbool find_Parity(long x) \n", "test": "unittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n*/\nlong[][] k_smallest_pairs(long[] nums1, long[] nums2, long k) \n", "test": "unittest\n{\n    alias candidate = k_smallest_pairs;\n\n    assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 2L) == [[1L, 2L], [1L, 4L]]);\n    assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 1L) == [[1L, 2L]]);\n    assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 7L) == [[1L, 2L], [1L, 4L], [3L, 2L], [1L, 6L], [3L, 4L], [3L, 6L], [7L, 2L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the minimum product from the pairs of tuples within a given array.\n*/\nlong min_product_tuple(Tuple!(long, long)[] list1) \n", "test": "unittest\n{\n    alias candidate = min_product_tuple;\n\n    assert(candidate([tuple(2L, 7L), tuple(2L, 6L), tuple(1L, 8L), tuple(4L, 9L)]) == 8L);\n    assert(candidate([tuple(10L, 20L), tuple(15L, 2L), tuple(5L, 10L)]) == 30L);\n    assert(candidate([tuple(11L, 44L), tuple(10L, 15L), tuple(20L, 5L), tuple(12L, 9L)]) == 100L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert the given snake case string to camel case string.\n*/\nstring snake_to_camel(string word) \n", "test": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_412_remove_odd", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove odd numbers from a given array.\n*/\nlong[] remove_odd(long[] l) \n", "test": "unittest\n{\n    alias candidate = remove_odd;\n\n    assert(candidate([1L, 2L, 3L]) == [2L]);\n    assert(candidate([2L, 4L, 6L]) == [2L, 4L, 6L]);\n    assert(candidate([10L, 20L, 3L]) == [10L, 20L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_414_overlapping", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n*/\nbool overlapping(long[] list1, long[] list2) \n", "test": "unittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_415_max_Product", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find a pair with highest product from a given array of integers.\n*/\nTuple!(long, long) max_Product(long[] arr) \n", "test": "unittest\n{\n    alias candidate = max_Product;\n\n    assert(candidate([1L, 2L, 3L, 4L, 7L, 0L, 8L, 4L]) == tuple(7L, 8L));\n    assert(candidate([0L, -1L, -2L, -4L, 5L, 0L, -6L]) == tuple(-4L, -6L));\n    assert(candidate([1L, 2L, 3L]) == tuple(2L, 3L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_417_group_tuples", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find common first element in given array of arrays.\n*/\nstring[][] group_tuples(string[][] Input) \n", "test": "unittest\n{\n    alias candidate = group_tuples;\n\n    assert(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]);\n    assert(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]);\n    assert(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the cube sum of first n even natural numbers.\n*/\nlong cube_Sum(long n) \n", "test": "unittest\n{\n    alias candidate = cube_Sum;\n\n    assert(candidate(2L) == 72L);\n    assert(candidate(3L) == 288L);\n    assert(candidate(4L) == 800L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to concatenate each element of tuple by the delimiter.\n*/\nstring concatenate_tuple(Tuple!(string, string, long, string) test_tup) \n", "test": "unittest\n{\n    alias candidate = concatenate_tuple;\n\n    assert(candidate(tuple(\"ID\", \"is\", 4L, \"UTS\")) == \"ID-is-4-UTS\");\n    assert(candidate(tuple(\"QWE\", \"is\", 4L, \"RTY\")) == \"QWE-is-4-RTY\");\n    assert(candidate(tuple(\"ZEN\", \"is\", 4L, \"OP\")) == \"ZEN-is-4-OP\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the average of cubes of first n natural numbers.\n*/\nfloat find_Average_Of_Cube(long n) \n", "test": "unittest\n{\n    alias candidate = find_Average_Of_Cube;\n\n    assert(candidate(2L) == 4.5);\n    assert(candidate(3L) == 12L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_424_extract_rear", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n*/\nstring[] extract_rear(Tuple!(string, string, string) test_tuple) \n", "test": "unittest\n{\n    alias candidate = extract_rear;\n\n    assert(candidate(tuple(\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"]);\n    assert(candidate(tuple(\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"]);\n    assert(candidate(tuple(\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to filter odd numbers.\n*/\nlong[] filter_oddnumbers(long[] nums) \n", "test": "unittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_427_change_date_format", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n*/\nstring change_date_format(string dt) \n", "test": "unittest\n{\n    alias candidate = change_date_format;\n\n    assert(candidate(\"2026-01-02\") == \"02-01-2026\");\n    assert(candidate(\"2020-11-13\") == \"13-11-2020\");\n    assert(candidate(\"2021-04-26\") == \"26-04-2021\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_428_shell_sort", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort the given array by using shell sort.\n*/\nlong[] shell_sort(long[] my_list) \n", "test": "unittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_429_and_tuples", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n*/\nTuple!(long, long, long, long) and_tuples(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = and_tuples;\n\n    assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(0L, 0L, 2L, 1L));\n    assert(candidate(tuple(1L, 2L, 3L, 4L), tuple(5L, 6L, 7L, 8L)) == tuple(1L, 2L, 3L, 0L));\n    assert(candidate(tuple(8L, 9L, 11L, 12L), tuple(7L, 13L, 14L, 17L)) == tuple(0L, 9L, 10L, 0L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the directrix of a parabola.\n*/\nlong parabola_directrix(long a, long b, long c) \n", "test": "unittest\n{\n    alias candidate = parabola_directrix;\n\n    assert(candidate(5L, 3L, 2L) == -198L);\n    assert(candidate(9L, 8L, 4L) == -2336L);\n    assert(candidate(2L, 4L, 6L) == -130L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the median length of a trapezium.\n*/\nfloat median_trapezium(long base1, long base2, long height) \n", "test": "unittest\n{\n    alias candidate = median_trapezium;\n\n    assert(candidate(15L, 25L, 35L) == 20L);\n    assert(candidate(10L, 20L, 30L) == 15L);\n    assert(candidate(6L, 9L, 4L) == 7.5);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_433_check_greater", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n*/\nbool check_greater(long[] arr, long number) \n", "test": "unittest\n{\n    alias candidate = check_greater;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], 4L) == false);\n    assert(candidate([2L, 3L, 4L, 5L, 6L], 8L) == true);\n    assert(candidate([9L, 7L, 4L, 8L, 6L, 1L], 11L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_434_text_match_one", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an a followed by one or more b's.\n*/\nbool text_match_one(string text) \n", "test": "unittest\n{\n    alias candidate = text_match_one;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abba\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_435_last_Digit", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the last digit of a given number.\n*/\nlong last_Digit(long n) \n", "test": "unittest\n{\n    alias candidate = last_Digit;\n\n    assert(candidate(123L) == 3L);\n    assert(candidate(25L) == 5L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_436_neg_nos", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to return the negative numbers in an array.\n*/\nlong[] neg_nos(long[] list1) \n", "test": "unittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_437_remove_odd", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove odd characters in a string.\n*/\nstring remove_odd(string str1) \n", "test": "unittest\n{\n    alias candidate = remove_odd;\n\n    assert(candidate(\"python\") == \"yhn\");\n    assert(candidate(\"program\") == \"rga\");\n    assert(candidate(\"language\") == \"agae\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count bidirectional tuple pairs.\n*/\nlong count_bidirectional(Tuple!(long, long)[] test_list) \n", "test": "unittest\n{\n    alias candidate = count_bidirectional;\n\n    assert(candidate([tuple(5L, 6L), tuple(1L, 2L), tuple(6L, 5L), tuple(9L, 1L), tuple(6L, 5L), tuple(2L, 1L)]) == 3L);\n    assert(candidate([tuple(5L, 6L), tuple(1L, 3L), tuple(6L, 5L), tuple(9L, 1L), tuple(6L, 5L), tuple(2L, 1L)]) == 2L);\n    assert(candidate([tuple(5L, 6L), tuple(1L, 2L), tuple(6L, 5L), tuple(9L, 2L), tuple(6L, 5L), tuple(2L, 1L)]) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to join an array of multiple integers into a single integer.\n*/\nlong multiple_to_single(long[] L) \n", "test": "unittest\n{\n    alias candidate = multiple_to_single;\n\n    assert(candidate([11L, 33L, 50L]) == 113350L);\n    assert(candidate([-1L, 2L, 3L, 4L, 5L, 6L]) == -123456L);\n    assert(candidate([10L, 15L, 20L, 25L]) == 10152025L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the first adverb and their positions in a given sentence.\n*/\nTuple!(long, long, string) find_adverb_position(string text) \n", "test": "unittest\n{\n    alias candidate = find_adverb_position;\n\n    assert(candidate(\"clearly!! we can see the sky\") == tuple(0L, 7L, \"clearly\"));\n    assert(candidate(\"seriously!! there are many roses\") == tuple(0L, 9L, \"seriously\"));\n    assert(candidate(\"unfortunately!! sita is going to home\") == tuple(0L, 13L, \"unfortunately\"));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the surface area of a cube of a given size.\n*/\nlong surfacearea_cube(long l) \n", "test": "unittest\n{\n    alias candidate = surfacearea_cube;\n\n    assert(candidate(5L) == 150L);\n    assert(candidate(3L) == 54L);\n    assert(candidate(10L) == 600L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_442_positive_count", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the ration of positive numbers in an array of integers.\n*/\nfloat positive_count(long[] nums) \n", "test": "unittest\n{\n    alias candidate = positive_count;\n\n    assert(candidate([0L, 1L, 2L, -1L, -5L, 6L, 0L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.54);\n    assert(candidate([2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.69);\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == 0.56);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_443_largest_neg", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the largest negative number from the given array.\n*/\nlong largest_neg(long[] list1) \n", "test": "unittest\n{\n    alias candidate = largest_neg;\n\n    assert(candidate([1L, 2L, 3L, -4L, -6L]) == -6L);\n    assert(candidate([1L, 2L, 3L, -8L, -9L]) == -9L);\n    assert(candidate([1L, 2L, 3L, 4L, -1L]) == -1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to trim each array by k in the given arrays.\n*/\nlong[][] trim_tuple(long[][] test_list, long K) \n", "test": "unittest\n{\n    alias candidate = trim_tuple;\n\n    assert(candidate([[5L, 3L, 2L, 1L, 4L], [3L, 4L, 9L, 2L, 1L], [9L, 1L, 2L, 3L, 5L], [4L, 8L, 2L, 1L, 7L]], 2L) == [[2L], [9L], [2L], [2L]]);\n    assert(candidate([[5L, 3L, 2L, 1L, 4L], [3L, 4L, 9L, 2L, 1L], [9L, 1L, 2L, 3L, 5L], [4L, 8L, 2L, 1L, 7L]], 1L) == [[3L, 2L, 1L], [4L, 9L, 2L], [1L, 2L, 3L], [8L, 2L, 1L]]);\n    assert(candidate([[7L, 8L, 4L, 9L], [11L, 8L, 12L, 4L], [4L, 1L, 7L, 8L], [3L, 6L, 9L, 7L]], 1L) == [[8L, 4L], [8L, 12L], [1L, 7L], [6L, 9L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to perform index wise multiplication of array elements in the given two arrays.\n*/\nlong[][] index_multiplication(long[][] test_tup1, long[][] test_tup2) \n", "test": "unittest\n{\n    alias candidate = index_multiplication;\n\n    assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[6L, 21L], [12L, 45L], [2L, 9L], [7L, 30L]]);\n    assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[14L, 32L], [20L, 60L], [6L, 20L], [16L, 44L]]);\n    assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[24L, 45L], [30L, 77L], [12L, 33L], [27L, 60L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_447_cube_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find cubes of individual elements in an array.\n*/\nlong[] cube_nums(long[] nums) \n", "test": "unittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_448_cal_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the sum of perrin numbers.\n*/\nlong cal_sum(long n) \n", "test": "unittest\n{\n    alias candidate = cal_sum;\n\n    assert(candidate(9L) == 49L);\n    assert(candidate(10L) == 66L);\n    assert(candidate(11L) == 88L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_450_extract_string", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract specified size of strings from a given array of string values.\n*/\nstring[] extract_string(string[] str, long l) \n", "test": "unittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all whitespaces from the given string.\n*/\nstring remove_whitespaces(string text1) \n", "test": "unittest\n{\n    alias candidate = remove_whitespaces;\n\n    assert(candidate(\" Google    Flutter \") == \"GoogleFlutter\");\n    assert(candidate(\" Google    Dart \") == \"GoogleDart\");\n    assert(candidate(\" iOS    Swift \") == \"iOSSwift\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_452_loss_amount", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n", "test": "unittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of even factors of a number.\n*/\nlong sumofFactors(long n) \n", "test": "unittest\n{\n    alias candidate = sumofFactors;\n\n    assert(candidate(18L) == 26L);\n    assert(candidate(30L) == 48L);\n    assert(candidate(6L) == 8L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a word containing 'z'.\n*/\nbool text_match_wordz(string text) \n", "test": "unittest\n{\n    alias candidate = text_match_wordz;\n\n    assert(candidate(\"pythonz.\") == true);\n    assert(candidate(\"xyz.\") == true);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given month number contains 31 days or not.\n*/\nbool check_monthnumb_number(long monthnum2) \n", "test": "unittest\n{\n    alias candidate = check_monthnumb_number;\n\n    assert(candidate(5L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(6L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to reverse each string in a given array of string values.\n*/\nstring[] reverse_string_list(string[] stringlist) \n", "test": "unittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the area of a rectangle.\n*/\nlong rectangle_area(long l, long b) \n", "test": "unittest\n{\n    alias candidate = rectangle_area;\n\n    assert(candidate(10L, 20L) == 200L);\n    assert(candidate(10L, 5L) == 50L);\n    assert(candidate(4L, 2L) == 8L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove uppercase substrings from a given string.\n*/\nstring remove_uppercase(string str1) \n", "test": "unittest\n{\n    alias candidate = remove_uppercase;\n\n    assert(candidate(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\");\n    assert(candidate(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\");\n    assert(candidate(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_460_Extract", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to get the first element of each subarray.\n*/\nlong[] Extract(long[][] lst) \n", "test": "unittest\n{\n    alias candidate = Extract;\n\n    assert(candidate([[1L, 2L], [3L, 4L, 5L], [6L, 7L, 8L, 9L]]) == [1L, 3L, 6L]);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L]]) == [1L, 4L]);\n    assert(candidate([[9L, 8L, 1L], [1L, 2L]]) == [9L, 1L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the upper case characters in a given string.\n*/\nlong upper_ctr(string str) \n", "test": "unittest\n{\n    alias candidate = upper_ctr;\n\n    assert(candidate(\"PYthon\") == 1L);\n    assert(candidate(\"BigData\") == 1L);\n    assert(candidate(\"program\") == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum product subarray of the given array.\n*/\nlong max_subarray_product(long[] arr) \n", "test": "unittest\n{\n    alias candidate = max_subarray_product;\n\n    assert(candidate([1L, -2L, -3L, 0L, 7L, -8L, -2L]) == 112L);\n    assert(candidate([6L, -3L, -10L, 0L, 2L]) == 180L);\n    assert(candidate([-2L, -40L, 0L, -2L, -3L]) == 80L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_464_check_value", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if all values are same in an associative array.\n*/\nbool check_value(Nullable!(long[string]) dict, long n) \n", "test": "unittest\n{\n    alias candidate = check_value;\n\n    assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 10L) == false);\n    assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 12L) == true);\n    assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 5L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_468_max_product", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n*/\nlong max_product(long[] arr) \n", "test": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n*/\nTuple!(long, long, long, long) add_pairwise(Tuple!(long, long, long, long, long) test_tup) \n", "test": "unittest\n{\n    alias candidate = add_pairwise;\n\n    assert(candidate(tuple(1L, 5L, 7L, 8L, 10L)) == tuple(6L, 12L, 15L, 18L));\n    assert(candidate(tuple(2L, 6L, 8L, 9L, 11L)) == tuple(8L, 14L, 17L, 20L));\n    assert(candidate(tuple(3L, 7L, 9L, 10L, 12L)) == tuple(10L, 16L, 19L, 22L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_471_find_remainder", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n*/\nlong find_remainder(long[] arr, long n) \n", "test": "unittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n*/\nbool check_Consecutive(long[] l) \n", "test": "unittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_474_replace_char", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace characters in a string.\n*/\nstring replace_char(string str1, string ch, string newch) \n", "test": "unittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_475_sort_counter", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an associative array by value.\n*/\nTuple!(string, long)[] sort_counter(Nullable!(long[string]) dict1) \n", "test": "unittest\n{\n    alias candidate = sort_counter;\n\n    assert(candidate([\"Math\": 81L, \"Physics\": 83L, \"Chemistry\": 87L].nullable) == [tuple(\"Chemistry\", 87L), tuple(\"Physics\", 83L), tuple(\"Math\", 81L)]);\n    assert(candidate([\"Math\": 400L, \"Physics\": 300L, \"Chemistry\": 250L].nullable) == [tuple(\"Math\", 400L), tuple(\"Physics\", 300L), tuple(\"Chemistry\", 250L)]);\n    assert(candidate([\"Math\": 900L, \"Physics\": 1000L, \"Chemistry\": 1250L].nullable) == [tuple(\"Chemistry\", 1250L), tuple(\"Physics\", 1000L), tuple(\"Math\", 900L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_476_big_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of the largest and smallest value in a given array.\n*/\nlong big_sum(long[] nums) \n", "test": "unittest\n{\n    alias candidate = big_sum;\n\n    assert(candidate([1L, 2L, 3L]) == 4L);\n    assert(candidate([-1L, 2L, 3L, 4L]) == 3L);\n    assert(candidate([2L, 3L, 6L]) == 8L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_477_is_lower", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to convert the given string to lower case.\n*/\nstring is_lower(string string) \n", "test": "unittest\n{\n    alias candidate = is_lower;\n\n    assert(candidate(\"InValid\") == \"invalid\");\n    assert(candidate(\"TruE\") == \"true\");\n    assert(candidate(\"SenTenCE\") == \"sentence\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove lowercase substrings from a given string.\n*/\nstring remove_lowercase(string str1) \n", "test": "unittest\n{\n    alias candidate = remove_lowercase;\n\n    assert(candidate(\"PYTHon\") == \"PYTH\");\n    assert(candidate(\"FInD\") == \"FID\");\n    assert(candidate(\"STRinG\") == \"STRG\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_479_first_Digit", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first digit of a given number.\n*/\nlong first_Digit(long n) \n", "test": "unittest\n{\n    alias candidate = first_Digit;\n\n    assert(candidate(123L) == 1L);\n    assert(candidate(456L) == 4L);\n    assert(candidate(12L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_554_Split", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n*/\nlong[] Split(long[] list) \n", "test": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_555_difference", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n*/\nlong difference(long n) \n", "test": "unittest\n{\n    alias candidate = difference;\n\n    assert(candidate(3L) == 30L);\n    assert(candidate(5L) == 210L);\n    assert(candidate(2L) == 6L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of pairs whose xor value is odd.\n*/\nlong find_Odd_Pair(long[] A, long N) \n", "test": "unittest\n{\n    alias candidate = find_Odd_Pair;\n\n    assert(candidate([5L, 4L, 7L, 2L, 1L], 5L) == 6L);\n    assert(candidate([7L, 2L, 8L, 1L, 0L, 5L, 11L], 7L) == 12L);\n    assert(candidate([1L, 2L, 3L], 3L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_557_toggle_string", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to toggle the case of all characters in a string.\n*/\nstring toggle_string(string string) \n", "test": "unittest\n{\n    alias candidate = toggle_string;\n\n    assert(candidate(\"Python\") == \"pYTHON\");\n    assert(candidate(\"Pangram\") == \"pANGRAM\");\n    assert(candidate(\"LIttLE\") == \"liTTle\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n*/\nlong digit_distance_nums(long n1, long n2) \n", "test": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the sum of the largest contiguous subarray in the given array.\n*/\nlong max_sub_array_sum(long[] a, long size) \n", "test": "unittest\n{\n    alias candidate = max_sub_array_sum;\n\n    assert(candidate([-2L, -3L, 4L, -1L, -2L, 1L, 5L, -3L], 8L) == 7L);\n    assert(candidate([-3L, -4L, 5L, -2L, -3L, 2L, 6L, -4L], 8L) == 8L);\n    assert(candidate([-4L, -5L, 6L, -3L, -4L, 3L, 7L, -5L], 8L) == 10L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_560_union_elements", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the union of the elements of two given arrays and output them in sorted order.\n*/\nlong[] union_elements(long[] test_tup1, long[] test_tup2) \n", "test": "unittest\n{\n    alias candidate = union_elements;\n\n    assert(candidate([3L, 4L, 5L, 6L], [5L, 7L, 4L, 10L]) == [3L, 4L, 5L, 6L, 7L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], [3L, 4L, 5L, 6L]) == [1L, 2L, 3L, 4L, 5L, 6L]);\n    assert(candidate([11L, 12L, 13L, 14L], [13L, 15L, 16L, 17L]) == [11L, 12L, 13L, 14L, 15L, 16L, 17L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the length of the longest subarrays.\n*/\nlong Find_Max_Length(long[][] lst) \n", "test": "unittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_563_extract_values", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract values between quotation marks from a string.\n*/\nstring[] extract_values(string text) \n", "test": "unittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\n*/\nlong count_Pairs(long[] arr, long n) \n", "test": "unittest\n{\n    alias candidate = count_Pairs;\n\n    assert(candidate([1L, 2L, 1L], 3L) == 2L);\n    assert(candidate([1L, 1L, 1L, 1L], 4L) == 0L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L], 5L) == 10L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_565_split", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to split a string into characters.\n*/\nstring[] split(string word) \n", "test": "unittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_566_sum_digits", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to get the sum of the digits of a non-negative integer.\n*/\nlong sum_digits(long n) \n", "test": "unittest\n{\n    alias candidate = sum_digits;\n\n    assert(candidate(345L) == 12L);\n    assert(candidate(12L) == 3L);\n    assert(candidate(97L) == 16L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_567_issort_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether a specified array is sorted or not.\n*/\nbool issort_list(long[] list1) \n", "test": "unittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_568_empty_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to create an array of N empty dictionaries.\n*/\nNone[] empty_list(long length) \n", "test": "unittest\n{\n    alias candidate = empty_list;\n\n    assert(candidate(5L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);\n    assert(candidate(6L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);\n    assert(candidate(7L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort each subarray of strings in a given array of arrays.\n*/\nstring[][] sort_sublists(string[][] list1) \n", "test": "unittest\n{\n    alias candidate = sort_sublists;\n\n    assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);\n    assert(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]);\n    assert(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove duplicate numbers from a given number of arrays.\n*/\nlong[] two_unique_nums(long[] nums) \n", "test": "unittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_573_unique_product", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to calculate the product of the unique numbers in a given array.\n*/\nlong unique_product(long[] list_data) \n", "test": "unittest\n{\n    alias candidate = unique_product;\n\n    assert(candidate([10L, 20L, 30L, 40L, 20L, 50L, 60L, 40L]) == 720000000L);\n    assert(candidate([1L, 2L, 3L, 1L]) == 6L);\n    assert(candidate([7L, 8L, 9L, 0L, 1L, 1L]) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the surface area of a cylinder.\n*/\nfloat surfacearea_cylinder(long r, long h) \n", "test": "unittest\n{\n    alias candidate = surfacearea_cylinder;\n\n    assert(candidate(10L, 5L) == 942.45);\n    assert(candidate(4L, 5L) == 226.18800000000002);\n    assert(candidate(4L, 10L) == 351.848);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether an array is subarray of another or not.\n*/\nbool is_Sub_Array(long[] A, long[] B) \n", "test": "unittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the last digit in factorial of a given number.\n*/\nlong last_Digit_Factorial(long n) \n", "test": "unittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to interleave 3 arrays of the same length into a single flat array.\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n", "test": "unittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the dissimilar elements in the given two tuples.\n*/\nTuple!(long, long, long, long) find_dissimilar(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = find_dissimilar;\n\n    assert(candidate(tuple(3L, 4L, 5L, 6L), tuple(5L, 7L, 4L, 10L)) == tuple(3L, 6L, 7L, 10L));\n    assert(candidate(tuple(1L, 2L, 3L, 4L), tuple(7L, 2L, 3L, 9L)) == tuple(1L, 4L, 7L, 9L));\n    assert(candidate(tuple(21L, 11L, 25L, 26L), tuple(26L, 34L, 21L, 36L)) == tuple(34L, 36L, 11L, 25L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_581_surface_Area", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the surface area of a square dramid with a given base edge and height.\n*/\nlong surface_Area(long b, long s) \n", "test": "unittest\n{\n    alias candidate = surface_Area;\n\n    assert(candidate(3L, 4L) == 33L);\n    assert(candidate(4L, 5L) == 56L);\n    assert(candidate(1L, 2L) == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_583_catalan_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which returns nth catalan number.\n*/\nlong catalan_number(long num) \n", "test": "unittest\n{\n    alias candidate = catalan_number;\n\n    assert(candidate(10L) == 16796L);\n    assert(candidate(9L) == 4862L);\n    assert(candidate(7L) == 429L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n*/\nstring find_adverbs(string text) \n", "test": "unittest\n{\n    alias candidate = find_adverbs;\n\n    assert(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\");\n    assert(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\");\n    assert(candidate(\"Complete the task quickly\") == \"18-25: quickly\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_585_expensive_items", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n most expensive items in a given dataset.\n*/\nNone[] expensive_items(None[] items, long n) \n", "test": "unittest\n{\n    alias candidate = expensive_items;\n\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable], 2L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-1\", \"price\": 101.1].nullable]);\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable, [\"name\": \"Item-4\", \"price\": 22.75].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_586_split_Arr", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n*/\nlong[] split_Arr(long[] l, long n) \n", "test": "unittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_588_big_diff", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the difference between largest and smallest value in a given array.\n*/\nlong big_diff(long[] nums) \n", "test": "unittest\n{\n    alias candidate = big_diff;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == 3L);\n    assert(candidate([4L, 5L, 12L]) == 8L);\n    assert(candidate([9L, 2L, 3L]) == 7L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find perfect squares between two given numbers.\n*/\nlong[] perfect_squares(long a, long b) \n", "test": "unittest\n{\n    alias candidate = perfect_squares;\n\n    assert(candidate(1L, 30L) == [1L, 4L, 9L, 16L, 25L]);\n    assert(candidate(50L, 100L) == [64L, 81L, 100L]);\n    assert(candidate(100L, 200L) == [100L, 121L, 144L, 169L, 196L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_591_swap_List", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to interchange the first and last elements in an array.\n*/\nlong[] swap_List(long[] newList) \n", "test": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of the product of consecutive binomial co-efficients.\n*/\nlong sum_Of_product(long n) \n", "test": "unittest\n{\n    alias candidate = sum_Of_product;\n\n    assert(candidate(3L) == 15L);\n    assert(candidate(4L) == 56L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove leading zeroes from an ip address.\n*/\nstring removezero_ip(string ip) \n", "test": "unittest\n{\n    alias candidate = removezero_ip;\n\n    assert(candidate(\"216.08.094.196\") == \"216.8.94.196\");\n    assert(candidate(\"12.01.024\") == \"12.1.24\");\n    assert(candidate(\"216.08.094.0196\") == \"216.8.94.196\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the difference of the first even and first odd number of a given array.\n*/\nlong diff_even_odd(long[] list1) \n", "test": "unittest\n{\n    alias candidate = diff_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 1L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 9L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_597_find_kth", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find kth element from the given two sorted arrays.\n*/\nlong find_kth(long[] arr1, long[] arr2, long k) \n", "test": "unittest\n{\n    alias candidate = find_kth;\n\n    assert(candidate([2L, 3L, 6L, 7L, 9L], [1L, 4L, 8L, 10L], 5L) == 6L);\n    assert(candidate([100L, 112L, 256L, 349L, 770L], [72L, 86L, 113L, 119L, 265L, 445L, 892L], 7L) == 256L);\n    assert(candidate([3L, 4L, 7L, 8L, 10L], [2L, 5L, 9L, 11L], 6L) == 8L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given number is armstrong or not.\n*/\nbool armstrong_number(long number) \n", "test": "unittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_599_sum_average", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find sum and average of first n natural numbers.\n*/\nTuple!(long, float) sum_average(long number) \n", "test": "unittest\n{\n    alias candidate = sum_average;\n\n    assert(candidate(10L) == tuple(55L, 5.5));\n    assert(candidate(15L) == tuple(120L, 8.0));\n    assert(candidate(20L) == tuple(210L, 10.5));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_600_is_Even", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given number is even or not.\n*/\nbool is_Even(long n) \n", "test": "unittest\n{\n    alias candidate = is_Even;\n\n    assert(candidate(1L) == false);\n    assert(candidate(2L) == true);\n    assert(candidate(3L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first repeated character in a given string.\n*/\nNullable!(string) first_repeated_char(string str1) \n", "test": "unittest\n{\n    alias candidate = first_repeated_char;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"123123\");\n        assert(!result.isNull && result.get == \"1\");\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_603_get_ludic", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\n*/\nlong[] get_ludic(long n) \n", "test": "unittest\n{\n    alias candidate = get_ludic;\n\n    assert(candidate(10L) == [1L, 2L, 3L, 5L, 7L]);\n    assert(candidate(25L) == [1L, 2L, 3L, 5L, 7L, 11L, 13L, 17L, 23L, 25L]);\n    assert(candidate(45L) == [1L, 2L, 3L, 5L, 7L, 11L, 13L, 17L, 23L, 25L, 29L, 37L, 41L, 43L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_604_reverse_words", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to reverse words seperated by spaces in a given string.\n*/\nstring reverse_words(string s) \n", "test": "unittest\n{\n    alias candidate = reverse_words;\n\n    assert(candidate(\"python program\") == \"program python\");\n    assert(candidate(\"java language\") == \"language java\");\n    assert(candidate(\"indian man\") == \"man indian\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_605_prime_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given integer is a prime number.\n*/\nbool prime_num(long num) \n", "test": "unittest\n{\n    alias candidate = prime_num;\n\n    assert(candidate(13L) == true);\n    assert(candidate(7L) == true);\n    assert(candidate(-1010L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_606_radian_degree", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert degrees to radians.\n*/\nfloat radian_degree(long degree) \n", "test": "unittest\n{\n    alias candidate = radian_degree;\n\n    assert(candidate(90L) == 1.5707963267948966);\n    assert(candidate(60L) == 1.0471975511965976);\n    assert(candidate(120L) == 2.0943951023931953);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_607_find_literals", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n*/\nTuple!(string, long, long) find_literals(string text, string pattern) \n", "test": "unittest\n{\n    alias candidate = find_literals;\n\n    assert(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") == tuple(\"fox\", 16L, 19L));\n    assert(candidate(\"Its been a very crazy procedure right\", \"crazy\") == tuple(\"crazy\", 16L, 21L));\n    assert(candidate(\"Hardest choices required strongest will\", \"will\") == tuple(\"will\", 35L, 39L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_608_bell_Number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find nth bell number.\n*/\nlong bell_Number(long n) \n", "test": "unittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n*/\nlong[] remove_kth_element(long[] list1, long L) \n", "test": "unittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which given a matrix represented as an array of arrays returns the max of the n'th column.\n*/\nlong max_of_nth(long[][] test_list, long N) \n", "test": "unittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the cumulative sum of all the values that are present in the given array of arrays.\n*/\nlong cummulative_sum(long[][] test_list) \n", "test": "unittest\n{\n    alias candidate = cummulative_sum;\n\n    assert(candidate([[1L, 3L], [5L, 6L, 7L], [2L, 6L]]) == 30L);\n    assert(candidate([[2L, 4L], [6L, 7L, 8L], [3L, 7L]]) == 37L);\n    assert(candidate([[3L, 5L], [7L, 8L, 9L], [4L, 8L]]) == 44L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_615_average_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which takes an arrays of arrays and returns the average value for each subarray as an array.\n*/\nfloat[] average_tuple(long[][] nums) \n", "test": "unittest\n{\n    alias candidate = average_tuple;\n\n    assert(candidate([[10L, 10L, 10L, 12L], [30L, 45L, 56L, 45L], [81L, 80L, 39L, 32L], [1L, 2L, 3L, 4L]]) == [30.5, 34.25, 27.0, 23.25]);\n    assert(candidate([[1L, 1L, -5L], [30L, -15L, 56L], [81L, -60L, -39L], [-10L, 2L, 3L]]) == [25.5, -18.0, 3.75]);\n    assert(candidate([[100L, 100L, 100L, 120L], [300L, 450L, 560L, 450L], [810L, 800L, 390L, 320L], [10L, 20L, 30L, 40L]]) == [305.0, 342.5, 270.0, 232.5]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n*/\nTuple!(long, long, long, long) tuple_modulo(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = tuple_modulo;\n\n    assert(candidate(tuple(10L, 4L, 5L, 6L), tuple(5L, 6L, 7L, 5L)) == tuple(0L, 4L, 5L, 1L));\n    assert(candidate(tuple(11L, 5L, 6L, 7L), tuple(6L, 7L, 8L, 6L)) == tuple(5L, 5L, 6L, 1L));\n    assert(candidate(tuple(12L, 6L, 7L, 8L), tuple(7L, 8L, 9L, 7L)) == tuple(5L, 6L, 7L, 1L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n*/\nfloat min_Jumps(Tuple!(long, long) steps, long d) \n", "test": "unittest\n{\n    alias candidate = min_Jumps;\n\n    assert(candidate(tuple(3L, 4L), 11L) == 3.5);\n    assert(candidate(tuple(3L, 4L), 0L) == 0L);\n    assert(candidate(tuple(11L, 14L), 11L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_618_div_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to divide two arrays element wise.\n*/\nfloat[] div_list(long[] nums1, long[] nums2) \n", "test": "unittest\n{\n    alias candidate = div_list;\n\n    assert(candidate([4L, 5L, 6L], [1L, 2L, 3L]) == [4.0, 2.5, 2.0]);\n    assert(candidate([3L, 2L], [1L, 4L]) == [3.0, 0.5]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [1.8, 1.7142857142857142]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_619_move_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to move all the numbers to the end of the given string.\n*/\nstring move_num(string test_str) \n", "test": "unittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_622_get_median", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the median of two sorted arrays of same size.\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n", "test": "unittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_623_nth_nums", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to compute the n-th power of each number in an array.\n*/\nlong[] nth_nums(long[] nums, long n) \n", "test": "unittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_624_is_upper", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to convert a given string to uppercase.\n*/\nstring is_upper(string string) \n", "test": "unittest\n{\n    alias candidate = is_upper;\n\n    assert(candidate(\"person\") == \"PERSON\");\n    assert(candidate(\"final\") == \"FINAL\");\n    assert(candidate(\"Valid\") == \"VALID\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_625_swap_List", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to interchange the first and last element in a given array.\n*/\nlong[] swap_List(long[] newList) \n", "test": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_626_triangle_area", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n*/\nNullable!(long) triangle_area(long r) \n", "test": "unittest\n{\n    alias candidate = triangle_area;\n\n{\n        auto result = candidate(-1L);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(0L);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate(2L);\n        assert(!result.isNull && result.get == 4L);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n*/\nlong find_First_Missing(long[] array) \n", "test": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace all spaces in the given string with '%20'.\n*/\nstring replace_spaces(string string) \n", "test": "unittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"My Name is Dawood\") == \"My%20Name%20is%20Dawood\");\n    assert(candidate(\"I am a Programmer\") == \"I%20am%20a%20Programmer\");\n    assert(candidate(\"I love Coding\") == \"I%20love%20Coding\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_629_Split", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find even numbers from an array of numbers.\n*/\nlong[] Split(long[] list) \n", "test": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n*/\nlong[][] get_coordinates(Tuple!(long, long) test_tup) \n", "test": "unittest\n{\n    alias candidate = get_coordinates;\n\n    assert(candidate(tuple(3L, 4L)) == [[2L, 3L], [2L, 4L], [2L, 5L], [3L, 3L], [3L, 4L], [3L, 5L], [4L, 3L], [4L, 4L], [4L, 5L]]);\n    assert(candidate(tuple(4L, 5L)) == [[3L, 4L], [3L, 5L], [3L, 6L], [4L, 4L], [4L, 5L], [4L, 6L], [5L, 4L], [5L, 5L], [5L, 6L]]);\n    assert(candidate(tuple(5L, 6L)) == [[4L, 5L], [4L, 6L], [4L, 7L], [5L, 5L], [5L, 6L], [5L, 7L], [6L, 5L], [6L, 6L], [6L, 7L]]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n*/\nstring replace_spaces(string text) \n", "test": "unittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_632_move_zero", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to move all zeroes to the end of the given array.\n*/\nlong[] move_zero(long[] num_list) \n", "test": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of xor of all pairs of numbers in the given array.\n*/\nlong pair_xor_Sum(long[] arr, long n) \n", "test": "unittest\n{\n    alias candidate = pair_xor_Sum;\n\n    assert(candidate([5L, 9L, 7L, 6L], 4L) == 47L);\n    assert(candidate([7L, 3L, 5L], 3L) == 12L);\n    assert(candidate([7L, 3L], 2L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_635_heap_sort", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort the given array.\n*/\nlong[] heap_sort(long[] iterable) \n", "test": "unittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given amount has no profit and no loss\n*/\nbool noprofit_noloss(long actual_cost, long sale_amount) \n", "test": "unittest\n{\n    alias candidate = noprofit_noloss;\n\n    assert(candidate(1500L, 1200L) == false);\n    assert(candidate(100L, 100L) == true);\n    assert(candidate(2000L, 5000L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_638_wind_chill", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n*/\nlong wind_chill(long v, long t) \n", "test": "unittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_639_sample_nam", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\n*/\nlong sample_nam(string[] sample_names) \n", "test": "unittest\n{\n    alias candidate = sample_nam;\n\n    assert(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16L);\n    assert(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10L);\n    assert(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n*/\nstring remove_parenthesis(string[] items) \n", "test": "unittest\n{\n    alias candidate = remove_parenthesis;\n\n    assert(candidate([\"python (chrome)\"]) == \"python\");\n    assert(candidate([\"string(.abc)\"]) == \"string\");\n    assert(candidate([\"alpha(num)\"]) == \"alpha\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth nonagonal number.\n*/\nlong is_nonagonal(long n) \n", "test": "unittest\n{\n    alias candidate = is_nonagonal;\n\n    assert(candidate(10L) == 325L);\n    assert(candidate(15L) == 750L);\n    assert(candidate(18L) == 1089L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n*/\nbool text_match_wordz_middle(string text) \n", "test": "unittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to reverse an array upto a given position.\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n", "test": "unittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to add an associative array to the tuple. The output should be a tuple.\n*/\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup, Nullable!(long[string]) test_dict) \n", "test": "unittest\n{\n    alias candidate = add_dict_to_tuple;\n\n    assert(candidate(tuple(4L, 5L, 6L), [\"MSAM\": 1L, \"is\": 2L, \"best\": 3L].nullable) == tuple(4L, 5L, 6L, [\"MSAM\": 1L, \"is\": 2L, \"best\": 3L].nullable));\n    assert(candidate(tuple(1L, 2L, 3L), [\"UTS\": 2L, \"is\": 3L, \"Worst\": 4L].nullable) == tuple(1L, 2L, 3L, [\"UTS\": 2L, \"is\": 3L, \"Worst\": 4L].nullable));\n    assert(candidate(tuple(8L, 9L, 10L), [\"POS\": 3L, \"is\": 4L, \"Okay\": 5L].nullable) == tuple(8L, 9L, 10L, [\"POS\": 3L, \"is\": 4L, \"Okay\": 5L].nullable));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n*/\nfloat maxAverageOfPath(long[][] cost) \n", "test": "unittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tThe input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\n*/\nlong count_same_pair(long[] nums1, long[] nums2) \n", "test": "unittest\n{\n    alias candidate = count_same_pair;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 9L]) == 4L);\n    assert(candidate([0L, 1L, 2L, -1L, -5L, 6L, 0L, -3L, -2L, 3L, 4L, 6L, 8L], [2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 11L);\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L], [2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 1L);\n    assert(candidate([0L, 1L, 1L, 2L], [0L, 1L, 2L, 2L]) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n*/\nlong power_base_sum(long base, long power) \n", "test": "unittest\n{\n    alias candidate = power_base_sum;\n\n    assert(candidate(2L, 100L) == 115L);\n    assert(candidate(8L, 10L) == 37L);\n    assert(candidate(8L, 15L) == 62L);\n    assert(candidate(3L, 3L) == 9L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_728_sum_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n*/\nlong[] sum_list(long[] lst1, long[] lst2) \n", "test": "unittest\n{\n    alias candidate = sum_list;\n\n    assert(candidate([10L, 20L, 30L], [15L, 25L, 35L]) == [25L, 45L, 65L]);\n    assert(candidate([1L, 2L, 3L], [5L, 6L, 7L]) == [6L, 8L, 10L]);\n    assert(candidate([15L, 20L, 30L], [15L, 45L, 75L]) == [30L, 65L, 105L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\n*/\nfloat lateralsurface_cone(long r, long h) \n", "test": "unittest\n{\n    alias candidate = lateralsurface_cone;\n\n    assert(candidate(5L, 12L) == 204.20352248333654);\n    assert(candidate(10L, 15L) == 566.3586699569488);\n    assert(candidate(19L, 17L) == 1521.8090132193388);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n*/\nstring replace_specialchar(string text) \n", "test": "unittest\n{\n    alias candidate = replace_specialchar;\n\n    assert(candidate(\"Python language, Programming language.\") == \"Python:language::Programming:language:\");\n    assert(candidate(\"a b c,d e f\") == \"a:b:c:d:e:f\");\n    assert(candidate(\"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\n*/\nlong find_first_occurrence(long[] A, long x) \n", "test": "unittest\n{\n    alias candidate = find_first_occurrence;\n\n    assert(candidate([2L, 5L, 5L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 5L) == 1L);\n    assert(candidate([2L, 3L, 5L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 5L) == 2L);\n    assert(candidate([2L, 4L, 1L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 6L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n", "test": "unittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n*/\nlong toggle_middle_bits(long n) \n", "test": "unittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_736_left_insertion", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/dthon-exercises/data-structures-and-algorithms/dthon-data-structure-exercise-24.php\n*/\nlong left_insertion(long[] a, long x) \n", "test": "unittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_737_check_str", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n*/\nbool check_str(string string) \n", "test": "unittest\n{\n    alias candidate = check_str;\n\n    assert(candidate(\"annie\") == true);\n    assert(candidate(\"dawood\") == false);\n    assert(candidate(\"Else\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/dthon-exercises/data-structures-and-algorithms/dthon-recursion-exercise-9.php\n*/\nfloat geometric_sum(long n) \n", "test": "unittest\n{\n    alias candidate = geometric_sum;\n\n    assert(candidate(7L) == 1.9921875);\n    assert(candidate(4L) == 1.9375);\n    assert(candidate(8L) == 1.99609375);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_739_find_Index", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n*/\nlong find_Index(long n) \n", "test": "unittest\n{\n    alias candidate = find_Index;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 14L);\n    assert(candidate(4L) == 45L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert the given tuple to a key-value associative array using adjacent elements. https://www.geeksforgeeks.org/dthon-convert-tuple-to-adjacent-pair-associative array/\n*/\nNullable!(long[long]) tuple_to_dict(Tuple!(long, long, long, long, long, long) test_tup) \n", "test": "unittest\n{\n    alias candidate = tuple_to_dict;\n\n{\n        auto result = candidate(tuple(1L, 5L, 7L, 10L, 13L, 5L));\n        assert(!result.isNull && result.get == [1L: 5L, 7L: 10L, 13L: 5L]);\n}\n\n{\n        auto result = candidate(tuple(1L, 2L, 3L, 4L, 5L, 6L));\n        assert(!result.isNull && result.get == [1L: 2L, 3L: 4L, 5L: 6L]);\n}\n\n{\n        auto result = candidate(tuple(7L, 8L, 9L, 10L, 11L, 12L));\n        assert(!result.isNull && result.get == [7L: 8L, 9L: 10L, 11L: 12L]);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether all the characters are same or not.\n*/\nbool all_Characters_Same(string s) \n", "test": "unittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to caluclate the area of a tetrahedron.\n*/\nfloat area_tetrahedron(long side) \n", "test": "unittest\n{\n    alias candidate = area_tetrahedron;\n\n    assert(candidate(3L) == 15.588457268119894);\n    assert(candidate(20L) == 692.8203230275509);\n    assert(candidate(10L) == 173.20508075688772);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_743_rotate_right", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n*/\nlong[] rotate_right(long[] list, long m) \n", "test": "unittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n", "test": "unittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_746_sector_area", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n*/\nNullable!(float) sector_area(long r, long a) \n", "test": "unittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n*/\nlong lcs_of_three(string X, string Y, string Z) \n", "test": "unittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n*/\nstring capital_words_spaces(string str1) \n", "test": "unittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/dthon-sort-numeric-strings-in-a-array/\n*/\nlong[] sort_numeric_strings(string[] nums_str) \n", "test": "unittest\n{\n    alias candidate = sort_numeric_strings;\n\n    assert(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500L, -12L, 0L, 4L, 7L, 12L, 45L, 100L, 200L]);\n    assert(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 8L, 9L, 9L]);\n    assert(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1L, 1L, 1L, 3L, 3L, 5L, 5L, 7L, 7L, 9L, 11L, 13L, 15L, 17L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_750_add_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to add the given tuple to the given array.\n*/\nlong[] add_tuple(long[] test_list, Tuple!(long, long) test_tup) \n", "test": "unittest\n{\n    alias candidate = add_tuple;\n\n    assert(candidate([5L, 6L, 7L], tuple(9L, 10L)) == [5L, 6L, 7L, 9L, 10L]);\n    assert(candidate([6L, 7L, 8L], tuple(10L, 11L)) == [6L, 7L, 8L, 10L, 11L]);\n    assert(candidate([7L, 8L, 9L], tuple(11L, 12L)) == [7L, 8L, 9L, 11L, 12L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n*/\nbool check_min_heap(long[] arr) \n", "test": "unittest\n{\n    alias candidate = check_min_heap;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([2L, 3L, 4L, 5L, 10L, 15L]) == true);\n    assert(candidate([2L, 10L, 4L, 5L, 3L, 15L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n*/\nlong jacobsthal_num(long n) \n", "test": "unittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_753_min_k", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find minimum k records from tuple array. https://www.geeksforgeeks.org/dthon-find-minimum-k-records-from-tuple-array/ - in this case a verbatim cod of test cases\n*/\nTuple!(string, long)[] min_k(Tuple!(string, long)[] test_list, long K) \n", "test": "unittest\n{\n    alias candidate = min_k;\n\n    assert(candidate([tuple(\"Manjeet\", 10L), tuple(\"Akshat\", 4L), tuple(\"Akash\", 2L), tuple(\"Nikhil\", 8L)], 2L) == [tuple(\"Akash\", 2L), tuple(\"Akshat\", 4L)]);\n    assert(candidate([tuple(\"Sanjeev\", 11L), tuple(\"Angat\", 5L), tuple(\"Akash\", 3L), tuple(\"Nepin\", 9L)], 3L) == [tuple(\"Akash\", 3L), tuple(\"Angat\", 5L), tuple(\"Nepin\", 9L)]);\n    assert(candidate([tuple(\"tanmay\", 14L), tuple(\"Amer\", 11L), tuple(\"Ayesha\", 9L), tuple(\"SKD\", 16L)], 1L) == [tuple(\"Ayesha\", 9L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/dthon-exercises/re/dthon-re-exercise-3.php\n*/\nbool text_match_zero_one(string text) \n", "test": "unittest\n{\n    alias candidate = text_match_zero_one;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abbbba\") == true);\n    assert(candidate(\"dsabbbba\") == true);\n    assert(candidate(\"asbbbba\") == false);\n    assert(candidate(\"abaaa\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/dthon-program-to-count-the-pairs-of-reverse-strings/\n*/\nlong count_reverse_pairs(string[] test_list) \n", "test": "unittest\n{\n    alias candidate = count_reverse_pairs;\n\n    assert(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2L);\n    assert(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1L);\n    assert(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_759_is_decimal", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n*/\nbool is_decimal(string num) \n", "test": "unittest\n{\n    alias candidate = is_decimal;\n\n    assert(candidate(\"123.11\") == true);\n    assert(candidate(\"e666.86\") == false);\n    assert(candidate(\"3.124587\") == false);\n    assert(candidate(\"1.11\") == true);\n    assert(candidate(\"1.1.11\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_760_unique_Element", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n*/\nbool unique_Element(long[] arr) \n", "test": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n*/\nbool check_monthnumber_number(long monthnum3) \n", "test": "unittest\n{\n    alias candidate = check_monthnumber_number;\n\n    assert(candidate(6L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(12L) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n*/\nlong find_min_diff(long[] arr, long n) \n", "test": "unittest\n{\n    alias candidate = find_min_diff;\n\n    assert(candidate([1L, 5L, 3L, 19L, 18L, 25L], 6L) == 1L);\n    assert(candidate([4L, 3L, 2L, 6L], 4L) == 1L);\n    assert(candidate([30L, 5L, 20L, 9L], 4L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_764_number_ctr", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count number of digits in a given string.\n*/\nlong number_ctr(string str) \n", "test": "unittest\n{\n    alias candidate = number_ctr;\n\n    assert(candidate(\"program2bedone\") == 1L);\n    assert(candidate(\"3wonders\") == 1L);\n    assert(candidate(\"123\") == 3L);\n    assert(candidate(\"3wond-1ers2\") == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_765_is_polite", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n*/\nlong is_polite(long n) \n", "test": "unittest\n{\n    alias candidate = is_polite;\n\n    assert(candidate(7L) == 11L);\n    assert(candidate(4L) == 7L);\n    assert(candidate(9L) == 13L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_766_pair_wise", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to return an array of all pairs of consecutive items in a given array.\n*/\nTuple!(long, long)[] pair_wise(long[] l1) \n", "test": "unittest\n{\n    alias candidate = pair_wise;\n\n    assert(candidate([1L, 1L, 2L, 3L, 3L, 4L, 4L, 5L]) == [tuple(1L, 1L), tuple(1L, 2L), tuple(2L, 3L), tuple(3L, 3L), tuple(3L, 4L), tuple(4L, 4L), tuple(4L, 5L)]);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == [tuple(1L, 5L), tuple(5L, 7L), tuple(7L, 9L), tuple(9L, 10L)]);\n    assert(candidate([5L, 1L, 9L, 7L, 10L]) == [tuple(5L, 1L), tuple(1L, 9L), tuple(9L, 7L), tuple(7L, 10L)]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [tuple(1L, 2L), tuple(2L, 3L), tuple(3L, 4L), tuple(4L, 5L), tuple(5L, 6L), tuple(6L, 7L), tuple(7L, 8L), tuple(8L, 9L), tuple(9L, 10L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\n*/\nlong get_pairs_count(long[] arr, long sum) \n", "test": "unittest\n{\n    alias candidate = get_pairs_count;\n\n    assert(candidate([1L, 1L, 1L, 1L], 2L) == 6L);\n    assert(candidate([1L, 5L, 7L, -1L, 5L], 6L) == 3L);\n    assert(candidate([1L, -2L, 3L], 1L) == 1L);\n    assert(candidate([-1L, -2L, 3L], -3L) == 1L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_769_Diff", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to get the difference between two arrays.\n*/\nlong[] Diff(long[] li1, long[] li2) \n", "test": "unittest\n{\n    alias candidate = Diff;\n\n    assert(candidate([10L, 15L, 20L, 25L, 30L, 35L, 40L], [25L, 40L, 35L]) == [10L, 20L, 30L, 15L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 1L]) == [2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L], [6L, 7L, 1L]) == [2L, 3L, 6L, 7L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of fourth power of first n odd natural numbers.\n*/\nlong odd_num_sum(long n) \n", "test": "unittest\n{\n    alias candidate = odd_num_sum;\n\n    assert(candidate(2L) == 82L);\n    assert(candidate(3L) == 707L);\n    assert(candidate(4L) == 3108L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_771_check_expression", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n*/\nbool check_expression(string exp) \n", "test": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_772_remove_length", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all the words with k length in the given string.\n*/\nstring remove_length(string test_str, long K) \n", "test": "unittest\n{\n    alias candidate = remove_length;\n\n    assert(candidate(\"The person is most value tet\", 3L) == \"person is most value\");\n    assert(candidate(\"If you told me about this ok\", 4L) == \"If you me about ok\");\n    assert(candidate(\"Forces of darkeness is come into the play\", 4L) == \"Forces of darkeness is the\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\n*/\nNullable!(Tuple!(string, long, long)) occurance_substring(string text, string pattern) \n", "test": "unittest\n{\n    alias candidate = occurance_substring;\n\n{\n        auto result = candidate(\"python programming, python language\", \"python\");\n        assert(!result.isNull && result.get == tuple(\"python\", 0L, 6L));\n}\n\n{\n        auto result = candidate(\"python programming,programming language\", \"programming\");\n        assert(!result.isNull && result.get == tuple(\"programming\", 7L, 18L));\n}\n\n{\n        auto result = candidate(\"python programming,programming language\", \"language\");\n        assert(!result.isNull && result.get == tuple(\"language\", 31L, 39L));\n}\n\n{\n        auto result = candidate(\"c++ programming, c++ language\", \"python\");\n        assert(result.isNull);\n}\n\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_775_odd_position", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n*/\nbool odd_position(long[] nums) \n", "test": "unittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_776_count_vowels", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n*/\nlong count_vowels(string test_str) \n", "test": "unittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_777_find_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of non-repeated elements in a given array.\n*/\nlong find_sum(long[] arr) \n", "test": "unittest\n{\n    alias candidate = find_sum;\n\n    assert(candidate([1L, 2L, 3L, 1L, 1L, 4L, 5L, 6L]) == 21L);\n    assert(candidate([1L, 10L, 9L, 4L, 2L, 10L, 10L, 45L, 4L]) == 71L);\n    assert(candidate([12L, 10L, 9L, 45L, 2L, 10L, 10L, 45L, 10L]) == 78L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_780_find_combinations", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the combinations of sums with tuples in the given tuple array. https://www.geeksforgeeks.org/dthon-combinations-of-sum-with-tuples-in-tuple-array/\n*/\nTuple!(long, long)[] find_combinations(Tuple!(long, long)[] test_list) \n", "test": "unittest\n{\n    alias candidate = find_combinations;\n\n    assert(candidate([tuple(2L, 4L), tuple(6L, 7L), tuple(5L, 1L), tuple(6L, 10L)]) == [tuple(8L, 11L), tuple(7L, 5L), tuple(8L, 14L), tuple(11L, 8L), tuple(12L, 17L), tuple(11L, 11L)]);\n    assert(candidate([tuple(3L, 5L), tuple(7L, 8L), tuple(6L, 2L), tuple(7L, 11L)]) == [tuple(10L, 13L), tuple(9L, 7L), tuple(10L, 16L), tuple(13L, 10L), tuple(14L, 19L), tuple(13L, 13L)]);\n    assert(candidate([tuple(4L, 6L), tuple(8L, 9L), tuple(7L, 3L), tuple(8L, 12L)]) == [tuple(12L, 15L), tuple(11L, 9L), tuple(12L, 18L), tuple(15L, 12L), tuple(16L, 21L), tuple(15L, 15L)]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_781_count_divisors", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the count of divisors is even. https://www.w3resource.com/dthon-exercises/basic/dthon-basic-1-exercise-24.php\n*/\nbool count_divisors(long n) \n", "test": "unittest\n{\n    alias candidate = count_divisors;\n\n    assert(candidate(10L) == true);\n    assert(candidate(100L) == false);\n    assert(candidate(125L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n*/\nlong odd_length_sum(long[] arr) \n", "test": "unittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n*/\nfloat[] rgb_to_hsv(long r, long g, long b) \n", "test": "unittest\n{\n    alias candidate = rgb_to_hsv;\n\n    assert(candidate(255L, 255L, 255L) == [0.0, 0.0, 100.0]);\n    assert(candidate(0L, 215L, 0L) == [120.0, 100.0, 84.31372549019608]);\n    assert(candidate(10L, 215L, 110L) == [149.26829268292684, 95.34883720930233, 84.31372549019608]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the product of first even and odd number of a given array.\n*/\nlong mul_even_odd(long[] list1) \n", "test": "unittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert tuple string to integer tuple.\n*/\nTuple!(long, long, long) tuple_str_int(string test_str) \n", "test": "unittest\n{\n    alias candidate = tuple_str_int;\n\n    assert(candidate(\"(7, 8, 9)\") == tuple(7L, 8L, 9L));\n    assert(candidate(\"(1, 2, 3)\") == tuple(1L, 2L, 3L));\n    assert(candidate(\"(4, 5, 6)\") == tuple(4L, 5L, 6L));\n    assert(candidate(\"(7, 81, 19)\") == tuple(7L, 81L, 19L));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_786_right_insertion", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n*/\nlong right_insertion(long[] a, long x) \n", "test": "unittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_787_text_match_three", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an a followed by three 'b'.\n*/\nbool text_match_three(string text) \n", "test": "unittest\n{\n    alias candidate = text_match_three;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abbbba\") == true);\n    assert(candidate(\"caacabbbba\") == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_788_new_tuple", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to create a new tuple from the given string and array.\n*/\nTuple!(string, string, string) new_tuple(string[] test_list, string test_str) \n", "test": "unittest\n{\n    alias candidate = new_tuple;\n\n    assert(candidate([\"WEB\", \"is\"], \"best\") == tuple(\"WEB\", \"is\", \"best\"));\n    assert(candidate([\"We\", \"are\"], \"Developers\") == tuple(\"We\", \"are\", \"Developers\"));\n    assert(candidate([\"Part\", \"is\"], \"Wrong\") == tuple(\"Part\", \"is\", \"Wrong\"));\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_790_even_position", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n*/\nbool even_position(long[] nums) \n", "test": "unittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_792_count_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of arrays in a given number of arrays.\n*/\nlong count_list(long[][] input_list) \n", "test": "unittest\n{\n    alias candidate = count_list;\n\n    assert(candidate([[1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == 4L);\n    assert(candidate([[1L, 2L], [2L, 3L], [4L, 5L]]) == 3L);\n    assert(candidate([[1L, 0L], [2L, 0L]]) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_793_last", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the last position of an element in a sorted array.\n*/\nlong last(long[] arr, long x) \n", "test": "unittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n*/\nbool text_starta_endb(string text) \n", "test": "unittest\n{\n    alias candidate = text_starta_endb;\n\n    assert(candidate(\"aabbbb\") == true);\n    assert(candidate(\"aabAbbbc\") == false);\n    assert(candidate(\"accddbbjjj\") == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_796_return_sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite function to find the sum of all items in the given associative array.\n*/\nlong return_sum(Nullable!(long[string]) dict) \n", "test": "unittest\n{\n    alias candidate = return_sum;\n\n    assert(candidate([\"a\": 100L, \"b\": 200L, \"c\": 300L].nullable) == 600L);\n    assert(candidate([\"a\": 25L, \"b\": 18L, \"c\": 45L].nullable) == 88L);\n    assert(candidate([\"a\": 36L, \"b\": 39L, \"c\": 49L].nullable) == 124L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of all odd natural numbers within the range l and r.\n*/\nlong sum_in_range(long l, long r) \n", "test": "unittest\n{\n    alias candidate = sum_in_range;\n\n    assert(candidate(2L, 5L) == 8L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 13L) == 40L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_798__sum", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of an array.\n*/\nlong _sum(long[] arr) \n", "test": "unittest\n{\n    alias candidate = _sum;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([15L, 12L, 13L, 10L]) == 50L);\n    assert(candidate([0L, 1L, 2L]) == 3L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_799_left_rotate", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n*/\nlong left_rotate(long n, long d) \n", "test": "unittest\n{\n    alias candidate = left_rotate;\n\n    assert(candidate(16L, 2L) == 64L);\n    assert(candidate(10L, 2L) == 40L);\n    assert(candidate(99L, 3L) == 792L);\n    assert(candidate(99L, 3L) == 792L);\n    assert(candidate(1L, 3L) == 8L);\n    assert(candidate(5L, 3L) == 40L);\n    assert(candidate(29L, 3L) == 232L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all whitespaces from a string.\n*/\nstring remove_all_spaces(string text) \n", "test": "unittest\n{\n    alias candidate = remove_all_spaces;\n\n    assert(candidate(\"python  program\") == \"pythonprogram\");\n    assert(candidate(\"python   programming    language\") == \"pythonprogramminglanguage\");\n    assert(candidate(\"python                     program\") == \"pythonprogram\");\n    assert(candidate(\"   python                     program\") == \"pythonprogram\");\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of equal numbers from three given integers.\n*/\nlong test_three_equal(long x, long y, long z) \n", "test": "unittest\n{\n    alias candidate = test_three_equal;\n\n    assert(candidate(1L, 1L, 1L) == 3L);\n    assert(candidate(-1L, -2L, -3L) == 0L);\n    assert(candidate(1L, 2L, 2L) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_802_count_rotation", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n*/\nlong count_rotation(long[] arr) \n", "test": "unittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n*/\nbool is_perfect_square(long n) \n", "test": "unittest\n{\n    alias candidate = is_perfect_square;\n\n    assert(candidate(10L) == false);\n    assert(candidate(36L) == true);\n    assert(candidate(14L) == false);\n    assert(candidate(196L) == true);\n    assert(candidate(125L) == false);\n    assert(candidate(15625L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_804_is_product_even", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the product of numbers in an array is even or not.\n*/\nbool is_product_even(long[] arr) \n", "test": "unittest\n{\n    alias candidate = is_product_even;\n\n    assert(candidate([1L, 2L, 3L]) == true);\n    assert(candidate([1L, 2L, 1L, 4L]) == true);\n    assert(candidate([1L, 1L]) == false);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n*/\nlong[] max_sum_list(long[][] lists) \n", "test": "unittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find maximum run of uppercase characters in the given string.\n*/\nlong max_run_uppercase(string test_str) \n", "test": "unittest\n{\n    alias candidate = max_run_uppercase;\n\n    assert(candidate(\"GeMKSForGERksISBESt\") == 5L);\n    assert(candidate(\"PrECIOusMOVemENTSYT\") == 6L);\n    assert(candidate(\"GooGLEFluTTER\") == 4L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_807_first_odd", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n*/\nlong first_odd(long[] nums) \n", "test": "unittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_808_check_K", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given tuples contain the k or not.\n*/\nbool check_K(long[] test_tup, long K) \n", "test": "unittest\n{\n    alias candidate = check_K;\n\n    assert(candidate([10L, 4L, 5L, 6L, 8L], 6L) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 7L) == false);\n    assert(candidate([7L, 8L, 9L, 44L, 11L, 12L], 11L) == true);\n}\nvoid main(){}", "language": "d"}, {"task_id": "mbpp_809_check_smaller", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n*/\nbool check_smaller(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n", "test": "unittest\n{\n    alias candidate = check_smaller;\n\n    assert(candidate(tuple(1L, 2L, 3L), tuple(2L, 3L, 4L)) == false);\n    assert(candidate(tuple(4L, 5L, 6L), tuple(3L, 4L, 5L)) == true);\n    assert(candidate(tuple(11L, 12L, 13L), tuple(10L, 11L, 12L)) == true);\n}\nvoid main(){}", "language": "d"}]