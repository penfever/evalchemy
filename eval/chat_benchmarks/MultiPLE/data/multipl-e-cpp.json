[{"task_id": "HumanEval_0_has_close_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n", "test": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n", "test": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\n", "test": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_3_below_zero", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\n", "test": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n", "test": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_5_intersperse", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n", "test": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n", "test": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n", "test": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_8_sum_product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n", "test": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n", "test": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_11_string_xor", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\n", "test": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_12_longest", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n", "test": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n", "language": "cpp"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\n", "test": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_17_parse_music", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n", "test": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\n", "test": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\n", "test": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n", "test": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n", "test": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cpp values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n", "test": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_23_strlen", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\n", "test": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_25_factorize", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\n", "test": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n", "test": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_27_flip_case", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_28_concatenate", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\n", "test": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n", "test": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_30_get_positive", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_31_is_prime", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_33_sort_third", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_34_unique", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_35_max_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n", "test": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_37_sort_even", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n", "test": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n", "test": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_42_incr_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_44_change_base", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\n", "test": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\n", "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_46_fib4", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\n", "test": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_47_median", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_49_modp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\n", "test": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\n", "test": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_53_add", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\n", "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_54_same_chars", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n", "test": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_55_fib", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\n", "test": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n", "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_57_monotonic", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_58_common", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n", "test": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\n", "test": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\n", "test": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n", "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_62_derivative", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n", "test": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_63_fibfib", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n", "test": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\n", "test": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_66_digitSum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\n", "test": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_68_pluck", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_69_search", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\n", "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n", "test": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_74_total_match", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n", "test": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n", "test": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n", "test": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_77_iscube", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\n", "test": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_78_hex_key", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\n", "test": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n", "test": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_80_is_happy", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n", "test": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_82_prime_length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n", "test": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_84_solve", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\n", "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_85_add", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_87_get_row", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n", "test": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_88_sort_array", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\n", "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_89_encrypt", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n", "language": "cpp"}, {"task_id": "HumanEval_91_is_bored", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\n", "test": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_92_any_int", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n", "test": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_93_encode", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n", "test": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\n", "test": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\n", "test": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_97_multiply", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_98_count_upper", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\n", "test": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\n", "test": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_101_words_string", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_102_choose_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n", "test": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n", "test": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n", "language": "cpp"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\n", "test": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_105_by_length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_106_f", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\n", "test": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n", "test": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_108_count_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_110_exchange", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n", "test": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_111_histogram", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\n", "test": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n", "test": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_113_odd_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n", "test": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_115_max_fill", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n", "test": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_116_sort_array", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_117_select_words", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\n", "test": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n", "test": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_119_match_parens", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\n", "test": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_120_maximum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n", "test": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_121_solution", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_122_add_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n", "test": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\n", "test": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_124_valid_date", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n", "test": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_125_split_words", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\n", "test": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n", "language": "cpp"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_127_intersection", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n", "test": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n", "language": "cpp"}, {"task_id": "HumanEval_129_minPath", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n", "test": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_130_tri", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n", "test": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_131_digits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\n", "test": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_132_is_nested", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\n", "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n", "test": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_137_compare_one", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n", "test": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n", "language": "cpp"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\n", "test": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\n", "test": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\n", "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n", "test": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_144_simplify", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n", "test": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n", "test": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_148_bf", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n", "test": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n", "test": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\n", "test": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n", "test": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_152_compare", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n", "test": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n", "test": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\n", "test": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n", "test": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n", "test": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n", "test": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_158_find_max", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\n", "test": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_159_eat", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\n", "test": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n", "test": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_161_solve", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n", "language": "cpp"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "language": "cpp"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n", "language": "cpp"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to identify non-prime numbers.\nbool is_not_prime(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_not_prime;\n    assert(candidate((2)) == (false));\n    assert(candidate((10)) == (true));\n    assert(candidate((35)) == (true));\n    assert(candidate((37)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nstd::vector<long> heap_queue_largest(std::vector<long> nums, long n) {\n", "test": "}\nint main() {\n    auto candidate = heap_queue_largest;\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (3)) == (std::vector<long>({(long)85, (long)75, (long)65})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (2)) == (std::vector<long>({(long)85, (long)75})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (5)) == (std::vector<long>({(long)85, (long)75, (long)65, (long)58, (long)35})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the two numbers differ at one bit position only or not.\nbool differ_At_One_Bit_Pos(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = differ_At_One_Bit_Pos;\n    assert(candidate((13), (9)) == (true));\n    assert(candidate((15), (8)) == (false));\n    assert(candidate((2), (4)) == (false));\n    assert(candidate((2), (3)) == (true));\n    assert(candidate((5), (1)) == (true));\n    assert(candidate((1), (5)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_8_square_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find squares of individual elements in a vector.\nstd::vector<long> square_nums(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = square_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)100, (long)400, (long)900})));\n    assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)144, (long)225})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the minimum number of rotations (greater than 0) required to get the same string.\nlong find_Rotations(std::string str) {\n", "test": "}\nint main() {\n    auto candidate = find_Rotations;\n    assert(candidate((\"aaaa\")) == (1));\n    assert(candidate((\"ab\")) == (2));\n    assert(candidate((\"abc\")) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n", "test": "}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n", "test": "}\nint main() {\n    auto candidate = sort_matrix;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_14_find_Volume", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the volume of a triangular prism.\nlong find_Volume(long l, long b, long h) {\n", "test": "}\nint main() {\n    auto candidate = find_Volume;\n    assert(candidate((10), (8), (6)) == (240));\n    assert(candidate((3), (2), (2)) == (6));\n    assert(candidate((1), (2), (1)) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns the perimeter of a square given its side length as input.\nlong square_perimeter(long a) {\n", "test": "}\nint main() {\n    auto candidate = square_perimeter;\n    assert(candidate((10)) == (40));\n    assert(candidate((5)) == (20));\n    assert(candidate((4)) == (16));\n}\n", "language": "cpp"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove characters from the first string which are present in the second string.\nstd::string remove_dirty_chars(std::string string, std::string second_string) {\n", "test": "}\nint main() {\n    auto candidate = remove_dirty_chars;\n    assert(candidate((\"probasscurve\"), (\"pros\")) == (\"bacuve\"));\n    assert(candidate((\"digitalindia\"), (\"talent\")) == (\"digiidi\"));\n    assert(candidate((\"exoticmiles\"), (\"toxic\")) == (\"emles\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether a given vector of integers contains any duplicate element.\nbool test_duplicate(std::vector<long> arraynums) {\n", "test": "}\nint main() {\n    auto candidate = test_duplicate;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_20_is_woodall", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given number is woodball or not.\nbool is_woodall(long x) {\n", "test": "}\nint main() {\n    auto candidate = is_woodall;\n    assert(candidate((383)) == (true));\n    assert(candidate((254)) == (false));\n    assert(candidate((200)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_56_checks", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n", "test": "}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the largest number that can be formed with the given vector of digits.\nlong find_Max_Num(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = find_Max_Num;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (321));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)1}))) == (6541));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)9}))) == (9321));\n}\n", "language": "cpp"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n", "test": "}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth octagonal number.\nlong is_octagonal(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_octagonal;\n    assert(candidate((5)) == (65));\n    assert(candidate((10)) == (280));\n    assert(candidate((15)) == (645));\n}\n", "language": "cpp"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n", "language": "cpp"}, {"task_id": "mbpp_62_smallest_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find smallest number in a vector.\nlong smallest_num(std::vector<long> xs) {\n", "test": "}\nint main() {\n    auto candidate = smallest_num;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)1, (long)45, (long)99}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)45, (long)46, (long)50, (long)60}))) == (45));\n}\n", "language": "cpp"}, {"task_id": "mbpp_63_max_difference", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between available pairs in the given tuple vector.\nlong max_difference(std::vector<std::tuple<long, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = max_difference;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(1, 7), (std::tuple<long, long>)std::make_tuple(10, 3), (std::tuple<long, long>)std::make_tuple(1, 2)}))) == (7));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(2, 17), (std::tuple<long, long>)std::make_tuple(9, 13), (std::tuple<long, long>)std::make_tuple(11, 12)}))) == (15));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(12, 35), (std::tuple<long, long>)std::make_tuple(21, 27), (std::tuple<long, long>)std::make_tuple(13, 23), (std::tuple<long, long>)std::make_tuple(41, 22)}))) == (23));\n}\n", "language": "cpp"}, {"task_id": "mbpp_64_subject_marks", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of tuples using the second value of each tuple.\nstd::vector<std::tuple<std::string, long>> subject_marks(std::vector<std::tuple<std::string, long>> subjectmarks) {\n", "test": "}\nint main() {\n    auto candidate = subject_marks;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82), (std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54), (std::tuple<std::string, long>)std::make_tuple(\"Social\", 33)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Social\", 33), (std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n", "test": "}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n", "language": "cpp"}, {"task_id": "mbpp_66_pos_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of positive numbers in a vector.\nlong pos_count(std::vector<long> list) {\n", "test": "}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_67_bell_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the number of ways to partition a set of Bell numbers.\nlong bell_number(long n) {\n", "test": "}\nint main() {\n    auto candidate = bell_number;\n    assert(candidate((2)) == (2));\n    assert(candidate((10)) == (115975));\n    assert(candidate((56)) == (6775685320645824322581483068371419745979053216268760300));\n}\n", "language": "cpp"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n", "test": "}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_69_is_sublist", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a vector contains the given subvector or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n", "test": "}\nint main() {\n    auto candidate = is_sublist;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_70_get_equal", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether all the given vectors have equal length or not.\nbool get_equal(std::vector<std::vector<long>> Input) {\n", "test": "}\nint main() {\n    auto candidate = get_equal;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)22, (long)33}), (std::vector<long>)std::vector<long>({(long)44, (long)55, (long)66})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)7})}))) == (false));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_71_comb_sort", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> comb_sort(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = comb_sort;\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)37, (long)25, (long)79}))) == (std::vector<long>({(long)5, (long)15, (long)25, (long)37, (long)79})));\n    assert(candidate((std::vector<long>({(long)41, (long)32, (long)15, (long)19, (long)22}))) == (std::vector<long>({(long)15, (long)19, (long)22, (long)32, (long)41})));\n    assert(candidate((std::vector<long>({(long)99, (long)15, (long)13, (long)47}))) == (std::vector<long>({(long)13, (long)15, (long)47, (long)99})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_72_dif_Square", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given number can be represented as the difference of two squares or not.\nbool dif_Square(long n) {\n", "test": "}\nint main() {\n    auto candidate = dif_Square;\n    assert(candidate((5)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((15)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether it follows the sequence given in the patterns vector.\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n", "test": "}\nint main() {\n    auto candidate = is_samepatterns;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"green\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_75_find_tuples", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find tuples which have all elements divisible by k from the given vector of tuples.\nstd::vector<std::tuple<long, long, long>> find_tuples(std::vector<std::tuple<long, long, long>> test_list, long K) {\n", "test": "}\nint main() {\n    auto candidate = find_tuples;\n    assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(6, 24, 12), (std::tuple<long, long, long>)std::make_tuple(7, 9, 6), (std::tuple<long, long, long>)std::make_tuple(12, 18, 21)})), (6)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(6, 24, 12)})));\n    assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(5, 25, 30), (std::tuple<long, long, long>)std::make_tuple(4, 2, 3), (std::tuple<long, long, long>)std::make_tuple(7, 8, 9)})), (5)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(5, 25, 30)})));\n    assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(7, 9, 16), (std::tuple<long, long, long>)std::make_tuple(8, 16, 4), (std::tuple<long, long, long>)std::make_tuple(19, 17, 18)})), (4)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(8, 16, 4)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_77_is_Diff", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find whether a number is divisible by 11.\nbool is_Diff(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_Diff;\n    assert(candidate((12345)) == (false));\n    assert(candidate((1212112)) == (true));\n    assert(candidate((1212)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_79_word_len", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth tetrahedral number.\nlong tetrahedral_number(long n) {\n", "test": "}\nint main() {\n    auto candidate = tetrahedral_number;\n    assert(candidate((5)) == (35));\n    assert(candidate((6)) == (56));\n    assert(candidate((7)) == (84));\n}\n", "language": "cpp"}, {"task_id": "mbpp_83_get_Char", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nstd::string get_Char(std::string strr) {\n", "test": "}\nint main() {\n    auto candidate = get_Char;\n    assert(candidate((\"abc\")) == (\"f\"));\n    assert(candidate((\"gfg\")) == (\"t\"));\n    assert(candidate((\"ab\")) == (\"c\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_84_sequence", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth number in the newman conway sequence.\nlong sequence(long n) {\n", "test": "}\nint main() {\n    auto candidate = sequence;\n    assert(candidate((10)) == (6));\n    assert(candidate((2)) == (1));\n    assert(candidate((3)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find nth centered hexagonal number.\nlong centered_hexagonal_number(long n) {\n", "test": "}\nint main() {\n    auto candidate = centered_hexagonal_number;\n    assert(candidate((10)) == (271));\n    assert(candidate((2)) == (7));\n    assert(candidate((9)) == (217));\n}\n", "language": "cpp"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to merge three dictionaries into a single map.\nstd::map<std::string,std::string> merge_dictionaries_three(std::map<std::string,std::string> dict1, std::map<std::string,std::string> dict2, std::map<std::string,std::string> dict3) {\n", "test": "}\nint main() {\n    auto candidate = merge_dictionaries_three;\n    assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}})), (std::map<std::string,std::string>({{\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"}}))) == (std::map<std::string,std::string>({{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}})));\n    assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}})), (std::map<std::string,std::string>({{\"L\", \"lavender\"}, {\"B\", \"Blue\"}}))) == (std::map<std::string,std::string>({{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}})));\n    assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"L\", \"lavender\"}, {\"B\", \"Blue\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}}))) == (std::map<std::string,std::string>({{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_88_freq_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the frequency of all the elements in a vector, returned as a map.\nstd::map<long,long> freq_count(std::vector<long> list1) {\n", "test": "}\nint main() {\n    auto candidate = freq_count;\n    assert(candidate((std::vector<long>({(long)10, (long)10, (long)10, (long)10, (long)20, (long)20, (long)20, (long)20, (long)40, (long)40, (long)50, (long)50, (long)30}))) == (std::map<long,long>({{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)4, (long)1, (long)3, (long)1, (long)4}))) == (std::map<long,long>({{1, 3}, {2, 2}, {3, 3}, {4, 3}})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)4, (long)9, (long)10, (long)4, (long)5, (long)6, (long)7, (long)9, (long)5}))) == (std::map<long,long>({{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_89_closest_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the closest smaller number than n.\nlong closest_num(long N) {\n", "test": "}\nint main() {\n    auto candidate = closest_num;\n    assert(candidate((11)) == (10));\n    assert(candidate((7)) == (6));\n    assert(candidate((12)) == (11));\n}\n", "language": "cpp"}, {"task_id": "mbpp_90_len_log", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the length of the longest word.\nlong len_log(std::vector<std::string> list1) {\n", "test": "}\nint main() {\n    auto candidate = len_log;\n    assert(candidate((std::vector<std::string>({(std::string)\"python\", (std::string)\"PHP\", (std::string)\"bigdata\"}))) == (7));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))) == (3));\n    assert(candidate((std::vector<std::string>({(std::string)\"small\", (std::string)\"big\", (std::string)\"tall\"}))) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_91_find_substring", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if a string is present as a substring in a given vector of string values.\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n", "test": "}\nint main() {\n    auto candidate = find_substring;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"ack\")) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"abc\")) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"ange\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_92_is_undulating", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_93_power", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the value of 'a' to the power 'b'.\nlong power(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = power;\n    assert(candidate((3), (4)) == (81));\n    assert(candidate((2), (3)) == (8));\n    assert(candidate((5), (5)) == (3125));\n}\n", "language": "cpp"}, {"task_id": "mbpp_94_index_minimum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nstd::string index_minimum(std::vector<std::tuple<std::string, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = index_minimum;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Rash\", 143), (std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 200), (std::tuple<std::string, long>)std::make_tuple(\"Varsha\", 100)}))) == (\"Varsha\"));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Yash\", 185), (std::tuple<std::string, long>)std::make_tuple(\"Dawood\", 125), (std::tuple<std::string, long>)std::make_tuple(\"Sanya\", 175)}))) == (\"Dawood\"));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Sai\", 345), (std::tuple<std::string, long>)std::make_tuple(\"Salman\", 145), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 96)}))) == (\"Ayesha\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the length of the smallest vector in a vector of vectors.\nlong Find_Min_Length(std::vector<std::vector<long>> lst) {\n", "test": "}\nint main() {\n    auto candidate = Find_Min_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (1));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (2));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4, (long)4, (long)4})}))) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_96_divisor", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the number of divisors of a given integer.\nlong divisor(long n) {\n", "test": "}\nint main() {\n    auto candidate = divisor;\n    assert(candidate((15)) == (4));\n    assert(candidate((12)) == (6));\n    assert(candidate((9)) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find frequency of each element in a flattened vector of vectors, returned in a map.\nstd::map<long,long> frequency_lists(std::vector<std::vector<long>> list1) {\n", "test": "}\nint main() {\n    auto candidate = frequency_lists;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)2}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9, (long)5})}))) == (std::map<long,long>({{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12})}))) == (std::map<long,long>({{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)20, (long)30, (long)40, (long)17}), (std::vector<long>)std::vector<long>({(long)18, (long)16, (long)14, (long)13}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::map<long,long>({{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nstd::string decimal_to_binary(long n) {\n", "test": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((8)) == (\"1000\"));\n    assert(candidate((18)) == (\"10010\"));\n    assert(candidate((7)) == (\"111\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n", "test": "}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n", "language": "cpp"}, {"task_id": "mbpp_101_kth_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the kth element in the given vector using 1-based indexing.\nlong kth_element(std::vector<long> arr, long k) {\n", "test": "}\nint main() {\n    auto candidate = kth_element;\n    assert(candidate((std::vector<long>({(long)12, (long)3, (long)5, (long)7, (long)19})), (2)) == (3));\n    assert(candidate((std::vector<long>({(long)17, (long)24, (long)8, (long)23})), (3)) == (8));\n    assert(candidate((std::vector<long>({(long)16, (long)21, (long)25, (long)36, (long)4})), (4)) == (36));\n}\n", "language": "cpp"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n", "test": "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the Eulerian number a(n, m).\nlong eulerian_num(long n, long m) {\n", "test": "}\nint main() {\n    auto candidate = eulerian_num;\n    assert(candidate((3), (1)) == (4));\n    assert(candidate((4), (1)) == (11));\n    assert(candidate((5), (3)) == (26));\n}\n", "language": "cpp"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort each subvector of strings in a given vector of vectors.\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> input_list) {\n", "test": "}\nint main() {\n    auto candidate = sort_sublists;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"orange\", (std::string)\"white\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\" red \", (std::string)\"green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"blue \", (std::string)\" black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" orange\", (std::string)\"brown\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\" red \", (std::string)\"green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" black\", (std::string)\"blue \"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" orange\", (std::string)\"brown\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"zilver\", (std::string)\"gold\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"magnesium\", (std::string)\"aluminium\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"steel\", (std::string)\"bronze\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"gold\", (std::string)\"zilver\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"aluminium\", (std::string)\"magnesium\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"bronze\", (std::string)\"steel\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_105_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count true booleans in the given vector.\nlong count(std::vector<bool> lst) {\n", "test": "}\nint main() {\n    auto candidate = count;\n    assert(candidate((std::vector<bool>({(bool)true, (bool)false, (bool)true}))) == (2));\n    assert(candidate((std::vector<bool>({(bool)false, (bool)false}))) == (0));\n    assert(candidate((std::vector<bool>({(bool)true, (bool)true, (bool)true}))) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_106_add_lists", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to append the given vector to the given tuples.\nstd::tuple<long, long, long, long, long> add_lists(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = add_lists;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), (std::make_tuple(9, 10))) == (std::make_tuple(9, 10, 5, 6, 7)));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), (std::make_tuple(10, 11))) == (std::make_tuple(10, 11, 6, 7, 8)));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), (std::make_tuple(11, 12))) == (std::make_tuple(11, 12, 7, 8, 9)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to merge three vectors into a single sorted vector.\nstd::vector<long> merge_sorted_list(std::vector<long> num1, std::vector<long> num2, std::vector<long> num3) {\n", "test": "}\nint main() {\n    auto candidate = merge_sorted_list;\n    assert(candidate((std::vector<long>({(long)25, (long)24, (long)15, (long)4, (long)5, (long)29, (long)110})), (std::vector<long>({(long)19, (long)20, (long)11, (long)56, (long)25, (long)233, (long)154})), (std::vector<long>({(long)24, (long)26, (long)54, (long)48}))) == (std::vector<long>({(long)4, (long)5, (long)11, (long)15, (long)19, (long)20, (long)24, (long)24, (long)25, (long)25, (long)26, (long)29, (long)48, (long)54, (long)56, (long)110, (long)154, (long)233})));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)6, (long)8, (long)9})), (std::vector<long>({(long)2, (long)5, (long)7, (long)11})), (std::vector<long>({(long)1, (long)4, (long)7, (long)8, (long)12}))) == (std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)5, (long)5, (long)6, (long)7, (long)7, (long)8, (long)8, (long)9, (long)11, (long)12})));\n    assert(candidate((std::vector<long>({(long)18, (long)14, (long)10, (long)9, (long)8, (long)7, (long)9, (long)3, (long)2, (long)4, (long)1})), (std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58})), (std::vector<long>({(long)12, (long)74, (long)9, (long)50, (long)61, (long)41}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)7, (long)8, (long)9, (long)9, (long)9, (long)10, (long)12, (long)14, (long)14, (long)18, (long)22, (long)25, (long)25, (long)35, (long)41, (long)50, (long)58, (long)61, (long)65, (long)74, (long)75, (long)85})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nlong odd_Equivalent(std::string s, long n) {\n", "test": "}\nint main() {\n    auto candidate = odd_Equivalent;\n    assert(candidate((\"011001\"), (6)) == (3));\n    assert(candidate((\"11011\"), (5)) == (4));\n    assert(candidate((\"1010\"), (4)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_113_check_integer", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if a string represents an integer or not.\nbool check_integer(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = check_integer;\n    assert(candidate((\"python\")) == (false));\n    assert(candidate((\"1\")) == (true));\n    assert(candidate((\"12345\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given tuple of positive integers into a single integer.\nlong tuple_to_int(std::tuple<long, long, long> nums) {\n", "test": "}\nint main() {\n    auto candidate = tuple_to_int;\n    assert(candidate((std::make_tuple(1, 2, 3))) == (123));\n    assert(candidate((std::make_tuple(4, 5, 6))) == (456));\n    assert(candidate((std::make_tuple(5, 6, 7))) == (567));\n}\n", "language": "cpp"}, {"task_id": "mbpp_117_list_to_float", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert all possible convertible elements in a vector of vectors to floats.\nstd::vector<std::tuple<float, float>> list_to_float(std::vector<std::tuple<std::string, std::string>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = list_to_float;\n    assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"3\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"1\", \"26.45\"), (std::tuple<std::string, std::string>)std::make_tuple(\"7.32\", \"8\"), (std::tuple<std::string, std::string>)std::make_tuple(\"4\", \"8\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(3.0f, 4.0f), (std::tuple<float, float>)std::make_tuple(1.0f, 26.45f), (std::tuple<float, float>)std::make_tuple(7.32f, 8.0f), (std::tuple<float, float>)std::make_tuple(4.0f, 8.0f)})));\n    assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"4\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"2\", \"27\"), (std::tuple<std::string, std::string>)std::make_tuple(\"4.12\", \"9\"), (std::tuple<std::string, std::string>)std::make_tuple(\"7\", \"11\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(4.0f, 4.0f), (std::tuple<float, float>)std::make_tuple(2.0f, 27.0f), (std::tuple<float, float>)std::make_tuple(4.12f, 9.0f), (std::tuple<float, float>)std::make_tuple(7.0f, 11.0f)})));\n    assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"6\", \"78\"), (std::tuple<std::string, std::string>)std::make_tuple(\"5\", \"26.45\"), (std::tuple<std::string, std::string>)std::make_tuple(\"1.33\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"82\", \"13\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(6.0f, 78.0f), (std::tuple<float, float>)std::make_tuple(5.0f, 26.45f), (std::tuple<float, float>)std::make_tuple(1.33f, 4.0f), (std::tuple<float, float>)std::make_tuple(82.0f, 13.0f)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_118_string_to_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a vector of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_119_search", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nlong max_product_tuple(std::vector<std::tuple<long, long>> list1) {\n", "test": "}\nint main() {\n    auto candidate = max_product_tuple;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (36));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (200));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (484));\n}\n", "language": "cpp"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum all amicable numbers from 1 to a specified number.\nlong amicable_numbers_sum(long limit) {\n", "test": "}\nint main() {\n    auto candidate = amicable_numbers_sum;\n    assert(candidate((999)) == (504));\n    assert(candidate((9999)) == (31626));\n    assert(candidate((99)) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_125_find_length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_126_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of common divisors of two given numbers.\nlong sum(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = sum;\n    assert(candidate((10), (15)) == (6));\n    assert(candidate((100), (150)) == (93));\n    assert(candidate((4), (6)) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_127_multiply_int", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to multiply two integers.\nlong multiply_int(long x, long y) {\n", "test": "}\nint main() {\n    auto candidate = multiply_int;\n    assert(candidate((10), (20)) == (200));\n    assert(candidate((5), (10)) == (50));\n    assert(candidate((4), (8)) == (32));\n}\n", "language": "cpp"}, {"task_id": "mbpp_128_long_words", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find words that are longer than n characters from a given vector of words.\nstd::vector<std::string> long_words(long n, std::string str) {\n", "test": "}\nint main() {\n    auto candidate = long_words;\n    assert(candidate((3), (\"python is a programming language\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\", (std::string)\"language\"})));\n    assert(candidate((2), (\"writing a program\")) == (std::vector<std::string>({(std::string)\"writing\", (std::string)\"program\"})));\n    assert(candidate((5), (\"sorting list\")) == (std::vector<std::string>({(std::string)\"sorting\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate whether the matrix is a magic square.\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n", "test": "}\nint main() {\n    auto candidate = magic_square_test;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)12, (long)1, (long)14}), (std::vector<long>)std::vector<long>({(long)2, (long)13, (long)8, (long)11}), (std::vector<long>)std::vector<long>({(long)16, (long)3, (long)10, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)15, (long)4})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)8})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)7})}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the item with maximum frequency in a given vector.\nlong max_occurrences(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = max_occurrences;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)2, (long)6, (long)5, (long)1, (long)6, (long)1, (long)2, (long)3, (long)2, (long)4, (long)6, (long)9, (long)1, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)7, (long)9, (long)15, (long)14, (long)10, (long)12, (long)13, (long)16, (long)18}))) == (8));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)20, (long)30, (long)40, (long)90, (long)80, (long)50, (long)30, (long)20, (long)50, (long)10}))) == (20));\n}\n", "language": "cpp"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to reverse only the vowels of a given string (where y is not a vowel).\nstd::string reverse_vowels(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = reverse_vowels;\n    assert(candidate((\"Python\")) == (\"Python\"));\n    assert(candidate((\"USA\")) == (\"ASU\"));\n    assert(candidate((\"ab\")) == (\"ab\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_132_tup_string", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a vector to a string.\nstd::string tup_string(std::vector<std::string> tup1) {\n", "test": "}\nint main() {\n    auto candidate = tup_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"e\", (std::string)\"x\", (std::string)\"e\", (std::string)\"r\", (std::string)\"c\", (std::string)\"i\", (std::string)\"s\", (std::string)\"e\", (std::string)\"s\"}))) == (\"exercises\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"}))) == (\"program\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of the negative numbers of a given vector of numbers.\nlong sum_negativenum(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = sum_negativenum;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (-32));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)-14, (long)13, (long)-18, (long)12, (long)-20}))) == (-52));\n    assert(candidate((std::vector<long>({(long)19, (long)-65, (long)57, (long)39, (long)152, (long)-639, (long)121, (long)44, (long)90, (long)-190}))) == (-894));\n}\n", "language": "cpp"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth hexagonal number.\nlong hexagonal_num(long n) {\n", "test": "}\nint main() {\n    auto candidate = hexagonal_num;\n    assert(candidate((10)) == (190));\n    assert(candidate((5)) == (45));\n    assert(candidate((7)) == (91));\n}\n", "language": "cpp"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nbool is_Sum_Of_Powers_Of_Two(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_Sum_Of_Powers_Of_Two;\n    assert(candidate((10)) == (true));\n    assert(candidate((7)) == (false));\n    assert(candidate((14)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_142_count_samepair", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count number items that are identical in the same position of three given vectors.\nlong count_samepair(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n", "test": "}\nint main() {\n    auto candidate = count_samepair;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8}))) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_143_find_lists", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find number of vectors present in the given vector.\nlong find_lists(std::vector<std::any> Input) {\n", "test": "}\nint main() {\n    auto candidate = find_lists;\n    assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (2));\n    assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6})}))) == (3));\n    assert(candidate((std::vector<std::any>({(long)9, (long)8, (long)7, (long)6, (long)5, (long)4, (long)3, (long)2, (long)1}))) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the maximum difference between any two elements in a given vector.\nlong max_Abs_Diff(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = max_Abs_Diff;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)3, (long)2, (long)5, (long)1}))) == (8));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_160_find_solution", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<std::tuple<long, long>> find_solution(long a, long b, long n) {\n", "test": "}\nint main() {\n    auto candidate = find_solution;\n    assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));\n    assert(candidate((4), (2), (7)) == std::nullopt);\n    assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_161_remove_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all elements from a given vector present in another vector.\nstd::vector<long> remove_elements(std::vector<long> list1, std::vector<long> list2) {\n", "test": "}\nint main() {\n    auto candidate = remove_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)3, (long)5, (long)7}))) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)5, (long)7}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)8, (long)9, (long)10})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_162_sum_series", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nlong sum_series(long n) {\n", "test": "}\nint main() {\n    auto candidate = sum_series;\n    assert(candidate((6)) == (12));\n    assert(candidate((10)) == (30));\n    assert(candidate((9)) == (25));\n}\n", "language": "cpp"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to determine if the sum of the divisors of two integers are the same.\nbool are_equivalent(long num1, long num2) {\n", "test": "}\nint main() {\n    auto candidate = are_equivalent;\n    assert(candidate((36), (57)) == (false));\n    assert(candidate((2), (4)) == (false));\n    assert(candidate((23), (47)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_165_count_char_position", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nlong count_char_position(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = count_char_position;\n    assert(candidate((\"xbcefg\")) == (2));\n    assert(candidate((\"ABcED\")) == (3));\n    assert(candidate((\"AbgdeF\")) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a vector that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n", "test": "}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n", "test": "}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n", "language": "cpp"}, {"task_id": "mbpp_168_frequency", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n", "test": "}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of numbers in a vector within a range specified by two indices.\nlong sum_range_list(std::vector<long> list1, long m, long n) {\n", "test": "}\nint main() {\n    auto candidate = sum_range_list;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (8), (10)) == (29));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (5), (7)) == (16));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (7), (10)) == (38));\n}\n", "language": "cpp"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nlong perimeter_pentagon(long a) {\n", "test": "}\nint main() {\n    auto candidate = perimeter_pentagon;\n    assert(candidate((5)) == (25));\n    assert(candidate((10)) == (50));\n    assert(candidate((15)) == (75));\n}\n", "language": "cpp"}, {"task_id": "mbpp_172_count_occurance", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurence of the string 'std' in a given string.\nlong count_occurance(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = count_occurance;\n    assert(candidate((\"letstdlenstdporstd\")) == (3));\n    assert(candidate((\"truststdsolensporsd\")) == (1));\n    assert(candidate((\"makestdsostdworthit\")) == (2));\n    assert(candidate((\"stds\")) == (1));\n    assert(candidate((\"\")) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_222_check_type", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n", "test": "}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_223_is_majority", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n", "test": "}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n", "test": "}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to remove the characters which have odd index values of a given string.\nstd::string odd_values_string(std::string str) {\n", "test": "}\nint main() {\n    auto candidate = odd_values_string;\n    assert(candidate((\"abcdef\")) == (\"ace\"));\n    assert(candidate((\"python\")) == (\"pto\"));\n    assert(candidate((\"data\")) == (\"dt\"));\n    assert(candidate((\"lambs\")) == (\"lms\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_227_min_of_three", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n", "test": "}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n", "language": "cpp"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether all the bits are unset in the given range or not.\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) {\n", "test": "}\nint main() {\n    auto candidate = all_Bits_Set_In_The_Given_Range;\n    assert(candidate((4), (1), (2)) == (true));\n    assert(candidate((17), (2), (4)) == (true));\n    assert(candidate((39), (4), (6)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nstd::vector<long> re_arrange_array(std::vector<long> arr, long n) {\n", "test": "}\nint main() {\n    auto candidate = re_arrange_array;\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)-3, (long)4, (long)5, (long)6, (long)-7, (long)8, (long)9})), (9)) == (std::vector<long>({(long)-1, (long)-3, (long)-7, (long)4, (long)5, (long)6, (long)2, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)12, (long)-14, (long)-26, (long)13, (long)15})), (5)) == (std::vector<long>({(long)-14, (long)-26, (long)12, (long)13, (long)15})));\n    assert(candidate((std::vector<long>({(long)10, (long)24, (long)36, (long)-42, (long)-39, (long)-78, (long)85})), (7)) == (std::vector<long>({(long)-42, (long)-39, (long)-78, (long)10, (long)24, (long)36, (long)85})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_230_replace_blank", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nstd::string replace_blank(std::string str1, std::string char) {\n", "test": "}\nint main() {\n    auto candidate = replace_blank;\n    assert(candidate((\"hello people\"), (\"@\")) == (\"hello@people\"));\n    assert(candidate((\"python program language\"), (\"$\")) == (\"python$program$language\"));\n    assert(candidate((\"blank space\"), (\"-\")) == (\"blank-space\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_234_volume_cube", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the volume of a cube given its side length.\nlong volume_cube(long l) {\n", "test": "}\nint main() {\n    auto candidate = volume_cube;\n    assert(candidate((3)) == (27));\n    assert(candidate((2)) == (8));\n    assert(candidate((5)) == (125));\n}\n", "language": "cpp"}, {"task_id": "mbpp_237_check_occurences", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a map mapping each unique tuple to the number of times it occurs in the vector.\nstd::map<std::tuple<long, long>,long> check_occurences(std::vector<std::tuple<long, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = check_occurences;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(5, 2), (std::tuple<long, long>)std::make_tuple(6, 3)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(1, 3), 2}, {std::make_tuple(2, 5), 2}, {std::make_tuple(3, 6), 1}})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 2), (std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(3, 6), (std::tuple<long, long>)std::make_tuple(6, 3), (std::tuple<long, long>)std::make_tuple(7, 4)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(2, 4), 2}, {std::make_tuple(3, 6), 2}, {std::make_tuple(4, 7), 1}})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(13, 2), (std::tuple<long, long>)std::make_tuple(11, 23), (std::tuple<long, long>)std::make_tuple(12, 25), (std::tuple<long, long>)std::make_tuple(25, 12), (std::tuple<long, long>)std::make_tuple(16, 23)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(2, 13), 1}, {std::make_tuple(11, 23), 1}, {std::make_tuple(12, 25), 2}, {std::make_tuple(16, 23), 1}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of non-empty substrings of a given string.\nlong number_of_substrings(std::string str) {\n", "test": "}\nint main() {\n    auto candidate = number_of_substrings;\n    assert(candidate((\"abc\")) == (6));\n    assert(candidate((\"abcd\")) == (10));\n    assert(candidate((\"abcde\")) == (15));\n}\n", "language": "cpp"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlong get_total_number_of_sequences(long m, long n) {\n", "test": "}\nint main() {\n    auto candidate = get_total_number_of_sequences;\n    assert(candidate((10), (4)) == (4));\n    assert(candidate((5), (2)) == (6));\n    assert(candidate((16), (3)) == (84));\n}\n", "language": "cpp"}, {"task_id": "mbpp_240_replace_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nstd::vector<std::any> replace_list(std::vector<std::any> list1, std::vector<std::any> list2) {\n", "test": "}\nint main() {\n    auto candidate = replace_list;\n    assert(candidate((std::vector<std::any>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})), (std::vector<std::any>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<std::any>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)5, (long)6, (long)7, (long)8}))) == (std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<std::any>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\"})), (std::vector<std::any>({(std::string)\"yellow\"}))) == (std::vector<std::any>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"yellow\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_242_count_charac", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the total number of characters in a string.\nlong count_charac(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = count_charac;\n    assert(candidate((\"python programming\")) == (18));\n    assert(candidate((\"language\")) == (8));\n    assert(candidate((\"words\")) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n", "test": "}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n", "language": "cpp"}, {"task_id": "mbpp_245_max_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n", "language": "cpp"}, {"task_id": "mbpp_247_lps", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nlong lps(std::string str) {\n", "test": "}\nint main() {\n    auto candidate = lps;\n    assert(candidate((\"TENS FOR TENS\")) == (5));\n    assert(candidate((\"CARDIO FOR CARDS\")) == (7));\n    assert(candidate((\"PART OF THE JOURNEY IS PART\")) == (9));\n}\n", "language": "cpp"}, {"task_id": "mbpp_249_intersection_array", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the intersection of two vectors.\nstd::vector<long> intersection_array(std::vector<long> array_nums1, std::vector<long> array_nums2) {\n", "test": "}\nint main() {\n    auto candidate = intersection_array;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)2, (long)4, (long)8, (long)9}))) == (std::vector<long>({(long)1, (long)2, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)3, (long)5, (long)7, (long)9}))) == (std::vector<long>({(long)3, (long)5, (long)7, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<long>({(long)10})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_250_count_X", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nlong count_X(std::vector<long> tup, long x) {\n", "test": "}\nint main() {\n    auto candidate = count_X;\n    assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (10)) == (3));\n    assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (8)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_251_insert_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n", "test": "}\nint main() {\n    auto candidate = insert_element;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Black\"})), (\"c\")) == (std::vector<std::string>({(std::string)\"c\", (std::string)\"Red\", (std::string)\"c\", (std::string)\"Green\", (std::string)\"c\", (std::string)\"Black\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"python\", (std::string)\"java\"})), (\"program\")) == (std::vector<std::string>({(std::string)\"program\", (std::string)\"python\", (std::string)\"program\", (std::string)\"java\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"happy\", (std::string)\"sad\"})), (\"laugh\")) == (std::vector<std::string>({(std::string)\"laugh\", (std::string)\"happy\", (std::string)\"laugh\", (std::string)\"sad\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_252_convert", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to convert complex numbers to polar coordinates.\nstd::tuple<float, float> convert(long numbers) {\n", "test": "}\nint main() {\n    auto candidate = convert;\n    assert(candidate((1)) == (std::make_tuple(1.0f, 0.0f)));\n    assert(candidate((4)) == (std::make_tuple(4.0f, 0.0f)));\n    assert(candidate((5)) == (std::make_tuple(5.0f, 0.0f)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_253_count_integer", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string_float{\n    long f0;\n    std::string f1;\n    float f2;    Union_long_std_string_float(long _f0) : f0(_f0) {}\n    Union_long_std_string_float(std::string _f1) : f1(_f1) {}\n    Union_long_std_string_float(float _f2) : f2(_f2) {}\n    ~Union_long_std_string_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }    bool operator==(float f) {\n        return f2 == f ;\n    }\n};\n// Write a cpp function that returns the number of integer elements in a given vector.\nlong count_integer(std::vector<Union_long_std_string_float> list1) {\n", "test": "}\nint main() {\n    auto candidate = count_integer;\n    assert(candidate((std::vector<Union_long_std_string_float>({1, 2, \"abc\", 1.2f}))) == (2));\n    assert(candidate((std::vector<Union_long_std_string_float>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<Union_long_std_string_float>({(long)1, (long)1.2f, (long)4, (long)5.1f}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\nstd::vector<std::vector<std::string>> combinations_colors(std::vector<std::string> l, long n) {\n", "test": "}\nint main() {\n    auto candidate = combinations_colors;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\", (std::string)\"Blue\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Blue\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Blue\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\", (std::string)\"Blue\", (std::string)\"Blue\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nlong count_Primes_nums(long n) {\n", "test": "}\nint main() {\n    auto candidate = count_Primes_nums;\n    assert(candidate((5)) == (2));\n    assert(candidate((10)) == (4));\n    assert(candidate((100)) == (25));\n}\n", "language": "cpp"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two numbers and returns a vector with the second number and then the first number.\nstd::vector<long> swap_numbers(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = swap_numbers;\n    assert(candidate((10), (20)) == (std::vector<long>({(long)20, (long)10})));\n    assert(candidate((15), (17)) == (std::vector<long>({(long)17, (long)15})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)200, (long)100})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to maximize the given two vectors.\nstd::vector<std::vector<long>> maximize_elements(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = maximize_elements;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)7, (long)10})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)5, (long)10}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)8, (long)11})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)11}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)9, (long)12})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_260_newman_prime", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nlong newman_prime(long n) {\n", "test": "}\nint main() {\n    auto candidate = newman_prime;\n    assert(candidate((3)) == (7));\n    assert(candidate((4)) == (17));\n    assert(candidate((5)) == (41));\n}\n", "language": "cpp"}, {"task_id": "mbpp_261_division_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nstd::tuple<long, long, long, long> division_elements(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = division_elements;\n    assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(2, 2, 2, 3)));\n    assert(candidate((std::make_tuple(12, 6, 8, 16)), (std::make_tuple(6, 3, 4, 4))) == (std::make_tuple(2, 2, 2, 4)));\n    assert(candidate((std::make_tuple(20, 14, 36, 18)), (std::make_tuple(5, 7, 6, 9))) == (std::make_tuple(4, 2, 6, 2)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nstd::any split_two_parts(std::vector<std::any> list1, long L) {\n", "test": "}\nint main() {\n    auto candidate = split_two_parts;\n    assert(candidate((std::vector<std::any>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)1})), (3)) == std::make_tuple(std::vector<long>({(long)1, (long)1, (long)2}), std::vector<long>({(long)3, (long)4, (long)4, (long)5, (long)1})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (2)) == std::make_tuple(std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), std::vector<std::string>({(std::string)\"c\", (std::string)\"d\"})));\n    assert(candidate((std::vector<std::any>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})), (4)) == std::make_tuple(std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\"}), std::vector<std::string>({(std::string)\"o\", (std::string)\"n\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_264_dog_age", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate a dog's age in dog's years.\nlong dog_age(long h_age) {\n", "test": "}\nint main() {\n    auto candidate = dog_age;\n    assert(candidate((12)) == (61));\n    assert(candidate((15)) == (73));\n    assert(candidate((24)) == (109));\n}\n", "language": "cpp"}, {"task_id": "mbpp_265_list_split", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nstd::vector<std::vector<std::any>> list_split(std::vector<std::any> S, long step) {\n", "test": "}\nint main() {\n    auto candidate = list_split;\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"e\", (std::string)\"f\", (std::string)\"g\", (std::string)\"h\", (std::string)\"i\", (std::string)\"j\", (std::string)\"k\", (std::string)\"l\", (std::string)\"m\", (std::string)\"n\"})), (3)) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"d\", (std::string)\"g\", (std::string)\"j\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\", (std::string)\"e\", (std::string)\"h\", (std::string)\"k\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"f\", (std::string)\"i\", (std::string)\"l\"})})));\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11, (long)12, (long)13, (long)14})), (3)) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)4, (long)7, (long)10, (long)13}), (std::vector<long>)std::vector<long>({(long)2, (long)5, (long)8, (long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)12})})));\n    assert(candidate((std::vector<std::any>({(std::string)\"python\", (std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\", (std::string)\"SQL\"})), (2)) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"python\", (std::string)\"C\", (std::string)\"DBMS\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"java\", (std::string)\"C++\", (std::string)\"SQL\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the lateral surface area of a cube given its side length.\nlong lateralsurface_cube(long l) {\n", "test": "}\nint main() {\n    auto candidate = lateralsurface_cube;\n    assert(candidate((5)) == (100));\n    assert(candidate((9)) == (324));\n    assert(candidate((10)) == (400));\n}\n", "language": "cpp"}, {"task_id": "mbpp_267_square_Sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlong square_Sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = square_Sum;\n    assert(candidate((2)) == (10));\n    assert(candidate((3)) == (35));\n    assert(candidate((4)) == (84));\n}\n", "language": "cpp"}, {"task_id": "mbpp_268_find_star_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n'th star number.\nlong find_star_num(long n) {\n", "test": "}\nint main() {\n    auto candidate = find_star_num;\n    assert(candidate((3)) == (37));\n    assert(candidate((4)) == (73));\n    assert(candidate((5)) == (121));\n}\n", "language": "cpp"}, {"task_id": "mbpp_269_ascii_value", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the ascii value of a character.\nlong ascii_value(std::string k) {\n", "test": "}\nint main() {\n    auto candidate = ascii_value;\n    assert(candidate((\"A\")) == (65));\n    assert(candidate((\"R\")) == (82));\n    assert(candidate((\"S\")) == (83));\n}\n", "language": "cpp"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of even numbers at even positions of a vector.\nlong sum_even_and_even_index(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = sum_even_and_even_index;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)12, (long)1, (long)18, (long)8}))) == (30));\n    assert(candidate((std::vector<long>({(long)3, (long)20, (long)17, (long)9, (long)2, (long)10, (long)18, (long)13, (long)6, (long)18}))) == (26));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)12, (long)1}))) == (12));\n}\n", "language": "cpp"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nlong even_Power_Sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = even_Power_Sum;\n    assert(candidate((2)) == (1056));\n    assert(candidate((3)) == (8832));\n    assert(candidate((1)) == (32));\n}\n", "language": "cpp"}, {"task_id": "mbpp_272_rear_extract", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nstd::vector<long> rear_extract(std::vector<std::tuple<long, std::string, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = rear_extract;\n    assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Rash\", 21), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Varsha\", 20), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Kil\", 19)}))) == (std::vector<long>({(long)21, (long)20, (long)19})));\n    assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sai\", 36), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Ayesha\", 25), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Salman\", 45)}))) == (std::vector<long>({(long)36, (long)25, (long)45})));\n    assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sudeep\", 14), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Vandana\", 36), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Dawood\", 56)}))) == (std::vector<long>({(long)14, (long)36, (long)56})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_273_substract_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nstd::tuple<long, long, long> substract_elements(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = substract_elements;\n    assert(candidate((std::make_tuple(10, 4, 5)), (std::make_tuple(2, 5, 18))) == (std::make_tuple(8, -1, -13)));\n    assert(candidate((std::make_tuple(11, 2, 3)), (std::make_tuple(24, 45, 16))) == (std::make_tuple(-13, -43, -13)));\n    assert(candidate((std::make_tuple(7, 18, 9)), (std::make_tuple(10, 11, 12))) == (std::make_tuple(-3, 7, -3)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlong even_binomial_Coeff_Sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = even_binomial_Coeff_Sum;\n    assert(candidate((4)) == (8));\n    assert(candidate((6)) == (32));\n    assert(candidate((2)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_277_dict_filter", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\nstd::map<std::string,long> dict_filter(std::map<std::string,long> dict, long n) {\n", "test": "}\nint main() {\n    auto candidate = dict_filter;\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (170)) == (std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}})));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (180)) == (std::map<std::string,long>({{\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}})));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (190)) == (std::map<std::string,long>({{\"Pierre Cox\", 190}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_tuple_long, long_{\n    long f0;\n    std::tuple<long, long> f1;    Union_long_std_tuple_long, long_(long _f0) : f0(_f0) {}\n    Union_long_std_tuple_long, long_(std::tuple<long, long> _f1) : f1(_f1) {}\n    ~Union_long_std_tuple_long, long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::tuple<long, long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the number of elements that occurs before the vector element in the given tuple.\nlong count_first_elements(std::vector<Union_long_std_tuple_long, long_> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = count_first_elements;\n    assert(candidate((std::vector<Union_long_std_tuple_long, long_>({1, 5, 7, std::make_tuple(4, 6), 10}))) == (3));\n    assert(candidate((std::vector<Union_long_std_tuple_long, long_>({2, 9, std::make_tuple(5, 7), 11}))) == (2));\n    assert(candidate((std::vector<Union_long_std_tuple_long, long_>({11, 15, 5, 8, std::make_tuple(2, 3), 8}))) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth decagonal number.\nlong is_num_decagonal(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_num_decagonal;\n    assert(candidate((3)) == (27));\n    assert(candidate((7)) == (175));\n    assert(candidate((10)) == (370));\n}\n", "language": "cpp"}, {"task_id": "mbpp_280_sequential_search", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nstd::tuple<bool, long> sequential_search(std::vector<long> dlist, long item) {\n", "test": "}\nint main() {\n    auto candidate = sequential_search;\n    assert(candidate((std::vector<long>({(long)11, (long)23, (long)58, (long)31, (long)56, (long)77, (long)43, (long)12, (long)65, (long)19})), (31)) == (std::make_tuple(true, 3)));\n    assert(candidate((std::vector<long>({(long)12, (long)32, (long)45, (long)62, (long)35, (long)47, (long)44, (long)61})), (61)) == (std::make_tuple(true, 7)));\n    assert(candidate((std::vector<long>({(long)9, (long)10, (long)17, (long)19, (long)22, (long)39, (long)48, (long)56})), (48)) == (std::make_tuple(true, 6)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_281_all_unique", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n", "test": "}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_282_sub_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to subtract two vectors element-wise.\nstd::vector<long> sub_list(std::vector<long> nums1, std::vector<long> nums2) {\n", "test": "}\nint main() {\n    auto candidate = sub_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)-3, (long)-3, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (std::vector<long>({(long)3, (long)4}))) == (std::vector<long>({(long)-2, (long)-2})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<long>({(long)40, (long)50})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_283_validate", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n", "test": "}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_284_check_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and element and checks whether all items in the vector are equal to the given element.\nbool check_element(std::vector<std::any> list, std::any element) {\n", "test": "}\nint main() {\n    auto candidate = check_element;\n    assert(candidate((std::vector<std::any>({(std::string)\"green\", (std::string)\"orange\", (std::string)\"black\", (std::string)\"white\"})), (std::any(\"blue\"))) == (false));\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4})), (std::any(7))) == (false));\n    assert(candidate((std::vector<std::any>({(std::string)\"green\", (std::string)\"green\", (std::string)\"green\", (std::string)\"green\"})), (std::any(\"green\"))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nbool text_match_two_three(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_match_two_three;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abbbba\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n", "test": "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_287_square_Sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function takes in an integer n and returns the sum of squares of first n even natural numbers.\nlong square_Sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = square_Sum;\n    assert(candidate((2)) == (20));\n    assert(candidate((3)) == (56));\n    assert(candidate((4)) == (120));\n}\n", "language": "cpp"}, {"task_id": "mbpp_290_max_length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the vector of maximum length in a vector of vectors.\nstd::tuple<long, std::vector<long>> max_length(std::vector<std::vector<long>> list1) {\n", "test": "}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == (std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == (std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25}))));\n}\n", "language": "cpp"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n", "test": "}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n", "language": "cpp"}, {"task_id": "mbpp_292_find", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find quotient of two numbers (rounded down to the nearest integer).\nlong find(long n, long m) {\n", "test": "}\nint main() {\n    auto candidate = find;\n    assert(candidate((10), (3)) == (3));\n    assert(candidate((4), (2)) == (2));\n    assert(candidate((20), (5)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the third side of a right angled triangle.\nfloat otherside_rightangle(long w, long h) {\n", "test": "}\nint main() {\n    auto candidate = otherside_rightangle;\n    assert(candidate((7), (8)) == (10.63014581273465f));\n    assert(candidate((3), (4)) == (float(5)));\n    assert(candidate((7), (15)) == (16.55294535724685f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_294_max_val", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the maximum value in a given heterogeneous vector.\nlong max_val(std::vector<Union_std_string_long> listval) {\n", "test": "}\nint main() {\n    auto candidate = max_val;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (5));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (25));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (50));\n}\n", "language": "cpp"}, {"task_id": "mbpp_295_sum_div", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return the sum of all divisors of a number.\nlong sum_div(long number) {\n", "test": "}\nint main() {\n    auto candidate = sum_div;\n    assert(candidate((8)) == (7));\n    assert(candidate((12)) == (16));\n    assert(candidate((7)) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count inversions in a vector.\nlong get_Inv_Count(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_297_flatten_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a given nested vector structure.\nstd::vector<long> flatten_list(std::vector<Union_long_std_vector_long_> list1) {\n", "test": "}\nint main() {\n    auto candidate = flatten_list;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the maximum aggregate from the vector of tuples.\nstd::tuple<std::string, long> max_aggregate(std::vector<std::tuple<std::string, long>> stdata) {\n", "test": "}\nint main() {\n    auto candidate = max_aggregate;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 7), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 122), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 84)}))) == (std::make_tuple(\"Juan Whelan\", 212)));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 50), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 48), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 37), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 22), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 14)}))) == (std::make_tuple(\"Juan Whelan\", 72)));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 20), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 30), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 40), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 50)}))) == (std::make_tuple(\"Sabah Colley\", 70)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_304_find_Element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find element at a given index after number of rotations.\nlong find_Element(std::vector<long> arr, std::vector<std::vector<long>> ranges, long rotations, long index) {\n", "test": "}\nint main() {\n    auto candidate = find_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)2}), (std::vector<long>)std::vector<long>({(long)0, (long)3})})), (2), (1)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (2)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (1)) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_305_start_withp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return two words from a vector of words starting with letter 'p'.\nstd::tuple<std::string, std::string> start_withp(std::vector<std::string> words) {\n", "test": "}\nint main() {\n    auto candidate = start_withp;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python PHP\", (std::string)\"Java JavaScript\", (std::string)\"c c++\"}))) == (std::make_tuple(\"Python\", \"PHP\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python Programming\", (std::string)\"Java Programming\"}))) == (std::make_tuple(\"Python\", \"Programming\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"Pqrst Pqr\", (std::string)\"qrstuv\"}))) == (std::make_tuple(\"Pqrst\", \"Pqr\")));\n}\n", "language": "cpp"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n", "test": "}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n", "language": "cpp"}, {"task_id": "mbpp_308_large_product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n", "test": "}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_309_maximum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the maximum of two numbers.\nlong maximum(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((5), (10)) == (10));\n    assert(candidate((-1), (-2)) == (-1));\n    assert(candidate((9), (7)) == (9));\n}\n", "language": "cpp"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given string to a vector of characters.\nstd::vector<std::string> string_to_tuple(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = string_to_tuple;\n    assert(candidate((\"python 3.0\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\", (std::string)\"3\", (std::string)\".\", (std::string)\"0\"})));\n    assert(candidate((\"item1\")) == (std::vector<std::string>({(std::string)\"i\", (std::string)\"t\", (std::string)\"e\", (std::string)\"m\", (std::string)\"1\"})));\n    assert(candidate((\"15.10\")) == (std::vector<std::string>({(std::string)\"1\", (std::string)\"5\", (std::string)\".\", (std::string)\"1\", (std::string)\"0\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the highest power of 2 that is less than or equal to n.\nlong highest_Power_of_2(long n) {\n", "test": "}\nint main() {\n    auto candidate = highest_Power_of_2;\n    assert(candidate((10)) == (8));\n    assert(candidate((19)) == (16));\n    assert(candidate((32)) == (32));\n}\n", "language": "cpp"}, {"task_id": "mbpp_389_find_lucas", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n'th lucas number.\nlong find_lucas(long n) {\n", "test": "}\nint main() {\n    auto candidate = find_lucas;\n    assert(candidate((9)) == (76));\n    assert(candidate((4)) == (7));\n    assert(candidate((3)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_390_add_string", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to apply a given format string to all of the elements in a vector.\nstd::vector<std::string> add_string(std::vector<std::any> list_, std::string string) {\n", "test": "}\nint main() {\n    auto candidate = add_string;\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4})), (\"temp{0}\")) == (std::vector<std::string>({(std::string)\"temp1\", (std::string)\"temp2\", (std::string)\"temp3\", (std::string)\"temp4\"})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (\"python{0}\")) == (std::vector<std::string>({(std::string)\"pythona\", (std::string)\"pythonb\", (std::string)\"pythonc\", (std::string)\"pythond\"})));\n    assert(candidate((std::vector<std::any>({(long)5, (long)6, (long)7, (long)8})), (\"string{0}\")) == (std::vector<std::string>({(std::string)\"string5\", (std::string)\"string6\", (std::string)\"string7\", (std::string)\"string8\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert more than one vector to nested map.\nstd::vector<std::map<std::string,std::map<std::string,long>>> convert_list_dictionary(std::vector<std::string> l1, std::vector<std::string> l2, std::vector<long> l3) {\n", "test": "}\nint main() {\n    auto candidate = convert_list_dictionary;\n    assert(candidate((std::vector<std::string>({(std::string)\"S001\", (std::string)\"S002\", (std::string)\"S003\", (std::string)\"S004\"})), (std::vector<std::string>({(std::string)\"Adina Park\", (std::string)\"Leyton Marsh\", (std::string)\"Duncan Boyle\", (std::string)\"Saim Richards\"})), (std::vector<long>({(long)85, (long)98, (long)89, (long)92}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S001\", std::map<std::string,long>({{\"Adina Park\", 85}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S002\", std::map<std::string,long>({{\"Leyton Marsh\", 98}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S003\", std::map<std::string,long>({{\"Duncan Boyle\", 89}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S004\", std::map<std::string,long>({{\"Saim Richards\", 92}})}})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"def\", (std::string)\"ghi\", (std::string)\"jkl\"})), (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\", (std::string)\"programs\"})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"abc\", std::map<std::string,long>({{\"python\", 100}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"def\", std::map<std::string,long>({{\"program\", 200}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"ghi\", std::map<std::string,long>({{\"language\", 300}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"jkl\", std::map<std::string,long>({{\"programs\", 400}})}})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"A1\", (std::string)\"A2\", (std::string)\"A3\", (std::string)\"A4\"})), (std::vector<std::string>({(std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\"})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A1\", std::map<std::string,long>({{\"java\", 10}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A2\", std::map<std::string,long>({{\"C\", 20}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A3\", std::map<std::string,long>({{\"C++\", 30}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A4\", std::map<std::string,long>({{\"DBMS\", 40}})}})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlong get_max_sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = get_max_sum;\n    assert(candidate((60)) == (106));\n    assert(candidate((10)) == (12));\n    assert(candidate((2)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_393_max_length_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the vector with maximum length.\nstd::tuple<long, std::vector<long>> max_length_list(std::vector<std::vector<long>> input_list) {\n", "test": "}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == (std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == (std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9}))));\n}\n", "language": "cpp"}, {"task_id": "mbpp_394_check_distinct", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if given vector contains no duplicates.\nbool check_distinct(std::vector<long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = check_distinct;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)5, (long)6, (long)1, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the first non-repeated character in a given string.\nstd::optional<std::string> first_non_repeating_character(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = first_non_repeating_character;\n    assert(candidate((\"abcabc\")) == std::nullopt);\n    assert(candidate((\"abc\")) == \"a\");\n    assert(candidate((\"ababc\")) == \"c\");\n}\n", "language": "cpp"}, {"task_id": "mbpp_396_check_char", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string starts and ends with the same character or not.\nstd::string check_char(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = check_char;\n    assert(candidate((\"abba\")) == (\"Valid\"));\n    assert(candidate((\"a\")) == (\"Valid\"));\n    assert(candidate((\"abcd\")) == (\"Invalid\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_397_median_numbers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of three numbers.\nfloat median_numbers(long a, long b, long c) {\n", "test": "}\nint main() {\n    auto candidate = median_numbers;\n    assert(candidate((25), (55), (65)) == (55.0f));\n    assert(candidate((20), (10), (30)) == (20.0f));\n    assert(candidate((15), (45), (75)) == (45.0f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to compute the sum of digits of each number of a given vector.\nlong sum_of_digits(std::vector<std::any> nums) {\n", "test": "}\nint main() {\n    auto candidate = sum_of_digits;\n    assert(candidate((std::vector<std::any>({(long)10, (long)2, (long)56}))) == (14));\n    assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<std::any>({10, 20, 4, 5, \"b\", 70, \"a\"})}))) == (19));\n    assert(candidate((std::vector<std::any>({(long)10, (long)20, (long)-4, (long)5, (long)-70}))) == (19));\n}\n", "language": "cpp"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nstd::tuple<long, long, long, long> bitwise_xor(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = bitwise_xor;\n    assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(15, 6, 5, 10)));\n    assert(candidate((std::make_tuple(11, 5, 7, 10)), (std::make_tuple(6, 3, 4, 4))) == (std::make_tuple(13, 6, 3, 14)));\n    assert(candidate((std::make_tuple(12, 6, 8, 11)), (std::make_tuple(7, 4, 5, 6))) == (std::make_tuple(11, 2, 13, 13)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_400_extract_freq", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the number of unique tuples in the given vector.\nlong extract_freq(std::vector<std::tuple<long, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = extract_freq;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(5, 6)}))) == (3));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 15), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(6, 7)}))) == (4));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 16), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 9)}))) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise addition of vector elements in the given two nested vectors.\nstd::vector<std::vector<long>> add_nested_tuples(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = add_nested_tuples;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)10}), (std::vector<long>)std::vector<long>({(long)7, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)8, (long)13})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)12}), (std::vector<long>)std::vector<long>({(long)9, (long)16}), (std::vector<long>)std::vector<long>({(long)5, (long)12}), (std::vector<long>)std::vector<long>({(long)10, (long)15})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)11, (long)18}), (std::vector<long>)std::vector<long>({(long)7, (long)14}), (std::vector<long>)std::vector<long>({(long)12, (long)17})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_404_minimum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the minimum of two numbers.\nlong minimum(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = minimum;\n    assert(candidate((1), (2)) == (1));\n    assert(candidate((-5), (-4)) == (-5));\n    assert(candidate((0), (0)) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to check whether an element exists within a tuple.\nbool check_tuplex(std::vector<Union_std_string_long> tuplex, std::any tuple1) {\n", "test": "}\nint main() {\n    auto candidate = check_tuplex;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(\"r\"))) == (true));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(\"5\"))) == (false));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(3))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_406_find_Parity", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find whether the parity of a given number is odd.\nbool find_Parity(long x) {\n", "test": "}\nint main() {\n    auto candidate = find_Parity;\n    assert(candidate((12)) == (false));\n    assert(candidate((7)) == (true));\n    assert(candidate((10)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n", "test": "}\nint main() {\n    auto candidate = rearrange_bigger;\n    assert(candidate((12)) == (std::any(21)));\n    assert(candidate((10)) == (std::any(false)));\n    assert(candidate((102)) == (std::any(120)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nstd::vector<std::vector<long>> k_smallest_pairs(std::vector<long> nums1, std::vector<long> nums2, long k) {\n", "test": "}\nint main() {\n    auto candidate = k_smallest_pairs;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (2)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)4})})));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2})})));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (7)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)2})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the minimum product from the pairs of tuples within a given vector.\nlong min_product_tuple(std::vector<std::tuple<long, long>> list1) {\n", "test": "}\nint main() {\n    auto candidate = min_product_tuple;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (8));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (30));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (100));\n}\n", "language": "cpp"}, {"task_id": "mbpp_410_min_val", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the minimum value in a given heterogeneous vector.\nlong min_val(std::vector<Union_std_string_long> listval) {\n", "test": "}\nint main() {\n    auto candidate = min_val;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (2));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (15));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (20));\n}\n", "language": "cpp"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n", "test": "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"android_tv\")) == (\"AndroidTv\"));\n    assert(candidate((\"google_pixel\")) == (\"GooglePixel\"));\n    assert(candidate((\"apple_watch\")) == (\"AppleWatch\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_412_remove_odd", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to remove odd numbers from a given vector.\nstd::vector<long> remove_odd(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the nth element from a given vector of tuples.\nstd::vector<std::any> extract_nth_element(std::vector<std::tuple<std::string, long, long>> list1, long n) {\n", "test": "}\nint main() {\n    auto candidate = extract_nth_element;\n    assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (0)) == (std::vector<std::any>({(std::string)\"Greyson Fulton\", (std::string)\"Brady Kent\", (std::string)\"Wyatt Knott\", (std::string)\"Beau Turnbull\"})));\n    assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (2)) == (std::vector<std::any>({(long)99, (long)96, (long)94, (long)98})));\n    assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (1)) == (std::vector<std::any>({(long)98, (long)97, (long)91, (long)94})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_414_overlapping", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether any value in a sequence exists in a sequence or not.\nbool overlapping(std::vector<long> list1, std::vector<long> list2) {\n", "test": "}\nint main() {\n    auto candidate = overlapping;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)8, (long)9}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)5})), (std::vector<long>({(long)1, (long)4, (long)5}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_415_max_Product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find a pair with highest product from a given vector of integers.\nstd::tuple<long, long> max_Product(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = max_Product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)7, (long)0, (long)8, (long)4}))) == (std::make_tuple(7, 8)));\n    assert(candidate((std::vector<long>({(long)0, (long)-1, (long)-2, (long)-4, (long)5, (long)0, (long)-6}))) == (std::make_tuple(-4, -6)));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::make_tuple(2, 3)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_417_group_tuples", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find common first element in given vector of vectors.\nstd::vector<std::vector<std::string>> group_tuples(std::vector<std::vector<std::string>> Input) {\n", "test": "}\nint main() {\n    auto candidate = group_tuples;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"w\", (std::string)\"t\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"w\", (std::string)\"t\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"e\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"e\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"h\", (std::string)\"i\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"h\", (std::string)\"i\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_418_Find_Max", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the element of a vector having maximum length.\nstd::vector<std::any> Find_Max(std::vector<std::vector<std::any>> lst) {\n", "test": "}\nint main() {\n    auto candidate = Find_Max;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\", (std::string)\"C\"})}))) == (std::vector<std::any>({(std::string)\"A\", (std::string)\"B\", (std::string)\"C\"})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::any>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)5, (long)6, (long)1})}))) == (std::vector<std::any>({(long)1, (long)5, (long)6, (long)1})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_float_long{\n    float f0;\n    long f1;    Union_float_long(float _f0) : f0(_f0) {}\n    Union_float_long(long _f1) : f1(_f1) {}\n    ~Union_float_long() {}\n    bool operator==(float f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\nlong round_and_sum(std::vector<Union_float_long> list1) {\n", "test": "}\nint main() {\n    auto candidate = round_and_sum;\n    assert(candidate((std::vector<Union_float_long>({(float)22.4f, (float)4.0f, (float)-16.22f, (float)-9.1f, (float)11.0f, (float)-12.22f, (float)14.2f, (float)-5.2f, (float)17.5f}))) == (243));\n    assert(candidate((std::vector<Union_float_long>({(long)5, (long)2, (long)9, (long)24.3f, (long)29}))) == (345));\n    assert(candidate((std::vector<Union_float_long>({(float)25.0f, (float)56.7f, (float)89.2f}))) == (513));\n}\n", "language": "cpp"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the cube sum of first n even natural numbers.\nlong cube_Sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = cube_Sum;\n    assert(candidate((2)) == (72));\n    assert(candidate((3)) == (288));\n    assert(candidate((4)) == (800));\n}\n", "language": "cpp"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to concatenate each element of tuple by the delimiter.\nstd::string concatenate_tuple(std::tuple<std::string, std::string, long, std::string> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = concatenate_tuple;\n    assert(candidate((std::make_tuple(\"ID\", \"is\", 4, \"UTS\"))) == (\"ID-is-4-UTS\"));\n    assert(candidate((std::make_tuple(\"QWE\", \"is\", 4, \"RTY\"))) == (\"QWE-is-4-RTY\"));\n    assert(candidate((std::make_tuple(\"ZEN\", \"is\", 4, \"OP\"))) == (\"ZEN-is-4-OP\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the average of cubes of first n natural numbers.\nfloat find_Average_Of_Cube(long n) {\n", "test": "}\nint main() {\n    auto candidate = find_Average_Of_Cube;\n    assert(candidate((2)) == (4.5f));\n    assert(candidate((3)) == (float(12)));\n    assert(candidate((1)) == (float(1)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_424_extract_rear", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract only the rear index element of each string in the given tuple.\nstd::vector<std::string> extract_rear(std::tuple<std::string, std::string, std::string> test_tuple) {\n", "test": "}\nint main() {\n    auto candidate = extract_rear;\n    assert(candidate((std::make_tuple(\"Mers\", \"for\", \"Vers\"))) == (std::vector<std::string>({(std::string)\"s\", (std::string)\"r\", (std::string)\"s\"})));\n    assert(candidate((std::make_tuple(\"Avenge\", \"for\", \"People\"))) == (std::vector<std::string>({(std::string)\"e\", (std::string)\"r\", (std::string)\"e\"})));\n    assert(candidate((std::make_tuple(\"Gotta\", \"get\", \"go\"))) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"t\", (std::string)\"o\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of subvectors containing a particular element.\nlong count_element_in_list(std::vector<std::vector<std::any>> list1, std::any x) {\n", "test": "}\nint main() {\n    auto candidate = count_element_in_list;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)11}), (std::vector<long>)std::vector<long>({(long)1, (long)15, (long)7})})), (std::any(1))) == (3));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"A\"))) == (3));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"E\"))) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to filter odd numbers.\nstd::vector<long> filter_oddnumbers(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = filter_oddnumbers;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)45, (long)67, (long)84, (long)93}))) == (std::vector<long>({(long)45, (long)67, (long)93})));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)9, (long)8, (long)6, (long)4, (long)3}))) == (std::vector<long>({(long)5, (long)7, (long)9, (long)3})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_427_change_date_format", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n", "test": "}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_428_shell_sort", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector by using shell sort.\nstd::vector<long> shell_sort(std::vector<long> my_list) {\n", "test": "}\nint main() {\n    auto candidate = shell_sort;\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)4, (long)5, (long)3, (long)2, (long)12, (long)81, (long)56, (long)95}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)12, (long)12, (long)23, (long)56, (long)81, (long)95})));\n    assert(candidate((std::vector<long>({(long)24, (long)22, (long)39, (long)34, (long)87, (long)73, (long)68}))) == (std::vector<long>({(long)22, (long)24, (long)34, (long)39, (long)68, (long)73, (long)87})));\n    assert(candidate((std::vector<long>({(long)32, (long)30, (long)16, (long)96, (long)82, (long)83, (long)74}))) == (std::vector<long>({(long)16, (long)30, (long)32, (long)74, (long)82, (long)83, (long)96})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_429_and_tuples", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the elementwise and tuples from the given two tuples.\nstd::tuple<long, long, long, long> and_tuples(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = and_tuples;\n    assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(0, 0, 2, 1)));\n    assert(candidate((std::make_tuple(1, 2, 3, 4)), (std::make_tuple(5, 6, 7, 8))) == (std::make_tuple(1, 2, 3, 0)));\n    assert(candidate((std::make_tuple(8, 9, 11, 12)), (std::make_tuple(7, 13, 14, 17))) == (std::make_tuple(0, 9, 10, 0)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the directrix of a parabola.\nlong parabola_directrix(long a, long b, long c) {\n", "test": "}\nint main() {\n    auto candidate = parabola_directrix;\n    assert(candidate((5), (3), (2)) == (-198));\n    assert(candidate((9), (8), (4)) == (-2336));\n    assert(candidate((2), (4), (6)) == (-130));\n}\n", "language": "cpp"}, {"task_id": "mbpp_431_common_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes two vectors and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::vector<std::any> list1, std::vector<std::any> list2) {\n", "test": "}\nint main() {\n    auto candidate = common_element;\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::vector<std::any>({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);\n}\n", "language": "cpp"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median length of a trapezium.\nfloat median_trapezium(long base1, long base2, long height) {\n", "test": "}\nint main() {\n    auto candidate = median_trapezium;\n    assert(candidate((15), (25), (35)) == (float(20)));\n    assert(candidate((10), (20), (30)) == (float(15)));\n    assert(candidate((6), (9), (4)) == (7.5f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_433_check_greater", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the entered number is greater than the elements of the given vector.\nbool check_greater(std::vector<long> arr, long number) {\n", "test": "}\nint main() {\n    auto candidate = check_greater;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6})), (8)) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)4, (long)8, (long)6, (long)1})), (11)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_434_text_match_one", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an a followed by one or more b's.\nbool text_match_one(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_match_one;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abba\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_435_last_Digit", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the last digit of a given number.\nlong last_Digit(long n) {\n", "test": "}\nint main() {\n    auto candidate = last_Digit;\n    assert(candidate((123)) == (3));\n    assert(candidate((25)) == (5));\n    assert(candidate((30)) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_436_neg_nos", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to return the negative numbers in a vector.\nstd::vector<long> neg_nos(std::vector<long> list1) {\n", "test": "}\nint main() {\n    auto candidate = neg_nos;\n    assert(candidate((std::vector<long>({(long)-1, (long)4, (long)5, (long)-6}))) == (std::vector<long>({(long)-1, (long)-6})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3, (long)4}))) == (std::vector<long>({(long)-1, (long)-2})));\n    assert(candidate((std::vector<long>({(long)-7, (long)-6, (long)8, (long)9}))) == (std::vector<long>({(long)-7, (long)-6})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_437_remove_odd", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove odd characters in a string.\nstd::string remove_odd(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((\"python\")) == (\"yhn\"));\n    assert(candidate((\"program\")) == (\"rga\"));\n    assert(candidate((\"language\")) == (\"agae\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count bidirectional tuple pairs.\nlong count_bidirectional(std::vector<std::tuple<long, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = count_bidirectional;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (3));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (2));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n", "test": "}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n", "language": "cpp"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb and their positions in a given sentence.\nstd::tuple<long, long, std::string> find_adverb_position(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = find_adverb_position;\n    assert(candidate((\"clearly!! we can see the sky\")) == (std::make_tuple(0, 7, \"clearly\")));\n    assert(candidate((\"seriously!! there are many roses\")) == (std::make_tuple(0, 9, \"seriously\")));\n    assert(candidate((\"unfortunately!! sita is going to home\")) == (std::make_tuple(0, 13, \"unfortunately\")));\n}\n", "language": "cpp"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cube of a given size.\nlong surfacearea_cube(long l) {\n", "test": "}\nint main() {\n    auto candidate = surfacearea_cube;\n    assert(candidate((5)) == (150));\n    assert(candidate((3)) == (54));\n    assert(candidate((10)) == (600));\n}\n", "language": "cpp"}, {"task_id": "mbpp_442_positive_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the ration of positive numbers in a vector of integers.\nfloat positive_count(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = positive_count;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.54f));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.69f));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (0.56f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_443_largest_neg", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the largest negative number from the given vector.\nlong largest_neg(std::vector<long> list1) {\n", "test": "}\nint main() {\n    auto candidate = largest_neg;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-4, (long)-6}))) == (-6));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-8, (long)-9}))) == (-9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)-1}))) == (-1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to trim each vector by k in the given vectors.\nstd::vector<std::vector<long>> trim_tuple(std::vector<std::vector<long>> test_list, long K) {\n", "test": "}\nint main() {\n    auto candidate = trim_tuple;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)3, (long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)9, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)1, (long)2, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)8, (long)2, (long)1, (long)7})})), (2)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)2})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)3, (long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)9, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)1, (long)2, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)8, (long)2, (long)1, (long)7})})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)8, (long)2, (long)1})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)4, (long)9}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)12, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)7})})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)4}), (std::vector<long>)std::vector<long>({(long)8, (long)12}), (std::vector<long>)std::vector<long>({(long)1, (long)7}), (std::vector<long>)std::vector<long>({(long)6, (long)9})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise multiplication of vector elements in the given two vectors.\nstd::vector<std::vector<long>> index_multiplication(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = index_multiplication;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)21}), (std::vector<long>)std::vector<long>({(long)12, (long)45}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)7, (long)30})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)14, (long)32}), (std::vector<long>)std::vector<long>({(long)20, (long)60}), (std::vector<long>)std::vector<long>({(long)6, (long)20}), (std::vector<long>)std::vector<long>({(long)16, (long)44})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)24, (long)45}), (std::vector<long>)std::vector<long>({(long)30, (long)77}), (std::vector<long>)std::vector<long>({(long)12, (long)33}), (std::vector<long>)std::vector<long>({(long)27, (long)60})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the occurence of all elements of vector in a tuple.\nlong count_Occurrence(std::any tup, std::vector<std::any> lst) {\n", "test": "}\nint main() {\n    auto candidate = count_Occurrence;\n    assert(candidate(std::make_tuple(\"a\", \"a\", \"c\", \"b\", \"d\"), (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\"}))) == (3));\n    assert(candidate(std::make_tuple(1, 2, 3, 1, 4, 6, 7, 1, 4), (std::vector<std::any>({(long)1, (long)4, (long)7}))) == (6));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6), (std::vector<std::any>({(long)1, (long)2}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_447_cube_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find cubes of individual elements in a vector.\nstd::vector<long> cube_nums(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = cube_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)8, (long)27, (long)64, (long)125, (long)216, (long)343, (long)512, (long)729, (long)1000})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));\n    assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)1728, (long)3375})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_448_cal_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of perrin numbers.\nlong cal_sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = cal_sum;\n    assert(candidate((9)) == (49));\n    assert(candidate((10)) == (66));\n    assert(candidate((11)) == (88));\n}\n", "language": "cpp"}, {"task_id": "mbpp_450_extract_string", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given vector of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n", "test": "}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n", "test": "}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_452_loss_amount", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n", "test": "}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n", "language": "cpp"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of even factors of a number.\nlong sumofFactors(long n) {\n", "test": "}\nint main() {\n    auto candidate = sumofFactors;\n    assert(candidate((18)) == (26));\n    assert(candidate((30)) == (48));\n    assert(candidate((6)) == (8));\n}\n", "language": "cpp"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a word containing 'z'.\nbool text_match_wordz(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_match_wordz;\n    assert(candidate((\"pythonz.\")) == (true));\n    assert(candidate((\"xyz.\")) == (true));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given month number contains 31 days or not.\nbool check_monthnumb_number(long monthnum2) {\n", "test": "}\nint main() {\n    auto candidate = check_monthnumb_number;\n    assert(candidate((5)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((6)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse each string in a given vector of string values.\nstd::vector<std::string> reverse_string_list(std::vector<std::string> stringlist) {\n", "test": "}\nint main() {\n    auto candidate = reverse_string_list;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\", (std::string)\"White\", (std::string)\"Black\"}))) == (std::vector<std::string>({(std::string)\"deR\", (std::string)\"neerG\", (std::string)\"eulB\", (std::string)\"etihW\", (std::string)\"kcalB\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"john\", (std::string)\"amal\", (std::string)\"joel\", (std::string)\"george\"}))) == (std::vector<std::string>({(std::string)\"nhoj\", (std::string)\"lama\", (std::string)\"leoj\", (std::string)\"egroeg\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"jack\", (std::string)\"john\", (std::string)\"mary\"}))) == (std::vector<std::string>({(std::string)\"kcaj\", (std::string)\"nhoj\", (std::string)\"yram\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_457_Find_Min", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the subvector having minimum length.\nstd::vector<std::any> Find_Min(std::vector<std::vector<std::any>> lst) {\n", "test": "}\nint main() {\n    auto candidate = Find_Min;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::any>({(long)1})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)7, (long)8})}))) == (std::vector<std::any>({(long)1, (long)1})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"})}))) == (std::vector<std::any>({(std::string)\"x\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the area of a rectangle.\nlong rectangle_area(long l, long b) {\n", "test": "}\nint main() {\n    auto candidate = rectangle_area;\n    assert(candidate((10), (20)) == (200));\n    assert(candidate((10), (5)) == (50));\n    assert(candidate((4), (2)) == (8));\n}\n", "language": "cpp"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove uppercase substrings from a given string.\nstd::string remove_uppercase(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = remove_uppercase;\n    assert(candidate((\"cAstyoUrFavoRitETVshoWs\")) == (\"cstyoravoitshos\"));\n    assert(candidate((\"wAtchTheinTernEtrAdIo\")) == (\"wtchheinerntrdo\"));\n    assert(candidate((\"VoicESeaRchAndreComMendaTionS\")) == (\"oiceachndreomendaion\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_460_Extract", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to get the first element of each subvector.\nstd::vector<long> Extract(std::vector<std::vector<long>> lst) {\n", "test": "}\nint main() {\n    auto candidate = Extract;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)3, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (std::vector<long>({(long)1, (long)4})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)8, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (std::vector<long>({(long)9, (long)1})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the upper case characters in a given string.\nlong upper_ctr(std::string str) {\n", "test": "}\nint main() {\n    auto candidate = upper_ctr;\n    assert(candidate((\"PYthon\")) == (1));\n    assert(candidate((\"BigData\")) == (1));\n    assert(candidate((\"program\")) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_462_combinations_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_nullopt__std_vector_std_string_{\n    std::vector<std::nullopt> f0;\n    std::vector<std::string> f1;    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::nullopt> _f0) : f0(_f0) {}\n    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::string> _f1) : f1(_f1) {}\n    ~Union_std_vector_std_nullopt__std_vector_std_string_() {}\n    bool operator==(std::vector<std::nullopt> f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<std::string> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find all possible combinations of the elements of a given vector.\nstd::vector<Union_std_vector_std_nullopt__std_vector_std_string_> combinations_list(std::vector<std::string> list1) {\n", "test": "}\nint main() {\n    auto candidate = combinations_list;\n    assert(candidate((std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\", (std::string)\"green\", (std::string)\"blue\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\", (std::string)\"orange\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"blue\", (std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"black\", (std::string)\"orange\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\", (std::string)\"red\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product subvector of the given vector.\nlong max_subarray_product(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = max_subarray_product;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)0, (long)7, (long)-8, (long)-2}))) == (112));\n    assert(candidate((std::vector<long>({(long)6, (long)-3, (long)-10, (long)0, (long)2}))) == (180));\n    assert(candidate((std::vector<long>({(long)-2, (long)-40, (long)0, (long)-2, (long)-3}))) == (80));\n}\n", "language": "cpp"}, {"task_id": "mbpp_464_check_value", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all values are same in a map.\nbool check_value(std::map<std::string,long> dict, long n) {\n", "test": "}\nint main() {\n    auto candidate = check_value;\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (10)) == (false));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (12)) == (true));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (5)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_465_drop_empty", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to drop empty items from a given map.\nstd::map<std::string,std::string> drop_empty(std::map<std::string,std::optional<std::string>> dict1) {\n", "test": "}\nint main() {\n    auto candidate = drop_empty;\n    assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));\n    assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", std::nullopt}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}})));\n    assert(candidate(std::map<std::string,std::nullopt>({{\"c1\", std::nullopt}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c2\", \"Green\"}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_468_max_product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nlong max_product(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = max_product;\n    assert(candidate((std::vector<long>({(long)3, (long)100, (long)4, (long)5, (long)150, (long)6}))) == (3000));\n    assert(candidate((std::vector<long>({(long)4, (long)42, (long)55, (long)68, (long)80}))) == (50265600));\n    assert(candidate((std::vector<long>({(long)10, (long)22, (long)9, (long)33, (long)21, (long)50, (long)41, (long)60}))) == (2460));\n}\n", "language": "cpp"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nstd::tuple<long, long, long, long> add_pairwise(std::tuple<long, long, long, long, long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = add_pairwise;\n    assert(candidate((std::make_tuple(1, 5, 7, 8, 10))) == (std::make_tuple(6, 12, 15, 18)));\n    assert(candidate((std::make_tuple(2, 6, 8, 9, 11))) == (std::make_tuple(8, 14, 17, 20)));\n    assert(candidate((std::make_tuple(3, 7, 9, 10, 12))) == (std::make_tuple(10, 16, 19, 22)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_471_find_remainder", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the product of the vector multiplication modulo n.\nlong find_remainder(std::vector<long> arr, long n) {\n", "test": "}\nint main() {\n    auto candidate = find_remainder;\n    assert(candidate((std::vector<long>({(long)100, (long)10, (long)5, (long)25, (long)35, (long)14})), (11)) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})), (1)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (2)) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given vector contains consecutive numbers or not.\nbool check_Consecutive(std::vector<long> l) {\n", "test": "}\nint main() {\n    auto candidate = check_Consecutive;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)6}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_474_replace_char", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace characters in a string.\nstd::string replace_char(std::string str1, std::string ch, std::string newch) {\n", "test": "}\nint main() {\n    auto candidate = replace_char;\n    assert(candidate((\"polygon\"), (\"y\"), (\"l\")) == (\"pollgon\"));\n    assert(candidate((\"character\"), (\"c\"), (\"a\")) == (\"aharaater\"));\n    assert(candidate((\"python\"), (\"l\"), (\"a\")) == (\"python\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_475_sort_counter", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a map by value.\nstd::vector<std::tuple<std::string, long>> sort_counter(std::map<std::string,long> dict1) {\n", "test": "}\nint main() {\n    auto candidate = sort_counter;\n    assert(candidate((std::map<std::string,long>({{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 87), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 83), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 81)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Math\", 400), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 300), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 250)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 1250), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 1000), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 900)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_476_big_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of the largest and smallest value in a given vector.\nlong big_sum(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = big_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6}))) == (8));\n}\n", "language": "cpp"}, {"task_id": "mbpp_477_is_lower", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove lowercase substrings from a given string.\nstd::string remove_lowercase(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = remove_lowercase;\n    assert(candidate((\"PYTHon\")) == (\"PYTH\"));\n    assert(candidate((\"FInD\")) == (\"FID\"));\n    assert(candidate((\"STRinG\")) == (\"STRG\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_479_first_Digit", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the first digit of a given number.\nlong first_Digit(long n) {\n", "test": "}\nint main() {\n    auto candidate = first_Digit;\n    assert(candidate((123)) == (1));\n    assert(candidate((456)) == (4));\n    assert(candidate((12)) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_554_Split", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function which takes a vector of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n", "test": "}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_555_difference", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlong difference(long n) {\n", "test": "}\nint main() {\n    auto candidate = difference;\n    assert(candidate((3)) == (30));\n    assert(candidate((5)) == (210));\n    assert(candidate((2)) == (6));\n}\n", "language": "cpp"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of pairs whose xor value is odd.\nlong find_Odd_Pair(std::vector<long> A, long N) {\n", "test": "}\nint main() {\n    auto candidate = find_Odd_Pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1})), (5)) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11})), (7)) == (12));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (3)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_557_toggle_string", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to toggle the case of all characters in a string.\nstd::string toggle_string(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = toggle_string;\n    assert(candidate((\"Python\")) == (\"pYTHON\"));\n    assert(candidate((\"Pangram\")) == (\"pANGRAM\"));\n    assert(candidate((\"LIttLE\")) == (\"liTTle\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of the per-digit difference between two integers.\nlong digit_distance_nums(long n1, long n2) {\n", "test": "}\nint main() {\n    auto candidate = digit_distance_nums;\n    assert(candidate((1), (2)) == (1));\n    assert(candidate((23), (56)) == (6));\n    assert(candidate((123), (256)) == (7));\n}\n", "language": "cpp"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of the largest contiguous subvector in the given vector.\nlong max_sub_array_sum(std::vector<long> a, long size) {\n", "test": "}\nint main() {\n    auto candidate = max_sub_array_sum;\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)4, (long)-1, (long)-2, (long)1, (long)5, (long)-3})), (8)) == (7));\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5, (long)-2, (long)-3, (long)2, (long)6, (long)-4})), (8)) == (8));\n    assert(candidate((std::vector<long>({(long)-4, (long)-5, (long)6, (long)-3, (long)-4, (long)3, (long)7, (long)-5})), (8)) == (10));\n}\n", "language": "cpp"}, {"task_id": "mbpp_560_union_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the union of the elements of two given vectors and output them in sorted order.\nstd::vector<long> union_elements(std::vector<long> test_tup1, std::vector<long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = union_elements;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)5, (long)7, (long)4, (long)10}))) == (std::vector<long>({(long)3, (long)4, (long)5, (long)6, (long)7, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)11, (long)12, (long)13, (long)14})), (std::vector<long>({(long)13, (long)15, (long)16, (long)17}))) == (std::vector<long>({(long)11, (long)12, (long)13, (long)14, (long)15, (long)16, (long)17})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the length of the longest subvectors.\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n", "test": "}\nint main() {\n    auto candidate = Find_Max_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)22, (long)23}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50})}))) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_563_extract_values", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract values between quotation marks from a string.\nstd::vector<std::string> extract_values(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = extract_values;\n    assert(candidate((\"\"Python\", \"PHP\", \"Java\"\")) == (std::vector<std::string>({(std::string)\"Python\", (std::string)\"PHP\", (std::string)\"Java\"})));\n    assert(candidate((\"\"python\",\"program\",\"language\"\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\"})));\n    assert(candidate((\"\"red\",\"blue\",\"green\",\"yellow\"\")) == (std::vector<std::string>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"yellow\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nlong count_Pairs(std::vector<long> arr, long n) {\n", "test": "}\nint main() {\n    auto candidate = count_Pairs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (5)) == (10));\n}\n", "language": "cpp"}, {"task_id": "mbpp_565_split", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to split a string into characters.\nstd::vector<std::string> split(std::string word) {\n", "test": "}\nint main() {\n    auto candidate = split;\n    assert(candidate((\"python\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})));\n    assert(candidate((\"Name\")) == (std::vector<std::string>({(std::string)\"N\", (std::string)\"a\", (std::string)\"m\", (std::string)\"e\"})));\n    assert(candidate((\"program\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_566_sum_digits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the sum of the digits of a non-negative integer.\nlong sum_digits(long n) {\n", "test": "}\nint main() {\n    auto candidate = sum_digits;\n    assert(candidate((345)) == (12));\n    assert(candidate((12)) == (3));\n    assert(candidate((97)) == (16));\n}\n", "language": "cpp"}, {"task_id": "mbpp_567_issort_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a specified vector is sorted or not.\nbool issort_list(std::vector<long> list1) {\n", "test": "}\nint main() {\n    auto candidate = issort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)16, (long)17}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)20, (long)17}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)15, (long)14, (long)20}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_568_empty_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create a vector of N empty dictionaries.\nstd::vector<std::map<std::nullopt,std::nullopt>> empty_list(long length) {\n", "test": "}\nint main() {\n    auto candidate = empty_list;\n    assert(candidate((5)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));\n    assert(candidate((6)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));\n    assert(candidate((7)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort each subvector of strings in a given vector of vectors.\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> list1) {\n", "test": "}\nint main() {\n    auto candidate = sort_sublists;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"orange\", (std::string)\"white\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"g\", (std::string)\"h\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"e\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"d\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"g\", (std::string)\"h\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"e\", (std::string)\"f\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to remove duplicate numbers from a given number of vectors.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_573_unique_product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to calculate the product of the unique numbers in a given vector.\nlong unique_product(std::vector<long> list_data) {\n", "test": "}\nint main() {\n    auto candidate = unique_product;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)20, (long)50, (long)60, (long)40}))) == (720000000));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1}))) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)0, (long)1, (long)1}))) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cylinder.\nfloat surfacearea_cylinder(long r, long h) {\n", "test": "}\nint main() {\n    auto candidate = surfacearea_cylinder;\n    assert(candidate((10), (5)) == (942.45f));\n    assert(candidate((4), (5)) == (226.18800000000002f));\n    assert(candidate((4), (10)) == (351.848f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n", "test": "}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the last digit in factorial of a given number.\nlong last_Digit_Factorial(long n) {\n", "test": "}\nint main() {\n    auto candidate = last_Digit_Factorial;\n    assert(candidate((4)) == (4));\n    assert(candidate((21)) == (0));\n    assert(candidate((30)) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to interleave 3 vectors of the same length into a single flat vector.\nstd::vector<long> interleave_lists(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n", "test": "}\nint main() {\n    auto candidate = interleave_lists;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400, (long)500, (long)600, (long)700}))) == (std::vector<long>({(long)1, (long)10, (long)100, (long)2, (long)20, (long)200, (long)3, (long)30, (long)300, (long)4, (long)40, (long)400, (long)5, (long)50, (long)500, (long)6, (long)60, (long)600, (long)7, (long)70, (long)700})));\n    assert(candidate((std::vector<long>({(long)10, (long)20})), (std::vector<long>({(long)15, (long)2})), (std::vector<long>({(long)5, (long)10}))) == (std::vector<long>({(long)10, (long)15, (long)5, (long)20, (long)2, (long)10})));\n    assert(candidate((std::vector<long>({(long)11, (long)44})), (std::vector<long>({(long)10, (long)15})), (std::vector<long>({(long)20, (long)5}))) == (std::vector<long>({(long)11, (long)10, (long)20, (long)44, (long)15, (long)5})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the dissimilar elements in the given two tuples.\nstd::tuple<long, long, long, long> find_dissimilar(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = find_dissimilar;\n    assert(candidate((std::make_tuple(3, 4, 5, 6)), (std::make_tuple(5, 7, 4, 10))) == (std::make_tuple(3, 6, 7, 10)));\n    assert(candidate((std::make_tuple(1, 2, 3, 4)), (std::make_tuple(7, 2, 3, 9))) == (std::make_tuple(1, 4, 7, 9)));\n    assert(candidate((std::make_tuple(21, 11, 25, 26)), (std::make_tuple(26, 34, 21, 36))) == (std::make_tuple(34, 36, 11, 25)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_580_extract_even", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove uneven elements in the nested mixed tuple.\nstd::any extract_even(std::tuple<long, long, std::tuple<long, long, std::tuple<long, long>>, long, long> test_tuple) {\n", "test": "}\nint main() {\n    auto candidate = extract_even;\n    assert(candidate((std::make_tuple(4, 5, std::make_tuple(7, 6, std::make_tuple(2, 4)), 6, 8))) == std::make_tuple(4, std::make_tuple(6, std::make_tuple(2, 4)), 6, 8));\n    assert(candidate((std::make_tuple(5, 6, std::make_tuple(8, 7, std::make_tuple(4, 8)), 7, 9))) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 8))));\n    assert(candidate((std::make_tuple(5, 6, std::make_tuple(9, 8, std::make_tuple(4, 6)), 8, 10))) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 6)), 8, 10));\n}\n", "language": "cpp"}, {"task_id": "mbpp_581_surface_Area", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the surface area of a square cppramid with a given base edge and height.\nlong surface_Area(long b, long s) {\n", "test": "}\nint main() {\n    auto candidate = surface_Area;\n    assert(candidate((3), (4)) == (33));\n    assert(candidate((4), (5)) == (56));\n    assert(candidate((1), (2)) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_583_catalan_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n", "test": "}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n", "language": "cpp"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = find_adverbs;\n    assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));\n    assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));\n    assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_585_expensive_items", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the n most expensive items in a given dataset.\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n", "test": "}\nint main() {\n    auto candidate = expensive_items;\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09f}})})), (2)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-4\"}, {\"price\", 22.75f}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_586_split_Arr", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to split a vector at the nth eelment and add the first part to the end.\nstd::vector<long> split_Arr(std::vector<long> l, long n) {\n", "test": "}\nint main() {\n    auto candidate = split_Arr;\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)5, (long)6, (long)52, (long)36})), (2)) == (std::vector<long>({(long)5, (long)6, (long)52, (long)36, (long)12, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (1)) == (std::vector<long>({(long)2, (long)3, (long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})), (3)) == (std::vector<long>({(long)3, (long)4, (long)5, (long)6, (long)7, (long)0, (long)1, (long)2})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_587_list_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a vector to a tuple.\nstd::any list_tuple(std::vector<long> listx) {\n", "test": "}\nint main() {\n    auto candidate = list_tuple;\n    assert(candidate((std::vector<long>({(long)5, (long)10, (long)7, (long)4, (long)15, (long)3}))) == std::make_tuple(5, 10, 7, 4, 15, 3));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)5, (long)6, (long)2, (long)3, (long)4, (long)4, (long)7}))) == std::make_tuple(2, 4, 5, 6, 2, 3, 4, 4, 7));\n    assert(candidate((std::vector<long>({(long)58, (long)44, (long)56}))) == std::make_tuple(58, 44, 56));\n}\n", "language": "cpp"}, {"task_id": "mbpp_588_big_diff", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the difference between largest and smallest value in a given vector.\nlong big_diff(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = big_diff;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)12}))) == (8));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)3}))) == (7));\n}\n", "language": "cpp"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n", "test": "}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_591_swap_List", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to interchange the first and last elements in a vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n", "test": "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)12, (long)35, (long)9, (long)56, (long)24}))) == (std::vector<long>({(long)24, (long)35, (long)9, (long)56, (long)12})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of the product of consecutive binomial co-efficients.\nlong sum_Of_product(long n) {\n", "test": "}\nint main() {\n    auto candidate = sum_Of_product;\n    assert(candidate((3)) == (15));\n    assert(candidate((4)) == (56));\n    assert(candidate((1)) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n", "test": "}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the difference of the first even and first odd number of a given vector.\nlong diff_even_odd(std::vector<long> list1) {\n", "test": "}\nint main() {\n    auto candidate = diff_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (9));\n}\n", "language": "cpp"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count minimum number of swaps required to convert one binary number represented as a string to another.\nstd::any min_Swaps(std::string str1, std::string str2) {\n", "test": "}\nint main() {\n    auto candidate = min_Swaps;\n    assert(candidate((\"1101\"), (\"1110\")) == (std::any(1)));\n    assert(candidate((\"111\"), (\"000\")) == (std::any(\"Not Possible\")));\n    assert(candidate((\"111\"), (\"110\")) == (std::any(\"Not Possible\")));\n}\n", "language": "cpp"}, {"task_id": "mbpp_597_find_kth", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find kth element from the given two sorted vectors.\nlong find_kth(std::vector<long> arr1, std::vector<long> arr2, long k) {\n", "test": "}\nint main() {\n    auto candidate = find_kth;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6, (long)7, (long)9})), (std::vector<long>({(long)1, (long)4, (long)8, (long)10})), (5)) == (6));\n    assert(candidate((std::vector<long>({(long)100, (long)112, (long)256, (long)349, (long)770})), (std::vector<long>({(long)72, (long)86, (long)113, (long)119, (long)265, (long)445, (long)892})), (7)) == (256));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)7, (long)8, (long)10})), (std::vector<long>({(long)2, (long)5, (long)9, (long)11})), (6)) == (8));\n}\n", "language": "cpp"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n", "test": "}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_599_sum_average", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find sum and average of first n natural numbers.\nstd::tuple<long, float> sum_average(long number) {\n", "test": "}\nint main() {\n    auto candidate = sum_average;\n    assert(candidate((10)) == (std::make_tuple(55, 5.5f)));\n    assert(candidate((15)) == (std::make_tuple(120, 8.0f)));\n    assert(candidate((20)) == (std::make_tuple(210, 10.5f)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_600_is_Even", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given number is even or not.\nbool is_Even(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_Even;\n    assert(candidate((1)) == (false));\n    assert(candidate((2)) == (true));\n    assert(candidate((3)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the first repeated character in a given string.\nstd::optional<std::string> first_repeated_char(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = first_repeated_char;\n    assert(candidate((\"abcabc\")) == \"a\");\n    assert(candidate((\"abc\")) == std::nullopt);\n    assert(candidate((\"123123\")) == \"1\");\n}\n", "language": "cpp"}, {"task_id": "mbpp_603_get_ludic", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get all lucid numbers smaller than or equal to a given integer.\nstd::vector<long> get_ludic(long n) {\n", "test": "}\nint main() {\n    auto candidate = get_ludic;\n    assert(candidate((10)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((25)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)23, (long)25})));\n    assert(candidate((45)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)23, (long)25, (long)29, (long)37, (long)41, (long)43})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_604_reverse_words", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse words seperated by spaces in a given string.\nstd::string reverse_words(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = reverse_words;\n    assert(candidate((\"python program\")) == (\"program python\"));\n    assert(candidate((\"java language\")) == (\"language java\"));\n    assert(candidate((\"indian man\")) == (\"man indian\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_605_prime_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given integer is a prime number.\nbool prime_num(long num) {\n", "test": "}\nint main() {\n    auto candidate = prime_num;\n    assert(candidate((13)) == (true));\n    assert(candidate((7)) == (true));\n    assert(candidate((-1010)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_606_radian_degree", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert degrees to radians.\nfloat radian_degree(long degree) {\n", "test": "}\nint main() {\n    auto candidate = radian_degree;\n    assert(candidate((90)) == (1.5707963267948966f));\n    assert(candidate((60)) == (1.0471975511965976f));\n    assert(candidate((120)) == (2.0943951023931953f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_607_find_literals", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nstd::tuple<std::string, long, long> find_literals(std::string text, std::string pattern) {\n", "test": "}\nint main() {\n    auto candidate = find_literals;\n    assert(candidate((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")) == (std::make_tuple(\"fox\", 16, 19)));\n    assert(candidate((\"Its been a very crazy procedure right\"), (\"crazy\")) == (std::make_tuple(\"crazy\", 16, 21)));\n    assert(candidate((\"Hardest choices required strongest will\"), (\"will\")) == (std::make_tuple(\"will\", 35, 39)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_608_bell_Number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find nth bell number.\nlong bell_Number(long n) {\n", "test": "}\nint main() {\n    auto candidate = bell_Number;\n    assert(candidate((2)) == (2));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (15));\n}\n", "language": "cpp"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nstd::vector<long> remove_kth_element(std::vector<long> list1, long L) {\n", "test": "}\nint main() {\n    auto candidate = remove_kth_element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)1})), (3)) == (std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)4, (long)5, (long)1})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4})), (4)) == (std::vector<long>({(long)0, (long)0, (long)1, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10})), (5)) == (std::vector<long>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nlong max_of_nth(std::vector<std::vector<long>> test_list, long N) {\n", "test": "}\nint main() {\n    auto candidate = max_of_nth;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)9, (long)19})})), (2)) == (19));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)20})})), (1)) == (10));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)21})})), (1)) == (11));\n}\n", "language": "cpp"}, {"task_id": "mbpp_612_merge", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nstd::vector<std::vector<std::any>> merge(std::vector<std::vector<std::any>> lst) {\n", "test": "}\nint main() {\n    auto candidate = merge;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"m\", (std::string)\"n\"})}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"a\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"y\", (std::string)\"b\", (std::string)\"n\"})})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8})}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6, (long)8})})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"m\", (std::string)\"n\", (std::string)\"o\"})}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"a\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"y\", (std::string)\"b\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"z\", (std::string)\"c\", (std::string)\"o\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nlong cummulative_sum(std::vector<std::vector<long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = cummulative_sum;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)2, (long)6})}))) == (30));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)3, (long)7})}))) == (37));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)8})}))) == (44));\n}\n", "language": "cpp"}, {"task_id": "mbpp_615_average_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nstd::vector<float> average_tuple(std::vector<std::vector<long>> nums) {\n", "test": "}\nint main() {\n    auto candidate = average_tuple;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)10, (long)10, (long)10, (long)12}), (std::vector<long>)std::vector<long>({(long)30, (long)45, (long)56, (long)45}), (std::vector<long>)std::vector<long>({(long)81, (long)80, (long)39, (long)32}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (std::vector<float>({(float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)-5}), (std::vector<long>)std::vector<long>({(long)30, (long)-15, (long)56}), (std::vector<long>)std::vector<long>({(long)81, (long)-60, (long)-39}), (std::vector<long>)std::vector<long>({(long)-10, (long)2, (long)3})}))) == (std::vector<float>({(float)25.5f, (float)-18.0f, (float)3.75f})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)100, (long)100, (long)100, (long)120}), (std::vector<long>)std::vector<long>({(long)300, (long)450, (long)560, (long)450}), (std::vector<long>)std::vector<long>({(long)810, (long)800, (long)390, (long)320}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::vector<float>({(float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes two tuples of the same length and performs the element wise modulo.\nstd::tuple<long, long, long, long> tuple_modulo(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = tuple_modulo;\n    assert(candidate((std::make_tuple(10, 4, 5, 6)), (std::make_tuple(5, 6, 7, 5))) == (std::make_tuple(0, 4, 5, 1)));\n    assert(candidate((std::make_tuple(11, 5, 6, 7)), (std::make_tuple(6, 7, 8, 6))) == (std::make_tuple(5, 5, 6, 1)));\n    assert(candidate((std::make_tuple(12, 6, 7, 8)), (std::make_tuple(7, 8, 9, 7))) == (std::make_tuple(5, 6, 7, 1)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfloat min_Jumps(std::tuple<long, long> steps, long d) {\n", "test": "}\nint main() {\n    auto candidate = min_Jumps;\n    assert(candidate((std::make_tuple(3, 4)), (11)) == (3.5f));\n    assert(candidate((std::make_tuple(3, 4)), (0)) == (float(0)));\n    assert(candidate((std::make_tuple(11, 14)), (11)) == (float(1)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_618_div_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n", "test": "}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0f, (float)2.5f, (float)2.0f})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0f, (float)0.5f})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8f, (float)1.7142857142857142f})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_619_move_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n", "test": "}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_622_get_median", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n", "test": "}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0f));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5f));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_623_nth_nums", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to compute the n-th power of each number in a vector.\nstd::vector<long> nth_nums(std::vector<long> nums, long n) {\n", "test": "}\nint main() {\n    auto candidate = nth_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (3)) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));\n    assert(candidate((std::vector<long>({(long)12, (long)15})), (5)) == (std::vector<long>({(long)248832, (long)759375})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_624_is_upper", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_625_swap_List", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to interchange the first and last element in a given vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n", "test": "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (std::vector<long>({(long)4, (long)2, (long)3, (long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_626_triangle_area", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nstd::optional<long> triangle_area(long r) {\n", "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((-1)) == std::nullopt);\n    assert(candidate((0)) == 0);\n    assert(candidate((2)) == 4);\n}\n", "language": "cpp"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n", "test": "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n", "language": "cpp"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all spaces in the given string with '%20'.\nstd::string replace_spaces(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"My Name is Dawood\")) == (\"My%20Name%20is%20Dawood\"));\n    assert(candidate((\"I am a Programmer\")) == (\"I%20am%20a%20Programmer\"));\n    assert(candidate((\"I love Coding\")) == (\"I%20love%20Coding\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_629_Split", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find even numbers from a vector of numbers.\nstd::vector<long> Split(std::vector<long> list) {\n", "test": "}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)2, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)8, (long)0, (long)1}))) == (std::vector<long>({(long)4, (long)6, (long)8, (long)0})));\n    assert(candidate((std::vector<long>({(long)8, (long)12, (long)15, (long)19}))) == (std::vector<long>({(long)8, (long)12})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nstd::vector<std::vector<long>> get_coordinates(std::tuple<long, long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = get_coordinates;\n    assert(candidate((std::make_tuple(3, 4))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)2, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)5})})));\n    assert(candidate((std::make_tuple(4, 5))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)6}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)5}), (std::vector<long>)std::vector<long>({(long)5, (long)6})})));\n    assert(candidate((std::make_tuple(5, 6))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)4, (long)7}), (std::vector<long>)std::vector<long>({(long)5, (long)5}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)6, (long)7})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_632_move_zero", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to move all zeroes to the end of the given vector.\nstd::vector<long> move_zero(std::vector<long> num_list) {\n", "test": "}\nint main() {\n    auto candidate = move_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)0, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)2, (long)0, (long)0, (long)4, (long)0, (long)5, (long)0}))) == (std::vector<long>({(long)2, (long)3, (long)2, (long)4, (long)5, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)0, (long)1, (long)1}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)0, (long)0})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of xor of all pairs of numbers in the given vector.\nlong pair_xor_Sum(std::vector<long> arr, long n) {\n", "test": "}\nint main() {\n    auto candidate = pair_xor_Sum;\n    assert(candidate((std::vector<long>({(long)5, (long)9, (long)7, (long)6})), (4)) == (47));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)5})), (3)) == (12));\n    assert(candidate((std::vector<long>({(long)7, (long)3})), (2)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_635_heap_sort", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector.\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n", "test": "}\nint main() {\n    auto candidate = heap_sort;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58}))) == (std::vector<long>({(long)14, (long)22, (long)25, (long)25, (long)35, (long)58, (long)65, (long)75, (long)85})));\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)9, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)7, (long)9})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n", "test": "}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_638_wind_chill", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlong wind_chill(long v, long t) {\n", "test": "}\nint main() {\n    auto candidate = wind_chill;\n    assert(candidate((120), (35)) == (40));\n    assert(candidate((40), (20)) == (19));\n    assert(candidate((10), (8)) == (6));\n}\n", "language": "cpp"}, {"task_id": "mbpp_639_sample_nam", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n", "test": "}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n", "language": "cpp"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n", "test": "}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth nonagonal number.\nlong is_nonagonal(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_nonagonal;\n    assert(candidate((10)) == (325));\n    assert(candidate((15)) == (750));\n    assert(candidate((18)) == (1089));\n}\n", "language": "cpp"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to reverse a vector upto a given position.\nstd::vector<long> reverse_Array_Upto_K(std::vector<long> input, long k) {\n", "test": "}\nint main() {\n    auto candidate = reverse_Array_Upto_K;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (4)) == (std::vector<long>({(long)4, (long)3, (long)2, (long)1, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7})), (2)) == (std::vector<long>({(long)5, (long)4, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)7, (long)6, (long)5})), (3)) == (std::vector<long>({(long)7, (long)8, (long)9, (long)6, (long)5})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to add a map to the tuple. The output should be a tuple.\nstd::tuple<long, long, long, std::map<std::string,long>> add_dict_to_tuple(std::tuple<long, long, long> test_tup, std::map<std::string,long> test_dict) {\n", "test": "}\nint main() {\n    auto candidate = add_dict_to_tuple;\n    assert(candidate((std::make_tuple(4, 5, 6)), (std::map<std::string,long>({{\"MSAM\", 1}, {\"is\", 2}, {\"best\", 3}}))) == (std::make_tuple(4, 5, 6, std::map<std::string,long>({{\"MSAM\", 1}, {\"is\", 2}, {\"best\", 3}}))));\n    assert(candidate((std::make_tuple(1, 2, 3)), (std::map<std::string,long>({{\"UTS\", 2}, {\"is\", 3}, {\"Worst\", 4}}))) == (std::make_tuple(1, 2, 3, std::map<std::string,long>({{\"UTS\", 2}, {\"is\", 3}, {\"Worst\", 4}}))));\n    assert(candidate((std::make_tuple(8, 9, 10)), (std::map<std::string,long>({{\"POS\", 3}, {\"is\", 4}, {\"Okay\", 5}}))) == (std::make_tuple(8, 9, 10, std::map<std::string,long>({{\"POS\", 3}, {\"is\", 4}, {\"Okay\", 5}}))));\n}\n", "language": "cpp"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfloat maxAverageOfPath(std::vector<std::vector<long>> cost) {\n", "test": "}\nint main() {\n    auto candidate = maxAverageOfPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)3, (long)9})}))) == (5.2f));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)4, (long)10})}))) == (6.2f));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)11})}))) == (7.2f));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (5.8f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_722_filter_data", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nstd::map<std::string,std::tuple<float, long>> filter_data(std::map<std::string,std::tuple<float, long>> students, float h, long w) {\n", "test": "}\nint main() {\n    auto candidate = filter_data;\n    assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (6.0f), (70)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}})));\n    assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (5.9f), (67)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}})));\n    assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (5.7f), (64)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nlong count_same_pair(std::vector<long> nums1, std::vector<long> nums2) {\n", "test": "}\nint main() {\n    auto candidate = count_same_pair;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (11));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)1, (long)2})), (std::vector<long>({(long)0, (long)1, (long)2, (long)2}))) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlong power_base_sum(long base, long power) {\n", "test": "}\nint main() {\n    auto candidate = power_base_sum;\n    assert(candidate((2), (100)) == (115));\n    assert(candidate((8), (10)) == (37));\n    assert(candidate((8), (15)) == (62));\n    assert(candidate((3), (3)) == (9));\n}\n", "language": "cpp"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract values between quotation marks \" \" of the given string.\nstd::vector<std::any> extract_quotation(std::string text1) {\n", "test": "}\nint main() {\n    auto candidate = extract_quotation;\n    assert(candidate((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")) == (std::vector<std::any>({(std::string)\"A53\", (std::string)\"multi\", (std::string)\"Processor\"})));\n    assert(candidate((\"Cast your \"favorite\" entertainment \"apps\"\")) == (std::vector<std::any>({(std::string)\"favorite\", (std::string)\"apps\"})));\n    assert(candidate((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")) == (std::vector<std::any>({(std::string)\"4k Ultra HD\", (std::string)\"HDR 10\"})));\n    assert(candidate((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")) == (std::vector<std::any>()));\n}\n", "language": "cpp"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nstd::vector<std::any> multiply_elements(std::vector<long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = multiply_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)8, (long)10}))) == (std::vector<std::any>({(long)5, (long)35, (long)56, (long)80})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)5, (long)6, (long)7}))) == (std::vector<std::any>({(long)8, (long)20, (long)30, (long)42})));\n    assert(candidate((std::vector<long>({(long)12, (long)13, (long)14, (long)9, (long)15}))) == (std::vector<std::any>({(long)156, (long)182, (long)126, (long)135})));\n    assert(candidate((std::vector<long>({(long)12}))) == (std::vector<std::any>()));\n}\n", "language": "cpp"}, {"task_id": "mbpp_728_sum_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nstd::vector<long> sum_list(std::vector<long> lst1, std::vector<long> lst2) {\n", "test": "}\nint main() {\n    auto candidate = sum_list;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (std::vector<long>({(long)15, (long)25, (long)35}))) == (std::vector<long>({(long)25, (long)45, (long)65})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)5, (long)6, (long)7}))) == (std::vector<long>({(long)6, (long)8, (long)10})));\n    assert(candidate((std::vector<long>({(long)15, (long)20, (long)30})), (std::vector<long>({(long)15, (long)45, (long)75}))) == (std::vector<long>({(long)30, (long)65, (long)105})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove consecutive duplicates of a given vector.\nstd::vector<std::any> consecutive_duplicates(std::vector<std::any> nums) {\n", "test": "}\nint main() {\n    auto candidate = consecutive_duplicates;\n    assert(candidate((std::vector<std::any>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::vector<std::any>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)4})));\n    assert(candidate((std::vector<std::any>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::vector<std::any>({(long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)17, (long)18, (long)10})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\", (std::string)\"a\", (std::string)\"a\"}))) == (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"a\"})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfloat lateralsurface_cone(long r, long h) {\n", "test": "}\nint main() {\n    auto candidate = lateralsurface_cone;\n    assert(candidate((5), (12)) == (204.20352248333654f));\n    assert(candidate((10), (15)) == (566.3586699569488f));\n    assert(candidate((19), (17)) == (1521.8090132193388f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nstd::string replace_specialchar(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = replace_specialchar;\n    assert(candidate((\"Python language, Programming language.\")) == (\"Python:language::Programming:language:\"));\n    assert(candidate((\"a b c,d e f\")) == (\"a:b:c:d:e:f\"));\n    assert(candidate((\"ram reshma,ram rahim\")) == (\"ram:reshma:ram:rahim\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nlong find_first_occurrence(std::vector<long> A, long x) {\n", "test": "}\nint main() {\n    auto candidate = find_first_occurrence;\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (6)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\nlong sum_Of_Subarray_Prod(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = sum_Of_Subarray_Prod;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (20));\n    assert(candidate((std::vector<long>({(long)1, (long)2}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (84));\n}\n", "language": "cpp"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n", "test": "}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n", "language": "cpp"}, {"task_id": "mbpp_736_left_insertion", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/cpp-exercises/data-structures-and-algorithms/cpp-data-structure-exercise-24.php\nlong left_insertion(std::vector<long> a, long x) {\n", "test": "}\nint main() {\n    auto candidate = left_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_737_check_str", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nbool check_str(std::string string) {\n", "test": "}\nint main() {\n    auto candidate = check_str;\n    assert(candidate((\"annie\")) == (true));\n    assert(candidate((\"dawood\")) == (false));\n    assert(candidate((\"Else\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/cpp-exercises/data-structures-and-algorithms/cpp-recursion-exercise-9.php\nfloat geometric_sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = geometric_sum;\n    assert(candidate((7)) == (1.9921875f));\n    assert(candidate((4)) == (1.9375f));\n    assert(candidate((8)) == (1.99609375f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_739_find_Index", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n", "test": "}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n", "language": "cpp"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cpp-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(std::tuple<long, long, long, long, long, long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate((std::make_tuple(1, 5, 7, 10, 13, 5))) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate((std::make_tuple(1, 2, 3, 4, 5, 6))) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate((std::make_tuple(7, 8, 9, 10, 11, 12))) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether all the characters are same or not.\nbool all_Characters_Same(std::string s) {\n", "test": "}\nint main() {\n    auto candidate = all_Characters_Same;\n    assert(candidate((\"python\")) == (false));\n    assert(candidate((\"aaa\")) == (true));\n    assert(candidate((\"data\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to caluclate the area of a tetrahedron.\nfloat area_tetrahedron(long side) {\n", "test": "}\nint main() {\n    auto candidate = area_tetrahedron;\n    assert(candidate((3)) == (15.588457268119894f));\n    assert(candidate((20)) == (692.8203230275509f));\n    assert(candidate((10)) == (173.20508075688772f));\n}\n", "language": "cpp"}, {"task_id": "mbpp_743_rotate_right", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/cpp-program-right-rotate-vector-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n", "test": "}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_744_check_none", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuple has any none value or not.\nbool check_none(std::any test_tup) {\n", "test": "}\nint main() {\n    auto candidate = check_none;\n    assert(candidate(std::make_tuple(std::optional<long>(10), std::optional<long>(4), std::optional<long>(5), std::optional<long>(6), std::optional<long>(std::nullopt))) == (true));\n    assert(candidate(std::make_tuple(7, 8, 9, 11, 14)) == (false));\n    assert(candidate(std::make_tuple(std::optional<long>(1), std::optional<long>(2), std::optional<long>(3), std::optional<long>(4), std::optional<long>(std::nullopt))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/cpp-exercises/lambda/cpp-lambda-exercise-24.php\nstd::vector<long> divisible_by_digits(long startnum, long endnum) {\n", "test": "}\nint main() {\n    auto candidate = divisible_by_digits;\n    assert(candidate((1), (22)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15, (long)22})));\n    assert(candidate((1), (15)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15})));\n    assert(candidate((20), (25)) == (std::vector<long>({(long)22, (long)24})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_746_sector_area", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nstd::optional<float> sector_area(long r, long a) {\n", "test": "}\nint main() {\n    auto candidate = sector_area;\n    assert(candidate((4), (45)) == 6.283185307179586f);\n    assert(candidate((9), (45)) == 31.808625617596654f);\n    assert(candidate((9), (361)) == std::nullopt);\n}\n", "language": "cpp"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nlong lcs_of_three(std::string X, std::string Y, std::string Z) {\n", "test": "}\nint main() {\n    auto candidate = lcs_of_three;\n    assert(candidate((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2));\n    assert(candidate((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5));\n    assert(candidate((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to put spaces between words starting with capital letters in a given string.\nstd::string capital_words_spaces(std::string str1) {\n", "test": "}\nint main() {\n    auto candidate = capital_words_spaces;\n    assert(candidate((\"Python\")) == (\"Python\"));\n    assert(candidate((\"PythonProgrammingExamples\")) == (\"Python Programming Examples\"));\n    assert(candidate((\"GetReadyToBeCodingFreak\")) == (\"Get Ready To Be Coding Freak\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/cpp-sort-numeric-strings-in-a-vector/\nstd::vector<long> sort_numeric_strings(std::vector<std::string> nums_str) {\n", "test": "}\nint main() {\n    auto candidate = sort_numeric_strings;\n    assert(candidate((std::vector<std::string>({(std::string)\"4\", (std::string)\"12\", (std::string)\"45\", (std::string)\"7\", (std::string)\"0\", (std::string)\"100\", (std::string)\"200\", (std::string)\"-12\", (std::string)\"-500\"}))) == (std::vector<long>({(long)-500, (long)-12, (long)0, (long)4, (long)7, (long)12, (long)45, (long)100, (long)200})));\n    assert(candidate((std::vector<std::string>({(std::string)\"2\", (std::string)\"3\", (std::string)\"8\", (std::string)\"4\", (std::string)\"7\", (std::string)\"9\", (std::string)\"8\", (std::string)\"2\", (std::string)\"6\", (std::string)\"5\", (std::string)\"1\", (std::string)\"6\", (std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"6\", (std::string)\"9\", (std::string)\"1\", (std::string)\"2\"}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)8, (long)9, (long)9})));\n    assert(candidate((std::vector<std::string>({(std::string)\"1\", (std::string)\"3\", (std::string)\"5\", (std::string)\"7\", (std::string)\"1\", (std::string)\"3\", (std::string)\"13\", (std::string)\"15\", (std::string)\"17\", (std::string)\"5\", (std::string)\"7 \", (std::string)\"9\", (std::string)\"1\", (std::string)\"11\"}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)3, (long)3, (long)5, (long)5, (long)7, (long)7, (long)9, (long)11, (long)13, (long)15, (long)17})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_750_add_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to add the given tuple to the given vector.\nstd::vector<long> add_tuple(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n", "test": "}\nint main() {\n    auto candidate = add_tuple;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), (std::make_tuple(9, 10))) == (std::vector<long>({(long)5, (long)6, (long)7, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), (std::make_tuple(10, 11))) == (std::vector<long>({(long)6, (long)7, (long)8, (long)10, (long)11})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), (std::make_tuple(11, 12))) == (std::vector<long>({(long)7, (long)8, (long)9, (long)11, (long)12})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\nbool check_min_heap(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = check_min_heap;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)10, (long)15}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)5, (long)3, (long)15}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nlong jacobsthal_num(long n) {\n", "test": "}\nint main() {\n    auto candidate = jacobsthal_num;\n    assert(candidate((5)) == (11));\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (5));\n    assert(candidate((13)) == (2731));\n}\n", "language": "cpp"}, {"task_id": "mbpp_753_min_k", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/cpp-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cocpp of test cases\nstd::vector<std::tuple<std::string, long>> min_k(std::vector<std::tuple<std::string, long>> test_list, long K) {\n", "test": "}\nint main() {\n    auto candidate = min_k;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Nikhil\", 8)})), (2)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Sanjeev\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})), (3)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"tanmay\", 14), (std::tuple<std::string, long>)std::make_tuple(\"Amer\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9), (std::tuple<std::string, long>)std::make_tuple(\"SKD\", 16)})), (1)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// We say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nstd::vector<std::any> extract_index_list(std::vector<long> l1, std::vector<long> l2, std::vector<long> l3) {\n", "test": "}\nint main() {\n    auto candidate = extract_index_list;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>({(long)1, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)5})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)7}))) == (std::vector<std::any>({(long)1, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)6, (long)5, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>({(long)1, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)6, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>()));\n}\n", "language": "cpp"}, {"task_id": "mbpp_755_second_smallest", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float{\n    long f0;\n    float f1;    Union_long_float(long _f0) : f0(_f0) {}\n    Union_long_float(float _f1) : f1(_f1) {}\n    ~Union_long_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the second smallest number in a vector.\nstd::optional<float> second_smallest(std::vector<Union_long_float> numbers) {\n", "test": "}\nint main() {\n    auto candidate = second_smallest;\n    assert(candidate((std::vector<Union_long_float>({(long)1, (long)2, (long)-8, (long)-2, (long)0, (long)-2}))) == -2);\n    assert(candidate((std::vector<Union_long_float>({(long)1, (long)1, (long)-0.5f, (long)0, (long)2, (long)-2, (long)-2}))) == -0.5f);\n    assert(candidate((std::vector<Union_long_float>({(long)2, (long)2}))) == std::nullopt);\n    assert(candidate((std::vector<Union_long_float>({(long)2, (long)2, (long)2}))) == std::nullopt);\n}\n", "language": "cpp"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/cpp-exercises/re/cpp-re-exercise-3.php\nbool text_match_zero_one(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_match_zero_one;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abbbba\")) == (true));\n    assert(candidate((\"dsabbbba\")) == (true));\n    assert(candidate((\"asbbbba\")) == (false));\n    assert(candidate((\"abaaa\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/cpp-program-to-count-the-pairs-of-reverse-strings/\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n", "test": "}\nint main() {\n    auto candidate = count_reverse_pairs;\n    assert(candidate((std::vector<std::string>({(std::string)\"julia\", (std::string)\"best\", (std::string)\"tseb\", (std::string)\"for\", (std::string)\"ailuj\"}))) == (2));\n    assert(candidate((std::vector<std::string>({(std::string)\"geeks\", (std::string)\"best\", (std::string)\"for\", (std::string)\"skeeg\"}))) == (1));\n    assert(candidate((std::vector<std::string>({(std::string)\"makes\", (std::string)\"best\", (std::string)\"sekam\", (std::string)\"for\", (std::string)\"rof\"}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_759_is_decimal", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n", "test": "}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_760_unique_Element", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nbool check_monthnumber_number(long monthnum3) {\n", "test": "}\nint main() {\n    auto candidate = check_monthnumber_number;\n    assert(candidate((6)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((12)) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nlong find_min_diff(std::vector<long> arr, long n) {\n", "test": "}\nint main() {\n    auto candidate = find_min_diff;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)3, (long)19, (long)18, (long)25})), (6)) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)6})), (4)) == (1));\n    assert(candidate((std::vector<long>({(long)30, (long)5, (long)20, (long)9})), (4)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_764_number_ctr", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count number of digits in a given string.\nlong number_ctr(std::string str) {\n", "test": "}\nint main() {\n    auto candidate = number_ctr;\n    assert(candidate((\"program2bedone\")) == (1));\n    assert(candidate((\"3wonders\")) == (1));\n    assert(candidate((\"123\")) == (3));\n    assert(candidate((\"3wond-1ers2\")) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_765_is_polite", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nlong is_polite(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_polite;\n    assert(candidate((7)) == (11));\n    assert(candidate((4)) == (7));\n    assert(candidate((9)) == (13));\n}\n", "language": "cpp"}, {"task_id": "mbpp_766_pair_wise", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return a vector of all pairs of consecutive items in a given vector.\nstd::vector<std::tuple<long, long>> pair_wise(std::vector<long> l1) {\n", "test": "}\nint main() {\n    auto candidate = pair_wise;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 4), (std::tuple<long, long>)std::make_tuple(4, 5)})));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 5), (std::tuple<long, long>)std::make_tuple(5, 7), (std::tuple<long, long>)std::make_tuple(7, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)9, (long)7, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(1, 9), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(7, 10)})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 5), (std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,\nlong get_pairs_count(std::vector<long> arr, long sum) {\n", "test": "}\nint main() {\n    auto candidate = get_pairs_count;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (2)) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)-1, (long)5})), (6)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3})), (1)) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3})), (-3)) == (1));\n}\n", "language": "cpp"}, {"task_id": "mbpp_769_Diff", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to get the difference between two vectors.\nstd::vector<long> Diff(std::vector<long> li1, std::vector<long> li2) {\n", "test": "}\nint main() {\n    auto candidate = Diff;\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25, (long)30, (long)35, (long)40})), (std::vector<long>({(long)25, (long)40, (long)35}))) == (std::vector<long>({(long)10, (long)20, (long)30, (long)15})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)6, (long)7})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of fourth power of first n odd natural numbers.\nlong odd_num_sum(long n) {\n", "test": "}\nint main() {\n    auto candidate = odd_num_sum;\n    assert(candidate((2)) == (82));\n    assert(candidate((3)) == (707));\n    assert(candidate((4)) == (3108));\n}\n", "language": "cpp"}, {"task_id": "mbpp_771_check_expression", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nbool check_expression(std::string exp) {\n", "test": "}\nint main() {\n    auto candidate = check_expression;\n    assert(candidate((\"{()}[{}]\")) == (true));\n    assert(candidate((\"{()}[{]\")) == (false));\n    assert(candidate((\"{()}[{}][]({})\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_772_remove_length", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all the words with k length in the given string.\nstd::string remove_length(std::string test_str, long K) {\n", "test": "}\nint main() {\n    auto candidate = remove_length;\n    assert(candidate((\"The person is most value tet\"), (3)) == (\"person is most value\"));\n    assert(candidate((\"If you told me about this ok\"), (4)) == (\"If you me about ok\"));\n    assert(candidate((\"Forces of darkeness is come into the play\"), (4)) == (\"Forces of darkeness is the\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nstd::optional<std::tuple<std::string, long, long>> occurance_substring(std::string text, std::string pattern) {\n", "test": "}\nint main() {\n    auto candidate = occurance_substring;\n    assert(candidate((\"python programming, python language\"), (\"python\")) == std::make_tuple(\"python\", 0, 6));\n    assert(candidate((\"python programming,programming language\"), (\"programming\")) == std::make_tuple(\"programming\", 7, 18));\n    assert(candidate((\"python programming,programming language\"), (\"language\")) == std::make_tuple(\"language\", 31, 39));\n    assert(candidate((\"c++ programming, c++ language\"), (\"python\")) == std::nullopt);\n}\n", "language": "cpp"}, {"task_id": "mbpp_775_odd_position", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether every odd index contains odd numbers of a given vector.\nbool odd_position(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = odd_position;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)4, (long)3, (long)6, (long)7, (long)6, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_776_count_vowels", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nlong count_vowels(std::string test_str) {\n", "test": "}\nint main() {\n    auto candidate = count_vowels;\n    assert(candidate((\"bestinstareels\")) == (7));\n    assert(candidate((\"partofthejourneyistheend\")) == (12));\n    assert(candidate((\"amazonprime\")) == (5));\n}\n", "language": "cpp"}, {"task_id": "mbpp_777_find_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of non-repeated elements in a given vector.\nlong find_sum(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n", "language": "cpp"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to pack consecutive duplicates of a given vector elements into subvectors.\nstd::vector<std::vector<std::any>> pack_consecutive_duplicates(std::vector<std::any> list1) {\n", "test": "}\nint main() {\n    auto candidate = pack_consecutive_duplicates;\n    assert(candidate((std::vector<std::any>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)8}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)4})})));\n    assert(candidate((std::vector<std::any>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)10, (long)10}), (std::vector<long>)std::vector<long>({(long)15}), (std::vector<long>)std::vector<long>({(long)19}), (std::vector<long>)std::vector<long>({(long)18, (long)18}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)26, (long)26}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)18}), (std::vector<long>)std::vector<long>({(long)10})})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"a\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"d\"})})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_780_find_combinations", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/cpp-combinations-of-sum-with-tuples-in-tuple-vector/\nstd::vector<std::tuple<long, long>> find_combinations(std::vector<std::tuple<long, long>> test_list) {\n", "test": "}\nint main() {\n    auto candidate = find_combinations;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_781_count_divisors", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the count of divisors is even. https://www.w3resource.com/cpp-exercises/basic/cpp-basic-1-exercise-24.php\nbool count_divisors(long n) {\n", "test": "}\nint main() {\n    auto candidate = count_divisors;\n    assert(candidate((10)) == (true));\n    assert(candidate((100)) == (false));\n    assert(candidate((125)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\nlong odd_length_sum(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = odd_length_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4}))) == (14));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (15));\n    assert(candidate((std::vector<long>({(long)1, (long)7}))) == (8));\n}\n", "language": "cpp"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nstd::vector<float> rgb_to_hsv(long r, long g, long b) {\n", "test": "}\nint main() {\n    auto candidate = rgb_to_hsv;\n    assert(candidate((255), (255), (255)) == (std::vector<float>({(float)0.0f, (float)0.0f, (float)100.0f})));\n    assert(candidate((0), (215), (0)) == (std::vector<float>({(float)120.0f, (float)100.0f, (float)84.31372549019608f})));\n    assert(candidate((10), (215), (110)) == (std::vector<float>({(float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n", "test": "}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n", "language": "cpp"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nstd::tuple<long, long, long> tuple_str_int(std::string test_str) {\n", "test": "}\nint main() {\n    auto candidate = tuple_str_int;\n    assert(candidate((\"(7, 8, 9)\")) == (std::make_tuple(7, 8, 9)));\n    assert(candidate((\"(1, 2, 3)\")) == (std::make_tuple(1, 2, 3)));\n    assert(candidate((\"(4, 5, 6)\")) == (std::make_tuple(4, 5, 6)));\n    assert(candidate((\"(7, 81, 19)\")) == (std::make_tuple(7, 81, 19)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_786_right_insertion", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the right insertion point for a specified value in sorted order.\nlong right_insertion(std::vector<long> a, long x) {\n", "test": "}\nint main() {\n    auto candidate = right_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_787_text_match_three", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an a followed by three 'b'.\nbool text_match_three(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_match_three;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abbbba\")) == (true));\n    assert(candidate((\"caacabbbba\")) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_788_new_tuple", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create a new tuple from the given string and vector.\nstd::tuple<std::string, std::string, std::string> new_tuple(std::vector<std::string> test_list, std::string test_str) {\n", "test": "}\nint main() {\n    auto candidate = new_tuple;\n    assert(candidate((std::vector<std::string>({(std::string)\"WEB\", (std::string)\"is\"})), (\"best\")) == (std::make_tuple(\"WEB\", \"is\", \"best\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"We\", (std::string)\"are\"})), (\"Developers\")) == (std::make_tuple(\"We\", \"are\", \"Developers\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"Part\", (std::string)\"is\"})), (\"Wrong\")) == (std::make_tuple(\"Part\", \"is\", \"Wrong\")));\n}\n", "language": "cpp"}, {"task_id": "mbpp_790_even_position", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether every even index contains even numbers of a given vector.\nbool even_position(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = even_position;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)4}))) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_791_remove_nested", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove tuples from the given tuple.\nstd::tuple<long, long, long, long> remove_nested(std::any test_tup) {\n", "test": "}\nint main() {\n    auto candidate = remove_nested;\n    assert(candidate(std::make_tuple(1, 5, 7, std::make_tuple(4, 6), 10)) == (std::make_tuple(1, 5, 7, 10)));\n    assert(candidate(std::make_tuple(2, 6, 8, std::make_tuple(5, 7), 11)) == (std::make_tuple(2, 6, 8, 11)));\n    assert(candidate(std::make_tuple(3, 7, 9, std::make_tuple(6, 8), 12)) == (std::make_tuple(3, 7, 9, 12)));\n    assert(candidate(std::make_tuple(3, 7, 9, std::make_tuple(6, 8), std::make_tuple(5, 12), 12)) == (std::make_tuple(3, 7, 9, 12)));\n}\n", "language": "cpp"}, {"task_id": "mbpp_792_count_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of vectors in a given number of vectors.\nlong count_list(std::vector<std::vector<long>> input_list) {\n", "test": "}\nint main() {\n    auto candidate = count_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)2, (long)0})}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_793_last", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the last position of an element in a sorted vector.\nlong last(std::vector<long> arr, long x) {\n", "test": "}\nint main() {\n    auto candidate = last;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (1)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)4})), (1)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)2, (long)3, (long)6, (long)8, (long)9})), (3)) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nbool text_starta_endb(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = text_starta_endb;\n    assert(candidate((\"aabbbb\")) == (true));\n    assert(candidate((\"aabAbbbc\")) == (false));\n    assert(candidate((\"accddbbjjj\")) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_796_return_sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write function to find the sum of all items in the given map.\nlong return_sum(std::map<std::string,long> dict) {\n", "test": "}\nint main() {\n    auto candidate = return_sum;\n    assert(candidate((std::map<std::string,long>({{\"a\", 100}, {\"b\", 200}, {\"c\", 300}}))) == (600));\n    assert(candidate((std::map<std::string,long>({{\"a\", 25}, {\"b\", 18}, {\"c\", 45}}))) == (88));\n    assert(candidate((std::map<std::string,long>({{\"a\", 36}, {\"b\", 39}, {\"c\", 49}}))) == (124));\n}\n", "language": "cpp"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of all odd natural numbers within the range l and r.\nlong sum_in_range(long l, long r) {\n", "test": "}\nint main() {\n    auto candidate = sum_in_range;\n    assert(candidate((2), (5)) == (8));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (13)) == (40));\n}\n", "language": "cpp"}, {"task_id": "mbpp_798__sum", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of a vector.\nlong _sum(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = _sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)15, (long)12, (long)13, (long)10}))) == (50));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2}))) == (3));\n}\n", "language": "cpp"}, {"task_id": "mbpp_799_left_rotate", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlong left_rotate(long n, long d) {\n", "test": "}\nint main() {\n    auto candidate = left_rotate;\n    assert(candidate((16), (2)) == (64));\n    assert(candidate((10), (2)) == (40));\n    assert(candidate((99), (3)) == (792));\n    assert(candidate((99), (3)) == (792));\n    assert(candidate((1), (3)) == (8));\n    assert(candidate((5), (3)) == (40));\n    assert(candidate((29), (3)) == (232));\n}\n", "language": "cpp"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from a string.\nstd::string remove_all_spaces(std::string text) {\n", "test": "}\nint main() {\n    auto candidate = remove_all_spaces;\n    assert(candidate((\"python  program\")) == (\"pythonprogram\"));\n    assert(candidate((\"python   programming    language\")) == (\"pythonprogramminglanguage\"));\n    assert(candidate((\"python                     program\")) == (\"pythonprogram\"));\n    assert(candidate((\"   python                     program\")) == (\"pythonprogram\"));\n}\n", "language": "cpp"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of equal numbers from three given integers.\nlong test_three_equal(long x, long y, long z) {\n", "test": "}\nint main() {\n    auto candidate = test_three_equal;\n    assert(candidate((1), (1), (1)) == (3));\n    assert(candidate((-1), (-2), (-3)) == (0));\n    assert(candidate((1), (2), (2)) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_802_count_rotation", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nlong count_rotation(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = count_rotation;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)1, (long)2, (long)3}))) == (2));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (2));\n}\n", "language": "cpp"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nbool is_perfect_square(long n) {\n", "test": "}\nint main() {\n    auto candidate = is_perfect_square;\n    assert(candidate((10)) == (false));\n    assert(candidate((36)) == (true));\n    assert(candidate((14)) == (false));\n    assert(candidate((196)) == (true));\n    assert(candidate((125)) == (false));\n    assert(candidate((15625)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_804_is_product_even", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the product of numbers in a vector is even or not.\nbool is_product_even(std::vector<long> arr) {\n", "test": "}\nint main() {\n    auto candidate = is_product_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == (false));\n}\n", "language": "cpp"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nstd::vector<long> max_sum_list(std::vector<std::vector<long>> lists) {\n", "test": "}\nint main() {\n    auto candidate = max_sum_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)10, (long)11, (long)12})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)12, (long)11, (long)10})}))) == (std::vector<long>({(long)12, (long)11, (long)10})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)1})}))) == (std::vector<long>({(long)2, (long)3, (long)1})));\n}\n", "language": "cpp"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n", "test": "}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n", "language": "cpp"}, {"task_id": "mbpp_807_first_odd", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the first odd number in a given vector of numbers.\nlong first_odd(std::vector<long> nums) {\n", "test": "}\nint main() {\n    auto candidate = first_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5}))) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)9, (long)1}))) == (9));\n}\n", "language": "cpp"}, {"task_id": "mbpp_808_check_K", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuples contain the k or not.\nbool check_K(std::vector<long> test_tup, long K) {\n", "test": "}\nint main() {\n    auto candidate = check_K;\n    assert(candidate((std::vector<long>({(long)10, (long)4, (long)5, (long)6, (long)8})), (6)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (7)) == (false));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)44, (long)11, (long)12})), (11)) == (true));\n}\n", "language": "cpp"}, {"task_id": "mbpp_809_check_smaller", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nbool check_smaller(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n", "test": "}\nint main() {\n    auto candidate = check_smaller;\n    assert(candidate((std::make_tuple(1, 2, 3)), (std::make_tuple(2, 3, 4))) == (false));\n    assert(candidate((std::make_tuple(4, 5, 6)), (std::make_tuple(3, 4, 5))) == (true));\n    assert(candidate((std::make_tuple(11, 12, 13)), (std::make_tuple(10, 11, 12))) == (true));\n}\n", "language": "cpp"}]