[{"task_id": "HumanEval_0_has_close_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    def truncateNumber(number : Float) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_3_below_zero", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_5_intersperse", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    // (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\")), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"grunt\", \"prune\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_8_sum_product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_11_string_xor", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    def stringXor(a : String, b : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_12_longest", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return None in case the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // Some(\"a\")\n    // >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // Some(\"ccc\")\n    def longest(strings : List[String]) : Option[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(Some(\"x\")));\n    assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(Some(\"zzzz\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l), (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n    assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l), (60l)) == (12l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\")).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\")) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_17_parse_music", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string : String, substring : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"one three five\")\n    def sortNumbers(numbers : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    // (List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat, 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat, 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat, 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat, 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter given list of any scalathon values only for integers\n    // >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_23_strlen", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_25_factorize", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_27_flip_case", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_28_concatenate", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_30_get_positive", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return only positive numbers in the list.\n    // >>> getPositive((List[Long](-1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](2l.toLong, 5l.toLong, 6l.toLong))\n    // >>> getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))\n    def getPositive(l : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong, -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_31_is_prime", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_33_sort_third", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sortThird((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    // >>> sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))\n    def sortThird(l : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 9l.toLong, 4l.toLong, 8l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong, 1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_34_unique", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_35_max_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def fizzBuzz(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_37_sort_even", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong, 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> primeFib((1l))\n    // (2l)\n    // >>> primeFib((2l))\n    // (3l)\n    // >>> primeFib((3l))\n    // (5l)\n    // >>> primeFib((4l))\n    // (13l)\n    // >>> primeFib((5l))\n    // (89l)\n    def primeFib(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) == (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n    assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n    assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are three distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong, 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_42_incr_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList(l : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong, 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are two distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n    // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_44_change_base", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    def changeBase(x : Long, base : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangleArea((5l), (3l))\n    // (7.5f)\n    def triangleArea(a : Long, h : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l), (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l), (8l)) == (40.0f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_46_fib4", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_47_median", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n    def isPalindrome(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_49_modp", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    def removeVowels(text : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\")).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\")));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if all numbers in the list l are below threshold t.\n    // >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n    // (true)\n    // >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n    // (false)\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l)) == (false));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (21l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (22l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (11l)) == (true));\n    assert(belowThreshold((List[Long](1l.toLong, 8l.toLong, 4l.toLong, 10l.toLong)), (10l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_53_add", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_54_same_chars", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_55_fib", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def fib(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_57_monotonic", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_58_common", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sumToN((30l))\n    // (465l)\n    // >>> sumToN((100l))\n    // (5050l)\n    // >>> sumToN((5l))\n    // (15l)\n    // >>> sumToN((10l))\n    // (55l)\n    // >>> sumToN((1l))\n    // (1l)\n    def sumToN(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l)) == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\")(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_62_derivative", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_63_fibfib", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    def fibfib(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def vowelsCount(s : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\")) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"ACEDY\")) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_66_digitSum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_68_pluck", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"Given a list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given list is empty, return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong, 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong, 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_69_search", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // >>> search((List[Long](4l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    // (2l)\n    // >>> search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    // (3l)\n    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    // (-1l)\n    def search(lst : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong, 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong, 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong, 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong, 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong, 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong))) == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong, 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong))) == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong, 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong, 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong))) == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong, 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong))) == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong, 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong, 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given list of integers, return list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list arr of integers, find the minimum number of elements that\n    // need to be changed to make the list palindromic. A palindromic list is a list that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\n    // (4l)\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    // (1l)\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)))\n    // (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong))) == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong, 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_74_total_match", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\", \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> isSimplePower((1l), (4l))\n    // (true)\n    // >>> isSimplePower((2l), (2l))\n    // (true)\n    // >>> isSimplePower((8l), (2l))\n    // (true)\n    // >>> isSimplePower((3l), (2l))\n    // (false)\n    // >>> isSimplePower((3l), (1l))\n    // (false)\n    // >>> isSimplePower((5l), (3l))\n    // (false)\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_77_iscube", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_78_hex_key", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    def decimalToBinary(decimal : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_80_is_happy", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string s.\n    // Your task is to check if the string is hapscala or not.\n    // A string is hapscala if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // >>> isHappy((\"a\"))\n    // (false)\n    // >>> isHappy((\"aa\"))\n    // (false)\n    // >>> isHappy((\"abcd\"))\n    // (true)\n    // >>> isHappy((\"aabb\"))\n    // (false)\n    // >>> isHappy((\"adb\"))\n    // (true)\n    // >>> isHappy((\"xyy\"))\n    // (false)\n    def isHappy(s : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat, 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\", \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat, 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_82_prime_length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a string and returns true if the string\n    // length is a prime number or false otherwise\n    // Examples\n    // >>> primeLength((\"Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"orange\"))\n    // (false)\n    def primeLength(string : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\")) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n    assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\")) == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\")) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_84_solve", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"10010\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_85_add", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> add((List[Long](4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong)))\n    // (2l)\n    def add(lst : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_87_get_row", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()), (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long, Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l, 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()), (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))), (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long, Long]]((2l, 2l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_88_sort_array", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of non-negative integers, return a coscala of the given list after sorting,\n    // you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong, 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong, 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong, 14l.toLong, 11l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_89_encrypt", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return None if there is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // Some(2l)\n    // >>> nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // Some(2l)\n    // >>> nextSmallest((List[Long]()))\n    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(Some(2l)));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(Some(2l)));\n    assert(nextSmallest((List[Long]())).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(1l)));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(Some(-35l)));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_91_is_bored", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_92_any_int", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l, 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    // >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_93_encode", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]())) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Implement a function that takes an non-negative integer and returns a list of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_97_multiply", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_98_count_upper", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n    // (0l)\n    def countUpper(s : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_101_words_string", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\", \"gamal\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_102_choose_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given two positive integers n and m, and your task is to compute the\n    // average of the integers from n through m (including n and m). \n    // Round the answer to the nearest integer and convert that to binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l), (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    // >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l), (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong, 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_105_by_length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_106_f", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l, 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l, 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l, 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_108_count_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function count_nums which takes a list of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the list will be randomly ordered. Your task is to determine if\n    // it is possible to get a list sorted in non-decreasing order by performing \n    // the following operation on the given list:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the list by one\n    // position in the right direction. The last element of the list will be moved to\n    // the starting position in the list i.e. 0th index. \n    // If it is possible to obtain the sorted list by performing the above operation\n    // then return true else return false.\n    // If the given list is empty then return true.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    // (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given list.\n    // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong)))\n    // (false)\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // list by performing any number of right shift operations.\n    def moveOneBall(arr : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong, 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]())) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_110_exchange", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (\"YES\")\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))\n    // (\"NO\")\n    // It is assumed that the input lists will be non-empty.\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong, 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong, 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_111_histogram", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string representing a space separated lowercase letters, return a map\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and true/false for the check.\n    // Example\n    // >>> reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>> reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_113_odd_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    // >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong))) == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong, -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong, -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong))) == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_115_max_fill", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\n    // (6l)\n    // Example 2:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))\n    // (5l)\n    // Example 3:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\n    // (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_116_sort_array", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this Kata, you have to sort a list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong, -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong, -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong, 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_117_select_words", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String, n : Long) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    def getClosestVowel(word : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_119_match_parens", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    // >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst : List[String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\", \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\", \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\", \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\", \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\", \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\", \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\", \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \")(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_120_maximum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the list will be in the range of [1, 1000].\n    // 2. The elements in the list will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong, -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_121_solution", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong, 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong, 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong, 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong, 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_122_add_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong, 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_124_valid_date", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_125_split_words", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    // should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt : String) : Either[List[String], Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return false. Assume no negative numbers and only integers.\n    // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n    def isSorted(lst : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_127_intersection", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n    // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the list, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n    // Example:\n    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))\n    // Some(9l)\n    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n    // Some(0l)\n    // >>> prodSigns((List[Long]()))\n    // None\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(Some(-9l)));\n    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(Some(0l)));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(Some(-10l)));\n    assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(Some(20l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(Some(4l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(Some(-4l)));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(Some(0l)));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_129_minPath", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered list of the values on the cells that the minimum path go through.\n    // Examples:    \n    // >>> minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l))\n    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l))\n    // (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong, 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong, 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong, 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong, 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong, 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong, 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong, 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong), List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong, 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong, 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong, 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_130_tri", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_131_digits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_132_is_nested", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return true if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n    // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"[][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    // >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n    // (true)\n    def isNested(string : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of numbers.\n    // You need to return the sum of squared numbers in the given list,\n    // round each element in the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat, 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat, 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat, 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat, 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat))) == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n    assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as None.\n    // Examples:\n    // >>> largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (Some(None), Some(1l))\n    // >>> largestSmallestIntegers((List[Long]()))\n    // (Some(None), Some(None))\n    // >>> largestSmallestIntegers((List[Long](0l.toLong)))\n    // (Some(None), Some(None))\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l, 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong, 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n    def sumSquares(lst : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_144_simplify", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns true if x * n evaluates to a whole number and false\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n    // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n    def simplify(x : String, n : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\")) == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong, 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong, 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong, 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong, -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong, -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong, 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong, -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list of numbers as input and returns \n    // the number of elements in the list that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a positive integer n. You have to create an integer list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_148_bf", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never a list of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def sortedListSum(lst : List[String]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\", \"bbbb\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // >>> xOrY((7l), (34l), (12l))\n    // (34l)\n    // >>> xOrY((15l), (8l), (5l))\n    // (5l)\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(xOrY((7l), (34l), (12l)) == (34l));\n    assert(xOrY((15l), (8l), (5l)) == (5l));\n    assert(xOrY((3l), (33l), (5212l)) == (33l));\n    assert(xOrY((1259l), (3l), (52l)) == (3l));\n    assert(xOrY((7919l), (-1l), (12l)) == (-1l));\n    assert(xOrY((3609l), (1245l), (583l)) == (583l));\n    assert(xOrY((91l), (56l), (129l)) == (129l));\n    assert(xOrY((6l), (34l), (1234l)) == (1234l));\n    assert(xOrY((1l), (2l), (0l)) == (0l));\n    assert(xOrY((2l), (2l), (0l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers that are negative or not integers.\n    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong, -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst : List[Float]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat, -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat, -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat, 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat, -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_152_compare", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two lists of scores and guesses of equal length, where each index shows a match. \n    // Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\")) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"tinem\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l, 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l, 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l, 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l, 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return true if the three\n    // sides form a right-angled triangle, false otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_158_find_max", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_159_eat", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return a list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong, 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong, 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong, 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong, 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_161_solve", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // Some(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    def stringToMd5(text : String) : Option[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(Some(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(Some(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert(stringToMd5((\"password\")).equals(Some(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l), (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    def heapQueueLargest(nums : List[Long], n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (3l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong))));\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (2l)).equals((List[Long](85l.toLong, 75l.toLong))));\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (5l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong, 58l.toLong, 35l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_8_square_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum number of rotations (greater than 0) required to get the same string.\n    def findRotations(str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findRotations((\"aaaa\")) == (1l));\n    assert(findRotations((\"ab\")) == (2l));\n    assert(findRotations((\"abc\")) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    def sortMatrix(M : List[List[Long]]) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortMatrix((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong, 5l.toLong)))));\n    assert(sortMatrix((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](-2l.toLong, 4l.toLong, -5l.toLong), List[Long](1l.toLong, -1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](-2l.toLong, 4l.toLong, -5l.toLong), List[Long](1l.toLong, -1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))));\n    assert(sortMatrix((List[List[Long]](List[Long](5l.toLong, 8l.toLong, 9l.toLong), List[Long](6l.toLong, 4l.toLong, 3l.toLong), List[Long](2l.toLong, 1l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](2l.toLong, 1l.toLong, 4l.toLong), List[Long](6l.toLong, 4l.toLong, 3l.toLong), List[Long](5l.toLong, 8l.toLong, 9l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_14_find_Volume", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the volume of a triangular prism.\n    def findVolume(l : Long, b : Long, h : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findVolume((10l), (8l), (6l)) == (240l));\n    assert(findVolume((3l), (2l), (2l)) == (6l));\n    assert(findVolume((1l), (2l), (1l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    def textLowercaseUnderscore(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    assert(textLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    assert(textLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns the perimeter of a square given its side length as input.\n    def squarePerimeter(a : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(squarePerimeter((10l)) == (40l));\n    assert(squarePerimeter((5l)) == (20l));\n    assert(squarePerimeter((4l)) == (16l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    def removeDirtyChars(string : String, second_string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));\n    assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));\n    assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    def testDuplicate(arraynums : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(testDuplicate((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_20_is_woodall", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given number is woodball or not.\n    def isWoodall(x : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isWoodall((383l)) == (true));\n    assert(isWoodall((254l)) == (false));\n    assert(isWoodall((200l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_56_checks", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if a given number is one less than twice its reverse.\n    def checks(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest number that can be formed with the given list of digits.\n    def findMaxNum(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));\n    assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given two integers have opposite sign or not.\n    def oppositeSigns(x : Long, y : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oppositeSigns((1l), (-2l)) == (true));\n    assert(oppositeSigns((3l), (2l)) == (false));\n    assert(oppositeSigns((-10l), (-10l)) == (false));\n    assert(oppositeSigns((-2l), (2l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth octagonal number.\n    def isOctagonal(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of substrings with the sum of digits equal to their length.\n    def countSubstrings(s : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countSubstrings((\"112112\")) == (6l));\n    assert(countSubstrings((\"111\")) == (6l));\n    assert(countSubstrings((\"1101112\")) == (12l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_62_smallest_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_63_max_difference", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between available pairs in the given tuple list.\n    def maxDifference(test_list : List[Tuple2[Long, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxDifference((List[Tuple2[Long, Long]]((3l, 5l), (1l, 7l), (10l, 3l), (1l, 2l)))) == (7l));\n    assert(maxDifference((List[Tuple2[Long, Long]]((4l, 6l), (2l, 17l), (9l, 13l), (11l, 12l)))) == (15l));\n    assert(maxDifference((List[Tuple2[Long, Long]]((12l, 35l), (21l, 27l), (13l, 23l), (41l, 22l)))) == (23l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_64_subject_marks", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of tuples using the second value of each tuple.\n    def subjectMarks(subjectmarks : List[Tuple2[String, Long]]) : List[Tuple2[String, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(subjectMarks((List[Tuple2[String, Long]]((\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l), (\"Social sciences\", 82l)))).equals((List[Tuple2[String, Long]]((\"Social sciences\", 82l), (\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l)))));\n    assert(subjectMarks((List[Tuple2[String, Long]]((\"Telugu\", 49l), (\"Hindhi\", 54l), (\"Social\", 33l)))).equals((List[Tuple2[String, Long]]((\"Social\", 33l), (\"Telugu\", 49l), (\"Hindhi\", 54l)))));\n    assert(subjectMarks((List[Tuple2[String, Long]]((\"Physics\", 96l), (\"Chemistry\", 97l), (\"Biology\", 45l)))).equals((List[Tuple2[String, Long]]((\"Biology\", 45l), (\"Physics\", 96l), (\"Chemistry\", 97l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_66_pos_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of positive numbers in a list.\n    def posCount(list : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(posCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong, -4l.toLong))) == (2l));\n    assert(posCount((List[Long](3l.toLong, 4l.toLong, 5l.toLong, -1l.toLong))) == (3l));\n    assert(posCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_67_bell_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of ways to partition a set of Bell numbers.\n    def bellNumber(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((10l)) == (115975l));\n    assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given list is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_69_is_sublist", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a list contains the given sublist or not.\n    def isSublist(l : List[Long], s : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](3l.toLong, 7l.toLong))) == (false));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](4l.toLong, 3l.toLong))) == (true));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](1l.toLong, 6l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_70_get_equal", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find whether all the given lists have equal length or not.\n    def getEqual(Input : List[List[Long]]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getEqual((List[List[Long]](List[Long](11l.toLong, 22l.toLong, 33l.toLong), List[Long](44l.toLong, 55l.toLong, 66l.toLong)))) == (true));\n    assert(getEqual((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))) == (false));\n    assert(getEqual((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong)))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_71_comb_sort", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_72_dif_Square", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether it follows the sequence given in the patterns list.\n    def isSamepatterns(colors : List[String], patterns : List[String]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"green\")), (List[String](\"a\", \"b\", \"b\"))) == (true));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\", \"b\"))) == (false));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\"))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_75_find_tuples", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Tuple2[Long, Long, Long]], K : Long) : List[Tuple2[Long, Long, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Tuple2[Long, Long, Long]]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Tuple2[Long, Long, Long]]((6l, 24l, 12l)))));\n    assert(findTuples((List[Tuple2[Long, Long, Long]]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Tuple2[Long, Long, Long]]((5l, 25l, 30l)))));\n    assert(findTuples((List[Tuple2[Long, Long, Long]]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Tuple2[Long, Long, Long]]((8l, 16l, 4l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_77_is_Diff", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find whether a number is divisible by 11.\n    def isDiff(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isDiff((12345l)) == (false));\n    assert(isDiff((1212112l)) == (true));\n    assert(isDiff((1212l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_79_word_len", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the length of the word is odd or not.\n    def wordLen(s : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(wordLen((\"Hadoop\")) == (false));\n    assert(wordLen((\"great\")) == (true));\n    assert(wordLen((\"structure\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth tetrahedral number.\n    def tetrahedralNumber(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tetrahedralNumber((5l)) == (35l));\n    assert(tetrahedralNumber((6l)) == (56l));\n    assert(tetrahedralNumber((7l)) == (84l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_83_get_Char", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    def getChar(strr : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getChar((\"abc\")).equals((\"f\")));\n    assert(getChar((\"gfg\")).equals((\"t\")));\n    assert(getChar((\"ab\")).equals((\"c\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_84_sequence", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth number in the newman conway sequence.\n    def sequence(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sequence((10l)) == (6l));\n    assert(sequence((2l)) == (1l));\n    assert(sequence((3l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find nth centered hexagonal number.\n    def centeredHexagonalNumber(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(centeredHexagonalNumber((10l)) == (271l));\n    assert(centeredHexagonalNumber((2l)) == (7l));\n    assert(centeredHexagonalNumber((9l)) == (217l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three dictionaries into a single map.\n    def mergeDictionariesThree(dict1 : Map[String,String], dict2 : Map[String,String], dict3 : Map[String,String]) : Map[String,String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"O\" -> \"Orange\", \"W\" -> \"White\", \"B\" -> \"Black\"))).equals((Map[String,String](\"B\" -> \"Black\", \"R\" -> \"Red\", \"P\" -> \"Pink\", \"G\" -> \"Green\", \"W\" -> \"White\", \"O\" -> \"Orange\"))));\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\"))).equals((Map[String,String](\"W\" -> \"White\", \"P\" -> \"Pink\", \"B\" -> \"Black\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\"))));\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\"))).equals((Map[String,String](\"B\" -> \"Black\", \"P\" -> \"Pink\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\", \"W\" -> \"White\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_88_freq_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get the frequency of all the elements in a list, returned as a map.\n    def freqCount(list1 : List[Long]) : Map[Long,Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(freqCount((List[Long](10l.toLong, 10l.toLong, 10l.toLong, 10l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 40l.toLong, 40l.toLong, 50l.toLong, 50l.toLong, 30l.toLong))).equals((Map[Long,Long](10l -> 4l, 20l -> 4l, 40l -> 2l, 50l -> 2l, 30l -> 1l))));\n    assert(freqCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 4l.toLong))).equals((Map[Long,Long](1l -> 3l, 2l -> 2l, 3l -> 3l, 4l -> 3l))));\n    assert(freqCount((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 5l.toLong))).equals((Map[Long,Long](10l -> 1l, 5l -> 3l, 6l -> 2l, 7l -> 2l, 4l -> 2l, 9l -> 2l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_89_closest_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the closest smaller number than n.\n    def closestNum(N : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(closestNum((11l)) == (10l));\n    assert(closestNum((7l)) == (6l));\n    assert(closestNum((12l)) == (11l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_90_len_log", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the length of the longest word.\n    def lenLog(list1 : List[String]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lenLog((List[String](\"python\", \"PHP\", \"bigdata\"))) == (7l));\n    assert(lenLog((List[String](\"a\", \"ab\", \"abc\"))) == (3l));\n    assert(lenLog((List[String](\"small\", \"big\", \"tall\"))) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_91_find_substring", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if a string is present as a substring in a given list of string values.\n    def findSubstring(str1 : List[String], sub_str : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ack\")) == (true));\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"abc\")) == (false));\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ange\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_92_is_undulating", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is undulating or not.\n    def isUndulating(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isUndulating((1212121l)) == (true));\n    assert(isUndulating((1991l)) == (false));\n    assert(isUndulating((121l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_93_power", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the value of 'a' to the power 'b'.\n    def power(a : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(power((3l), (4l)) == (81l));\n    assert(power((2l), (3l)) == (8l));\n    assert(power((5l), (5l)) == (3125l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_94_index_minimum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    def indexMinimum(test_list : List[Tuple2[String, Long]]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(indexMinimum((List[Tuple2[String, Long]]((\"Rash\", 143l), (\"Manjeet\", 200l), (\"Varsha\", 100l)))).equals((\"Varsha\")));\n    assert(indexMinimum((List[Tuple2[String, Long]]((\"Yash\", 185l), (\"Dawood\", 125l), (\"Sanya\", 175l)))).equals((\"Dawood\")));\n    assert(indexMinimum((List[Tuple2[String, Long]]((\"Sai\", 345l), (\"Salman\", 145l), (\"Ayesha\", 96l)))).equals((\"Ayesha\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the length of the smallest list in a list of lists.\n    def FindMinLength(lst : List[List[Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(FindMinLength((List[List[Long]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong)))) == (1l));\n    assert(FindMinLength((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))) == (2l));\n    assert(FindMinLength((List[List[Long]](List[Long](3l.toLong, 3l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_96_divisor", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a map.\n    def frequencyLists(list1 : List[List[Long]]) : Map[Long,Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong, 5l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 3l, 3l -> 1l, 4l -> 1l, 5l -> 2l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 1l, 3l -> 1l, 4l -> 1l, 5l -> 1l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l, 10l -> 1l, 11l -> 1l, 12l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](20l.toLong, 30l.toLong, 40l.toLong, 17l.toLong), List[Long](18l.toLong, 16l.toLong, 14l.toLong, 13l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((Map[Long,Long](20l -> 2l, 30l -> 2l, 40l -> 2l, 17l -> 1l, 18l -> 1l, 16l -> 1l, 14l -> 1l, 13l -> 1l, 10l -> 1l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    def decimalToBinary(n : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((8l)).equals((\"1000\")));\n    assert(decimalToBinary((18l)).equals((\"10010\")));\n    assert(decimalToBinary((7l)).equals((\"111\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    def nextSmallestPalindrome(num : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallestPalindrome((99l)) == (101l));\n    assert(nextSmallestPalindrome((1221l)) == (1331l));\n    assert(nextSmallestPalindrome((120l)) == (121l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_101_kth_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the kth element in the given list using 1-based indexing.\n    def kthElement(arr : List[Long], k : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(kthElement((List[Long](12l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 19l.toLong)), (2l)) == (3l));\n    assert(kthElement((List[Long](17l.toLong, 24l.toLong, 8l.toLong, 23l.toLong)), (3l)) == (8l));\n    assert(kthElement((List[Long](16l.toLong, 21l.toLong, 25l.toLong, 36l.toLong, 4l.toLong)), (4l)) == (36l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    def eulerianNum(n : Long, m : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(eulerianNum((3l), (1l)) == (4l));\n    assert(eulerianNum((4l), (1l)) == (11l));\n    assert(eulerianNum((5l), (3l)) == (26l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(input_list : List[List[String]]) : List[List[String]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\" red \", \"green\"), List[String](\"blue \", \" black\"), List[String](\" orange\", \"brown\")))).equals((List[List[String]](List[String](\" red \", \"green\"), List[String](\" black\", \"blue \"), List[String](\" orange\", \"brown\")))));\n    assert(sortSublists((List[List[String]](List[String](\"zilver\", \"gold\"), List[String](\"magnesium\", \"aluminium\"), List[String](\"steel\", \"bronze\")))).equals((List[List[String]](List[String](\"gold\", \"zilver\"), List[String](\"aluminium\", \"magnesium\"), List[String](\"bronze\", \"steel\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_105_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count true booleans in the given list.\n    def count(lst : List[Boolean]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(count((List[Boolean](true.toBoolean, false.toBoolean, true.toBoolean))) == (2l));\n    assert(count((List[Boolean](false.toBoolean, false.toBoolean))) == (0l));\n    assert(count((List[Boolean](true.toBoolean, true.toBoolean, true.toBoolean))) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_106_add_lists", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to append the given list to the given tuples.\n    def addLists(test_list : List[Long], test_tup : Tuple2[Long, Long]) : Tuple2[Long, Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addLists((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), ((9l, 10l))).equals(((9l, 10l, 5l, 6l, 7l))));\n    assert(addLists((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), ((10l, 11l))).equals(((10l, 11l, 6l, 7l, 8l))));\n    assert(addLists((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), ((11l, 12l))).equals(((11l, 12l, 7l, 8l, 9l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three lists into a single sorted list.\n    def mergeSortedList(num1 : List[Long], num2 : List[Long], num3 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(mergeSortedList((List[Long](25l.toLong, 24l.toLong, 15l.toLong, 4l.toLong, 5l.toLong, 29l.toLong, 110l.toLong)), (List[Long](19l.toLong, 20l.toLong, 11l.toLong, 56l.toLong, 25l.toLong, 233l.toLong, 154l.toLong)), (List[Long](24l.toLong, 26l.toLong, 54l.toLong, 48l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 11l.toLong, 15l.toLong, 19l.toLong, 20l.toLong, 24l.toLong, 24l.toLong, 25l.toLong, 25l.toLong, 26l.toLong, 29l.toLong, 48l.toLong, 54l.toLong, 56l.toLong, 110l.toLong, 154l.toLong, 233l.toLong))));\n    assert(mergeSortedList((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (List[Long](2l.toLong, 5l.toLong, 7l.toLong, 11l.toLong)), (List[Long](1l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 12l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    assert(mergeSortedList((List[Long](18l.toLong, 14l.toLong, 10l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong)), (List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong)), (List[Long](12l.toLong, 74l.toLong, 9l.toLong, 50l.toLong, 61l.toLong, 41l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 14l.toLong, 18l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 41l.toLong, 50l.toLong, 58l.toLong, 61l.toLong, 65l.toLong, 74l.toLong, 75l.toLong, 85l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    def oddEquivalent(s : String, n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oddEquivalent((\"011001\"), (6l)) == (3l));\n    assert(oddEquivalent((\"11011\"), (5l)) == (4l));\n    assert(oddEquivalent((\"1010\"), (4l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_113_check_integer", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if a string represents an integer or not.\n    def checkInteger(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkInteger((\"python\")) == (false));\n    assert(checkInteger((\"1\")) == (true));\n    assert(checkInteger((\"12345\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a given tuple of positive integers into a single integer.\n    def tupleToInt(nums : Tuple2[Long, Long, Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToInt(((1l, 2l, 3l))) == (123l));\n    assert(tupleToInt(((4l, 5l, 6l))) == (456l));\n    assert(tupleToInt(((5l, 6l, 7l))) == (567l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_117_list_to_float", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[Tuple2[String, String]]) : List[Tuple2[Float, Float]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[Tuple2[String, String]]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Tuple2[Float, Float]]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[Tuple2[String, String]]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Tuple2[Float, Float]]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[Tuple2[String, String]]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Tuple2[Float, Float]]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_118_string_to_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a string to a list of strings split on the space character.\n    def stringToList(string : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(stringToList((\"python programming\")).equals((List[String](\"python\", \"programming\"))));\n    assert(stringToList((\"lists tuples strings\")).equals((List[String](\"lists\", \"tuples\", \"strings\"))));\n    assert(stringToList((\"write a program\")).equals((List[String](\"write\", \"a\", \"program\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_119_search", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    def maxProductTuple(list1 : List[Tuple2[Long, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxProductTuple((List[Tuple2[Long, Long]]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (36l));\n    assert(maxProductTuple((List[Tuple2[Long, Long]]((10l, 20l), (15l, 2l), (5l, 10l)))) == (200l));\n    assert(maxProductTuple((List[Tuple2[Long, Long]]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (484l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_125_find_length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    def findLength(string : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_126_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_127_multiply_int", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_128_long_words", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find words that are longer than n characters from a given list of words.\n    def longWords(n : Long, str : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(longWords((3l), (\"python is a programming language\")).equals((List[String](\"python\", \"programming\", \"language\"))));\n    assert(longWords((2l), (\"writing a program\")).equals((List[String](\"writing\", \"program\"))));\n    assert(longWords((5l), (\"sorting list\")).equals((List[String](\"sorting\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate whether the matrix is a magic square.\n    def magicSquareTest(my_matrix : List[List[Long]]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(magicSquareTest((List[List[Long]](List[Long](7l.toLong, 12l.toLong, 1l.toLong, 14l.toLong), List[Long](2l.toLong, 13l.toLong, 8l.toLong, 11l.toLong), List[Long](16l.toLong, 3l.toLong, 10l.toLong, 5l.toLong), List[Long](9l.toLong, 6l.toLong, 15l.toLong, 4l.toLong)))) == (true));\n    assert(magicSquareTest((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 1l.toLong), List[Long](4l.toLong, 3l.toLong, 8l.toLong)))) == (true));\n    assert(magicSquareTest((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 1l.toLong), List[Long](4l.toLong, 3l.toLong, 7l.toLong)))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    def maxOccurrences(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 5l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 1l.toLong, 2l.toLong))) == (2l));\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 15l.toLong, 14l.toLong, 10l.toLong, 12l.toLong, 13l.toLong, 16l.toLong, 18l.toLong))) == (8l));\n    assert(maxOccurrences((List[Long](10l.toLong, 20l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 90l.toLong, 80l.toLong, 50l.toLong, 30l.toLong, 20l.toLong, 50l.toLong, 10l.toLong))) == (20l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse only the vowels of a given string (where y is not a vowel).\n    def reverseVowels(str1 : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(reverseVowels((\"Python\")).equals((\"Python\")));\n    assert(reverseVowels((\"USA\")).equals((\"ASU\")));\n    assert(reverseVowels((\"ab\")).equals((\"ab\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_132_tup_string", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a list to a string.\n    def tupString(tup1 : List[String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tupString((List[String](\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))).equals((\"exercises\")));\n    assert(tupString((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))).equals((\"python\")));\n    assert(tupString((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))).equals((\"program\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth hexagonal number.\n    def hexagonalNum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(hexagonalNum((10l)) == (190l));\n    assert(hexagonalNum((5l)) == (45l));\n    assert(hexagonalNum((7l)) == (91l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    def isSumOfPowersOfTwo(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isSumOfPowersOfTwo((10l)) == (true));\n    assert(isSumOfPowersOfTwo((7l)) == (false));\n    assert(isSumOfPowersOfTwo((14l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def pancakeSort(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(pancakeSort((List[Long](15l.toLong, 79l.toLong, 25l.toLong, 38l.toLong, 69l.toLong))).equals((List[Long](15l.toLong, 25l.toLong, 38l.toLong, 69l.toLong, 79l.toLong))));\n    assert(pancakeSort((List[Long](98l.toLong, 12l.toLong, 54l.toLong, 36l.toLong, 85l.toLong))).equals((List[Long](12l.toLong, 36l.toLong, 54l.toLong, 85l.toLong, 98l.toLong))));\n    assert(pancakeSort((List[Long](41l.toLong, 42l.toLong, 32l.toLong, 12l.toLong, 23l.toLong))).equals((List[Long](12l.toLong, 23l.toLong, 32l.toLong, 41l.toLong, 42l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_142_count_samepair", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_143_find_lists", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find number of lists present in the given list.\n    def findLists(Input : List[Any]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findLists((List[Any](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (2l));\n    assert(findLists((List[Any](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (3l));\n    assert(findLists((List[Any](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum difference between any two elements in a given list.\n    def maxAbsDiff(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxAbsDiff((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 3l.toLong))) == (4l));\n    assert(maxAbsDiff((List[Long](9l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (8l));\n    assert(maxAbsDiff((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_160_find_solution", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    def findSolution(a : Long, b : Long, n : Long) : Option[Tuple2[Long, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findSolution((2l), (3l), (7l)).equals(Some((2l, 1l))));\n    assert(findSolution((4l), (2l), (7l)).equals(None));\n    assert(findSolution((1l), (13l), (17l)).equals(Some((4l, 1l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_161_remove_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_162_sum_series", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    def sumSeries(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumSeries((6l)) == (12l));\n    assert(sumSeries((10l)) == (30l));\n    assert(sumSeries((9l)) == (25l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to determine if the sum of the divisors of two integers are the same.\n    def areEquivalent(num1 : Long, num2 : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(areEquivalent((36l), (57l)) == (false));\n    assert(areEquivalent((2l), (4l)) == (false));\n    assert(areEquivalent((23l), (47l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_165_count_char_position", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    def countCharPosition(str1 : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countCharPosition((\"xbcefg\")) == (2l));\n    assert(countCharPosition((\"ABcED\")) == (3l));\n    assert(countCharPosition((\"AbgdeF\")) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the smallest power of 2 greater than or equal to n.\n    def nextPowerOf2(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(nextPowerOf2((0l)) == (1l));\n    assert(nextPowerOf2((5l)) == (8l));\n    assert(nextPowerOf2((17l)) == (32l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_168_frequency", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of numbers in a list within a range specified by two indices.\n    def sumRangeList(list1 : List[Long], m : Long, n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (8l), (10l)) == (29l));\n    assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (5l), (7l)) == (16l));\n    assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (7l), (10l)) == (38l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    def perimeterPentagon(a : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(perimeterPentagon((5l)) == (25l));\n    assert(perimeterPentagon((10l)) == (50l));\n    assert(perimeterPentagon((15l)) == (75l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_172_count_occurance", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurence of the string 'std' in a given string.\n    def countOccurance(s : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurance((\"letstdlenstdporstd\")) == (3l));\n    assert(countOccurance((\"truststdsolensporsd\")) == (1l));\n    assert(countOccurance((\"makestdsostdworthit\")) == (2l));\n    assert(countOccurance((\"stds\")) == (1l));\n    assert(countOccurance((\"\")) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_222_check_type", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    def checkType(test_tuple : Any) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));\n    assert(checkType((Any((1l, 2l, \"4\")))) == (false));\n    assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_223_is_majority", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove the characters which have odd index values of a given string.\n    def oddValuesString(str : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oddValuesString((\"abcdef\")).equals((\"ace\")));\n    assert(oddValuesString((\"python\")).equals((\"pto\")));\n    assert(oddValuesString((\"data\")).equals((\"dt\")));\n    assert(oddValuesString((\"lambs\")).equals((\"lms\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_227_min_of_three", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum of three numbers.\n    def minOfThree(a : Long, b : Long, c : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minOfThree((10l), (20l), (0l)) == (0l));\n    assert(minOfThree((19l), (15l), (18l)) == (15l));\n    assert(minOfThree((-10l), (-20l), (-30l)) == (-30l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether all the bits are unset in the given range or not.\n    def allBitsSetInTheGivenRange(n : Long, l : Long, r : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(allBitsSetInTheGivenRange((4l), (1l), (2l)) == (true));\n    assert(allBitsSetInTheGivenRange((17l), (2l), (4l)) == (true));\n    assert(allBitsSetInTheGivenRange((39l), (4l), (6l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_230_replace_blank", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_234_volume_cube", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the volume of a cube given its side length.\n    def volumeCube(l : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(volumeCube((3l)) == (27l));\n    assert(volumeCube((2l)) == (8l));\n    assert(volumeCube((5l)) == (125l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_237_check_occurences", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Tuple2[Long, Long]]) : Map[Tuple2[Long, Long],Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Tuple2[Long, Long]]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Tuple2[Long, Long],Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Tuple2[Long, Long]]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Tuple2[Long, Long],Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Tuple2[Long, Long]]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Tuple2[Long, Long],Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of non-empty substrings of a given string.\n    def numberOfSubstrings(str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(numberOfSubstrings((\"abc\")) == (6l));\n    assert(numberOfSubstrings((\"abcd\")) == (10l));\n    assert(numberOfSubstrings((\"abcde\")) == (15l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    def getTotalNumberOfSequences(m : Long, n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getTotalNumberOfSequences((10l), (4l)) == (4l));\n    assert(getTotalNumberOfSequences((5l), (2l)) == (6l));\n    assert(getTotalNumberOfSequences((16l), (3l)) == (84l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_240_replace_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    def replaceList(list1 : List[Any], list2 : List[Any]) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(replaceList((List[Any](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong)), (List[Any](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Any](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(replaceList((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(replaceList((List[Any](\"red\", \"blue\", \"green\")), (List[Any](\"yellow\"))).equals((List[Any](\"red\", \"blue\", \"yellow\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_242_count_charac", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the total number of characters in a string.\n    def countCharac(str1 : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countCharac((\"python programming\")) == (18l));\n    assert(countCharac((\"language\")) == (8l));\n    assert(countCharac((\"words\")) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_245_max_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_247_lps", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_249_intersection_array", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_250_count_X", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a tuple and an element and counts the occcurences of the element in the list.\n    def countX(tup : List[Long], x : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (4l)) == (0l));\n    assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (10l)) == (3l));\n    assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (8l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_251_insert_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    def insertElement(list : List[String], element : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(insertElement((List[String](\"Red\", \"Green\", \"Black\")), (\"c\")).equals((List[String](\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"))));\n    assert(insertElement((List[String](\"python\", \"java\")), (\"program\")).equals((List[String](\"program\", \"python\", \"program\", \"java\"))));\n    assert(insertElement((List[String](\"happy\", \"sad\")), (\"laugh\")).equals((List[String](\"laugh\", \"happy\", \"laugh\", \"sad\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_252_convert", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to convert complex numbers to polar coordinates.\n    def convert(numbers : Long) : Tuple2[Float, Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(convert((1l)).equals(((1.0f, 0.0f))));\n    assert(convert((4l)).equals(((4.0f, 0.0f))));\n    assert(convert((5l)).equals(((5.0f, 0.0f))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n    def combinationsColors(l : List[String], n : Long) : List[List[String]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (1l)).equals((List[List[String]](List[String](\"Red\"), List[String](\"Green\"), List[String](\"Blue\")))));\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (2l)).equals((List[List[String]](List[String](\"Red\", \"Red\"), List[String](\"Red\", \"Green\"), List[String](\"Red\", \"Blue\"), List[String](\"Green\", \"Green\"), List[String](\"Green\", \"Blue\"), List[String](\"Blue\", \"Blue\")))));\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (3l)).equals((List[List[String]](List[String](\"Red\", \"Red\", \"Red\"), List[String](\"Red\", \"Red\", \"Green\"), List[String](\"Red\", \"Red\", \"Blue\"), List[String](\"Red\", \"Green\", \"Green\"), List[String](\"Red\", \"Green\", \"Blue\"), List[String](\"Red\", \"Blue\", \"Blue\"), List[String](\"Green\", \"Green\", \"Green\"), List[String](\"Green\", \"Green\", \"Blue\"), List[String](\"Green\", \"Blue\", \"Blue\"), List[String](\"Blue\", \"Blue\", \"Blue\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    def swapNumbers(a : Long, b : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(swapNumbers((10l), (20l)).equals((List[Long](20l.toLong, 10l.toLong))));\n    assert(swapNumbers((15l), (17l)).equals((List[Long](17l.toLong, 15l.toLong))));\n    assert(swapNumbers((100l), (200l)).equals((List[Long](200l.toLong, 100l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to maximize the given two lists.\n    def maximizeElements(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maximizeElements((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 9l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](7l.toLong, 10l.toLong)))));\n    assert(maximizeElements((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](5l.toLong, 10l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](8l.toLong, 11l.toLong)))));\n    assert(maximizeElements((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](6l.toLong, 11l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](9l.toLong, 12l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_260_newman_prime", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    def newmanPrime(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(newmanPrime((3l)) == (7l));\n    assert(newmanPrime((4l)) == (17l));\n    assert(newmanPrime((5l)) == (41l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_261_division_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    def divisionElements(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(divisionElements(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((2l, 2l, 2l, 3l))));\n    assert(divisionElements(((12l, 6l, 8l, 16l)), ((6l, 3l, 4l, 4l))).equals(((2l, 2l, 2l, 4l))));\n    assert(divisionElements(((20l, 14l, 36l, 18l)), ((5l, 7l, 6l, 9l))).equals(((4l, 2l, 6l, 2l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    def splitTwoParts(list1 : List[Any], L : Long) : Any = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(splitTwoParts((List[Any](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((Any(1l.toLong, 1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)))));\n    assert(splitTwoParts((List[Any](\"a\", \"b\", \"c\", \"d\")), (2l)).equals((Any(\"a\", \"b\"), List[String](\"c\", \"d\")))));\n    assert(splitTwoParts((List[Any](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")), (4l)).equals((Any(\"p\", \"y\", \"t\", \"h\"), List[String](\"o\", \"n\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_264_dog_age", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate a dog's age in dog's years.\n    def dogAge(h_age : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(dogAge((12l)) == (61l));\n    assert(dogAge((15l)) == (73l));\n    assert(dogAge((24l)) == (109l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_265_list_split", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : List[Any], step : Long) : List[List[Any]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(listSplit((List[Any](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((List[List[Any]](List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((List[List[Any]](List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((List[Any](\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((List[List[Any]](List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the lateral surface area of a cube given its side length.\n    def lateralsurfaceCube(l : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lateralsurfaceCube((5l)) == (100l));\n    assert(lateralsurfaceCube((9l)) == (324l));\n    assert(lateralsurfaceCube((10l)) == (400l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_267_square_Sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_268_find_star_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n'th star number.\n    def findStarNum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findStarNum((3l)) == (37l));\n    assert(findStarNum((4l)) == (73l));\n    assert(findStarNum((5l)) == (121l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_269_ascii_value", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ascii value of a character.\n    def asciiValue(k : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(asciiValue((\"A\")) == (65l));\n    assert(asciiValue((\"R\")) == (82l));\n    assert(asciiValue((\"S\")) == (83l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of even numbers at even positions of a list.\n    def sumEvenAndEvenIndex(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumEvenAndEvenIndex((List[Long](5l.toLong, 6l.toLong, 12l.toLong, 1l.toLong, 18l.toLong, 8l.toLong))) == (30l));\n    assert(sumEvenAndEvenIndex((List[Long](3l.toLong, 20l.toLong, 17l.toLong, 9l.toLong, 2l.toLong, 10l.toLong, 18l.toLong, 13l.toLong, 6l.toLong, 18l.toLong))) == (26l));\n    assert(sumEvenAndEvenIndex((List[Long](5l.toLong, 6l.toLong, 12l.toLong, 1l.toLong))) == (12l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    def evenPowerSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(evenPowerSum((2l)) == (1056l));\n    assert(evenPowerSum((3l)) == (8832l));\n    assert(evenPowerSum((1l)) == (32l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_272_rear_extract", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Tuple2[Long, String, Long]]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_273_substract_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    def substractElements(test_tup1 : Tuple2[Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long]) : Tuple2[Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(substractElements(((10l, 4l, 5l)), ((2l, 5l, 18l))).equals(((8l, -1l, -13l))));\n    assert(substractElements(((11l, 2l, 3l)), ((24l, 45l, 16l))).equals(((-13l, -43l, -13l))));\n    assert(substractElements(((7l, 18l, 9l)), ((10l, 11l, 12l))).equals(((-3l, 7l, -3l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    def evenBinomialCoeffSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(evenBinomialCoeffSum((4l)) == (8l));\n    assert(evenBinomialCoeffSum((6l)) == (32l));\n    assert(evenBinomialCoeffSum((2l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_277_dict_filter", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\n    def dictFilter(dict : Map[String,Long], n : Long) : Map[String,Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (170l)).equals((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (180l)).equals((Map[String,Long](\"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (190l)).equals((Map[String,Long](\"Pierre Cox\" -> 190l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of elements that occurs before the list element in the given tuple.\n    def countFirstElements(test_tup : List[Either[Long, Tuple2[Long, Long]]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](1l, 5l, 7l, (4l, 6l), 10l))) == (3l));\n    assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](2l, 9l, (5l, 7l), 11l))) == (2l));\n    assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](11l, 15l, 5l, 8l, (2l, 3l), 8l))) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth decagonal number.\n    def isNumDecagonal(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_280_sequential_search", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Tuple2[Boolean, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals(((true, 3l))));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals(((true, 7l))));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals(((true, 6l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_281_all_unique", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if the elements of a given list are unique or not.\n    def allUnique(test_list : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_282_sub_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_283_validate", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_284_check_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    def checkElement(list : List[Any], element : Any) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkElement((List[Any](\"green\", \"orange\", \"black\", \"white\")), (Any(\"blue\"))) == (false));\n    assert(checkElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (Any(7l))) == (false));\n    assert(checkElement((List[Any](\"green\", \"green\", \"green\", \"green\")), (Any(\"green\"))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    def textMatchTwoThree(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchTwoThree((\"ac\")) == (false));\n    assert(textMatchTwoThree((\"dc\")) == (false));\n    assert(textMatchTwoThree((\"abbbba\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n    def maxSubArraySumRepeated(a : List[Long], n : Long, k : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySumRepeated((List[Long](10l.toLong, 20l.toLong, -30l.toLong, -1l.toLong)), (4l), (3l)) == (30l));\n    assert(maxSubArraySumRepeated((List[Long](-1l.toLong, 10l.toLong, 20l.toLong)), (3l), (2l)) == (59l));\n    assert(maxSubArraySumRepeated((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)), (3l), (3l)) == (-1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_287_square_Sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    def squareSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (20l));\n    assert(squareSum((3l)) == (56l));\n    assert(squareSum((4l)) == (120l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_290_max_length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Tuple2[Long, List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals(((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong)))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals(((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals(((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    def countNoOfWays(n : Long, k : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_292_find", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the third side of a right angled triangle.\n    def othersideRightangle(w : Long, h : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(othersideRightangle((7l), (8l)) == (10.63014581273465f));\n    assert(othersideRightangle((3l), (4l)) == 5l);\n    assert(othersideRightangle((7l), (15l)) == (16.55294535724685f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_294_max_val", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum value in a given heterogeneous list.\n    def maxVal(listval : List[Either[String, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (5l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (25l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (50l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_295_sum_div", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return the sum of all divisors of a number.\n    def sumDiv(number : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumDiv((8l)) == (7l));\n    assert(sumDiv((12l)) == (16l));\n    assert(sumDiv((7l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_297_flatten_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : List[Either[Long, List[Long]]]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(flattenList((List[Either[Long, List[Long]]](0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((List[Either[Long, List[Long]]](List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((List[Either[Long, List[Long]]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Tuple2[String, Long]]) : Tuple2[String, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals(((\"Juan Whelan\", 212l))));\n    assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals(((\"Juan Whelan\", 72l))));\n    assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals(((\"Sabah Colley\", 70l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_304_find_Element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find element at a given index after number of rotations.\n    def findElement(arr : List[Long], ranges : List[List[Long]], rotations : Long, index : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[List[Long]](List[Long](0l.toLong, 2l.toLong), List[Long](0l.toLong, 3l.toLong))), (2l), (1l)) == (3l));\n    assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](0l.toLong, 2l.toLong))), (1l), (2l)) == (3l));\n    assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](0l.toLong, 2l.toLong))), (1l), (1l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_305_start_withp", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : Tuple2[String, String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals(((\"Python\", \"PHP\"))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals(((\"Python\", \"Programming\"))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals(((\"Pqrst\", \"Pqr\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    def maxSumIncreasingSubseq(a : List[Long], n : Long, index : Long, k : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (4l), (6l)) == (11l));\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (2l), (5l)) == (7l));\n    assert(maxSumIncreasingSubseq((List[Long](11l.toLong, 15l.toLong, 19l.toLong, 21l.toLong, 26l.toLong, 28l.toLong, 31l.toLong)), (7l), (2l), (4l)) == (71l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_308_large_product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    def largeProduct(nums1 : List[Long], nums2 : List[Long], N : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (3l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong))));\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (4l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong))));\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (5l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong, 45l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_309_maximum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a given string to a list of characters.\n    def stringToTuple(str1 : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(stringToTuple((\"python 3.0\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"))));\n    assert(stringToTuple((\"item1\")).equals((List[String](\"i\", \"t\", \"e\", \"m\", \"1\"))));\n    assert(stringToTuple((\"15.10\")).equals((List[String](\"1\", \"5\", \".\", \"1\", \"0\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_389_find_lucas", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n'th lucas number.\n    def findLucas(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findLucas((9l)) == (76l));\n    assert(findLucas((4l)) == (7l));\n    assert(findLucas((3l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_390_add_string", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to apply a given format string to all of the elements in a list.\n    def addString(list_ : List[Any], string : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addString((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (\"temp{0}\")).equals((List[String](\"temp1\", \"temp2\", \"temp3\", \"temp4\"))));\n    assert(addString((List[Any](\"a\", \"b\", \"c\", \"d\")), (\"python{0}\")).equals((List[String](\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"))));\n    assert(addString((List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (\"string{0}\")).equals((List[String](\"string5\", \"string6\", \"string7\", \"string8\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert more than one list to nested map.\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Long]) : List[Map[String,Map[String,Long]]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(convertListDictionary((List[String](\"S001\", \"S002\", \"S003\", \"S004\")), (List[String](\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\")), (List[Long](85l.toLong, 98l.toLong, 89l.toLong, 92l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"S001\" -> Map[String,Long](\"Adina Park\" -> 85l)), Map[String,Map[String,Long]](\"S002\" -> Map[String,Long](\"Leyton Marsh\" -> 98l)), Map[String,Map[String,Long]](\"S003\" -> Map[String,Long](\"Duncan Boyle\" -> 89l)), Map[String,Map[String,Long]](\"S004\" -> Map[String,Long](\"Saim Richards\" -> 92l))))));\n    assert(convertListDictionary((List[String](\"abc\", \"def\", \"ghi\", \"jkl\")), (List[String](\"python\", \"program\", \"language\", \"programs\")), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"abc\" -> Map[String,Long](\"python\" -> 100l)), Map[String,Map[String,Long]](\"def\" -> Map[String,Long](\"program\" -> 200l)), Map[String,Map[String,Long]](\"ghi\" -> Map[String,Long](\"language\" -> 300l)), Map[String,Map[String,Long]](\"jkl\" -> Map[String,Long](\"programs\" -> 400l))))));\n    assert(convertListDictionary((List[String](\"A1\", \"A2\", \"A3\", \"A4\")), (List[String](\"java\", \"C\", \"C++\", \"DBMS\")), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"A1\" -> Map[String,Long](\"java\" -> 10l)), Map[String,Map[String,Long]](\"A2\" -> Map[String,Long](\"C\" -> 20l)), Map[String,Map[String,Long]](\"A3\" -> Map[String,Long](\"C++\" -> 30l)), Map[String,Map[String,Long]](\"A4\" -> Map[String,Long](\"DBMS\" -> 40l))))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_393_max_length_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list with maximum length.\n    def maxLengthList(input_list : List[List[Long]]) : Tuple2[Long, List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxLengthList((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals(((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong)))));\n    assert(maxLengthList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong)))).equals(((5l, List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))));\n    assert(maxLengthList((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong)))).equals(((4l, List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_394_check_distinct", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if given list contains no duplicates.\n    def checkDistinct(test_tup : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkDistinct((List[Long](1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong, 4l.toLong))) == (false));\n    assert(checkDistinct((List[Long](1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(checkDistinct((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first non-repeated character in a given string.\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(Some(\"a\")));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(Some(\"c\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_396_check_char", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given string starts and ends with the same character or not.\n    def checkChar(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkChar((\"abba\")).equals((\"Valid\")));\n    assert(checkChar((\"a\")).equals((\"Valid\")));\n    assert(checkChar((\"abcd\")).equals((\"Invalid\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_397_median_numbers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the sum of digits of each number of a given list.\n    def sumOfDigits(nums : List[Any]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfDigits((List[Any](10l.toLong, 2l.toLong, 56l.toLong))) == (14l));\n    assert(sumOfDigits((List[Any](List[Any](10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))) == (19l));\n    assert(sumOfDigits((List[Any](10l.toLong, 20l.toLong, -4l.toLong, 5l.toLong, -70l.toLong))) == (19l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((15l, 6l, 5l, 10l))));\n    assert(bitwiseXor(((11l, 5l, 7l, 10l)), ((6l, 3l, 4l, 4l))).equals(((13l, 6l, 3l, 14l))));\n    assert(bitwiseXor(((12l, 6l, 8l, 11l)), ((7l, 4l, 5l, 6l))).equals(((11l, 2l, 13l, 13l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_400_extract_freq", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Tuple2[Long, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Tuple2[Long, Long]]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Tuple2[Long, Long]]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Tuple2[Long, Long]]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise addition of list elements in the given two nested lists.\n    def addNestedTuples(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addNestedTuples((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](7l.toLong, 10l.toLong), List[Long](7l.toLong, 14l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](8l.toLong, 13l.toLong)))));\n    assert(addNestedTuples((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](9l.toLong, 12l.toLong), List[Long](9l.toLong, 16l.toLong), List[Long](5l.toLong, 12l.toLong), List[Long](10l.toLong, 15l.toLong)))));\n    assert(addNestedTuples((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](11l.toLong, 14l.toLong), List[Long](11l.toLong, 18l.toLong), List[Long](7l.toLong, 14l.toLong), List[Long](12l.toLong, 17l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_404_minimum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum of two numbers.\n    def minimum(a : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minimum((1l), (2l)) == (1l));\n    assert(minimum((-5l), (-4l)) == (-5l));\n    assert(minimum((0l), (0l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether an element exists within a tuple.\n    def checkTuplex(tuplex : List[Either[String, Long]], tuple1 : Any) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(\"r\"))) == (true));\n    assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(\"5\"))) == (false));\n    assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(3l))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_406_find_Parity", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n    def kSmallestPairs(nums1 : List[Long], nums2 : List[Long], k : Long) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (2l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 4l.toLong)))));\n    assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (1l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong)))));\n    assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (7l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 4l.toLong), List[Long](3l.toLong, 2l.toLong), List[Long](1l.toLong, 6l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](7l.toLong, 2l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum product from the pairs of tuples within a given list.\n    def minProductTuple(list1 : List[Tuple2[Long, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minProductTuple((List[Tuple2[Long, Long]]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (8l));\n    assert(minProductTuple((List[Tuple2[Long, Long]]((10l, 20l), (15l, 2l), (5l, 10l)))) == (30l));\n    assert(minProductTuple((List[Tuple2[Long, Long]]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (100l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_410_min_val", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum value in a given heterogeneous list.\n    def minVal(listval : List[Either[String, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (2l));\n    assert(minVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (15l));\n    assert(minVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (20l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_412_remove_odd", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the nth element from a given list of tuples.\n    def extractNthElement(list1 : List[Tuple2[String, Long, Long]], n : Long) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (0l)).equals((List[Any](\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"))));\n    assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (2l)).equals((List[Any](99l.toLong, 96l.toLong, 94l.toLong, 98l.toLong))));\n    assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (1l)).equals((List[Any](98l.toLong, 97l.toLong, 91l.toLong, 94l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_414_overlapping", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether any value in a sequence exists in a sequence or not.\n    def overlapping(list1 : List[Long], list2 : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))) == (false));\n    assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(overlapping((List[Long](1l.toLong, 4l.toLong, 5l.toLong)), (List[Long](1l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_415_max_Product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Tuple2[Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))).equals(((7l, 8l))));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))).equals(((-4l, -6l))));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals(((2l, 3l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_417_group_tuples", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find common first element in given list of lists.\n    def groupTuples(Input : List[List[String]]) : List[List[String]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(groupTuples((List[List[String]](List[String](\"x\", \"y\"), List[String](\"x\", \"z\"), List[String](\"w\", \"t\")))).equals((List[List[String]](List[String](\"x\", \"y\", \"z\"), List[String](\"w\", \"t\")))));\n    assert(groupTuples((List[List[String]](List[String](\"a\", \"b\"), List[String](\"a\", \"c\"), List[String](\"d\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\", \"c\"), List[String](\"d\", \"e\")))));\n    assert(groupTuples((List[List[String]](List[String](\"f\", \"g\"), List[String](\"f\", \"g\"), List[String](\"h\", \"i\")))).equals((List[List[String]](List[String](\"f\", \"g\", \"g\"), List[String](\"h\", \"i\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_418_Find_Max", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element of a list having maximum length.\n    def FindMax(lst : List[List[Any]]) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(FindMax((List[List[Any]](List[String](\"A\"), List[String](\"A\", \"B\"), List[String](\"A\", \"B\", \"C\")))).equals((List[Any](\"A\", \"B\", \"C\"))));\n    assert(FindMax((List[List[Any]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Any](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(FindMax((List[List[Any]](List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong)))).equals((List[Any](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    def roundAndSum(list1 : List[Either[Float, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(roundAndSum((List[Either[Float, Long]](22.4f.toFloat, 4.0f.toFloat, -16.22f.toFloat, -9.1f.toFloat, 11.0f.toFloat, -12.22f.toFloat, 14.2f.toFloat, -5.2f.toFloat, 17.5f.toFloat))) == (243l));\n    assert(roundAndSum((List[Either[Float, Long]](5l.toLong, 2l.toLong, 9l.toLong, 24.3f.toLong, 29l.toLong))) == (345l));\n    assert(roundAndSum((List[Either[Float, Long]](25.0f.toFloat, 56.7f.toFloat, 89.2f.toFloat))) == (513l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the cube sum of first n even natural numbers.\n    def cubeSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(cubeSum((2l)) == (72l));\n    assert(cubeSum((3l)) == (288l));\n    assert(cubeSum((4l)) == (800l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Tuple2[String, String, Long, String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple(((\"ID\", \"is\", 4l, \"UTS\"))).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple(((\"QWE\", \"is\", 4l, \"RTY\"))).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple(((\"ZEN\", \"is\", 4l, \"OP\"))).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the average of cubes of first n natural numbers.\n    def findAverageOfCube(n : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findAverageOfCube((2l)) == (4.5f));\n    assert(findAverageOfCube((3l)) == 12l);\n    assert(findAverageOfCube((1l)) == 1l);\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_424_extract_rear", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : Tuple2[String, String, String]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractRear(((\"Mers\", \"for\", \"Vers\"))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear(((\"Avenge\", \"for\", \"People\"))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear(((\"Gotta\", \"get\", \"go\"))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of sublists containing a particular element.\n    def countElementInList(list1 : List[List[Any]], x : Any) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countElementInList((List[List[Any]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 11l.toLong), List[Long](1l.toLong, 15l.toLong, 7l.toLong))), (Any(1l))) == (3l));\n    assert(countElementInList((List[List[Any]](List[String](\"A\", \"B\"), List[String](\"A\", \"C\"), List[String](\"A\", \"D\", \"E\"), List[String](\"B\", \"C\", \"D\"))), (Any(\"A\"))) == (3l));\n    assert(countElementInList((List[List[Any]](List[String](\"A\", \"B\"), List[String](\"A\", \"C\"), List[String](\"A\", \"D\", \"E\"), List[String](\"B\", \"C\", \"D\"))), (Any(\"E\"))) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_427_change_date_format", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    def changeDateFormat(dt : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(changeDateFormat((\"2026-01-02\")).equals((\"02-01-2026\")));\n    assert(changeDateFormat((\"2020-11-13\")).equals((\"13-11-2020\")));\n    assert(changeDateFormat((\"2021-04-26\")).equals((\"26-04-2021\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_428_shell_sort", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given list by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_429_and_tuples", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(andTuples(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((0l, 0l, 2l, 1l))));\n    assert(andTuples(((1l, 2l, 3l, 4l)), ((5l, 6l, 7l, 8l))).equals(((1l, 2l, 3l, 0l))));\n    assert(andTuples(((8l, 9l, 11l, 12l)), ((7l, 13l, 14l, 17l))).equals(((0l, 9l, 10l, 0l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the directrix of a parabola.\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_431_common_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    def commonElement(list1 : List[Any], list2 : List[Any]) : Option[Boolean] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(commonElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(Some(true)));\n    assert(commonElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(None));\n    assert(commonElement((List[Any](\"a\", \"b\", \"c\")), (List[Any](\"d\", \"b\", \"e\"))).equals(Some(true)));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median length of a trapezium.\n    def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(medianTrapezium((15l), (25l), (35l)) == 20l);\n    assert(medianTrapezium((10l), (20l), (30l)) == 15l);\n    assert(medianTrapezium((6l), (9l), (4l)) == (7.5f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_433_check_greater", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the entered number is greater than the elements of the given list.\n    def checkGreater(arr : List[Long], number : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkGreater((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (4l)) == (false));\n    assert(checkGreater((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (8l)) == (true));\n    assert(checkGreater((List[Long](9l.toLong, 7l.toLong, 4l.toLong, 8l.toLong, 6l.toLong, 1l.toLong)), (11l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_434_text_match_one", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an a followed by one or more b's.\n    def textMatchOne(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchOne((\"ac\")) == (false));\n    assert(textMatchOne((\"dc\")) == (false));\n    assert(textMatchOne((\"abba\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_435_last_Digit", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last digit of a given number.\n    def lastDigit(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigit((123l)) == (3l));\n    assert(lastDigit((25l)) == (5l));\n    assert(lastDigit((30l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_436_neg_nos", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_437_remove_odd", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove odd characters in a string.\n    def removeOdd(str1 : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((\"python\")).equals((\"yhn\")));\n    assert(removeOdd((\"program\")).equals((\"rga\")));\n    assert(removeOdd((\"language\")).equals((\"agae\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count bidirectional tuple pairs.\n    def countBidirectional(test_list : List[Tuple2[Long, Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (3l));\n    assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 3l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (2l));\n    assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 2l), (6l, 5l), (2l, 1l)))) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to join a list of multiple integers into a single integer.\n    def multipleToSingle(L : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(multipleToSingle((List[Long](11l.toLong, 33l.toLong, 50l.toLong))) == (113350l));\n    assert(multipleToSingle((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (-123456l));\n    assert(multipleToSingle((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong))) == (10152025l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Tuple2[Long, Long, String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals(((0l, 7l, \"clearly\"))));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals(((0l, 9l, \"seriously\"))));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals(((0l, 13l, \"unfortunately\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the surface area of a cube of a given size.\n    def surfaceareaCube(l : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceareaCube((5l)) == (150l));\n    assert(surfaceareaCube((3l)) == (54l));\n    assert(surfaceareaCube((10l)) == (600l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_442_positive_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in a list of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_443_largest_neg", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest negative number from the given list.\n    def largestNeg(list1 : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -4l.toLong, -6l.toLong))) == (-6l));\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -8l.toLong, -9l.toLong))) == (-9l));\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to trim each list by k in the given lists.\n    def trimTuple(test_list : List[List[Long]], K : Long) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(trimTuple((List[List[Long]](List[Long](5l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 4l.toLong), List[Long](3l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 1l.toLong), List[Long](9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong), List[Long](4l.toLong, 8l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))), (2l)).equals((List[List[Long]](List[Long](2l.toLong), List[Long](9l.toLong), List[Long](2l.toLong), List[Long](2l.toLong)))));\n    assert(trimTuple((List[List[Long]](List[Long](5l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 4l.toLong), List[Long](3l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 1l.toLong), List[Long](9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong), List[Long](4l.toLong, 8l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))), (1l)).equals((List[List[Long]](List[Long](3l.toLong, 2l.toLong, 1l.toLong), List[Long](4l.toLong, 9l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](8l.toLong, 2l.toLong, 1l.toLong)))));\n    assert(trimTuple((List[List[Long]](List[Long](7l.toLong, 8l.toLong, 4l.toLong, 9l.toLong), List[Long](11l.toLong, 8l.toLong, 12l.toLong, 4l.toLong), List[Long](4l.toLong, 1l.toLong, 7l.toLong, 8l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 7l.toLong))), (1l)).equals((List[List[Long]](List[Long](8l.toLong, 4l.toLong), List[Long](8l.toLong, 12l.toLong), List[Long](1l.toLong, 7l.toLong), List[Long](6l.toLong, 9l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise multiplication of list elements in the given two lists.\n    def indexMultiplication(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(indexMultiplication((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](6l.toLong, 21l.toLong), List[Long](12l.toLong, 45l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](7l.toLong, 30l.toLong)))));\n    assert(indexMultiplication((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](14l.toLong, 32l.toLong), List[Long](20l.toLong, 60l.toLong), List[Long](6l.toLong, 20l.toLong), List[Long](16l.toLong, 44l.toLong)))));\n    assert(indexMultiplication((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](24l.toLong, 45l.toLong), List[Long](30l.toLong, 77l.toLong), List[Long](12l.toLong, 33l.toLong), List[Long](27l.toLong, 60l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the occurence of all elements of list in a tuple.\n    def countOccurrence(tup : Any, lst : List[Any]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurrence((Any((\"a\", \"a\", \"c\", \"b\", \"d\"))), (List[Any](\"a\", \"b\"))) == (3l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l))), (List[Any](1l.toLong, 4l.toLong, 7l.toLong))) == (6l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 4l, 5l, 6l))), (List[Any](1l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_447_cube_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find cubes of individual elements in a list.\n    def cubeNums(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(cubeNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 27l.toLong, 64l.toLong, 125l.toLong, 216l.toLong, 343l.toLong, 512l.toLong, 729l.toLong, 1000l.toLong))));\n    assert(cubeNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(cubeNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](1728l.toLong, 3375l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_448_cal_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of perrin numbers.\n    def calSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(calSum((9l)) == (49l));\n    assert(calSum((10l)) == (66l));\n    assert(calSum((11l)) == (88l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_450_extract_string", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all whitespaces from the given string.\n    def removeWhitespaces(text1 : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeWhitespaces((\" Google    Flutter \")).equals((\"GoogleFlutter\")));\n    assert(removeWhitespaces((\" Google    Dart \")).equals((\"GoogleDart\")));\n    assert(removeWhitespaces((\" iOS    Swift \")).equals((\"iOSSwift\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_452_loss_amount", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    def lossAmount(actual_cost : Long, sale_amount : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lossAmount((1500l), (1200l)) == (0l));\n    assert(lossAmount((100l), (200l)) == (100l));\n    assert(lossAmount((2000l), (5000l)) == (3000l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of even factors of a number.\n    def sumofFactors(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumofFactors((18l)) == (26l));\n    assert(sumofFactors((30l)) == (48l));\n    assert(sumofFactors((6l)) == (8l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a word containing 'z'.\n    def textMatchWordz(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordz((\"pythonz.\")) == (true));\n    assert(textMatchWordz((\"xyz.\")) == (true));\n    assert(textMatchWordz((\"  lang  .\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given month number contains 31 days or not.\n    def checkMonthnumbNumber(monthnum2 : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkMonthnumbNumber((5l)) == (true));\n    assert(checkMonthnumbNumber((2l)) == (false));\n    assert(checkMonthnumbNumber((6l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse each string in a given list of string values.\n    def reverseStringList(stringlist : List[String]) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(reverseStringList((List[String](\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"))).equals((List[String](\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"))));\n    assert(reverseStringList((List[String](\"john\", \"amal\", \"joel\", \"george\"))).equals((List[String](\"nhoj\", \"lama\", \"leoj\", \"egroeg\"))));\n    assert(reverseStringList((List[String](\"jack\", \"john\", \"mary\"))).equals((List[String](\"kcaj\", \"nhoj\", \"yram\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_457_Find_Min", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sublist having minimum length.\n    def FindMin(lst : List[List[Any]]) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(FindMin((List[List[Any]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Any](1l.toLong))));\n    assert(FindMin((List[List[Any]](List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 7l.toLong, 8l.toLong)))).equals((List[Any](1l.toLong, 1l.toLong))));\n    assert(FindMin((List[List[Any]](List[String](\"x\"), List[String](\"x\", \"y\"), List[String](\"x\", \"y\", \"z\")))).equals((List[Any](\"x\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the area of a rectangle.\n    def rectangleArea(l : Long, b : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rectangleArea((10l), (20l)) == (200l));\n    assert(rectangleArea((10l), (5l)) == (50l));\n    assert(rectangleArea((4l), (2l)) == (8l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uppercase substrings from a given string.\n    def removeUppercase(str1 : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeUppercase((\"cAstyoUrFavoRitETVshoWs\")).equals((\"cstyoravoitshos\")));\n    assert(removeUppercase((\"wAtchTheinTernEtrAdIo\")).equals((\"wtchheinerntrdo\")));\n    assert(removeUppercase((\"VoicESeaRchAndreComMendaTionS\")).equals((\"oiceachndreomendaion\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_460_Extract", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to get the first element of each sublist.\n    def Extract(lst : List[List[Long]]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 3l.toLong, 6l.toLong))));\n    assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))).equals((List[Long](1l.toLong, 4l.toLong))));\n    assert(Extract((List[List[Long]](List[Long](9l.toLong, 8l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong)))).equals((List[Long](9l.toLong, 1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the upper case characters in a given string.\n    def upperCtr(str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(upperCtr((\"PYthon\")) == (1l));\n    assert(upperCtr((\"BigData\")) == (1l));\n    assert(upperCtr((\"program\")) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_462_combinations_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find all possible combinations of the elements of a given list.\n    def combinationsList(list1 : List[String]) : List[Either[List[None], List[String]]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(combinationsList((List[String](\"orange\", \"red\", \"green\", \"blue\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"orange\"), List[String](\"red\"), List[String](\"red\", \"orange\"), List[String](\"green\"), List[String](\"green\", \"orange\"), List[String](\"green\", \"red\"), List[String](\"green\", \"red\", \"orange\"), List[String](\"blue\"), List[String](\"blue\", \"orange\"), List[String](\"blue\", \"red\"), List[String](\"blue\", \"red\", \"orange\"), List[String](\"blue\", \"green\"), List[String](\"blue\", \"green\", \"orange\"), List[String](\"blue\", \"green\", \"red\"), List[String](\"blue\", \"green\", \"red\", \"orange\")))));\n    assert(combinationsList((List[String](\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"red\"), List[String](\"green\"), List[String](\"green\", \"red\"), List[String](\"blue\"), List[String](\"blue\", \"red\"), List[String](\"blue\", \"green\"), List[String](\"blue\", \"green\", \"red\"), List[String](\"white\"), List[String](\"white\", \"red\"), List[String](\"white\", \"green\"), List[String](\"white\", \"green\", \"red\"), List[String](\"white\", \"blue\"), List[String](\"white\", \"blue\", \"red\"), List[String](\"white\", \"blue\", \"green\"), List[String](\"white\", \"blue\", \"green\", \"red\"), List[String](\"black\"), List[String](\"black\", \"red\"), List[String](\"black\", \"green\"), List[String](\"black\", \"green\", \"red\"), List[String](\"black\", \"blue\"), List[String](\"black\", \"blue\", \"red\"), List[String](\"black\", \"blue\", \"green\"), List[String](\"black\", \"blue\", \"green\", \"red\"), List[String](\"black\", \"white\"), List[String](\"black\", \"white\", \"red\"), List[String](\"black\", \"white\", \"green\"), List[String](\"black\", \"white\", \"green\", \"red\"), List[String](\"black\", \"white\", \"blue\"), List[String](\"black\", \"white\", \"blue\", \"red\"), List[String](\"black\", \"white\", \"blue\", \"green\"), List[String](\"black\", \"white\", \"blue\", \"green\", \"red\"), List[String](\"orange\"), List[String](\"orange\", \"red\"), List[String](\"orange\", \"green\"), List[String](\"orange\", \"green\", \"red\"), List[String](\"orange\", \"blue\"), List[String](\"orange\", \"blue\", \"red\"), List[String](\"orange\", \"blue\", \"green\"), List[String](\"orange\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"white\"), List[String](\"orange\", \"white\", \"red\"), List[String](\"orange\", \"white\", \"green\"), List[String](\"orange\", \"white\", \"green\", \"red\"), List[String](\"orange\", \"white\", \"blue\"), List[String](\"orange\", \"white\", \"blue\", \"red\"), List[String](\"orange\", \"white\", \"blue\", \"green\"), List[String](\"orange\", \"white\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"black\"), List[String](\"orange\", \"black\", \"red\"), List[String](\"orange\", \"black\", \"green\"), List[String](\"orange\", \"black\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"blue\"), List[String](\"orange\", \"black\", \"blue\", \"red\"), List[String](\"orange\", \"black\", \"blue\", \"green\"), List[String](\"orange\", \"black\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"white\"), List[String](\"orange\", \"black\", \"white\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"green\"), List[String](\"orange\", \"black\", \"white\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"blue\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"green\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\")))));\n    assert(combinationsList((List[String](\"red\", \"green\", \"black\", \"orange\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"red\"), List[String](\"green\"), List[String](\"green\", \"red\"), List[String](\"black\"), List[String](\"black\", \"red\"), List[String](\"black\", \"green\"), List[String](\"black\", \"green\", \"red\"), List[String](\"orange\"), List[String](\"orange\", \"red\"), List[String](\"orange\", \"green\"), List[String](\"orange\", \"green\", \"red\"), List[String](\"orange\", \"black\"), List[String](\"orange\", \"black\", \"red\"), List[String](\"orange\", \"black\", \"green\"), List[String](\"orange\", \"black\", \"green\", \"red\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_464_check_value", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all values are same in a map.\n    def checkValue(dict : Map[String,Long], n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (10l)) == (false));\n    assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (12l)) == (true));\n    assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (5l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_465_drop_empty", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_468_max_product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n    def maxProduct(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong, 150l.toLong, 6l.toLong))) == (3000l));\n    assert(maxProduct((List[Long](4l.toLong, 42l.toLong, 55l.toLong, 68l.toLong, 80l.toLong))) == (50265600l));\n    assert(maxProduct((List[Long](10l.toLong, 22l.toLong, 9l.toLong, 33l.toLong, 21l.toLong, 50l.toLong, 41l.toLong, 60l.toLong))) == (2460l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Tuple2[Long, Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addPairwise(((1l, 5l, 7l, 8l, 10l))).equals(((6l, 12l, 15l, 18l))));\n    assert(addPairwise(((2l, 6l, 8l, 9l, 11l))).equals(((8l, 14l, 17l, 20l))));\n    assert(addPairwise(((3l, 7l, 9l, 10l, 12l))).equals(((10l, 16l, 19l, 22l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_471_find_remainder", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the product of the list multiplication modulo n.\n    def findRemainder(arr : List[Long], n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findRemainder((List[Long](100l.toLong, 10l.toLong, 5l.toLong, 25l.toLong, 35l.toLong, 14l.toLong)), (11l)) == (9l));\n    assert(findRemainder((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (1l)) == (0l));\n    assert(findRemainder((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (2l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_474_replace_char", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace characters in a string.\n    def replaceChar(str1 : String, ch : String, newch : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(replaceChar((\"polygon\"), (\"y\"), (\"l\")).equals((\"pollgon\")));\n    assert(replaceChar((\"character\"), (\"c\"), (\"a\")).equals((\"aharaater\")));\n    assert(replaceChar((\"python\"), (\"l\"), (\"a\")).equals((\"python\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_475_sort_counter", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a map by value.\n    def sortCounter(dict1 : Map[String,Long]) : List[Tuple2[String, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortCounter((Map[String,Long](\"Math\" -> 81l, \"Physics\" -> 83l, \"Chemistry\" -> 87l))).equals((List[Tuple2[String, Long]]((\"Chemistry\", 87l), (\"Physics\", 83l), (\"Math\", 81l)))));\n    assert(sortCounter((Map[String,Long](\"Math\" -> 400l, \"Physics\" -> 300l, \"Chemistry\" -> 250l))).equals((List[Tuple2[String, Long]]((\"Math\", 400l), (\"Physics\", 300l), (\"Chemistry\", 250l)))));\n    assert(sortCounter((Map[String,Long](\"Math\" -> 900l, \"Physics\" -> 1000l, \"Chemistry\" -> 1250l))).equals((List[Tuple2[String, Long]]((\"Chemistry\", 1250l), (\"Physics\", 1000l), (\"Math\", 900l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_476_big_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the largest and smallest value in a given list.\n    def bigSum(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(bigSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (4l));\n    assert(bigSum((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(bigSum((List[Long](2l.toLong, 3l.toLong, 6l.toLong))) == (8l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_477_is_lower", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to convert the given string to lower case.\n    def isLower(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isLower((\"InValid\")).equals((\"invalid\")));\n    assert(isLower((\"TruE\")).equals((\"true\")));\n    assert(isLower((\"SenTenCE\")).equals((\"sentence\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove lowercase substrings from a given string.\n    def removeLowercase(str1 : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeLowercase((\"PYTHon\")).equals((\"PYTH\")));\n    assert(removeLowercase((\"FInD\")).equals((\"FID\")));\n    assert(removeLowercase((\"STRinG\")).equals((\"STRG\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_479_first_Digit", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first digit of a given number.\n    def firstDigit(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(firstDigit((123l)) == (1l));\n    assert(firstDigit((456l)) == (4l));\n    assert(firstDigit((12l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_554_Split", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of integers and only returns the odd ones.\n    def Split(list : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(Split((List[Long](10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong))).equals((List[Long](11l.toLong, 13l.toLong))));\n    assert(Split((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](7l.toLong, 9l.toLong, 1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_555_difference", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    def difference(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(difference((3l)) == (30l));\n    assert(difference((5l)) == (210l));\n    assert(difference((2l)) == (6l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_557_toggle_string", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to toggle the case of all characters in a string.\n    def toggleString(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(toggleString((\"Python\")).equals((\"pYTHON\")));\n    assert(toggleString((\"Pangram\")).equals((\"pANGRAM\")));\n    assert(toggleString((\"LIttLE\")).equals((\"liTTle\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the per-digit difference between two integers.\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_560_union_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the union of the elements of two given lists and output them in sorted order.\n    def unionElements(test_tup1 : List[Long], test_tup2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(unionElements((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](5l.toLong, 7l.toLong, 4l.toLong, 10l.toLong))).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 10l.toLong))));\n    assert(unionElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(unionElements((List[Long](11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (List[Long](13l.toLong, 15l.toLong, 16l.toLong, 17l.toLong))).equals((List[Long](11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong, 17l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the length of the longest sublists.\n    def FindMaxLength(lst : List[List[Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(FindMaxLength((List[List[Long]](List[Long](1l.toLong), List[Long](1l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (4l));\n    assert(FindMaxLength((List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](3l.toLong, 2l.toLong, 1l.toLong)))) == (3l));\n    assert(FindMaxLength((List[List[Long]](List[Long](7l.toLong), List[Long](22l.toLong, 23l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong)))) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_563_extract_values", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract values between quotation marks from a string.\n    def extractValues(text : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((List[String](\"Python\", \"PHP\", \"Java\"))));\n    assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((List[String](\"python\", \"program\", \"language\"))));\n    assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((List[String](\"red\", \"blue\", \"green\", \"yellow\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_565_split", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to split a string into characters.\n    def split(word : String) : List[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_566_sum_digits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get the sum of the digits of a non-negative integer.\n    def sumDigits(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumDigits((345l)) == (12l));\n    assert(sumDigits((12l)) == (3l));\n    assert(sumDigits((97l)) == (16l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_567_issort_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a specified list is sorted or not.\n    def issortList(list1 : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 17l.toLong))) == (true));\n    assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 20l.toLong, 17l.toLong))) == (false));\n    assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 15l.toLong, 14l.toLong, 20l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_568_empty_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create a list of N empty dictionaries.\n    def emptyList(length : Long) : List[Map[None,None]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(emptyList((5l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));\n    assert(emptyList((6l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));\n    assert(emptyList((7l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove duplicate numbers from a given number of lists.\n    def twoUniqueNums(nums : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_573_unique_product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the surface area of a cylinder.\n    def surfaceareaCylinder(r : Long, h : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceareaCylinder((10l), (5l)) == (942.45f));\n    assert(surfaceareaCylinder((4l), (5l)) == (226.18800000000002f));\n    assert(surfaceareaCylinder((4l), (10l)) == (351.848f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list is sublist of another or not.\n    def isSubArray(A : List[Long], B : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isSubArray((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)), (List[Long](1l.toLong, 2l.toLong))) == (false));\n    assert(isSubArray((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (true));\n    assert(isSubArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong)), (List[Long](2l.toLong, 2l.toLong, 0l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last digit in factorial of a given number.\n    def lastDigitFactorial(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigitFactorial((4l)) == (4l));\n    assert(lastDigitFactorial((21l)) == (0l));\n    assert(lastDigitFactorial((30l)) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to interleave 3 lists of the same length into a single flat list.\n    def interleaveLists(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(interleaveLists((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong)), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong, 500l.toLong, 600l.toLong, 700l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 100l.toLong, 2l.toLong, 20l.toLong, 200l.toLong, 3l.toLong, 30l.toLong, 300l.toLong, 4l.toLong, 40l.toLong, 400l.toLong, 5l.toLong, 50l.toLong, 500l.toLong, 6l.toLong, 60l.toLong, 600l.toLong, 7l.toLong, 70l.toLong, 700l.toLong))));\n    assert(interleaveLists((List[Long](10l.toLong, 20l.toLong)), (List[Long](15l.toLong, 2l.toLong)), (List[Long](5l.toLong, 10l.toLong))).equals((List[Long](10l.toLong, 15l.toLong, 5l.toLong, 20l.toLong, 2l.toLong, 10l.toLong))));\n    assert(interleaveLists((List[Long](11l.toLong, 44l.toLong)), (List[Long](10l.toLong, 15l.toLong)), (List[Long](20l.toLong, 5l.toLong))).equals((List[Long](11l.toLong, 10l.toLong, 20l.toLong, 44l.toLong, 15l.toLong, 5l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findDissimilar(((3l, 4l, 5l, 6l)), ((5l, 7l, 4l, 10l))).equals(((3l, 6l, 7l, 10l))));\n    assert(findDissimilar(((1l, 2l, 3l, 4l)), ((7l, 2l, 3l, 9l))).equals(((1l, 4l, 7l, 9l))));\n    assert(findDissimilar(((21l, 11l, 25l, 26l)), ((26l, 34l, 21l, 36l))).equals(((34l, 36l, 11l, 25l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_580_extract_even", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Tuple2[Long, Long, Tuple2[Long, Long, Tuple2[Long, Long]], Long, Long]) : Any = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractEven(((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l))).equals((Any(6l, (2l, 4l)), 6l, 8l))));\n    assert(extractEven(((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l))).equals((Any(8l, (4l, 8l))))));\n    assert(extractEven(((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l))).equals((Any(8l, (4l, 6l)), 8l, 10l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_581_surface_Area", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the surface area of a square scalaramid with a given base edge and height.\n    def surfaceArea(b : Long, s : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceArea((3l), (4l)) == (33l));\n    assert(surfaceArea((4l), (5l)) == (56l));\n    assert(surfaceArea((1l), (2l)) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_583_catalan_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb ending with ly and its positions in a given string.\n    def findAdverbs(text : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbs((\"Clearly, he has no excuse for such behavior.\")).equals((\"0-7: Clearly\")));\n    assert(findAdverbs((\"Please handle the situation carefuly\")).equals((\"28-36: carefuly\")));\n    assert(findAdverbs((\"Complete the task quickly\")).equals((\"18-25: quickly\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_585_expensive_items", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n most expensive items in a given dataset.\n    def expensiveItems(items : List[Map[String,Either[String, Float]]], n : Long) : List[Map[String,Either[String, Float]]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f))), (2l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f)))));\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f), Map[String,String](\"name\" -> \"Item-4\", \"price\" -> 22.75f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_586_split_Arr", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to split a list at the nth eelment and add the first part to the end.\n    def splitArr(l : List[Long], n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(splitArr((List[Long](12l.toLong, 10l.toLong, 5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong)), (2l)).equals((List[Long](5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong, 12l.toLong, 10l.toLong))));\n    assert(splitArr((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(splitArr((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (3l)).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 0l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_587_list_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a list to a tuple.\n    def listTuple(listx : List[Long]) : Any = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(listTuple((List[Long](5l.toLong, 10l.toLong, 7l.toLong, 4l.toLong, 15l.toLong, 3l.toLong))).equals((Any((5l, 10l, 7l, 4l, 15l, 3l)))));\n    assert(listTuple((List[Long](2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 7l.toLong))).equals((Any((2l, 4l, 5l, 6l, 2l, 3l, 4l, 4l, 7l)))));\n    assert(listTuple((List[Long](58l.toLong, 44l.toLong, 56l.toLong))).equals((Any((58l, 44l, 56l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_588_big_diff", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the difference between largest and smallest value in a given list.\n    def bigDiff(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(bigDiff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(bigDiff((List[Long](4l.toLong, 5l.toLong, 12l.toLong))) == (8l));\n    assert(bigDiff((List[Long](9l.toLong, 2l.toLong, 3l.toLong))) == (7l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find perfect squares between two given numbers.\n    def perfectSquares(a : Long, b : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(perfectSquares((1l), (30l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong))));\n    assert(perfectSquares((50l), (100l)).equals((List[Long](64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(perfectSquares((100l), (200l)).equals((List[Long](100l.toLong, 121l.toLong, 144l.toLong, 169l.toLong, 196l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_591_swap_List", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](12l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 24l.toLong))).equals((List[Long](24l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 12l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the product of consecutive binomial co-efficients.\n    def sumOfProduct(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfProduct((3l)) == (15l));\n    assert(sumOfProduct((4l)) == (56l));\n    assert(sumOfProduct((1l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the difference of the first even and first odd number of a given list.\n    def diffEvenOdd(list1 : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(diffEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (3l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (1l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (9l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    def minSwaps(str1 : String, str2 : String) : Any = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Any(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Any(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Any(\"Not Possible\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_597_find_kth", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_599_sum_average", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find sum and average of first n natural numbers.\n    def sumAverage(number : Long) : Tuple2[Long, Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumAverage((10l)).equals(((55l, 5.5f))));\n    assert(sumAverage((15l)).equals(((120l, 8.0f))));\n    assert(sumAverage((20l)).equals(((210l, 10.5f))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_600_is_Even", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number is even or not.\n    def isEven(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isEven((1l)) == (false));\n    assert(isEven((2l)) == (true));\n    assert(isEven((3l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first repeated character in a given string.\n    def firstRepeatedChar(str1 : String) : Option[String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(firstRepeatedChar((\"abcabc\")).equals(Some(\"a\")));\n    assert(firstRepeatedChar((\"abc\")).equals(None));\n    assert(firstRepeatedChar((\"123123\")).equals(Some(\"1\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_603_get_ludic", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get all lucid numbers smaller than or equal to a given integer.\n    def getLudic(n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getLudic((10l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(getLudic((25l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 23l.toLong, 25l.toLong))));\n    assert(getLudic((45l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 23l.toLong, 25l.toLong, 29l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_604_reverse_words", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_605_prime_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given integer is a prime number.\n    def primeNum(num : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(primeNum((13l)) == (true));\n    assert(primeNum((7l)) == (true));\n    assert(primeNum((-1010l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_606_radian_degree", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert degrees to radians.\n    def radianDegree(degree : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(radianDegree((90l)) == (1.5707963267948966f));\n    assert(radianDegree((60l)) == (1.0471975511965976f));\n    assert(radianDegree((120l)) == (2.0943951023931953f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_607_find_literals", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Tuple2[String, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals(((\"fox\", 16l, 19l))));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals(((\"crazy\", 16l, 21l))));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals(((\"will\", 35l, 39l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_608_bell_Number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find nth bell number.\n    def bellNumber(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((3l)) == (5l));\n    assert(bellNumber((4l)) == (15l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list and returns a list with the same elements, but the k'th element removed.\n    def removeKthElement(list1 : List[Long], L : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeKthElement((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))));\n    assert(removeKthElement((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong)), (4l)).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))));\n    assert(removeKthElement((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong)), (5l)).equals((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    def maxOfNth(test_list : List[List[Long]], N : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxOfNth((List[List[Long]](List[Long](5l.toLong, 6l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong, 5l.toLong), List[Long](8l.toLong, 9l.toLong, 19l.toLong))), (2l)) == (19l));\n    assert(maxOfNth((List[List[Long]](List[Long](6l.toLong, 7l.toLong, 8l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong), List[Long](9l.toLong, 10l.toLong, 20l.toLong))), (1l)) == (10l));\n    assert(maxOfNth((List[List[Long]](List[Long](7l.toLong, 8l.toLong, 9l.toLong), List[Long](3l.toLong, 5l.toLong, 7l.toLong), List[Long](10l.toLong, 11l.toLong, 21l.toLong))), (1l)) == (11l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_612_merge", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    def merge(lst : List[List[Any]]) : List[List[Any]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(merge((List[List[Any]](List[String](\"x\", \"y\"), List[String](\"a\", \"b\"), List[String](\"m\", \"n\")))).equals((List[List[Any]](List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\")))));\n    assert(merge((List[List[Any]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong)))).equals((List[List[Any]](List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)))));\n    assert(merge((List[List[Any]](List[String](\"x\", \"y\", \"z\"), List[String](\"a\", \"b\", \"c\"), List[String](\"m\", \"n\", \"o\")))).equals((List[List[Any]](List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\"), List[String](\"z\", \"c\", \"o\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    def cummulativeSum(test_list : List[List[Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(cummulativeSum((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong), List[Long](2l.toLong, 6l.toLong)))) == (30l));\n    assert(cummulativeSum((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong), List[Long](3l.toLong, 7l.toLong)))) == (37l));\n    assert(cummulativeSum((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong), List[Long](4l.toLong, 8l.toLong)))) == (44l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_615_average_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    def averageTuple(nums : List[List[Long]]) : List[Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(averageTuple((List[List[Long]](List[Long](10l.toLong, 10l.toLong, 10l.toLong, 12l.toLong), List[Long](30l.toLong, 45l.toLong, 56l.toLong, 45l.toLong), List[Long](81l.toLong, 80l.toLong, 39l.toLong, 32l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple((List[List[Long]](List[Long](1l.toLong, 1l.toLong, -5l.toLong), List[Long](30l.toLong, -15l.toLong, 56l.toLong), List[Long](81l.toLong, -60l.toLong, -39l.toLong), List[Long](-10l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple((List[List[Long]](List[Long](100l.toLong, 100l.toLong, 100l.toLong, 120l.toLong), List[Long](300l.toLong, 450l.toLong, 560l.toLong, 450l.toLong), List[Long](810l.toLong, 800l.toLong, 390l.toLong, 320l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes two tuples of the same length and performs the element wise modulo.\n    def tupleModulo(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tupleModulo(((10l, 4l, 5l, 6l)), ((5l, 6l, 7l, 5l))).equals(((0l, 4l, 5l, 1l))));\n    assert(tupleModulo(((11l, 5l, 6l, 7l)), ((6l, 7l, 8l, 6l))).equals(((5l, 5l, 6l, 1l))));\n    assert(tupleModulo(((12l, 6l, 7l, 8l)), ((7l, 8l, 9l, 7l))).equals(((5l, 6l, 7l, 1l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    def minJumps(steps : Tuple2[Long, Long], d : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minJumps(((3l, 4l)), (11l)) == (3.5f));\n    assert(minJumps(((3l, 4l)), (0l)) == 0l);\n    assert(minJumps(((11l, 14l)), (11l)) == 1l);\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_618_div_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to divide two lists element wise.\n    def divList(nums1 : List[Long], nums2 : List[Long]) : List[Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(divList((List[Long](4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Float](4.0f.toFloat, 2.5f.toFloat, 2.0f.toFloat))));\n    assert(divList((List[Long](3l.toLong, 2l.toLong)), (List[Long](1l.toLong, 4l.toLong))).equals((List[Float](3.0f.toFloat, 0.5f.toFloat))));\n    assert(divList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Float](1.8f.toFloat, 1.7142857142857142f.toFloat))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_619_move_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    def moveNum(test_str : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));\n    assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));\n    assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_622_get_median", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    def getMedian(arr1 : List[Long], arr2 : List[Long], n : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getMedian((List[Long](1l.toLong, 12l.toLong, 15l.toLong, 26l.toLong, 38l.toLong)), (List[Long](2l.toLong, 13l.toLong, 17l.toLong, 30l.toLong, 45l.toLong)), (5l)) == (16.0f));\n    assert(getMedian((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong)), (List[Long](7l.toLong, 13l.toLong, 19l.toLong, 28l.toLong)), (4l)) == (8.5f));\n    assert(getMedian((List[Long](3l.toLong, 6l.toLong, 14l.toLong, 23l.toLong, 36l.toLong, 42l.toLong)), (List[Long](2l.toLong, 18l.toLong, 27l.toLong, 39l.toLong, 49l.toLong, 55l.toLong)), (6l)) == (25.0f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_623_nth_nums", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_624_is_upper", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to convert a given string to uppercase.\n    def isUpper(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isUpper((\"person\")).equals((\"PERSON\")));\n    assert(isUpper((\"final\")).equals((\"FINAL\")));\n    assert(isUpper((\"Valid\")).equals((\"VALID\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_625_swap_List", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))).equals((List[Long](4l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_626_triangle_area", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    def triangleArea(r : Long) : Option[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((-1l)).equals(None));\n    assert(triangleArea((0l)).equals(Some(0l)));\n    assert(triangleArea((2l)).equals(Some(4l)));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the smallest missing number from a sorted list of natural numbers.\n    def findFirstMissing(array : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (4l));\n    assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 9l.toLong))) == (3l));\n    assert(findFirstMissing((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 9l.toLong))) == (0l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace all spaces in the given string with '%20'.\n    def replaceSpaces(string : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(replaceSpaces((\"My Name is Dawood\")).equals((\"My%20Name%20is%20Dawood\")));\n    assert(replaceSpaces((\"I am a Programmer\")).equals((\"I%20am%20a%20Programmer\")));\n    assert(replaceSpaces((\"I love Coding\")).equals((\"I%20love%20Coding\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_629_Split", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find even numbers from a list of numbers.\n    def Split(list : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](2l.toLong, 4l.toLong))));\n    assert(Split((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 0l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))));\n    assert(Split((List[Long](8l.toLong, 12l.toLong, 15l.toLong, 19l.toLong))).equals((List[Long](8l.toLong, 12l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Tuple2[Long, Long]) : List[List[Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates(((3l, 4l))).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates(((4l, 5l))).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates(((5l, 6l))).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    def replaceSpaces(text : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(replaceSpaces((\"Jumanji The Jungle\")).equals((\"Jumanji_The_Jungle\")));\n    assert(replaceSpaces((\"The_Avengers\")).equals((\"The Avengers\")));\n    assert(replaceSpaces((\"Fast and Furious\")).equals((\"Fast_and_Furious\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_632_move_zero", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of xor of all pairs of numbers in the given list.\n    def pairXorSum(arr : List[Long], n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(pairXorSum((List[Long](5l.toLong, 9l.toLong, 7l.toLong, 6l.toLong)), (4l)) == (47l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong, 5l.toLong)), (3l)) == (12l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong)), (2l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_635_heap_sort", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given list.\n    def heapSort(iterable : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(heapSort((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(heapSort((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong))).equals((List[Long](14l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 58l.toLong, 65l.toLong, 75l.toLong, 85l.toLong))));\n    assert(heapSort((List[Long](7l.toLong, 1l.toLong, 9l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given amount has no profit and no loss\n    def noprofitNoloss(actual_cost : Long, sale_amount : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(noprofitNoloss((1500l), (1200l)) == (false));\n    assert(noprofitNoloss((100l), (100l)) == (true));\n    assert(noprofitNoloss((2000l), (5000l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_638_wind_chill", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    def windChill(v : Long, t : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(windChill((120l), (35l)) == (40l));\n    assert(windChill((40l), (20l)) == (19l));\n    assert(windChill((10l), (8l)) == (6l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_639_sample_nam", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    def sampleNam(sample_names : List[String]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sampleNam((List[String](\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"))) == (16l));\n    assert(sampleNam((List[String](\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"))) == (10l));\n    assert(sampleNam((List[String](\"abcd\", \"Python\", \"abba\", \"aba\"))) == (6l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    def removeParenthesis(items : List[String]) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeParenthesis((List[String](\"python (chrome)\"))).equals((\"python\")));\n    assert(removeParenthesis((List[String](\"string(.abc)\"))).equals((\"string\")));\n    assert(removeParenthesis((List[String](\"alpha(num)\"))).equals((\"alpha\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth nonagonal number.\n    def isNonagonal(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    def textMatchWordzMiddle(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));\n    assert(textMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse a list upto a given position.\n    def reverseArrayUptoK(input : List[Long], k : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(reverseArrayUptoK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))));\n    assert(reverseArrayUptoK((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (2l)).equals((List[Long](5l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))));\n    assert(reverseArrayUptoK((List[Long](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong)), (3l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Tuple2[Long, Long, Long], test_dict : Map[String,Long]) : Tuple2[Long, Long, Long, Map[String,Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple(((4l, 5l, 6l)), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals(((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l)))));\n    assert(addDictToTuple(((1l, 2l, 3l)), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals(((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l)))));\n    assert(addDictToTuple(((8l, 9l, 10l)), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals(((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    def maxAverageOfPath(cost : List[List[Long]]) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxAverageOfPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](6l.toLong, 5l.toLong, 4l.toLong), List[Long](7l.toLong, 3l.toLong, 9l.toLong)))) == (5.2f));\n    assert(maxAverageOfPath((List[List[Long]](List[Long](2l.toLong, 3l.toLong, 4l.toLong), List[Long](7l.toLong, 6l.toLong, 5l.toLong), List[Long](8l.toLong, 4l.toLong, 10l.toLong)))) == (6.2f));\n    assert(maxAverageOfPath((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](8l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 11l.toLong)))) == (7.2f));\n    assert(maxAverageOfPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))) == (5.8f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_722_filter_data", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Tuple2[Float, Long]], h : Float, w : Long) : Map[String,Tuple2[Float, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    def countSamePair(nums1 : List[Long], nums2 : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countSamePair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (4l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (11l));\n    assert(countSamePair((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (1l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    def powerBaseSum(base : Long, power : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(powerBaseSum((2l), (100l)) == (115l));\n    assert(powerBaseSum((8l), (10l)) == (37l));\n    assert(powerBaseSum((8l), (15l)) == (62l));\n    assert(powerBaseSum((3l), (3l)) == (9l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract values between quotation marks \" \" of the given string.\n    def extractQuotation(text1 : String) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).equals((List[Any](\"A53\", \"multi\", \"Processor\"))));\n    assert(extractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).equals((List[Any](\"favorite\", \"apps\"))));\n    assert(extractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).equals((List[Any](\"4k Ultra HD\", \"HDR 10\"))));\n    assert(extractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).equals((List[Any]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    def multiplyElements(test_tup : List[Long]) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyElements((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 10l.toLong))).equals((List[Any](5l.toLong, 35l.toLong, 56l.toLong, 80l.toLong))));\n    assert(multiplyElements((List[Long](2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Any](8l.toLong, 20l.toLong, 30l.toLong, 42l.toLong))));\n    assert(multiplyElements((List[Long](12l.toLong, 13l.toLong, 14l.toLong, 9l.toLong, 15l.toLong))).equals((List[Any](156l.toLong, 182l.toLong, 126l.toLong, 135l.toLong))));\n    assert(multiplyElements((List[Long](12l.toLong))).equals((List[Any]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_728_sum_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    def consecutiveDuplicates(nums : List[Any]) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(consecutiveDuplicates((List[Any](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((List[Any](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong))));\n    assert(consecutiveDuplicates((List[Any](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((List[Any](10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    assert(consecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((List[Any](\"a\", \"b\", \"c\", \"d\"))));\n    assert(consecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"))).equals((List[Any](\"a\", \"b\", \"c\", \"d\", \"a\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the lateral surface area of a cone given radius r and the height h.\n    def lateralsurfaceCone(r : Long, h : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lateralsurfaceCone((5l), (12l)) == (204.20352248333654f));\n    assert(lateralsurfaceCone((10l), (15l)) == (566.3586699569488f));\n    assert(lateralsurfaceCone((19l), (17l)) == (1521.8090132193388f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    def replaceSpecialchar(text : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(replaceSpecialchar((\"Python language, Programming language.\")).equals((\"Python:language::Programming:language:\")));\n    assert(replaceSpecialchar((\"a b c,d e f\")).equals((\"a:b:c:d:e:f\")));\n    assert(replaceSpecialchar((\"ram reshma,ram rahim\")).equals((\"ram:reshma:ram:rahim\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    def sumOfSubarrayProd(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (20l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong))) == (5l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (84l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    def toggleMiddleBits(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_736_left_insertion", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_737_check_str", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given string is starting with a vowel or not using regex.\n    def checkStr(string : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkStr((\"annie\")) == (true));\n    assert(checkStr((\"dawood\")) == (false));\n    assert(checkStr((\"Else\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-recursion-exercise-9.php\n    def geometricSum(n : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(geometricSum((7l)) == (1.9921875f));\n    assert(geometricSum((4l)) == (1.9375f));\n    assert(geometricSum((8l)) == (1.99609375f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_739_find_Index", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    def findIndex(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findIndex((2l)) == (4l));\n    assert(findIndex((3l)) == (14l));\n    assert(findIndex((4l)) == (45l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/scalathon-convert-tuple-to-adjacent-pair-map/\n    def tupleToDict(test_tup : Tuple2[Long, Long, Long, Long, Long, Long]) : Map[Long,Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict(((1l, 5l, 7l, 10l, 13l, 5l))).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict(((1l, 2l, 3l, 4l, 5l, 6l))).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict(((7l, 8l, 9l, 10l, 11l, 12l))).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether all the characters are same or not.\n    def allCharactersSame(s : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(allCharactersSame((\"python\")) == (false));\n    assert(allCharactersSame((\"aaa\")) == (true));\n    assert(allCharactersSame((\"data\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to caluclate the area of a tetrahedron.\n    def areaTetrahedron(side : Long) : Float = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(areaTetrahedron((3l)) == (15.588457268119894f));\n    assert(areaTetrahedron((20l)) == (692.8203230275509f));\n    assert(areaTetrahedron((10l)) == (173.20508075688772f));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_743_rotate_right", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/scalathon-program-right-rotate-list-n/\n    def rotateRight(list : List[Long], m : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (3l)).equals((List[Long](8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (5l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_744_check_none", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuple has any none value or not.\n    def checkNone(test_tup : Any) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkNone((Any(10l), Some(4l), Some(5l), Some(6l), Some(None)))) == (true));\n    assert(checkNone((Any((7l, 8l, 9l, 11l, 14l)))) == (false));\n    assert(checkNone((Any(1l), Some(2l), Some(3l), Some(4l), Some(None)))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/scalathon-exercises/lambda/scalathon-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_746_sector_area", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    def sectorArea(r : Long, a : Long) : Option[Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sectorArea((4l), (45l)).equals(Some(6.283185307179586f)));\n    assert(sectorArea((9l), (45l)).equals(Some(31.808625617596654f)));\n    assert(sectorArea((9l), (361l)).equals(None));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to put spaces between words starting with capital letters in a given string.\n    def capitalWordsSpaces(str1 : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(capitalWordsSpaces((\"Python\")).equals((\"Python\")));\n    assert(capitalWordsSpaces((\"PythonProgrammingExamples\")).equals((\"Python Programming Examples\")));\n    assert(capitalWordsSpaces((\"GetReadyToBeCodingFreak\")).equals((\"Get Ready To Be Coding Freak\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_750_add_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add the given tuple to the given list.\n    def addTuple(test_list : List[Long], test_tup : Tuple2[Long, Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(addTuple((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), ((9l, 10l))).equals((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(addTuple((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), ((10l, 11l))).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 11l.toLong))));\n    assert(addTuple((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), ((11l, 12l))).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n    def checkMinHeap(arr : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkMinHeap((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(checkMinHeap((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 10l.toLong, 15l.toLong))) == (true));\n    assert(checkMinHeap((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 15l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    def jacobsthalNum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(jacobsthalNum((5l)) == (11l));\n    assert(jacobsthalNum((2l)) == (1l));\n    assert(jacobsthalNum((4l)) == (5l));\n    assert(jacobsthalNum((13l)) == (2731l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_753_min_k", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Tuple2[String, Long]], K : Long) : List[Tuple2[String, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Tuple2[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Tuple2[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Tuple2[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Tuple2[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Tuple2[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Tuple2[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : List[Any] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any]())));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_755_second_smallest", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the second smallest number in a list.\n    def secondSmallest(numbers : List[Either[Long, Float]]) : Option[Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(secondSmallest((List[Either[Long, Float]](1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(Some(-2l)));\n    assert(secondSmallest((List[Either[Long, Float]](1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(Some(-0.5f)));\n    assert(secondSmallest((List[Either[Long, Float]](2l.toLong, 2l.toLong))).equals(None));\n    assert(secondSmallest((List[Either[Long, Float]](2l.toLong, 2l.toLong, 2l.toLong))).equals(None));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/scalathon-exercises/re/scalathon-re-exercise-3.php\n    def textMatchZeroOne(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchZeroOne((\"ac\")) == (false));\n    assert(textMatchZeroOne((\"dc\")) == (false));\n    assert(textMatchZeroOne((\"abbbba\")) == (true));\n    assert(textMatchZeroOne((\"dsabbbba\")) == (true));\n    assert(textMatchZeroOne((\"asbbbba\")) == (false));\n    assert(textMatchZeroOne((\"abaaa\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/scalathon-program-to-count-the-pairs-of-reverse-strings/\n    def countReversePairs(test_list : List[String]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countReversePairs((List[String](\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"))) == (2l));\n    assert(countReversePairs((List[String](\"geeks\", \"best\", \"for\", \"skeeg\"))) == (1l));\n    assert(countReversePairs((List[String](\"makes\", \"best\", \"sekam\", \"for\", \"rof\"))) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_759_is_decimal", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_760_unique_Element", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list of numbers contains only one distinct element or not.\n    def uniqueElement(arr : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueElement((List[Long](1l.toLong, 1l.toLong, 1l.toLong))) == (true));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    def checkMonthnumberNumber(monthnum3 : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkMonthnumberNumber((6l)) == (true));\n    assert(checkMonthnumberNumber((2l)) == (false));\n    assert(checkMonthnumberNumber((12l)) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    def findMinDiff(arr : List[Long], n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findMinDiff((List[Long](1l.toLong, 5l.toLong, 3l.toLong, 19l.toLong, 18l.toLong, 25l.toLong)), (6l)) == (1l));\n    assert(findMinDiff((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 6l.toLong)), (4l)) == (1l));\n    assert(findMinDiff((List[Long](30l.toLong, 5l.toLong, 20l.toLong, 9l.toLong)), (4l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_764_number_ctr", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count number of digits in a given string.\n    def numberCtr(str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(numberCtr((\"program2bedone\")) == (1l));\n    assert(numberCtr((\"3wonders\")) == (1l));\n    assert(numberCtr((\"123\")) == (3l));\n    assert(numberCtr((\"3wond-1ers2\")) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_765_is_polite", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    def isPolite(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isPolite((7l)) == (11l));\n    assert(isPolite((4l)) == (7l));\n    assert(isPolite((9l)) == (13l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_766_pair_wise", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Tuple2[Long, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    def getPairsCount(arr : List[Long], sum : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(getPairsCount((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (2l)) == (6l));\n    assert(getPairsCount((List[Long](1l.toLong, 5l.toLong, 7l.toLong, -1l.toLong, 5l.toLong)), (6l)) == (3l));\n    assert(getPairsCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong)), (1l)) == (1l));\n    assert(getPairsCount((List[Long](-1l.toLong, -2l.toLong, 3l.toLong)), (-3l)) == (1l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_769_Diff", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to get the difference between two lists.\n    def Diff(li1 : List[Long], li2 : List[Long]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(Diff((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong, 30l.toLong, 35l.toLong, 40l.toLong)), (List[Long](25l.toLong, 40l.toLong, 35l.toLong))).equals((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 15l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of fourth power of first n odd natural numbers.\n    def oddNumSum(n : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oddNumSum((2l)) == (82l));\n    assert(oddNumSum((3l)) == (707l));\n    assert(oddNumSum((4l)) == (3108l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_771_check_expression", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    def checkExpression(exp : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_772_remove_length", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Tuple2[String, Long, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals(Some((\"python\", 0l, 6l))));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals(Some((\"programming\", 7l, 18l))));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals(Some((\"language\", 31l, 39l))));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_775_odd_position", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_776_count_vowels", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count those characters which have vowels as their neighbors in the given string.\n    def countVowels(test_str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countVowels((\"bestinstareels\")) == (7l));\n    assert(countVowels((\"partofthejourneyistheend\")) == (12l));\n    assert(countVowels((\"amazonprime\")) == (5l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_777_find_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of non-repeated elements in a given list.\n    def findSum(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (21l));\n    assert(findSum((List[Long](1l.toLong, 10l.toLong, 9l.toLong, 4l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 4l.toLong))) == (71l));\n    assert(findSum((List[Long](12l.toLong, 10l.toLong, 9l.toLong, 45l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 10l.toLong))) == (78l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : List[Any]) : List[List[Any]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((List[Any](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((List[List[Any]](List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((List[Any](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((List[List[Any]](List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((List[List[Any]](List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_780_find_combinations", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/scalathon-combinations-of-sum-with-tuples-in-tuple-list/\n    def findCombinations(test_list : List[Tuple2[Long, Long]]) : List[Tuple2[Long, Long]] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(findCombinations((List[Tuple2[Long, Long]]((2l, 4l), (6l, 7l), (5l, 1l), (6l, 10l)))).equals((List[Tuple2[Long, Long]]((8l, 11l), (7l, 5l), (8l, 14l), (11l, 8l), (12l, 17l), (11l, 11l)))));\n    assert(findCombinations((List[Tuple2[Long, Long]]((3l, 5l), (7l, 8l), (6l, 2l), (7l, 11l)))).equals((List[Tuple2[Long, Long]]((10l, 13l), (9l, 7l), (10l, 16l), (13l, 10l), (14l, 19l), (13l, 13l)))));\n    assert(findCombinations((List[Tuple2[Long, Long]]((4l, 6l), (8l, 9l), (7l, 3l), (8l, 12l)))).equals((List[Tuple2[Long, Long]]((12l, 15l), (11l, 9l), (12l, 18l), (15l, 12l), (16l, 21l), (15l, 15l)))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_781_count_divisors", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the count of divisors is even. https://www.w3resource.com/scalathon-exercises/basic/scalathon-basic-1-exercise-24.php\n    def countDivisors(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countDivisors((10l)) == (true));\n    assert(countDivisors((100l)) == (false));\n    assert(countDivisors((125l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    def rgbToHsv(r : Long, g : Long, b : Long) : List[Float] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rgbToHsv((255l), (255l), (255l)).equals((List[Float](0.0f.toFloat, 0.0f.toFloat, 100.0f.toFloat))));\n    assert(rgbToHsv((0l), (215l), (0l)).equals((List[Float](120.0f.toFloat, 100.0f.toFloat, 84.31372549019608f.toFloat))));\n    assert(rgbToHsv((10l), (215l), (110l)).equals((List[Float](149.26829268292684f.toFloat, 95.34883720930233f.toFloat, 84.31372549019608f.toFloat))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert tuple string to integer tuple.\n    def tupleStrInt(test_str : String) : Tuple2[Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(tupleStrInt((\"(7, 8, 9)\")).equals(((7l, 8l, 9l))));\n    assert(tupleStrInt((\"(1, 2, 3)\")).equals(((1l, 2l, 3l))));\n    assert(tupleStrInt((\"(4, 5, 6)\")).equals(((4l, 5l, 6l))));\n    assert(tupleStrInt((\"(7, 81, 19)\")).equals(((7l, 81l, 19l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_786_right_insertion", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the right insertion point for a specified value in sorted order.\n    def rightInsertion(a : List[Long], x : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_787_text_match_three", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an a followed by three 'b'.\n    def textMatchThree(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchThree((\"ac\")) == (false));\n    assert(textMatchThree((\"dc\")) == (false));\n    assert(textMatchThree((\"abbbba\")) == (true));\n    assert(textMatchThree((\"caacabbbba\")) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_788_new_tuple", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create a new tuple from the given string and list.\n    def newTuple(test_list : List[String], test_str : String) : Tuple2[String, String, String] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(newTuple((List[String](\"WEB\", \"is\")), (\"best\")).equals(((\"WEB\", \"is\", \"best\"))));\n    assert(newTuple((List[String](\"We\", \"are\")), (\"Developers\")).equals(((\"We\", \"are\", \"Developers\"))));\n    assert(newTuple((List[String](\"Part\", \"is\")), (\"Wrong\")).equals(((\"Part\", \"is\", \"Wrong\"))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_790_even_position", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_791_remove_nested", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Any) : Tuple2[Long, Long, Long, Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeNested((Any(4l, 6l), 10l))).equals(((1l, 5l, 7l, 10l))));\n    assert(removeNested((Any(5l, 7l), 11l))).equals(((2l, 6l, 8l, 11l))));\n    assert(removeNested((Any(6l, 8l), 12l))).equals(((3l, 7l, 9l, 12l))));\n    assert(removeNested((Any(6l, 8l), (5l, 12l), 12l))).equals(((3l, 7l, 9l, 12l))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_792_count_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of lists in a given number of lists.\n    def countList(input_list : List[List[Long]]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countList((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))) == (4l));\n    assert(countList((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))) == (3l));\n    assert(countList((List[List[Long]](List[Long](1l.toLong, 0l.toLong), List[Long](2l.toLong, 0l.toLong)))) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_793_last", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    def textStartaEndb(text : String) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(textStartaEndb((\"aabbbb\")) == (true));\n    assert(textStartaEndb((\"aabAbbbc\")) == (false));\n    assert(textStartaEndb((\"accddbbjjj\")) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_796_return_sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write function to find the sum of all items in the given map.\n    def returnSum(dict : Map[String,Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(returnSum((Map[String,Long](\"a\" -> 100l, \"b\" -> 200l, \"c\" -> 300l))) == (600l));\n    assert(returnSum((Map[String,Long](\"a\" -> 25l, \"b\" -> 18l, \"c\" -> 45l))) == (88l));\n    assert(returnSum((Map[String,Long](\"a\" -> 36l, \"b\" -> 39l, \"c\" -> 49l))) == (124l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd natural numbers within the range l and r.\n    def sumInRange(l : Long, r : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(sumInRange((2l), (5l)) == (8l));\n    assert(sumInRange((5l), (7l)) == (12l));\n    assert(sumInRange((7l), (13l)) == (40l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_798__sum", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of a list.\n    def Sum(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(Sum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(Sum((List[Long](15l.toLong, 12l.toLong, 13l.toLong, 10l.toLong))) == (50l));\n    assert(Sum((List[Long](0l.toLong, 1l.toLong, 2l.toLong))) == (3l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_799_left_rotate", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    def leftRotate(n : Long, d : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(leftRotate((16l), (2l)) == (64l));\n    assert(leftRotate((10l), (2l)) == (40l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((1l), (3l)) == (8l));\n    assert(leftRotate((5l), (3l)) == (40l));\n    assert(leftRotate((29l), (3l)) == (232l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all whitespaces from a string.\n    def removeAllSpaces(text : String) : String = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(removeAllSpaces((\"python  program\")).equals((\"pythonprogram\")));\n    assert(removeAllSpaces((\"python   programming    language\")).equals((\"pythonprogramminglanguage\")));\n    assert(removeAllSpaces((\"python                     program\")).equals((\"pythonprogram\")));\n    assert(removeAllSpaces((\"   python                     program\")).equals((\"pythonprogram\")));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of equal numbers from three given integers.\n    def testThreeEqual(x : Long, y : Long, z : Long) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(testThreeEqual((1l), (1l), (1l)) == (3l));\n    assert(testThreeEqual((-1l), (-2l), (-3l)) == (0l));\n    assert(testThreeEqual((1l), (2l), (2l)) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_802_count_rotation", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n    def countRotation(arr : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(countRotation((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(countRotation((List[Long](4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (2l));\n    assert(countRotation((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(countRotation((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (0l));\n    assert(countRotation((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    def isPerfectSquare(n : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isPerfectSquare((10l)) == (false));\n    assert(isPerfectSquare((36l)) == (true));\n    assert(isPerfectSquare((14l)) == (false));\n    assert(isPerfectSquare((196l)) == (true));\n    assert(isPerfectSquare((125l)) == (false));\n    assert(isPerfectSquare((15625l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_804_is_product_even", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    def maxSumList(lists : List[List[Long]]) : List[Long] = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxSumList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](10l.toLong, 11l.toLong, 12l.toLong))));\n    assert(maxSumList((List[List[Long]](List[Long](3l.toLong, 2l.toLong, 1l.toLong), List[Long](6l.toLong, 5l.toLong, 4l.toLong), List[Long](12l.toLong, 11l.toLong, 10l.toLong)))).equals((List[Long](12l.toLong, 11l.toLong, 10l.toLong))));\n    assert(maxSumList((List[List[Long]](List[Long](2l.toLong, 3l.toLong, 1l.toLong)))).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong))));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_807_first_odd", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_808_check_K", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuples contain the k or not.\n    def checkK(test_tup : List[Long], K : Long) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkK((List[Long](10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 8l.toLong)), (6l)) == (true));\n    assert(checkK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (7l)) == (false));\n    assert(checkK((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 44l.toLong, 11l.toLong, 12l.toLong)), (11l)) == (true));\n    }\n\n}\n", "language": "scala"}, {"task_id": "mbpp_809_check_smaller", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    def checkSmaller(test_tup1 : Tuple2[Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long]) : Boolean = {\n", "test": "    }\n    def main(args: Array[String]) = {\n    assert(checkSmaller(((1l, 2l, 3l)), ((2l, 3l, 4l))) == (false));\n    assert(checkSmaller(((4l, 5l, 6l)), ((3l, 4l, 5l))) == (true));\n    assert(checkSmaller(((11l, 12l, 13l)), ((10l, 11l, 12l))) == (true));\n    }\n\n}\n", "language": "scala"}]