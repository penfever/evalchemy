[{"task_id": "HumanEval_0_has_close_elements", "prompt": "# Check if in given array of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements.call([1.0, 2.0, 3.0], 0.5)\n# false\n# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# true\ndef has_close_elements(numbers, threshold)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_has_close_elements\n    candidate = method(:has_close_elements)\n    assert_equal(true, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3))\n    assert_equal(false, candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05))\n    assert_equal(true, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.95))\n    assert_equal(false, candidate.call([1.0, 2.0, 5.9, 4.0, 5.0], 0.8))\n    assert_equal(true, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1))\n    assert_equal(true, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 1.0))\n    assert_equal(false, candidate.call([1.1, 2.2, 3.1, 4.1, 5.1], 0.5))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the array of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups.call(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\ndef separate_paren_groups(paren_string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"(()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"( ) (( )) (( )( ))\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number.call(3.5)\n# 0.5\ndef truncate_number(number)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_3_below_zero", "prompt": "# You're given an array of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> below_zero.call([1, 2, 3])\n# false\n# >>> below_zero.call([1, 2, -4, 5])\n# true\ndef below_zero(operations)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_zero\n    candidate = method(:below_zero)\n    assert_equal(false, candidate.call([]))\n    assert_equal(false, candidate.call([1, 2, -3, 1, 2, -3]))\n    assert_equal(true, candidate.call([1, 2, -4, 5, 6]))\n    assert_equal(false, candidate.call([1, -1, 2, -2, 5, -5, 4, -4]))\n    assert_equal(true, candidate.call([1, -1, 2, -2, 5, -5, 4, -5]))\n    assert_equal(true, candidate.call([1, -2, 2, -2, 5, -5, 4, -4]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "# For a given array of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_5_intersperse", "prompt": "# Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n# >>> intersperse.call([], 4)\n# []\n# >>> intersperse.call([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2, 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "# Filter an input array of strings only for ones that contain given substring\n# >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\ndef filter_by_substring(strings, substring)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_8_sum_product", "prompt": "# For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product.call([])\n# [0, 1]\n# >>> sum_product.call([1, 2, 3, 4])\n# [10, 24]\ndef sum_product(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_product\n    candidate = method(:sum_product)\n    assert_equal([0, 1], candidate.call([]))\n    assert_equal([3, 1], candidate.call([1, 1, 1]))\n    assert_equal([100, 0], candidate.call([100, 0]))\n    assert_equal([15, 105], candidate.call([3, 5, 7]))\n    assert_equal([10, 10], candidate.call([10]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "# From a given array of integers, generate an array of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\", candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_11_string_xor", "prompt": "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor.call(\"010\", \"110\")\n# \"100\"\ndef string_xor(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_xor\n    candidate = method(:string_xor)\n    assert_equal(\"010010\", candidate.call(\"111000\", \"101010\"))\n    assert_equal(\"0\", candidate.call(\"1\", \"1\"))\n    assert_equal(\"0101\", candidate.call(\"0101\", \"0000\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_12_longest", "prompt": "# Out of array of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return nil in case the input array is empty.\n# >>> longest.call([])\n# nil\n# >>> longest.call([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest.call([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\ndef longest(strings)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n    assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3, 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "# Return array of all prefixes from shortest to longest of the input string\n# >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence.call(0)\n# \"0\"\n# >>> string_sequence.call(5)\n# \"0 1 2 3 4 5\"\ndef string_sequence(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_sequence\n    candidate = method(:string_sequence)\n    assert_equal(\"0\", candidate.call(0))\n    assert_equal(\"0 1 2 3\", candidate.call(3))\n    assert_equal(\"0 1 2 3 4 5 6 7 8 9 10\", candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters.call(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters.call(\"Jerry\")\n# 4\ndef count_distinct_characters(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_17_parse_music", "prompt": "# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return array of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music.call(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1, 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4, 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1, 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times.call(\"\", \"a\")\n# 0\n# >>> how_many_times.call(\"aaa\", \"a\")\n# 3\n# >>> how_many_times.call(\"aaaa\", \"aa\")\n# 3\ndef how_many_times(string, substring)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef sort_numbers(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "# From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\ndef find_closest_elements(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "# Given array of numbers (of at least two elements), apply a linear transform to that array,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\ndef filter_integers(values)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_23_strlen", "prompt": "# Return length of given string\n# >>> strlen.call(\"\")\n# 0\n# >>> strlen.call(\"abc\")\n# 3\ndef strlen(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strlen\n    candidate = method(:strlen)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(1, candidate.call(\"x\"))\n    assert_equal(9, candidate.call(\"asdasnakj\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor.call(15)\n# 5\ndef largest_divisor(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_25_factorize", "prompt": "# Return array of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize.call(8)\n# [2, 2, 2]\n# >>> factorize.call(25)\n# [5, 5]\n# >>> factorize.call(70)\n# [2, 5, 7]\ndef factorize(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19], candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2, 3, 3], candidate.call(18))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "# From an array of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates.call([1, 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_27_flip_case", "prompt": "# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case.call(\"Hello\")\n# \"hELLO\"\ndef flip_case(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights have violent ends\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_28_concatenate", "prompt": "# Concatenate array of strings into a single string\n# >>> concatenate.call([])\n# \"\"\n# >>> concatenate.call([\"a\", \"b\", \"c\"])\n# \"abc\"\ndef concatenate(strings)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_concatenate\n    candidate = method(:concatenate)\n    assert_equal(\"\", candidate.call([]))\n    assert_equal(\"xyz\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"xyzwk\", candidate.call([\"x\", \"y\", \"z\", \"w\", \"k\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "# Filter an input array of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings, prefix)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_30_get_positive", "prompt": "# Return only positive numbers in the array.\n# >>> get_positive.call([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_31_is_prime", "prompt": "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime.call(6)\n# false\n# >>> is_prime.call(101)\n# true\n# >>> is_prime.call(11)\n# true\n# >>> is_prime.call(13441)\n# true\n# >>> is_prime.call(61)\n# true\n# >>> is_prime.call(4)\n# false\n# >>> is_prime.call(1)\n# false\ndef is_prime(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_33_sort_third", "prompt": "# This function takes an array l and returns an array l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third.call([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\ndef sort_third(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_third\n    candidate = method(:sort_third)\n    assert_equal([2, 6, 3, 4, 8, 9, 5], candidate.call([5, 6, 3, 4, 8, 9, 2]))\n    assert_equal([2, 8, 3, 4, 6, 9, 5], candidate.call([5, 8, 3, 4, 6, 9, 2]))\n    assert_equal([2, 6, 9, 4, 8, 3, 5], candidate.call([5, 6, 9, 4, 8, 3, 2]))\n    assert_equal([2, 6, 3, 4, 8, 9, 5, 1], candidate.call([5, 6, 3, 4, 8, 9, 2, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_34_unique", "prompt": "# Return sorted unique elements in an array\n# >>> unique.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\ndef unique(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique\n    candidate = method(:unique)\n    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_35_max_element", "prompt": "# Return maximum element in the array.\n# >>> max_element.call([1, 2, 3])\n# 3\n# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\ndef max_element(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2, 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n# 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n    assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n    assert_equal(8026, candidate.call(100000))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_37_sort_even", "prompt": "# This function takes an array l and returns an array l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even.call([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even.call([5, 6, 3, 4])\n# [3, 6, 5, 4]\ndef sort_even(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_even\n    candidate = method(:sort_even)\n    assert_equal([1, 2, 3], candidate.call([1, 2, 3]))\n    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib.call(1)\n# 2\n# >>> prime_fib.call(2)\n# 3\n# >>> prime_fib.call(3)\n# 5\n# >>> prime_fib.call(4)\n# 13\n# >>> prime_fib.call(5)\n# 89\ndef prime_fib(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_fib\n    candidate = method(:prime_fib)\n    assert_equal(2, candidate.call(1))\n    assert_equal(3, candidate.call(2))\n    assert_equal(5, candidate.call(3))\n    assert_equal(13, candidate.call(4))\n    assert_equal(89, candidate.call(5))\n    assert_equal(233, candidate.call(6))\n    assert_equal(1597, candidate.call(7))\n    assert_equal(28657, candidate.call(8))\n    assert_equal(514229, candidate.call(9))\n    assert_equal(433494437, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "# triples_sum_to_zero takes an array of integers as an input.\n# it returns true if there are three distinct elements in the array that\n# sum to zero, and false otherwise.\n# >>> triples_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> triples_sum_to_zero.call([1, 3, -2, 1])\n# true\n# >>> triples_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])\n# true\n# >>> triples_sum_to_zero.call([1])\n# false\ndef triples_sum_to_zero(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triples_sum_to_zero\n    candidate = method(:triples_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, 5, -1]))\n    assert_equal(true, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(false, candidate.call([1, 2, 5, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 9, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(false, candidate.call([1, 3, 5, -100]))\n    assert_equal(false, candidate.call([100, 3, 5, -100]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\ndef car_race_collision(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_car_race_collision\n    candidate = method(:car_race_collision)\n    assert_equal(4, candidate.call(2))\n    assert_equal(9, candidate.call(3))\n    assert_equal(16, candidate.call(4))\n    assert_equal(64, candidate.call(8))\n    assert_equal(100, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_42_incr_list", "prompt": "# Return array with elements incremented by 1.\n# >>> incr_list.call([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\ndef incr_list(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_incr_list\n    candidate = method(:incr_list)\n    assert_equal([], candidate.call([]))\n    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))\n    assert_equal([6, 3, 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "# pairs_sum_to_zero takes an array of integers as an input.\n# it returns true if there are two distinct elements in the array that\n# sum to zero, and false otherwise.\n# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1, 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n# false\ndef pairs_sum_to_zero(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_44_change_base", "prompt": "# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base.call(8, 3)\n# \"22\"\n# >>> change_base.call(8, 2)\n# \"1000\"\n# >>> change_base.call(7, 2)\n# \"111\"\ndef change_base(x, base)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8, 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\", candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7, 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3, 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5, 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7, 8))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "# Given length of a side and high return area for a triangle.\n# >>> triangle_area.call(5, 3)\n# 7.5\ndef triangle_area(a, h)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5, 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10, 8))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_46_fib4", "prompt": "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>> fib4.call(7)\n# 14\ndef fib4(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28, candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386, candidate.call(12))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_47_median", "prompt": "# Return median of elements in the array l.\n# >>> median.call([3, 1, 2, 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "# Checks if given string is a palindrome\n# >>> is_palindrome.call(\"\")\n# true\n# >>> is_palindrome.call(\"aba\")\n# true\n# >>> is_palindrome.call(\"aaaaa\")\n# true\n# >>> is_palindrome.call(\"zbcd\")\n# false\ndef is_palindrome(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true, candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_49_modp", "prompt": "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n# >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3, 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2, candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8, candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4, candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\", candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\", candidate.call(\"ybcd\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "# Return true if all numbers in the array l are below threshold t.\n# >>> below_threshold.call([1, 2, 4, 10], 100)\n# true\n# >>> below_threshold.call([1, 20, 4, 10], 5)\n# false\ndef below_threshold(l, t)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_below_threshold\n    candidate = method(:below_threshold)\n    assert_equal(true, candidate.call([1, 2, 4, 10], 100))\n    assert_equal(false, candidate.call([1, 20, 4, 10], 5))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 21))\n    assert_equal(true, candidate.call([1, 20, 4, 10], 22))\n    assert_equal(true, candidate.call([1, 8, 4, 10], 11))\n    assert_equal(false, candidate.call([1, 8, 4, 10], 10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_53_add", "prompt": "# Add two numbers x and y\n# >>> add.call(2, 3)\n# 5\n# >>> add.call(5, 7)\n# 12\ndef add(x, y)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0, 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2, 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_54_same_chars", "prompt": "# Check if two words have the same characters.\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> same_chars.call(\"abcd\", \"dddddddabc\")\n# true\n# >>> same_chars.call(\"dddddddabc\", \"abcd\")\n# true\n# >>> same_chars.call(\"eabcd\", \"dddddddabc\")\n# false\n# >>> same_chars.call(\"abcd\", \"dddddddabce\")\n# false\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# false\ndef same_chars(s0, s1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_same_chars\n    candidate = method(:same_chars)\n    assert_equal(true, candidate.call(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"))\n    assert_equal(true, candidate.call(\"abcd\", \"dddddddabc\"))\n    assert_equal(true, candidate.call(\"dddddddabc\", \"abcd\"))\n    assert_equal(false, candidate.call(\"eabcd\", \"dddddddabc\"))\n    assert_equal(false, candidate.call(\"abcd\", \"dddddddabcf\"))\n    assert_equal(false, candidate.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"))\n    assert_equal(false, candidate.call(\"aabb\", \"aaccc\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_55_fib", "prompt": "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n# 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"<\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"<<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_57_monotonic", "prompt": "# Return true is array elements are monotonically increasing or decreasing.\n# >>> monotonic.call([1, 2, 4, 20])\n# true\n# >>> monotonic.call([1, 20, 4, 10])\n# false\n# >>> monotonic.call([4, 1, 0, -10])\n# true\ndef monotonic(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_58_common", "prompt": "# Return sorted unique common elements for two arrays.\n# >>> common.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n# 2\ndef largest_prime_factor(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n# 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n# 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"(\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"(()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true, candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false, candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n    assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\")\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false, candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"()()(()())()))()\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_62_derivative", "prompt": "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> derivative.call([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative.call([1, 2, 3])\n# [2, 6]\ndef derivative(xs)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3, 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2, 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3, 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_63_fibfib", "prompt": "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef fibfib(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0, candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24, candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274, candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n# 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"ACEDY\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift.call(12, 1)\n# \"21\"\n# >>> circular_shift.call(12, 2)\n# \"12\"\ndef circular_shift(x, shift)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_circular_shift\n    candidate = method(:circular_shift)\n    assert_equal(\"001\", candidate.call(100, 2))\n    assert_equal(\"12\", candidate.call(12, 2))\n    assert_equal(\"79\", candidate.call(97, 8))\n    assert_equal(\"21\", candidate.call(12, 1))\n    assert_equal(\"11\", candidate.call(11, 101))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_66_digitSum", "prompt": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> fruit_distribution.call(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution.call(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution.call(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution.call(\"100 apples and 1 oranges\", 120)\n# 19\ndef fruit_distribution(s, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_68_pluck", "prompt": "# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in an array, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\ndef pluck(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_69_search", "prompt": "# You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n# >>> search.call([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search.call([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search.call([5, 5, 4, 4, 4])\n# -1\ndef search(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(1, candidate.call([5, 5, 5, 5, 1]))\n    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))\n    assert_equal(-1, candidate.call([3, 3]))\n    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8, 8, 8]))\n    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))\n    assert_equal(1, candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))\n    assert_equal(2, candidate.call([3, 2, 8, 2]))\n    assert_equal(1, candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))\n    assert_equal(-1, candidate.call([8, 8, 3, 6, 5, 6, 4]))\n    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))\n    assert_equal(1, candidate.call([1, 9, 10, 1, 3]))\n    assert_equal(5, candidate.call([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))\n    assert_equal(1, candidate.call([1]))\n    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))\n    assert_equal(2, candidate.call([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))\n    assert_equal(1, candidate.call([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))\n    assert_equal(4, candidate.call([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]))\n    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))\n    assert_equal(2, candidate.call([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))\n    assert_equal(-1, candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]))\n    assert_equal(-1, candidate.call([10]))\n    assert_equal(2, candidate.call([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))\n    assert_equal(1, candidate.call([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))\n    assert_equal(1, candidate.call([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))\n    assert_equal(-1, candidate.call([3, 10, 10, 9, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "# Given array of integers, return array in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3, 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b, c)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3, 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18, candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n    assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10, 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43, candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> will_it_fly.call([1, 2], 5)\n# false\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly.call([3, 2, 3], 1)\n# false\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly.call([3, 2, 3], 9)\n# true\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly.call([3], 5)\n# true\n# # 3 is less than the maximum possible weight, and it's balanced.\ndef will_it_fly(q, w)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_will_it_fly\n    candidate = method(:will_it_fly)\n    assert_equal(true, candidate.call([3, 2, 3], 9))\n    assert_equal(false, candidate.call([1, 2], 5))\n    assert_equal(true, candidate.call([3], 5))\n    assert_equal(false, candidate.call([3, 2, 3], 1))\n    assert_equal(false, candidate.call([1, 2, 3], 6))\n    assert_equal(true, candidate.call([5], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> smallest_change.call([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change.call([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change.call([1, 2, 3, 2, 1])\n# 0\ndef smallest_change(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_smallest_change\n    candidate = method(:smallest_change)\n    assert_equal(4, candidate.call([1, 2, 3, 5, 4, 7, 9, 6]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 3, 2, 2]))\n    assert_equal(1, candidate.call([1, 4, 2]))\n    assert_equal(1, candidate.call([1, 4, 4, 2]))\n    assert_equal(0, candidate.call([1, 2, 3, 2, 1]))\n    assert_equal(0, candidate.call([3, 1, 1, 3]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(1, candidate.call([0, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_74_total_match", "prompt": "# Write a function that accepts two arrays of strings and returns the array that has \n# total number of chars in the all strings of the array less than the other array.\n# if the two arrays have the same number of chars, return the first array.\n# Examples\n# >>> total_match.call([], [])\n# []\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\ndef total_match(lst1, lst2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_total_match\n    candidate = method(:total_match)\n    assert_equal([], candidate.call([], []))\n    assert_equal([\"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\n    assert_equal([\"4\"], candidate.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    assert_equal([\"hI\", \"Hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n    assert_equal([\"hI\", \"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]))\n    assert_equal([], candidate.call([], [\"this\"]))\n    assert_equal([], candidate.call([\"this\"], []))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> is_multiply_prime.call(30)\n# true\n# 30 = 2 * 3 * 5\ndef is_multiply_prime(a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_multiply_prime\n    candidate = method(:is_multiply_prime)\n    assert_equal(false, candidate.call(5))\n    assert_equal(true, candidate.call(30))\n    assert_equal(true, candidate.call(8))\n    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(125))\n    assert_equal(true, candidate.call(105))\n    assert_equal(false, candidate.call(126))\n    assert_equal(false, candidate.call(729))\n    assert_equal(false, candidate.call(891))\n    assert_equal(true, candidate.call(1001))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2, 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3, 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5, 3)\n# false\ndef is_simple_power(x, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16, 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true, candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true, candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false, candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true, candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_77_iscube", "prompt": "# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> iscube.call(1)\n# true\n# >>> iscube.call(2)\n# false\n# >>> iscube.call(-1)\n# true\n# >>> iscube.call(64)\n# true\n# >>> iscube.call(0)\n# true\n# >>> iscube.call(180)\n# false\ndef iscube(a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_iscube\n    candidate = method(:iscube)\n    assert_equal(true, candidate.call(1))\n    assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(-1))\n    assert_equal(true, candidate.call(64))\n    assert_equal(false, candidate.call(180))\n    assert_equal(true, candidate.call(1000))\n    assert_equal(true, candidate.call(0))\n    assert_equal(false, candidate.call(1729))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_78_hex_key", "prompt": "# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n# >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6, candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> decimal_to_binary.call(15)\n# \"db1111db\"\n# >>> decimal_to_binary.call(32)\n# \"db100000db\"\ndef decimal_to_binary(decimal)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_80_is_happy", "prompt": "# You are given a string s.\n# Your task is to check if the string is haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> is_happy.call(\"a\")\n# false\n# >>> is_happy.call(\"aa\")\n# false\n# >>> is_happy.call(\"abcd\")\n# true\n# >>> is_happy.call(\"aabb\")\n# false\n# >>> is_happy.call(\"adb\")\n# true\n# >>> is_happy.call(\"xyy\")\n# false\ndef is_happy(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you an array of GPAs for some students and you have to write \n# a function that can output an array of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> grade_equation.call([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\ndef numerical_letter_grade(grades)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\", \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\", \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_82_prime_length", "prompt": "# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> prime_length.call(\"Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true, candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true, candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true, candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false, candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\ndef starts_one_ends(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_starts_one_ends\n    candidate = method(:starts_one_ends)\n    assert_equal(1, candidate.call(1))\n    assert_equal(18, candidate.call(2))\n    assert_equal(180, candidate.call(3))\n    assert_equal(1800, candidate.call(4))\n    assert_equal(18000, candidate.call(5))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_84_solve", "prompt": "# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> solve.call(1000)\n# \"1\"\n# >>> solve.call(150)\n# \"110\"\n# >>> solve.call(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\ndef solve(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_85_add", "prompt": "# Given a non-empty array of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> anti_shuffle.call(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle.call(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle.call(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\ndef anti_shuffle(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot. How are you?\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_87_get_row", "prompt": "# You are given a 2 dimensional data, as a nested arrays,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the array,\n# and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([], 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_88_sort_array", "prompt": "# Given an array of non-negative integers, return a corb of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> sort_array.call([])\n# []\n# >>> sort_array.call([5])\n# [5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5], candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2, 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0, 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23, 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_89_encrypt", "prompt": "# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"et\")\n# \"ix\"\ndef encrypt(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\", candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"e\", candidate.call(\"a\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "# You are given an array of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the array.\n# Return nil if there is no such element.\n# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1, 1])\n# nil\ndef next_smallest(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1, candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_91_is_bored", "prompt": "# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored.call(\"Hello world\")\n# 0\n# >>> is_bored.call(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\ndef is_bored(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_92_any_int", "prompt": "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n# true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n# true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_93_encode", "prompt": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "# You are given an array of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd.call([0, 8, 1, 2, 1, 7])\n# 7\ndef skjkasdkd(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25, candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81, 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n    assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191, 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "# Given a hash, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>> check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef check_dict_case(dict)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> count_up_to.call(5)\n# [2, 3]\n# >>> count_up_to.call(11)\n# [2, 3, 5, 7]\n# >>> count_up_to.call(0)\n# []\n# >>> count_up_to.call(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to.call(1)\n# []\n# >>> count_up_to.call(18)\n# [2, 3, 5, 7, 11, 13, 17]\ndef count_up_to(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_up_to\n    candidate = method(:count_up_to)\n    assert_equal([2, 3], candidate.call(5))\n    assert_equal([2, 3, 5], candidate.call(6))\n    assert_equal([2, 3, 5], candidate.call(7))\n    assert_equal([2, 3, 5, 7], candidate.call(10))\n    assert_equal([], candidate.call(0))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19], candidate.call(22))\n    assert_equal([], candidate.call(1))\n    assert_equal([2, 3, 5, 7, 11, 13, 17], candidate.call(18))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43], candidate.call(47))\n    assert_equal([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], candidate.call(101))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_97_multiply", "prompt": "# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> multiply.call(148, 412)\n# 16\n# >>> multiply.call(19, 28)\n# 72\n# >>> multiply.call(2020, 1851)\n# 0\n# >>> multiply.call(14, -15)\n# 20\ndef multiply(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020, 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76, 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0, 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_98_count_upper", "prompt": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer.call(\"10\")\n# 10\n# >>> closest_integer.call(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\ndef closest_integer(value)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"-15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"0\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in an array, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile.call(3)\n# [3, 5, 7]\ndef make_a_pile(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9, 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_101_words_string", "prompt": "# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> words_string.call(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string.call(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\ndef words_string(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_string\n    candidate = method(:words_string)\n    assert_equal([\"Hi\", \"my\", \"name\", \"is\", \"John\"], candidate.call(\"Hi, my name is John\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One, two, three, four, five, six\"))\n    assert_equal([\"Hi\", \"my\", \"name\"], candidate.call(\"Hi, my name\"))\n    assert_equal([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], candidate.call(\"One,, two, three, four, five, six,\"))\n    assert_equal([], candidate.call(\"\"))\n    assert_equal([\"ahmed\", \"gamal\"], candidate.call(\"ahmed     , gamal\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_102_choose_num", "prompt": "# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> choose_num.call(12, 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33, 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28, candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1, candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> rounded_avg.call(1, 5)\n# \"0b11\"\n# >>> rounded_avg.call(7, 5)\n# -1\n# >>> rounded_avg.call(10, 20)\n# \"0b1111\"\n# >>> rounded_avg.call(20, 33)\n# \"0b11010\"\ndef rounded_avg(n, m)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "# Given an array of positive integers x. return a sorted array of all \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_105_by_length", "prompt": "# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length.call([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length.call([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5, 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"], candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"], candidate.call([9, 4, 8]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_106_f", "prompt": "# Implement the function f that takes n as a parameter,\n# and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> f.call(5)\n# [1, 2, 6, 24, 15]\ndef f(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal([1, 2, 6, 24, 15], candidate.call(5))\n    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))\n    assert_equal([1], candidate.call(1))\n    assert_equal([1, 2, 6], candidate.call(3))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "# Given a positive integer n, return an array that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> even_odd_palindrome.call(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome.call(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\ndef even_odd_palindrome(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_palindrome\n    candidate = method(:even_odd_palindrome)\n    assert_equal([8, 13], candidate.call(123))\n    assert_equal([4, 6], candidate.call(12))\n    assert_equal([1, 2], candidate.call(3))\n    assert_equal([6, 8], candidate.call(63))\n    assert_equal([5, 6], candidate.call(25))\n    assert_equal([4, 6], candidate.call(19))\n    assert_equal([4, 5], candidate.call(9))\n    assert_equal([0, 1], candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_108_count_nums", "prompt": "# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given array is guaranteed to have unique elements.\n# For Example:\n# >>> move_one_ball.call([3, 4, 5, 1, 2])\n# true\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball.call([3, 5, 4, 1, 2])\n# false\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\ndef move_one_ball(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_one_ball\n    candidate = method(:move_one_ball)\n    assert_equal(true, candidate.call([3, 4, 5, 1, 2]))\n    assert_equal(true, candidate.call([3, 5, 10, 1, 2]))\n    assert_equal(false, candidate.call([4, 3, 1, 2]))\n    assert_equal(false, candidate.call([3, 5, 4, 1, 2]))\n    assert_equal(true, candidate.call([]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_110_exchange", "prompt": "# In this problem, you will implement a function that takes two arrays of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 an array of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange.call([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\ndef exchange(lst1, lst2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_exchange\n    candidate = method(:exchange)\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [1, 2, 3, 4]))\n    assert_equal(\"NO\", candidate.call([1, 2, 3, 4], [1, 5, 3, 4]))\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [2, 1, 4, 3]))\n    assert_equal(\"YES\", candidate.call([5, 7, 3], [2, 6, 4]))\n    assert_equal(\"NO\", candidate.call([5, 7, 3], [2, 6, 3]))\n    assert_equal(\"NO\", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))\n    assert_equal(\"YES\", candidate.call([100, 200], [200, 200]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_111_histogram", "prompt": "# Given a string representing a space separated lowercase letters, return a hash\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4}, candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return an array containing the result string and true/false for the check.\n# Example\n# >>> reverse_delete.call(\"abcde\", \"ae\")\n# [\"bcd\", false]\n# >>> reverse_delete.call(\"abcdef\", \"b\")\n# [\"acdef\", false]\n# >>> reverse_delete.call(\"abcdedcba\", \"ab\")\n# [\"cdedc\", true]\ndef reverse_delete(s, c)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_delete\n    candidate = method(:reverse_delete)\n    assert_equal([\"bcd\", false], candidate.call(\"abcde\", \"ae\"))\n    assert_equal([\"acdef\", false], candidate.call(\"abcdef\", \"b\"))\n    assert_equal([\"cdedc\", true], candidate.call(\"abcdedcba\", \"ab\"))\n    assert_equal([\"dik\", false], candidate.call(\"dwik\", \"w\"))\n    assert_equal([\"\", true], candidate.call(\"a\", \"a\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"\"))\n    assert_equal([\"abcdedcba\", true], candidate.call(\"abcdedcba\", \"v\"))\n    assert_equal([\"abba\", true], candidate.call(\"vabba\", \"v\"))\n    assert_equal([\"\", true], candidate.call(\"mamma\", \"mia\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_113_odd_count", "prompt": "# Given an array of strings, where each string consists of only digits, return an array.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count.call([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count.call([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\ndef odd_count(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_count\n    candidate = method(:odd_count)\n    assert_equal([\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], candidate.call([\"1234567\"]))\n    assert_equal([\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], candidate.call([\"3\", \"11111111\"]))\n    assert_equal([\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"], candidate.call([\"271\", \"137\", \"314\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_115_max_fill", "prompt": "# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> max_fill.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill.call([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\ndef max_fill(grid, capacity)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_fill\n    candidate = method(:max_fill)\n    assert_equal(6, candidate.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))\n    assert_equal(5, candidate.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))\n    assert_equal(0, candidate.call([[0, 0, 0], [0, 0, 0]], 5))\n    assert_equal(4, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 2))\n    assert_equal(2, candidate.call([[1, 1, 1, 1], [1, 1, 1, 1]], 9))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_116_sort_array", "prompt": "# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_117_select_words", "prompt": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns an array of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty array.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\", candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"Above\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_119_match_parens", "prompt": "# You are given an array of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> match_parens.call([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens.call([\")\", \")\"])\n# \"No\"\ndef match_parens(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_match_parens\n    candidate = method(:match_parens)\n    assert_equal(\"Yes\", candidate.call([\"()(\", \")\"]))\n    assert_equal(\"No\", candidate.call([\")\", \")\"]))\n    assert_equal(\"No\", candidate.call([\"(()(())\", \"())())\"]))\n    assert_equal(\"Yes\", candidate.call([\")())\", \"(()()(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(())))\", \"(()())((\"]))\n    assert_equal(\"No\", candidate.call([\"()\", \"())\"]))\n    assert_equal(\"Yes\", candidate.call([\"(()(\", \"()))()\"]))\n    assert_equal(\"No\", candidate.call([\"((((\", \"((())\"]))\n    assert_equal(\"No\", candidate.call([\")(()\", \"(()(\"]))\n    assert_equal(\"No\", candidate.call([\")(\", \")(\"]))\n    assert_equal(\"Yes\", candidate.call([\"(\", \")\"]))\n    assert_equal(\"Yes\", candidate.call([\")\", \"(\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_120_maximum", "prompt": "# Given an array arr of integers and a positive integer k, return a sorted array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_121_solution", "prompt": "# Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> solution.call([5, 8, 7, 1])\n# 12\n# >>> solution.call([3, 3, 3, 3, 3])\n# 9\n# >>> solution.call([30, 13, 24, 321])\n# 0\ndef solution(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7, 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0, candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30, 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_122_add_elements", "prompt": "# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "# Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned array sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz.call(5)\n# [1, 5]\ndef get_odd_collatz(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_odd_collatz\n    candidate = method(:get_odd_collatz)\n    assert_equal([1, 5, 7, 11, 13, 17], candidate.call(14))\n    assert_equal([1, 5], candidate.call(5))\n    assert_equal([1, 3, 5], candidate.call(12))\n    assert_equal([1], candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_124_valid_date", "prompt": "# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> valid_date.call(\"03-11-2000\")\n# true\n# >>> valid_date.call(\"15-01-2012\")\n# false\n# >>> valid_date.call(\"04-0-2040\")\n# false\n# >>> valid_date.call(\"06-04-2020\")\n# true\n# >>> valid_date.call(\"06/04/2020\")\n# false\ndef valid_date(date)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false, candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false, candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true, candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false, candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false, candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_125_split_words", "prompt": "# Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words.call(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"abcdef\")\n# 3\ndef split_words(txt)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_words\n    candidate = method(:split_words)\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello world!\"))\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"Hello,world!\"))\n    assert_equal([\"Hello\", \"world,!\"], candidate.call(\"Hello world,!\"))\n    assert_equal([\"Hello,Hello,world\", \"!\"], candidate.call(\"Hello,Hello,world !\"))\n    assert_equal(3, candidate.call(\"abcdef\"))\n    assert_equal(2, candidate.call(\"aaabb\"))\n    assert_equal(1, candidate.call(\"aaaBb\"))\n    assert_equal(0, candidate.call(\"\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "# Given an array of numbers, return whether or not they are sorted\n# in ascending order. If array has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted.call([5])\n# true\n# >>> is_sorted.call([1, 2, 3, 4, 5])\n# true\n# >>> is_sorted.call([1, 3, 2, 4, 5])\n# false\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6])\n# true\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6, 7])\n# true\n# >>> is_sorted.call([1, 3, 2, 4, 5, 6, 7])\n# false\n# >>> is_sorted.call([1, 2, 2, 3, 3, 4])\n# true\n# >>> is_sorted.call([1, 2, 2, 2, 3, 4])\n# false\ndef is_sorted(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sorted\n    candidate = method(:is_sorted)\n    assert_equal(true, candidate.call([5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))\n    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))\n    assert_equal(true, candidate.call([]))\n    assert_equal(true, candidate.call([1]))\n    assert_equal(false, candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 2, 2, 3, 4]))\n    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3, 3, 4]))\n    assert_equal(true, candidate.call([1, 2, 3, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_127_intersection", "prompt": "# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> intersection.call([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection.call([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection.call([-3, -1], [-5, 5])\n# \"YES\"\ndef intersection(interval1, interval2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1, 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2, 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\", candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2, -2], [-3, -2]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return nil for empty arr.\n# Example:\n# >>> prod_signs.call([1, 2, 2, -4])\n# 9\n# >>> prod_signs.call([0, 1])\n# 0\n# >>> prod_signs.call([])\n# nil\ndef prod_signs(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prod_signs\n    candidate = method(:prod_signs)\n    assert_equal(-9, candidate.call([1, 2, 2, -4]))\n    assert_equal(0, candidate.call([0, 1]))\n    assert_equal(-10, candidate.call([1, 1, 1, 2, 3, -1, 1]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(20, candidate.call([2, 4, 1, 2, -1, -1, 9]))\n    assert_equal(4, candidate.call([-1, 1, -1, 1]))\n    assert_equal(-4, candidate.call([-1, 1, 1, 1]))\n    assert_equal(0, candidate.call([-1, 1, 1, 0]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_129_minPath", "prompt": "# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered arrays of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered array of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> minPath.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\ndef minPath(grid, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minPath\n    candidate = method(:minPath)\n    assert_equal([1, 2, 1], candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n    assert_equal([1], candidate.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n    assert_equal([1, 2, 1, 2], candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4))\n    assert_equal([1, 10, 1, 10, 1, 10, 1], candidate.call([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7))\n    assert_equal([1, 7, 1, 7, 1], candidate.call([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1], candidate.call([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9))\n    assert_equal([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6], candidate.call([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8))\n    assert_equal([1, 5, 1, 5, 1, 5, 1, 5], candidate.call([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8))\n    assert_equal([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], candidate.call([[1, 2], [3, 4]], 10))\n    assert_equal([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], candidate.call([[1, 3], [3, 2]], 10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_130_tri", "prompt": "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return an array of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> tri.call(3)\n# [1, 3, 2, 8]\ndef tri(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tri\n    candidate = method(:tri)\n    assert_equal([1, 3, 2, 8], candidate.call(3))\n    assert_equal([1, 3, 2, 8, 3], candidate.call(4))\n    assert_equal([1, 3, 2, 8, 3, 15], candidate.call(5))\n    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35], candidate.call(9))\n    assert_equal([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))\n    assert_equal([1], candidate.call(0))\n    assert_equal([1, 3], candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_131_digits", "prompt": "# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> digits.call(1)\n# 1\n# >>> digits.call(4)\n# 0\n# >>> digits.call(235)\n# 15\ndef digits(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5, candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5, candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625, candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_132_is_nested", "prompt": "# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> is_nested.call(\"[[]]\")\n# true\n# >>> is_nested.call(\"[]]]]]]][[[[[]\")\n# false\n# >>> is_nested.call(\"[][]\")\n# false\n# >>> is_nested.call(\"[]\")\n# false\n# >>> is_nested.call(\"[[][]]\")\n# true\n# >>> is_nested.call(\"[[]][[\")\n# true\ndef is_nested(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "# You are given an array of numbers.\n# You need to return the sum of squared numbers in the given array,\n# round each element in the array to the upper int(Ceiling) first.\n# Examples:\n# >>> lst.call([1.0, 2.0, 3.0])\n# 14\n# >>> lst.call([1.0, 4.0, 9.0])\n# 98\n# >>> lst.call([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst.call([1.4, 4.2, 0.0])\n# 29\n# >>> lst.call([-2.4, 1.0, 1.0])\n# 6\ndef sum_squares(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84, candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4, 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230, candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0, 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086, candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0, 1.0, 0.0]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> check_if_last_char_is_a_letter.call(\"apple pie\")\n# false\n# >>> check_if_last_char_is_a_letter.call(\"apple pi e\")\n# true\n# >>> check_if_last_char_is_a_letter.call(\"apple pi e \")\n# false\n# >>> check_if_last_char_is_a_letter.call(\"\")\n# false\ndef check_if_last_char_is_a_letter(txt)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_if_last_char_is_a_letter\n    candidate = method(:check_if_last_char_is_a_letter)\n    assert_equal(false, candidate.call(\"apple\"))\n    assert_equal(true, candidate.call(\"apple pi e\"))\n    assert_equal(false, candidate.call(\"eeeee\"))\n    assert_equal(true, candidate.call(\"A\"))\n    assert_equal(false, candidate.call(\"Pumpkin pie \"))\n    assert_equal(false, candidate.call(\"Pumpkin pie 1\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"eeeee e \"))\n    assert_equal(false, candidate.call(\"apple pie\"))\n    assert_equal(false, candidate.call(\"apple pi e \"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> can_arrange.call([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange.call([1, 2, 3])\n# -1\ndef can_arrange(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_can_arrange\n    candidate = method(:can_arrange)\n    assert_equal(3, candidate.call([1, 2, 4, 3, 5]))\n    assert_equal(-1, candidate.call([1, 2, 4, 5]))\n    assert_equal(2, candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))\n    assert_equal(4, candidate.call([4, 8, 5, 7, 3]))\n    assert_equal(-1, candidate.call([]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "# Create a function that returns an array (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n# If there is no negative or positive integers, return them as nil.\n# Examples:\n# >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n# [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2, 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5, 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil, nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_137_compare_one", "prompt": "# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return nil if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> compare_one.call(1, 2.5)\n# 2.5\n# >>> compare_one.call(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one.call(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one.call(\"1\", 1)\n# nil\ndef compare_one(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare_one\n    candidate = method(:compare_one)\n    assert_equal(2, candidate.call(1, 2))\n    assert_equal(2.5, candidate.call(1, 2.5))\n    assert_equal(3, candidate.call(2, 3))\n    assert_equal(6, candidate.call(5, 6))\n    assert_equal(\"2,3\", candidate.call(1, \"2,3\"))\n    assert_equal(\"6\", candidate.call(\"5,1\", \"6\"))\n    assert_equal(\"2\", candidate.call(\"1\", \"2\"))\n    assert_equal(nil, candidate.call(\"1\", 1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> is_equal_to_sum_even.call(4)\n# false\n# >>> is_equal_to_sum_even.call(6)\n# false\n# >>> is_equal_to_sum_even.call(8)\n# true\ndef is_equal_to_sum_even(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_equal_to_sum_even\n    candidate = method(:is_equal_to_sum_even)\n    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(6))\n    assert_equal(true, candidate.call(8))\n    assert_equal(true, candidate.call(10))\n    assert_equal(false, candidate.call(11))\n    assert_equal(true, candidate.call(12))\n    assert_equal(false, candidate.call(13))\n    assert_equal(true, candidate.call(16))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial.call(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\ndef special_factorial(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n    assert_equal(1, candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> fix_spaces.call(\" Example\")\n# \"Example\"\n# >>> fix_spaces.call(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces.call(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces.call(\" Example 3\")\n# \"_Example-3\"\ndef fix_spaces(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2 2 mple\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check.call(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "# \"\n# This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\ndef sum_squares(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n    candidate = method(:sum_squares)\n    assert_equal(6, candidate.call([1, 2, 3]))\n    assert_equal(14, candidate.call([1, 4, 9]))\n    assert_equal(0, candidate.call([]))\n    assert_equal(9, candidate.call([1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    assert_equal(-3, candidate.call([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\n    assert_equal(0, candidate.call([0]))\n    assert_equal(-126, candidate.call([-1, -5, 2, -1, -5]))\n    assert_equal(3030, candidate.call([-56, -99, 1, 0, -2]))\n    assert_equal(0, candidate.call([-1, 0, 0, 0, 0, 0, 0, 0, -1]))\n    assert_equal(-14196, candidate.call([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]))\n    assert_equal(-1448, candidate.call([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_144_simplify", "prompt": "# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify.call(\"1/5\", \"5/1\")\n# true\n# >>> simplify.call(\"1/6\", \"2/1\")\n# false\n# >>> simplify.call(\"7/10\", \"10/2\")\n# false\ndef simplify(x, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_simplify\n    candidate = method(:simplify)\n    assert_equal(true, candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/6\", \"2/1\"))\n    assert_equal(true, candidate.call(\"5/1\", \"3/1\"))\n    assert_equal(false, candidate.call(\"7/10\", \"10/2\"))\n    assert_equal(true, candidate.call(\"2/10\", \"50/10\"))\n    assert_equal(true, candidate.call(\"7/2\", \"4/2\"))\n    assert_equal(true, candidate.call(\"11/6\", \"6/1\"))\n    assert_equal(false, candidate.call(\"2/3\", \"5/2\"))\n    assert_equal(false, candidate.call(\"5/2\", \"3/5\"))\n    assert_equal(true, candidate.call(\"2/4\", \"8/4\"))\n    assert_equal(true, candidate.call(\"2/4\", \"4/2\"))\n    assert_equal(true, candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/5\", \"1/5\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "# Write a function which sorts the given array of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original array.\n# For example:\n# >>> order_by_points.call([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points.call([])\n# []\ndef order_by_points(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter.call([15, -73, 14, -15])\n# 1\n# >>> specialFilter.call([33, -2, -3, 45, 21, 109])\n# 2\ndef specialFilter(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5, -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2, candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43, -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75, 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples.call(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\ndef get_max_triples(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n    assert_equal(53361, candidate.call(100))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_148_bf", "prompt": "# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return an array containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf.call(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\", \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([], candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\", \"Makemake\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "# Write a function that accepts an array of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted array with a sorted order,\n# The array is always an array of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the array should be ascending by length of each word, and you\n# should return the array sorted by that rule.\n# If two words have the same length, sort the array alphabetically.\n# The function should return an array of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort.call([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort.call([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\ndef sorted_list_sum(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sorted_list_sum\n    candidate = method(:sorted_list_sum)\n    assert_equal([\"aa\"], candidate.call([\"aa\", \"a\", \"aaa\"]))\n    assert_equal([\"AI\", \"asdf\", \"school\"], candidate.call([\"school\", \"AI\", \"asdf\", \"b\"]))\n    assert_equal([], candidate.call([\"d\", \"b\", \"c\", \"a\"]))\n    assert_equal([\"abcd\", \"dcba\"], candidate.call([\"d\", \"dcba\", \"abcd\", \"a\"]))\n    assert_equal([\"AI\", \"ai\", \"au\"], candidate.call([\"AI\", \"ai\", \"au\"]))\n    assert_equal([], candidate.call([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]))\n    assert_equal([\"cc\", \"dd\", \"aaaa\", \"bbbb\"], candidate.call([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y.call(7, 34, 12)\n# 34\n# >>> x_or_y.call(15, 8, 5)\n# 5\ndef x_or_y(n, x, y)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_x_or_y\n    candidate = method(:x_or_y)\n    assert_equal(34, candidate.call(7, 34, 12))\n    assert_equal(5, candidate.call(15, 8, 5))\n    assert_equal(33, candidate.call(3, 33, 5212))\n    assert_equal(3, candidate.call(1259, 3, 52))\n    assert_equal(-1, candidate.call(7919, -1, 12))\n    assert_equal(583, candidate.call(3609, 1245, 583))\n    assert_equal(129, candidate.call(91, 56, 129))\n    assert_equal(1234, candidate.call(6, 34, 1234))\n    assert_equal(0, candidate.call(1, 2, 0))\n    assert_equal(2, candidate.call(2, 2, 0))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "# Given an array of numbers, return the sum of squares of the numbers\n# in the array that are odd. Ignore numbers that are negative or not integers.\n# >>> double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1, -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n# 0\n# If the input array is empty, return 0.\ndef double_the_difference(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_152_compare", "prompt": "# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> compare.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game, guess)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "# You will be given the name of a class (a string) and an array of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the array.\n# For example, if you are given \"Slices\" as the class and an array of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension.call(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\ndef Strongest_Extension(class_name, extensions)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> cycpattern_check.call(\"abcd\", \"abd\")\n# false\n# >>> cycpattern_check.call(\"hello\", \"ell\")\n# true\n# >>> cycpattern_check.call(\"whassup\", \"psus\")\n# false\n# >>> cycpattern_check.call(\"abab\", \"baa\")\n# true\n# >>> cycpattern_check.call(\"efef\", \"eeff\")\n# false\n# >>> cycpattern_check.call(\"himenss\", \"simen\")\n# true\ndef cycpattern_check(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cycpattern_check\n    candidate = method(:cycpattern_check)\n    assert_equal(false, candidate.call(\"xyzw\", \"xyw\"))\n    assert_equal(true, candidate.call(\"yello\", \"ell\"))\n    assert_equal(false, candidate.call(\"whattup\", \"ptut\"))\n    assert_equal(true, candidate.call(\"efef\", \"fee\"))\n    assert_equal(false, candidate.call(\"abab\", \"aabb\"))\n    assert_equal(true, candidate.call(\"winemtt\", \"tinem\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "# Given an integer. return an array that has the number of even and odd digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n    assert_equal([1, 0], candidate.call(0))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman.call(19)\n# \"xix\"\n# >>> int_to_mini_roman.call(152)\n# \"clii\"\n# >>> int_to_mini_roman.call(426)\n# \"cdxxvi\"\ndef int_to_mini_roman(number)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1, 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_158_find_max", "prompt": "# Write a function that accepts an array of strings.\n# The array contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> find_max.call([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max.call([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max.call([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\ndef find_max(words)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\", \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\", \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\", \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\", \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_159_eat", "prompt": "# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat.call(5, 6, 10)\n# [11, 4]\n# >>> eat.call(4, 8, 9)\n# [12, 1]\n# >>> eat.call(1, 10, 10)\n# [11, 0]\n# >>> eat.call(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need, remaining)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "# Given two arrays operator, and operand. The first array has basic algebra operations, and \n# the second array is an array of integers. Use the two given arrays to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal to the length of operand array minus one.\n# Operand is an array of of non-negative integers.\n# Operator array has at least one operator, and operand array has at least two operands.\ndef do_algebra(operator, operand)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_161_solve", "prompt": "# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve.call(\"1234\")\n# \"4321\"\n# >>> solve.call(\"ab\")\n# \"AB\"\n# >>> solve.call(\"#a@C\")\n# \"#A@c\"\ndef solve(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return nil.\n# >>> string_to_md5.call(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\ndef string_to_md5(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_md5\n    candidate = method(:string_to_md5)\n    assert_equal(\"3e25960a79dbc69b674cd4ec67a72c62\", candidate.call(\"Hello world\"))\n    assert_equal(nil, candidate.call(\"\"))\n    assert_equal(\"0ef78513b0cb8cef12743f5aeb35f888\", candidate.call(\"A B C\"))\n    assert_equal(\"5f4dcc3b5aa765d61d8327deb882cf99\", candidate.call(\"password\"))\n  end\nend\n", "language": "rb"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> generate_integers.call(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(10, 14)\n# []\ndef generate_integers(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_generate_integers\n    candidate = method(:generate_integers)\n    assert_equal([2, 4, 6, 8], candidate.call(2, 10))\n    assert_equal([2, 4, 6, 8], candidate.call(10, 2))\n    assert_equal([2, 4, 6, 8], candidate.call(132, 2))\n    assert_equal([], candidate.call(17, 89))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "# Write a rbthon function to identify non-prime numbers.\ndef is_not_prime(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_not_prime\n    candidate = method(:is_not_prime)\n    assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(10))\n    assert_equal(true, candidate.call(35))\n    assert_equal(false, candidate.call(37))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "# Write a function to find the n largest integers from a given array of numbers, returned in descending order.\ndef heap_queue_largest(nums, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_heap_queue_largest\n    candidate = method(:heap_queue_largest)\n    assert_equal([85, 75, 65], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 3))\n    assert_equal([85, 75], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 2))\n    assert_equal([85, 75, 65, 58, 35], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "# Write a rbthon function to check whether the two numbers differ at one bit position only or not.\ndef differ_At_One_Bit_Pos(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_differ_At_One_Bit_Pos\n    candidate = method(:differ_At_One_Bit_Pos)\n    assert_equal(true, candidate.call(13, 9))\n    assert_equal(false, candidate.call(15, 8))\n    assert_equal(false, candidate.call(2, 4))\n    assert_equal(true, candidate.call(2, 3))\n    assert_equal(true, candidate.call(5, 1))\n    assert_equal(true, candidate.call(1, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_8_square_nums", "prompt": "# Write a function to find squares of individual elements in an array.\ndef square_nums(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_square_nums\n    candidate = method(:square_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal([100, 400, 900], candidate.call([10, 20, 30]))\n    assert_equal([144, 225], candidate.call([12, 15]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "# Write a rbthon function to find the minimum number of rotations (greater than 0) required to get the same string.\ndef find_Rotations(str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Rotations\n    candidate = method(:find_Rotations)\n    assert_equal(1, candidate.call(\"aaaa\"))\n    assert_equal(2, candidate.call(\"ab\"))\n    assert_equal(3, candidate.call(\"abc\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "# Write a rbthon function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s, ch)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_Occ\n    candidate = method(:remove_Occ)\n    assert_equal(\"heo\", candidate.call(\"hello\", \"l\"))\n    assert_equal(\"bcd\", candidate.call(\"abcda\", \"a\"))\n    assert_equal(\"H\", candidate.call(\"PHP\", \"P\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(m)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_matrix\n    candidate = method(:sort_matrix)\n    assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\n    assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_14_find_Volume", "prompt": "# Write a rbthon function to find the volume of a triangular prism.\ndef find_Volume(l, b, h)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Volume\n    candidate = method(:find_Volume)\n    assert_equal(240, candidate.call(10, 8, 6))\n    assert_equal(6, candidate.call(3, 2, 2))\n    assert_equal(1, candidate.call(1, 2, 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_lowercase_underscore\n    candidate = method(:text_lowercase_underscore)\n    assert_equal(true, candidate.call(\"aab_cbbbc\"))\n    assert_equal(false, candidate.call(\"aab_Abbbc\"))\n    assert_equal(false, candidate.call(\"Aaab_abbbc\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "# Write a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_square_perimeter\n    candidate = method(:square_perimeter)\n    assert_equal(40, candidate.call(10))\n    assert_equal(20, candidate.call(5))\n    assert_equal(16, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "# Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars(string, second_string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_dirty_chars\n    candidate = method(:remove_dirty_chars)\n    assert_equal(\"bacuve\", candidate.call(\"probasscurve\", \"pros\"))\n    assert_equal(\"digiidi\", candidate.call(\"digitalindia\", \"talent\"))\n    assert_equal(\"emles\", candidate.call(\"exoticmiles\", \"toxic\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_test_duplicate\n    candidate = method(:test_duplicate)\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 4]))\n    assert_equal(true, candidate.call([1, 1, 2, 2, 3, 3, 4, 4, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_20_is_woodall", "prompt": "# Write a function to check if the given number is woodball or not.\ndef is_woodall(x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_woodall\n    candidate = method(:is_woodall)\n    assert_equal(true, candidate.call(383))\n    assert_equal(false, candidate.call(254))\n    assert_equal(false, candidate.call(200))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_56_checks", "prompt": "# Write a rbthon function to check if a given number is one less than twice its reverse.\ndef checks(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_checks\n    candidate = method(:checks)\n    assert_equal(false, candidate.call(70))\n    assert_equal(false, candidate.call(23))\n    assert_equal(true, candidate.call(73))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "# Write a rbthon function to find the largest number that can be formed with the given array of digits.\ndef find_Max_Num(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Max_Num\n    candidate = method(:find_Max_Num)\n    assert_equal(321, candidate.call([1, 2, 3]))\n    assert_equal(6541, candidate.call([4, 5, 6, 1]))\n    assert_equal(9321, candidate.call([1, 2, 3, 9]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "# Write a rbthon function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x, y)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_opposite_Signs\n    candidate = method(:opposite_Signs)\n    assert_equal(true, candidate.call(1, -2))\n    assert_equal(false, candidate.call(3, 2))\n    assert_equal(false, candidate.call(-10, -10))\n    assert_equal(true, candidate.call(-2, 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_octagonal\n    candidate = method(:is_octagonal)\n    assert_equal(65, candidate.call(5))\n    assert_equal(280, candidate.call(10))\n    assert_equal(645, candidate.call(15))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "# Write a rbthon function to count the number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Substrings\n    candidate = method(:count_Substrings)\n    assert_equal(6, candidate.call(\"112112\"))\n    assert_equal(6, candidate.call(\"111\"))\n    assert_equal(12, candidate.call(\"1101112\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_62_smallest_num", "prompt": "# Write a rbthon function to find smallest number in an array.\ndef smallest_num(xs)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_smallest_num\n    candidate = method(:smallest_num)\n    assert_equal(1, candidate.call([10, 20, 1, 45, 99]))\n    assert_equal(1, candidate.call([1, 2, 3]))\n    assert_equal(45, candidate.call([45, 46, 50, 60]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_63_max_difference", "prompt": "# Write a function to find the maximum difference between available pairs in the given array array.\ndef max_difference(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_difference\n    candidate = method(:max_difference)\n    assert_equal(7, candidate.call([[3, 5], [1, 7], [10, 3], [1, 2]]))\n    assert_equal(15, candidate.call([[4, 6], [2, 17], [9, 13], [11, 12]]))\n    assert_equal(23, candidate.call([[12, 35], [21, 27], [13, 23], [41, 22]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_64_subject_marks", "prompt": "# Write a function to sort an array of arrays using the second value of each array.\ndef subject_marks(subjectmarks)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_subject_marks\n    candidate = method(:subject_marks)\n    assert_equal([[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]], candidate.call([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]))\n    assert_equal([[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]], candidate.call([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]))\n    assert_equal([[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]], candidate.call([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "# Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum(data_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_recursive_list_sum\n    candidate = method(:recursive_list_sum)\n    assert_equal(21, candidate.call([1, 2, [3, 4], [5, 6]]))\n    assert_equal(106, candidate.call([7, 10, [15, 14], [19, 41]]))\n    assert_equal(210, candidate.call([10, 20, [30, 40], [50, 60]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_66_pos_count", "prompt": "# Write a rbthon function to count the number of positive numbers in an array.\ndef pos_count(list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pos_count\n    candidate = method(:pos_count)\n    assert_equal(2, candidate.call([1, -2, 3, -4]))\n    assert_equal(3, candidate.call([3, 4, 5, -1]))\n    assert_equal(4, candidate.call([1, 2, 3, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_67_bell_number", "prompt": "# Write a function to find the number of ways to partition a set of Bell numbers.\ndef bell_number(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bell_number\n    candidate = method(:bell_number)\n    assert_equal(2, candidate.call(2))\n    assert_equal(115975, candidate.call(10))\n    assert_equal(6775685320645824322581483068371419745979053216268760300, candidate.call(56))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "# Write a rbthon function to check whether the given array is monotonic or not.\ndef is_Monotonic(a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Monotonic\n    candidate = method(:is_Monotonic)\n    assert_equal(true, candidate.call([6, 5, 4, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3]))\n    assert_equal(false, candidate.call([1, 3, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_69_is_sublist", "prompt": "# Write a function to check whether an array contains the given subarray or not.\ndef is_sublist(l, s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sublist\n    candidate = method(:is_sublist)\n    assert_equal(false, candidate.call([2, 4, 3, 5, 7], [3, 7]))\n    assert_equal(true, candidate.call([2, 4, 3, 5, 7], [4, 3]))\n    assert_equal(false, candidate.call([2, 4, 3, 5, 7], [1, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_70_get_equal", "prompt": "# Write a function to find whether all the given arrays have equal length or not.\ndef get_equal(input)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_equal\n    candidate = method(:get_equal)\n    assert_equal(true, candidate.call([[11, 22, 33], [44, 55, 66]]))\n    assert_equal(false, candidate.call([[1, 2, 3], [4, 5, 6, 7]]))\n    assert_equal(true, candidate.call([[1, 2], [3, 4]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_71_comb_sort", "prompt": "# Write a function to sort an array of elements.\ndef comb_sort(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_comb_sort\n    candidate = method(:comb_sort)\n    assert_equal([5, 15, 25, 37, 79], candidate.call([5, 15, 37, 25, 79]))\n    assert_equal([15, 19, 22, 32, 41], candidate.call([41, 32, 15, 19, 22]))\n    assert_equal([13, 15, 47, 99], candidate.call([99, 15, 13, 47]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_72_dif_Square", "prompt": "# Write a rbthon function to check whether the given number can be represented as the difference of two squares or not.\ndef dif_Square(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_dif_Square\n    candidate = method(:dif_Square)\n    assert_equal(true, candidate.call(5))\n    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(15))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_samepatterns\n    candidate = method(:is_samepatterns)\n    assert_equal(true, candidate.call([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]))\n    assert_equal(false, candidate.call([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]))\n    assert_equal(false, candidate.call([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_75_find_tuples", "prompt": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\ndef find_tuples(test_list, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_tuples\n    candidate = method(:find_tuples)\n    assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))\n    assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))\n    assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_77_is_Diff", "prompt": "# Write a rbthon function to find whether a number is divisible by 11.\ndef is_Diff(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Diff\n    candidate = method(:is_Diff)\n    assert_equal(false, candidate.call(12345))\n    assert_equal(true, candidate.call(1212112))\n    assert_equal(false, candidate.call(1212))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_79_word_len", "prompt": "# Write a rbthon function to check whether the length of the word is odd or not.\ndef word_len(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_word_len\n    candidate = method(:word_len)\n    assert_equal(false, candidate.call(\"Hadoop\"))\n    assert_equal(true, candidate.call(\"great\"))\n    assert_equal(true, candidate.call(\"structure\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tetrahedral_number\n    candidate = method(:tetrahedral_number)\n    assert_equal(35, candidate.call(5))\n    assert_equal(56, candidate.call(6))\n    assert_equal(84, candidate.call(7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_83_get_Char", "prompt": "# Write a rbthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_Char\n    candidate = method(:get_Char)\n    assert_equal(\"f\", candidate.call(\"abc\"))\n    assert_equal(\"t\", candidate.call(\"gfg\"))\n    assert_equal(\"c\", candidate.call(\"ab\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_84_sequence", "prompt": "# Write a function to find the nth number in the newman conway sequence.\ndef sequence(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sequence\n    candidate = method(:sequence)\n    assert_equal(6, candidate.call(10))\n    assert_equal(1, candidate.call(2))\n    assert_equal(2, candidate.call(3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_centered_hexagonal_number\n    candidate = method(:centered_hexagonal_number)\n    assert_equal(271, candidate.call(10))\n    assert_equal(7, candidate.call(2))\n    assert_equal(217, candidate.call(9))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "# Write a function to merge three dictionaries into a single hash.\ndef merge_dictionaries_three(dict1, dict2, dict3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_merge_dictionaries_three\n    candidate = method(:merge_dictionaries_three)\n    assert_equal({\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"}, candidate.call({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"}))\n    assert_equal({\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"}, candidate.call({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}))\n    assert_equal({\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"}, candidate.call({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}, {\"G\" => \"Green\", \"W\" => \"White\"}))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_88_freq_count", "prompt": "# Write a function to get the frequency of all the elements in an array, returned as a hash.\ndef freq_count(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_freq_count\n    candidate = method(:freq_count)\n    assert_equal({10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1}, candidate.call([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]))\n    assert_equal({1 => 3, 2 => 2, 3 => 3, 4 => 3}, candidate.call([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]))\n    assert_equal({10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2}, candidate.call([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_89_closest_num", "prompt": "# Write a function to find the closest smaller number than n.\ndef closest_num(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_num\n    candidate = method(:closest_num)\n    assert_equal(10, candidate.call(11))\n    assert_equal(6, candidate.call(7))\n    assert_equal(11, candidate.call(12))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_90_len_log", "prompt": "# Write a rbthon function to find the length of the longest word.\ndef len_log(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_len_log\n    candidate = method(:len_log)\n    assert_equal(7, candidate.call([\"python\", \"PHP\", \"bigdata\"]))\n    assert_equal(3, candidate.call([\"a\", \"ab\", \"abc\"]))\n    assert_equal(5, candidate.call([\"small\", \"big\", \"tall\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_91_find_substring", "prompt": "# Write a function to check if a string is present as a substring in a given array of string values.\ndef find_substring(str1, sub_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_substring\n    candidate = method(:find_substring)\n    assert_equal(true, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))\n    assert_equal(false, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"))\n    assert_equal(true, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_92_is_undulating", "prompt": "# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_undulating\n    candidate = method(:is_undulating)\n    assert_equal(true, candidate.call(1212121))\n    assert_equal(false, candidate.call(1991))\n    assert_equal(true, candidate.call(121))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_93_power", "prompt": "# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power\n    candidate = method(:power)\n    assert_equal(81, candidate.call(3, 4))\n    assert_equal(8, candidate.call(2, 3))\n    assert_equal(3125, candidate.call(5, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_94_index_minimum", "prompt": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\ndef index_minimum(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "# Write a rbthon function to find the length of the smallest array in an array of arrays.\ndef Find_Min_Length(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Min_Length\n    candidate = method(:Find_Min_Length)\n    assert_equal(1, candidate.call([[1], [1, 2]]))\n    assert_equal(2, candidate.call([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))\n    assert_equal(3, candidate.call([[3, 3, 3], [4, 4, 4, 4]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_96_divisor", "prompt": "# Write a rbthon function to find the number of divisors of a given integer.\ndef divisor(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisor\n    candidate = method(:divisor)\n    assert_equal(4, candidate.call(15))\n    assert_equal(6, candidate.call(12))\n    assert_equal(3, candidate.call(9))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "# Write a function to find frequency of each element in a flattened array of arrays, returned in a hash.\ndef frequency_lists(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_frequency_lists\n    candidate = method(:frequency_lists)\n    assert_equal({1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1}, candidate.call([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n    assert_equal({1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1}, candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))\n    assert_equal({20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1}, candidate.call([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef decimal_to_binary(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n    assert_equal(\"1000\", candidate.call(8))\n    assert_equal(\"10010\", candidate.call(18))\n    assert_equal(\"111\", candidate.call(7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest_palindrome\n    candidate = method(:next_smallest_palindrome)\n    assert_equal(101, candidate.call(99))\n    assert_equal(1331, candidate.call(1221))\n    assert_equal(121, candidate.call(120))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_101_kth_element", "prompt": "# Write a function to find the kth element in the given array using 1-based indexing.\ndef kth_element(arr, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_kth_element\n    candidate = method(:kth_element)\n    assert_equal(3, candidate.call([12, 3, 5, 7, 19], 2))\n    assert_equal(8, candidate.call([17, 24, 8, 23], 3))\n    assert_equal(36, candidate.call([16, 21, 25, 36, 4], 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel(word)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"PythonProgram\", candidate.call(\"python_program\"))\n    assert_equal(\"PythonLanguage\", candidate.call(\"python_language\"))\n    assert_equal(\"ProgrammingLanguage\", candidate.call(\"programming_language\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "# Write a function to find the Eulerian number a(n, m).\ndef eulerian_num(n, m)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eulerian_num\n    candidate = method(:eulerian_num)\n    assert_equal(4, candidate.call(3, 1))\n    assert_equal(11, candidate.call(4, 1))\n    assert_equal(26, candidate.call(5, 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "# Write a function to sort each subarray of strings in a given array of arrays.\ndef sort_sublists(input_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_sublists\n    candidate = method(:sort_sublists)\n    assert_equal([[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    assert_equal([[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]], candidate.call([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]))\n    assert_equal([[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]], candidate.call([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_105_count", "prompt": "# Write a rbthon function to count true booleans in the given array.\ndef count(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count\n    candidate = method(:count)\n    assert_equal(2, candidate.call([true, false, true]))\n    assert_equal(0, candidate.call([false, false]))\n    assert_equal(3, candidate.call([true, true, true]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_106_add_lists", "prompt": "# Write a function to append the given array to the given arrays.\ndef add_lists(test_list, test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_lists\n    candidate = method(:add_lists)\n    assert_equal([9, 10, 5, 6, 7], candidate.call([5, 6, 7], [9, 10]))\n    assert_equal([10, 11, 6, 7, 8], candidate.call([6, 7, 8], [10, 11]))\n    assert_equal([11, 12, 7, 8, 9], candidate.call([7, 8, 9], [11, 12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "# Write a function to merge three arrays into a single sorted array.\ndef merge_sorted_list(num1, num2, num3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_merge_sorted_list\n    candidate = method(:merge_sorted_list)\n    assert_equal([4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233], candidate.call([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]))\n    assert_equal([1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12], candidate.call([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]))\n    assert_equal([1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85], candidate.call([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "# Write a rbthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_Equivalent\n    candidate = method(:odd_Equivalent)\n    assert_equal(3, candidate.call(\"011001\", 6))\n    assert_equal(4, candidate.call(\"11011\", 5))\n    assert_equal(2, candidate.call(\"1010\", 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_113_check_integer", "prompt": "# Write a function to check if a string represents an integer or not.\ndef check_integer(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_integer\n    candidate = method(:check_integer)\n    assert_equal(false, candidate.call(\"python\"))\n    assert_equal(true, candidate.call(\"1\"))\n    assert_equal(true, candidate.call(\"12345\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "# Write a function to convert a given array of positive integers into a single integer.\ndef tuple_to_int(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tuple_to_int\n    candidate = method(:tuple_to_int)\n    assert_equal(123, candidate.call([1, 2, 3]))\n    assert_equal(456, candidate.call([4, 5, 6]))\n    assert_equal(567, candidate.call([5, 6, 7]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_117_list_to_float", "prompt": "# Write a function to convert all possible convertible elements in an array of arrays to floats.\ndef list_to_float(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_list_to_float\n    candidate = method(:list_to_float)\n    assert_equal([[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]], candidate.call([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]))\n    assert_equal([[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]], candidate.call([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]))\n    assert_equal([[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]], candidate.call([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_118_string_to_list", "prompt": "# Write a function to convert a string to an array of strings split on the space character.\ndef string_to_list(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_list\n    candidate = method(:string_to_list)\n    assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))\n    assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))\n    assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_119_search", "prompt": "# Write a rbthon function to find the element that appears only once in a sorted array.\ndef search(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n    candidate = method(:search)\n    assert_equal(3, candidate.call([1, 1, 2, 2, 3]))\n    assert_equal(8, candidate.call([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]))\n    assert_equal(1, candidate.call([1, 2, 2, 3, 3, 4, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.\ndef max_product_tuple(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "# Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_amicable_numbers_sum\n    candidate = method(:amicable_numbers_sum)\n    assert_equal(504, candidate.call(999))\n    assert_equal(31626, candidate.call(9999))\n    assert_equal(0, candidate.call(99))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_125_find_length", "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_length\n    candidate = method(:find_length)\n    assert_equal(6, candidate.call(\"11000010001\"))\n    assert_equal(1, candidate.call(\"10111\"))\n    assert_equal(2, candidate.call(\"11011101100101\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_126_sum", "prompt": "# Write a rbthon function to find the sum of common divisors of two given numbers.\ndef sum(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum\n    candidate = method(:sum)\n    assert_equal(6, candidate.call(10, 15))\n    assert_equal(93, candidate.call(100, 150))\n    assert_equal(3, candidate.call(4, 6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_127_multiply_int", "prompt": "# Write a function to multiply two integers.\ndef multiply_int(x, y)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply_int\n    candidate = method(:multiply_int)\n    assert_equal(200, candidate.call(10, 20))\n    assert_equal(50, candidate.call(5, 10))\n    assert_equal(32, candidate.call(4, 8))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_128_long_words", "prompt": "# Write a function to find words that are longer than n characters from a given array of words.\ndef long_words(n, str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_long_words\n    candidate = method(:long_words)\n    assert_equal([\"python\", \"programming\", \"language\"], candidate.call(3, \"python is a programming language\"))\n    assert_equal([\"writing\", \"program\"], candidate.call(2, \"writing a program\"))\n    assert_equal([\"sorting\"], candidate.call(5, \"sorting list\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_magic_square_test\n    candidate = method(:magic_square_test)\n    assert_equal(true, candidate.call([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n    assert_equal(true, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n    assert_equal(false, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "# Write a function to find the item with maximum frequency in a given array.\ndef max_occurrences(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_occurrences\n    candidate = method(:max_occurrences)\n    assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))\n    assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))\n    assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "# Write a rbthon function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_vowels\n    candidate = method(:reverse_vowels)\n    assert_equal(\"Python\", candidate.call(\"Python\"))\n    assert_equal(\"ASU\", candidate.call(\"USA\"))\n    assert_equal(\"ab\", candidate.call(\"ab\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_132_tup_string", "prompt": "# Write a function to convert an array to a string.\ndef tup_string(tup1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tup_string\n    candidate = method(:tup_string)\n    assert_equal(\"exercises\", candidate.call([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]))\n    assert_equal(\"python\", candidate.call([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]))\n    assert_equal(\"program\", candidate.call([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\ndef sum_negativenum(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_negativenum\n    candidate = method(:sum_negativenum)\n    assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n    assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))\n    assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hexagonal_num\n    candidate = method(:hexagonal_num)\n    assert_equal(190, candidate.call(10))\n    assert_equal(45, candidate.call(5))\n    assert_equal(91, candidate.call(7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "# Write a rbthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Sum_Of_Powers_Of_Two\n    candidate = method(:is_Sum_Of_Powers_Of_Two)\n    assert_equal(true, candidate.call(10))\n    assert_equal(false, candidate.call(7))\n    assert_equal(true, candidate.call(14))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "# Write a function to sort an array of elements.\ndef pancake_sort(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pancake_sort\n    candidate = method(:pancake_sort)\n    assert_equal([15, 25, 38, 69, 79], candidate.call([15, 79, 25, 38, 69]))\n    assert_equal([12, 36, 54, 85, 98], candidate.call([98, 12, 54, 36, 85]))\n    assert_equal([12, 23, 32, 41, 42], candidate.call([41, 42, 32, 12, 23]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_142_count_samepair", "prompt": "# Write a function to count number items that are identical in the same position of three given arrays.\ndef count_samepair(list1, list2, list3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_samepair\n    candidate = method(:count_samepair)\n    assert_equal(3, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))\n    assert_equal(4, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]))\n    assert_equal(5, candidate.call([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_143_find_lists", "prompt": "# Write a function to find number of arrays present in the given array.\ndef find_lists(input)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_lists\n    candidate = method(:find_lists)\n    assert_equal(2, candidate.call([[1, 2, 3, 4], [5, 6, 7, 8]]))\n    assert_equal(3, candidate.call([[1, 2], [3, 4], [5, 6]]))\n    assert_equal(1, candidate.call([9, 8, 7, 6, 5, 4, 3, 2, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "# Write a rbthon function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_Abs_Diff\n    candidate = method(:max_Abs_Diff)\n    assert_equal(4, candidate.call([2, 1, 5, 3]))\n    assert_equal(8, candidate.call([9, 3, 2, 5, 1]))\n    assert_equal(2, candidate.call([3, 2, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_160_find_solution", "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.\ndef find_solution(a, b, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_solution\n    candidate = method(:find_solution)\n    assert_equal([2, 1], candidate.call(2, 3, 7))\n    assert_equal(nil, candidate.call(4, 2, 7))\n    assert_equal([4, 1], candidate.call(1, 13, 17))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_161_remove_elements", "prompt": "# Write a function to remove all elements from a given array present in another array.\ndef remove_elements(list1, list2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_elements\n    candidate = method(:remove_elements)\n    assert_equal([1, 3, 5, 7, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))\n    assert_equal([2, 4, 6, 8, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))\n    assert_equal([1, 2, 3, 4, 6, 8, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_162_sum_series", "prompt": "# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_series\n    candidate = method(:sum_series)\n    assert_equal(12, candidate.call(6))\n    assert_equal(30, candidate.call(10))\n    assert_equal(25, candidate.call(9))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "# Write a function to determine if the sum of the divisors of two integers are the same.\ndef are_equivalent(num1, num2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_are_equivalent\n    candidate = method(:are_equivalent)\n    assert_equal(false, candidate.call(36, 57))\n    assert_equal(false, candidate.call(2, 4))\n    assert_equal(true, candidate.call(23, 47))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_165_count_char_position", "prompt": "# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef count_char_position(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_char_position\n    candidate = method(:count_char_position)\n    assert_equal(2, candidate.call(\"xbcefg\"))\n    assert_equal(3, candidate.call(\"ABcED\"))\n    assert_equal(5, candidate.call(\"AbgdeF\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "# Write a function that counts the number of pairs of integers in an array that xor to an even number.\ndef find_even_pair(a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_even_pair\n    candidate = method(:find_even_pair)\n    assert_equal(4, candidate.call([5, 4, 7, 2, 1]))\n    assert_equal(9, candidate.call([7, 2, 8, 1, 0, 5, 11]))\n    assert_equal(1, candidate.call([1, 2, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "# Write a rbthon function to find the smallest power of 2 greater than or equal to n.\ndef next_power_of_2(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_power_of_2\n    candidate = method(:next_power_of_2)\n    assert_equal(1, candidate.call(0))\n    assert_equal(8, candidate.call(5))\n    assert_equal(32, candidate.call(17))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_168_frequency", "prompt": "# Write a function to count the number of occurrences of a number in a given array.\ndef frequency(a, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_frequency\n    candidate = method(:frequency)\n    assert_equal(0, candidate.call([1, 2, 3], 4))\n    assert_equal(3, candidate.call([1, 2, 2, 3, 3, 3, 4], 3))\n    assert_equal(2, candidate.call([0, 1, 2, 3, 1, 2], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "# Write a function to find the sum of numbers in an array within a range specified by two indices.\ndef sum_range_list(list1, m, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_range_list\n    candidate = method(:sum_range_list)\n    assert_equal(29, candidate.call([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10))\n    assert_equal(16, candidate.call([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7))\n    assert_equal(38, candidate.call([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "# Write a function to find the perimeter of a regular pentagon from the length of its sides.\ndef perimeter_pentagon(a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_perimeter_pentagon\n    candidate = method(:perimeter_pentagon)\n    assert_equal(25, candidate.call(5))\n    assert_equal(50, candidate.call(10))\n    assert_equal(75, candidate.call(15))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_172_count_occurance", "prompt": "# Write a function to count the number of occurence of the string 'std' in a given string.\ndef count_occurance(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_occurance\n    candidate = method(:count_occurance)\n    assert_equal(3, candidate.call(\"letstdlenstdporstd\"))\n    assert_equal(1, candidate.call(\"truststdsolensporsd\"))\n    assert_equal(2, candidate.call(\"makestdsostdworthit\"))\n    assert_equal(1, candidate.call(\"stds\"))\n    assert_equal(0, candidate.call(\"\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_222_check_type", "prompt": "# Write a function to check if all the elements in array have same data type or not.\ndef check_type(test_tuple)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_type\n    candidate = method(:check_type)\n    assert_equal(true, candidate.call([5, 6, 7, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, \"4\"]))\n    assert_equal(true, candidate.call([3, 2, 1, 4, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_223_is_majority", "prompt": "# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_majority\n    candidate = method(:is_majority)\n    assert_equal(true, candidate.call([1, 2, 3, 3, 3, 3, 10], 7, 3))\n    assert_equal(false, candidate.call([1, 1, 2, 4, 4, 4, 6, 6], 8, 4))\n    assert_equal(true, candidate.call([1, 1, 1, 2, 2], 5, 1))\n    assert_equal(false, candidate.call([1, 1, 2, 2], 5, 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "# Write a rbthon function to count the number of set bits (binary digits with value 1) in a given number.\ndef count_Set_Bits(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Set_Bits\n    candidate = method(:count_Set_Bits)\n    assert_equal(1, candidate.call(2))\n    assert_equal(1, candidate.call(4))\n    assert_equal(2, candidate.call(6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "# Write a rbthon function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_values_string\n    candidate = method(:odd_values_string)\n    assert_equal(\"ace\", candidate.call(\"abcdef\"))\n    assert_equal(\"pto\", candidate.call(\"python\"))\n    assert_equal(\"dt\", candidate.call(\"data\"))\n    assert_equal(\"lms\", candidate.call(\"lambs\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_227_min_of_three", "prompt": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "# Write a rbthon function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n, l, r)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_Bits_Set_In_The_Given_Range\n    candidate = method(:all_Bits_Set_In_The_Given_Range)\n    assert_equal(true, candidate.call(4, 1, 2))\n    assert_equal(true, candidate.call(17, 2, 4))\n    assert_equal(false, candidate.call(39, 4, 6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef re_arrange_array(arr, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_re_arrange_array\n    candidate = method(:re_arrange_array)\n    assert_equal([-1, -3, -7, 4, 5, 6, 2, 8, 9], candidate.call([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\n    assert_equal([-14, -26, 12, 13, 15], candidate.call([12, -14, -26, 13, 15], 5))\n    assert_equal([-42, -39, -78, 10, 24, 36, 85], candidate.call([10, 24, 36, -42, -39, -78, 85], 7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_230_replace_blank", "prompt": "# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef replace_blank(str1, char)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_blank\n    candidate = method(:replace_blank)\n    assert_equal(\"hello@people\", candidate.call(\"hello people\", \"@\"))\n    assert_equal(\"python$program$language\", candidate.call(\"python program language\", \"$\"))\n    assert_equal(\"blank-space\", candidate.call(\"blank space\", \"-\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_234_volume_cube", "prompt": "# Write a function to find the volume of a cube given its side length.\ndef volume_cube(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_volume_cube\n    candidate = method(:volume_cube)\n    assert_equal(27, candidate.call(3))\n    assert_equal(8, candidate.call(2))\n    assert_equal(125, candidate.call(5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_237_check_occurences", "prompt": "# Write a function that takes in an array of arrays and returns a hash mapping each unique array to the number of times it occurs in the array.\ndef check_occurences(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_occurences\n    candidate = method(:check_occurences)\n    assert_equal({[1, 3] => 2, [2, 5] => 2, [3, 6] => 1}, candidate.call([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]))\n    assert_equal({[2, 4] => 2, [3, 6] => 2, [4, 7] => 1}, candidate.call([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]))\n    assert_equal({[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1}, candidate.call([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "# Write a rbthon function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_number_of_substrings\n    candidate = method(:number_of_substrings)\n    assert_equal(6, candidate.call(\"abc\"))\n    assert_equal(10, candidate.call(\"abcd\"))\n    assert_equal(15, candidate.call(\"abcde\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_total_number_of_sequences\n    candidate = method(:get_total_number_of_sequences)\n    assert_equal(4, candidate.call(10, 4))\n    assert_equal(6, candidate.call(5, 2))\n    assert_equal(84, candidate.call(16, 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_240_replace_list", "prompt": "# Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.\ndef replace_list(list1, list2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_list\n    candidate = method(:replace_list)\n    assert_equal([1, 3, 5, 7, 9, 2, 4, 6, 8], candidate.call([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8], candidate.call([1, 2, 3, 4, 5], [5, 6, 7, 8]))\n    assert_equal([\"red\", \"blue\", \"yellow\"], candidate.call([\"red\", \"blue\", \"green\"], [\"yellow\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_242_count_charac", "prompt": "# Write a function to count the total number of characters in a string.\ndef count_charac(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_charac\n    candidate = method(:count_charac)\n    assert_equal(18, candidate.call(\"python programming\"))\n    assert_equal(8, candidate.call(\"language\"))\n    assert_equal(5, candidate.call(\"words\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "# Write a rbthon function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_Perfect_Square\n    candidate = method(:next_Perfect_Square)\n    assert_equal(36, candidate.call(35))\n    assert_equal(9, candidate.call(6))\n    assert_equal(16, candidate.call(9))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_245_max_sum", "prompt": "# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum\n    candidate = method(:max_sum)\n    assert_equal(194, candidate.call([1, 15, 51, 45, 33, 100, 12, 18, 9]))\n    assert_equal(210, candidate.call([80, 60, 30, 40, 20, 10]))\n    assert_equal(138, candidate.call([2, 3, 14, 16, 21, 23, 29, 30]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_247_lps", "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lps\n    candidate = method(:lps)\n    assert_equal(5, candidate.call(\"TENS FOR TENS\"))\n    assert_equal(7, candidate.call(\"CARDIO FOR CARDS\"))\n    assert_equal(9, candidate.call(\"PART OF THE JOURNEY IS PART\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_249_intersection_array", "prompt": "# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1, array_nums2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection_array\n    candidate = method(:intersection_array)\n    assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))\n    assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))\n    assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_250_count_X", "prompt": "# Write a rbthon function that takes in an array and an element and counts the occcurences of the element in the array.\ndef count_X(tup, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_X\n    candidate = method(:count_X)\n    assert_equal(0, candidate.call([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4))\n    assert_equal(3, candidate.call([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10))\n    assert_equal(4, candidate.call([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_251_insert_element", "prompt": "# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element(list, element)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_insert_element\n    candidate = method(:insert_element)\n    assert_equal([\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"], candidate.call([\"Red\", \"Green\", \"Black\"], \"c\"))\n    assert_equal([\"program\", \"python\", \"program\", \"java\"], candidate.call([\"python\", \"java\"], \"program\"))\n    assert_equal([\"laugh\", \"happy\", \"laugh\", \"sad\"], candidate.call([\"happy\", \"sad\"], \"laugh\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_252_convert", "prompt": "# Write a rbthon function to convert complex numbers to polar coordinates.\ndef convert(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_convert\n    candidate = method(:convert)\n    assert_equal([1.0, 0.0], candidate.call(1))\n    assert_equal([4.0, 0.0], candidate.call(4))\n    assert_equal([5.0, 0.0], candidate.call(5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_253_count_integer", "prompt": "# Write a rbthon function that returns the number of integer elements in a given array.\ndef count_integer(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_integer\n    candidate = method(:count_integer)\n    assert_equal(2, candidate.call([1, 2, \"abc\", 1.2]))\n    assert_equal(3, candidate.call([1, 2, 3]))\n    assert_equal(2, candidate.call([1, 1.2, 4, 5.1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "# Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\ndef combinations_colors(l, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_combinations_colors\n    candidate = method(:combinations_colors)\n    assert_equal([[\"Red\"], [\"Green\"], [\"Blue\"]], candidate.call([\"Red\", \"Green\", \"Blue\"], 1))\n    assert_equal([[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]], candidate.call([\"Red\", \"Green\", \"Blue\"], 2))\n    assert_equal([[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]], candidate.call([\"Red\", \"Green\", \"Blue\"], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "# Write a rbthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Primes_nums\n    candidate = method(:count_Primes_nums)\n    assert_equal(2, candidate.call(5))\n    assert_equal(4, candidate.call(10))\n    assert_equal(25, candidate.call(100))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "# Write a function that takes in two numbers and returns an array with the second number and then the first number.\ndef swap_numbers(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_swap_numbers\n    candidate = method(:swap_numbers)\n    assert_equal([20, 10], candidate.call(10, 20))\n    assert_equal([17, 15], candidate.call(15, 17))\n    assert_equal([200, 100], candidate.call(100, 200))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "# Write a function to maximize the given two arrays.\ndef maximize_elements(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximize_elements\n    candidate = method(:maximize_elements)\n    assert_equal([[6, 7], [4, 9], [2, 9], [7, 10]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[7, 8], [5, 10], [3, 10], [8, 11]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[8, 9], [6, 11], [4, 11], [9, 12]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_260_newman_prime", "prompt": "# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_newman_prime\n    candidate = method(:newman_prime)\n    assert_equal(7, candidate.call(3))\n    assert_equal(17, candidate.call(4))\n    assert_equal(41, candidate.call(5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_261_division_elements", "prompt": "# Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_division_elements\n    candidate = method(:division_elements)\n    assert_equal([2, 2, 2, 3], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))\n    assert_equal([2, 2, 2, 4], candidate.call([12, 6, 8, 16], [6, 3, 4, 4]))\n    assert_equal([4, 2, 6, 2], candidate.call([20, 14, 36, 18], [5, 7, 6, 9]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "# Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\ndef split_two_parts(list1, l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_two_parts\n    candidate = method(:split_two_parts)\n    assert_equal([[1, 1, 2], [3, 4, 4, 5, 1]], candidate.call([1, 1, 2, 3, 4, 4, 5, 1], 3))\n    assert_equal([[\"a\", \"b\"], [\"c\", \"d\"]], candidate.call([\"a\", \"b\", \"c\", \"d\"], 2))\n    assert_equal([[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]], candidate.call([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_264_dog_age", "prompt": "# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_dog_age\n    candidate = method(:dog_age)\n    assert_equal(61, candidate.call(12))\n    assert_equal(73, candidate.call(15))\n    assert_equal(109, candidate.call(24))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_265_list_split", "prompt": "# Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\ndef list_split(s, step)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_list_split\n    candidate = method(:list_split)\n    assert_equal([[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]], candidate.call([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3))\n    assert_equal([[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3))\n    assert_equal([[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]], candidate.call([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "# Write a function to find the lateral surface area of a cube given its side length.\ndef lateralsurface_cube(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lateralsurface_cube\n    candidate = method(:lateralsurface_cube)\n    assert_equal(100, candidate.call(5))\n    assert_equal(324, candidate.call(9))\n    assert_equal(400, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_267_square_Sum", "prompt": "# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef square_Sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_square_Sum\n    candidate = method(:square_Sum)\n    assert_equal(10, candidate.call(2))\n    assert_equal(35, candidate.call(3))\n    assert_equal(84, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_268_find_star_num", "prompt": "# Write a function to find the n'th star number.\ndef find_star_num(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_star_num\n    candidate = method(:find_star_num)\n    assert_equal(37, candidate.call(3))\n    assert_equal(73, candidate.call(4))\n    assert_equal(121, candidate.call(5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_269_ascii_value", "prompt": "# Write a function to find the ascii value of a character.\ndef ascii_value(k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_ascii_value\n    candidate = method(:ascii_value)\n    assert_equal(65, candidate.call(\"A\"))\n    assert_equal(82, candidate.call(\"R\"))\n    assert_equal(83, candidate.call(\"S\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "# Write a rbthon function to find the sum of even numbers at even positions of an array.\ndef sum_even_and_even_index(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_even_and_even_index\n    candidate = method(:sum_even_and_even_index)\n    assert_equal(30, candidate.call([5, 6, 12, 1, 18, 8]))\n    assert_equal(26, candidate.call([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]))\n    assert_equal(12, candidate.call([5, 6, 12, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "# Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_Power_Sum\n    candidate = method(:even_Power_Sum)\n    assert_equal(1056, candidate.call(2))\n    assert_equal(8832, candidate.call(3))\n    assert_equal(32, candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_272_rear_extract", "prompt": "# Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\ndef rear_extract(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rear_extract\n    candidate = method(:rear_extract)\n    assert_equal([21, 20, 19], candidate.call([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]))\n    assert_equal([36, 25, 45], candidate.call([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]))\n    assert_equal([14, 36, 56], candidate.call([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_273_substract_elements", "prompt": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\ndef substract_elements(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_substract_elements\n    candidate = method(:substract_elements)\n    assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))\n    assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))\n    assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "# Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_binomial_Coeff_Sum\n    candidate = method(:even_binomial_Coeff_Sum)\n    assert_equal(8, candidate.call(4))\n    assert_equal(32, candidate.call(6))\n    assert_equal(2, candidate.call(2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_277_dict_filter", "prompt": "# Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.\ndef dict_filter(dict, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_dict_filter\n    candidate = method(:dict_filter)\n    assert_equal({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170))\n    assert_equal({\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180))\n    assert_equal({\"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "# Write a function to find the number of elements that occurs before the array element in the given array.\ndef count_first_elements(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_first_elements\n    candidate = method(:count_first_elements)\n    assert_equal(3, candidate.call([1, 5, 7, [4, 6], 10]))\n    assert_equal(2, candidate.call([2, 9, [5, 7], 11]))\n    assert_equal(4, candidate.call([11, 15, 5, 8, [2, 3], 8]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_num_decagonal\n    candidate = method(:is_num_decagonal)\n    assert_equal(27, candidate.call(3))\n    assert_equal(175, candidate.call(7))\n    assert_equal(370, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_280_sequential_search", "prompt": "# Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef sequential_search(dlist, item)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sequential_search\n    candidate = method(:sequential_search)\n    assert_equal([true, 3], candidate.call([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31))\n    assert_equal([true, 7], candidate.call([12, 32, 45, 62, 35, 47, 44, 61], 61))\n    assert_equal([true, 6], candidate.call([9, 10, 17, 19, 22, 39, 48, 56], 48))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_281_all_unique", "prompt": "# Write a rbthon function to check if the elements of a given array are unique or not.\ndef all_unique(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_unique\n    candidate = method(:all_unique)\n    assert_equal(true, candidate.call([1, 2, 3]))\n    assert_equal(false, candidate.call([1, 2, 1, 2]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_282_sub_list", "prompt": "# Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_283_validate", "prompt": "# Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_validate\n    candidate = method(:validate)\n    assert_equal(true, candidate.call(1234))\n    assert_equal(false, candidate.call(51241))\n    assert_equal(true, candidate.call(321))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_284_check_element", "prompt": "# Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\ndef check_element(list, element)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_element\n    candidate = method(:check_element)\n    assert_equal(false, candidate.call([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))\n    assert_equal(false, candidate.call([1, 2, 3, 4], 7))\n    assert_equal(true, candidate.call([\"green\", \"green\", \"green\", \"green\"], \"green\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef text_match_two_three(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_two_three\n    candidate = method(:text_match_two_three)\n    assert_equal(false, candidate.call(\"ac\"))\n    assert_equal(false, candidate.call(\"dc\"))\n    assert_equal(true, candidate.call(\"abbbba\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sub_array_sum_repeated\n    candidate = method(:max_sub_array_sum_repeated)\n    assert_equal(30, candidate.call([10, 20, -30, -1], 4, 3))\n    assert_equal(59, candidate.call([-1, 10, 20], 3, 2))\n    assert_equal(-1, candidate.call([-1, -2, -3], 3, 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_287_square_Sum", "prompt": "# Write a rbthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef square_Sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_square_Sum\n    candidate = method(:square_Sum)\n    assert_equal(20, candidate.call(2))\n    assert_equal(56, candidate.call(3))\n    assert_equal(120, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_290_max_length", "prompt": "# Write a function to find the array of maximum length in an array of arrays.\ndef max_length(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_length\n    candidate = method(:max_length)\n    assert_equal([3, [13, 15, 17]], candidate.call([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    assert_equal([4, [10, 12, 14, 15]], candidate.call([[1], [5, 7], [10, 12, 14, 15]]))\n    assert_equal([3, [15, 20, 25]], candidate.call([[5], [15, 20, 25]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_no_of_ways\n    candidate = method(:count_no_of_ways)\n    assert_equal(16, candidate.call(2, 4))\n    assert_equal(6, candidate.call(3, 2))\n    assert_equal(228, candidate.call(4, 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_292_find", "prompt": "# Write a rbthon function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n, m)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find\n    candidate = method(:find)\n    assert_equal(3, candidate.call(10, 3))\n    assert_equal(2, candidate.call(4, 2))\n    assert_equal(4, candidate.call(20, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w, h)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_otherside_rightangle\n    candidate = method(:otherside_rightangle)\n    assert_equal(10.63014581273465, candidate.call(7, 8))\n    assert_equal(5, candidate.call(3, 4))\n    assert_equal(16.55294535724685, candidate.call(7, 15))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_294_max_val", "prompt": "# Write a function to find the maximum value in a given heterogeneous array.\ndef max_val(listval)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_val\n    candidate = method(:max_val)\n    assert_equal(5, candidate.call([\"Python\", 3, 2, 4, 5, \"version\"]))\n    assert_equal(25, candidate.call([\"Python\", 15, 20, 25]))\n    assert_equal(50, candidate.call([\"Python\", 30, 20, 40, 50, \"version\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_295_sum_div", "prompt": "# Write a function to return the sum of all divisors of a number.\ndef sum_div(number)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_div\n    candidate = method(:sum_div)\n    assert_equal(7, candidate.call(8))\n    assert_equal(16, candidate.call(12))\n    assert_equal(1, candidate.call(7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "# Write a rbthon function to count inversions in an array.\ndef get_Inv_Count(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_Inv_Count\n    candidate = method(:get_Inv_Count)\n    assert_equal(5, candidate.call([1, 20, 6, 4, 5]))\n    assert_equal(1, candidate.call([1, 2, 1]))\n    assert_equal(3, candidate.call([1, 2, 5, 6, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_297_flatten_list", "prompt": "# Write a function to flatten a given nested array structure.\ndef flatten_list(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flatten_list\n    candidate = method(:flatten_list)\n    assert_equal([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], candidate.call([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))\n    assert_equal([10, 20, 40, 30, 56, 25, 10, 20, 33, 40], candidate.call([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]))\n    assert_equal([1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "# Write a function to calculate the maximum aggregate from the array of arrays.\ndef max_aggregate(stdata)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_aggregate\n    candidate = method(:max_aggregate)\n    assert_equal([\"Juan Whelan\", 212], candidate.call([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]))\n    assert_equal([\"Juan Whelan\", 72], candidate.call([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]))\n    assert_equal([\"Sabah Colley\", 70], candidate.call([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_304_find_Element", "prompt": "# Write a rbthon function to find element at a given index after number of rotations.\ndef find_Element(arr, ranges, rotations, index)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Element\n    candidate = method(:find_Element)\n    assert_equal(3, candidate.call([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1))\n    assert_equal(3, candidate.call([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_305_start_withp", "prompt": "# Write a function to return two words from an array of words starting with letter 'p'.\ndef start_withp(words)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_start_withp\n    candidate = method(:start_withp)\n    assert_equal([\"Python\", \"PHP\"], candidate.call([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n    assert_equal([\"Python\", \"Programming\"], candidate.call([\"Python Programming\", \"Java Programming\"]))\n    assert_equal([\"Pqrst\", \"Pqr\"], candidate.call([\"Pqrst Pqr\", \"qrstuv\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_increasing_subseq\n    candidate = method(:max_sum_increasing_subseq)\n    assert_equal(11, candidate.call([1, 101, 2, 3, 100, 4, 5], 7, 4, 6))\n    assert_equal(7, candidate.call([1, 101, 2, 3, 100, 4, 5], 7, 2, 5))\n    assert_equal(71, candidate.call([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_308_large_product", "prompt": "# Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\ndef large_product(nums1, nums2, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_large_product\n    candidate = method(:large_product)\n    assert_equal([60, 54, 50], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))\n    assert_equal([60, 54, 50, 48], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))\n    assert_equal([60, 54, 50, 48, 45], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_309_maximum", "prompt": "# Write a rbthon function to find the maximum of two numbers.\ndef maximum(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n    assert_equal(10, candidate.call(5, 10))\n    assert_equal(-1, candidate.call(-1, -2))\n    assert_equal(9, candidate.call(9, 7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "# Write a function to convert a given string to an array of characters.\ndef string_to_tuple(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_to_tuple\n    candidate = method(:string_to_tuple)\n    assert_equal([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"], candidate.call(\"python 3.0\"))\n    assert_equal([\"i\", \"t\", \"e\", \"m\", \"1\"], candidate.call(\"item1\"))\n    assert_equal([\"1\", \"5\", \".\", \"1\", \"0\"], candidate.call(\"15.10\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "# Write a rbthon function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_highest_Power_of_2\n    candidate = method(:highest_Power_of_2)\n    assert_equal(8, candidate.call(10))\n    assert_equal(16, candidate.call(19))\n    assert_equal(32, candidate.call(32))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_389_find_lucas", "prompt": "# Write a function to find the n'th lucas number.\ndef find_lucas(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_lucas\n    candidate = method(:find_lucas)\n    assert_equal(76, candidate.call(9))\n    assert_equal(7, candidate.call(4))\n    assert_equal(4, candidate.call(3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_390_add_string", "prompt": "# Write a function to apply a given format string to all of the elements in an array.\ndef add_string(list_, string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_string\n    candidate = method(:add_string)\n    assert_equal([\"temp1\", \"temp2\", \"temp3\", \"temp4\"], candidate.call([1, 2, 3, 4], \"temp{0}\"))\n    assert_equal([\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"], candidate.call([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"))\n    assert_equal([\"string5\", \"string6\", \"string7\", \"string8\"], candidate.call([5, 6, 7, 8], \"string{0}\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "# Write a function to convert more than one array to nested hash.\ndef convert_list_dictionary(l1, l2, l3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_convert_list_dictionary\n    candidate = method(:convert_list_dictionary)\n    assert_equal([{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}], candidate.call([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    assert_equal([{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}], candidate.call([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]))\n    assert_equal([{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}], candidate.call([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_sum\n    candidate = method(:get_max_sum)\n    assert_equal(106, candidate.call(60))\n    assert_equal(12, candidate.call(10))\n    assert_equal(2, candidate.call(2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_393_max_length_list", "prompt": "# Write a function to find the array with maximum length.\ndef max_length_list(input_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_length_list\n    candidate = method(:max_length_list)\n    assert_equal([3, [13, 15, 17]], candidate.call([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    assert_equal([5, [1, 2, 3, 4, 5]], candidate.call([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]))\n    assert_equal([4, [6, 7, 8, 9]], candidate.call([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_394_check_distinct", "prompt": "# Write a function to check if given array contains no duplicates.\ndef check_distinct(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_distinct\n    candidate = method(:check_distinct)\n    assert_equal(false, candidate.call([1, 4, 5, 6, 1, 4]))\n    assert_equal(true, candidate.call([1, 4, 5, 6]))\n    assert_equal(true, candidate.call([2, 3, 4, 5, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "# Write a rbthon function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_non_repeating_character\n    candidate = method(:first_non_repeating_character)\n    assert_equal(nil, candidate.call(\"abcabc\"))\n    assert_equal(\"a\", candidate.call(\"abc\"))\n    assert_equal(\"c\", candidate.call(\"ababc\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_396_check_char", "prompt": "# Write a function to check whether the given string starts and ends with the same character or not.\ndef check_char(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_char\n    candidate = method(:check_char)\n    assert_equal(\"Valid\", candidate.call(\"abba\"))\n    assert_equal(\"Valid\", candidate.call(\"a\"))\n    assert_equal(\"Invalid\", candidate.call(\"abcd\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_397_median_numbers", "prompt": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "# Write a function to compute the sum of digits of each number of a given array.\ndef sum_of_digits(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_of_digits\n    candidate = method(:sum_of_digits)\n    assert_equal(14, candidate.call([10, 2, 56]))\n    assert_equal(19, candidate.call([[10, 20, 4, 5, \"b\", 70, \"a\"]]))\n    assert_equal(19, candidate.call([10, 20, -4, 5, -70]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "# Write a function to perform the mathematical bitwise xor operation across the given arrays.\ndef bitwise_xor(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bitwise_xor\n    candidate = method(:bitwise_xor)\n    assert_equal([15, 6, 5, 10], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))\n    assert_equal([13, 6, 3, 14], candidate.call([11, 5, 7, 10], [6, 3, 4, 4]))\n    assert_equal([11, 2, 13, 13], candidate.call([12, 6, 8, 11], [7, 4, 5, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_400_extract_freq", "prompt": "# Write a function to extract the number of unique arrays in the given array.\ndef extract_freq(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_freq\n    candidate = method(:extract_freq)\n    assert_equal(3, candidate.call([[3, 4], [1, 2], [4, 3], [5, 6]]))\n    assert_equal(4, candidate.call([[4, 15], [2, 3], [5, 4], [6, 7]]))\n    assert_equal(4, candidate.call([[5, 16], [2, 3], [6, 5], [6, 9]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "# Write a function to perform index wise addition of array elements in the given two nested arrays.\ndef add_nested_tuples(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_nested_tuples\n    candidate = method(:add_nested_tuples)\n    assert_equal([[7, 10], [7, 14], [3, 10], [8, 13]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[9, 12], [9, 16], [5, 12], [10, 15]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[11, 14], [11, 18], [7, 14], [12, 17]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_404_minimum", "prompt": "# Write a rbthon function to find the minimum of two numbers.\ndef minimum(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minimum\n    candidate = method(:minimum)\n    assert_equal(1, candidate.call(1, 2))\n    assert_equal(-5, candidate.call(-5, -4))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "# Write a function to check whether an element exists within an array.\ndef check_tuplex(tuplex, tuple1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_tuplex\n    candidate = method(:check_tuplex)\n    assert_equal(true, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\"))\n    assert_equal(false, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\"))\n    assert_equal(true, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_406_find_Parity", "prompt": "# Write a rbthon function to find whether the parity of a given number is odd.\ndef find_Parity(x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Parity\n    candidate = method(:find_Parity)\n    assert_equal(false, candidate.call(12))\n    assert_equal(true, candidate.call(7))\n    assert_equal(false, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "# Write a function to find the minimum product from the pairs of arrays within a given array.\ndef min_product_tuple(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_product_tuple\n    candidate = method(:min_product_tuple)\n    assert_equal(8, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(30, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(100, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_410_min_val", "prompt": "# Write a function to find the minimum value in a given heterogeneous array.\ndef min_val(listval)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_val\n    candidate = method(:min_val)\n    assert_equal(2, candidate.call([\"Python\", 3, 2, 4, 5, \"version\"]))\n    assert_equal(15, candidate.call([\"Python\", 15, 20, 25]))\n    assert_equal(20, candidate.call([\"Python\", 30, 20, 40, 50, \"version\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_snake_to_camel\n    candidate = method(:snake_to_camel)\n    assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))\n    assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))\n    assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_412_remove_odd", "prompt": "# Write a rbthon function to remove odd numbers from a given array.\ndef remove_odd(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_odd\n    candidate = method(:remove_odd)\n    assert_equal([2], candidate.call([1, 2, 3]))\n    assert_equal([2, 4, 6], candidate.call([2, 4, 6]))\n    assert_equal([10, 20], candidate.call([10, 20, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "# Write a function to extract the nth element from a given array of arrays.\ndef extract_nth_element(list1, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_nth_element\n    candidate = method(:extract_nth_element)\n    assert_equal([\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0))\n    assert_equal([99, 96, 94, 98], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2))\n    assert_equal([98, 97, 91, 94], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_414_overlapping", "prompt": "# Write a rbthon function to check whether any value in a sequence exists in a sequence or not.\ndef overlapping(list1, list2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_overlapping\n    candidate = method(:overlapping)\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5], [6, 7, 8, 9]))\n    assert_equal(false, candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal(true, candidate.call([1, 4, 5], [1, 4, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_415_max_Product", "prompt": "# Write a rbthon function to find a pair with highest product from a given array of integers.\ndef max_Product(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_Product\n    candidate = method(:max_Product)\n    assert_equal([7, 8], candidate.call([1, 2, 3, 4, 7, 0, 8, 4]))\n    assert_equal([-4, -6], candidate.call([0, -1, -2, -4, 5, 0, -6]))\n    assert_equal([2, 3], candidate.call([1, 2, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_417_group_tuples", "prompt": "# Write a function to find common first element in given array of arrays.\ndef group_tuples(input)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_group_tuples\n    candidate = method(:group_tuples)\n    assert_equal([[\"x\", \"y\", \"z\"], [\"w\", \"t\"]], candidate.call([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]))\n    assert_equal([[\"a\", \"b\", \"c\"], [\"d\", \"e\"]], candidate.call([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]))\n    assert_equal([[\"f\", \"g\", \"g\"], [\"h\", \"i\"]], candidate.call([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_418_Find_Max", "prompt": "# Write a rbthon function to find the element of an array having maximum length.\ndef Find_Max(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Max\n    candidate = method(:Find_Max)\n    assert_equal([\"A\", \"B\", \"C\"], candidate.call([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]))\n    assert_equal([1, 2, 3], candidate.call([[1], [1, 2], [1, 2, 3]]))\n    assert_equal([1, 5, 6, 1], candidate.call([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "# Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.\ndef round_and_sum(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_round_and_sum\n    candidate = method(:round_and_sum)\n    assert_equal(243, candidate.call([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]))\n    assert_equal(345, candidate.call([5, 2, 9, 24.3, 29]))\n    assert_equal(513, candidate.call([25.0, 56.7, 89.2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "# Write a rbthon function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cube_Sum\n    candidate = method(:cube_Sum)\n    assert_equal(72, candidate.call(2))\n    assert_equal(288, candidate.call(3))\n    assert_equal(800, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "# Write a function to concatenate each element of array by the delimiter.\ndef concatenate_tuple(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_concatenate_tuple\n    candidate = method(:concatenate_tuple)\n    assert_equal(\"ID-is-4-UTS\", candidate.call([\"ID\", \"is\", 4, \"UTS\"]))\n    assert_equal(\"QWE-is-4-RTY\", candidate.call([\"QWE\", \"is\", 4, \"RTY\"]))\n    assert_equal(\"ZEN-is-4-OP\", candidate.call([\"ZEN\", \"is\", 4, \"OP\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "# Write a rbthon function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Average_Of_Cube\n    candidate = method(:find_Average_Of_Cube)\n    assert_equal(4.5, candidate.call(2))\n    assert_equal(12, candidate.call(3))\n    assert_equal(1, candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_424_extract_rear", "prompt": "# Write a function to extract only the rear index element of each string in the given array.\ndef extract_rear(test_tuple)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_rear\n    candidate = method(:extract_rear)\n    assert_equal([\"s\", \"r\", \"s\"], candidate.call([\"Mers\", \"for\", \"Vers\"]))\n    assert_equal([\"e\", \"r\", \"e\"], candidate.call([\"Avenge\", \"for\", \"People\"]))\n    assert_equal([\"a\", \"t\", \"o\"], candidate.call([\"Gotta\", \"get\", \"go\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "# Write a function to count the number of subarrays containing a particular element.\ndef count_element_in_list(list1, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_element_in_list\n    candidate = method(:count_element_in_list)\n    assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))\n    assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))\n    assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "# Write a function to filter odd numbers.\ndef filter_oddnumbers(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_oddnumbers\n    candidate = method(:filter_oddnumbers)\n    assert_equal([1, 3, 5, 7, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal([45, 67, 93], candidate.call([10, 20, 45, 67, 84, 93]))\n    assert_equal([5, 7, 9, 3], candidate.call([5, 7, 9, 8, 6, 4, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_427_change_date_format", "prompt": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_date_format\n    candidate = method(:change_date_format)\n    assert_equal(\"02-01-2026\", candidate.call(\"2026-01-02\"))\n    assert_equal(\"13-11-2020\", candidate.call(\"2020-11-13\"))\n    assert_equal(\"26-04-2021\", candidate.call(\"2021-04-26\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_428_shell_sort", "prompt": "# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_shell_sort\n    candidate = method(:shell_sort)\n    assert_equal([2, 3, 4, 5, 12, 12, 23, 56, 81, 95], candidate.call([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))\n    assert_equal([22, 24, 34, 39, 68, 73, 87], candidate.call([24, 22, 39, 34, 87, 73, 68]))\n    assert_equal([16, 30, 32, 74, 82, 83, 96], candidate.call([32, 30, 16, 96, 82, 83, 74]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_429_and_tuples", "prompt": "# Write a function to extract the elementwise and arrays from the given two arrays.\ndef and_tuples(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_and_tuples\n    candidate = method(:and_tuples)\n    assert_equal([0, 0, 2, 1], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))\n    assert_equal([1, 2, 3, 0], candidate.call([1, 2, 3, 4], [5, 6, 7, 8]))\n    assert_equal([0, 9, 10, 0], candidate.call([8, 9, 11, 12], [7, 13, 14, 17]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parabola_directrix\n    candidate = method(:parabola_directrix)\n    assert_equal(-198, candidate.call(5, 3, 2))\n    assert_equal(-2336, candidate.call(9, 8, 4))\n    assert_equal(-130, candidate.call(2, 4, 6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_431_common_element", "prompt": "# Write a function that takes two arrays and returns true if they have at least one common element.\ndef common_element(list1, list2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common_element\n    candidate = method(:common_element)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))\n    assert_equal(nil, candidate.call([1, 2, 3, 4, 5], [6, 7, 8, 9]))\n    assert_equal(true, candidate.call([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1, base2, height)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_trapezium\n    candidate = method(:median_trapezium)\n    assert_equal(20, candidate.call(15, 25, 35))\n    assert_equal(15, candidate.call(10, 20, 30))\n    assert_equal(7.5, candidate.call(6, 9, 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_433_check_greater", "prompt": "# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_greater\n    candidate = method(:check_greater)\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5], 4))\n    assert_equal(true, candidate.call([2, 3, 4, 5, 6], 8))\n    assert_equal(true, candidate.call([9, 7, 4, 8, 6, 1], 11))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_434_text_match_one", "prompt": "# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_one\n    candidate = method(:text_match_one)\n    assert_equal(false, candidate.call(\"ac\"))\n    assert_equal(false, candidate.call(\"dc\"))\n    assert_equal(true, candidate.call(\"abba\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_435_last_Digit", "prompt": "# Write a rbthon function to find the last digit of a given number.\ndef last_Digit(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_last_Digit\n    candidate = method(:last_Digit)\n    assert_equal(3, candidate.call(123))\n    assert_equal(5, candidate.call(25))\n    assert_equal(0, candidate.call(30))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_436_neg_nos", "prompt": "# Write a rbthon function to return the negative numbers in an array.\ndef neg_nos(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_neg_nos\n    candidate = method(:neg_nos)\n    assert_equal([-1, -6], candidate.call([-1, 4, 5, -6]))\n    assert_equal([-1, -2], candidate.call([-1, -2, 3, 4]))\n    assert_equal([-7, -6], candidate.call([-7, -6, 8, 9]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_437_remove_odd", "prompt": "# Write a function to remove odd characters in a string.\ndef remove_odd(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_odd\n    candidate = method(:remove_odd)\n    assert_equal(\"yhn\", candidate.call(\"python\"))\n    assert_equal(\"rga\", candidate.call(\"program\"))\n    assert_equal(\"agae\", candidate.call(\"language\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "# Write a function to count bidirectional array pairs.\ndef count_bidirectional(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_bidirectional\n    candidate = method(:count_bidirectional)\n    assert_equal(3, candidate.call([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]))\n    assert_equal(2, candidate.call([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]))\n    assert_equal(4, candidate.call([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "# Write a function to join an array of multiple integers into a single integer.\ndef multiple_to_single(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiple_to_single\n    candidate = method(:multiple_to_single)\n    assert_equal(113350, candidate.call([11, 33, 50]))\n    assert_equal(-123456, candidate.call([-1, 2, 3, 4, 5, 6]))\n    assert_equal(10152025, candidate.call([10, 15, 20, 25]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_adverb_position\n    candidate = method(:find_adverb_position)\n    assert_equal([0, 7, \"clearly\"], candidate.call(\"clearly!! we can see the sky\"))\n    assert_equal([0, 9, \"seriously\"], candidate.call(\"seriously!! there are many roses\"))\n    assert_equal([0, 13, \"unfortunately\"], candidate.call(\"unfortunately!! sita is going to home\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "# Write a function to find the surface area of a cube of a given size.\ndef surfacearea_cube(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_surfacearea_cube\n    candidate = method(:surfacearea_cube)\n    assert_equal(150, candidate.call(5))\n    assert_equal(54, candidate.call(3))\n    assert_equal(600, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_442_positive_count", "prompt": "# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_positive_count\n    candidate = method(:positive_count)\n    assert_equal(0.54, candidate.call([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n    assert_equal(0.69, candidate.call([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\n    assert_equal(0.56, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_443_largest_neg", "prompt": "# Write a rbthon function to find the largest negative number from the given array.\ndef largest_neg(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_neg\n    candidate = method(:largest_neg)\n    assert_equal(-6, candidate.call([1, 2, 3, -4, -6]))\n    assert_equal(-9, candidate.call([1, 2, 3, -8, -9]))\n    assert_equal(-1, candidate.call([1, 2, 3, 4, -1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "# Write a function to trim each array by k in the given arrays.\ndef trim_tuple(test_list, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_trim_tuple\n    candidate = method(:trim_tuple)\n    assert_equal([[2], [9], [2], [2]], candidate.call([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2))\n    assert_equal([[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]], candidate.call([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1))\n    assert_equal([[8, 4], [8, 12], [1, 7], [6, 9]], candidate.call([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "# Write a function to perform index wise multiplication of array elements in the given two arrays.\ndef index_multiplication(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_multiplication\n    candidate = method(:index_multiplication)\n    assert_equal([[6, 21], [12, 45], [2, 9], [7, 30]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[14, 32], [20, 60], [6, 20], [16, 44]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[24, 45], [30, 77], [12, 33], [27, 60]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "# Write a rbthon function to count the occurence of all elements of array in an array.\ndef count_Occurrence(tup, lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Occurrence\n    candidate = method(:count_Occurrence)\n    assert_equal(3, candidate.call([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"]))\n    assert_equal(6, candidate.call([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]))\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5, 6], [1, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_447_cube_nums", "prompt": "# Write a function to find cubes of individual elements in an array.\ndef cube_nums(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cube_nums\n    candidate = method(:cube_nums)\n    assert_equal([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30]))\n    assert_equal([1728, 3375], candidate.call([12, 15]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_448_cal_sum", "prompt": "# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cal_sum\n    candidate = method(:cal_sum)\n    assert_equal(49, candidate.call(9))\n    assert_equal(66, candidate.call(10))\n    assert_equal(88, candidate.call(11))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_450_extract_string", "prompt": "# Write a function to extract specified size of strings from a given array of string values.\ndef extract_string(str, l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_string\n    candidate = method(:extract_string)\n    assert_equal([\"practice\", \"solution\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8))\n    assert_equal([\"Python\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6))\n    assert_equal([\"exercises\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "# Write a function to remove all whitespaces from the given string.\ndef remove_whitespaces(text1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_whitespaces\n    candidate = method(:remove_whitespaces)\n    assert_equal(\"GoogleFlutter\", candidate.call(\" Google    Flutter \"))\n    assert_equal(\"GoogleDart\", candidate.call(\" Google    Dart \"))\n    assert_equal(\"iOSSwift\", candidate.call(\" iOS    Swift \"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_452_loss_amount", "prompt": "# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost, sale_amount)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_loss_amount\n    candidate = method(:loss_amount)\n    assert_equal(0, candidate.call(1500, 1200))\n    assert_equal(100, candidate.call(100, 200))\n    assert_equal(3000, candidate.call(2000, 5000))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "# Write a rbthon function to find the sum of even factors of a number.\ndef sumofFactors(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sumofFactors\n    candidate = method(:sumofFactors)\n    assert_equal(26, candidate.call(18))\n    assert_equal(48, candidate.call(30))\n    assert_equal(8, candidate.call(6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_wordz\n    candidate = method(:text_match_wordz)\n    assert_equal(true, candidate.call(\"pythonz.\"))\n    assert_equal(true, candidate.call(\"xyz.\"))\n    assert_equal(false, candidate.call(\"  lang  .\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_monthnumb_number\n    candidate = method(:check_monthnumb_number)\n    assert_equal(true, candidate.call(5))\n    assert_equal(false, candidate.call(2))\n    assert_equal(false, candidate.call(6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "# Write a function to reverse each string in a given array of string values.\ndef reverse_string_list(stringlist)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_string_list\n    candidate = method(:reverse_string_list)\n    assert_equal([\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"], candidate.call([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]))\n    assert_equal([\"nhoj\", \"lama\", \"leoj\", \"egroeg\"], candidate.call([\"john\", \"amal\", \"joel\", \"george\"]))\n    assert_equal([\"kcaj\", \"nhoj\", \"yram\"], candidate.call([\"jack\", \"john\", \"mary\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_457_Find_Min", "prompt": "# Write a rbthon function to find the subarray having minimum length.\ndef Find_Min(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Min\n    candidate = method(:Find_Min)\n    assert_equal([1], candidate.call([[1], [1, 2], [1, 2, 3]]))\n    assert_equal([1, 1], candidate.call([[1, 1], [1, 1, 1], [1, 2, 7, 8]]))\n    assert_equal([\"x\"], candidate.call([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "# Write a function to find the area of a rectangle.\ndef rectangle_area(l, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rectangle_area\n    candidate = method(:rectangle_area)\n    assert_equal(200, candidate.call(10, 20))\n    assert_equal(50, candidate.call(10, 5))\n    assert_equal(8, candidate.call(4, 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "# Write a function to remove uppercase substrings from a given string.\ndef remove_uppercase(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_uppercase\n    candidate = method(:remove_uppercase)\n    assert_equal(\"cstyoravoitshos\", candidate.call(\"cAstyoUrFavoRitETVshoWs\"))\n    assert_equal(\"wtchheinerntrdo\", candidate.call(\"wAtchTheinTernEtrAdIo\"))\n    assert_equal(\"oiceachndreomendaion\", candidate.call(\"VoicESeaRchAndreComMendaTionS\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_460_Extract", "prompt": "# Write a rbthon function to get the first element of each subarray.\ndef Extract(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Extract\n    candidate = method(:Extract)\n    assert_equal([1, 3, 6], candidate.call([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n    assert_equal([1, 4], candidate.call([[1, 2, 3], [4, 5]]))\n    assert_equal([9, 1], candidate.call([[9, 8, 1], [1, 2]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "# Write a rbthon function to count the upper case characters in a given string.\ndef upper_ctr(str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_upper_ctr\n    candidate = method(:upper_ctr)\n    assert_equal(1, candidate.call(\"PYthon\"))\n    assert_equal(1, candidate.call(\"BigData\"))\n    assert_equal(0, candidate.call(\"program\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_462_combinations_list", "prompt": "# Write a function to find all possible combinations of the elements of a given array.\ndef combinations_list(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_combinations_list\n    candidate = method(:combinations_list)\n    assert_equal([[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]], candidate.call([\"orange\", \"red\", \"green\", \"blue\"]))\n    assert_equal([[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]], candidate.call([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]))\n    assert_equal([[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]], candidate.call([\"red\", \"green\", \"black\", \"orange\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_subarray_product\n    candidate = method(:max_subarray_product)\n    assert_equal(112, candidate.call([1, -2, -3, 0, 7, -8, -2]))\n    assert_equal(180, candidate.call([6, -3, -10, 0, 2]))\n    assert_equal(80, candidate.call([-2, -40, 0, -2, -3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_464_check_value", "prompt": "# Write a function to check if all values are same in a hash.\ndef check_value(dict, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_value\n    candidate = method(:check_value)\n    assert_equal(false, candidate.call({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 10))\n    assert_equal(true, candidate.call({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 12))\n    assert_equal(false, candidate.call({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_465_drop_empty", "prompt": "# Write a function to drop empty items from a given hash.\ndef drop_empty(dict1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_drop_empty\n    candidate = method(:drop_empty)\n    assert_equal({\"c1\" => \"Red\", \"c2\" => \"Green\"}, candidate.call({\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => nil}))\n    assert_equal({\"c1\" => \"Red\"}, candidate.call({\"c1\" => \"Red\", \"c2\" => nil, \"c3\" => nil}))\n    assert_equal({\"c2\" => \"Green\"}, candidate.call({\"c1\" => nil, \"c2\" => \"Green\", \"c3\" => nil}))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_468_max_product", "prompt": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product\n    candidate = method(:max_product)\n    assert_equal(3000, candidate.call([3, 100, 4, 5, 150, 6]))\n    assert_equal(50265600, candidate.call([4, 42, 55, 68, 80]))\n    assert_equal(2460, candidate.call([10, 22, 9, 33, 21, 50, 41, 60]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given array.\ndef add_pairwise(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_pairwise\n    candidate = method(:add_pairwise)\n    assert_equal([6, 12, 15, 18], candidate.call([1, 5, 7, 8, 10]))\n    assert_equal([8, 14, 17, 20], candidate.call([2, 6, 8, 9, 11]))\n    assert_equal([10, 16, 19, 22], candidate.call([3, 7, 9, 10, 12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_471_find_remainder", "prompt": "# Write a rbthon function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_remainder\n    candidate = method(:find_remainder)\n    assert_equal(9, candidate.call([100, 10, 5, 25, 35, 14], 11))\n    assert_equal(0, candidate.call([1, 1, 1], 1))\n    assert_equal(0, candidate.call([1, 2, 1], 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "# Write a rbthon function to check whether the given array contains consecutive numbers or not.\ndef check_Consecutive(l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_474_replace_char", "prompt": "# Write a function to replace characters in a string.\ndef replace_char(str1, ch, newch)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_char\n    candidate = method(:replace_char)\n    assert_equal(\"pollgon\", candidate.call(\"polygon\", \"y\", \"l\"))\n    assert_equal(\"aharaater\", candidate.call(\"character\", \"c\", \"a\"))\n    assert_equal(\"python\", candidate.call(\"python\", \"l\", \"a\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_475_sort_counter", "prompt": "# Write a function to sort a hash by value.\ndef sort_counter(dict1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_counter\n    candidate = method(:sort_counter)\n    assert_equal([[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]], candidate.call({\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87}))\n    assert_equal([[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]], candidate.call({\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250}))\n    assert_equal([[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]], candidate.call({\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250}))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_476_big_sum", "prompt": "# Write a rbthon function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_big_sum\n    candidate = method(:big_sum)\n    assert_equal(4, candidate.call([1, 2, 3]))\n    assert_equal(3, candidate.call([-1, 2, 3, 4]))\n    assert_equal(8, candidate.call([2, 3, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_477_is_lower", "prompt": "# Write a rbthon function to convert the given string to lower case.\ndef is_lower(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_lower\n    candidate = method(:is_lower)\n    assert_equal(\"invalid\", candidate.call(\"InValid\"))\n    assert_equal(\"true\", candidate.call(\"TruE\"))\n    assert_equal(\"sentence\", candidate.call(\"SenTenCE\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_lowercase\n    candidate = method(:remove_lowercase)\n    assert_equal(\"PYTH\", candidate.call(\"PYTHon\"))\n    assert_equal(\"FID\", candidate.call(\"FInD\"))\n    assert_equal(\"STRG\", candidate.call(\"STRinG\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_479_first_Digit", "prompt": "# Write a rbthon function to find the first digit of a given number.\ndef first_Digit(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_Digit\n    candidate = method(:first_Digit)\n    assert_equal(1, candidate.call(123))\n    assert_equal(4, candidate.call(456))\n    assert_equal(1, candidate.call(12))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_554_Split", "prompt": "# Write a rbthon function which takes an array of integers and only returns the odd ones.\ndef Split(list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal([11, 13], candidate.call([10, 11, 12, 13]))\n    assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_555_difference", "prompt": "# Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_difference\n    candidate = method(:difference)\n    assert_equal(30, candidate.call(3))\n    assert_equal(210, candidate.call(5))\n    assert_equal(6, candidate.call(2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "# Write a rbthon function to count the number of pairs whose xor value is odd.\ndef find_Odd_Pair(a, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Odd_Pair\n    candidate = method(:find_Odd_Pair)\n    assert_equal(6, candidate.call([5, 4, 7, 2, 1], 5))\n    assert_equal(12, candidate.call([7, 2, 8, 1, 0, 5, 11], 7))\n    assert_equal(2, candidate.call([1, 2, 3], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_557_toggle_string", "prompt": "# Write a function to toggle the case of all characters in a string.\ndef toggle_string(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_toggle_string\n    candidate = method(:toggle_string)\n    assert_equal(\"pYTHON\", candidate.call(\"Python\"))\n    assert_equal(\"pANGRAM\", candidate.call(\"Pangram\"))\n    assert_equal(\"liTTle\", candidate.call(\"LIttLE\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "# Write a rbthon function to find the sum of the per-digit difference between two integers.\ndef digit_distance_nums(n1, n2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digit_distance_nums\n    candidate = method(:digit_distance_nums)\n    assert_equal(1, candidate.call(1, 2))\n    assert_equal(6, candidate.call(23, 56))\n    assert_equal(7, candidate.call(123, 256))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "# Write a function to find the sum of the largest contiguous subarray in the given array.\ndef max_sub_array_sum(a, size)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sub_array_sum\n    candidate = method(:max_sub_array_sum)\n    assert_equal(7, candidate.call([-2, -3, 4, -1, -2, 1, 5, -3], 8))\n    assert_equal(8, candidate.call([-3, -4, 5, -2, -3, 2, 6, -4], 8))\n    assert_equal(10, candidate.call([-4, -5, 6, -3, -4, 3, 7, -5], 8))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_560_union_elements", "prompt": "# Write a function to find the union of the elements of two given arrays and output them in sorted order.\ndef union_elements(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_union_elements\n    candidate = method(:union_elements)\n    assert_equal([3, 4, 5, 6, 7, 10], candidate.call([3, 4, 5, 6], [5, 7, 4, 10]))\n    assert_equal([1, 2, 3, 4, 5, 6], candidate.call([1, 2, 3, 4], [3, 4, 5, 6]))\n    assert_equal([11, 12, 13, 14, 15, 16, 17], candidate.call([11, 12, 13, 14], [13, 15, 16, 17]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "# Write a rbthon function to find the length of the longest subarrays.\ndef Find_Max_Length(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Find_Max_Length\n    candidate = method(:Find_Max_Length)\n    assert_equal(4, candidate.call([[1], [1, 4], [5, 6, 7, 8]]))\n    assert_equal(3, candidate.call([[0, 1], [2, 2], [3, 2, 1]]))\n    assert_equal(5, candidate.call([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_563_extract_values", "prompt": "# Write a function to extract values between quotation marks from a string.\ndef extract_values(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_values\n    candidate = method(:extract_values)\n    assert_equal([\"Python\", \"PHP\", \"Java\"], candidate.call(\"\"Python\", \"PHP\", \"Java\"\"))\n    assert_equal([\"python\", \"program\", \"language\"], candidate.call(\"\"python\",\"program\",\"language\"\"))\n    assert_equal([\"red\", \"blue\", \"green\", \"yellow\"], candidate.call(\"\"red\",\"blue\",\"green\",\"yellow\"\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "# Write a rbthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef count_Pairs(arr, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Pairs\n    candidate = method(:count_Pairs)\n    assert_equal(2, candidate.call([1, 2, 1], 3))\n    assert_equal(0, candidate.call([1, 1, 1, 1], 4))\n    assert_equal(10, candidate.call([1, 2, 3, 4, 5], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_565_split", "prompt": "# Write a rbthon function to split a string into characters.\ndef split(word)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split\n    candidate = method(:split)\n    assert_equal([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], candidate.call(\"python\"))\n    assert_equal([\"N\", \"a\", \"m\", \"e\"], candidate.call(\"Name\"))\n    assert_equal([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"], candidate.call(\"program\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_566_sum_digits", "prompt": "# Write a function to get the sum of the digits of a non-negative integer.\ndef sum_digits(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_digits\n    candidate = method(:sum_digits)\n    assert_equal(12, candidate.call(345))\n    assert_equal(3, candidate.call(12))\n    assert_equal(16, candidate.call(97))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_567_issort_list", "prompt": "# Write a function to check whether a specified array is sorted or not.\ndef issort_list(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_issort_list\n    candidate = method(:issort_list)\n    assert_equal(true, candidate.call([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]))\n    assert_equal(false, candidate.call([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]))\n    assert_equal(false, candidate.call([1, 2, 4, 6, 8, 10, 15, 14, 20]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_568_empty_list", "prompt": "# Write a function to create an array of N empty dictionaries.\ndef empty_list(length)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_empty_list\n    candidate = method(:empty_list)\n    assert_equal([{}, {}, {}, {}, {}], candidate.call(5))\n    assert_equal([{}, {}, {}, {}, {}, {}], candidate.call(6))\n    assert_equal([{}, {}, {}, {}, {}, {}, {}], candidate.call(7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "# Write a function to sort each subarray of strings in a given array of arrays.\ndef sort_sublists(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_sublists\n    candidate = method(:sort_sublists)\n    assert_equal([[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    assert_equal([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]))\n    assert_equal([[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]], candidate.call([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "# Write a rbthon function to remove duplicate numbers from a given number of arrays.\ndef two_unique_nums(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_two_unique_nums\n    candidate = method(:two_unique_nums)\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 3, 4, 5]))\n    assert_equal([1, 3, 4, 5], candidate.call([1, 2, 3, 2, 4, 5]))\n    assert_equal([1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_573_unique_product", "prompt": "# Write a rbthon function to calculate the product of the unique numbers in a given array.\ndef unique_product(list_data)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_product\n    candidate = method(:unique_product)\n    assert_equal(720000000, candidate.call([10, 20, 30, 40, 20, 50, 60, 40]))\n    assert_equal(6, candidate.call([1, 2, 3, 1]))\n    assert_equal(0, candidate.call([7, 8, 9, 0, 1, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "# Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r, h)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_surfacearea_cylinder\n    candidate = method(:surfacearea_cylinder)\n    assert_equal(942.45, candidate.call(10, 5))\n    assert_equal(226.18800000000002, candidate.call(4, 5))\n    assert_equal(351.848, candidate.call(4, 10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "# Write a rbthon function to check whether an array is subarray of another or not.\ndef is_Sub_Array(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Sub_Array\n    candidate = method(:is_Sub_Array)\n    assert_equal(false, candidate.call([1, 4, 3, 5], [1, 2]))\n    assert_equal(true, candidate.call([1, 2, 1], [1, 2, 1]))\n    assert_equal(false, candidate.call([1, 0, 2, 2], [2, 2, 0]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "# Write a rbthon function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_last_Digit_Factorial\n    candidate = method(:last_Digit_Factorial)\n    assert_equal(4, candidate.call(4))\n    assert_equal(0, candidate.call(21))\n    assert_equal(0, candidate.call(30))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "# Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists(list1, list2, list3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_interleave_lists\n    candidate = method(:interleave_lists)\n    assert_equal([1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700], candidate.call([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))\n    assert_equal([10, 15, 5, 20, 2, 10], candidate.call([10, 20], [15, 2], [5, 10]))\n    assert_equal([11, 10, 20, 44, 15, 5], candidate.call([11, 44], [10, 15], [20, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "# Write a function to find the dissimilar elements in the given two arrays.\ndef find_dissimilar(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_dissimilar\n    candidate = method(:find_dissimilar)\n    assert_equal([3, 6, 7, 10], candidate.call([3, 4, 5, 6], [5, 7, 4, 10]))\n    assert_equal([1, 4, 7, 9], candidate.call([1, 2, 3, 4], [7, 2, 3, 9]))\n    assert_equal([34, 36, 11, 25], candidate.call([21, 11, 25, 26], [26, 34, 21, 36]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_580_extract_even", "prompt": "# Write a function to remove uneven elements in the nested mixed array.\ndef extract_even(test_tuple)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_even\n    candidate = method(:extract_even)\n    assert_equal([4, [6, [2, 4]], 6, 8], candidate.call([4, 5, [7, 6, [2, 4]], 6, 8]))\n    assert_equal([6, [8, [4, 8]]], candidate.call([5, 6, [8, 7, [4, 8]], 7, 9]))\n    assert_equal([6, [8, [4, 6]], 8, 10], candidate.call([5, 6, [9, 8, [4, 6]], 8, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_581_surface_Area", "prompt": "# Write a rbthon function to find the surface area of a square rbramid with a given base edge and height.\ndef surface_Area(b, s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_surface_Area\n    candidate = method(:surface_Area)\n    assert_equal(33, candidate.call(3, 4))\n    assert_equal(56, candidate.call(4, 5))\n    assert_equal(5, candidate.call(1, 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_583_catalan_number", "prompt": "# Write a function which returns nth catalan number.\ndef catalan_number(num)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_catalan_number\n    candidate = method(:catalan_number)\n    assert_equal(16796, candidate.call(10))\n    assert_equal(4862, candidate.call(9))\n    assert_equal(429, candidate.call(7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "# Write a function to find the first adverb ending with ly and its positions in a given string.\ndef find_adverbs(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_adverbs\n    candidate = method(:find_adverbs)\n    assert_equal(\"0-7: Clearly\", candidate.call(\"Clearly, he has no excuse for such behavior.\"))\n    assert_equal(\"28-36: carefuly\", candidate.call(\"Please handle the situation carefuly\"))\n    assert_equal(\"18-25: quickly\", candidate.call(\"Complete the task quickly\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_585_expensive_items", "prompt": "# Write a function to find the n most expensive items in a given dataset.\ndef expensive_items(items, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_expensive_items\n    candidate = method(:expensive_items)\n    assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1))\n    assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}], 2))\n    assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_586_split_Arr", "prompt": "# Write a rbthon function to split an array at the nth eelment and add the first part to the end.\ndef split_Arr(l, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_Arr\n    candidate = method(:split_Arr)\n    assert_equal([5, 6, 52, 36, 12, 10], candidate.call([12, 10, 5, 6, 52, 36], 2))\n    assert_equal([2, 3, 4, 1], candidate.call([1, 2, 3, 4], 1))\n    assert_equal([3, 4, 5, 6, 7, 0, 1, 2], candidate.call([0, 1, 2, 3, 4, 5, 6, 7], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_587_list_tuple", "prompt": "# Write a function to convert an array to an array.\ndef list_tuple(listx)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_list_tuple\n    candidate = method(:list_tuple)\n    assert_equal([5, 10, 7, 4, 15, 3], candidate.call([5, 10, 7, 4, 15, 3]))\n    assert_equal([2, 4, 5, 6, 2, 3, 4, 4, 7], candidate.call([2, 4, 5, 6, 2, 3, 4, 4, 7]))\n    assert_equal([58, 44, 56], candidate.call([58, 44, 56]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_588_big_diff", "prompt": "# Write a rbthon function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_big_diff\n    candidate = method(:big_diff)\n    assert_equal(3, candidate.call([1, 2, 3, 4]))\n    assert_equal(8, candidate.call([4, 5, 12]))\n    assert_equal(7, candidate.call([9, 2, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "# Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_perfect_squares\n    candidate = method(:perfect_squares)\n    assert_equal([1, 4, 9, 16, 25], candidate.call(1, 30))\n    assert_equal([64, 81, 100], candidate.call(50, 100))\n    assert_equal([100, 121, 144, 169, 196], candidate.call(100, 200))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_591_swap_List", "prompt": "# Write a rbthon function to interchange the first and last elements in an array.\ndef swap_List(newlist)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_swap_List\n    candidate = method(:swap_List)\n    assert_equal([24, 35, 9, 56, 12], candidate.call([12, 35, 9, 56, 24]))\n    assert_equal([3, 2, 1], candidate.call([1, 2, 3]))\n    assert_equal([6, 5, 4], candidate.call([4, 5, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "# Write a rbthon function to find the sum of the product of consecutive binomial co-efficients.\ndef sum_Of_product(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_Of_product\n    candidate = method(:sum_Of_product)\n    assert_equal(15, candidate.call(3))\n    assert_equal(56, candidate.call(4))\n    assert_equal(1, candidate.call(1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "# Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_removezero_ip\n    candidate = method(:removezero_ip)\n    assert_equal(\"216.8.94.196\", candidate.call(\"216.08.094.196\"))\n    assert_equal(\"12.1.24\", candidate.call(\"12.01.024\"))\n    assert_equal(\"216.8.94.196\", candidate.call(\"216.08.094.0196\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "# Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_diff_even_odd\n    candidate = method(:diff_even_odd)\n    assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(9, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "# Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_Swaps\n    candidate = method(:min_Swaps)\n    assert_equal(1, candidate.call(\"1101\", \"1110\"))\n    assert_equal(\"Not Possible\", candidate.call(\"111\", \"000\"))\n    assert_equal(\"Not Possible\", candidate.call(\"111\", \"110\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_597_find_kth", "prompt": "# Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_kth\n    candidate = method(:find_kth)\n    assert_equal(6, candidate.call([2, 3, 6, 7, 9], [1, 4, 8, 10], 5))\n    assert_equal(256, candidate.call([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7))\n    assert_equal(8, candidate.call([3, 4, 7, 8, 10], [2, 5, 9, 11], 6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "# Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_armstrong_number\n    candidate = method(:armstrong_number)\n    assert_equal(true, candidate.call(153))\n    assert_equal(false, candidate.call(259))\n    assert_equal(false, candidate.call(4458))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_599_sum_average", "prompt": "# Write a function to find sum and average of first n natural numbers.\ndef sum_average(number)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_average\n    candidate = method(:sum_average)\n    assert_equal([55, 5.5], candidate.call(10))\n    assert_equal([120, 8.0], candidate.call(15))\n    assert_equal([210, 10.5], candidate.call(20))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_600_is_Even", "prompt": "# Write a rbthon function to check whether the given number is even or not.\ndef is_Even(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Even\n    candidate = method(:is_Even)\n    assert_equal(false, candidate.call(1))\n    assert_equal(true, candidate.call(2))\n    assert_equal(false, candidate.call(3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "# Write a rbthon function to find the first repeated character in a given string.\ndef first_repeated_char(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_repeated_char\n    candidate = method(:first_repeated_char)\n    assert_equal(\"a\", candidate.call(\"abcabc\"))\n    assert_equal(nil, candidate.call(\"abc\"))\n    assert_equal(\"1\", candidate.call(\"123123\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_603_get_ludic", "prompt": "# Write a function to get all lucid numbers smaller than or equal to a given integer.\ndef get_ludic(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_ludic\n    candidate = method(:get_ludic)\n    assert_equal([1, 2, 3, 5, 7], candidate.call(10))\n    assert_equal([1, 2, 3, 5, 7, 11, 13, 17, 23, 25], candidate.call(25))\n    assert_equal([1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43], candidate.call(45))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_604_reverse_words", "prompt": "# Write a function to reverse words seperated by spaces in a given string.\ndef reverse_words(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_words\n    candidate = method(:reverse_words)\n    assert_equal(\"program python\", candidate.call(\"python program\"))\n    assert_equal(\"language java\", candidate.call(\"java language\"))\n    assert_equal(\"man indian\", candidate.call(\"indian man\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_605_prime_num", "prompt": "# Write a function to check if the given integer is a prime number.\ndef prime_num(num)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_num\n    candidate = method(:prime_num)\n    assert_equal(true, candidate.call(13))\n    assert_equal(true, candidate.call(7))\n    assert_equal(false, candidate.call(-1010))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_606_radian_degree", "prompt": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_607_find_literals", "prompt": "# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_literals(text, pattern)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_literals\n    candidate = method(:find_literals)\n    assert_equal([\"fox\", 16, 19], candidate.call(\"The quick brown fox jumps over the lazy dog.\", \"fox\"))\n    assert_equal([\"crazy\", 16, 21], candidate.call(\"Its been a very crazy procedure right\", \"crazy\"))\n    assert_equal([\"will\", 35, 39], candidate.call(\"Hardest choices required strongest will\", \"will\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_608_bell_Number", "prompt": "# Write a rbthon function to find nth bell number.\ndef bell_Number(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bell_Number\n    candidate = method(:bell_Number)\n    assert_equal(2, candidate.call(2))\n    assert_equal(5, candidate.call(3))\n    assert_equal(15, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "# Write a rbthon function which takes an array and returns an array with the same elements, but the k'th element removed.\ndef remove_kth_element(list1, l)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_kth_element\n    candidate = method(:remove_kth_element)\n    assert_equal([1, 1, 3, 4, 4, 5, 1], candidate.call([1, 1, 2, 3, 4, 4, 5, 1], 3))\n    assert_equal([0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4))\n    assert_equal([10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\ndef max_of_nth(test_list, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_of_nth\n    candidate = method(:max_of_nth)\n    assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))\n    assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))\n    assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_612_merge", "prompt": "# Write a rbthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\ndef merge(lst)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_merge\n    candidate = method(:merge)\n    assert_equal([[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]], candidate.call([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]))\n    assert_equal([[1, 3, 5, 7], [2, 4, 6, 8]], candidate.call([[1, 2], [3, 4], [5, 6], [7, 8]]))\n    assert_equal([[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]], candidate.call([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "# Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\ndef cummulative_sum(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cummulative_sum\n    candidate = method(:cummulative_sum)\n    assert_equal(30, candidate.call([[1, 3], [5, 6, 7], [2, 6]]))\n    assert_equal(37, candidate.call([[2, 4], [6, 7, 8], [3, 7]]))\n    assert_equal(44, candidate.call([[3, 5], [7, 8, 9], [4, 8]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_615_average_tuple", "prompt": "# Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.\ndef average_tuple(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_average_tuple\n    candidate = method(:average_tuple)\n    assert_equal([30.5, 34.25, 27.0, 23.25], candidate.call([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]))\n    assert_equal([25.5, -18.0, 3.75], candidate.call([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]))\n    assert_equal([305.0, 342.5, 270.0, 232.5], candidate.call([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "# Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tuple_modulo\n    candidate = method(:tuple_modulo)\n    assert_equal([0, 4, 5, 1], candidate.call([10, 4, 5, 6], [5, 6, 7, 5]))\n    assert_equal([5, 5, 6, 1], candidate.call([11, 5, 6, 7], [6, 7, 8, 6]))\n    assert_equal([5, 6, 7, 1], candidate.call([12, 6, 7, 8], [7, 8, 9, 7]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(steps, d)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_Jumps\n    candidate = method(:min_Jumps)\n    assert_equal(3.5, candidate.call([3, 4], 11))\n    assert_equal(0, candidate.call([3, 4], 0))\n    assert_equal(1, candidate.call([11, 14], 11))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_618_div_list", "prompt": "# Write a function to divide two arrays element wise.\ndef div_list(nums1, nums2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_div_list\n    candidate = method(:div_list)\n    assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))\n    assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))\n    assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_619_move_num", "prompt": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_622_get_median", "prompt": "# Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_median\n    candidate = method(:get_median)\n    assert_equal(16.0, candidate.call([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))\n    assert_equal(8.5, candidate.call([2, 4, 8, 9], [7, 13, 19, 28], 4))\n    assert_equal(25.0, candidate.call([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_623_nth_nums", "prompt": "# Write a function to compute the n-th power of each number in an array.\ndef nth_nums(nums, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_nth_nums\n    candidate = method(:nth_nums)\n    assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))\n    assert_equal([248832, 759375], candidate.call([12, 15], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_624_is_upper", "prompt": "# Write a rbthon function to convert a given string to uppercase.\ndef is_upper(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_upper\n    candidate = method(:is_upper)\n    assert_equal(\"PERSON\", candidate.call(\"person\"))\n    assert_equal(\"FINAL\", candidate.call(\"final\"))\n    assert_equal(\"VALID\", candidate.call(\"Valid\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_625_swap_List", "prompt": "# Write a rbthon function to interchange the first and last element in a given array.\ndef swap_List(newlist)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_swap_List\n    candidate = method(:swap_List)\n    assert_equal([3, 2, 1], candidate.call([1, 2, 3]))\n    assert_equal([4, 2, 3, 4, 1], candidate.call([1, 2, 3, 4, 4]))\n    assert_equal([6, 5, 4], candidate.call([4, 5, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_626_triangle_area", "prompt": "# Write a rbthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef triangle_area(r)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n    candidate = method(:triangle_area)\n    assert_equal(nil, candidate.call(-1))\n    assert_equal(0, candidate.call(0))\n    assert_equal(4, candidate.call(2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "# Write a rbthon function to find the smallest missing number from a sorted array of natural numbers.\ndef find_First_Missing(array)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_First_Missing\n    candidate = method(:find_First_Missing)\n    assert_equal(4, candidate.call([0, 1, 2, 3]))\n    assert_equal(3, candidate.call([0, 1, 2, 6, 9]))\n    assert_equal(0, candidate.call([2, 3, 5, 8, 9]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "# Write a function to replace all spaces in the given string with '%20'.\ndef replace_spaces(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_spaces\n    candidate = method(:replace_spaces)\n    assert_equal(\"My%20Name%20is%20Dawood\", candidate.call(\"My Name is Dawood\"))\n    assert_equal(\"I%20am%20a%20Programmer\", candidate.call(\"I am a Programmer\"))\n    assert_equal(\"I%20love%20Coding\", candidate.call(\"I love Coding\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_629_Split", "prompt": "# Write a rbthon function to find even numbers from an array of numbers.\ndef Split(list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Split\n    candidate = method(:Split)\n    assert_equal([2, 4], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([4, 6, 8, 0], candidate.call([4, 5, 6, 7, 8, 0, 1]))\n    assert_equal([8, 12], candidate.call([8, 12, 15, 19]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate array.\ndef get_coordinates(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_coordinates\n    candidate = method(:get_coordinates)\n    assert_equal([[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]], candidate.call([3, 4]))\n    assert_equal([[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]], candidate.call([4, 5]))\n    assert_equal([[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]], candidate.call([5, 6]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "# Write a function to replace whitespaces with an underscore and vice versa in a given string.\ndef replace_spaces(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_spaces\n    candidate = method(:replace_spaces)\n    assert_equal(\"Jumanji_The_Jungle\", candidate.call(\"Jumanji The Jungle\"))\n    assert_equal(\"The Avengers\", candidate.call(\"The_Avengers\"))\n    assert_equal(\"Fast_and_Furious\", candidate.call(\"Fast and Furious\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_632_move_zero", "prompt": "# Write a rbthon function to move all zeroes to the end of the given array.\ndef move_zero(num_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "# Write a rbthon function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_xor_Sum(arr, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pair_xor_Sum\n    candidate = method(:pair_xor_Sum)\n    assert_equal(47, candidate.call([5, 9, 7, 6], 4))\n    assert_equal(12, candidate.call([7, 3, 5], 3))\n    assert_equal(4, candidate.call([7, 3], 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_635_heap_sort", "prompt": "# Write a function to sort the given array.\ndef heap_sort(iterable)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_heap_sort\n    candidate = method(:heap_sort)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n    assert_equal([14, 22, 25, 25, 35, 58, 65, 75, 85], candidate.call([25, 35, 22, 85, 14, 65, 75, 25, 58]))\n    assert_equal([1, 5, 7, 9], candidate.call([7, 1, 9, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "# Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost, sale_amount)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_noprofit_noloss\n    candidate = method(:noprofit_noloss)\n    assert_equal(false, candidate.call(1500, 1200))\n    assert_equal(true, candidate.call(100, 100))\n    assert_equal(false, candidate.call(2000, 5000))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_638_wind_chill", "prompt": "# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef wind_chill(v, t)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_wind_chill\n    candidate = method(:wind_chill)\n    assert_equal(40, candidate.call(120, 35))\n    assert_equal(19, candidate.call(40, 20))\n    assert_equal(6, candidate.call(10, 8))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_639_sample_nam", "prompt": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sample_nam\n    candidate = method(:sample_nam)\n    assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))\n    assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))\n    assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "# Write a function to remove the parenthesis and what is inbetween them from a string.\ndef remove_parenthesis(items)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_parenthesis\n    candidate = method(:remove_parenthesis)\n    assert_equal(\"python\", candidate.call([\"python (chrome)\"]))\n    assert_equal(\"string\", candidate.call([\"string(.abc)\"]))\n    assert_equal(\"alpha\", candidate.call([\"alpha(num)\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nonagonal\n    candidate = method(:is_nonagonal)\n    assert_equal(325, candidate.call(10))\n    assert_equal(750, candidate.call(15))\n    assert_equal(1089, candidate.call(18))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "# Write a function that checks if a strings contains 'z', except at the start and end of the word.\ndef text_match_wordz_middle(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_wordz_middle\n    candidate = method(:text_match_wordz_middle)\n    assert_equal(true, candidate.call(\"pythonzabc.\"))\n    assert_equal(false, candidate.call(\"zxyabc.\"))\n    assert_equal(false, candidate.call(\"  lang  .\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "# Write a rbthon function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_Array_Upto_K\n    candidate = method(:reverse_Array_Upto_K)\n    assert_equal([4, 3, 2, 1, 5, 6], candidate.call([1, 2, 3, 4, 5, 6], 4))\n    assert_equal([5, 4, 6, 7], candidate.call([4, 5, 6, 7], 2))\n    assert_equal([7, 8, 9, 6, 5], candidate.call([9, 8, 7, 6, 5], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "# Write a function to add a hash to the array. The output should be an array.\ndef add_dict_to_tuple(test_tup, test_dict)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_dict_to_tuple\n    candidate = method(:add_dict_to_tuple)\n    assert_equal([4, 5, 6, {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}], candidate.call([4, 5, 6], {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}))\n    assert_equal([1, 2, 3, {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}], candidate.call([1, 2, 3], {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}))\n    assert_equal([8, 9, 10, {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}], candidate.call([8, 9, 10], {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maxAverageOfPath\n    candidate = method(:maxAverageOfPath)\n    assert_equal(5.2, candidate.call([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))\n    assert_equal(6.2, candidate.call([[2, 3, 4], [7, 6, 5], [8, 4, 10]]))\n    assert_equal(7.2, candidate.call([[3, 4, 5], [8, 7, 6], [9, 5, 11]]))\n    assert_equal(5.8, candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_722_filter_data", "prompt": "# The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_data(students, h, w)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_data\n    candidate = method(:filter_data)\n    assert_equal({\"Cierra Vega\" => [6.2, 70]}, candidate.call({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 6.0, 70))\n    assert_equal({\"Cierra Vega\" => [6.2, 70], \"Kierra Gentry\" => [6.0, 68]}, candidate.call({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.9, 67))\n    assert_equal({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, candidate.call({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.7, 64))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "# The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\ndef count_same_pair(nums1, nums2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_same_pair\n    candidate = method(:count_same_pair)\n    assert_equal(4, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))\n    assert_equal(11, candidate.call([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\n    assert_equal(1, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\n    assert_equal(3, candidate.call([0, 1, 1, 2], [0, 1, 2, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "# Write a function to extract values between quotation marks \" \" of the given string.\ndef extract_quotation(text1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_quotation\n    candidate = method(:extract_quotation)\n    assert_equal([\"A53\", \"multi\", \"Processor\"], candidate.call(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"))\n    assert_equal([\"favorite\", \"apps\"], candidate.call(\"Cast your \"favorite\" entertainment \"apps\"\"))\n    assert_equal([\"4k Ultra HD\", \"HDR 10\"], candidate.call(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"))\n    assert_equal([], candidate.call(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "# Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1}.\ndef multiply_elements(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply_elements\n    candidate = method(:multiply_elements)\n    assert_equal([5, 35, 56, 80], candidate.call([1, 5, 7, 8, 10]))\n    assert_equal([8, 20, 30, 42], candidate.call([2, 4, 5, 6, 7]))\n    assert_equal([156, 182, 126, 135], candidate.call([12, 13, 14, 9, 15]))\n    assert_equal([], candidate.call([12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_728_sum_list", "prompt": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "# Write a function to remove consecutive duplicates of a given array.\ndef consecutive_duplicates(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "# Write a function to find the lateral surface area of a cone given radius r and the height h.\ndef lateralsurface_cone(r, h)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lateralsurface_cone\n    candidate = method(:lateralsurface_cone)\n    assert_equal(204.20352248333654, candidate.call(5, 12))\n    assert_equal(566.3586699569488, candidate.call(10, 15))\n    assert_equal(1521.8090132193388, candidate.call(19, 17))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_replace_specialchar\n    candidate = method(:replace_specialchar)\n    assert_equal(\"Python:language::Programming:language:\", candidate.call(\"Python language, Programming language.\"))\n    assert_equal(\"a:b:c:d:e:f\", candidate.call(\"a b c,d e f\"))\n    assert_equal(\"ram:reshma:ram:rahim\", candidate.call(\"ram reshma,ram rahim\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(a, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_first_occurrence\n    candidate = method(:find_first_occurrence)\n    assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "# Write a rbthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_Of_Subarray_Prod\n    candidate = method(:sum_Of_Subarray_Prod)\n    assert_equal(20, candidate.call([1, 2, 3]))\n    assert_equal(5, candidate.call([1, 2]))\n    assert_equal(84, candidate.call([1, 2, 3, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "# Write a rbthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef toggle_middle_bits(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_toggle_middle_bits\n    candidate = method(:toggle_middle_bits)\n    assert_equal(15, candidate.call(9))\n    assert_equal(12, candidate.call(10))\n    assert_equal(13, candidate.call(11))\n    assert_equal(127, candidate.call(65))\n    assert_equal(115, candidate.call(77))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_736_left_insertion", "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php\ndef left_insertion(a, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_insertion\n    candidate = method(:left_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_737_check_str", "prompt": "# Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_str\n    candidate = method(:check_str)\n    assert_equal(true, candidate.call(\"annie\"))\n    assert_equal(false, candidate.call(\"dawood\"))\n    assert_equal(true, candidate.call(\"Else\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-recursion-exercise-9.php\ndef geometric_sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_geometric_sum\n    candidate = method(:geometric_sum)\n    assert_equal(1.9921875, candidate.call(7))\n    assert_equal(1.9375, candidate.call(4))\n    assert_equal(1.99609375, candidate.call(8))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_739_find_Index", "prompt": "# Write a rbthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Index\n    candidate = method(:find_Index)\n    assert_equal(4, candidate.call(2))\n    assert_equal(14, candidate.call(3))\n    assert_equal(45, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "# Write a function to convert the given array to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/rbthon-convert-array-to-adjacent-pair-hash/\ndef tuple_to_dict(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tuple_to_dict\n    candidate = method(:tuple_to_dict)\n    assert_equal({1 => 5, 7 => 10, 13 => 5}, candidate.call([1, 5, 7, 10, 13, 5]))\n    assert_equal({1 => 2, 3 => 4, 5 => 6}, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal({7 => 8, 9 => 10, 11 => 12}, candidate.call([7, 8, 9, 10, 11, 12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "# Write a rbthon function to check whether all the characters are same or not.\ndef all_Characters_Same(s)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_Characters_Same\n    candidate = method(:all_Characters_Same)\n    assert_equal(false, candidate.call(\"python\"))\n    assert_equal(true, candidate.call(\"aaa\"))\n    assert_equal(false, candidate.call(\"data\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "# Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_area_tetrahedron\n    candidate = method(:area_tetrahedron)\n    assert_equal(15.588457268119894, candidate.call(3))\n    assert_equal(692.8203230275509, candidate.call(20))\n    assert_equal(173.20508075688772, candidate.call(10))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_743_rotate_right", "prompt": "# Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/rbthon-program-right-rotate-array-n/\ndef rotate_right(list, m)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rotate_right\n    candidate = method(:rotate_right)\n    assert_equal([8, 9, 10, 1, 2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    assert_equal([9, 10, 1, 2, 3, 4, 5, 6, 7, 8], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([6, 7, 8, 9, 10, 1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_744_check_none", "prompt": "# Write a function to check if the given array has any none value or not.\ndef check_none(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_none\n    candidate = method(:check_none)\n    assert_equal(true, candidate.call([10, 4, 5, 6, nil]))\n    assert_equal(false, candidate.call([7, 8, 9, 11, 14]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, nil]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisible_by_digits\n    candidate = method(:divisible_by_digits)\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))\n    assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))\n    assert_equal([22, 24], candidate.call(20, 25))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_746_sector_area", "prompt": "# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.\ndef sector_area(r, a)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sector_area\n    candidate = method(:sector_area)\n    assert_equal(6.283185307179586, candidate.call(4, 45))\n    assert_equal(31.808625617596654, candidate.call(9, 45))\n    assert_equal(nil, candidate.call(9, 361))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef lcs_of_three(x, y, z)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_lcs_of_three\n    candidate = method(:lcs_of_three)\n    assert_equal(2, candidate.call(\"AGGT12\", \"12TXAYB\", \"12XBA\"))\n    assert_equal(5, candidate.call(\"Reels\", \"Reelsfor\", \"ReelsforReels\"))\n    assert_equal(3, candidate.call(\"abcd1e2\", \"bc12ea\", \"bd1ea\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces(str1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_capital_words_spaces\n    candidate = method(:capital_words_spaces)\n    assert_equal(\"Python\", candidate.call(\"Python\"))\n    assert_equal(\"Python Programming Examples\", candidate.call(\"PythonProgrammingExamples\"))\n    assert_equal(\"Get Ready To Be Coding Freak\", candidate.call(\"GetReadyToBeCodingFreak\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "# Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/rbthon-sort-numeric-strings-in-a-array/\ndef sort_numeric_strings(nums_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numeric_strings\n    candidate = method(:sort_numeric_strings)\n    assert_equal([-500, -12, 0, 4, 7, 12, 45, 100, 200], candidate.call([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]))\n    assert_equal([1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9], candidate.call([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]))\n    assert_equal([1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17], candidate.call([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_750_add_tuple", "prompt": "# Write a function to add the given array to the given array.\ndef add_tuple(test_list, test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_tuple\n    candidate = method(:add_tuple)\n    assert_equal([5, 6, 7, 9, 10], candidate.call([5, 6, 7], [9, 10]))\n    assert_equal([6, 7, 8, 10, 11], candidate.call([6, 7, 8], [10, 11]))\n    assert_equal([7, 8, 9, 11, 12], candidate.call([7, 8, 9], [11, 12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef check_min_heap(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_min_heap\n    candidate = method(:check_min_heap)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([2, 3, 4, 5, 10, 15]))\n    assert_equal(false, candidate.call([2, 10, 4, 5, 3, 15]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef jacobsthal_num(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_jacobsthal_num\n    candidate = method(:jacobsthal_num)\n    assert_equal(11, candidate.call(5))\n    assert_equal(1, candidate.call(2))\n    assert_equal(5, candidate.call(4))\n    assert_equal(2731, candidate.call(13))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_753_min_k", "prompt": "# Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/rbthon-find-minimum-k-records-from-array-array/ - in this case a verbatim corb of test cases\ndef min_k(test_list, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_k\n    candidate = method(:min_k)\n    assert_equal([[\"Akash\", 2], [\"Akshat\", 4]], candidate.call([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2))\n    assert_equal([[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]], candidate.call([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3))\n    assert_equal([[\"Ayesha\", 9]], candidate.call([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\ndef extract_index_list(l1, l2, l3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_index_list\n    candidate = method(:extract_index_list)\n    assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))\n    assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n    assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_755_second_smallest", "prompt": "# Write a function to find the second smallest number in an array.\ndef second_smallest(numbers)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_second_smallest\n    candidate = method(:second_smallest)\n    assert_equal(-2, candidate.call([1, 2, -8, -2, 0, -2]))\n    assert_equal(-0.5, candidate.call([1, 1, -0.5, 0, 2, -2, -2]))\n    assert_equal(nil, candidate.call([2, 2]))\n    assert_equal(nil, candidate.call([2, 2, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rbthon-exercises/re/rbthon-re-exercise-3.php\ndef text_match_zero_one(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_zero_one\n    candidate = method(:text_match_zero_one)\n    assert_equal(false, candidate.call(\"ac\"))\n    assert_equal(false, candidate.call(\"dc\"))\n    assert_equal(true, candidate.call(\"abbbba\"))\n    assert_equal(true, candidate.call(\"dsabbbba\"))\n    assert_equal(false, candidate.call(\"asbbbba\"))\n    assert_equal(true, candidate.call(\"abaaa\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "# Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/rbthon-program-to-count-the-pairs-of-reverse-strings/\ndef count_reverse_pairs(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_reverse_pairs\n    candidate = method(:count_reverse_pairs)\n    assert_equal(2, candidate.call([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\n    assert_equal(1, candidate.call([\"geeks\", \"best\", \"for\", \"skeeg\"]))\n    assert_equal(2, candidate.call([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_759_is_decimal", "prompt": "# Write a function to check whether a given string is a decimal number with a precision of 2.\ndef is_decimal(num)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_decimal\n    candidate = method(:is_decimal)\n    assert_equal(true, candidate.call(\"123.11\"))\n    assert_equal(false, candidate.call(\"e666.86\"))\n    assert_equal(false, candidate.call(\"3.124587\"))\n    assert_equal(true, candidate.call(\"1.11\"))\n    assert_equal(false, candidate.call(\"1.1.11\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_760_unique_Element", "prompt": "# Write a rbthon function to check whether an array of numbers contains only one distinct element or not.\ndef unique_Element(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_Element\n    candidate = method(:unique_Element)\n    assert_equal(true, candidate.call([1, 1, 1]))\n    assert_equal(false, candidate.call([1, 2, 1, 2]))\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_number(monthnum3)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_monthnumber_number\n    candidate = method(:check_monthnumber_number)\n    assert_equal(true, candidate.call(6))\n    assert_equal(false, candidate.call(2))\n    assert_equal(false, candidate.call(12))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "# Write a rbthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_min_diff(arr, n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_min_diff\n    candidate = method(:find_min_diff)\n    assert_equal(1, candidate.call([1, 5, 3, 19, 18, 25], 6))\n    assert_equal(1, candidate.call([4, 3, 2, 6], 4))\n    assert_equal(4, candidate.call([30, 5, 20, 9], 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_764_number_ctr", "prompt": "# Write a rbthon function to count number of digits in a given string.\ndef number_ctr(str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_number_ctr\n    candidate = method(:number_ctr)\n    assert_equal(1, candidate.call(\"program2bedone\"))\n    assert_equal(1, candidate.call(\"3wonders\"))\n    assert_equal(3, candidate.call(\"123\"))\n    assert_equal(3, candidate.call(\"3wond-1ers2\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_765_is_polite", "prompt": "# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef is_polite(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_polite\n    candidate = method(:is_polite)\n    assert_equal(11, candidate.call(7))\n    assert_equal(7, candidate.call(4))\n    assert_equal(13, candidate.call(9))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_766_pair_wise", "prompt": "# Write a function to return an array of all pairs of consecutive items in a given array.\ndef pair_wise(l1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pair_wise\n    candidate = method(:pair_wise)\n    assert_equal([[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]], candidate.call([1, 1, 2, 3, 3, 4, 4, 5]))\n    assert_equal([[1, 5], [5, 7], [7, 9], [9, 10]], candidate.call([1, 5, 7, 9, 10]))\n    assert_equal([[5, 1], [1, 9], [9, 7], [7, 10]], candidate.call([5, 1, 9, 7, 10]))\n    assert_equal([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "# Write a rbthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\ndef get_pairs_count(arr, sum)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_pairs_count\n    candidate = method(:get_pairs_count)\n    assert_equal(6, candidate.call([1, 1, 1, 1], 2))\n    assert_equal(3, candidate.call([1, 5, 7, -1, 5], 6))\n    assert_equal(1, candidate.call([1, -2, 3], 1))\n    assert_equal(1, candidate.call([-1, -2, 3], -3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_769_Diff", "prompt": "# Write a rbthon function to get the difference between two arrays.\ndef Diff(li1, li2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Diff\n    candidate = method(:Diff)\n    assert_equal([10, 20, 30, 15], candidate.call([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n    assert_equal([2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5], [6, 7, 1]))\n    assert_equal([2, 3, 6, 7], candidate.call([1, 2, 3], [6, 7, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "# Write a rbthon function to find the sum of fourth power of first n odd natural numbers.\ndef odd_num_sum(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_num_sum\n    candidate = method(:odd_num_sum)\n    assert_equal(82, candidate.call(2))\n    assert_equal(707, candidate.call(3))\n    assert_equal(3108, candidate.call(4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_771_check_expression", "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef check_expression(exp)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_expression\n    candidate = method(:check_expression)\n    assert_equal(true, candidate.call(\"{()}[{}]\"))\n    assert_equal(false, candidate.call(\"{()}[{]\"))\n    assert_equal(true, candidate.call(\"{()}[{}][]({})\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_772_remove_length", "prompt": "# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_length\n    candidate = method(:remove_length)\n    assert_equal(\"person is most value\", candidate.call(\"The person is most value tet\", 3))\n    assert_equal(\"If you me about ok\", candidate.call(\"If you told me about this ok\", 4))\n    assert_equal(\"Forces of darkeness is the\", candidate.call(\"Forces of darkeness is come into the play\", 4))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "# Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\ndef occurance_substring(text, pattern)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_occurance_substring\n    candidate = method(:occurance_substring)\n    assert_equal([\"python\", 0, 6], candidate.call(\"python programming, python language\", \"python\"))\n    assert_equal([\"programming\", 7, 18], candidate.call(\"python programming,programming language\", \"programming\"))\n    assert_equal([\"language\", 31, 39], candidate.call(\"python programming,programming language\", \"language\"))\n    assert_equal(nil, candidate.call(\"c++ programming, c++ language\", \"python\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_775_odd_position", "prompt": "# Write a rbthon function to check whether every odd index contains odd numbers of a given array.\ndef odd_position(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_position\n    candidate = method(:odd_position)\n    assert_equal(true, candidate.call([2, 1, 4, 3, 6, 7, 6, 3]))\n    assert_equal(true, candidate.call([4, 1, 2]))\n    assert_equal(false, candidate.call([1, 2, 3]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_776_count_vowels", "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_vowels\n    candidate = method(:count_vowels)\n    assert_equal(7, candidate.call(\"bestinstareels\"))\n    assert_equal(12, candidate.call(\"partofthejourneyistheend\"))\n    assert_equal(5, candidate.call(\"amazonprime\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_777_find_sum", "prompt": "# Write a rbthon function to find the sum of non-repeated elements in a given array.\ndef find_sum(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "# Write a function to pack consecutive duplicates of a given array elements into subarrays.\ndef pack_consecutive_duplicates(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pack_consecutive_duplicates\n    candidate = method(:pack_consecutive_duplicates)\n    assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_780_find_combinations", "prompt": "# Write a function to find the combinations of sums with arrays in the given array array. https://www.geeksforgeeks.org/rbthon-combinations-of-sum-with-arrays-in-array-array/\ndef find_combinations(test_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_combinations\n    candidate = method(:find_combinations)\n    assert_equal([[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]], candidate.call([[2, 4], [6, 7], [5, 1], [6, 10]]))\n    assert_equal([[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]], candidate.call([[3, 5], [7, 8], [6, 2], [7, 11]]))\n    assert_equal([[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]], candidate.call([[4, 6], [8, 9], [7, 3], [8, 12]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_781_count_divisors", "prompt": "# Write a rbthon function to check whether the count of divisors is even. https://www.w3resource.com/rbthon-exercises/basic/rbthon-basic-1-exercise-24.php\ndef count_divisors(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_divisors\n    candidate = method(:count_divisors)\n    assert_equal(true, candidate.call(10))\n    assert_equal(false, candidate.call(100))\n    assert_equal(true, candidate.call(125))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "# Write a rbthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef odd_length_sum(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_length_sum\n    candidate = method(:odd_length_sum)\n    assert_equal(14, candidate.call([1, 2, 4]))\n    assert_equal(15, candidate.call([1, 2, 1, 2]))\n    assert_equal(8, candidate.call([1, 7]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef rgb_to_hsv(r, g, b)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rgb_to_hsv\n    candidate = method(:rgb_to_hsv)\n    assert_equal([0.0, 0.0, 100.0], candidate.call(255, 255, 255))\n    assert_equal([120.0, 100.0, 84.31372549019608], candidate.call(0, 215, 0))\n    assert_equal([149.26829268292684, 95.34883720930233, 84.31372549019608], candidate.call(10, 215, 110))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "# Write a function to find the product of first even and odd number of a given array.\ndef mul_even_odd(list1)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mul_even_odd\n    candidate = method(:mul_even_odd)\n    assert_equal(4, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))\n    assert_equal(2, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    assert_equal(10, candidate.call([1, 5, 7, 9, 10]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "# Write a function to convert array string to integer array.\ndef tuple_str_int(test_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tuple_str_int\n    candidate = method(:tuple_str_int)\n    assert_equal([7, 8, 9], candidate.call(\"(7, 8, 9)\"))\n    assert_equal([1, 2, 3], candidate.call(\"(1, 2, 3)\"))\n    assert_equal([4, 5, 6], candidate.call(\"(4, 5, 6)\"))\n    assert_equal([7, 81, 19], candidate.call(\"(7, 81, 19)\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_786_right_insertion", "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_insertion\n    candidate = method(:right_insertion)\n    assert_equal(4, candidate.call([1, 2, 4, 5], 6))\n    assert_equal(2, candidate.call([1, 2, 4, 5], 3))\n    assert_equal(4, candidate.call([1, 2, 4, 5], 7))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_787_text_match_three", "prompt": "# Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_three\n    candidate = method(:text_match_three)\n    assert_equal(false, candidate.call(\"ac\"))\n    assert_equal(false, candidate.call(\"dc\"))\n    assert_equal(true, candidate.call(\"abbbba\"))\n    assert_equal(true, candidate.call(\"caacabbbba\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_788_new_tuple", "prompt": "# Write a function to create a new array from the given string and array.\ndef new_tuple(test_list, test_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_new_tuple\n    candidate = method(:new_tuple)\n    assert_equal([\"WEB\", \"is\", \"best\"], candidate.call([\"WEB\", \"is\"], \"best\"))\n    assert_equal([\"We\", \"are\", \"Developers\"], candidate.call([\"We\", \"are\"], \"Developers\"))\n    assert_equal([\"Part\", \"is\", \"Wrong\"], candidate.call([\"Part\", \"is\"], \"Wrong\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_790_even_position", "prompt": "# Write a rbthon function to check whether every even index contains even numbers of a given array.\ndef even_position(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_position\n    candidate = method(:even_position)\n    assert_equal(false, candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 3]))\n    assert_equal(true, candidate.call([2, 1, 4]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_791_remove_nested", "prompt": "# Write a function to remove arrays from the given array.\ndef remove_nested(test_tup)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_nested\n    candidate = method(:remove_nested)\n    assert_equal([1, 5, 7, 10], candidate.call([1, 5, 7, [4, 6], 10]))\n    assert_equal([2, 6, 8, 11], candidate.call([2, 6, 8, [5, 7], 11]))\n    assert_equal([3, 7, 9, 12], candidate.call([3, 7, 9, [6, 8], 12]))\n    assert_equal([3, 7, 9, 12], candidate.call([3, 7, 9, [6, 8], [5, 12], 12]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_792_count_list", "prompt": "# Write a rbthon function to count the number of arrays in a given number of arrays.\ndef count_list(input_list)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_list\n    candidate = method(:count_list)\n    assert_equal(4, candidate.call([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))\n    assert_equal(3, candidate.call([[1, 2], [2, 3], [4, 5]]))\n    assert_equal(2, candidate.call([[1, 0], [2, 0]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_793_last", "prompt": "# Write a rbthon function to find the last position of an element in a sorted array.\ndef last(arr, x)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_last\n    candidate = method(:last)\n    assert_equal(0, candidate.call([1, 2, 3], 1))\n    assert_equal(2, candidate.call([1, 1, 1, 2, 3, 4], 1))\n    assert_equal(3, candidate.call([2, 3, 2, 3, 6, 8, 9], 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_starta_endb\n    candidate = method(:text_starta_endb)\n    assert_equal(true, candidate.call(\"aabbbb\"))\n    assert_equal(false, candidate.call(\"aabAbbbc\"))\n    assert_equal(false, candidate.call(\"accddbbjjj\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_796_return_sum", "prompt": "# Write function to find the sum of all items in the given hash.\ndef return_sum(dict)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_return_sum\n    candidate = method(:return_sum)\n    assert_equal(600, candidate.call({\"a\" => 100, \"b\" => 200, \"c\" => 300}))\n    assert_equal(88, candidate.call({\"a\" => 25, \"b\" => 18, \"c\" => 45}))\n    assert_equal(124, candidate.call({\"a\" => 36, \"b\" => 39, \"c\" => 49}))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "# Write a rbthon function to find the sum of all odd natural numbers within the range l and r.\ndef sum_in_range(l, r)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_in_range\n    candidate = method(:sum_in_range)\n    assert_equal(8, candidate.call(2, 5))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(40, candidate.call(7, 13))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_798__sum", "prompt": "# Write a rbthon function to find the sum of an array.\ndef _sum(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test__sum\n    candidate = method(:_sum)\n    assert_equal(6, candidate.call([1, 2, 3]))\n    assert_equal(50, candidate.call([15, 12, 13, 10]))\n    assert_equal(3, candidate.call([0, 1, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_799_left_rotate", "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n, d)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_rotate\n    candidate = method(:left_rotate)\n    assert_equal(64, candidate.call(16, 2))\n    assert_equal(40, candidate.call(10, 2))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(8, candidate.call(1, 3))\n    assert_equal(40, candidate.call(5, 3))\n    assert_equal(232, candidate.call(29, 3))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "# Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_all_spaces\n    candidate = method(:remove_all_spaces)\n    assert_equal(\"pythonprogram\", candidate.call(\"python  program\"))\n    assert_equal(\"pythonprogramminglanguage\", candidate.call(\"python   programming    language\"))\n    assert_equal(\"pythonprogram\", candidate.call(\"python                     program\"))\n    assert_equal(\"pythonprogram\", candidate.call(\"   python                     program\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "# Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_test_three_equal\n    candidate = method(:test_three_equal)\n    assert_equal(3, candidate.call(1, 1, 1))\n    assert_equal(0, candidate.call(-1, -2, -3))\n    assert_equal(2, candidate.call(1, 2, 2))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_802_count_rotation", "prompt": "# Write a rbthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef count_rotation(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_rotation\n    candidate = method(:count_rotation)\n    assert_equal(1, candidate.call([3, 2, 1]))\n    assert_equal(2, candidate.call([4, 5, 1, 2, 3]))\n    assert_equal(3, candidate.call([7, 8, 9, 1, 2, 3]))\n    assert_equal(0, candidate.call([1, 2, 3]))\n    assert_equal(2, candidate.call([1, 3, 2]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef is_perfect_square(n)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_perfect_square\n    candidate = method(:is_perfect_square)\n    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(36))\n    assert_equal(false, candidate.call(14))\n    assert_equal(true, candidate.call(196))\n    assert_equal(false, candidate.call(125))\n    assert_equal(true, candidate.call(15625))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_804_is_product_even", "prompt": "# Write a function to check whether the product of numbers in an array is even or not.\ndef is_product_even(arr)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_product_even\n    candidate = method(:is_product_even)\n    assert_equal(true, candidate.call([1, 2, 3]))\n    assert_equal(true, candidate.call([1, 2, 1, 4]))\n    assert_equal(false, candidate.call([1, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\ndef max_sum_list(lists)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_sum_list\n    candidate = method(:max_sum_list)\n    assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n    assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))\n    assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_807_first_odd", "prompt": "# Write a rbthon function to find the first odd number in a given array of numbers.\ndef first_odd(nums)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_odd\n    candidate = method(:first_odd)\n    assert_equal(1, candidate.call([1, 3, 5]))\n    assert_equal(1, candidate.call([2, 4, 1, 3]))\n    assert_equal(9, candidate.call([8, 9, 1]))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_808_check_K", "prompt": "# Write a function to check if the given arrays contain the k or not.\ndef check_K(test_tup, k)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_K\n    candidate = method(:check_K)\n    assert_equal(true, candidate.call([10, 4, 5, 6, 8], 6))\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5, 6], 7))\n    assert_equal(true, candidate.call([7, 8, 9, 44, 11, 12], 11))\n  end\nend\n", "language": "rb"}, {"task_id": "mbpp_809_check_smaller", "prompt": "# Write a function to check if each element of second array is smaller than its corresponding element in the first array.\ndef check_smaller(test_tup1, test_tup2)\n", "test": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_smaller\n    candidate = method(:check_smaller)\n    assert_equal(false, candidate.call([1, 2, 3], [2, 3, 4]))\n    assert_equal(true, candidate.call([4, 5, 6], [3, 4, 5]))\n    assert_equal(true, candidate.call([11, 12, 13], [10, 11, 12]))\n  end\nend\n", "language": "rb"}]