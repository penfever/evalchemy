[{"task_id": "HumanEval_0_has_close_elements", "prompt": "# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> HumanEval.has_close_elements([1.0, 2.0, 3.0], 0.5)\n# false\n# >>> HumanEval.has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# true\n\ndefmodule HumanEval do\n  def candidate(numbers, threshold), do: has_close_elements(numbers, threshold)\n  def has_close_elements(numbers, threshold) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'has_close_elements' do\n    assert true == HumanEval.candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\n    assert false == HumanEval.candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)\n    assert true == HumanEval.candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\n    assert false == HumanEval.candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\n    assert true == HumanEval.candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n    assert true == HumanEval.candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)\n    assert false == HumanEval.candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\n\ndefmodule HumanEval do\n  def candidate(paren_string), do: separate_paren_groups(paren_string)\n  def separate_paren_groups(paren_string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'separate_paren_groups' do\n    assert [\"(()())\", \"((()))\", \"()\", \"((())()())\"] == HumanEval.candidate(\"(()()) ((())) () ((())()())\")\n    assert [\"()\", \"(())\", \"((()))\", \"(((())))\"] == HumanEval.candidate(\"() (()) ((())) (((())))\")\n    assert [\"(()(())((())))\"] == HumanEval.candidate(\"(()(())((())))\")\n    assert [\"()\", \"(())\", \"(()())\"] == HumanEval.candidate(\"( ) (( )) (( )( ))\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> HumanEval.truncate_number(3.5)\n# 0.5\n\ndefmodule HumanEval do\n  def candidate(number), do: truncate_number(number)\n  def truncate_number(number) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'truncate_number' do\n    assert 0.5 == HumanEval.candidate(3.5)\n    assert 0.25 == HumanEval.candidate(1.25)\n    assert 0.0 == HumanEval.candidate(123.0)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_3_below_zero", "prompt": "# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> HumanEval.below_zero([1, 2, 3])\n# false\n# >>> HumanEval.below_zero([1, 2, -4, 5])\n# true\n\ndefmodule HumanEval do\n  def candidate(operations), do: below_zero(operations)\n  def below_zero(operations) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'below_zero' do\n    assert false == HumanEval.candidate([])\n    assert false == HumanEval.candidate([1, 2, -3, 1, 2, -3])\n    assert true == HumanEval.candidate([1, 2, -4, 5, 6])\n    assert false == HumanEval.candidate([1, -1, 2, -2, 5, -5, 4, -4])\n    assert true == HumanEval.candidate([1, -1, 2, -2, 5, -5, 4, -5])\n    assert true == HumanEval.candidate([1, -2, 2, -2, 5, -5, 4, -4])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> HumanEval.mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\n\ndefmodule HumanEval do\n  def candidate(numbers), do: mean_absolute_deviation(numbers)\n  def mean_absolute_deviation(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'mean_absolute_deviation' do\n    assert 0.5 == HumanEval.candidate([1.0, 2.0])\n    assert 1.0 == HumanEval.candidate([1.0, 2.0, 3.0, 4.0])\n    assert 1.2 == HumanEval.candidate([1.0, 2.0, 3.0, 4.0, 5.0])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_5_intersperse", "prompt": "# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> HumanEval.intersperse([], 4)\n# []\n# >>> HumanEval.intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\n\ndefmodule HumanEval do\n  def candidate(numbers, delimeter), do: intersperse(numbers, delimeter)\n  def intersperse(numbers, delimeter) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'intersperse' do\n    assert [] == HumanEval.candidate([], 7)\n    assert [5, 8, 6, 8, 3, 8, 2] == HumanEval.candidate([5, 6, 3, 2], 8)\n    assert [2, 2, 2, 2, 2] == HumanEval.candidate([2, 2, 2], 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> HumanEval.parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\n\ndefmodule HumanEval do\n  def candidate(paren_string), do: parse_nested_parens(paren_string)\n  def parse_nested_parens(paren_string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'parse_nested_parens' do\n    assert [2, 3, 1, 3] == HumanEval.candidate(\"(()()) ((())) () ((())()())\")\n    assert [1, 2, 3, 4] == HumanEval.candidate(\"() (()) ((())) (((())))\")\n    assert [4] == HumanEval.candidate(\"(()(())((())))\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "# Filter an input list of strings only for ones that contain given substring\n# >>> HumanEval.filter_by_substring([], \"a\")\n# []\n# >>> HumanEval.filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\n\ndefmodule HumanEval do\n  def candidate(strings, substring), do: filter_by_substring(strings, substring)\n  def filter_by_substring(strings, substring) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_by_substring' do\n    assert [] == HumanEval.candidate([], \"john\")\n    assert [\"xxx\", \"xxxAAA\", \"xxx\"] == HumanEval.candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")\n    assert [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"] == HumanEval.candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\")\n    assert [\"grunt\", \"prune\"] == HumanEval.candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_8_sum_product", "prompt": "# For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> HumanEval.sum_product([])\n# {0, 1}\n# >>> HumanEval.sum_product([1, 2, 3, 4])\n# {10, 24}\n\ndefmodule HumanEval do\n  def candidate(numbers), do: sum_product(numbers)\n  def sum_product(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_product' do\n    assert {0, 1} == HumanEval.candidate([])\n    assert {3, 1} == HumanEval.candidate([1, 1, 1])\n    assert {100, 0} == HumanEval.candidate([100, 0])\n    assert {15, 105} == HumanEval.candidate([3, 5, 7])\n    assert {10, 10} == HumanEval.candidate([10])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> HumanEval.rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n\ndefmodule HumanEval do\n  def candidate(numbers), do: rolling_max(numbers)\n  def rolling_max(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rolling_max' do\n    assert [] == HumanEval.candidate([])\n    assert [1, 2, 3, 4] == HumanEval.candidate([1, 2, 3, 4])\n    assert [4, 4, 4, 4] == HumanEval.candidate([4, 3, 2, 1])\n    assert [3, 3, 3, 100, 100] == HumanEval.candidate([3, 2, 3, 100, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> HumanEval.make_palindrome(\"\")\n# \"\"\n# >>> HumanEval.make_palindrome(\"cat\")\n# \"catac\"\n# >>> HumanEval.make_palindrome(\"cata\")\n# \"catac\"\n\ndefmodule HumanEval do\n  def candidate(string), do: make_palindrome(string)\n  def make_palindrome(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'make_palindrome' do\n    assert \"\" == HumanEval.candidate(\"\")\n    assert \"x\" == HumanEval.candidate(\"x\")\n    assert \"xyzyx\" == HumanEval.candidate(\"xyz\")\n    assert \"xyx\" == HumanEval.candidate(\"xyx\")\n    assert \"jerryrrej\" == HumanEval.candidate(\"jerry\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_11_string_xor", "prompt": "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> HumanEval.string_xor(\"010\", \"110\")\n# \"100\"\n\ndefmodule HumanEval do\n  def candidate(a, b), do: string_xor(a, b)\n  def string_xor(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_xor' do\n    assert \"010010\" == HumanEval.candidate(\"111000\", \"101010\")\n    assert \"0\" == HumanEval.candidate(\"1\", \"1\")\n    assert \"0101\" == HumanEval.candidate(\"0101\", \"0000\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_12_longest", "prompt": "# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return nil in case the input list is empty.\n# >>> HumanEval.longest([])\n# nil\n# >>> HumanEval.longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> HumanEval.longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\n\ndefmodule HumanEval do\n  def candidate(strings), do: longest(strings)\n  def longest(strings) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'longest' do\n    assert nil == HumanEval.candidate([])\n    assert \"x\" == HumanEval.candidate([\"x\", \"y\", \"z\"])\n    assert \"zzzz\" == HumanEval.candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "# Return a greatest common divisor of two integers a and b\n# >>> HumanEval.greatest_common_divisor(3, 5)\n# 1\n# >>> HumanEval.greatest_common_divisor(25, 15)\n# 5\n\ndefmodule HumanEval do\n  def candidate(a, b), do: greatest_common_divisor(a, b)\n  def greatest_common_divisor(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'greatest_common_divisor' do\n    assert 1 == HumanEval.candidate(3, 7)\n    assert 5 == HumanEval.candidate(10, 15)\n    assert 7 == HumanEval.candidate(49, 14)\n    assert 12 == HumanEval.candidate(144, 60)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "# Return list of all prefixes from shortest to longest of the input string\n# >>> HumanEval.all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\n\ndefmodule HumanEval do\n  def candidate(string), do: all_prefixes(string)\n  def all_prefixes(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_prefixes' do\n    assert [] == HumanEval.candidate(\"\")\n    assert [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == HumanEval.candidate(\"asdfgh\")\n    assert [\"W\", \"WW\", \"WWW\"] == HumanEval.candidate(\"WWW\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> HumanEval.string_sequence(0)\n# \"0\"\n# >>> HumanEval.string_sequence(5)\n# \"0 1 2 3 4 5\"\n\ndefmodule HumanEval do\n  def candidate(n), do: string_sequence(n)\n  def string_sequence(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_sequence' do\n    assert \"0\" == HumanEval.candidate(0)\n    assert \"0 1 2 3\" == HumanEval.candidate(3)\n    assert \"0 1 2 3 4 5 6 7 8 9 10\" == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> HumanEval.count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> HumanEval.count_distinct_characters(\"Jerry\")\n# 4\n\ndefmodule HumanEval do\n  def candidate(string), do: count_distinct_characters(string)\n  def count_distinct_characters(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_distinct_characters' do\n    assert 0 == HumanEval.candidate(\"\")\n    assert 5 == HumanEval.candidate(\"abcde\")\n    assert 5 == HumanEval.candidate(\"abcdecadeCADE\")\n    assert 1 == HumanEval.candidate(\"aaaaAAAAaaaa\")\n    assert 5 == HumanEval.candidate(\"Jerry jERRY JeRRRY\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_17_parse_music", "prompt": "# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> HumanEval.parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\ndefmodule HumanEval do\n  def candidate(music_string), do: parse_music(music_string)\n  def parse_music(music_string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'parse_music' do\n    assert [] == HumanEval.candidate(\"\")\n    assert [4, 4, 4, 4] == HumanEval.candidate(\"o o o o\")\n    assert [1, 1, 1, 1] == HumanEval.candidate(\".| .| .| .|\")\n    assert [2, 2, 1, 1, 4, 4, 4, 4] == HumanEval.candidate(\"o| o| .| .| o o o o\")\n    assert [2, 1, 2, 1, 4, 2, 4, 2] == HumanEval.candidate(\"o| .| o| .| o o| o o|\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> HumanEval.how_many_times(\"\", \"a\")\n# 0\n# >>> HumanEval.how_many_times(\"aaa\", \"a\")\n# 3\n# >>> HumanEval.how_many_times(\"aaaa\", \"aa\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(string, substring), do: how_many_times(string, substring)\n  def how_many_times(string, substring) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'how_many_times' do\n    assert 0 == HumanEval.candidate(\"\", \"x\")\n    assert 4 == HumanEval.candidate(\"xyxyxyx\", \"x\")\n    assert 4 == HumanEval.candidate(\"cacacacac\", \"cac\")\n    assert 1 == HumanEval.candidate(\"john doe\", \"john\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> HumanEval.sort_numbers(\"three one five\")\n# \"one three five\"\n\ndefmodule HumanEval do\n  def candidate(numbers), do: sort_numbers(numbers)\n  def sort_numbers(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_numbers' do\n    assert \"\" == HumanEval.candidate(\"\")\n    assert \"three\" == HumanEval.candidate(\"three\")\n    assert \"three five nine\" == HumanEval.candidate(\"three five nine\")\n    assert \"zero four five seven eight nine\" == HumanEval.candidate(\"five zero four seven nine eight\")\n    assert \"zero one two three four five six\" == HumanEval.candidate(\"six five four three two one zero\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> HumanEval.find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# {2.0, 2.2}\n# >>> HumanEval.find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# {2.0, 2.0}\n\ndefmodule HumanEval do\n  def candidate(numbers), do: find_closest_elements(numbers)\n  def find_closest_elements(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_closest_elements' do\n    assert {3.9, 4.0} == HumanEval.candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\n    assert {5.0, 5.9} == HumanEval.candidate([1.0, 2.0, 5.9, 4.0, 5.0])\n    assert {2.0, 2.2} == HumanEval.candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    assert {2.0, 2.0} == HumanEval.candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    assert {2.2, 3.1} == HumanEval.candidate([1.1, 2.2, 3.1, 4.1, 5.1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> HumanEval.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\n\ndefmodule HumanEval do\n  def candidate(numbers), do: rescale_to_unit(numbers)\n  def rescale_to_unit(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rescale_to_unit' do\n    assert [0.0, 1.0] == HumanEval.candidate([2.0, 49.9])\n    assert [1.0, 0.0] == HumanEval.candidate([100.0, 49.9])\n    assert [0.0, 0.25, 0.5, 0.75, 1.0] == HumanEval.candidate([1.0, 2.0, 3.0, 4.0, 5.0])\n    assert [0.25, 0.0, 1.0, 0.5, 0.75] == HumanEval.candidate([2.0, 1.0, 5.0, 3.0, 4.0])\n    assert [0.25, 0.0, 1.0, 0.5, 0.75] == HumanEval.candidate([12.0, 11.0, 15.0, 13.0, 14.0])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "# Filter given list of any elixirthon values only for integers\n# >>> HumanEval.filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> HumanEval.filter_integers([1, 2, 3, \"abc\", %{}, []])\n# [1, 2, 3]\n\ndefmodule HumanEval do\n  def candidate(values), do: filter_integers(values)\n  def filter_integers(values) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_integers' do\n    assert [] == HumanEval.candidate([])\n    assert [4, 9] == HumanEval.candidate([4, %{}, [], 23.2, 9, \"adasd\"])\n    assert [3, 3, 3] == HumanEval.candidate([3, \"c\", 3, 3, \"a\", \"b\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_23_strlen", "prompt": "# Return length of given string\n# >>> HumanEval.strlen(\"\")\n# 0\n# >>> HumanEval.strlen(\"abc\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(string), do: strlen(string)\n  def strlen(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'strlen' do\n    assert 0 == HumanEval.candidate(\"\")\n    assert 1 == HumanEval.candidate(\"x\")\n    assert 9 == HumanEval.candidate(\"asdasnakj\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> HumanEval.largest_divisor(15)\n# 5\n\ndefmodule HumanEval do\n  def candidate(n), do: largest_divisor(n)\n  def largest_divisor(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'largest_divisor' do\n    assert 1 == HumanEval.candidate(3)\n    assert 1 == HumanEval.candidate(7)\n    assert 5 == HumanEval.candidate(10)\n    assert 50 == HumanEval.candidate(100)\n    assert 7 == HumanEval.candidate(49)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_25_factorize", "prompt": "# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> HumanEval.factorize(8)\n# [2, 2, 2]\n# >>> HumanEval.factorize(25)\n# [5, 5]\n# >>> HumanEval.factorize(70)\n# [2, 5, 7]\n\ndefmodule HumanEval do\n  def candidate(n), do: factorize(n)\n  def factorize(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'factorize' do\n    assert [2] == HumanEval.candidate(2)\n    assert [2, 2] == HumanEval.candidate(4)\n    assert [2, 2, 2] == HumanEval.candidate(8)\n    assert [3, 19] == HumanEval.candidate(57)\n    assert [3, 3, 19, 19] == HumanEval.candidate(3249)\n    assert [3, 3, 3, 19, 19, 19] == HumanEval.candidate(185193)\n    assert [3, 19, 19, 19] == HumanEval.candidate(20577)\n    assert [2, 3, 3] == HumanEval.candidate(18)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> HumanEval.remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n\ndefmodule HumanEval do\n  def candidate(numbers), do: remove_duplicates(numbers)\n  def remove_duplicates(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_duplicates' do\n    assert [] == HumanEval.candidate([])\n    assert [1, 2, 3, 4] == HumanEval.candidate([1, 2, 3, 4])\n    assert [1, 4, 5] == HumanEval.candidate([1, 2, 3, 2, 4, 3, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_27_flip_case", "prompt": "# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> HumanEval.flip_case(\"Hello\")\n# \"hELLO\"\n\ndefmodule HumanEval do\n  def candidate(string), do: flip_case(string)\n  def flip_case(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'flip_case' do\n    assert \"\" == HumanEval.candidate(\"\")\n    assert \"hELLO!\" == HumanEval.candidate(\"Hello!\")\n    assert \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" == HumanEval.candidate(\"These violent delights have violent ends\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_28_concatenate", "prompt": "# Concatenate list of strings into a single string\n# >>> HumanEval.concatenate([])\n# \"\"\n# >>> HumanEval.concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\n\ndefmodule HumanEval do\n  def candidate(strings), do: concatenate(strings)\n  def concatenate(strings) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'concatenate' do\n    assert \"\" == HumanEval.candidate([])\n    assert \"xyz\" == HumanEval.candidate([\"x\", \"y\", \"z\"])\n    assert \"xyzwk\" == HumanEval.candidate([\"x\", \"y\", \"z\", \"w\", \"k\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "# Filter an input list of strings only for ones that start with a given prefix.\n# >>> HumanEval.filter_by_prefix([], \"a\")\n# []\n# >>> HumanEval.filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\n\ndefmodule HumanEval do\n  def candidate(strings, prefix), do: filter_by_prefix(strings, prefix)\n  def filter_by_prefix(strings, prefix) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_by_prefix' do\n    assert [] == HumanEval.candidate([], \"john\")\n    assert [\"xxx\", \"xxxAAA\", \"xxx\"] == HumanEval.candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_30_get_positive", "prompt": "# Return only positive numbers in the list.\n# >>> HumanEval.get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> HumanEval.get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n\ndefmodule HumanEval do\n  def candidate(l), do: get_positive(l)\n  def get_positive(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_positive' do\n    assert [4, 5, 6] == HumanEval.candidate([-1, -2, 4, 5, 6])\n    assert [5, 3, 2, 3, 3, 9, 123, 1] == HumanEval.candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\n    assert [] == HumanEval.candidate([-1, -2])\n    assert [] == HumanEval.candidate([])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_31_is_prime", "prompt": "# Return true if a given number is prime, and false otherwise.\n# >>> HumanEval.is_prime(6)\n# false\n# >>> HumanEval.is_prime(101)\n# true\n# >>> HumanEval.is_prime(11)\n# true\n# >>> HumanEval.is_prime(13441)\n# true\n# >>> HumanEval.is_prime(61)\n# true\n# >>> HumanEval.is_prime(4)\n# false\n# >>> HumanEval.is_prime(1)\n# false\n\ndefmodule HumanEval do\n  def candidate(n), do: is_prime(n)\n  def is_prime(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_prime' do\n    assert false == HumanEval.candidate(6)\n    assert true == HumanEval.candidate(101)\n    assert true == HumanEval.candidate(11)\n    assert true == HumanEval.candidate(13441)\n    assert true == HumanEval.candidate(61)\n    assert false == HumanEval.candidate(4)\n    assert false == HumanEval.candidate(1)\n    assert true == HumanEval.candidate(5)\n    assert true == HumanEval.candidate(11)\n    assert true == HumanEval.candidate(17)\n    assert false == HumanEval.candidate(85)\n    assert false == HumanEval.candidate(77)\n    assert false == HumanEval.candidate(255379)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_33_sort_third", "prompt": "# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> HumanEval.sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> HumanEval.sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\n\ndefmodule HumanEval do\n  def candidate(l), do: sort_third(l)\n  def sort_third(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_third' do\n    assert [2, 6, 3, 4, 8, 9, 5] == HumanEval.candidate([5, 6, 3, 4, 8, 9, 2])\n    assert [2, 8, 3, 4, 6, 9, 5] == HumanEval.candidate([5, 8, 3, 4, 6, 9, 2])\n    assert [2, 6, 9, 4, 8, 3, 5] == HumanEval.candidate([5, 6, 9, 4, 8, 3, 2])\n    assert [2, 6, 3, 4, 8, 9, 5, 1] == HumanEval.candidate([5, 6, 3, 4, 8, 9, 2, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_34_unique", "prompt": "# Return sorted unique elements in a list\n# >>> HumanEval.unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\n\ndefmodule HumanEval do\n  def candidate(l), do: unique(l)\n  def unique(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'unique' do\n    assert [0, 2, 3, 5, 9, 123] == HumanEval.candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_35_max_element", "prompt": "# Return maximum element in the list.\n# >>> HumanEval.max_element([1, 2, 3])\n# 3\n# >>> HumanEval.max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\n\ndefmodule HumanEval do\n  def candidate(l), do: max_element(l)\n  def max_element(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_element' do\n    assert 3 == HumanEval.candidate([1, 2, 3])\n    assert 124 == HumanEval.candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> HumanEval.fizz_buzz(50)\n# 0\n# >>> HumanEval.fizz_buzz(78)\n# 2\n# >>> HumanEval.fizz_buzz(79)\n# 3\n\ndefmodule HumanEval do\n  def candidate(n), do: fizz_buzz(n)\n  def fizz_buzz(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'fizz_buzz' do\n    assert 0 == HumanEval.candidate(50)\n    assert 2 == HumanEval.candidate(78)\n    assert 3 == HumanEval.candidate(79)\n    assert 3 == HumanEval.candidate(100)\n    assert 6 == HumanEval.candidate(200)\n    assert 192 == HumanEval.candidate(4000)\n    assert 639 == HumanEval.candidate(10000)\n    assert 8026 == HumanEval.candidate(100000)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_37_sort_even", "prompt": "# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> HumanEval.sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> HumanEval.sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\n\ndefmodule HumanEval do\n  def candidate(l), do: sort_even(l)\n  def sort_even(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_even' do\n    assert [1, 2, 3] == HumanEval.candidate([1, 2, 3])\n    assert [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123] == HumanEval.candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    assert [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10] == HumanEval.candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> HumanEval.prime_fib(1)\n# 2\n# >>> HumanEval.prime_fib(2)\n# 3\n# >>> HumanEval.prime_fib(3)\n# 5\n# >>> HumanEval.prime_fib(4)\n# 13\n# >>> HumanEval.prime_fib(5)\n# 89\n\ndefmodule HumanEval do\n  def candidate(n), do: prime_fib(n)\n  def prime_fib(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'prime_fib' do\n    assert 2 == HumanEval.candidate(1)\n    assert 3 == HumanEval.candidate(2)\n    assert 5 == HumanEval.candidate(3)\n    assert 13 == HumanEval.candidate(4)\n    assert 89 == HumanEval.candidate(5)\n    assert 233 == HumanEval.candidate(6)\n    assert 1597 == HumanEval.candidate(7)\n    assert 28657 == HumanEval.candidate(8)\n    assert 514229 == HumanEval.candidate(9)\n    assert 433494437 == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> HumanEval.triples_sum_to_zero([1, 3, 5, 0])\n# false\n# >>> HumanEval.triples_sum_to_zero([1, 3, -2, 1])\n# true\n# >>> HumanEval.triples_sum_to_zero([1, 2, 3, 7])\n# false\n# >>> HumanEval.triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# true\n# >>> HumanEval.triples_sum_to_zero([1])\n# false\n\ndefmodule HumanEval do\n  def candidate(l), do: triples_sum_to_zero(l)\n  def triples_sum_to_zero(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'triples_sum_to_zero' do\n    assert false == HumanEval.candidate([1, 3, 5, 0])\n    assert false == HumanEval.candidate([1, 3, 5, -1])\n    assert true == HumanEval.candidate([1, 3, -2, 1])\n    assert false == HumanEval.candidate([1, 2, 3, 7])\n    assert false == HumanEval.candidate([1, 2, 5, 7])\n    assert true == HumanEval.candidate([2, 4, -5, 3, 9, 7])\n    assert false == HumanEval.candidate([1])\n    assert false == HumanEval.candidate([1, 3, 5, -100])\n    assert false == HumanEval.candidate([100, 3, 5, -100])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n\ndefmodule HumanEval do\n  def candidate(n), do: car_race_collision(n)\n  def car_race_collision(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'car_race_collision' do\n    assert 4 == HumanEval.candidate(2)\n    assert 9 == HumanEval.candidate(3)\n    assert 16 == HumanEval.candidate(4)\n    assert 64 == HumanEval.candidate(8)\n    assert 100 == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_42_incr_list", "prompt": "# Return list with elements incremented by 1.\n# >>> HumanEval.incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> HumanEval.incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\ndefmodule HumanEval do\n  def candidate(l), do: incr_list(l)\n  def incr_list(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'incr_list' do\n    assert [] == HumanEval.candidate([])\n    assert [4, 3, 2] == HumanEval.candidate([3, 2, 1])\n    assert [6, 3, 6, 3, 4, 4, 10, 1, 124] == HumanEval.candidate([5, 2, 5, 2, 3, 3, 9, 0, 123])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> HumanEval.pairs_sum_to_zero([1, 3, 5, 0])\n# false\n# >>> HumanEval.pairs_sum_to_zero([1, 3, -2, 1])\n# false\n# >>> HumanEval.pairs_sum_to_zero([1, 2, 3, 7])\n# false\n# >>> HumanEval.pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# true\n# >>> HumanEval.pairs_sum_to_zero([1])\n# false\n\ndefmodule HumanEval do\n  def candidate(l), do: pairs_sum_to_zero(l)\n  def pairs_sum_to_zero(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pairs_sum_to_zero' do\n    assert false == HumanEval.candidate([1, 3, 5, 0])\n    assert false == HumanEval.candidate([1, 3, -2, 1])\n    assert false == HumanEval.candidate([1, 2, 3, 7])\n    assert true == HumanEval.candidate([2, 4, -5, 3, 5, 7])\n    assert false == HumanEval.candidate([1])\n    assert true == HumanEval.candidate([-3, 9, -1, 3, 2, 30])\n    assert true == HumanEval.candidate([-3, 9, -1, 3, 2, 31])\n    assert false == HumanEval.candidate([-3, 9, -1, 4, 2, 30])\n    assert false == HumanEval.candidate([-3, 9, -1, 4, 2, 31])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_44_change_base", "prompt": "# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> HumanEval.change_base(8, 3)\n# \"22\"\n# >>> HumanEval.change_base(8, 2)\n# \"1000\"\n# >>> HumanEval.change_base(7, 2)\n# \"111\"\n\ndefmodule HumanEval do\n  def candidate(x, base), do: change_base(x, base)\n  def change_base(x, base) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'change_base' do\n    assert \"22\" == HumanEval.candidate(8, 3)\n    assert \"100\" == HumanEval.candidate(9, 3)\n    assert \"11101010\" == HumanEval.candidate(234, 2)\n    assert \"10000\" == HumanEval.candidate(16, 2)\n    assert \"1000\" == HumanEval.candidate(8, 2)\n    assert \"111\" == HumanEval.candidate(7, 2)\n    assert \"2\" == HumanEval.candidate(2, 3)\n    assert \"3\" == HumanEval.candidate(3, 4)\n    assert \"4\" == HumanEval.candidate(4, 5)\n    assert \"5\" == HumanEval.candidate(5, 6)\n    assert \"6\" == HumanEval.candidate(6, 7)\n    assert \"7\" == HumanEval.candidate(7, 8)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "# Given length of a side and high return area for a triangle.\n# >>> HumanEval.triangle_area(5, 3)\n# 7.5\n\ndefmodule HumanEval do\n  def candidate(a, h), do: triangle_area(a, h)\n  def triangle_area(a, h) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'triangle_area' do\n    assert 7.5 == HumanEval.candidate(5, 3)\n    assert 2.0 == HumanEval.candidate(2, 2)\n    assert 40.0 == HumanEval.candidate(10, 8)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_46_fib4", "prompt": "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> HumanEval.fib4(5)\n# 4\n# >>> HumanEval.fib4(6)\n# 8\n# >>> HumanEval.fib4(7)\n# 14\n\ndefmodule HumanEval do\n  def candidate(n), do: fib4(n)\n  def fib4(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'fib4' do\n    assert 4 == HumanEval.candidate(5)\n    assert 28 == HumanEval.candidate(8)\n    assert 104 == HumanEval.candidate(10)\n    assert 386 == HumanEval.candidate(12)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_47_median", "prompt": "# Return median of elements in the list l.\n# >>> HumanEval.median([3, 1, 2, 4, 5])\n# 3\n# >>> HumanEval.median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n\ndefmodule HumanEval do\n  def candidate(l), do: median(l)\n  def median(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'median' do\n    assert 3 == HumanEval.candidate([3, 1, 2, 4, 5])\n    assert 8.0 == HumanEval.candidate([-10, 4, 6, 1000, 10, 20])\n    assert 5 == HumanEval.candidate([5])\n    assert 5.5 == HumanEval.candidate([6, 5])\n    assert 7 == HumanEval.candidate([8, 1, 3, 9, 9, 2, 7])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "# Checks if given string is a palindrome\n# >>> HumanEval.is_palindrome(\"\")\n# true\n# >>> HumanEval.is_palindrome(\"aba\")\n# true\n# >>> HumanEval.is_palindrome(\"aaaaa\")\n# true\n# >>> HumanEval.is_palindrome(\"zbcd\")\n# false\n\ndefmodule HumanEval do\n  def candidate(text), do: is_palindrome(text)\n  def is_palindrome(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_palindrome' do\n    assert true == HumanEval.candidate(\"\")\n    assert true == HumanEval.candidate(\"aba\")\n    assert true == HumanEval.candidate(\"aaaaa\")\n    assert false == HumanEval.candidate(\"zbcd\")\n    assert true == HumanEval.candidate(\"xywyx\")\n    assert false == HumanEval.candidate(\"xywyz\")\n    assert false == HumanEval.candidate(\"xywzx\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_49_modp", "prompt": "# Return 2^n modulo p (be aware of numerics).\n# >>> HumanEval.modp(3, 5)\n# 3\n# >>> HumanEval.modp(1101, 101)\n# 2\n# >>> HumanEval.modp(0, 101)\n# 1\n# >>> HumanEval.modp(3, 11)\n# 8\n# >>> HumanEval.modp(100, 101)\n# 1\n\ndefmodule HumanEval do\n  def candidate(n, p), do: modp(n, p)\n  def modp(n, p) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'modp' do\n    assert 3 == HumanEval.candidate(3, 5)\n    assert 2 == HumanEval.candidate(1101, 101)\n    assert 1 == HumanEval.candidate(0, 101)\n    assert 8 == HumanEval.candidate(3, 11)\n    assert 1 == HumanEval.candidate(100, 101)\n    assert 4 == HumanEval.candidate(30, 5)\n    assert 3 == HumanEval.candidate(31, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "# remove_vowels is a function that takes string and returns string without vowels.\n# >>> HumanEval.remove_vowels(\"\")\n# \"\"\n# >>> HumanEval.remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> HumanEval.remove_vowels(\"aaaaa\")\n# \"\"\n# >>> HumanEval.remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> HumanEval.remove_vowels(\"zbcd\")\n# \"zbcd\"\n\ndefmodule HumanEval do\n  def candidate(text), do: remove_vowels(text)\n  def remove_vowels(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_vowels' do\n    assert \"\" == HumanEval.candidate(\"\")\n    assert \"bcdf\nghjklm\" == HumanEval.candidate(\"abcdef\nghijklm\")\n    assert \"fdcb\" == HumanEval.candidate(\"fedcba\")\n    assert \"\" == HumanEval.candidate(\"eeeee\")\n    assert \"cB\" == HumanEval.candidate(\"acBAA\")\n    assert \"cB\" == HumanEval.candidate(\"EcBOO\")\n    assert \"ybcd\" == HumanEval.candidate(\"ybcd\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "# Return true if all numbers in the list l are below threshold t.\n# >>> HumanEval.below_threshold([1, 2, 4, 10], 100)\n# true\n# >>> HumanEval.below_threshold([1, 20, 4, 10], 5)\n# false\n\ndefmodule HumanEval do\n  def candidate(l, t), do: below_threshold(l, t)\n  def below_threshold(l, t) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'below_threshold' do\n    assert true == HumanEval.candidate([1, 2, 4, 10], 100)\n    assert false == HumanEval.candidate([1, 20, 4, 10], 5)\n    assert true == HumanEval.candidate([1, 20, 4, 10], 21)\n    assert true == HumanEval.candidate([1, 20, 4, 10], 22)\n    assert true == HumanEval.candidate([1, 8, 4, 10], 11)\n    assert false == HumanEval.candidate([1, 8, 4, 10], 10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_53_add", "prompt": "# Add two numbers x and y\n# >>> HumanEval.add(2, 3)\n# 5\n# >>> HumanEval.add(5, 7)\n# 12\n\ndefmodule HumanEval do\n  def candidate(x, y), do: add(x, y)\n  def add(x, y) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add' do\n    assert 1 == HumanEval.candidate(0, 1)\n    assert 1 == HumanEval.candidate(1, 0)\n    assert 5 == HumanEval.candidate(2, 3)\n    assert 12 == HumanEval.candidate(5, 7)\n    assert 12 == HumanEval.candidate(7, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_54_same_chars", "prompt": "# Check if two words have the same characters.\n# >>> HumanEval.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> HumanEval.same_chars(\"abcd\", \"dddddddabc\")\n# true\n# >>> HumanEval.same_chars(\"dddddddabc\", \"abcd\")\n# true\n# >>> HumanEval.same_chars(\"eabcd\", \"dddddddabc\")\n# false\n# >>> HumanEval.same_chars(\"abcd\", \"dddddddabce\")\n# false\n# >>> HumanEval.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# false\n\ndefmodule HumanEval do\n  def candidate(s0, s1), do: same_chars(s0, s1)\n  def same_chars(s0, s1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'same_chars' do\n    assert true == HumanEval.candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    assert true == HumanEval.candidate(\"abcd\", \"dddddddabc\")\n    assert true == HumanEval.candidate(\"dddddddabc\", \"abcd\")\n    assert false == HumanEval.candidate(\"eabcd\", \"dddddddabc\")\n    assert false == HumanEval.candidate(\"abcd\", \"dddddddabcf\")\n    assert false == HumanEval.candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    assert false == HumanEval.candidate(\"aabb\", \"aaccc\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_55_fib", "prompt": "# Return n-th Fibonacci number.\n# >>> HumanEval.fib(10)\n# 55\n# >>> HumanEval.fib(1)\n# 1\n# >>> HumanEval.fib(8)\n# 21\n\ndefmodule HumanEval do\n  def candidate(n), do: fib(n)\n  def fib(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'fib' do\n    assert 55 == HumanEval.candidate(10)\n    assert 1 == HumanEval.candidate(1)\n    assert 21 == HumanEval.candidate(8)\n    assert 89 == HumanEval.candidate(11)\n    assert 144 == HumanEval.candidate(12)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> HumanEval.correct_bracketing(\"<\")\n# false\n# >>> HumanEval.correct_bracketing(\"<>\")\n# true\n# >>> HumanEval.correct_bracketing(\"<<><>>\")\n# true\n# >>> HumanEval.correct_bracketing(\"><<>\")\n# false\n\ndefmodule HumanEval do\n  def candidate(brackets), do: correct_bracketing(brackets)\n  def correct_bracketing(brackets) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'correct_bracketing' do\n    assert true == HumanEval.candidate(\"<>\")\n    assert true == HumanEval.candidate(\"<<><>>\")\n    assert true == HumanEval.candidate(\"<><><<><>><>\")\n    assert true == HumanEval.candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert false == HumanEval.candidate(\"<<<><>>>>\")\n    assert false == HumanEval.candidate(\"><<>\")\n    assert false == HumanEval.candidate(\"<\")\n    assert false == HumanEval.candidate(\"<<<<\")\n    assert false == HumanEval.candidate(\">\")\n    assert false == HumanEval.candidate(\"<<>\")\n    assert false == HumanEval.candidate(\"<><><<><>><>><<>\")\n    assert false == HumanEval.candidate(\"<><><<><>><>>><>\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_57_monotonic", "prompt": "# Return true is list elements are monotonically increasing or decreasing.\n# >>> HumanEval.monotonic([1, 2, 4, 20])\n# true\n# >>> HumanEval.monotonic([1, 20, 4, 10])\n# false\n# >>> HumanEval.monotonic([4, 1, 0, -10])\n# true\n\ndefmodule HumanEval do\n  def candidate(l), do: monotonic(l)\n  def monotonic(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'monotonic' do\n    assert true == HumanEval.candidate([1, 2, 4, 10])\n    assert true == HumanEval.candidate([1, 2, 4, 20])\n    assert false == HumanEval.candidate([1, 20, 4, 10])\n    assert true == HumanEval.candidate([4, 1, 0, -10])\n    assert true == HumanEval.candidate([4, 1, 1, 0])\n    assert false == HumanEval.candidate([1, 2, 3, 2, 5, 60])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5, 60])\n    assert true == HumanEval.candidate([9, 9, 9, 9])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_58_common", "prompt": "# Return sorted unique common elements for two lists.\n# >>> HumanEval.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> HumanEval.common([5, 3, 2, 8], [3, 2])\n# [2, 3]\n\ndefmodule HumanEval do\n  def candidate(l1, l2), do: common(l1, l2)\n  def common(l1, l2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'common' do\n    assert [1, 5, 653] == HumanEval.candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    assert [2, 3] == HumanEval.candidate([5, 3, 2, 8], [3, 2])\n    assert [2, 3, 4] == HumanEval.candidate([4, 3, 2, 8], [3, 2, 4])\n    assert [] == HumanEval.candidate([4, 3, 2, 8], [])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> HumanEval.largest_prime_factor(13195)\n# 29\n# >>> HumanEval.largest_prime_factor(2048)\n# 2\n\ndefmodule HumanEval do\n  def candidate(n), do: largest_prime_factor(n)\n  def largest_prime_factor(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'largest_prime_factor' do\n    assert 5 == HumanEval.candidate(15)\n    assert 3 == HumanEval.candidate(27)\n    assert 7 == HumanEval.candidate(63)\n    assert 11 == HumanEval.candidate(330)\n    assert 29 == HumanEval.candidate(13195)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> HumanEval.sum_to_n(30)\n# 465\n# >>> HumanEval.sum_to_n(100)\n# 5050\n# >>> HumanEval.sum_to_n(5)\n# 15\n# >>> HumanEval.sum_to_n(10)\n# 55\n# >>> HumanEval.sum_to_n(1)\n# 1\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_to_n(n)\n  def sum_to_n(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_to_n' do\n    assert 1 == HumanEval.candidate(1)\n    assert 21 == HumanEval.candidate(6)\n    assert 66 == HumanEval.candidate(11)\n    assert 465 == HumanEval.candidate(30)\n    assert 5050 == HumanEval.candidate(100)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> HumanEval.correct_bracketing(\"(\")\n# false\n# >>> HumanEval.correct_bracketing(\"()\")\n# true\n# >>> HumanEval.correct_bracketing(\"(()())\")\n# true\n# >>> HumanEval.correct_bracketing(\")(()\")\n# false\n\ndefmodule HumanEval do\n  def candidate(brackets), do: correct_bracketing(brackets)\n  def correct_bracketing(brackets) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'correct_bracketing' do\n    assert true == HumanEval.candidate(\"()\")\n    assert true == HumanEval.candidate(\"(()())\")\n    assert true == HumanEval.candidate(\"()()(()())()\")\n    assert true == HumanEval.candidate(\"()()((()()())())(()()(()))\")\n    assert false == HumanEval.candidate(\"((()())))\")\n    assert false == HumanEval.candidate(\")(()\")\n    assert false == HumanEval.candidate(\"(\")\n    assert false == HumanEval.candidate(\"((((\")\n    assert false == HumanEval.candidate(\")\")\n    assert false == HumanEval.candidate(\"(()\")\n    assert false == HumanEval.candidate(\"()()(()())())(()\")\n    assert false == HumanEval.candidate(\"()()(()())()))()\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_62_derivative", "prompt": "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> HumanEval.derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> HumanEval.derivative([1, 2, 3])\n# [2, 6]\n\ndefmodule HumanEval do\n  def candidate(xs), do: derivative(xs)\n  def derivative(xs) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'derivative' do\n    assert [1, 4, 12, 20] == HumanEval.candidate([3, 1, 2, 4, 5])\n    assert [2, 6] == HumanEval.candidate([1, 2, 3])\n    assert [2, 2] == HumanEval.candidate([3, 2, 1])\n    assert [2, 2, 0, 16] == HumanEval.candidate([3, 2, 1, 0, 4])\n    assert [] == HumanEval.candidate([1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_63_fibfib", "prompt": "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> HumanEval.fibfib(1)\n# 0\n# >>> HumanEval.fibfib(5)\n# 4\n# >>> HumanEval.fibfib(8)\n# 24\n\ndefmodule HumanEval do\n  def candidate(n), do: fibfib(n)\n  def fibfib(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'fibfib' do\n    assert 1 == HumanEval.candidate(2)\n    assert 0 == HumanEval.candidate(1)\n    assert 4 == HumanEval.candidate(5)\n    assert 24 == HumanEval.candidate(8)\n    assert 81 == HumanEval.candidate(10)\n    assert 274 == HumanEval.candidate(12)\n    assert 927 == HumanEval.candidate(14)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> HumanEval.vowels_count(\"abcde\")\n# 2\n# >>> HumanEval.vowels_count(\"ACEDY\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(s), do: vowels_count(s)\n  def vowels_count(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'vowels_count' do\n    assert 2 == HumanEval.candidate(\"abcde\")\n    assert 3 == HumanEval.candidate(\"Alone\")\n    assert 2 == HumanEval.candidate(\"key\")\n    assert 1 == HumanEval.candidate(\"bye\")\n    assert 2 == HumanEval.candidate(\"keY\")\n    assert 1 == HumanEval.candidate(\"bYe\")\n    assert 3 == HumanEval.candidate(\"ACEDY\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> HumanEval.circular_shift(12, 1)\n# \"21\"\n# >>> HumanEval.circular_shift(12, 2)\n# \"12\"\n\ndefmodule HumanEval do\n  def candidate(x, shift), do: circular_shift(x, shift)\n  def circular_shift(x, shift) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'circular_shift' do\n    assert \"001\" == HumanEval.candidate(100, 2)\n    assert \"12\" == HumanEval.candidate(12, 2)\n    assert \"79\" == HumanEval.candidate(97, 8)\n    assert \"21\" == HumanEval.candidate(12, 1)\n    assert \"11\" == HumanEval.candidate(11, 101)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_66_digitSum", "prompt": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> HumanEval.digitSum(\"\")\n# 0\n# >>> HumanEval.digitSum(\"abAB\")\n# 131\n# >>> HumanEval.digitSum(\"abcCd\")\n# 67\n# >>> HumanEval.digitSum(\"helloE\")\n# 69\n# >>> HumanEval.digitSum(\"woArBld\")\n# 131\n# >>> HumanEval.digitSum(\"aAaaaXa\")\n# 153\n\ndefmodule HumanEval do\n  def candidate(s), do: digitSum(s)\n  def digitSum(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'digitSum' do\n    assert 0 == HumanEval.candidate(\"\")\n    assert 131 == HumanEval.candidate(\"abAB\")\n    assert 67 == HumanEval.candidate(\"abcCd\")\n    assert 69 == HumanEval.candidate(\"helloE\")\n    assert 131 == HumanEval.candidate(\"woArBld\")\n    assert 153 == HumanEval.candidate(\"aAaaaXa\")\n    assert 151 == HumanEval.candidate(\" How are yOu?\")\n    assert 327 == HumanEval.candidate(\"You arE Very Smart\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> HumanEval.fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> HumanEval.fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> HumanEval.fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> HumanEval.fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\n\ndefmodule HumanEval do\n  def candidate(s, n), do: fruit_distribution(s, n)\n  def fruit_distribution(s, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'fruit_distribution' do\n    assert 8 == HumanEval.candidate(\"5 apples and 6 oranges\", 19)\n    assert 10 == HumanEval.candidate(\"5 apples and 6 oranges\", 21)\n    assert 2 == HumanEval.candidate(\"0 apples and 1 oranges\", 3)\n    assert 2 == HumanEval.candidate(\"1 apples and 0 oranges\", 3)\n    assert 95 == HumanEval.candidate(\"2 apples and 3 oranges\", 100)\n    assert 0 == HumanEval.candidate(\"2 apples and 3 oranges\", 5)\n    assert 19 == HumanEval.candidate(\"1 apples and 100 oranges\", 120)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_68_pluck", "prompt": "# \"Given a list representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given list is empty, return [].\n# Example 1:\n# >>> HumanEval.pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> HumanEval.pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> HumanEval.pluck([])\n# []\n# Example 4:\n# >>> HumanEval.pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n\ndefmodule HumanEval do\n  def candidate(arr), do: pluck(arr)\n  def pluck(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pluck' do\n    assert [2, 1] == HumanEval.candidate([4, 2, 3])\n    assert [2, 1] == HumanEval.candidate([1, 2, 3])\n    assert [] == HumanEval.candidate([])\n    assert [0, 1] == HumanEval.candidate([5, 0, 3, 0, 4, 2])\n    assert [0, 3] == HumanEval.candidate([1, 2, 3, 0, 5, 3])\n    assert [4, 1] == HumanEval.candidate([5, 4, 8, 4, 8])\n    assert [6, 1] == HumanEval.candidate([7, 6, 7, 1])\n    assert [] == HumanEval.candidate([7, 9, 7, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_69_search", "prompt": "# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> HumanEval.search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> HumanEval.search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> HumanEval.search([5, 5, 4, 4, 4])\n# -1\n\ndefmodule HumanEval do\n  def candidate(lst), do: search(lst)\n  def search(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'search' do\n    assert 1 == HumanEval.candidate([5, 5, 5, 5, 1])\n    assert 4 == HumanEval.candidate([4, 1, 4, 1, 4, 4])\n    assert -1 == HumanEval.candidate([3, 3])\n    assert 8 == HumanEval.candidate([8, 8, 8, 8, 8, 8, 8, 8])\n    assert 2 == HumanEval.candidate([2, 3, 3, 2, 2])\n    assert 1 == HumanEval.candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])\n    assert 2 == HumanEval.candidate([3, 2, 8, 2])\n    assert 1 == HumanEval.candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])\n    assert -1 == HumanEval.candidate([8, 8, 3, 6, 5, 6, 4])\n    assert 1 == HumanEval.candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\n    assert 1 == HumanEval.candidate([1, 9, 10, 1, 3])\n    assert 5 == HumanEval.candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])\n    assert 1 == HumanEval.candidate([1])\n    assert 4 == HumanEval.candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])\n    assert 2 == HumanEval.candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])\n    assert 1 == HumanEval.candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])\n    assert 4 == HumanEval.candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])\n    assert 4 == HumanEval.candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])\n    assert 2 == HumanEval.candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])\n    assert -1 == HumanEval.candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])\n    assert -1 == HumanEval.candidate([10])\n    assert 2 == HumanEval.candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])\n    assert 1 == HumanEval.candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])\n    assert 1 == HumanEval.candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])\n    assert -1 == HumanEval.candidate([3, 10, 10, 9, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> HumanEval.strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> HumanEval.strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> HumanEval.strange_sort_list([])\n# []\n\ndefmodule HumanEval do\n  def candidate(lst), do: strange_sort_list(lst)\n  def strange_sort_list(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'strange_sort_list' do\n    assert [1, 4, 2, 3] == HumanEval.candidate([1, 2, 3, 4])\n    assert [5, 9, 6, 8, 7] == HumanEval.candidate([5, 6, 7, 8, 9])\n    assert [1, 5, 2, 4, 3] == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert [1, 9, 5, 8, 6, 7] == HumanEval.candidate([5, 6, 7, 8, 9, 1])\n    assert [5, 5, 5, 5] == HumanEval.candidate([5, 5, 5, 5])\n    assert [] == HumanEval.candidate([])\n    assert [1, 8, 2, 7, 3, 6, 4, 5] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8])\n    assert [-5, 5, -5, 5, 0, 2, 2, 2] == HumanEval.candidate([0, 2, 2, 2, 5, 5, -5, -5])\n    assert [111111] == HumanEval.candidate([111111])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> HumanEval.triangle_area(3, 4, 5)\n# 6.0\n# >>> HumanEval.triangle_area(1, 2, 10)\n# -1\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: triangle_area(a, b, c)\n  def triangle_area(a, b, c) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'triangle_area' do\n    assert 6.0 == HumanEval.candidate(3, 4, 5)\n    assert -1 == HumanEval.candidate(1, 2, 10)\n    assert 8.18 == HumanEval.candidate(4, 8, 5)\n    assert 1.73 == HumanEval.candidate(2, 2, 2)\n    assert -1 == HumanEval.candidate(1, 2, 3)\n    assert 16.25 == HumanEval.candidate(10, 5, 7)\n    assert -1 == HumanEval.candidate(2, 6, 3)\n    assert 0.43 == HumanEval.candidate(1, 1, 1)\n    assert -1 == HumanEval.candidate(2, 2, 10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> HumanEval.will_it_fly([1, 2], 5)\n# false\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> HumanEval.will_it_fly([3, 2, 3], 1)\n# false\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> HumanEval.will_it_fly([3, 2, 3], 9)\n# true\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> HumanEval.will_it_fly([3], 5)\n# true\n# # 3 is less than the maximum possible weight, and it's balanced.\n\ndefmodule HumanEval do\n  def candidate(q, w), do: will_it_fly(q, w)\n  def will_it_fly(q, w) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'will_it_fly' do\n    assert true == HumanEval.candidate([3, 2, 3], 9)\n    assert false == HumanEval.candidate([1, 2], 5)\n    assert true == HumanEval.candidate([3], 5)\n    assert false == HumanEval.candidate([3, 2, 3], 1)\n    assert false == HumanEval.candidate([1, 2, 3], 6)\n    assert true == HumanEval.candidate([5], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "# Given a list arr of integers, find the minimum number of elements that\n# need to be changed to make the list palindromic. A palindromic list is a list that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> HumanEval.smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> HumanEval.smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> HumanEval.smallest_change([1, 2, 3, 2, 1])\n# 0\n\ndefmodule HumanEval do\n  def candidate(arr), do: smallest_change(arr)\n  def smallest_change(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'smallest_change' do\n    assert 4 == HumanEval.candidate([1, 2, 3, 5, 4, 7, 9, 6])\n    assert 1 == HumanEval.candidate([1, 2, 3, 4, 3, 2, 2])\n    assert 1 == HumanEval.candidate([1, 4, 2])\n    assert 1 == HumanEval.candidate([1, 4, 4, 2])\n    assert 0 == HumanEval.candidate([1, 2, 3, 2, 1])\n    assert 0 == HumanEval.candidate([3, 1, 1, 3])\n    assert 0 == HumanEval.candidate([1])\n    assert 1 == HumanEval.candidate([0, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_74_total_match", "prompt": "# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> HumanEval.total_match([], [])\n# []\n# >>> HumanEval.total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> HumanEval.total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> HumanEval.total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> HumanEval.total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\n\ndefmodule HumanEval do\n  def candidate(lst1, lst2), do: total_match(lst1, lst2)\n  def total_match(lst1, lst2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'total_match' do\n    assert [] == HumanEval.candidate([], [])\n    assert [\"hi\", \"hi\"] == HumanEval.candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"])\n    assert [\"hi\", \"admin\"] == HumanEval.candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    assert [\"4\"] == HumanEval.candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    assert [\"hI\", \"Hi\"] == HumanEval.candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    assert [\"hI\", \"hi\", \"hi\"] == HumanEval.candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    assert [\"hi\", \"admin\"] == HumanEval.candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])\n    assert [] == HumanEval.candidate([], [\"this\"])\n    assert [] == HumanEval.candidate([\"this\"], [])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> HumanEval.is_multiply_prime(30)\n# true\n# 30 = 2 * 3 * 5\n\ndefmodule HumanEval do\n  def candidate(a), do: is_multiply_prime(a)\n  def is_multiply_prime(a) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_multiply_prime' do\n    assert false == HumanEval.candidate(5)\n    assert true == HumanEval.candidate(30)\n    assert true == HumanEval.candidate(8)\n    assert false == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(125)\n    assert true == HumanEval.candidate(105)\n    assert false == HumanEval.candidate(126)\n    assert false == HumanEval.candidate(729)\n    assert false == HumanEval.candidate(891)\n    assert true == HumanEval.candidate(1001)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> HumanEval.is_simple_power(1, 4)\n# true\n# >>> HumanEval.is_simple_power(2, 2)\n# true\n# >>> HumanEval.is_simple_power(8, 2)\n# true\n# >>> HumanEval.is_simple_power(3, 2)\n# false\n# >>> HumanEval.is_simple_power(3, 1)\n# false\n# >>> HumanEval.is_simple_power(5, 3)\n# false\n\ndefmodule HumanEval do\n  def candidate(x, n), do: is_simple_power(x, n)\n  def is_simple_power(x, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_simple_power' do\n    assert true == HumanEval.candidate(16, 2)\n    assert false == HumanEval.candidate(143214, 16)\n    assert true == HumanEval.candidate(4, 2)\n    assert true == HumanEval.candidate(9, 3)\n    assert true == HumanEval.candidate(16, 4)\n    assert false == HumanEval.candidate(24, 2)\n    assert false == HumanEval.candidate(128, 4)\n    assert false == HumanEval.candidate(12, 6)\n    assert true == HumanEval.candidate(1, 1)\n    assert true == HumanEval.candidate(1, 12)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_77_iscube", "prompt": "# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> HumanEval.iscube(1)\n# true\n# >>> HumanEval.iscube(2)\n# false\n# >>> HumanEval.iscube(-1)\n# true\n# >>> HumanEval.iscube(64)\n# true\n# >>> HumanEval.iscube(0)\n# true\n# >>> HumanEval.iscube(180)\n# false\n\ndefmodule HumanEval do\n  def candidate(a), do: iscube(a)\n  def iscube(a) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'iscube' do\n    assert true == HumanEval.candidate(1)\n    assert false == HumanEval.candidate(2)\n    assert true == HumanEval.candidate(-1)\n    assert true == HumanEval.candidate(64)\n    assert false == HumanEval.candidate(180)\n    assert true == HumanEval.candidate(1000)\n    assert true == HumanEval.candidate(0)\n    assert false == HumanEval.candidate(1729)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_78_hex_key", "prompt": "# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> HumanEval.hex_key(\"AB\")\n# 1\n# >>> HumanEval.hex_key(\"1077E\")\n# 2\n# >>> HumanEval.hex_key(\"ABED1A33\")\n# 4\n# >>> HumanEval.hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> HumanEval.hex_key(\"2020\")\n# 2\n\ndefmodule HumanEval do\n  def candidate(num), do: hex_key(num)\n  def hex_key(num) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'hex_key' do\n    assert 1 == HumanEval.candidate(\"AB\")\n    assert 2 == HumanEval.candidate(\"1077E\")\n    assert 4 == HumanEval.candidate(\"ABED1A33\")\n    assert 2 == HumanEval.candidate(\"2020\")\n    assert 6 == HumanEval.candidate(\"123456789ABCDEF0\")\n    assert 12 == HumanEval.candidate(\"112233445566778899AABBCCDDEEFF00\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> HumanEval.decimal_to_binary(15)\n# \"db1111db\"\n# >>> HumanEval.decimal_to_binary(32)\n# \"db100000db\"\n\ndefmodule HumanEval do\n  def candidate(decimal), do: decimal_to_binary(decimal)\n  def decimal_to_binary(decimal) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'decimal_to_binary' do\n    assert \"db0db\" == HumanEval.candidate(0)\n    assert \"db100000db\" == HumanEval.candidate(32)\n    assert \"db1100111db\" == HumanEval.candidate(103)\n    assert \"db1111db\" == HumanEval.candidate(15)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_80_is_happy", "prompt": "# You are given a string s.\n# Your task is to check if the string is hapelixir or not.\n# A string is hapelixir if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> HumanEval.is_happy(\"a\")\n# false\n# >>> HumanEval.is_happy(\"aa\")\n# false\n# >>> HumanEval.is_happy(\"abcd\")\n# true\n# >>> HumanEval.is_happy(\"aabb\")\n# false\n# >>> HumanEval.is_happy(\"adb\")\n# true\n# >>> HumanEval.is_happy(\"xyy\")\n# false\n\ndefmodule HumanEval do\n  def candidate(s), do: is_happy(s)\n  def is_happy(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_happy' do\n    assert false == HumanEval.candidate(\"a\")\n    assert false == HumanEval.candidate(\"aa\")\n    assert true == HumanEval.candidate(\"abcd\")\n    assert false == HumanEval.candidate(\"aabb\")\n    assert true == HumanEval.candidate(\"adb\")\n    assert false == HumanEval.candidate(\"xyy\")\n    assert true == HumanEval.candidate(\"iopaxpoi\")\n    assert false == HumanEval.candidate(\"iopaxioi\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> HumanEval.grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\ndefmodule HumanEval do\n  def candidate(grades), do: numerical_letter_grade(grades)\n  def numerical_letter_grade(grades) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'numerical_letter_grade' do\n    assert [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == HumanEval.candidate([4.0, 3, 1.7, 2, 3.5])\n    assert [\"D+\"] == HumanEval.candidate([1.2])\n    assert [\"D-\"] == HumanEval.candidate([0.5])\n    assert [\"E\"] == HumanEval.candidate([0.0])\n    assert [\"D\", \"D-\", \"C-\", \"B\", \"B+\"] == HumanEval.candidate([1.0, 0.3, 1.5, 2.8, 3.3])\n    assert [\"E\", \"D-\"] == HumanEval.candidate([0.0, 0.7])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_82_prime_length", "prompt": "# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> HumanEval.prime_length(\"Hello\")\n# true\n# >>> HumanEval.prime_length(\"abcdcba\")\n# true\n# >>> HumanEval.prime_length(\"kittens\")\n# true\n# >>> HumanEval.prime_length(\"orange\")\n# false\n\ndefmodule HumanEval do\n  def candidate(string), do: prime_length(string)\n  def prime_length(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'prime_length' do\n    assert true == HumanEval.candidate(\"Hello\")\n    assert true == HumanEval.candidate(\"abcdcba\")\n    assert true == HumanEval.candidate(\"kittens\")\n    assert false == HumanEval.candidate(\"orange\")\n    assert true == HumanEval.candidate(\"wow\")\n    assert true == HumanEval.candidate(\"world\")\n    assert true == HumanEval.candidate(\"MadaM\")\n    assert true == HumanEval.candidate(\"Wow\")\n    assert false == HumanEval.candidate(\"\")\n    assert true == HumanEval.candidate(\"HI\")\n    assert true == HumanEval.candidate(\"go\")\n    assert false == HumanEval.candidate(\"gogo\")\n    assert false == HumanEval.candidate(\"aaaaaaaaaaaaaaa\")\n    assert true == HumanEval.candidate(\"Madam\")\n    assert false == HumanEval.candidate(\"M\")\n    assert false == HumanEval.candidate(\"0\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n\ndefmodule HumanEval do\n  def candidate(n), do: starts_one_ends(n)\n  def starts_one_ends(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'starts_one_ends' do\n    assert 1 == HumanEval.candidate(1)\n    assert 18 == HumanEval.candidate(2)\n    assert 180 == HumanEval.candidate(3)\n    assert 1800 == HumanEval.candidate(4)\n    assert 18000 == HumanEval.candidate(5)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_84_solve", "prompt": "# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> HumanEval.solve(1000)\n# \"1\"\n# >>> HumanEval.solve(150)\n# \"110\"\n# >>> HumanEval.solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n\ndefmodule HumanEval do\n  def candidate(N), do: solve(N)\n  def solve(N) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'solve' do\n    assert \"1\" == HumanEval.candidate(1000)\n    assert \"110\" == HumanEval.candidate(150)\n    assert \"1100\" == HumanEval.candidate(147)\n    assert \"1001\" == HumanEval.candidate(333)\n    assert \"10010\" == HumanEval.candidate(963)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_85_add", "prompt": "# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> HumanEval.add([4, 2, 6, 7])\n# 2\n\ndefmodule HumanEval do\n  def candidate(lst), do: add(lst)\n  def add(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add' do\n    assert 88 == HumanEval.candidate([4, 88])\n    assert 122 == HumanEval.candidate([4, 5, 6, 7, 2, 122])\n    assert 0 == HumanEval.candidate([4, 0, 6, 7])\n    assert 12 == HumanEval.candidate([4, 4, 6, 8])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> HumanEval.anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> HumanEval.anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> HumanEval.anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\n\ndefmodule HumanEval do\n  def candidate(s), do: anti_shuffle(s)\n  def anti_shuffle(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'anti_shuffle' do\n    assert \"Hi\" == HumanEval.candidate(\"Hi\")\n    assert \"ehllo\" == HumanEval.candidate(\"hello\")\n    assert \"bemnru\" == HumanEval.candidate(\"number\")\n    assert \"abcd\" == HumanEval.candidate(\"abcd\")\n    assert \"Hello !!!Wdlor\" == HumanEval.candidate(\"Hello World!!!\")\n    assert \"\" == HumanEval.candidate(\"\")\n    assert \".Hi My aemn is Meirst .Rboot How aer ?ouy\" == HumanEval.candidate(\"Hi. My name is Mister Robot. How are you?\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_87_get_row", "prompt": "# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> HumanEval.get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}]\n# >>> HumanEval.get_row([], 1)\n# []\n# >>> HumanEval.get_row([[], [1], [1, 2, 3]], 3)\n# [{2, 2}]\n\ndefmodule HumanEval do\n  def candidate(lst, x), do: get_row(lst, x)\n  def get_row(lst, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_row' do\n    assert [{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}] == HumanEval.candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    assert [{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}] == HumanEval.candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2)\n    assert [{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}] == HumanEval.candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    assert [] == HumanEval.candidate([], 1)\n    assert [] == HumanEval.candidate([[1]], 2)\n    assert [{2, 2}] == HumanEval.candidate([[], [1], [1, 2, 3]], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_88_sort_array", "prompt": "# Given a list of non-negative integers, return a coelixir of the given list after sorting,\n# you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given list.\n# Examples:\n# >>> HumanEval.sort_array([])\n# []\n# >>> HumanEval.sort_array([5])\n# [5]\n# >>> HumanEval.sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> HumanEval.sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\ndefmodule HumanEval do\n  def candidate(array), do: sort_array(array)\n  def sort_array(array) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_array' do\n    assert [] == HumanEval.candidate([])\n    assert [5] == HumanEval.candidate([5])\n    assert [0, 1, 2, 3, 4, 5] == HumanEval.candidate([2, 4, 3, 0, 1, 5])\n    assert [6, 5, 4, 3, 2, 1, 0] == HumanEval.candidate([2, 4, 3, 0, 1, 5, 6])\n    assert [1, 2] == HumanEval.candidate([2, 1])\n    assert [0, 11, 15, 32, 42, 87] == HumanEval.candidate([15, 42, 87, 32, 11, 0])\n    assert [23, 21, 14, 11] == HumanEval.candidate([21, 14, 23, 11])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_89_encrypt", "prompt": "# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> HumanEval.encrypt(\"hi\")\n# \"lm\"\n# >>> HumanEval.encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> HumanEval.encrypt(\"gf\")\n# \"kj\"\n# >>> HumanEval.encrypt(\"et\")\n# \"ix\"\n\ndefmodule HumanEval do\n  def candidate(s), do: encrypt(s)\n  def encrypt(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'encrypt' do\n    assert \"lm\" == HumanEval.candidate(\"hi\")\n    assert \"ewhjklnop\" == HumanEval.candidate(\"asdfghjkl\")\n    assert \"kj\" == HumanEval.candidate(\"gf\")\n    assert \"ix\" == HumanEval.candidate(\"et\")\n    assert \"jeiajeaijeiak\" == HumanEval.candidate(\"faewfawefaewg\")\n    assert \"lippsqcjvmirh\" == HumanEval.candidate(\"hellomyfriend\")\n    assert \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" == HumanEval.candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")\n    assert \"e\" == HumanEval.candidate(\"a\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return nil if there is no such element.\n# >>> HumanEval.next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> HumanEval.next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> HumanEval.next_smallest([])\n# nil\n# >>> HumanEval.next_smallest([1, 1])\n# nil\n\ndefmodule HumanEval do\n  def candidate(lst), do: next_smallest(lst)\n  def next_smallest(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_smallest' do\n    assert 2 == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert 2 == HumanEval.candidate([5, 1, 4, 3, 2])\n    assert nil == HumanEval.candidate([])\n    assert nil == HumanEval.candidate([1, 1])\n    assert 1 == HumanEval.candidate([1, 1, 1, 1, 0])\n    assert nil == HumanEval.candidate([1, 1])\n    assert -35 == HumanEval.candidate([-35, 34, 12, -45])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_91_is_bored", "prompt": "# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> HumanEval.is_bored(\"Hello world\")\n# 0\n# >>> HumanEval.is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\n\ndefmodule HumanEval do\n  def candidate(S), do: is_bored(S)\n  def is_bored(S) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_bored' do\n    assert 0 == HumanEval.candidate(\"Hello world\")\n    assert 0 == HumanEval.candidate(\"Is the sky blue?\")\n    assert 1 == HumanEval.candidate(\"I love It !\")\n    assert 0 == HumanEval.candidate(\"bIt\")\n    assert 2 == HumanEval.candidate(\"I feel good today. I will be productive. will kill It\")\n    assert 0 == HumanEval.candidate(\"You and I are going for a walk\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_92_any_int", "prompt": "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> HumanEval.any_int(5, 2, 7)\n# true\n# >>> HumanEval.any_int(3, 2, 2)\n# false\n# >>> HumanEval.any_int(3, -2, 1)\n# true\n# >>> HumanEval.any_int(3.6, -2.2, 2)\n# false\n\ndefmodule HumanEval do\n  def candidate(x, y, z), do: any_int(x, y, z)\n  def any_int(x, y, z) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'any_int' do\n    assert true == HumanEval.candidate(2, 3, 1)\n    assert false == HumanEval.candidate(2.5, 2, 3)\n    assert false == HumanEval.candidate(1.5, 5, 3.5)\n    assert false == HumanEval.candidate(2, 6, 2)\n    assert true == HumanEval.candidate(4, 2, 2)\n    assert false == HumanEval.candidate(2.2, 2.2, 2.2)\n    assert true == HumanEval.candidate(-4, 6, 2)\n    assert true == HumanEval.candidate(2, 1, 1)\n    assert true == HumanEval.candidate(3, 4, 7)\n    assert false == HumanEval.candidate(3.0, 4, 7)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_93_encode", "prompt": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> HumanEval.encode(\"test\")\n# \"TGST\"\n# >>> HumanEval.encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n\ndefmodule HumanEval do\n  def candidate(message), do: encode(message)\n  def encode(message) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'encode' do\n    assert \"tgst\" == HumanEval.candidate(\"TEST\")\n    assert \"mWDCSKR\" == HumanEval.candidate(\"Mudasir\")\n    assert \"ygs\" == HumanEval.candidate(\"YES\")\n    assert \"tHKS KS C MGSSCGG\" == HumanEval.candidate(\"This is a message\")\n    assert \"k dQnT kNqW wHcT Tq wRkTg\" == HumanEval.candidate(\"I DoNt KnOw WhAt tO WrItE\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> HumanEval.skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> HumanEval.skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> HumanEval.skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> HumanEval.skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> HumanEval.skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> HumanEval.skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\n\ndefmodule HumanEval do\n  def candidate(lst), do: skjkasdkd(lst)\n  def skjkasdkd(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'skjkasdkd' do\n    assert 10 == HumanEval.candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n    assert 25 == HumanEval.candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n    assert 13 == HumanEval.candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n    assert 11 == HumanEval.candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n    assert 3 == HumanEval.candidate([0, 81, 12, 3, 1, 21])\n    assert 7 == HumanEval.candidate([0, 8, 1, 2, 1, 7])\n    assert 19 == HumanEval.candidate([8191])\n    assert 19 == HumanEval.candidate([8191, 123456, 127, 7])\n    assert 10 == HumanEval.candidate([127, 97, 8192])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "# Given a map, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given map is empty.\n# Examples:\n# >>> HumanEval.check_dict_case(%{\"a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> HumanEval.check_dict_case(%{\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> HumanEval.check_dict_case(%{\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> HumanEval.check_dict_case(%{\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>> HumanEval.check_dict_case(%{\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\ndefmodule HumanEval do\n  def candidate(dict), do: check_dict_case(dict)\n  def check_dict_case(dict) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_dict_case' do\n    assert true == HumanEval.candidate(%{\"p\" => \"pineapple\", \"b\" => \"banana\"})\n    assert false == HumanEval.candidate(%{\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n    assert false == HumanEval.candidate(%{\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"})\n    assert false == HumanEval.candidate(%{\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n    assert true == HumanEval.candidate(%{\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n    assert true == HumanEval.candidate(%{\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"})\n    assert false == HumanEval.candidate(%{})\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "# Implement a function that takes an non-negative integer and returns a list of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> HumanEval.count_up_to(5)\n# [2, 3]\n# >>> HumanEval.count_up_to(11)\n# [2, 3, 5, 7]\n# >>> HumanEval.count_up_to(0)\n# []\n# >>> HumanEval.count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> HumanEval.count_up_to(1)\n# []\n# >>> HumanEval.count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\n\ndefmodule HumanEval do\n  def candidate(n), do: count_up_to(n)\n  def count_up_to(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_up_to' do\n    assert [2, 3] == HumanEval.candidate(5)\n    assert [2, 3, 5] == HumanEval.candidate(6)\n    assert [2, 3, 5] == HumanEval.candidate(7)\n    assert [2, 3, 5, 7] == HumanEval.candidate(10)\n    assert [] == HumanEval.candidate(0)\n    assert [2, 3, 5, 7, 11, 13, 17, 19] == HumanEval.candidate(22)\n    assert [] == HumanEval.candidate(1)\n    assert [2, 3, 5, 7, 11, 13, 17] == HumanEval.candidate(18)\n    assert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43] == HumanEval.candidate(47)\n    assert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == HumanEval.candidate(101)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_97_multiply", "prompt": "# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> HumanEval.multiply(148, 412)\n# 16\n# >>> HumanEval.multiply(19, 28)\n# 72\n# >>> HumanEval.multiply(2020, 1851)\n# 0\n# >>> HumanEval.multiply(14, -15)\n# 20\n\ndefmodule HumanEval do\n  def candidate(a, b), do: multiply(a, b)\n  def multiply(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiply' do\n    assert 16 == HumanEval.candidate(148, 412)\n    assert 72 == HumanEval.candidate(19, 28)\n    assert 0 == HumanEval.candidate(2020, 1851)\n    assert 20 == HumanEval.candidate(14, -15)\n    assert 42 == HumanEval.candidate(76, 67)\n    assert 49 == HumanEval.candidate(17, 27)\n    assert 0 == HumanEval.candidate(0, 1)\n    assert 0 == HumanEval.candidate(0, 0)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_98_count_upper", "prompt": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> HumanEval.count_upper(\"aBCdEf\")\n# 1\n# >>> HumanEval.count_upper(\"abcdefg\")\n# 0\n# >>> HumanEval.count_upper(\"dBBE\")\n# 0\n\ndefmodule HumanEval do\n  def candidate(s), do: count_upper(s)\n  def count_upper(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_upper' do\n    assert 1 == HumanEval.candidate(\"aBCdEf\")\n    assert 0 == HumanEval.candidate(\"abcdefg\")\n    assert 0 == HumanEval.candidate(\"dBBE\")\n    assert 0 == HumanEval.candidate(\"B\")\n    assert 1 == HumanEval.candidate(\"U\")\n    assert 0 == HumanEval.candidate(\"\")\n    assert 2 == HumanEval.candidate(\"EEEE\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> HumanEval.closest_integer(\"10\")\n# 10\n# >>> HumanEval.closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\ndefmodule HumanEval do\n  def candidate(value), do: closest_integer(value)\n  def closest_integer(value) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'closest_integer' do\n    assert 10 == HumanEval.candidate(\"10\")\n    assert 15 == HumanEval.candidate(\"14.5\")\n    assert -16 == HumanEval.candidate(\"-15.5\")\n    assert 15 == HumanEval.candidate(\"15.3\")\n    assert 0 == HumanEval.candidate(\"0\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> HumanEval.make_a_pile(3)\n# [3, 5, 7]\n\ndefmodule HumanEval do\n  def candidate(n), do: make_a_pile(n)\n  def make_a_pile(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'make_a_pile' do\n    assert [3, 5, 7] == HumanEval.candidate(3)\n    assert [4, 6, 8, 10] == HumanEval.candidate(4)\n    assert [5, 7, 9, 11, 13] == HumanEval.candidate(5)\n    assert [6, 8, 10, 12, 14, 16] == HumanEval.candidate(6)\n    assert [8, 10, 12, 14, 16, 18, 20, 22] == HumanEval.candidate(8)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_101_words_string", "prompt": "# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return a list of the words.\n# For example:\n# >>> HumanEval.words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> HumanEval.words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\ndefmodule HumanEval do\n  def candidate(s), do: words_string(s)\n  def words_string(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'words_string' do\n    assert [\"Hi\", \"my\", \"name\", \"is\", \"John\"] == HumanEval.candidate(\"Hi, my name is John\")\n    assert [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] == HumanEval.candidate(\"One, two, three, four, five, six\")\n    assert [\"Hi\", \"my\", \"name\"] == HumanEval.candidate(\"Hi, my name\")\n    assert [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] == HumanEval.candidate(\"One,, two, three, four, five, six,\")\n    assert [] == HumanEval.candidate(\"\")\n    assert [\"ahmed\", \"gamal\"] == HumanEval.candidate(\"ahmed     , gamal\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_102_choose_num", "prompt": "# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> HumanEval.choose_num(12, 15)\n# 14\n# >>> HumanEval.choose_num(13, 12)\n# -1\n\ndefmodule HumanEval do\n  def candidate(x, y), do: choose_num(x, y)\n  def choose_num(x, y) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'choose_num' do\n    assert 14 == HumanEval.candidate(12, 15)\n    assert -1 == HumanEval.candidate(13, 12)\n    assert 12354 == HumanEval.candidate(33, 12354)\n    assert -1 == HumanEval.candidate(5234, 5233)\n    assert 28 == HumanEval.candidate(6, 29)\n    assert -1 == HumanEval.candidate(27, 10)\n    assert -1 == HumanEval.candidate(7, 7)\n    assert 546 == HumanEval.candidate(546, 546)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> HumanEval.rounded_avg(1, 5)\n# \"0b11\"\n# >>> HumanEval.rounded_avg(7, 5)\n# -1\n# >>> HumanEval.rounded_avg(10, 20)\n# \"0b1111\"\n# >>> HumanEval.rounded_avg(20, 33)\n# \"0b11010\"\n\ndefmodule HumanEval do\n  def candidate(n, m), do: rounded_avg(n, m)\n  def rounded_avg(n, m) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rounded_avg' do\n    assert \"0b11\" == HumanEval.candidate(1, 5)\n    assert \"0b1010\" == HumanEval.candidate(7, 13)\n    assert \"0b1111001010\" == HumanEval.candidate(964, 977)\n    assert \"0b1111100100\" == HumanEval.candidate(996, 997)\n    assert \"0b1011000010\" == HumanEval.candidate(560, 851)\n    assert \"0b101101110\" == HumanEval.candidate(185, 546)\n    assert \"0b110101101\" == HumanEval.candidate(362, 496)\n    assert \"0b1001110010\" == HumanEval.candidate(350, 902)\n    assert \"0b11010111\" == HumanEval.candidate(197, 233)\n    assert -1 == HumanEval.candidate(7, 5)\n    assert -1 == HumanEval.candidate(5, 1)\n    assert \"0b101\" == HumanEval.candidate(5, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> HumanEval.unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> HumanEval.unique_digits([152, 323, 1422, 10])\n# []\n\ndefmodule HumanEval do\n  def candidate(x), do: unique_digits(x)\n  def unique_digits(x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'unique_digits' do\n    assert [1, 15, 33] == HumanEval.candidate([15, 33, 1422, 1])\n    assert [] == HumanEval.candidate([152, 323, 1422, 10])\n    assert [111, 151] == HumanEval.candidate([12345, 2033, 111, 151])\n    assert [31, 135] == HumanEval.candidate([135, 103, 31])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_105_by_length", "prompt": "# Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting list, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> HumanEval.by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the list is empty, return an empty list:\n# >>> HumanEval.by_length([])\n# []\n# If the list has any strange number ignore it:\n# >>> HumanEval.by_length([1, -1, 55])\n# [\"One\"]\n\ndefmodule HumanEval do\n  def candidate(arr), do: by_length(arr)\n  def by_length(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'by_length' do\n    assert [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] == HumanEval.candidate([2, 1, 1, 4, 5, 8, 2, 3])\n    assert [] == HumanEval.candidate([])\n    assert [\"One\"] == HumanEval.candidate([1, -1, 55])\n    assert [\"Three\", \"Two\", \"One\"] == HumanEval.candidate([1, -1, 3, 2])\n    assert [\"Nine\", \"Eight\", \"Four\"] == HumanEval.candidate([9, 4, 8])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_106_f", "prompt": "# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> HumanEval.f(5)\n# [1, 2, 6, 24, 15]\n\ndefmodule HumanEval do\n  def candidate(n), do: f(n)\n  def f(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'f' do\n    assert [1, 2, 6, 24, 15] == HumanEval.candidate(5)\n    assert [1, 2, 6, 24, 15, 720, 28] == HumanEval.candidate(7)\n    assert [1] == HumanEval.candidate(1)\n    assert [1, 2, 6] == HumanEval.candidate(3)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "# Given a positive integer n, return a tuple that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> HumanEval.even_odd_palindrome(3)\n# {1, 2}\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> HumanEval.even_odd_palindrome(12)\n# {4, 6}\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned tuple has the number of even and odd integer palindromes respectively.\n\ndefmodule HumanEval do\n  def candidate(n), do: even_odd_palindrome(n)\n  def even_odd_palindrome(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_odd_palindrome' do\n    assert {8, 13} == HumanEval.candidate(123)\n    assert {4, 6} == HumanEval.candidate(12)\n    assert {1, 2} == HumanEval.candidate(3)\n    assert {6, 8} == HumanEval.candidate(63)\n    assert {5, 6} == HumanEval.candidate(25)\n    assert {4, 6} == HumanEval.candidate(19)\n    assert {4, 5} == HumanEval.candidate(9)\n    assert {0, 1} == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_108_count_nums", "prompt": "# Write a function count_nums which takes a list of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> HumanEval.count_nums([])\n# 0\n# >>> HumanEval.count_nums([-1, 11, -11])\n# 1\n# >>> HumanEval.count_nums([1, 1, 2])\n# 3\n\ndefmodule HumanEval do\n  def candidate(arr), do: count_nums(arr)\n  def count_nums(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_nums' do\n    assert 0 == HumanEval.candidate([])\n    assert 0 == HumanEval.candidate([-1, -2, 0])\n    assert 6 == HumanEval.candidate([1, 1, 2, -2, 3, 4, 5])\n    assert 5 == HumanEval.candidate([1, 6, 9, -6, 0, 1, 5])\n    assert 4 == HumanEval.candidate([1, 100, 98, -7, 1, -1])\n    assert 5 == HumanEval.candidate([12, 23, 34, -45, -56, 0])\n    assert 1 == HumanEval.candidate([0, 1])\n    assert 1 == HumanEval.candidate([1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "# We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the list will be randomly ordered. Your task is to determine if\n# it is possible to get a list sorted in non-decreasing order by performing \n# the following operation on the given list:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the list by one\n# position in the right direction. The last element of the list will be moved to\n# the starting position in the list i.e. 0th index. \n# If it is possible to obtain the sorted list by performing the above operation\n# then return true else return false.\n# If the given list is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> HumanEval.move_one_ball([3, 4, 5, 1, 2])\n# true\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given list.\n# >>> HumanEval.move_one_ball([3, 5, 4, 1, 2])\n# false\n# Explanation:It is not possible to get non-decreasing order for the given\n# list by performing any number of right shift operations.\n\ndefmodule HumanEval do\n  def candidate(arr), do: move_one_ball(arr)\n  def move_one_ball(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'move_one_ball' do\n    assert true == HumanEval.candidate([3, 4, 5, 1, 2])\n    assert true == HumanEval.candidate([3, 5, 10, 1, 2])\n    assert false == HumanEval.candidate([4, 3, 1, 2])\n    assert false == HumanEval.candidate([3, 5, 4, 1, 2])\n    assert true == HumanEval.candidate([])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_110_exchange", "prompt": "# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> HumanEval.exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> HumanEval.exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n\ndefmodule HumanEval do\n  def candidate(lst1, lst2), do: exchange(lst1, lst2)\n  def exchange(lst1, lst2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'exchange' do\n    assert \"YES\" == HumanEval.candidate([1, 2, 3, 4], [1, 2, 3, 4])\n    assert \"NO\" == HumanEval.candidate([1, 2, 3, 4], [1, 5, 3, 4])\n    assert \"YES\" == HumanEval.candidate([1, 2, 3, 4], [2, 1, 4, 3])\n    assert \"YES\" == HumanEval.candidate([5, 7, 3], [2, 6, 4])\n    assert \"NO\" == HumanEval.candidate([5, 7, 3], [2, 6, 3])\n    assert \"NO\" == HumanEval.candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\n    assert \"YES\" == HumanEval.candidate([100, 200], [200, 200])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_111_histogram", "prompt": "# Given a string representing a space separated lowercase letters, return a map\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> HumanEval.histogram(\"a b c\")\n# %{\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> HumanEval.histogram(\"a b b a\")\n# %{\"a\" => 2, \"b\" => 2}\n# >>> HumanEval.histogram(\"a b c a b\")\n# %{\"a\" => 2, \"b\" => 2}\n# >>> HumanEval.histogram(\"b b b b a\")\n# %{\"b\" => 4}\n# >>> HumanEval.histogram(\"\")\n# %{}\n\ndefmodule HumanEval do\n  def candidate(test), do: histogram(test)\n  def histogram(test) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'histogram' do\n    assert %{\"a\" => 2, \"b\" => 2} == HumanEval.candidate(\"a b b a\")\n    assert %{\"a\" => 2, \"b\" => 2} == HumanEval.candidate(\"a b c a b\")\n    assert %{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1} == HumanEval.candidate(\"a b c d g\")\n    assert %{\"r\" => 1, \"t\" => 1, \"g\" => 1} == HumanEval.candidate(\"r t g\")\n    assert %{\"b\" => 4} == HumanEval.candidate(\"b b b b a\")\n    assert %{\"r\" => 1, \"t\" => 1, \"g\" => 1} == HumanEval.candidate(\"r t g\")\n    assert %{} == HumanEval.candidate(\"\")\n    assert %{\"a\" => 1} == HumanEval.candidate(\"a\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a tuple containing the result string and true/false for the check.\n# Example\n# >>> HumanEval.reverse_delete(\"abcde\", \"ae\")\n# {\"bcd\", false}\n# >>> HumanEval.reverse_delete(\"abcdef\", \"b\")\n# {\"acdef\", false}\n# >>> HumanEval.reverse_delete(\"abcdedcba\", \"ab\")\n# {\"cdedc\", true}\n\ndefmodule HumanEval do\n  def candidate(s, c), do: reverse_delete(s, c)\n  def reverse_delete(s, c) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_delete' do\n    assert {\"bcd\", false} == HumanEval.candidate(\"abcde\", \"ae\")\n    assert {\"acdef\", false} == HumanEval.candidate(\"abcdef\", \"b\")\n    assert {\"cdedc\", true} == HumanEval.candidate(\"abcdedcba\", \"ab\")\n    assert {\"dik\", false} == HumanEval.candidate(\"dwik\", \"w\")\n    assert {\"\", true} == HumanEval.candidate(\"a\", \"a\")\n    assert {\"abcdedcba\", true} == HumanEval.candidate(\"abcdedcba\", \"\")\n    assert {\"abcdedcba\", true} == HumanEval.candidate(\"abcdedcba\", \"v\")\n    assert {\"abba\", true} == HumanEval.candidate(\"vabba\", \"v\")\n    assert {\"\", true} == HumanEval.candidate(\"mamma\", \"mia\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_113_odd_count", "prompt": "# Given a list of strings, where each string consists of only digits, return a list.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> HumanEval.odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> HumanEval.odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\ndefmodule HumanEval do\n  def candidate(lst), do: odd_count(lst)\n  def odd_count(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_count' do\n    assert [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"] == HumanEval.candidate([\"1234567\"])\n    assert [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] == HumanEval.candidate([\"3\", \"11111111\"])\n    assert [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"] == HumanEval.candidate([\"271\", \"137\", \"314\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "# Given a list of integers nums, find the minimum sum of any non-empty sub-list\n# of nums.\n# Example\n# >>> HumanEval.minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> HumanEval.minSubArraySum([-1, -2, -3])\n# -6\n\ndefmodule HumanEval do\n  def candidate(nums), do: minSubArraySum(nums)\n  def minSubArraySum(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'minSubArraySum' do\n    assert 1 == HumanEval.candidate([2, 3, 4, 1, 2, 4])\n    assert -6 == HumanEval.candidate([-1, -2, -3])\n    assert -14 == HumanEval.candidate([-1, -2, -3, 2, -10])\n    assert -9999999999999999 == HumanEval.candidate([-9999999999999999])\n    assert 0 == HumanEval.candidate([0, 10, 20, 1000000])\n    assert -6 == HumanEval.candidate([-1, -2, -3, 10, -5])\n    assert -6 == HumanEval.candidate([100, -1, -2, -3, 10, -5])\n    assert 3 == HumanEval.candidate([10, 11, 13, 8, 3, 4])\n    assert -33 == HumanEval.candidate([100, -33, 32, -1, 0, -2])\n    assert -10 == HumanEval.candidate([-10])\n    assert 7 == HumanEval.candidate([7])\n    assert -1 == HumanEval.candidate([1, -1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_115_max_fill", "prompt": "# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> HumanEval.max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> HumanEval.max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> HumanEval.max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n\ndefmodule HumanEval do\n  def candidate(grid, capacity), do: max_fill(grid, capacity)\n  def max_fill(grid, capacity) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_fill' do\n    assert 6 == HumanEval.candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n    assert 5 == HumanEval.candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    assert 0 == HumanEval.candidate([[0, 0, 0], [0, 0, 0]], 5)\n    assert 4 == HumanEval.candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2)\n    assert 2 == HumanEval.candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_116_sort_array", "prompt": "# In this Kata, you have to sort a list of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> HumanEval.sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> HumanEval.sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> HumanEval.sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\n\ndefmodule HumanEval do\n  def candidate(arr), do: sort_array(arr)\n  def sort_array(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_array' do\n    assert [1, 2, 4, 3, 5] == HumanEval.candidate([1, 5, 2, 3, 4])\n    assert [-4, -2, -6, -5, -3] == HumanEval.candidate([-2, -3, -4, -5, -6])\n    assert [0, 1, 2, 4, 3] == HumanEval.candidate([1, 0, 2, 3, 4])\n    assert [] == HumanEval.candidate([])\n    assert [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77] == HumanEval.candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\n    assert [32, 3, 5, 6, 12, 44] == HumanEval.candidate([3, 6, 44, 12, 32, 5])\n    assert [2, 4, 8, 16, 32] == HumanEval.candidate([2, 4, 8, 16, 32])\n    assert [2, 4, 8, 16, 32] == HumanEval.candidate([2, 4, 8, 16, 32])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_117_select_words", "prompt": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> HumanEval.select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> HumanEval.select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> HumanEval.select_words(\"simple white space\", 2)\n# []\n# >>> HumanEval.select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> HumanEval.select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\n\ndefmodule HumanEval do\n  def candidate(s, n), do: select_words(s, n)\n  def select_words(s, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'select_words' do\n    assert [\"little\"] == HumanEval.candidate(\"Mary had a little lamb\", 4)\n    assert [\"Mary\", \"lamb\"] == HumanEval.candidate(\"Mary had a little lamb\", 3)\n    assert [] == HumanEval.candidate(\"simple white space\", 2)\n    assert [\"world\"] == HumanEval.candidate(\"Hello world\", 4)\n    assert [\"Uncle\"] == HumanEval.candidate(\"Uncle sam\", 3)\n    assert [] == HumanEval.candidate(\"\", 4)\n    assert [\"b\", \"c\", \"d\", \"f\"] == HumanEval.candidate(\"a b c d e f\", 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> HumanEval.get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> HumanEval.get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> HumanEval.get_closest_vowel(\"quick\")\n# \"\"\n# >>> HumanEval.get_closest_vowel(\"ab\")\n# \"\"\n\ndefmodule HumanEval do\n  def candidate(word), do: get_closest_vowel(word)\n  def get_closest_vowel(word) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_closest_vowel' do\n    assert \"u\" == HumanEval.candidate(\"yogurt\")\n    assert \"u\" == HumanEval.candidate(\"full\")\n    assert \"\" == HumanEval.candidate(\"easy\")\n    assert \"\" == HumanEval.candidate(\"eAsy\")\n    assert \"\" == HumanEval.candidate(\"ali\")\n    assert \"a\" == HumanEval.candidate(\"bad\")\n    assert \"o\" == HumanEval.candidate(\"most\")\n    assert \"\" == HumanEval.candidate(\"ab\")\n    assert \"\" == HumanEval.candidate(\"ba\")\n    assert \"\" == HumanEval.candidate(\"quick\")\n    assert \"i\" == HumanEval.candidate(\"anime\")\n    assert \"\" == HumanEval.candidate(\"Asia\")\n    assert \"o\" == HumanEval.candidate(\"Above\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_119_match_parens", "prompt": "# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> HumanEval.match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> HumanEval.match_parens([\")\", \")\"])\n# \"No\"\n\ndefmodule HumanEval do\n  def candidate(lst), do: match_parens(lst)\n  def match_parens(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'match_parens' do\n    assert \"Yes\" == HumanEval.candidate([\"()(\", \")\"])\n    assert \"No\" == HumanEval.candidate([\")\", \")\"])\n    assert \"No\" == HumanEval.candidate([\"(()(())\", \"())())\"])\n    assert \"Yes\" == HumanEval.candidate([\")())\", \"(()()(\"])\n    assert \"Yes\" == HumanEval.candidate([\"(())))\", \"(()())((\"])\n    assert \"No\" == HumanEval.candidate([\"()\", \"())\"])\n    assert \"Yes\" == HumanEval.candidate([\"(()(\", \"()))()\"])\n    assert \"No\" == HumanEval.candidate([\"((((\", \"((())\"])\n    assert \"No\" == HumanEval.candidate([\")(()\", \"(()(\"])\n    assert \"No\" == HumanEval.candidate([\")(\", \")(\"])\n    assert \"Yes\" == HumanEval.candidate([\"(\", \")\"])\n    assert \"Yes\" == HumanEval.candidate([\")\", \"(\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_120_maximum", "prompt": "# Given a list arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> HumanEval.maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> HumanEval.maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> HumanEval.maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the list will be in the range of [1, 1000].\n# 2. The elements in the list will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\ndefmodule HumanEval do\n  def candidate(arr, k), do: maximum(arr, k)\n  def maximum(arr, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maximum' do\n    assert [-4, -3, 5] == HumanEval.candidate([-3, -4, 5], 3)\n    assert [4, 4] == HumanEval.candidate([4, -4, 4], 2)\n    assert [2] == HumanEval.candidate([-3, 2, 1, 2, -1, -2, 1], 1)\n    assert [2, 20, 123] == HumanEval.candidate([123, -123, 20, 0, 1, 2, -3], 3)\n    assert [0, 1, 2, 20] == HumanEval.candidate([-123, 20, 0, 1, 2, -3], 4)\n    assert [-13, -8, 0, 0, 3, 5, 15] == HumanEval.candidate([5, 15, 0, 3, -13, -8, 0], 7)\n    assert [3, 5] == HumanEval.candidate([-1, 0, 2, 5, 3, -10], 2)\n    assert [5] == HumanEval.candidate([1, 0, 5, -7], 1)\n    assert [-4, 4] == HumanEval.candidate([4, -4], 2)\n    assert [-10, 10] == HumanEval.candidate([-10, 10], 2)\n    assert [] == HumanEval.candidate([1, 2, 3, -23, 243, -400, 0], 0)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_121_solution", "prompt": "# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> HumanEval.solution([5, 8, 7, 1])\n# 12\n# >>> HumanEval.solution([3, 3, 3, 3, 3])\n# 9\n# >>> HumanEval.solution([30, 13, 24, 321])\n# 0\n\ndefmodule HumanEval do\n  def candidate(lst), do: solution(lst)\n  def solution(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'solution' do\n    assert 12 == HumanEval.candidate([5, 8, 7, 1])\n    assert 9 == HumanEval.candidate([3, 3, 3, 3, 3])\n    assert 0 == HumanEval.candidate([30, 13, 24, 321])\n    assert 5 == HumanEval.candidate([5, 9])\n    assert 0 == HumanEval.candidate([2, 4, 8])\n    assert 23 == HumanEval.candidate([30, 13, 23, 32])\n    assert 3 == HumanEval.candidate([3, 13, 2, 9])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_122_add_elements", "prompt": "# Given a non-empty list of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> HumanEval.add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n\ndefmodule HumanEval do\n  def candidate(arr, k), do: add_elements(arr, k)\n  def add_elements(arr, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_elements' do\n    assert -4 == HumanEval.candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)\n    assert 0 == HumanEval.candidate([111, 121, 3, 4000, 5, 6], 2)\n    assert 125 == HumanEval.candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\n    assert 24 == HumanEval.candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    assert 1 == HumanEval.candidate([1], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> HumanEval.get_odd_collatz(5)\n# [1, 5]\n\ndefmodule HumanEval do\n  def candidate(n), do: get_odd_collatz(n)\n  def get_odd_collatz(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_odd_collatz' do\n    assert [1, 5, 7, 11, 13, 17] == HumanEval.candidate(14)\n    assert [1, 5] == HumanEval.candidate(5)\n    assert [1, 3, 5] == HumanEval.candidate(12)\n    assert [1] == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_124_valid_date", "prompt": "# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> HumanEval.valid_date(\"03-11-2000\")\n# true\n# >>> HumanEval.valid_date(\"15-01-2012\")\n# false\n# >>> HumanEval.valid_date(\"04-0-2040\")\n# false\n# >>> HumanEval.valid_date(\"06-04-2020\")\n# true\n# >>> HumanEval.valid_date(\"06/04/2020\")\n# false\n\ndefmodule HumanEval do\n  def candidate(date), do: valid_date(date)\n  def valid_date(date) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'valid_date' do\n    assert true == HumanEval.candidate(\"03-11-2000\")\n    assert false == HumanEval.candidate(\"15-01-2012\")\n    assert false == HumanEval.candidate(\"04-0-2040\")\n    assert true == HumanEval.candidate(\"06-04-2020\")\n    assert true == HumanEval.candidate(\"01-01-2007\")\n    assert false == HumanEval.candidate(\"03-32-2011\")\n    assert false == HumanEval.candidate(\"\")\n    assert false == HumanEval.candidate(\"04-31-3000\")\n    assert true == HumanEval.candidate(\"06-06-2005\")\n    assert false == HumanEval.candidate(\"21-31-2000\")\n    assert true == HumanEval.candidate(\"04-12-2003\")\n    assert false == HumanEval.candidate(\"04122003\")\n    assert false == HumanEval.candidate(\"20030412\")\n    assert false == HumanEval.candidate(\"2003-04\")\n    assert false == HumanEval.candidate(\"2003-04-12\")\n    assert false == HumanEval.candidate(\"04-2003\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_125_split_words", "prompt": "# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> HumanEval.split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> HumanEval.split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> HumanEval.split_words(\"abcdef\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(txt), do: split_words(txt)\n  def split_words(txt) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split_words' do\n    assert [\"Hello\", \"world!\"] == HumanEval.candidate(\"Hello world!\")\n    assert [\"Hello\", \"world!\"] == HumanEval.candidate(\"Hello,world!\")\n    assert [\"Hello\", \"world,!\"] == HumanEval.candidate(\"Hello world,!\")\n    assert [\"Hello,Hello,world\", \"!\"] == HumanEval.candidate(\"Hello,Hello,world !\")\n    assert 3 == HumanEval.candidate(\"abcdef\")\n    assert 2 == HumanEval.candidate(\"aaabb\")\n    assert 1 == HumanEval.candidate(\"aaaBb\")\n    assert 0 == HumanEval.candidate(\"\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> HumanEval.is_sorted([5])\n# true\n# >>> HumanEval.is_sorted([1, 2, 3, 4, 5])\n# true\n# >>> HumanEval.is_sorted([1, 3, 2, 4, 5])\n# false\n# >>> HumanEval.is_sorted([1, 2, 3, 4, 5, 6])\n# true\n# >>> HumanEval.is_sorted([1, 2, 3, 4, 5, 6, 7])\n# true\n# >>> HumanEval.is_sorted([1, 3, 2, 4, 5, 6, 7])\n# false\n# >>> HumanEval.is_sorted([1, 2, 2, 3, 3, 4])\n# true\n# >>> HumanEval.is_sorted([1, 2, 2, 2, 3, 4])\n# false\n\ndefmodule HumanEval do\n  def candidate(lst), do: is_sorted(lst)\n  def is_sorted(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_sorted' do\n    assert true == HumanEval.candidate([5])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert false == HumanEval.candidate([1, 3, 2, 4, 5])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5, 6])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7])\n    assert false == HumanEval.candidate([1, 3, 2, 4, 5, 6, 7])\n    assert true == HumanEval.candidate([])\n    assert true == HumanEval.candidate([1])\n    assert false == HumanEval.candidate([3, 2, 1])\n    assert false == HumanEval.candidate([1, 2, 2, 2, 3, 4])\n    assert false == HumanEval.candidate([1, 2, 3, 3, 3, 4])\n    assert true == HumanEval.candidate([1, 2, 2, 3, 3, 4])\n    assert true == HumanEval.candidate([1, 2, 3, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_127_intersection", "prompt": "# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> HumanEval.intersection({1, 2}, {2, 3})\n# \"NO\"\n# >>> HumanEval.intersection({-1, 1}, {0, 4})\n# \"NO\"\n# >>> HumanEval.intersection({-3, -1}, {-5, 5})\n# \"YES\"\n\ndefmodule HumanEval do\n  def candidate(interval1, interval2), do: intersection(interval1, interval2)\n  def intersection(interval1, interval2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'intersection' do\n    assert \"NO\" == HumanEval.candidate({1, 2}, {2, 3})\n    assert \"NO\" == HumanEval.candidate({-1, 1}, {0, 4})\n    assert \"YES\" == HumanEval.candidate({-3, -1}, {-5, 5})\n    assert \"YES\" == HumanEval.candidate({-2, 2}, {-4, 0})\n    assert \"NO\" == HumanEval.candidate({-11, 2}, {-1, -1})\n    assert \"NO\" == HumanEval.candidate({1, 2}, {3, 5})\n    assert \"NO\" == HumanEval.candidate({1, 2}, {1, 2})\n    assert \"NO\" == HumanEval.candidate({-2, -2}, {-3, -2})\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "# You are given a list arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the list, represented by 1, -1 or 0.\n# Note: return nil for empty arr.\n# Example:\n# >>> HumanEval.prod_signs([1, 2, 2, -4])\n# 9\n# >>> HumanEval.prod_signs([0, 1])\n# 0\n# >>> HumanEval.prod_signs([])\n# nil\n\ndefmodule HumanEval do\n  def candidate(arr), do: prod_signs(arr)\n  def prod_signs(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'prod_signs' do\n    assert -9 == HumanEval.candidate([1, 2, 2, -4])\n    assert 0 == HumanEval.candidate([0, 1])\n    assert -10 == HumanEval.candidate([1, 1, 1, 2, 3, -1, 1])\n    assert nil == HumanEval.candidate([])\n    assert 20 == HumanEval.candidate([2, 4, 1, 2, -1, -1, 9])\n    assert 4 == HumanEval.candidate([-1, 1, -1, 1])\n    assert -4 == HumanEval.candidate([-1, 1, 1, 1])\n    assert 0 == HumanEval.candidate([-1, 1, 1, 0])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_129_minPath", "prompt": "# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> HumanEval.minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> HumanEval.minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\n\ndefmodule HumanEval do\n  def candidate(grid, k), do: minPath(grid, k)\n  def minPath(grid, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'minPath' do\n    assert [1, 2, 1] == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n    assert [1] == HumanEval.candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n    assert [1, 2, 1, 2] == HumanEval.candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)\n    assert [1, 10, 1, 10, 1, 10, 1] == HumanEval.candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\n    assert [1, 7, 1, 7, 1] == HumanEval.candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\n    assert [1, 6, 1, 6, 1, 6, 1, 6, 1] == HumanEval.candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)\n    assert [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6] == HumanEval.candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)\n    assert [1, 3, 1, 3, 1, 3, 1, 3] == HumanEval.candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)\n    assert [1, 5, 1, 5, 1, 5, 1, 5] == HumanEval.candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)\n    assert [1, 2, 1, 2, 1, 2, 1, 2, 1, 2] == HumanEval.candidate([[1, 2], [3, 4]], 10)\n    assert [1, 3, 1, 3, 1, 3, 1, 3, 1, 3] == HumanEval.candidate([[1, 3], [3, 2]], 10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_130_tri", "prompt": "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> HumanEval.tri(3)\n# [1, 3, 2, 8]\n\ndefmodule HumanEval do\n  def candidate(n), do: tri(n)\n  def tri(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tri' do\n    assert [1, 3, 2, 8] == HumanEval.candidate(3)\n    assert [1, 3, 2, 8, 3] == HumanEval.candidate(4)\n    assert [1, 3, 2, 8, 3, 15] == HumanEval.candidate(5)\n    assert [1, 3, 2, 8, 3, 15, 4] == HumanEval.candidate(6)\n    assert [1, 3, 2, 8, 3, 15, 4, 24] == HumanEval.candidate(7)\n    assert [1, 3, 2, 8, 3, 15, 4, 24, 5] == HumanEval.candidate(8)\n    assert [1, 3, 2, 8, 3, 15, 4, 24, 5, 35] == HumanEval.candidate(9)\n    assert [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11] == HumanEval.candidate(20)\n    assert [1] == HumanEval.candidate(0)\n    assert [1, 3] == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_131_digits", "prompt": "# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> HumanEval.digits(1)\n# 1\n# >>> HumanEval.digits(4)\n# 0\n# >>> HumanEval.digits(235)\n# 15\n\ndefmodule HumanEval do\n  def candidate(n), do: digits(n)\n  def digits(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'digits' do\n    assert 5 == HumanEval.candidate(5)\n    assert 5 == HumanEval.candidate(54)\n    assert 1 == HumanEval.candidate(120)\n    assert 5 == HumanEval.candidate(5014)\n    assert 315 == HumanEval.candidate(98765)\n    assert 2625 == HumanEval.candidate(5576543)\n    assert 0 == HumanEval.candidate(2468)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_132_is_nested", "prompt": "# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> HumanEval.is_nested(\"[[]]\")\n# true\n# >>> HumanEval.is_nested(\"[]]]]]]][[[[[]\")\n# false\n# >>> HumanEval.is_nested(\"[][]\")\n# false\n# >>> HumanEval.is_nested(\"[]\")\n# false\n# >>> HumanEval.is_nested(\"[[][]]\")\n# true\n# >>> HumanEval.is_nested(\"[[]][[\")\n# true\n\ndefmodule HumanEval do\n  def candidate(string), do: is_nested(string)\n  def is_nested(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_nested' do\n    assert true == HumanEval.candidate(\"[[]]\")\n    assert false == HumanEval.candidate(\"[]]]]]]][[[[[]\")\n    assert false == HumanEval.candidate(\"[][]\")\n    assert false == HumanEval.candidate(\"[]\")\n    assert true == HumanEval.candidate(\"[[[[]]]]\")\n    assert false == HumanEval.candidate(\"[]]]]]]]]]]\")\n    assert true == HumanEval.candidate(\"[][][[]]\")\n    assert false == HumanEval.candidate(\"[[]\")\n    assert false == HumanEval.candidate(\"[]]\")\n    assert true == HumanEval.candidate(\"[[]][[\")\n    assert true == HumanEval.candidate(\"[[][]]\")\n    assert false == HumanEval.candidate(\"\")\n    assert false == HumanEval.candidate(\"[[[[[[[[\")\n    assert false == HumanEval.candidate(\"]]]]]]]]\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> HumanEval.lst([1.0, 2.0, 3.0])\n# 14\n# >>> HumanEval.lst([1.0, 4.0, 9.0])\n# 98\n# >>> HumanEval.lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> HumanEval.lst([1.4, 4.2, 0.0])\n# 29\n# >>> HumanEval.lst([-2.4, 1.0, 1.0])\n# 6\n\ndefmodule HumanEval do\n  def candidate(lst), do: sum_squares(lst)\n  def sum_squares(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_squares' do\n    assert 14 == HumanEval.candidate([1.0, 2.0, 3.0])\n    assert 14 == HumanEval.candidate([1.0, 2.0, 3.0])\n    assert 84 == HumanEval.candidate([1.0, 3.0, 5.0, 7.0])\n    assert 29 == HumanEval.candidate([1.4, 4.2, 0.0])\n    assert 6 == HumanEval.candidate([-2.4, 1.0, 1.0])\n    assert 10230 == HumanEval.candidate([100.0, 1.0, 15.0, 2.0])\n    assert 200000000 == HumanEval.candidate([10000.0, 10000.0])\n    assert 75 == HumanEval.candidate([-1.4, 4.6, 6.3])\n    assert 1086 == HumanEval.candidate([-1.4, 17.9, 18.9, 19.9])\n    assert 0 == HumanEval.candidate([0.0])\n    assert 1 == HumanEval.candidate([-1.0])\n    assert 2 == HumanEval.candidate([-1.0, 1.0, 0.0])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> HumanEval.check_if_last_char_is_a_letter(\"apple pie\")\n# false\n# >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e\")\n# true\n# >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n# false\n# >>> HumanEval.check_if_last_char_is_a_letter(\"\")\n# false\n\ndefmodule HumanEval do\n  def candidate(txt), do: check_if_last_char_is_a_letter(txt)\n  def check_if_last_char_is_a_letter(txt) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_if_last_char_is_a_letter' do\n    assert false == HumanEval.candidate(\"apple\")\n    assert true == HumanEval.candidate(\"apple pi e\")\n    assert false == HumanEval.candidate(\"eeeee\")\n    assert true == HumanEval.candidate(\"A\")\n    assert false == HumanEval.candidate(\"Pumpkin pie \")\n    assert false == HumanEval.candidate(\"Pumpkin pie 1\")\n    assert false == HumanEval.candidate(\"\")\n    assert false == HumanEval.candidate(\"eeeee e \")\n    assert false == HumanEval.candidate(\"apple pie\")\n    assert false == HumanEval.candidate(\"apple pi e \")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given list will not contain\n# duplicate values.\n# Examples:\n# >>> HumanEval.can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> HumanEval.can_arrange([1, 2, 3])\n# -1\n\ndefmodule HumanEval do\n  def candidate(arr), do: can_arrange(arr)\n  def can_arrange(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'can_arrange' do\n    assert 3 == HumanEval.candidate([1, 2, 4, 3, 5])\n    assert -1 == HumanEval.candidate([1, 2, 4, 5])\n    assert 2 == HumanEval.candidate([1, 4, 2, 5, 6, 7, 8, 9, 10])\n    assert 4 == HumanEval.candidate([4, 8, 5, 7, 3])\n    assert -1 == HumanEval.candidate([])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as nil.\n# Examples:\n# >>> HumanEval.largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# {nil, 1}\n# >>> HumanEval.largest_smallest_integers([])\n# {nil, nil}\n# >>> HumanEval.largest_smallest_integers([0])\n# {nil, nil}\n\ndefmodule HumanEval do\n  def candidate(lst), do: largest_smallest_integers(lst)\n  def largest_smallest_integers(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'largest_smallest_integers' do\n    assert {nil, 1} == HumanEval.candidate([2, 4, 1, 3, 5, 7])\n    assert {nil, 1} == HumanEval.candidate([2, 4, 1, 3, 5, 7, 0])\n    assert {-2, 1} == HumanEval.candidate([1, 3, 2, 4, 5, 6, -2])\n    assert {-7, 2} == HumanEval.candidate([4, 5, 3, 6, 2, 7, -7])\n    assert {-9, 2} == HumanEval.candidate([7, 3, 8, 4, 9, 2, 5, -9])\n    assert {nil, nil} == HumanEval.candidate([])\n    assert {nil, nil} == HumanEval.candidate([0])\n    assert {-1, nil} == HumanEval.candidate([-1, -3, -5, -6])\n    assert {-1, nil} == HumanEval.candidate([-1, -3, -5, -6, 0])\n    assert {-3, 1} == HumanEval.candidate([-6, -4, -4, -3, 1])\n    assert {-3, 1} == HumanEval.candidate([-6, -4, -4, -3, -100, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_137_compare_one", "prompt": "# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return nil if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> HumanEval.compare_one(1, 2.5)\n# 2.5\n# >>> HumanEval.compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> HumanEval.compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> HumanEval.compare_one(\"1\", 1)\n# nil\n\ndefmodule HumanEval do\n  def candidate(a, b), do: compare_one(a, b)\n  def compare_one(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'compare_one' do\n    assert 2 == HumanEval.candidate(1, 2)\n    assert 2.5 == HumanEval.candidate(1, 2.5)\n    assert 3 == HumanEval.candidate(2, 3)\n    assert 6 == HumanEval.candidate(5, 6)\n    assert \"2,3\" == HumanEval.candidate(1, \"2,3\")\n    assert \"6\" == HumanEval.candidate(\"5,1\", \"6\")\n    assert \"2\" == HumanEval.candidate(\"1\", \"2\")\n    assert nil == HumanEval.candidate(\"1\", 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> HumanEval.is_equal_to_sum_even(4)\n# false\n# >>> HumanEval.is_equal_to_sum_even(6)\n# false\n# >>> HumanEval.is_equal_to_sum_even(8)\n# true\n\ndefmodule HumanEval do\n  def candidate(n), do: is_equal_to_sum_even(n)\n  def is_equal_to_sum_even(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_equal_to_sum_even' do\n    assert false == HumanEval.candidate(4)\n    assert false == HumanEval.candidate(6)\n    assert true == HumanEval.candidate(8)\n    assert true == HumanEval.candidate(10)\n    assert false == HumanEval.candidate(11)\n    assert true == HumanEval.candidate(12)\n    assert false == HumanEval.candidate(13)\n    assert true == HumanEval.candidate(16)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> HumanEval.special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: special_factorial(n)\n  def special_factorial(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'special_factorial' do\n    assert 288 == HumanEval.candidate(4)\n    assert 34560 == HumanEval.candidate(5)\n    assert 125411328000 == HumanEval.candidate(7)\n    assert 1 == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> HumanEval.fix_spaces(\" Example\")\n# \"Example\"\n# >>> HumanEval.fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> HumanEval.fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> HumanEval.fix_spaces(\" Example 3\")\n# \"_Example-3\"\n\ndefmodule HumanEval do\n  def candidate(text), do: fix_spaces(text)\n  def fix_spaces(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'fix_spaces' do\n    assert \"Example\" == HumanEval.candidate(\"Example\")\n    assert \"Mudasir_Hanif_\" == HumanEval.candidate(\"Mudasir Hanif \")\n    assert \"Yellow_Yellow__Dirty__Fellow\" == HumanEval.candidate(\"Yellow Yellow  Dirty  Fellow\")\n    assert \"Exa-mple\" == HumanEval.candidate(\"Exa   mple\")\n    assert \"-Exa_1_2_2_mple\" == HumanEval.candidate(\"   Exa 1 2 2 mple\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> HumanEval.file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> HumanEval.file_name_check(\"1example.dll\")\n# \"No\"\n\ndefmodule HumanEval do\n  def candidate(file_name), do: file_name_check(file_name)\n  def file_name_check(file_name) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'file_name_check' do\n    assert \"Yes\" == HumanEval.candidate(\"example.txt\")\n    assert \"No\" == HumanEval.candidate(\"1example.dll\")\n    assert \"No\" == HumanEval.candidate(\"s1sdf3.asd\")\n    assert \"Yes\" == HumanEval.candidate(\"K.dll\")\n    assert \"Yes\" == HumanEval.candidate(\"MY16FILE3.exe\")\n    assert \"No\" == HumanEval.candidate(\"His12FILE94.exe\")\n    assert \"No\" == HumanEval.candidate(\"_Y.txt\")\n    assert \"No\" == HumanEval.candidate(\"?aREYA.exe\")\n    assert \"No\" == HumanEval.candidate(\"/this_is_valid.dll\")\n    assert \"No\" == HumanEval.candidate(\"this_is_valid.wow\")\n    assert \"Yes\" == HumanEval.candidate(\"this_is_valid.txt\")\n    assert \"No\" == HumanEval.candidate(\"this_is_valid.txtexe\")\n    assert \"No\" == HumanEval.candidate(\"#this2_i4s_5valid.ten\")\n    assert \"No\" == HumanEval.candidate(\"@this1_is6_valid.exe\")\n    assert \"No\" == HumanEval.candidate(\"this_is_12valid.6exe4.txt\")\n    assert \"No\" == HumanEval.candidate(\"all.exe.txt\")\n    assert \"Yes\" == HumanEval.candidate(\"I563_No.exe\")\n    assert \"Yes\" == HumanEval.candidate(\"Is3youfault.txt\")\n    assert \"Yes\" == HumanEval.candidate(\"no_one#knows.dll\")\n    assert \"No\" == HumanEval.candidate(\"1I563_Yes3.exe\")\n    assert \"No\" == HumanEval.candidate(\"I563_Yes3.txtt\")\n    assert \"No\" == HumanEval.candidate(\"final..txt\")\n    assert \"No\" == HumanEval.candidate(\"final132\")\n    assert \"No\" == HumanEval.candidate(\"_f4indsartal132.\")\n    assert \"No\" == HumanEval.candidate(\".txt\")\n    assert \"No\" == HumanEval.candidate(\"s.\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\n\ndefmodule HumanEval do\n  def candidate(lst), do: sum_squares(lst)\n  def sum_squares(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_squares' do\n    assert 6 == HumanEval.candidate([1, 2, 3])\n    assert 14 == HumanEval.candidate([1, 4, 9])\n    assert 0 == HumanEval.candidate([])\n    assert 9 == HumanEval.candidate([1, 1, 1, 1, 1, 1, 1, 1, 1])\n    assert -3 == HumanEval.candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1])\n    assert 0 == HumanEval.candidate([0])\n    assert -126 == HumanEval.candidate([-1, -5, 2, -1, -5])\n    assert 3030 == HumanEval.candidate([-56, -99, 1, 0, -2])\n    assert 0 == HumanEval.candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1])\n    assert -14196 == HumanEval.candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\n    assert -1448 == HumanEval.candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> HumanEval.words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> HumanEval.words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n\ndefmodule HumanEval do\n  def candidate(sentence), do: words_in_sentence(sentence)\n  def words_in_sentence(sentence) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'words_in_sentence' do\n    assert \"is\" == HumanEval.candidate(\"This is a test\")\n    assert \"go for\" == HumanEval.candidate(\"lets go for swimming\")\n    assert \"there is no place\" == HumanEval.candidate(\"there is no place available here\")\n    assert \"Hi am Hussein\" == HumanEval.candidate(\"Hi I am Hussein\")\n    assert \"go for it\" == HumanEval.candidate(\"go for it\")\n    assert \"\" == HumanEval.candidate(\"here\")\n    assert \"is\" == HumanEval.candidate(\"here is\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_144_simplify", "prompt": "# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> HumanEval.simplify(\"1/5\", \"5/1\")\n# true\n# >>> HumanEval.simplify(\"1/6\", \"2/1\")\n# false\n# >>> HumanEval.simplify(\"7/10\", \"10/2\")\n# false\n\ndefmodule HumanEval do\n  def candidate(x, n), do: simplify(x, n)\n  def simplify(x, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'simplify' do\n    assert true == HumanEval.candidate(\"1/5\", \"5/1\")\n    assert false == HumanEval.candidate(\"1/6\", \"2/1\")\n    assert true == HumanEval.candidate(\"5/1\", \"3/1\")\n    assert false == HumanEval.candidate(\"7/10\", \"10/2\")\n    assert true == HumanEval.candidate(\"2/10\", \"50/10\")\n    assert true == HumanEval.candidate(\"7/2\", \"4/2\")\n    assert true == HumanEval.candidate(\"11/6\", \"6/1\")\n    assert false == HumanEval.candidate(\"2/3\", \"5/2\")\n    assert false == HumanEval.candidate(\"5/2\", \"3/5\")\n    assert true == HumanEval.candidate(\"2/4\", \"8/4\")\n    assert true == HumanEval.candidate(\"2/4\", \"4/2\")\n    assert true == HumanEval.candidate(\"1/5\", \"5/1\")\n    assert false == HumanEval.candidate(\"1/5\", \"1/5\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> HumanEval.order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> HumanEval.order_by_points([])\n# []\n\ndefmodule HumanEval do\n  def candidate(nums), do: order_by_points(nums)\n  def order_by_points(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'order_by_points' do\n    assert [-1, -11, 1, -12, 11] == HumanEval.candidate([1, 11, -1, -11, -12])\n    assert [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457] == HumanEval.candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\n    assert [] == HumanEval.candidate([])\n    assert [-3, -32, -98, -11, 1, 2, 43, 54] == HumanEval.candidate([1, -11, -32, 43, 54, -98, 2, -3])\n    assert [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert [-76, -21, 0, 4, 23, 6, 6] == HumanEval.candidate([0, 6, 6, -76, -21, 23, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "# Write a function that takes a list of numbers as input and returns \n# the number of elements in the list that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> HumanEval.specialFilter([15, -73, 14, -15])\n# 1\n# >>> HumanEval.specialFilter([33, -2, -3, 45, 21, 109])\n# 2\n\ndefmodule HumanEval do\n  def candidate(nums), do: specialFilter(nums)\n  def specialFilter(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'specialFilter' do\n    assert 0 == HumanEval.candidate([5, -2, 1, -5])\n    assert 1 == HumanEval.candidate([15, -73, 14, -15])\n    assert 2 == HumanEval.candidate([33, -2, -3, 45, 21, 109])\n    assert 4 == HumanEval.candidate([43, -12, 93, 125, 121, 109])\n    assert 3 == HumanEval.candidate([71, -2, -33, 75, 21, 19])\n    assert 0 == HumanEval.candidate([1])\n    assert 0 == HumanEval.candidate([])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "# You are given a positive integer n. You have to create an integer list a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> HumanEval.get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n\ndefmodule HumanEval do\n  def candidate(n), do: get_max_triples(n)\n  def get_max_triples(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_max_triples' do\n    assert 1 == HumanEval.candidate(5)\n    assert 4 == HumanEval.candidate(6)\n    assert 36 == HumanEval.candidate(10)\n    assert 53361 == HumanEval.candidate(100)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_148_bf", "prompt": "# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a tuple containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty tuple if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> HumanEval.bf(\"Jupiter\", \"Neptune\")\n# {\"Saturn\", \"Uranus\"}\n# >>> HumanEval.bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> HumanEval.bf(\"Mercury\", \"Uranus\")\n# {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n\ndefmodule HumanEval do\n  def candidate(planet1, planet2), do: bf(planet1, planet2)\n  def bf(planet1, planet2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bf' do\n    assert {\"Saturn\", \"Uranus\"} == HumanEval.candidate(\"Jupiter\", \"Neptune\")\n    assert {\"Venus\"} == HumanEval.candidate(\"Earth\", \"Mercury\")\n    assert {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"} == HumanEval.candidate(\"Mercury\", \"Uranus\")\n    assert {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"} == HumanEval.candidate(\"Neptune\", \"Venus\")\n    assert {} == HumanEval.candidate(\"Earth\", \"Earth\")\n    assert {} == HumanEval.candidate(\"Mars\", \"Earth\")\n    assert {} == HumanEval.candidate(\"Jupiter\", \"Makemake\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never a list of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> HumanEval.list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> HumanEval.list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\n\ndefmodule HumanEval do\n  def candidate(lst), do: sorted_list_sum(lst)\n  def sorted_list_sum(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sorted_list_sum' do\n    assert [\"aa\"] == HumanEval.candidate([\"aa\", \"a\", \"aaa\"])\n    assert [\"AI\", \"asdf\", \"school\"] == HumanEval.candidate([\"school\", \"AI\", \"asdf\", \"b\"])\n    assert [] == HumanEval.candidate([\"d\", \"b\", \"c\", \"a\"])\n    assert [\"abcd\", \"dcba\"] == HumanEval.candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\n    assert [\"AI\", \"ai\", \"au\"] == HumanEval.candidate([\"AI\", \"ai\", \"au\"])\n    assert [] == HumanEval.candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\n    assert [\"cc\", \"dd\", \"aaaa\", \"bbbb\"] == HumanEval.candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> HumanEval.x_or_y(7, 34, 12)\n# 34\n# >>> HumanEval.x_or_y(15, 8, 5)\n# 5\n\ndefmodule HumanEval do\n  def candidate(n, x, y), do: x_or_y(n, x, y)\n  def x_or_y(n, x, y) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'x_or_y' do\n    assert 34 == HumanEval.candidate(7, 34, 12)\n    assert 5 == HumanEval.candidate(15, 8, 5)\n    assert 33 == HumanEval.candidate(3, 33, 5212)\n    assert 3 == HumanEval.candidate(1259, 3, 52)\n    assert -1 == HumanEval.candidate(7919, -1, 12)\n    assert 583 == HumanEval.candidate(3609, 1245, 583)\n    assert 129 == HumanEval.candidate(91, 56, 129)\n    assert 1234 == HumanEval.candidate(6, 34, 1234)\n    assert 0 == HumanEval.candidate(1, 2, 0)\n    assert 2 == HumanEval.candidate(2, 2, 0)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> HumanEval.double_the_difference([1, 3, 2, 0])\n# 10\n# >>> HumanEval.double_the_difference([-1, -2, 0])\n# 0\n# >>> HumanEval.double_the_difference([9, -2])\n# 81\n# >>> HumanEval.double_the_difference([0])\n# 0\n# If the input list is empty, return 0.\n\ndefmodule HumanEval do\n  def candidate(lst), do: double_the_difference(lst)\n  def double_the_difference(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'double_the_difference' do\n    assert 0 == HumanEval.candidate([])\n    assert 25 == HumanEval.candidate([5.0, 4.0])\n    assert 0 == HumanEval.candidate([0.1, 0.2, 0.3])\n    assert 0 == HumanEval.candidate([-10.0, -20.0, -30.0])\n    assert 0 == HumanEval.candidate([-1.0, -2.0, 8.0])\n    assert 34 == HumanEval.candidate([0.2, 3.0, 5.0])\n    assert 165 == HumanEval.candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_152_compare", "prompt": "# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two lists of scores and guesses of equal length, where each index shows a match. \n# Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> HumanEval.compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> HumanEval.compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\n\ndefmodule HumanEval do\n  def candidate(game, guess), do: compare(game, guess)\n  def compare(game, guess) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'compare' do\n    assert [0, 0, 0, 0, 3, 3] == HumanEval.candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n    assert [0, 0, 0, 0, 0, 0] == HumanEval.candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])\n    assert [2, 4, 6] == HumanEval.candidate([1, 2, 3], [-1, -2, -3])\n    assert [2, 0, 0, 1] == HumanEval.candidate([1, 2, 3, 5], [-1, 2, 3, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> HumanEval.Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\n\ndefmodule HumanEval do\n  def candidate(class_name, extensions), do: Strongest_Extension(class_name, extensions)\n  def Strongest_Extension(class_name, extensions) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Strongest_Extension' do\n    assert \"Watashi.eIGHt8OKe\" == HumanEval.candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"])\n    assert \"Boku123.YEs.WeCaNe\" == HumanEval.candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"])\n    assert \"__YESIMHERE.NuLl__\" == HumanEval.candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"])\n    assert \"K.TAR\" == HumanEval.candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"])\n    assert \"__HAHA.123\" == HumanEval.candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"])\n    assert \"YameRore.okIWILL123\" == HumanEval.candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"])\n    assert \"finNNalLLly.WoW\" == HumanEval.candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"])\n    assert \"_.Bb\" == HumanEval.candidate(\"_\", [\"Bb\", \"91245\"])\n    assert \"Sp.671235\" == HumanEval.candidate(\"Sp\", [\"671235\", \"Bb\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> HumanEval.cycpattern_check(\"abcd\", \"abd\")\n# false\n# >>> HumanEval.cycpattern_check(\"hello\", \"ell\")\n# true\n# >>> HumanEval.cycpattern_check(\"whassup\", \"psus\")\n# false\n# >>> HumanEval.cycpattern_check(\"abab\", \"baa\")\n# true\n# >>> HumanEval.cycpattern_check(\"efef\", \"eeff\")\n# false\n# >>> HumanEval.cycpattern_check(\"himenss\", \"simen\")\n# true\n\ndefmodule HumanEval do\n  def candidate(a, b), do: cycpattern_check(a, b)\n  def cycpattern_check(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cycpattern_check' do\n    assert false == HumanEval.candidate(\"xyzw\", \"xyw\")\n    assert true == HumanEval.candidate(\"yello\", \"ell\")\n    assert false == HumanEval.candidate(\"whattup\", \"ptut\")\n    assert true == HumanEval.candidate(\"efef\", \"fee\")\n    assert false == HumanEval.candidate(\"abab\", \"aabb\")\n    assert true == HumanEval.candidate(\"winemtt\", \"tinem\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "# Given an integer. return a tuple that has the number of even and odd digits respectively.\n# Example:\n# >>> HumanEval.even_odd_count(-12)\n# {1, 1}\n# >>> HumanEval.even_odd_count(123)\n# {1, 2}\n\ndefmodule HumanEval do\n  def candidate(num), do: even_odd_count(num)\n  def even_odd_count(num) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_odd_count' do\n    assert {0, 1} == HumanEval.candidate(7)\n    assert {1, 1} == HumanEval.candidate(-78)\n    assert {2, 2} == HumanEval.candidate(3452)\n    assert {3, 3} == HumanEval.candidate(346211)\n    assert {3, 3} == HumanEval.candidate(-345821)\n    assert {1, 0} == HumanEval.candidate(-2)\n    assert {2, 3} == HumanEval.candidate(-45347)\n    assert {1, 0} == HumanEval.candidate(0)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> HumanEval.int_to_mini_roman(19)\n# \"xix\"\n# >>> HumanEval.int_to_mini_roman(152)\n# \"clii\"\n# >>> HumanEval.int_to_mini_roman(426)\n# \"cdxxvi\"\n\ndefmodule HumanEval do\n  def candidate(number), do: int_to_mini_roman(number)\n  def int_to_mini_roman(number) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'int_to_mini_roman' do\n    assert \"xix\" == HumanEval.candidate(19)\n    assert \"clii\" == HumanEval.candidate(152)\n    assert \"ccli\" == HumanEval.candidate(251)\n    assert \"cdxxvi\" == HumanEval.candidate(426)\n    assert \"d\" == HumanEval.candidate(500)\n    assert \"i\" == HumanEval.candidate(1)\n    assert \"iv\" == HumanEval.candidate(4)\n    assert \"xliii\" == HumanEval.candidate(43)\n    assert \"xc\" == HumanEval.candidate(90)\n    assert \"xciv\" == HumanEval.candidate(94)\n    assert \"dxxxii\" == HumanEval.candidate(532)\n    assert \"cm\" == HumanEval.candidate(900)\n    assert \"cmxciv\" == HumanEval.candidate(994)\n    assert \"m\" == HumanEval.candidate(1000)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> HumanEval.right_angle_triangle(3, 4, 5)\n# true\n# >>> HumanEval.right_angle_triangle(1, 2, 3)\n# false\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: right_angle_triangle(a, b, c)\n  def right_angle_triangle(a, b, c) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'right_angle_triangle' do\n    assert true == HumanEval.candidate(3, 4, 5)\n    assert false == HumanEval.candidate(1, 2, 3)\n    assert true == HumanEval.candidate(10, 6, 8)\n    assert false == HumanEval.candidate(2, 2, 2)\n    assert true == HumanEval.candidate(7, 24, 25)\n    assert false == HumanEval.candidate(10, 5, 7)\n    assert true == HumanEval.candidate(5, 12, 13)\n    assert true == HumanEval.candidate(15, 8, 17)\n    assert true == HumanEval.candidate(48, 55, 73)\n    assert false == HumanEval.candidate(1, 1, 1)\n    assert false == HumanEval.candidate(2, 2, 10)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_158_find_max", "prompt": "# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> HumanEval.find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> HumanEval.find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> HumanEval.find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\n\ndefmodule HumanEval do\n  def candidate(words), do: find_max(words)\n  def find_max(words) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_max' do\n    assert \"string\" == HumanEval.candidate([\"name\", \"of\", \"string\"])\n    assert \"enam\" == HumanEval.candidate([\"name\", \"enam\", \"game\"])\n    assert \"aaaaaaa\" == HumanEval.candidate([\"aaaaaaa\", \"bb\", \"cc\"])\n    assert \"abc\" == HumanEval.candidate([\"abc\", \"cba\"])\n    assert \"footbott\" == HumanEval.candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\n    assert \"gonna\" == HumanEval.candidate([\"we\", \"are\", \"gonna\", \"rock\"])\n    assert \"nation\" == HumanEval.candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\n    assert \"this\" == HumanEval.candidate([\"this\", \"is\", \"a\", \"prrk\"])\n    assert \"b\" == HumanEval.candidate([\"b\"])\n    assert \"play\" == HumanEval.candidate([\"play\", \"play\", \"play\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_159_eat", "prompt": "# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return a list of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> HumanEval.eat(5, 6, 10)\n# [11, 4]\n# >>> HumanEval.eat(4, 8, 9)\n# [12, 1]\n# >>> HumanEval.eat(1, 10, 10)\n# [11, 0]\n# >>> HumanEval.eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n\ndefmodule HumanEval do\n  def candidate(number, need, remaining), do: eat(number, need, remaining)\n  def eat(number, need, remaining) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'eat' do\n    assert [11, 4] == HumanEval.candidate(5, 6, 10)\n    assert [12, 1] == HumanEval.candidate(4, 8, 9)\n    assert [11, 0] == HumanEval.candidate(1, 10, 10)\n    assert [7, 0] == HumanEval.candidate(2, 11, 5)\n    assert [9, 2] == HumanEval.candidate(4, 5, 7)\n    assert [5, 0] == HumanEval.candidate(4, 5, 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# list = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n\ndefmodule HumanEval do\n  def candidate(operator, operand), do: do_algebra(operator, operand)\n  def do_algebra(operator, operand) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'do_algebra' do\n    assert 37 == HumanEval.candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\n    assert 9 == HumanEval.candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\n    assert 8 == HumanEval.candidate([\"//\", \"*\"], [7, 3, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_161_solve", "prompt": "# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> HumanEval.solve(\"1234\")\n# \"4321\"\n# >>> HumanEval.solve(\"ab\")\n# \"AB\"\n# >>> HumanEval.solve(\"#a@C\")\n# \"#A@c\"\n\ndefmodule HumanEval do\n  def candidate(s), do: solve(s)\n  def solve(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'solve' do\n    assert \"aSdF\" == HumanEval.candidate(\"AsDf\")\n    assert \"4321\" == HumanEval.candidate(\"1234\")\n    assert \"AB\" == HumanEval.candidate(\"ab\")\n    assert \"#A@c\" == HumanEval.candidate(\"#a@C\")\n    assert \"#aSDFw^45\" == HumanEval.candidate(\"#AsdfW^45\")\n    assert \"2@6#\" == HumanEval.candidate(\"#6@2\")\n    assert \"#$A^d\" == HumanEval.candidate(\"#$a^D\")\n    assert \"#CCC\" == HumanEval.candidate(\"#ccc\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return nil.\n# >>> HumanEval.string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n\ndefmodule HumanEval do\n  def candidate(text), do: string_to_md5(text)\n  def string_to_md5(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_to_md5' do\n    assert \"3e25960a79dbc69b674cd4ec67a72c62\" == HumanEval.candidate(\"Hello world\")\n    assert nil == HumanEval.candidate(\"\")\n    assert \"0ef78513b0cb8cef12743f5aeb35f888\" == HumanEval.candidate(\"A B C\")\n    assert \"5f4dcc3b5aa765d61d8327deb882cf99\" == HumanEval.candidate(\"password\")\n  end\nend\n", "language": "elixir"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> HumanEval.generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> HumanEval.generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> HumanEval.generate_integers(10, 14)\n# []\n\ndefmodule HumanEval do\n  def candidate(a, b), do: generate_integers(a, b)\n  def generate_integers(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'generate_integers' do\n    assert [2, 4, 6, 8] == HumanEval.candidate(2, 10)\n    assert [2, 4, 6, 8] == HumanEval.candidate(10, 2)\n    assert [2, 4, 6, 8] == HumanEval.candidate(132, 2)\n    assert [] == HumanEval.candidate(17, 89)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "# Write an elixirthon function to identify non-prime numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_not_prime(n)\n  def is_not_prime(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_not_prime' do\n    assert false == HumanEval.candidate(2)\n    assert true == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(35)\n    assert false == HumanEval.candidate(37)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndefmodule HumanEval do\n  def candidate(nums, n), do: heap_queue_largest(nums, n)\n  def heap_queue_largest(nums, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'heap_queue_largest' do\n    assert [85, 75, 65] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n    assert [85, 75] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n    assert [85, 75, 65, 58, 35] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "# Write an elixirthon function to check whether the two numbers differ at one bit position only or not.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: differ_At_One_Bit_Pos(a, b)\n  def differ_At_One_Bit_Pos(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'differ_At_One_Bit_Pos' do\n    assert true == HumanEval.candidate(13, 9)\n    assert false == HumanEval.candidate(15, 8)\n    assert false == HumanEval.candidate(2, 4)\n    assert true == HumanEval.candidate(2, 3)\n    assert true == HumanEval.candidate(5, 1)\n    assert true == HumanEval.candidate(1, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_8_square_nums", "prompt": "# Write a function to find squares of individual elements in a list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: square_nums(nums)\n  def square_nums(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_nums' do\n    assert [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert [100, 400, 900] == HumanEval.candidate([10, 20, 30])\n    assert [144, 225] == HumanEval.candidate([12, 15])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "# Write an elixirthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndefmodule HumanEval do\n  def candidate(str), do: find_Rotations(str)\n  def find_Rotations(str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Rotations' do\n    assert 1 == HumanEval.candidate(\"aaaa\")\n    assert 2 == HumanEval.candidate(\"ab\")\n    assert 3 == HumanEval.candidate(\"abc\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "# Write an elixirthon function to remove first and last occurrence of a given character from the string.\n\ndefmodule HumanEval do\n  def candidate(s, ch), do: remove_Occ(s, ch)\n  def remove_Occ(s, ch) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_Occ' do\n    assert \"heo\" == HumanEval.candidate(\"hello\", \"l\")\n    assert \"bcd\" == HumanEval.candidate(\"abcda\", \"a\")\n    assert \"H\" == HumanEval.candidate(\"PHP\", \"P\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndefmodule HumanEval do\n  def candidate(M), do: sort_matrix(M)\n  def sort_matrix(M) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_matrix' do\n    assert [[1, 1, 1], [1, 2, 3], [2, 4, 5]] == HumanEval.candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    assert [[-2, 4, -5], [1, -1, 1], [1, 2, 3]] == HumanEval.candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n    assert [[2, 1, 4], [6, 4, 3], [5, 8, 9]] == HumanEval.candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_14_find_Volume", "prompt": "# Write an elixirthon function to find the volume of a triangular prism.\n\ndefmodule HumanEval do\n  def candidate(l, b, h), do: find_Volume(l, b, h)\n  def find_Volume(l, b, h) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Volume' do\n    assert 240 == HumanEval.candidate(10, 8, 6)\n    assert 6 == HumanEval.candidate(3, 2, 2)\n    assert 1 == HumanEval.candidate(1, 2, 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_lowercase_underscore(text)\n  def text_lowercase_underscore(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_lowercase_underscore' do\n    assert true == HumanEval.candidate(\"aab_cbbbc\")\n    assert false == HumanEval.candidate(\"aab_Abbbc\")\n    assert false == HumanEval.candidate(\"Aaab_abbbc\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "# Write a function that returns the perimeter of a square given its side length as input.\n\ndefmodule HumanEval do\n  def candidate(a), do: square_perimeter(a)\n  def square_perimeter(a) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_perimeter' do\n    assert 40 == HumanEval.candidate(10)\n    assert 20 == HumanEval.candidate(5)\n    assert 16 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "# Write a function to remove characters from the first string which are present in the second string.\n\ndefmodule HumanEval do\n  def candidate(string, second_string), do: remove_dirty_chars(string, second_string)\n  def remove_dirty_chars(string, second_string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_dirty_chars' do\n    assert \"bacuve\" == HumanEval.candidate(\"probasscurve\", \"pros\")\n    assert \"digiidi\" == HumanEval.candidate(\"digitalindia\", \"talent\")\n    assert \"emles\" == HumanEval.candidate(\"exoticmiles\", \"toxic\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "# Write a function to find whether a given list of integers contains any duplicate element.\n\ndefmodule HumanEval do\n  def candidate(arraynums), do: test_duplicate(arraynums)\n  def test_duplicate(arraynums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'test_duplicate' do\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 4])\n    assert true == HumanEval.candidate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_20_is_woodall", "prompt": "# Write a function to check if the given number is woodball or not.\n\ndefmodule HumanEval do\n  def candidate(x), do: is_woodall(x)\n  def is_woodall(x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_woodall' do\n    assert true == HumanEval.candidate(383)\n    assert false == HumanEval.candidate(254)\n    assert false == HumanEval.candidate(200)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_56_checks", "prompt": "# Write an elixirthon function to check if a given number is one less than twice its reverse.\n\ndefmodule HumanEval do\n  def candidate(n), do: checks(n)\n  def checks(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'checks' do\n    assert false == HumanEval.candidate(70)\n    assert false == HumanEval.candidate(23)\n    assert true == HumanEval.candidate(73)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "# Write an elixirthon function to find the largest number that can be formed with the given list of digits.\n\ndefmodule HumanEval do\n  def candidate(arr), do: find_Max_Num(arr)\n  def find_Max_Num(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Max_Num' do\n    assert 321 == HumanEval.candidate([1, 2, 3])\n    assert 6541 == HumanEval.candidate([4, 5, 6, 1])\n    assert 9321 == HumanEval.candidate([1, 2, 3, 9])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "# Write an elixirthon function to check whether the given two integers have opposite sign or not.\n\ndefmodule HumanEval do\n  def candidate(x, y), do: opposite_Signs(x, y)\n  def opposite_Signs(x, y) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'opposite_Signs' do\n    assert true == HumanEval.candidate(1, -2)\n    assert false == HumanEval.candidate(3, 2)\n    assert false == HumanEval.candidate(-10, -10)\n    assert true == HumanEval.candidate(-2, 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "# Write a function to find the nth octagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_octagonal(n)\n  def is_octagonal(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_octagonal' do\n    assert 65 == HumanEval.candidate(5)\n    assert 280 == HumanEval.candidate(10)\n    assert 645 == HumanEval.candidate(15)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "# Write an elixirthon function to count the number of substrings with the sum of digits equal to their length.\n\ndefmodule HumanEval do\n  def candidate(s), do: count_Substrings(s)\n  def count_Substrings(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Substrings' do\n    assert 6 == HumanEval.candidate(\"112112\")\n    assert 6 == HumanEval.candidate(\"111\")\n    assert 12 == HumanEval.candidate(\"1101112\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_62_smallest_num", "prompt": "# Write an elixirthon function to find smallest number in a list.\n\ndefmodule HumanEval do\n  def candidate(xs), do: smallest_num(xs)\n  def smallest_num(xs) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'smallest_num' do\n    assert 1 == HumanEval.candidate([10, 20, 1, 45, 99])\n    assert 1 == HumanEval.candidate([1, 2, 3])\n    assert 45 == HumanEval.candidate([45, 46, 50, 60])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_63_max_difference", "prompt": "# Write a function to find the maximum difference between available pairs in the given tuple list.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: max_difference(test_list)\n  def max_difference(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_difference' do\n    assert 7 == HumanEval.candidate([{3, 5}, {1, 7}, {10, 3}, {1, 2}])\n    assert 15 == HumanEval.candidate([{4, 6}, {2, 17}, {9, 13}, {11, 12}])\n    assert 23 == HumanEval.candidate([{12, 35}, {21, 27}, {13, 23}, {41, 22}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_64_subject_marks", "prompt": "# Write a function to sort a list of tuples using the second value of each tuple.\n\ndefmodule HumanEval do\n  def candidate(subjectmarks), do: subject_marks(subjectmarks)\n  def subject_marks(subjectmarks) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'subject_marks' do\n    assert [{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}] == HumanEval.candidate([{\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}, {\"Social sciences\", 82}])\n    assert [{\"Social\", 33}, {\"Telugu\", 49}, {\"Hindhi\", 54}] == HumanEval.candidate([{\"Telugu\", 49}, {\"Hindhi\", 54}, {\"Social\", 33}])\n    assert [{\"Biology\", 45}, {\"Physics\", 96}, {\"Chemistry\", 97}] == HumanEval.candidate([{\"Physics\", 96}, {\"Chemistry\", 97}, {\"Biology\", 45}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "# Write a function to flatten a list and sum all of its elements.\n\ndefmodule HumanEval do\n  def candidate(data_list), do: recursive_list_sum(data_list)\n  def recursive_list_sum(data_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'recursive_list_sum' do\n    assert 21 == HumanEval.candidate([1, 2, [3, 4], [5, 6]])\n    assert 106 == HumanEval.candidate([7, 10, [15, 14], [19, 41]])\n    assert 210 == HumanEval.candidate([10, 20, [30, 40], [50, 60]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_66_pos_count", "prompt": "# Write an elixirthon function to count the number of positive numbers in a list.\n\ndefmodule HumanEval do\n  def candidate(list), do: pos_count(list)\n  def pos_count(list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pos_count' do\n    assert 2 == HumanEval.candidate([1, -2, 3, -4])\n    assert 3 == HumanEval.candidate([3, 4, 5, -1])\n    assert 4 == HumanEval.candidate([1, 2, 3, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_67_bell_number", "prompt": "# Write a function to find the number of ways to partition a set of Bell numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: bell_number(n)\n  def bell_number(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bell_number' do\n    assert 2 == HumanEval.candidate(2)\n    assert 115975 == HumanEval.candidate(10)\n    assert 6775685320645824322581483068371419745979053216268760300 == HumanEval.candidate(56)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "# Write an elixirthon function to check whether the given list is monotonic or not.\n\ndefmodule HumanEval do\n  def candidate(A), do: is_Monotonic(A)\n  def is_Monotonic(A) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Monotonic' do\n    assert true == HumanEval.candidate([6, 5, 4, 4])\n    assert true == HumanEval.candidate([1, 2, 2, 3])\n    assert false == HumanEval.candidate([1, 3, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_69_is_sublist", "prompt": "# Write a function to check whether a list contains the given sublist or not.\n\ndefmodule HumanEval do\n  def candidate(l, s), do: is_sublist(l, s)\n  def is_sublist(l, s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_sublist' do\n    assert false == HumanEval.candidate([2, 4, 3, 5, 7], [3, 7])\n    assert true == HumanEval.candidate([2, 4, 3, 5, 7], [4, 3])\n    assert false == HumanEval.candidate([2, 4, 3, 5, 7], [1, 6])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_70_get_equal", "prompt": "# Write a function to find whether all the given lists have equal length or not.\n\ndefmodule HumanEval do\n  def candidate(Input), do: get_equal(Input)\n  def get_equal(Input) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_equal' do\n    assert true == HumanEval.candidate([[11, 22, 33], [44, 55, 66]])\n    assert false == HumanEval.candidate([[1, 2, 3], [4, 5, 6, 7]])\n    assert true == HumanEval.candidate([[1, 2], [3, 4]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_71_comb_sort", "prompt": "# Write a function to sort a list of elements.\n\ndefmodule HumanEval do\n  def candidate(nums), do: comb_sort(nums)\n  def comb_sort(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'comb_sort' do\n    assert [5, 15, 25, 37, 79] == HumanEval.candidate([5, 15, 37, 25, 79])\n    assert [15, 19, 22, 32, 41] == HumanEval.candidate([41, 32, 15, 19, 22])\n    assert [13, 15, 47, 99] == HumanEval.candidate([99, 15, 13, 47])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_72_dif_Square", "prompt": "# Write an elixirthon function to check whether the given number can be represented as the difference of two squares or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: dif_Square(n)\n  def dif_Square(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'dif_Square' do\n    assert true == HumanEval.candidate(5)\n    assert false == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(15)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "# Write a function to check whether it follows the sequence given in the patterns list.\n\ndefmodule HumanEval do\n  def candidate(colors, patterns), do: is_samepatterns(colors, patterns)\n  def is_samepatterns(colors, patterns) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_samepatterns' do\n    assert true == HumanEval.candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n    assert false == HumanEval.candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n    assert false == HumanEval.candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_75_find_tuples", "prompt": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndefmodule HumanEval do\n  def candidate(test_list, K), do: find_tuples(test_list, K)\n  def find_tuples(test_list, K) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_tuples' do\n    assert [{6, 24, 12}] == HumanEval.candidate([{6, 24, 12}, {7, 9, 6}, {12, 18, 21}], 6)\n    assert [{5, 25, 30}] == HumanEval.candidate([{5, 25, 30}, {4, 2, 3}, {7, 8, 9}], 5)\n    assert [{8, 16, 4}] == HumanEval.candidate([{7, 9, 16}, {8, 16, 4}, {19, 17, 18}], 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_77_is_Diff", "prompt": "# Write an elixirthon function to find whether a number is divisible by 11.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_Diff(n)\n  def is_Diff(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Diff' do\n    assert false == HumanEval.candidate(12345)\n    assert true == HumanEval.candidate(1212112)\n    assert false == HumanEval.candidate(1212)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_79_word_len", "prompt": "# Write an elixirthon function to check whether the length of the word is odd or not.\n\ndefmodule HumanEval do\n  def candidate(s), do: word_len(s)\n  def word_len(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'word_len' do\n    assert false == HumanEval.candidate(\"Hadoop\")\n    assert true == HumanEval.candidate(\"great\")\n    assert true == HumanEval.candidate(\"structure\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "# Write a function to find the nth tetrahedral number.\n\ndefmodule HumanEval do\n  def candidate(n), do: tetrahedral_number(n)\n  def tetrahedral_number(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tetrahedral_number' do\n    assert 35 == HumanEval.candidate(5)\n    assert 56 == HumanEval.candidate(6)\n    assert 84 == HumanEval.candidate(7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_83_get_Char", "prompt": "# Write an elixirthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndefmodule HumanEval do\n  def candidate(strr), do: get_Char(strr)\n  def get_Char(strr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_Char' do\n    assert \"f\" == HumanEval.candidate(\"abc\")\n    assert \"t\" == HumanEval.candidate(\"gfg\")\n    assert \"c\" == HumanEval.candidate(\"ab\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_84_sequence", "prompt": "# Write a function to find the nth number in the newman conway sequence.\n\ndefmodule HumanEval do\n  def candidate(n), do: sequence(n)\n  def sequence(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sequence' do\n    assert 6 == HumanEval.candidate(10)\n    assert 1 == HumanEval.candidate(2)\n    assert 2 == HumanEval.candidate(3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "# Write a function to find nth centered hexagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: centered_hexagonal_number(n)\n  def centered_hexagonal_number(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'centered_hexagonal_number' do\n    assert 271 == HumanEval.candidate(10)\n    assert 7 == HumanEval.candidate(2)\n    assert 217 == HumanEval.candidate(9)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "# Write a function to merge three dictionaries into a single map.\n\ndefmodule HumanEval do\n  def candidate(dict1, dict2, dict3), do: merge_dictionaries_three(dict1, dict2, dict3)\n  def merge_dictionaries_three(dict1, dict2, dict3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'merge_dictionaries_three' do\n    assert %{\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"} == HumanEval.candidate(%{\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, %{\"G\" => \"Green\", \"W\" => \"White\"}, %{\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"})\n    assert %{\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"} == HumanEval.candidate(%{\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, %{\"G\" => \"Green\", \"W\" => \"White\"}, %{\"L\" => \"lavender\", \"B\" => \"Blue\"})\n    assert %{\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"} == HumanEval.candidate(%{\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, %{\"L\" => \"lavender\", \"B\" => \"Blue\"}, %{\"G\" => \"Green\", \"W\" => \"White\"})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_88_freq_count", "prompt": "# Write a function to get the frequency of all the elements in a list, returned as a map.\n\ndefmodule HumanEval do\n  def candidate(list1), do: freq_count(list1)\n  def freq_count(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'freq_count' do\n    assert %{10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1} == HumanEval.candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n    assert %{1 => 3, 2 => 2, 3 => 3, 4 => 3} == HumanEval.candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n    assert %{10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2} == HumanEval.candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_89_closest_num", "prompt": "# Write a function to find the closest smaller number than n.\n\ndefmodule HumanEval do\n  def candidate(N), do: closest_num(N)\n  def closest_num(N) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'closest_num' do\n    assert 10 == HumanEval.candidate(11)\n    assert 6 == HumanEval.candidate(7)\n    assert 11 == HumanEval.candidate(12)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_90_len_log", "prompt": "# Write an elixirthon function to find the length of the longest word.\n\ndefmodule HumanEval do\n  def candidate(list1), do: len_log(list1)\n  def len_log(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'len_log' do\n    assert 7 == HumanEval.candidate([\"python\", \"PHP\", \"bigdata\"])\n    assert 3 == HumanEval.candidate([\"a\", \"ab\", \"abc\"])\n    assert 5 == HumanEval.candidate([\"small\", \"big\", \"tall\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_91_find_substring", "prompt": "# Write a function to check if a string is present as a substring in a given list of string values.\n\ndefmodule HumanEval do\n  def candidate(str1, sub_str), do: find_substring(str1, sub_str)\n  def find_substring(str1, sub_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_substring' do\n    assert true == HumanEval.candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n    assert false == HumanEval.candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n    assert true == HumanEval.candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_92_is_undulating", "prompt": "# Write a function to check whether the given number is undulating or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_undulating(n)\n  def is_undulating(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_undulating' do\n    assert true == HumanEval.candidate(1212121)\n    assert false == HumanEval.candidate(1991)\n    assert true == HumanEval.candidate(121)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_93_power", "prompt": "# Write a function to calculate the value of 'a' to the power 'b'.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: power(a, b)\n  def power(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'power' do\n    assert 81 == HumanEval.candidate(3, 4)\n    assert 8 == HumanEval.candidate(2, 3)\n    assert 3125 == HumanEval.candidate(5, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_94_index_minimum", "prompt": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: index_minimum(test_list)\n  def index_minimum(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'index_minimum' do\n    assert \"Varsha\" == HumanEval.candidate([{\"Rash\", 143}, {\"Manjeet\", 200}, {\"Varsha\", 100}])\n    assert \"Dawood\" == HumanEval.candidate([{\"Yash\", 185}, {\"Dawood\", 125}, {\"Sanya\", 175}])\n    assert \"Ayesha\" == HumanEval.candidate([{\"Sai\", 345}, {\"Salman\", 145}, {\"Ayesha\", 96}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "# Write an elixirthon function to find the length of the smallest list in a list of lists.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Min_Length(lst)\n  def Find_Min_Length(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Min_Length' do\n    assert 1 == HumanEval.candidate([[1], [1, 2]])\n    assert 2 == HumanEval.candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n    assert 3 == HumanEval.candidate([[3, 3, 3], [4, 4, 4, 4]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_96_divisor", "prompt": "# Write an elixirthon function to find the number of divisors of a given integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: divisor(n)\n  def divisor(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'divisor' do\n    assert 4 == HumanEval.candidate(15)\n    assert 6 == HumanEval.candidate(12)\n    assert 3 == HumanEval.candidate(9)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "# Write a function to find frequency of each element in a flattened list of lists, returned in a map.\n\ndefmodule HumanEval do\n  def candidate(list1), do: frequency_lists(list1)\n  def frequency_lists(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'frequency_lists' do\n    assert %{1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1} == HumanEval.candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    assert %{1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1} == HumanEval.candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    assert %{20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1} == HumanEval.candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndefmodule HumanEval do\n  def candidate(n), do: decimal_to_binary(n)\n  def decimal_to_binary(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'decimal_to_binary' do\n    assert \"1000\" == HumanEval.candidate(8)\n    assert \"10010\" == HumanEval.candidate(18)\n    assert \"111\" == HumanEval.candidate(7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndefmodule HumanEval do\n  def candidate(num), do: next_smallest_palindrome(num)\n  def next_smallest_palindrome(num) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_smallest_palindrome' do\n    assert 101 == HumanEval.candidate(99)\n    assert 1331 == HumanEval.candidate(1221)\n    assert 121 == HumanEval.candidate(120)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_101_kth_element", "prompt": "# Write a function to find the kth element in the given list using 1-based indexing.\n\ndefmodule HumanEval do\n  def candidate(arr, k), do: kth_element(arr, k)\n  def kth_element(arr, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'kth_element' do\n    assert 3 == HumanEval.candidate([12, 3, 5, 7, 19], 2)\n    assert 8 == HumanEval.candidate([17, 24, 8, 23], 3)\n    assert 36 == HumanEval.candidate([16, 21, 25, 36, 4], 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "# Write a function to convert a snake case string to camel case string.\n\ndefmodule HumanEval do\n  def candidate(word), do: snake_to_camel(word)\n  def snake_to_camel(word) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'snake_to_camel' do\n    assert \"PythonProgram\" == HumanEval.candidate(\"python_program\")\n    assert \"PythonLanguage\" == HumanEval.candidate(\"python_language\")\n    assert \"ProgrammingLanguage\" == HumanEval.candidate(\"programming_language\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "# Write a function to find the Eulerian number a(n, m).\n\ndefmodule HumanEval do\n  def candidate(n, m), do: eulerian_num(n, m)\n  def eulerian_num(n, m) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'eulerian_num' do\n    assert 4 == HumanEval.candidate(3, 1)\n    assert 11 == HumanEval.candidate(4, 1)\n    assert 26 == HumanEval.candidate(5, 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "# Write a function to sort each sublist of strings in a given list of lists.\n\ndefmodule HumanEval do\n  def candidate(input_list), do: sort_sublists(input_list)\n  def sort_sublists(input_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_sublists' do\n    assert [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]] == HumanEval.candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n    assert [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]] == HumanEval.candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])\n    assert [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]] == HumanEval.candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_105_count", "prompt": "# Write an elixirthon function to count true booleans in the given list.\n\ndefmodule HumanEval do\n  def candidate(lst), do: count(lst)\n  def count(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count' do\n    assert 2 == HumanEval.candidate([true, false, true])\n    assert 0 == HumanEval.candidate([false, false])\n    assert 3 == HumanEval.candidate([true, true, true])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_106_add_lists", "prompt": "# Write a function to append the given list to the given tuples.\n\ndefmodule HumanEval do\n  def candidate(test_list, test_tup), do: add_lists(test_list, test_tup)\n  def add_lists(test_list, test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_lists' do\n    assert {9, 10, 5, 6, 7} == HumanEval.candidate([5, 6, 7], {9, 10})\n    assert {10, 11, 6, 7, 8} == HumanEval.candidate([6, 7, 8], {10, 11})\n    assert {11, 12, 7, 8, 9} == HumanEval.candidate([7, 8, 9], {11, 12})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "# Write a function to merge three lists into a single sorted list.\n\ndefmodule HumanEval do\n  def candidate(num1, num2, num3), do: merge_sorted_list(num1, num2, num3)\n  def merge_sorted_list(num1, num2, num3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'merge_sorted_list' do\n    assert [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233] == HumanEval.candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n    assert [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12] == HumanEval.candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n    assert [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85] == HumanEval.candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "# Write an elixirthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndefmodule HumanEval do\n  def candidate(s, n), do: odd_Equivalent(s, n)\n  def odd_Equivalent(s, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_Equivalent' do\n    assert 3 == HumanEval.candidate(\"011001\", 6)\n    assert 4 == HumanEval.candidate(\"11011\", 5)\n    assert 2 == HumanEval.candidate(\"1010\", 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_113_check_integer", "prompt": "# Write a function to check if a string represents an integer or not.\n\ndefmodule HumanEval do\n  def candidate(text), do: check_integer(text)\n  def check_integer(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_integer' do\n    assert false == HumanEval.candidate(\"python\")\n    assert true == HumanEval.candidate(\"1\")\n    assert true == HumanEval.candidate(\"12345\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "# Write a function to convert a given tuple of positive integers into a single integer.\n\ndefmodule HumanEval do\n  def candidate(nums), do: tuple_to_int(nums)\n  def tuple_to_int(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_to_int' do\n    assert 123 == HumanEval.candidate({1, 2, 3})\n    assert 456 == HumanEval.candidate({4, 5, 6})\n    assert 567 == HumanEval.candidate({5, 6, 7})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_117_list_to_float", "prompt": "# Write a function to convert all possible convertible elements in a list of lists to floats.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: list_to_float(test_list)\n  def list_to_float(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'list_to_float' do\n    assert [{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}] == HumanEval.candidate([{\"3\", \"4\"}, {\"1\", \"26.45\"}, {\"7.32\", \"8\"}, {\"4\", \"8\"}])\n    assert [{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}] == HumanEval.candidate([{\"4\", \"4\"}, {\"2\", \"27\"}, {\"4.12\", \"9\"}, {\"7\", \"11\"}])\n    assert [{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}] == HumanEval.candidate([{\"6\", \"78\"}, {\"5\", \"26.45\"}, {\"1.33\", \"4\"}, {\"82\", \"13\"}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_118_string_to_list", "prompt": "# Write a function to convert a string to a list of strings split on the space character.\n\ndefmodule HumanEval do\n  def candidate(string), do: string_to_list(string)\n  def string_to_list(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_to_list' do\n    assert [\"python\", \"programming\"] == HumanEval.candidate(\"python programming\")\n    assert [\"lists\", \"tuples\", \"strings\"] == HumanEval.candidate(\"lists tuples strings\")\n    assert [\"write\", \"a\", \"program\"] == HumanEval.candidate(\"write a program\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_119_search", "prompt": "# Write an elixirthon function to find the element that appears only once in a sorted list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: search(arr)\n  def search(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'search' do\n    assert 3 == HumanEval.candidate([1, 1, 2, 2, 3])\n    assert 8 == HumanEval.candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8])\n    assert 1 == HumanEval.candidate([1, 2, 2, 3, 3, 4, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: max_product_tuple(list1)\n  def max_product_tuple(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_product_tuple' do\n    assert 36 == HumanEval.candidate([{2, 7}, {2, 6}, {1, 8}, {4, 9}])\n    assert 200 == HumanEval.candidate([{10, 20}, {15, 2}, {5, 10}])\n    assert 484 == HumanEval.candidate([{11, 44}, {10, 15}, {20, 5}, {12, 9}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "# Write a function to sum all amicable numbers from 1 to a specified number.\n\ndefmodule HumanEval do\n  def candidate(limit), do: amicable_numbers_sum(limit)\n  def amicable_numbers_sum(limit) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'amicable_numbers_sum' do\n    assert 504 == HumanEval.candidate(999)\n    assert 31626 == HumanEval.candidate(9999)\n    assert 0 == HumanEval.candidate(99)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_125_find_length", "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndefmodule HumanEval do\n  def candidate(string), do: find_length(string)\n  def find_length(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_length' do\n    assert 6 == HumanEval.candidate(\"11000010001\")\n    assert 1 == HumanEval.candidate(\"10111\")\n    assert 2 == HumanEval.candidate(\"11011101100101\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_126_sum", "prompt": "# Write an elixirthon function to find the sum of common divisors of two given numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: sum(a, b)\n  def sum(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum' do\n    assert 6 == HumanEval.candidate(10, 15)\n    assert 93 == HumanEval.candidate(100, 150)\n    assert 3 == HumanEval.candidate(4, 6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_127_multiply_int", "prompt": "# Write a function to multiply two integers.\n\ndefmodule HumanEval do\n  def candidate(x, y), do: multiply_int(x, y)\n  def multiply_int(x, y) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiply_int' do\n    assert 200 == HumanEval.candidate(10, 20)\n    assert 50 == HumanEval.candidate(5, 10)\n    assert 32 == HumanEval.candidate(4, 8)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_128_long_words", "prompt": "# Write a function to find words that are longer than n characters from a given list of words.\n\ndefmodule HumanEval do\n  def candidate(n, str), do: long_words(n, str)\n  def long_words(n, str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'long_words' do\n    assert [\"python\", \"programming\", \"language\"] == HumanEval.candidate(3, \"python is a programming language\")\n    assert [\"writing\", \"program\"] == HumanEval.candidate(2, \"writing a program\")\n    assert [\"sorting\"] == HumanEval.candidate(5, \"sorting list\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "# Write a function to calculate whether the matrix is a magic square.\n\ndefmodule HumanEval do\n  def candidate(my_matrix), do: magic_square_test(my_matrix)\n  def magic_square_test(my_matrix) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'magic_square_test' do\n    assert true == HumanEval.candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n    assert true == HumanEval.candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    assert false == HumanEval.candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "# Write a function to find the item with maximum frequency in a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: max_occurrences(nums)\n  def max_occurrences(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_occurrences' do\n    assert 2 == HumanEval.candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n    assert 8 == HumanEval.candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18])\n    assert 20 == HumanEval.candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "# Write an elixirthon function to reverse only the vowels of a given string (where y is not a vowel).\n\ndefmodule HumanEval do\n  def candidate(str1), do: reverse_vowels(str1)\n  def reverse_vowels(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_vowels' do\n    assert \"Python\" == HumanEval.candidate(\"Python\")\n    assert \"ASU\" == HumanEval.candidate(\"USA\")\n    assert \"ab\" == HumanEval.candidate(\"ab\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_132_tup_string", "prompt": "# Write a function to convert a list to a string.\n\ndefmodule HumanEval do\n  def candidate(tup1), do: tup_string(tup1)\n  def tup_string(tup1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tup_string' do\n    assert \"exercises\" == HumanEval.candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n    assert \"python\" == HumanEval.candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n    assert \"program\" == HumanEval.candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: sum_negativenum(nums)\n  def sum_negativenum(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_negativenum' do\n    assert -32 == HumanEval.candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    assert -52 == HumanEval.candidate([10, 15, -14, 13, -18, 12, -20])\n    assert -894 == HumanEval.candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "# Write a function to find the nth hexagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: hexagonal_num(n)\n  def hexagonal_num(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'hexagonal_num' do\n    assert 190 == HumanEval.candidate(10)\n    assert 45 == HumanEval.candidate(5)\n    assert 91 == HumanEval.candidate(7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "# Write an elixirthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_Sum_Of_Powers_Of_Two(n)\n  def is_Sum_Of_Powers_Of_Two(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Sum_Of_Powers_Of_Two' do\n    assert true == HumanEval.candidate(10)\n    assert false == HumanEval.candidate(7)\n    assert true == HumanEval.candidate(14)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "# Write a function to sort a list of elements.\n\ndefmodule HumanEval do\n  def candidate(nums), do: pancake_sort(nums)\n  def pancake_sort(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pancake_sort' do\n    assert [15, 25, 38, 69, 79] == HumanEval.candidate([15, 79, 25, 38, 69])\n    assert [12, 36, 54, 85, 98] == HumanEval.candidate([98, 12, 54, 36, 85])\n    assert [12, 23, 32, 41, 42] == HumanEval.candidate([41, 42, 32, 12, 23])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_142_count_samepair", "prompt": "# Write a function to count number items that are identical in the same position of three given lists.\n\ndefmodule HumanEval do\n  def candidate(list1, list2, list3), do: count_samepair(list1, list2, list3)\n  def count_samepair(list1, list2, list3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_samepair' do\n    assert 3 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n    assert 4 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n    assert 5 == HumanEval.candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_143_find_lists", "prompt": "# Write a function to find number of lists present in the given list.\n\ndefmodule HumanEval do\n  def candidate(Input), do: find_lists(Input)\n  def find_lists(Input) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_lists' do\n    assert 2 == HumanEval.candidate([[1, 2, 3, 4], [5, 6, 7, 8]])\n    assert 3 == HumanEval.candidate([[1, 2], [3, 4], [5, 6]])\n    assert 1 == HumanEval.candidate([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "# Write an elixirthon function to find the maximum difference between any two elements in a given list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_Abs_Diff(arr)\n  def max_Abs_Diff(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_Abs_Diff' do\n    assert 4 == HumanEval.candidate([2, 1, 5, 3])\n    assert 8 == HumanEval.candidate([9, 3, 2, 5, 1])\n    assert 2 == HumanEval.candidate([3, 2, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_160_find_solution", "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nil if no solution exists.\n\ndefmodule HumanEval do\n  def candidate(a, b, n), do: find_solution(a, b, n)\n  def find_solution(a, b, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_solution' do\n    assert {2, 1} == HumanEval.candidate(2, 3, 7)\n    assert nil == HumanEval.candidate(4, 2, 7)\n    assert {4, 1} == HumanEval.candidate(1, 13, 17)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_161_remove_elements", "prompt": "# Write a function to remove all elements from a given list present in another list.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: remove_elements(list1, list2)\n  def remove_elements(list1, list2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_elements' do\n    assert [1, 3, 5, 7, 9, 10] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n    assert [2, 4, 6, 8, 9, 10] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n    assert [1, 2, 3, 4, 6, 8, 9, 10] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_162_sum_series", "prompt": "# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_series(n)\n  def sum_series(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_series' do\n    assert 12 == HumanEval.candidate(6)\n    assert 30 == HumanEval.candidate(10)\n    assert 25 == HumanEval.candidate(9)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "# Write a function to determine if the sum of the divisors of two integers are the same.\n\ndefmodule HumanEval do\n  def candidate(num1, num2), do: are_equivalent(num1, num2)\n  def are_equivalent(num1, num2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'are_equivalent' do\n    assert false == HumanEval.candidate(36, 57)\n    assert false == HumanEval.candidate(2, 4)\n    assert true == HumanEval.candidate(23, 47)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_165_count_char_position", "prompt": "# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndefmodule HumanEval do\n  def candidate(str1), do: count_char_position(str1)\n  def count_char_position(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_char_position' do\n    assert 2 == HumanEval.candidate(\"xbcefg\")\n    assert 3 == HumanEval.candidate(\"ABcED\")\n    assert 5 == HumanEval.candidate(\"AbgdeF\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "# Write a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndefmodule HumanEval do\n  def candidate(A), do: find_even_pair(A)\n  def find_even_pair(A) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_even_pair' do\n    assert 4 == HumanEval.candidate([5, 4, 7, 2, 1])\n    assert 9 == HumanEval.candidate([7, 2, 8, 1, 0, 5, 11])\n    assert 1 == HumanEval.candidate([1, 2, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "# Write an elixirthon function to find the smallest power of 2 greater than or equal to n.\n\ndefmodule HumanEval do\n  def candidate(n), do: next_power_of_2(n)\n  def next_power_of_2(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_power_of_2' do\n    assert 1 == HumanEval.candidate(0)\n    assert 8 == HumanEval.candidate(5)\n    assert 32 == HumanEval.candidate(17)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_168_frequency", "prompt": "# Write a function to count the number of occurrences of a number in a given list.\n\ndefmodule HumanEval do\n  def candidate(a, x), do: frequency(a, x)\n  def frequency(a, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'frequency' do\n    assert 0 == HumanEval.candidate([1, 2, 3], 4)\n    assert 3 == HumanEval.candidate([1, 2, 2, 3, 3, 3, 4], 3)\n    assert 2 == HumanEval.candidate([0, 1, 2, 3, 1, 2], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "# Write a function to find the sum of numbers in a list within a range specified by two indices.\n\ndefmodule HumanEval do\n  def candidate(list1, m, n), do: sum_range_list(list1, m, n)\n  def sum_range_list(list1, m, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_range_list' do\n    assert 29 == HumanEval.candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    assert 16 == HumanEval.candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n    assert 38 == HumanEval.candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "# Write a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndefmodule HumanEval do\n  def candidate(a), do: perimeter_pentagon(a)\n  def perimeter_pentagon(a) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'perimeter_pentagon' do\n    assert 25 == HumanEval.candidate(5)\n    assert 50 == HumanEval.candidate(10)\n    assert 75 == HumanEval.candidate(15)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_172_count_occurance", "prompt": "# Write a function to count the number of occurence of the string 'std' in a given string.\n\ndefmodule HumanEval do\n  def candidate(s), do: count_occurance(s)\n  def count_occurance(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_occurance' do\n    assert 3 == HumanEval.candidate(\"letstdlenstdporstd\")\n    assert 1 == HumanEval.candidate(\"truststdsolensporsd\")\n    assert 2 == HumanEval.candidate(\"makestdsostdworthit\")\n    assert 1 == HumanEval.candidate(\"stds\")\n    assert 0 == HumanEval.candidate(\"\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_222_check_type", "prompt": "# Write a function to check if all the elements in tuple have same data type or not.\n\ndefmodule HumanEval do\n  def candidate(test_tuple), do: check_type(test_tuple)\n  def check_type(test_tuple) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_type' do\n    assert true == HumanEval.candidate({5, 6, 7, 3, 5, 6})\n    assert false == HumanEval.candidate({1, 2, \"4\"})\n    assert true == HumanEval.candidate({3, 2, 1, 4, 5})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_223_is_majority", "prompt": "# Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n\ndefmodule HumanEval do\n  def candidate(arr, n, x), do: is_majority(arr, n, x)\n  def is_majority(arr, n, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_majority' do\n    assert true == HumanEval.candidate([1, 2, 3, 3, 3, 3, 10], 7, 3)\n    assert false == HumanEval.candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n    assert true == HumanEval.candidate([1, 1, 1, 2, 2], 5, 1)\n    assert false == HumanEval.candidate([1, 1, 2, 2], 5, 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "# Write an elixirthon function to count the number of set bits (binary digits with value 1) in a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: count_Set_Bits(n)\n  def count_Set_Bits(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Set_Bits' do\n    assert 1 == HumanEval.candidate(2)\n    assert 1 == HumanEval.candidate(4)\n    assert 2 == HumanEval.candidate(6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "# Write an elixirthon function to remove the characters which have odd index values of a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: odd_values_string(str)\n  def odd_values_string(str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_values_string' do\n    assert \"ace\" == HumanEval.candidate(\"abcdef\")\n    assert \"pto\" == HumanEval.candidate(\"python\")\n    assert \"dt\" == HumanEval.candidate(\"data\")\n    assert \"lms\" == HumanEval.candidate(\"lambs\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_227_min_of_three", "prompt": "# Write a function to find minimum of three numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: min_of_three(a, b, c)\n  def min_of_three(a, b, c) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_of_three' do\n    assert 0 == HumanEval.candidate(10, 20, 0)\n    assert 15 == HumanEval.candidate(19, 15, 18)\n    assert -30 == HumanEval.candidate(-10, -20, -30)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "# Write an elixirthon function to check whether all the bits are unset in the given range or not.\n\ndefmodule HumanEval do\n  def candidate(n, l, r), do: all_Bits_Set_In_The_Given_Range(n, l, r)\n  def all_Bits_Set_In_The_Given_Range(n, l, r) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_Bits_Set_In_The_Given_Range' do\n    assert true == HumanEval.candidate(4, 1, 2)\n    assert true == HumanEval.candidate(17, 2, 4)\n    assert false == HumanEval.candidate(39, 4, 6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "# Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: re_arrange_array(arr, n)\n  def re_arrange_array(arr, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 're_arrange_array' do\n    assert [-1, -3, -7, 4, 5, 6, 2, 8, 9] == HumanEval.candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n    assert [-14, -26, 12, 13, 15] == HumanEval.candidate([12, -14, -26, 13, 15], 5)\n    assert [-42, -39, -78, 10, 24, 36, 85] == HumanEval.candidate([10, 24, 36, -42, -39, -78, 85], 7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_230_replace_blank", "prompt": "# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndefmodule HumanEval do\n  def candidate(str1, char), do: replace_blank(str1, char)\n  def replace_blank(str1, char) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_blank' do\n    assert \"hello@people\" == HumanEval.candidate(\"hello people\", \"@\")\n    assert \"python$program$language\" == HumanEval.candidate(\"python program language\", \"$\")\n    assert \"blank-space\" == HumanEval.candidate(\"blank space\", \"-\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_234_volume_cube", "prompt": "# Write a function to find the volume of a cube given its side length.\n\ndefmodule HumanEval do\n  def candidate(l), do: volume_cube(l)\n  def volume_cube(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'volume_cube' do\n    assert 27 == HumanEval.candidate(3)\n    assert 8 == HumanEval.candidate(2)\n    assert 125 == HumanEval.candidate(5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_237_check_occurences", "prompt": "# Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: check_occurences(test_list)\n  def check_occurences(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_occurences' do\n    assert %{{1, 3} => 2, {2, 5} => 2, {3, 6} => 1} == HumanEval.candidate([{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}])\n    assert %{{2, 4} => 2, {3, 6} => 2, {4, 7} => 1} == HumanEval.candidate([{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}])\n    assert %{{2, 13} => 1, {11, 23} => 1, {12, 25} => 2, {16, 23} => 1} == HumanEval.candidate([{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "# Write an elixirthon function to count the number of non-empty substrings of a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: number_of_substrings(str)\n  def number_of_substrings(str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'number_of_substrings' do\n    assert 6 == HumanEval.candidate(\"abc\")\n    assert 10 == HumanEval.candidate(\"abcd\")\n    assert 15 == HumanEval.candidate(\"abcde\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndefmodule HumanEval do\n  def candidate(m, n), do: get_total_number_of_sequences(m, n)\n  def get_total_number_of_sequences(m, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_total_number_of_sequences' do\n    assert 4 == HumanEval.candidate(10, 4)\n    assert 6 == HumanEval.candidate(5, 2)\n    assert 84 == HumanEval.candidate(16, 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_240_replace_list", "prompt": "# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: replace_list(list1, list2)\n  def replace_list(list1, list2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_list' do\n    assert [1, 3, 5, 7, 9, 2, 4, 6, 8] == HumanEval.candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n    assert [1, 2, 3, 4, 5, 6, 7, 8] == HumanEval.candidate([1, 2, 3, 4, 5], [5, 6, 7, 8])\n    assert [\"red\", \"blue\", \"yellow\"] == HumanEval.candidate([\"red\", \"blue\", \"green\"], [\"yellow\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_242_count_charac", "prompt": "# Write a function to count the total number of characters in a string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: count_charac(str1)\n  def count_charac(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_charac' do\n    assert 18 == HumanEval.candidate(\"python programming\")\n    assert 8 == HumanEval.candidate(\"language\")\n    assert 5 == HumanEval.candidate(\"words\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "# Write an elixirthon function to find the next perfect square greater than a given number.\n\ndefmodule HumanEval do\n  def candidate(N), do: next_Perfect_Square(N)\n  def next_Perfect_Square(N) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_Perfect_Square' do\n    assert 36 == HumanEval.candidate(35)\n    assert 9 == HumanEval.candidate(6)\n    assert 16 == HumanEval.candidate(9)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_245_max_sum", "prompt": "# Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_sum(arr)\n  def max_sum(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sum' do\n    assert 194 == HumanEval.candidate([1, 15, 51, 45, 33, 100, 12, 18, 9])\n    assert 210 == HumanEval.candidate([80, 60, 30, 40, 20, 10])\n    assert 138 == HumanEval.candidate([2, 3, 14, 16, 21, 23, 29, 30])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_247_lps", "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: lps(str)\n  def lps(str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lps' do\n    assert 5 == HumanEval.candidate(\"TENS FOR TENS\")\n    assert 7 == HumanEval.candidate(\"CARDIO FOR CARDS\")\n    assert 9 == HumanEval.candidate(\"PART OF THE JOURNEY IS PART\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_249_intersection_array", "prompt": "# Write a function to find the intersection of two lists.\n\ndefmodule HumanEval do\n  def candidate(array_nums1, array_nums2), do: intersection_array(array_nums1, array_nums2)\n  def intersection_array(array_nums1, array_nums2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'intersection_array' do\n    assert [1, 2, 8, 9] == HumanEval.candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n    assert [3, 5, 7, 9] == HumanEval.candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n    assert [10] == HumanEval.candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_250_count_X", "prompt": "# Write an elixirthon function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\ndefmodule HumanEval do\n  def candidate(tup, x), do: count_X(tup, x)\n  def count_X(tup, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_X' do\n    assert 0 == HumanEval.candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n    assert 3 == HumanEval.candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n    assert 4 == HumanEval.candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_251_insert_element", "prompt": "# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndefmodule HumanEval do\n  def candidate(list, element), do: insert_element(list, element)\n  def insert_element(list, element) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'insert_element' do\n    assert [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"] == HumanEval.candidate([\"Red\", \"Green\", \"Black\"], \"c\")\n    assert [\"program\", \"python\", \"program\", \"java\"] == HumanEval.candidate([\"python\", \"java\"], \"program\")\n    assert [\"laugh\", \"happy\", \"laugh\", \"sad\"] == HumanEval.candidate([\"happy\", \"sad\"], \"laugh\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_252_convert", "prompt": "# Write an elixirthon function to convert complex numbers to polar coordinates.\n\ndefmodule HumanEval do\n  def candidate(numbers), do: convert(numbers)\n  def convert(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'convert' do\n    assert {1.0, 0.0} == HumanEval.candidate(1)\n    assert {4.0, 0.0} == HumanEval.candidate(4)\n    assert {5.0, 0.0} == HumanEval.candidate(5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_253_count_integer", "prompt": "# Write an elixirthon function that returns the number of integer elements in a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: count_integer(list1)\n  def count_integer(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_integer' do\n    assert 2 == HumanEval.candidate([1, 2, \"abc\", 1.2])\n    assert 3 == HumanEval.candidate([1, 2, 3])\n    assert 2 == HumanEval.candidate([1, 1.2, 4, 5.1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\ndefmodule HumanEval do\n  def candidate(l, n), do: combinations_colors(l, n)\n  def combinations_colors(l, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'combinations_colors' do\n    assert [[\"Red\"], [\"Green\"], [\"Blue\"]] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\"], 1)\n    assert [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\"], 2)\n    assert [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\"], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "# Write an elixirthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndefmodule HumanEval do\n  def candidate(n), do: count_Primes_nums(n)\n  def count_Primes_nums(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Primes_nums' do\n    assert 2 == HumanEval.candidate(5)\n    assert 4 == HumanEval.candidate(10)\n    assert 25 == HumanEval.candidate(100)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "# Write a function that takes in two numbers and returns a list with the second number and then the first number.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: swap_numbers(a, b)\n  def swap_numbers(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'swap_numbers' do\n    assert [20, 10] == HumanEval.candidate(10, 20)\n    assert [17, 15] == HumanEval.candidate(15, 17)\n    assert [200, 100] == HumanEval.candidate(100, 200)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "# Write a function to maximize the given two lists.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: maximize_elements(test_tup1, test_tup2)\n  def maximize_elements(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maximize_elements' do\n    assert [[6, 7], [4, 9], [2, 9], [7, 10]] == HumanEval.candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    assert [[7, 8], [5, 10], [3, 10], [8, 11]] == HumanEval.candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    assert [[8, 9], [6, 11], [4, 11], [9, 12]] == HumanEval.candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_260_newman_prime", "prompt": "# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndefmodule HumanEval do\n  def candidate(n), do: newman_prime(n)\n  def newman_prime(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'newman_prime' do\n    assert 7 == HumanEval.candidate(3)\n    assert 17 == HumanEval.candidate(4)\n    assert 41 == HumanEval.candidate(5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_261_division_elements", "prompt": "# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: division_elements(test_tup1, test_tup2)\n  def division_elements(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'division_elements' do\n    assert {2, 2, 2, 3} == HumanEval.candidate({10, 4, 6, 9}, {5, 2, 3, 3})\n    assert {2, 2, 2, 4} == HumanEval.candidate({12, 6, 8, 16}, {6, 3, 4, 4})\n    assert {4, 2, 6, 2} == HumanEval.candidate({20, 14, 36, 18}, {5, 7, 6, 9})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndefmodule HumanEval do\n  def candidate(list1, L), do: split_two_parts(list1, L)\n  def split_two_parts(list1, L) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split_two_parts' do\n    assert {[1, 1, 2], [3, 4, 4, 5, 1]} == HumanEval.candidate([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    assert {[\"a\", \"b\"], [\"c\", \"d\"]} == HumanEval.candidate([\"a\", \"b\", \"c\", \"d\"], 2)\n    assert {[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]} == HumanEval.candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_264_dog_age", "prompt": "# Write a function to calculate a dog's age in dog's years.\n\ndefmodule HumanEval do\n  def candidate(h_age), do: dog_age(h_age)\n  def dog_age(h_age) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'dog_age' do\n    assert 61 == HumanEval.candidate(12)\n    assert 73 == HumanEval.candidate(15)\n    assert 109 == HumanEval.candidate(24)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_265_list_split", "prompt": "# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndefmodule HumanEval do\n  def candidate(S, step), do: list_split(S, step)\n  def list_split(S, step) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'list_split' do\n    assert [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]] == HumanEval.candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3)\n    assert [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n    assert [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]] == HumanEval.candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "# Write a function to find the lateral surface area of a cube given its side length.\n\ndefmodule HumanEval do\n  def candidate(l), do: lateralsurface_cube(l)\n  def lateralsurface_cube(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lateralsurface_cube' do\n    assert 100 == HumanEval.candidate(5)\n    assert 324 == HumanEval.candidate(9)\n    assert 400 == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_267_square_Sum", "prompt": "# Write an elixirthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: square_Sum(n)\n  def square_Sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_Sum' do\n    assert 10 == HumanEval.candidate(2)\n    assert 35 == HumanEval.candidate(3)\n    assert 84 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_268_find_star_num", "prompt": "# Write a function to find the n'th star number.\n\ndefmodule HumanEval do\n  def candidate(n), do: find_star_num(n)\n  def find_star_num(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_star_num' do\n    assert 37 == HumanEval.candidate(3)\n    assert 73 == HumanEval.candidate(4)\n    assert 121 == HumanEval.candidate(5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_269_ascii_value", "prompt": "# Write a function to find the ascii value of a character.\n\ndefmodule HumanEval do\n  def candidate(k), do: ascii_value(k)\n  def ascii_value(k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'ascii_value' do\n    assert 65 == HumanEval.candidate(\"A\")\n    assert 82 == HumanEval.candidate(\"R\")\n    assert 83 == HumanEval.candidate(\"S\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "# Write an elixirthon function to find the sum of even numbers at even positions of a list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: sum_even_and_even_index(arr)\n  def sum_even_and_even_index(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_even_and_even_index' do\n    assert 30 == HumanEval.candidate([5, 6, 12, 1, 18, 8])\n    assert 26 == HumanEval.candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18])\n    assert 12 == HumanEval.candidate([5, 6, 12, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "# Write an elixirthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndefmodule HumanEval do\n  def candidate(n), do: even_Power_Sum(n)\n  def even_Power_Sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_Power_Sum' do\n    assert 1056 == HumanEval.candidate(2)\n    assert 8832 == HumanEval.candidate(3)\n    assert 32 == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_272_rear_extract", "prompt": "# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: rear_extract(test_list)\n  def rear_extract(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rear_extract' do\n    assert [21, 20, 19] == HumanEval.candidate([{1, \"Rash\", 21}, {2, \"Varsha\", 20}, {3, \"Kil\", 19}])\n    assert [36, 25, 45] == HumanEval.candidate([{1, \"Sai\", 36}, {2, \"Ayesha\", 25}, {3, \"Salman\", 45}])\n    assert [14, 36, 56] == HumanEval.candidate([{1, \"Sudeep\", 14}, {2, \"Vandana\", 36}, {3, \"Dawood\", 56}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_273_substract_elements", "prompt": "# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: substract_elements(test_tup1, test_tup2)\n  def substract_elements(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'substract_elements' do\n    assert {8, -1, -13} == HumanEval.candidate({10, 4, 5}, {2, 5, 18})\n    assert {-13, -43, -13} == HumanEval.candidate({11, 2, 3}, {24, 45, 16})\n    assert {-3, 7, -3} == HumanEval.candidate({7, 18, 9}, {10, 11, 12})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "# Write an elixirthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndefmodule HumanEval do\n  def candidate(n), do: even_binomial_Coeff_Sum(n)\n  def even_binomial_Coeff_Sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_binomial_Coeff_Sum' do\n    assert 8 == HumanEval.candidate(4)\n    assert 32 == HumanEval.candidate(6)\n    assert 2 == HumanEval.candidate(2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_277_dict_filter", "prompt": "# Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\n\ndefmodule HumanEval do\n  def candidate(dict, n), do: dict_filter(dict, n)\n  def dict_filter(dict, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'dict_filter' do\n    assert %{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190} == HumanEval.candidate(%{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170)\n    assert %{\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190} == HumanEval.candidate(%{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180)\n    assert %{\"Pierre Cox\" => 190} == HumanEval.candidate(%{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "# Write a function to find the number of elements that occurs before the list element in the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: count_first_elements(test_tup)\n  def count_first_elements(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_first_elements' do\n    assert 3 == HumanEval.candidate([1, 5, 7, {4, 6}, 10])\n    assert 2 == HumanEval.candidate([2, 9, {5, 7}, 11])\n    assert 4 == HumanEval.candidate([11, 15, 5, 8, {2, 3}, 8])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "# Write a function to find the nth decagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_num_decagonal(n)\n  def is_num_decagonal(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_num_decagonal' do\n    assert 27 == HumanEval.candidate(3)\n    assert 175 == HumanEval.candidate(7)\n    assert 370 == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_280_sequential_search", "prompt": "# Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n\ndefmodule HumanEval do\n  def candidate(dlist, item), do: sequential_search(dlist, item)\n  def sequential_search(dlist, item) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sequential_search' do\n    assert {true, 3} == HumanEval.candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n    assert {true, 7} == HumanEval.candidate([12, 32, 45, 62, 35, 47, 44, 61], 61)\n    assert {true, 6} == HumanEval.candidate([9, 10, 17, 19, 22, 39, 48, 56], 48)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_281_all_unique", "prompt": "# Write an elixirthon function to check if the elements of a given list are unique or not.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: all_unique(test_list)\n  def all_unique(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_unique' do\n    assert true == HumanEval.candidate([1, 2, 3])\n    assert false == HumanEval.candidate([1, 2, 1, 2])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_282_sub_list", "prompt": "# Write a function to subtract two lists element-wise.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2), do: sub_list(nums1, nums2)\n  def sub_list(nums1, nums2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sub_list' do\n    assert [-3, -3, -3] == HumanEval.candidate([1, 2, 3], [4, 5, 6])\n    assert [-2, -2] == HumanEval.candidate([1, 2], [3, 4])\n    assert [40, 50] == HumanEval.candidate([90, 120], [50, 70])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_283_validate", "prompt": "# Write an elixirthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndefmodule HumanEval do\n  def candidate(n), do: validate(n)\n  def validate(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'validate' do\n    assert true == HumanEval.candidate(1234)\n    assert false == HumanEval.candidate(51241)\n    assert true == HumanEval.candidate(321)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_284_check_element", "prompt": "# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndefmodule HumanEval do\n  def candidate(list, element), do: check_element(list, element)\n  def check_element(list, element) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_element' do\n    assert false == HumanEval.candidate([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n    assert false == HumanEval.candidate([1, 2, 3, 4], 7)\n    assert true == HumanEval.candidate([\"green\", \"green\", \"green\", \"green\"], \"green\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_two_three(text)\n  def text_match_two_three(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_two_three' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abbbba\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "# Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n\ndefmodule HumanEval do\n  def candidate(a, n, k), do: max_sub_array_sum_repeated(a, n, k)\n  def max_sub_array_sum_repeated(a, n, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sub_array_sum_repeated' do\n    assert 30 == HumanEval.candidate([10, 20, -30, -1], 4, 3)\n    assert 59 == HumanEval.candidate([-1, 10, 20], 3, 2)\n    assert -1 == HumanEval.candidate([-1, -2, -3], 3, 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_287_square_Sum", "prompt": "# Write an elixirthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: square_Sum(n)\n  def square_Sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_Sum' do\n    assert 20 == HumanEval.candidate(2)\n    assert 56 == HumanEval.candidate(3)\n    assert 120 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_290_max_length", "prompt": "# Write a function to find the list of maximum length in a list of lists.\n\ndefmodule HumanEval do\n  def candidate(list1), do: max_length(list1)\n  def max_length(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_length' do\n    assert {3, [13, 15, 17]} == HumanEval.candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    assert {4, [10, 12, 14, 15]} == HumanEval.candidate([[1], [5, 7], [10, 12, 14, 15]])\n    assert {3, [15, 20, 25]} == HumanEval.candidate([[5], [15, 20, 25]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndefmodule HumanEval do\n  def candidate(n, k), do: count_no_of_ways(n, k)\n  def count_no_of_ways(n, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_no_of_ways' do\n    assert 16 == HumanEval.candidate(2, 4)\n    assert 6 == HumanEval.candidate(3, 2)\n    assert 228 == HumanEval.candidate(4, 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_292_find", "prompt": "# Write an elixirthon function to find quotient of two numbers (rounded down to the nearest integer).\n\ndefmodule HumanEval do\n  def candidate(n, m), do: find(n, m)\n  def find(n, m) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find' do\n    assert 3 == HumanEval.candidate(10, 3)\n    assert 2 == HumanEval.candidate(4, 2)\n    assert 4 == HumanEval.candidate(20, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "# Write a function to find the third side of a right angled triangle.\n\ndefmodule HumanEval do\n  def candidate(w, h), do: otherside_rightangle(w, h)\n  def otherside_rightangle(w, h) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'otherside_rightangle' do\n    assert 10.63014581273465 == HumanEval.candidate(7, 8)\n    assert 5 == HumanEval.candidate(3, 4)\n    assert 16.55294535724685 == HumanEval.candidate(7, 15)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_294_max_val", "prompt": "# Write a function to find the maximum value in a given heterogeneous list.\n\ndefmodule HumanEval do\n  def candidate(listval), do: max_val(listval)\n  def max_val(listval) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_val' do\n    assert 5 == HumanEval.candidate([\"Python\", 3, 2, 4, 5, \"version\"])\n    assert 25 == HumanEval.candidate([\"Python\", 15, 20, 25])\n    assert 50 == HumanEval.candidate([\"Python\", 30, 20, 40, 50, \"version\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_295_sum_div", "prompt": "# Write a function to return the sum of all divisors of a number.\n\ndefmodule HumanEval do\n  def candidate(number), do: sum_div(number)\n  def sum_div(number) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_div' do\n    assert 7 == HumanEval.candidate(8)\n    assert 16 == HumanEval.candidate(12)\n    assert 1 == HumanEval.candidate(7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "# Write an elixirthon function to count inversions in a list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: get_Inv_Count(arr)\n  def get_Inv_Count(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_Inv_Count' do\n    assert 5 == HumanEval.candidate([1, 20, 6, 4, 5])\n    assert 1 == HumanEval.candidate([1, 2, 1])\n    assert 3 == HumanEval.candidate([1, 2, 5, 6, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_297_flatten_list", "prompt": "# Write a function to flatten a given nested list structure.\n\ndefmodule HumanEval do\n  def candidate(list1), do: flatten_list(list1)\n  def flatten_list(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'flatten_list' do\n    assert [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120] == HumanEval.candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    assert [10, 20, 40, 30, 56, 25, 10, 20, 33, 40] == HumanEval.candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    assert [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9] == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "# Write a function to calculate the maximum aggregate from the list of tuples.\n\ndefmodule HumanEval do\n  def candidate(stdata), do: max_aggregate(stdata)\n  def max_aggregate(stdata) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_aggregate' do\n    assert {\"Juan Whelan\", 212} == HumanEval.candidate([{\"Juan Whelan\", 90}, {\"Sabah Colley\", 88}, {\"Peter Nichols\", 7}, {\"Juan Whelan\", 122}, {\"Sabah Colley\", 84}])\n    assert {\"Juan Whelan\", 72} == HumanEval.candidate([{\"Juan Whelan\", 50}, {\"Sabah Colley\", 48}, {\"Peter Nichols\", 37}, {\"Juan Whelan\", 22}, {\"Sabah Colley\", 14}])\n    assert {\"Sabah Colley\", 70} == HumanEval.candidate([{\"Juan Whelan\", 10}, {\"Sabah Colley\", 20}, {\"Peter Nichols\", 30}, {\"Juan Whelan\", 40}, {\"Sabah Colley\", 50}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_304_find_Element", "prompt": "# Write an elixirthon function to find element at a given index after number of rotations.\n\ndefmodule HumanEval do\n  def candidate(arr, ranges, rotations, index), do: find_Element(arr, ranges, rotations, index)\n  def find_Element(arr, ranges, rotations, index) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Element' do\n    assert 3 == HumanEval.candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n    assert 3 == HumanEval.candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n    assert 1 == HumanEval.candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_305_start_withp", "prompt": "# Write a function to return two words from a list of words starting with letter 'p'.\n\ndefmodule HumanEval do\n  def candidate(words), do: start_withp(words)\n  def start_withp(words) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'start_withp' do\n    assert {\"Python\", \"PHP\"} == HumanEval.candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n    assert {\"Python\", \"Programming\"} == HumanEval.candidate([\"Python Programming\", \"Java Programming\"])\n    assert {\"Pqrst\", \"Pqr\"} == HumanEval.candidate([\"Pqrst Pqr\", \"qrstuv\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndefmodule HumanEval do\n  def candidate(a, n, index, k), do: max_sum_increasing_subseq(a, n, index, k)\n  def max_sum_increasing_subseq(a, n, index, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sum_increasing_subseq' do\n    assert 11 == HumanEval.candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n    assert 7 == HumanEval.candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n    assert 71 == HumanEval.candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_308_large_product", "prompt": "# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2, N), do: large_product(nums1, nums2, N)\n  def large_product(nums1, nums2, N) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'large_product' do\n    assert [60, 54, 50] == HumanEval.candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n    assert [60, 54, 50, 48] == HumanEval.candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n    assert [60, 54, 50, 48, 45] == HumanEval.candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_309_maximum", "prompt": "# Write an elixirthon function to find the maximum of two numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: maximum(a, b)\n  def maximum(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maximum' do\n    assert 10 == HumanEval.candidate(5, 10)\n    assert -1 == HumanEval.candidate(-1, -2)\n    assert 9 == HumanEval.candidate(9, 7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "# Write a function to convert a given string to a list of characters.\n\ndefmodule HumanEval do\n  def candidate(str1), do: string_to_tuple(str1)\n  def string_to_tuple(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_to_tuple' do\n    assert [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"] == HumanEval.candidate(\"python 3.0\")\n    assert [\"i\", \"t\", \"e\", \"m\", \"1\"] == HumanEval.candidate(\"item1\")\n    assert [\"1\", \"5\", \".\", \"1\", \"0\"] == HumanEval.candidate(\"15.10\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "# Write an elixirthon function to find the highest power of 2 that is less than or equal to n.\n\ndefmodule HumanEval do\n  def candidate(n), do: highest_Power_of_2(n)\n  def highest_Power_of_2(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'highest_Power_of_2' do\n    assert 8 == HumanEval.candidate(10)\n    assert 16 == HumanEval.candidate(19)\n    assert 32 == HumanEval.candidate(32)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_389_find_lucas", "prompt": "# Write a function to find the n'th lucas number.\n\ndefmodule HumanEval do\n  def candidate(n), do: find_lucas(n)\n  def find_lucas(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_lucas' do\n    assert 76 == HumanEval.candidate(9)\n    assert 7 == HumanEval.candidate(4)\n    assert 4 == HumanEval.candidate(3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_390_add_string", "prompt": "# Write a function to apply a given format string to all of the elements in a list.\n\ndefmodule HumanEval do\n  def candidate(list_, string), do: add_string(list_, string)\n  def add_string(list_, string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_string' do\n    assert [\"temp1\", \"temp2\", \"temp3\", \"temp4\"] == HumanEval.candidate([1, 2, 3, 4], \"temp{0}\")\n    assert [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"] == HumanEval.candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n    assert [\"string5\", \"string6\", \"string7\", \"string8\"] == HumanEval.candidate([5, 6, 7, 8], \"string{0}\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "# Write a function to convert more than one list to nested map.\n\ndefmodule HumanEval do\n  def candidate(l1, l2, l3), do: convert_list_dictionary(l1, l2, l3)\n  def convert_list_dictionary(l1, l2, l3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'convert_list_dictionary' do\n    assert [%{\"S001\" => %{\"Adina Park\" => 85}}, %{\"S002\" => %{\"Leyton Marsh\" => 98}}, %{\"S003\" => %{\"Duncan Boyle\" => 89}}, %{\"S004\" => %{\"Saim Richards\" => 92}}] == HumanEval.candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n    assert [%{\"abc\" => %{\"python\" => 100}}, %{\"def\" => %{\"program\" => 200}}, %{\"ghi\" => %{\"language\" => 300}}, %{\"jkl\" => %{\"programs\" => 400}}] == HumanEval.candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n    assert [%{\"A1\" => %{\"java\" => 10}}, %{\"A2\" => %{\"C\" => 20}}, %{\"A3\" => %{\"C++\" => 30}}, %{\"A4\" => %{\"DBMS\" => 40}}] == HumanEval.candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndefmodule HumanEval do\n  def candidate(n), do: get_max_sum(n)\n  def get_max_sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_max_sum' do\n    assert 106 == HumanEval.candidate(60)\n    assert 12 == HumanEval.candidate(10)\n    assert 2 == HumanEval.candidate(2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_393_max_length_list", "prompt": "# Write a function to find the list with maximum length.\n\ndefmodule HumanEval do\n  def candidate(input_list), do: max_length_list(input_list)\n  def max_length_list(input_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_length_list' do\n    assert {3, [13, 15, 17]} == HumanEval.candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    assert {5, [1, 2, 3, 4, 5]} == HumanEval.candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n    assert {4, [6, 7, 8, 9]} == HumanEval.candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_394_check_distinct", "prompt": "# Write a function to check if given list contains no duplicates.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: check_distinct(test_tup)\n  def check_distinct(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_distinct' do\n    assert false == HumanEval.candidate([1, 4, 5, 6, 1, 4])\n    assert true == HumanEval.candidate([1, 4, 5, 6])\n    assert true == HumanEval.candidate([2, 3, 4, 5, 6])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "# Write an elixirthon function to find the first non-repeated character in a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: first_non_repeating_character(str1)\n  def first_non_repeating_character(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_non_repeating_character' do\n    assert nil == HumanEval.candidate(\"abcabc\")\n    assert \"a\" == HumanEval.candidate(\"abc\")\n    assert \"c\" == HumanEval.candidate(\"ababc\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_396_check_char", "prompt": "# Write a function to check whether the given string starts and ends with the same character or not.\n\ndefmodule HumanEval do\n  def candidate(string), do: check_char(string)\n  def check_char(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_char' do\n    assert \"Valid\" == HumanEval.candidate(\"abba\")\n    assert \"Valid\" == HumanEval.candidate(\"a\")\n    assert \"Invalid\" == HumanEval.candidate(\"abcd\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_397_median_numbers", "prompt": "# Write a function to find the median of three numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: median_numbers(a, b, c)\n  def median_numbers(a, b, c) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'median_numbers' do\n    assert 55.0 == HumanEval.candidate(25, 55, 65)\n    assert 20.0 == HumanEval.candidate(20, 10, 30)\n    assert 45.0 == HumanEval.candidate(15, 45, 75)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "# Write a function to compute the sum of digits of each number of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: sum_of_digits(nums)\n  def sum_of_digits(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_of_digits' do\n    assert 14 == HumanEval.candidate([10, 2, 56])\n    assert 19 == HumanEval.candidate([[10, 20, 4, 5, \"b\", 70, \"a\"]])\n    assert 19 == HumanEval.candidate([10, 20, -4, 5, -70])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "# Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: bitwise_xor(test_tup1, test_tup2)\n  def bitwise_xor(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bitwise_xor' do\n    assert {15, 6, 5, 10} == HumanEval.candidate({10, 4, 6, 9}, {5, 2, 3, 3})\n    assert {13, 6, 3, 14} == HumanEval.candidate({11, 5, 7, 10}, {6, 3, 4, 4})\n    assert {11, 2, 13, 13} == HumanEval.candidate({12, 6, 8, 11}, {7, 4, 5, 6})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_400_extract_freq", "prompt": "# Write a function to extract the number of unique tuples in the given list.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: extract_freq(test_list)\n  def extract_freq(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_freq' do\n    assert 3 == HumanEval.candidate([{3, 4}, {1, 2}, {4, 3}, {5, 6}])\n    assert 4 == HumanEval.candidate([{4, 15}, {2, 3}, {5, 4}, {6, 7}])\n    assert 4 == HumanEval.candidate([{5, 16}, {2, 3}, {6, 5}, {6, 9}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "# Write a function to perform index wise addition of list elements in the given two nested lists.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: add_nested_tuples(test_tup1, test_tup2)\n  def add_nested_tuples(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_nested_tuples' do\n    assert [[7, 10], [7, 14], [3, 10], [8, 13]] == HumanEval.candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    assert [[9, 12], [9, 16], [5, 12], [10, 15]] == HumanEval.candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    assert [[11, 14], [11, 18], [7, 14], [12, 17]] == HumanEval.candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_404_minimum", "prompt": "# Write an elixirthon function to find the minimum of two numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: minimum(a, b)\n  def minimum(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'minimum' do\n    assert 1 == HumanEval.candidate(1, 2)\n    assert -5 == HumanEval.candidate(-5, -4)\n    assert 0 == HumanEval.candidate(0, 0)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "# Write a function to check whether an element exists within a tuple.\n\ndefmodule HumanEval do\n  def candidate(tuplex, tuple1), do: check_tuplex(tuplex, tuple1)\n  def check_tuplex(tuplex, tuple1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_tuplex' do\n    assert true == HumanEval.candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n    assert false == HumanEval.candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\")\n    assert true == HumanEval.candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_406_find_Parity", "prompt": "# Write an elixirthon function to find whether the parity of a given number is odd.\n\ndefmodule HumanEval do\n  def candidate(x), do: find_Parity(x)\n  def find_Parity(x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Parity' do\n    assert false == HumanEval.candidate(12)\n    assert true == HumanEval.candidate(7)\n    assert false == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: rearrange_bigger(n)\n  def rearrange_bigger(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rearrange_bigger' do\n    assert 21 == HumanEval.candidate(12)\n    assert false == HumanEval.candidate(10)\n    assert 120 == HumanEval.candidate(102)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2, k), do: k_smallest_pairs(nums1, nums2, k)\n  def k_smallest_pairs(nums1, nums2, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'k_smallest_pairs' do\n    assert [[1, 2], [1, 4]] == HumanEval.candidate([1, 3, 7], [2, 4, 6], 2)\n    assert [[1, 2]] == HumanEval.candidate([1, 3, 7], [2, 4, 6], 1)\n    assert [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]] == HumanEval.candidate([1, 3, 7], [2, 4, 6], 7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "# Write a function to find the minimum product from the pairs of tuples within a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: min_product_tuple(list1)\n  def min_product_tuple(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_product_tuple' do\n    assert 8 == HumanEval.candidate([{2, 7}, {2, 6}, {1, 8}, {4, 9}])\n    assert 30 == HumanEval.candidate([{10, 20}, {15, 2}, {5, 10}])\n    assert 100 == HumanEval.candidate([{11, 44}, {10, 15}, {20, 5}, {12, 9}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_410_min_val", "prompt": "# Write a function to find the minimum value in a given heterogeneous list.\n\ndefmodule HumanEval do\n  def candidate(listval), do: min_val(listval)\n  def min_val(listval) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_val' do\n    assert 2 == HumanEval.candidate([\"Python\", 3, 2, 4, 5, \"version\"])\n    assert 15 == HumanEval.candidate([\"Python\", 15, 20, 25])\n    assert 20 == HumanEval.candidate([\"Python\", 30, 20, 40, 50, \"version\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "# Write a function to convert the given snake case string to camel case string.\n\ndefmodule HumanEval do\n  def candidate(word), do: snake_to_camel(word)\n  def snake_to_camel(word) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'snake_to_camel' do\n    assert \"AndroidTv\" == HumanEval.candidate(\"android_tv\")\n    assert \"GooglePixel\" == HumanEval.candidate(\"google_pixel\")\n    assert \"AppleWatch\" == HumanEval.candidate(\"apple_watch\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_412_remove_odd", "prompt": "# Write an elixirthon function to remove odd numbers from a given list.\n\ndefmodule HumanEval do\n  def candidate(l), do: remove_odd(l)\n  def remove_odd(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_odd' do\n    assert [2] == HumanEval.candidate([1, 2, 3])\n    assert [2, 4, 6] == HumanEval.candidate([2, 4, 6])\n    assert [10, 20] == HumanEval.candidate([10, 20, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "# Write a function to extract the nth element from a given list of tuples.\n\ndefmodule HumanEval do\n  def candidate(list1, n), do: extract_nth_element(list1, n)\n  def extract_nth_element(list1, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_nth_element' do\n    assert [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"] == HumanEval.candidate([{\"Greyson Fulton\", 98, 99}, {\"Brady Kent\", 97, 96}, {\"Wyatt Knott\", 91, 94}, {\"Beau Turnbull\", 94, 98}], 0)\n    assert [99, 96, 94, 98] == HumanEval.candidate([{\"Greyson Fulton\", 98, 99}, {\"Brady Kent\", 97, 96}, {\"Wyatt Knott\", 91, 94}, {\"Beau Turnbull\", 94, 98}], 2)\n    assert [98, 97, 91, 94] == HumanEval.candidate([{\"Greyson Fulton\", 98, 99}, {\"Brady Kent\", 97, 96}, {\"Wyatt Knott\", 91, 94}, {\"Beau Turnbull\", 94, 98}], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_414_overlapping", "prompt": "# Write an elixirthon function to check whether any value in a sequence exists in a sequence or not.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: overlapping(list1, list2)\n  def overlapping(list1, list2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'overlapping' do\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    assert false == HumanEval.candidate([1, 2, 3], [4, 5, 6])\n    assert true == HumanEval.candidate([1, 4, 5], [1, 4, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_415_max_Product", "prompt": "# Write an elixirthon function to find a pair with highest product from a given list of integers.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_Product(arr)\n  def max_Product(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_Product' do\n    assert {7, 8} == HumanEval.candidate([1, 2, 3, 4, 7, 0, 8, 4])\n    assert {-4, -6} == HumanEval.candidate([0, -1, -2, -4, 5, 0, -6])\n    assert {2, 3} == HumanEval.candidate([1, 2, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_417_group_tuples", "prompt": "# Write a function to find common first element in given list of lists.\n\ndefmodule HumanEval do\n  def candidate(Input), do: group_tuples(Input)\n  def group_tuples(Input) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'group_tuples' do\n    assert [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]] == HumanEval.candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]])\n    assert [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]] == HumanEval.candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]])\n    assert [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]] == HumanEval.candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_418_Find_Max", "prompt": "# Write an elixirthon function to find the element of a list having maximum length.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Max(lst)\n  def Find_Max(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Max' do\n    assert [\"A\", \"B\", \"C\"] == HumanEval.candidate([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]])\n    assert [1, 2, 3] == HumanEval.candidate([[1], [1, 2], [1, 2, 3]])\n    assert [1, 5, 6, 1] == HumanEval.candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: round_and_sum(list1)\n  def round_and_sum(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'round_and_sum' do\n    assert 243 == HumanEval.candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n    assert 345 == HumanEval.candidate([5, 2, 9, 24.3, 29])\n    assert 513 == HumanEval.candidate([25.0, 56.7, 89.2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "# Write an elixirthon function to find the cube sum of first n even natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: cube_Sum(n)\n  def cube_Sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cube_Sum' do\n    assert 72 == HumanEval.candidate(2)\n    assert 288 == HumanEval.candidate(3)\n    assert 800 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "# Write a function to concatenate each element of tuple by the delimiter.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: concatenate_tuple(test_tup)\n  def concatenate_tuple(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'concatenate_tuple' do\n    assert \"ID-is-4-UTS\" == HumanEval.candidate({\"ID\", \"is\", 4, \"UTS\"})\n    assert \"QWE-is-4-RTY\" == HumanEval.candidate({\"QWE\", \"is\", 4, \"RTY\"})\n    assert \"ZEN-is-4-OP\" == HumanEval.candidate({\"ZEN\", \"is\", 4, \"OP\"})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "# Write an elixirthon function to find the average of cubes of first n natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: find_Average_Of_Cube(n)\n  def find_Average_Of_Cube(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Average_Of_Cube' do\n    assert 4.5 == HumanEval.candidate(2)\n    assert 12 == HumanEval.candidate(3)\n    assert 1 == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_424_extract_rear", "prompt": "# Write a function to extract only the rear index element of each string in the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tuple), do: extract_rear(test_tuple)\n  def extract_rear(test_tuple) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_rear' do\n    assert [\"s\", \"r\", \"s\"] == HumanEval.candidate({\"Mers\", \"for\", \"Vers\"})\n    assert [\"e\", \"r\", \"e\"] == HumanEval.candidate({\"Avenge\", \"for\", \"People\"})\n    assert [\"a\", \"t\", \"o\"] == HumanEval.candidate({\"Gotta\", \"get\", \"go\"})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "# Write a function to count the number of sublists containing a particular element.\n\ndefmodule HumanEval do\n  def candidate(list1, x), do: count_element_in_list(list1, x)\n  def count_element_in_list(list1, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_element_in_list' do\n    assert 3 == HumanEval.candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n    assert 3 == HumanEval.candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n    assert 1 == HumanEval.candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "# Write a function to filter odd numbers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: filter_oddnumbers(nums)\n  def filter_oddnumbers(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_oddnumbers' do\n    assert [1, 3, 5, 7, 9] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert [45, 67, 93] == HumanEval.candidate([10, 20, 45, 67, 84, 93])\n    assert [5, 7, 9, 3] == HumanEval.candidate([5, 7, 9, 8, 6, 4, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_427_change_date_format", "prompt": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndefmodule HumanEval do\n  def candidate(dt), do: change_date_format(dt)\n  def change_date_format(dt) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'change_date_format' do\n    assert \"02-01-2026\" == HumanEval.candidate(\"2026-01-02\")\n    assert \"13-11-2020\" == HumanEval.candidate(\"2020-11-13\")\n    assert \"26-04-2021\" == HumanEval.candidate(\"2021-04-26\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_428_shell_sort", "prompt": "# Write a function to sort the given list by using shell sort.\n\ndefmodule HumanEval do\n  def candidate(my_list), do: shell_sort(my_list)\n  def shell_sort(my_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'shell_sort' do\n    assert [2, 3, 4, 5, 12, 12, 23, 56, 81, 95] == HumanEval.candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    assert [22, 24, 34, 39, 68, 73, 87] == HumanEval.candidate([24, 22, 39, 34, 87, 73, 68])\n    assert [16, 30, 32, 74, 82, 83, 96] == HumanEval.candidate([32, 30, 16, 96, 82, 83, 74])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_429_and_tuples", "prompt": "# Write a function to extract the elementwise and tuples from the given two tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: and_tuples(test_tup1, test_tup2)\n  def and_tuples(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'and_tuples' do\n    assert {0, 0, 2, 1} == HumanEval.candidate({10, 4, 6, 9}, {5, 2, 3, 3})\n    assert {1, 2, 3, 0} == HumanEval.candidate({1, 2, 3, 4}, {5, 6, 7, 8})\n    assert {0, 9, 10, 0} == HumanEval.candidate({8, 9, 11, 12}, {7, 13, 14, 17})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "# Write a function to find the directrix of a parabola.\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: parabola_directrix(a, b, c)\n  def parabola_directrix(a, b, c) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'parabola_directrix' do\n    assert -198 == HumanEval.candidate(5, 3, 2)\n    assert -2336 == HumanEval.candidate(9, 8, 4)\n    assert -130 == HumanEval.candidate(2, 4, 6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_431_common_element", "prompt": "# Write a function that takes two lists and returns true if they have at least one common element.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: common_element(list1, list2)\n  def common_element(list1, list2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'common_element' do\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n    assert nil == HumanEval.candidate([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    assert true == HumanEval.candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "# Write a function to find the median length of a trapezium.\n\ndefmodule HumanEval do\n  def candidate(base1, base2, height), do: median_trapezium(base1, base2, height)\n  def median_trapezium(base1, base2, height) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'median_trapezium' do\n    assert 20 == HumanEval.candidate(15, 25, 35)\n    assert 15 == HumanEval.candidate(10, 20, 30)\n    assert 7.5 == HumanEval.candidate(6, 9, 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_433_check_greater", "prompt": "# Write a function to check whether the entered number is greater than the elements of the given list.\n\ndefmodule HumanEval do\n  def candidate(arr, number), do: check_greater(arr, number)\n  def check_greater(arr, number) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_greater' do\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5], 4)\n    assert true == HumanEval.candidate([2, 3, 4, 5, 6], 8)\n    assert true == HumanEval.candidate([9, 7, 4, 8, 6, 1], 11)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_434_text_match_one", "prompt": "# Write a function that matches a string that has an a followed by one or more b's.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_one(text)\n  def text_match_one(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_one' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abba\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_435_last_Digit", "prompt": "# Write an elixirthon function to find the last digit of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: last_Digit(n)\n  def last_Digit(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'last_Digit' do\n    assert 3 == HumanEval.candidate(123)\n    assert 5 == HumanEval.candidate(25)\n    assert 0 == HumanEval.candidate(30)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_436_neg_nos", "prompt": "# Write an elixirthon function to return the negative numbers in a list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: neg_nos(list1)\n  def neg_nos(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'neg_nos' do\n    assert [-1, -6] == HumanEval.candidate([-1, 4, 5, -6])\n    assert [-1, -2] == HumanEval.candidate([-1, -2, 3, 4])\n    assert [-7, -6] == HumanEval.candidate([-7, -6, 8, 9])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_437_remove_odd", "prompt": "# Write a function to remove odd characters in a string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: remove_odd(str1)\n  def remove_odd(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_odd' do\n    assert \"yhn\" == HumanEval.candidate(\"python\")\n    assert \"rga\" == HumanEval.candidate(\"program\")\n    assert \"agae\" == HumanEval.candidate(\"language\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "# Write a function to count bidirectional tuple pairs.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: count_bidirectional(test_list)\n  def count_bidirectional(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_bidirectional' do\n    assert 3 == HumanEval.candidate([{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}])\n    assert 2 == HumanEval.candidate([{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}])\n    assert 4 == HumanEval.candidate([{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "# Write a function to join a list of multiple integers into a single integer.\n\ndefmodule HumanEval do\n  def candidate(L), do: multiple_to_single(L)\n  def multiple_to_single(L) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiple_to_single' do\n    assert 113350 == HumanEval.candidate([11, 33, 50])\n    assert -123456 == HumanEval.candidate([-1, 2, 3, 4, 5, 6])\n    assert 10152025 == HumanEval.candidate([10, 15, 20, 25])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\n\ndefmodule HumanEval do\n  def candidate(text), do: find_adverb_position(text)\n  def find_adverb_position(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_adverb_position' do\n    assert {0, 7, \"clearly\"} == HumanEval.candidate(\"clearly!! we can see the sky\")\n    assert {0, 9, \"seriously\"} == HumanEval.candidate(\"seriously!! there are many roses\")\n    assert {0, 13, \"unfortunately\"} == HumanEval.candidate(\"unfortunately!! sita is going to home\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "# Write a function to find the surface area of a cube of a given size.\n\ndefmodule HumanEval do\n  def candidate(l), do: surfacearea_cube(l)\n  def surfacearea_cube(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'surfacearea_cube' do\n    assert 150 == HumanEval.candidate(5)\n    assert 54 == HumanEval.candidate(3)\n    assert 600 == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_442_positive_count", "prompt": "# Write a function to find the ration of positive numbers in a list of integers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: positive_count(nums)\n  def positive_count(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'positive_count' do\n    assert 0.54 == HumanEval.candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    assert 0.69 == HumanEval.candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    assert 0.56 == HumanEval.candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_443_largest_neg", "prompt": "# Write an elixirthon function to find the largest negative number from the given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: largest_neg(list1)\n  def largest_neg(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'largest_neg' do\n    assert -6 == HumanEval.candidate([1, 2, 3, -4, -6])\n    assert -9 == HumanEval.candidate([1, 2, 3, -8, -9])\n    assert -1 == HumanEval.candidate([1, 2, 3, 4, -1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "# Write a function to trim each list by k in the given lists.\n\ndefmodule HumanEval do\n  def candidate(test_list, K), do: trim_tuple(test_list, K)\n  def trim_tuple(test_list, K) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'trim_tuple' do\n    assert [[2], [9], [2], [2]] == HumanEval.candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)\n    assert [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]] == HumanEval.candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)\n    assert [[8, 4], [8, 12], [1, 7], [6, 9]] == HumanEval.candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "# Write a function to perform index wise multiplication of list elements in the given two lists.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: index_multiplication(test_tup1, test_tup2)\n  def index_multiplication(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'index_multiplication' do\n    assert [[6, 21], [12, 45], [2, 9], [7, 30]] == HumanEval.candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    assert [[14, 32], [20, 60], [6, 20], [16, 44]] == HumanEval.candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    assert [[24, 45], [30, 77], [12, 33], [27, 60]] == HumanEval.candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "# Write an elixirthon function to count the occurence of all elements of list in a tuple.\n\ndefmodule HumanEval do\n  def candidate(tup, lst), do: count_Occurrence(tup, lst)\n  def count_Occurrence(tup, lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Occurrence' do\n    assert 3 == HumanEval.candidate({\"a\", \"a\", \"c\", \"b\", \"d\"}, [\"a\", \"b\"])\n    assert 6 == HumanEval.candidate({1, 2, 3, 1, 4, 6, 7, 1, 4}, [1, 4, 7])\n    assert 2 == HumanEval.candidate({1, 2, 3, 4, 5, 6}, [1, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_447_cube_nums", "prompt": "# Write a function to find cubes of individual elements in a list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: cube_nums(nums)\n  def cube_nums(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cube_nums' do\n    assert [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert [1000, 8000, 27000] == HumanEval.candidate([10, 20, 30])\n    assert [1728, 3375] == HumanEval.candidate([12, 15])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_448_cal_sum", "prompt": "# Write a function to calculate the sum of perrin numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: cal_sum(n)\n  def cal_sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cal_sum' do\n    assert 49 == HumanEval.candidate(9)\n    assert 66 == HumanEval.candidate(10)\n    assert 88 == HumanEval.candidate(11)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_450_extract_string", "prompt": "# Write a function to extract specified size of strings from a given list of string values.\n\ndefmodule HumanEval do\n  def candidate(str, l), do: extract_string(str, l)\n  def extract_string(str, l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_string' do\n    assert [\"practice\", \"solution\"] == HumanEval.candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n    assert [\"Python\"] == HumanEval.candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n    assert [\"exercises\"] == HumanEval.candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "# Write a function to remove all whitespaces from the given string.\n\ndefmodule HumanEval do\n  def candidate(text1), do: remove_whitespaces(text1)\n  def remove_whitespaces(text1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_whitespaces' do\n    assert \"GoogleFlutter\" == HumanEval.candidate(\" Google    Flutter \")\n    assert \"GoogleDart\" == HumanEval.candidate(\" Google    Dart \")\n    assert \"iOSSwift\" == HumanEval.candidate(\" iOS    Swift \")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_452_loss_amount", "prompt": "# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndefmodule HumanEval do\n  def candidate(actual_cost, sale_amount), do: loss_amount(actual_cost, sale_amount)\n  def loss_amount(actual_cost, sale_amount) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'loss_amount' do\n    assert 0 == HumanEval.candidate(1500, 1200)\n    assert 100 == HumanEval.candidate(100, 200)\n    assert 3000 == HumanEval.candidate(2000, 5000)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "# Write an elixirthon function to find the sum of even factors of a number.\n\ndefmodule HumanEval do\n  def candidate(n), do: sumofFactors(n)\n  def sumofFactors(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sumofFactors' do\n    assert 26 == HumanEval.candidate(18)\n    assert 48 == HumanEval.candidate(30)\n    assert 8 == HumanEval.candidate(6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "# Write a function that matches a word containing 'z'.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_wordz(text)\n  def text_match_wordz(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_wordz' do\n    assert true == HumanEval.candidate(\"pythonz.\")\n    assert true == HumanEval.candidate(\"xyz.\")\n    assert false == HumanEval.candidate(\"  lang  .\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "# Write a function to check whether the given month number contains 31 days or not.\n\ndefmodule HumanEval do\n  def candidate(monthnum2), do: check_monthnumb_number(monthnum2)\n  def check_monthnumb_number(monthnum2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_monthnumb_number' do\n    assert true == HumanEval.candidate(5)\n    assert false == HumanEval.candidate(2)\n    assert false == HumanEval.candidate(6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "# Write a function to reverse each string in a given list of string values.\n\ndefmodule HumanEval do\n  def candidate(stringlist), do: reverse_string_list(stringlist)\n  def reverse_string_list(stringlist) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_string_list' do\n    assert [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n    assert [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"] == HumanEval.candidate([\"john\", \"amal\", \"joel\", \"george\"])\n    assert [\"kcaj\", \"nhoj\", \"yram\"] == HumanEval.candidate([\"jack\", \"john\", \"mary\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_457_Find_Min", "prompt": "# Write an elixirthon function to find the sublist having minimum length.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Min(lst)\n  def Find_Min(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Min' do\n    assert [1] == HumanEval.candidate([[1], [1, 2], [1, 2, 3]])\n    assert [1, 1] == HumanEval.candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n    assert [\"x\"] == HumanEval.candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "# Write a function to find the area of a rectangle.\n\ndefmodule HumanEval do\n  def candidate(l, b), do: rectangle_area(l, b)\n  def rectangle_area(l, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rectangle_area' do\n    assert 200 == HumanEval.candidate(10, 20)\n    assert 50 == HumanEval.candidate(10, 5)\n    assert 8 == HumanEval.candidate(4, 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "# Write a function to remove uppercase substrings from a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: remove_uppercase(str1)\n  def remove_uppercase(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_uppercase' do\n    assert \"cstyoravoitshos\" == HumanEval.candidate(\"cAstyoUrFavoRitETVshoWs\")\n    assert \"wtchheinerntrdo\" == HumanEval.candidate(\"wAtchTheinTernEtrAdIo\")\n    assert \"oiceachndreomendaion\" == HumanEval.candidate(\"VoicESeaRchAndreComMendaTionS\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_460_Extract", "prompt": "# Write an elixirthon function to get the first element of each sublist.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Extract(lst)\n  def Extract(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Extract' do\n    assert [1, 3, 6] == HumanEval.candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    assert [1, 4] == HumanEval.candidate([[1, 2, 3], [4, 5]])\n    assert [9, 1] == HumanEval.candidate([[9, 8, 1], [1, 2]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "# Write an elixirthon function to count the upper case characters in a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: upper_ctr(str)\n  def upper_ctr(str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'upper_ctr' do\n    assert 1 == HumanEval.candidate(\"PYthon\")\n    assert 1 == HumanEval.candidate(\"BigData\")\n    assert 0 == HumanEval.candidate(\"program\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_462_combinations_list", "prompt": "# Write a function to find all possible combinations of the elements of a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: combinations_list(list1)\n  def combinations_list(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'combinations_list' do\n    assert [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]] == HumanEval.candidate([\"orange\", \"red\", \"green\", \"blue\"])\n    assert [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]] == HumanEval.candidate([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"])\n    assert [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]] == HumanEval.candidate([\"red\", \"green\", \"black\", \"orange\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "# Write a function to find the maximum product sublist of the given list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_subarray_product(arr)\n  def max_subarray_product(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_subarray_product' do\n    assert 112 == HumanEval.candidate([1, -2, -3, 0, 7, -8, -2])\n    assert 180 == HumanEval.candidate([6, -3, -10, 0, 2])\n    assert 80 == HumanEval.candidate([-2, -40, 0, -2, -3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_464_check_value", "prompt": "# Write a function to check if all values are same in a map.\n\ndefmodule HumanEval do\n  def candidate(dict, n), do: check_value(dict, n)\n  def check_value(dict, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_value' do\n    assert false == HumanEval.candidate(%{\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 10)\n    assert true == HumanEval.candidate(%{\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 12)\n    assert false == HumanEval.candidate(%{\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_465_drop_empty", "prompt": "# Write a function to drop empty items from a given map.\n\ndefmodule HumanEval do\n  def candidate(dict1), do: drop_empty(dict1)\n  def drop_empty(dict1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'drop_empty' do\n    assert %{\"c1\" => \"Red\", \"c2\" => \"Green\"} == HumanEval.candidate(%{\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => nil})\n    assert %{\"c1\" => \"Red\"} == HumanEval.candidate(%{\"c1\" => \"Red\", \"c2\" => nil, \"c3\" => nil})\n    assert %{\"c2\" => \"Green\"} == HumanEval.candidate(%{\"c1\" => nil, \"c2\" => \"Green\", \"c3\" => nil})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_468_max_product", "prompt": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_product(arr)\n  def max_product(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_product' do\n    assert 3000 == HumanEval.candidate([3, 100, 4, 5, 150, 6])\n    assert 50265600 == HumanEval.candidate([4, 42, 55, 68, 80])\n    assert 2460 == HumanEval.candidate([10, 22, 9, 33, 21, 50, 41, 60])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: add_pairwise(test_tup)\n  def add_pairwise(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_pairwise' do\n    assert {6, 12, 15, 18} == HumanEval.candidate({1, 5, 7, 8, 10})\n    assert {8, 14, 17, 20} == HumanEval.candidate({2, 6, 8, 9, 11})\n    assert {10, 16, 19, 22} == HumanEval.candidate({3, 7, 9, 10, 12})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_471_find_remainder", "prompt": "# Write an elixirthon function to find the product of the list multiplication modulo n.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: find_remainder(arr, n)\n  def find_remainder(arr, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_remainder' do\n    assert 9 == HumanEval.candidate([100, 10, 5, 25, 35, 14], 11)\n    assert 0 == HumanEval.candidate([1, 1, 1], 1)\n    assert 0 == HumanEval.candidate([1, 2, 1], 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "# Write an elixirthon function to check whether the given list contains consecutive numbers or not.\n\ndefmodule HumanEval do\n  def candidate(l), do: check_Consecutive(l)\n  def check_Consecutive(l) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_Consecutive' do\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert false == HumanEval.candidate([1, 2, 3, 5, 6])\n    assert false == HumanEval.candidate([1, 2, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_474_replace_char", "prompt": "# Write a function to replace characters in a string.\n\ndefmodule HumanEval do\n  def candidate(str1, ch, newch), do: replace_char(str1, ch, newch)\n  def replace_char(str1, ch, newch) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_char' do\n    assert \"pollgon\" == HumanEval.candidate(\"polygon\", \"y\", \"l\")\n    assert \"aharaater\" == HumanEval.candidate(\"character\", \"c\", \"a\")\n    assert \"python\" == HumanEval.candidate(\"python\", \"l\", \"a\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_475_sort_counter", "prompt": "# Write a function to sort a map by value.\n\ndefmodule HumanEval do\n  def candidate(dict1), do: sort_counter(dict1)\n  def sort_counter(dict1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_counter' do\n    assert [{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}] == HumanEval.candidate(%{\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87})\n    assert [{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}] == HumanEval.candidate(%{\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250})\n    assert [{\"Chemistry\", 1250}, {\"Physics\", 1000}, {\"Math\", 900}] == HumanEval.candidate(%{\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_476_big_sum", "prompt": "# Write an elixirthon function to find the sum of the largest and smallest value in a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: big_sum(nums)\n  def big_sum(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'big_sum' do\n    assert 4 == HumanEval.candidate([1, 2, 3])\n    assert 3 == HumanEval.candidate([-1, 2, 3, 4])\n    assert 8 == HumanEval.candidate([2, 3, 6])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_477_is_lower", "prompt": "# Write an elixirthon function to convert the given string to lower case.\n\ndefmodule HumanEval do\n  def candidate(string), do: is_lower(string)\n  def is_lower(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_lower' do\n    assert \"invalid\" == HumanEval.candidate(\"InValid\")\n    assert \"true\" == HumanEval.candidate(\"TruE\")\n    assert \"sentence\" == HumanEval.candidate(\"SenTenCE\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "# Write a function to remove lowercase substrings from a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: remove_lowercase(str1)\n  def remove_lowercase(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_lowercase' do\n    assert \"PYTH\" == HumanEval.candidate(\"PYTHon\")\n    assert \"FID\" == HumanEval.candidate(\"FInD\")\n    assert \"STRG\" == HumanEval.candidate(\"STRinG\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_479_first_Digit", "prompt": "# Write an elixirthon function to find the first digit of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: first_Digit(n)\n  def first_Digit(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_Digit' do\n    assert 1 == HumanEval.candidate(123)\n    assert 4 == HumanEval.candidate(456)\n    assert 1 == HumanEval.candidate(12)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_554_Split", "prompt": "# Write an elixirthon function which takes a list of integers and only returns the odd ones.\n\ndefmodule HumanEval do\n  def candidate(list), do: Split(list)\n  def Split(list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Split' do\n    assert [1, 3, 5] == HumanEval.candidate([1, 2, 3, 4, 5, 6])\n    assert [11, 13] == HumanEval.candidate([10, 11, 12, 13])\n    assert [7, 9, 1] == HumanEval.candidate([7, 8, 9, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_555_difference", "prompt": "# Write an elixirthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: difference(n)\n  def difference(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'difference' do\n    assert 30 == HumanEval.candidate(3)\n    assert 210 == HumanEval.candidate(5)\n    assert 6 == HumanEval.candidate(2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "# Write an elixirthon function to count the number of pairs whose xor value is odd.\n\ndefmodule HumanEval do\n  def candidate(A, N), do: find_Odd_Pair(A, N)\n  def find_Odd_Pair(A, N) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Odd_Pair' do\n    assert 6 == HumanEval.candidate([5, 4, 7, 2, 1], 5)\n    assert 12 == HumanEval.candidate([7, 2, 8, 1, 0, 5, 11], 7)\n    assert 2 == HumanEval.candidate([1, 2, 3], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_557_toggle_string", "prompt": "# Write a function to toggle the case of all characters in a string.\n\ndefmodule HumanEval do\n  def candidate(string), do: toggle_string(string)\n  def toggle_string(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'toggle_string' do\n    assert \"pYTHON\" == HumanEval.candidate(\"Python\")\n    assert \"pANGRAM\" == HumanEval.candidate(\"Pangram\")\n    assert \"liTTle\" == HumanEval.candidate(\"LIttLE\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "# Write an elixirthon function to find the sum of the per-digit difference between two integers.\n\ndefmodule HumanEval do\n  def candidate(n1, n2), do: digit_distance_nums(n1, n2)\n  def digit_distance_nums(n1, n2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'digit_distance_nums' do\n    assert 1 == HumanEval.candidate(1, 2)\n    assert 6 == HumanEval.candidate(23, 56)\n    assert 7 == HumanEval.candidate(123, 256)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "# Write a function to find the sum of the largest contiguous sublist in the given list.\n\ndefmodule HumanEval do\n  def candidate(a, size), do: max_sub_array_sum(a, size)\n  def max_sub_array_sum(a, size) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sub_array_sum' do\n    assert 7 == HumanEval.candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    assert 8 == HumanEval.candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n    assert 10 == HumanEval.candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_560_union_elements", "prompt": "# Write a function to find the union of the elements of two given lists and output them in sorted order.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: union_elements(test_tup1, test_tup2)\n  def union_elements(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'union_elements' do\n    assert [3, 4, 5, 6, 7, 10] == HumanEval.candidate([3, 4, 5, 6], [5, 7, 4, 10])\n    assert [1, 2, 3, 4, 5, 6] == HumanEval.candidate([1, 2, 3, 4], [3, 4, 5, 6])\n    assert [11, 12, 13, 14, 15, 16, 17] == HumanEval.candidate([11, 12, 13, 14], [13, 15, 16, 17])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "# Write an elixirthon function to find the length of the longest sublists.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Max_Length(lst)\n  def Find_Max_Length(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Max_Length' do\n    assert 4 == HumanEval.candidate([[1], [1, 4], [5, 6, 7, 8]])\n    assert 3 == HumanEval.candidate([[0, 1], [2, 2], [3, 2, 1]])\n    assert 5 == HumanEval.candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_563_extract_values", "prompt": "# Write a function to extract values between quotation marks from a string.\n\ndefmodule HumanEval do\n  def candidate(text), do: extract_values(text)\n  def extract_values(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_values' do\n    assert [\"Python\", \"PHP\", \"Java\"] == HumanEval.candidate(\"\"Python\", \"PHP\", \"Java\"\")\n    assert [\"python\", \"program\", \"language\"] == HumanEval.candidate(\"\"python\",\"program\",\"language\"\")\n    assert [\"red\", \"blue\", \"green\", \"yellow\"] == HumanEval.candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "# Write an elixirthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: count_Pairs(arr, n)\n  def count_Pairs(arr, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Pairs' do\n    assert 2 == HumanEval.candidate([1, 2, 1], 3)\n    assert 0 == HumanEval.candidate([1, 1, 1, 1], 4)\n    assert 10 == HumanEval.candidate([1, 2, 3, 4, 5], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_565_split", "prompt": "# Write an elixirthon function to split a string into characters.\n\ndefmodule HumanEval do\n  def candidate(word), do: split(word)\n  def split(word) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split' do\n    assert [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"] == HumanEval.candidate(\"python\")\n    assert [\"N\", \"a\", \"m\", \"e\"] == HumanEval.candidate(\"Name\")\n    assert [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"] == HumanEval.candidate(\"program\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_566_sum_digits", "prompt": "# Write a function to get the sum of the digits of a non-negative integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_digits(n)\n  def sum_digits(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_digits' do\n    assert 12 == HumanEval.candidate(345)\n    assert 3 == HumanEval.candidate(12)\n    assert 16 == HumanEval.candidate(97)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_567_issort_list", "prompt": "# Write a function to check whether a specified list is sorted or not.\n\ndefmodule HumanEval do\n  def candidate(list1), do: issort_list(list1)\n  def issort_list(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'issort_list' do\n    assert true == HumanEval.candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n    assert false == HumanEval.candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n    assert false == HumanEval.candidate([1, 2, 4, 6, 8, 10, 15, 14, 20])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_568_empty_list", "prompt": "# Write a function to create a list of N empty dictionaries.\n\ndefmodule HumanEval do\n  def candidate(length), do: empty_list(length)\n  def empty_list(length) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'empty_list' do\n    assert [%{}, %{}, %{}, %{}, %{}] == HumanEval.candidate(5)\n    assert [%{}, %{}, %{}, %{}, %{}, %{}] == HumanEval.candidate(6)\n    assert [%{}, %{}, %{}, %{}, %{}, %{}, %{}] == HumanEval.candidate(7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "# Write a function to sort each sublist of strings in a given list of lists.\n\ndefmodule HumanEval do\n  def candidate(list1), do: sort_sublists(list1)\n  def sort_sublists(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_sublists' do\n    assert [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]] == HumanEval.candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n    assert [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]] == HumanEval.candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n    assert [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]] == HumanEval.candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "# Write an elixirthon function to remove duplicate numbers from a given number of lists.\n\ndefmodule HumanEval do\n  def candidate(nums), do: two_unique_nums(nums)\n  def two_unique_nums(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'two_unique_nums' do\n    assert [1, 4, 5] == HumanEval.candidate([1, 2, 3, 2, 3, 4, 5])\n    assert [1, 3, 4, 5] == HumanEval.candidate([1, 2, 3, 2, 4, 5])\n    assert [1, 2, 3, 4, 5] == HumanEval.candidate([1, 2, 3, 4, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_573_unique_product", "prompt": "# Write an elixirthon function to calculate the product of the unique numbers in a given list.\n\ndefmodule HumanEval do\n  def candidate(list_data), do: unique_product(list_data)\n  def unique_product(list_data) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'unique_product' do\n    assert 720000000 == HumanEval.candidate([10, 20, 30, 40, 20, 50, 60, 40])\n    assert 6 == HumanEval.candidate([1, 2, 3, 1])\n    assert 0 == HumanEval.candidate([7, 8, 9, 0, 1, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "# Write a function to find the surface area of a cylinder.\n\ndefmodule HumanEval do\n  def candidate(r, h), do: surfacearea_cylinder(r, h)\n  def surfacearea_cylinder(r, h) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'surfacearea_cylinder' do\n    assert 942.45 == HumanEval.candidate(10, 5)\n    assert 226.18800000000002 == HumanEval.candidate(4, 5)\n    assert 351.848 == HumanEval.candidate(4, 10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "# Write an elixirthon function to check whether a list is sublist of another or not.\n\ndefmodule HumanEval do\n  def candidate(A, B), do: is_Sub_Array(A, B)\n  def is_Sub_Array(A, B) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Sub_Array' do\n    assert false == HumanEval.candidate([1, 4, 3, 5], [1, 2])\n    assert true == HumanEval.candidate([1, 2, 1], [1, 2, 1])\n    assert false == HumanEval.candidate([1, 0, 2, 2], [2, 2, 0])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "# Write an elixirthon function to find the last digit in factorial of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: last_Digit_Factorial(n)\n  def last_Digit_Factorial(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'last_Digit_Factorial' do\n    assert 4 == HumanEval.candidate(4)\n    assert 0 == HumanEval.candidate(21)\n    assert 0 == HumanEval.candidate(30)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "# Write a function to interleave 3 lists of the same length into a single flat list.\n\ndefmodule HumanEval do\n  def candidate(list1, list2, list3), do: interleave_lists(list1, list2, list3)\n  def interleave_lists(list1, list2, list3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'interleave_lists' do\n    assert [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\n    assert [10, 15, 5, 20, 2, 10] == HumanEval.candidate([10, 20], [15, 2], [5, 10])\n    assert [11, 10, 20, 44, 15, 5] == HumanEval.candidate([11, 44], [10, 15], [20, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "# Write a function to find the dissimilar elements in the given two tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: find_dissimilar(test_tup1, test_tup2)\n  def find_dissimilar(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_dissimilar' do\n    assert {3, 6, 7, 10} == HumanEval.candidate({3, 4, 5, 6}, {5, 7, 4, 10})\n    assert {1, 4, 7, 9} == HumanEval.candidate({1, 2, 3, 4}, {7, 2, 3, 9})\n    assert {34, 36, 11, 25} == HumanEval.candidate({21, 11, 25, 26}, {26, 34, 21, 36})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_580_extract_even", "prompt": "# Write a function to remove uneven elements in the nested mixed tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tuple), do: extract_even(test_tuple)\n  def extract_even(test_tuple) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_even' do\n    assert {4, {6, {2, 4}}, 6, 8} == HumanEval.candidate({4, 5, {7, 6, {2, 4}}, 6, 8})\n    assert {6, {8, {4, 8}}} == HumanEval.candidate({5, 6, {8, 7, {4, 8}}, 7, 9})\n    assert {6, {8, {4, 6}}, 8, 10} == HumanEval.candidate({5, 6, {9, 8, {4, 6}}, 8, 10})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_581_surface_Area", "prompt": "# Write an elixirthon function to find the surface area of a square elixirramid with a given base edge and height.\n\ndefmodule HumanEval do\n  def candidate(b, s), do: surface_Area(b, s)\n  def surface_Area(b, s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'surface_Area' do\n    assert 33 == HumanEval.candidate(3, 4)\n    assert 56 == HumanEval.candidate(4, 5)\n    assert 5 == HumanEval.candidate(1, 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_583_catalan_number", "prompt": "# Write a function which returns nth catalan number.\n\ndefmodule HumanEval do\n  def candidate(num), do: catalan_number(num)\n  def catalan_number(num) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'catalan_number' do\n    assert 16796 == HumanEval.candidate(10)\n    assert 4862 == HumanEval.candidate(9)\n    assert 429 == HumanEval.candidate(7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "# Write a function to find the first adverb ending with ly and its positions in a given string.\n\ndefmodule HumanEval do\n  def candidate(text), do: find_adverbs(text)\n  def find_adverbs(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_adverbs' do\n    assert \"0-7: Clearly\" == HumanEval.candidate(\"Clearly, he has no excuse for such behavior.\")\n    assert \"28-36: carefuly\" == HumanEval.candidate(\"Please handle the situation carefuly\")\n    assert \"18-25: quickly\" == HumanEval.candidate(\"Complete the task quickly\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_585_expensive_items", "prompt": "# Write a function to find the n most expensive items in a given dataset.\n\ndefmodule HumanEval do\n  def candidate(items, n), do: expensive_items(items, n)\n  def expensive_items(items, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'expensive_items' do\n    assert [%{\"name\" => \"Item-2\", \"price\" => 555.22}] == HumanEval.candidate([%{\"name\" => \"Item-1\", \"price\" => 101.1}, %{\"name\" => \"Item-2\", \"price\" => 555.22}], 1)\n    assert [%{\"name\" => \"Item-2\", \"price\" => 555.22}, %{\"name\" => \"Item-1\", \"price\" => 101.1}] == HumanEval.candidate([%{\"name\" => \"Item-1\", \"price\" => 101.1}, %{\"name\" => \"Item-2\", \"price\" => 555.22}, %{\"name\" => \"Item-3\", \"price\" => 45.09}], 2)\n    assert [%{\"name\" => \"Item-2\", \"price\" => 555.22}] == HumanEval.candidate([%{\"name\" => \"Item-1\", \"price\" => 101.1}, %{\"name\" => \"Item-2\", \"price\" => 555.22}, %{\"name\" => \"Item-3\", \"price\" => 45.09}, %{\"name\" => \"Item-4\", \"price\" => 22.75}], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_586_split_Arr", "prompt": "# Write an elixirthon function to split a list at the nth eelment and add the first part to the end.\n\ndefmodule HumanEval do\n  def candidate(l, n), do: split_Arr(l, n)\n  def split_Arr(l, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split_Arr' do\n    assert [5, 6, 52, 36, 12, 10] == HumanEval.candidate([12, 10, 5, 6, 52, 36], 2)\n    assert [2, 3, 4, 1] == HumanEval.candidate([1, 2, 3, 4], 1)\n    assert [3, 4, 5, 6, 7, 0, 1, 2] == HumanEval.candidate([0, 1, 2, 3, 4, 5, 6, 7], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_587_list_tuple", "prompt": "# Write a function to convert a list to a tuple.\n\ndefmodule HumanEval do\n  def candidate(listx), do: list_tuple(listx)\n  def list_tuple(listx) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'list_tuple' do\n    assert {5, 10, 7, 4, 15, 3} == HumanEval.candidate([5, 10, 7, 4, 15, 3])\n    assert {2, 4, 5, 6, 2, 3, 4, 4, 7} == HumanEval.candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])\n    assert {58, 44, 56} == HumanEval.candidate([58, 44, 56])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_588_big_diff", "prompt": "# Write an elixirthon function to find the difference between largest and smallest value in a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: big_diff(nums)\n  def big_diff(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'big_diff' do\n    assert 3 == HumanEval.candidate([1, 2, 3, 4])\n    assert 8 == HumanEval.candidate([4, 5, 12])\n    assert 7 == HumanEval.candidate([9, 2, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "# Write a function to find perfect squares between two given numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: perfect_squares(a, b)\n  def perfect_squares(a, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'perfect_squares' do\n    assert [1, 4, 9, 16, 25] == HumanEval.candidate(1, 30)\n    assert [64, 81, 100] == HumanEval.candidate(50, 100)\n    assert [100, 121, 144, 169, 196] == HumanEval.candidate(100, 200)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_591_swap_List", "prompt": "# Write an elixirthon function to interchange the first and last elements in a list.\n\ndefmodule HumanEval do\n  def candidate(newList), do: swap_List(newList)\n  def swap_List(newList) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'swap_List' do\n    assert [24, 35, 9, 56, 12] == HumanEval.candidate([12, 35, 9, 56, 24])\n    assert [3, 2, 1] == HumanEval.candidate([1, 2, 3])\n    assert [6, 5, 4] == HumanEval.candidate([4, 5, 6])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "# Write an elixirthon function to find the sum of the product of consecutive binomial co-efficients.\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_Of_product(n)\n  def sum_Of_product(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_Of_product' do\n    assert 15 == HumanEval.candidate(3)\n    assert 56 == HumanEval.candidate(4)\n    assert 1 == HumanEval.candidate(1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "# Write a function to remove leading zeroes from an ip address.\n\ndefmodule HumanEval do\n  def candidate(ip), do: removezero_ip(ip)\n  def removezero_ip(ip) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'removezero_ip' do\n    assert \"216.8.94.196\" == HumanEval.candidate(\"216.08.094.196\")\n    assert \"12.1.24\" == HumanEval.candidate(\"12.01.024\")\n    assert \"216.8.94.196\" == HumanEval.candidate(\"216.08.094.0196\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "# Write a function to find the difference of the first even and first odd number of a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: diff_even_odd(list1)\n  def diff_even_odd(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'diff_even_odd' do\n    assert 3 == HumanEval.candidate([1, 3, 5, 7, 4, 1, 6, 8])\n    assert 1 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert 9 == HumanEval.candidate([1, 5, 7, 9, 10])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "# Write an elixirthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndefmodule HumanEval do\n  def candidate(str1, str2), do: min_Swaps(str1, str2)\n  def min_Swaps(str1, str2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_Swaps' do\n    assert 1 == HumanEval.candidate(\"1101\", \"1110\")\n    assert \"Not Possible\" == HumanEval.candidate(\"111\", \"000\")\n    assert \"Not Possible\" == HumanEval.candidate(\"111\", \"110\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_597_find_kth", "prompt": "# Write a function to find kth element from the given two sorted lists.\n\ndefmodule HumanEval do\n  def candidate(arr1, arr2, k), do: find_kth(arr1, arr2, k)\n  def find_kth(arr1, arr2, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_kth' do\n    assert 6 == HumanEval.candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n    assert 256 == HumanEval.candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7)\n    assert 8 == HumanEval.candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "# Write a function to check whether the given number is armstrong or not.\n\ndefmodule HumanEval do\n  def candidate(number), do: armstrong_number(number)\n  def armstrong_number(number) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'armstrong_number' do\n    assert true == HumanEval.candidate(153)\n    assert false == HumanEval.candidate(259)\n    assert false == HumanEval.candidate(4458)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_599_sum_average", "prompt": "# Write a function to find sum and average of first n natural numbers.\n\ndefmodule HumanEval do\n  def candidate(number), do: sum_average(number)\n  def sum_average(number) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_average' do\n    assert {55, 5.5} == HumanEval.candidate(10)\n    assert {120, 8.0} == HumanEval.candidate(15)\n    assert {210, 10.5} == HumanEval.candidate(20)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_600_is_Even", "prompt": "# Write an elixirthon function to check whether the given number is even or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_Even(n)\n  def is_Even(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Even' do\n    assert false == HumanEval.candidate(1)\n    assert true == HumanEval.candidate(2)\n    assert false == HumanEval.candidate(3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "# Write an elixirthon function to find the first repeated character in a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: first_repeated_char(str1)\n  def first_repeated_char(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_repeated_char' do\n    assert \"a\" == HumanEval.candidate(\"abcabc\")\n    assert nil == HumanEval.candidate(\"abc\")\n    assert \"1\" == HumanEval.candidate(\"123123\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_603_get_ludic", "prompt": "# Write a function to get all lucid numbers smaller than or equal to a given integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: get_ludic(n)\n  def get_ludic(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_ludic' do\n    assert [1, 2, 3, 5, 7] == HumanEval.candidate(10)\n    assert [1, 2, 3, 5, 7, 11, 13, 17, 23, 25] == HumanEval.candidate(25)\n    assert [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43] == HumanEval.candidate(45)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_604_reverse_words", "prompt": "# Write a function to reverse words seperated by spaces in a given string.\n\ndefmodule HumanEval do\n  def candidate(s), do: reverse_words(s)\n  def reverse_words(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_words' do\n    assert \"program python\" == HumanEval.candidate(\"python program\")\n    assert \"language java\" == HumanEval.candidate(\"java language\")\n    assert \"man indian\" == HumanEval.candidate(\"indian man\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_605_prime_num", "prompt": "# Write a function to check if the given integer is a prime number.\n\ndefmodule HumanEval do\n  def candidate(num), do: prime_num(num)\n  def prime_num(num) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'prime_num' do\n    assert true == HumanEval.candidate(13)\n    assert true == HumanEval.candidate(7)\n    assert false == HumanEval.candidate(-1010)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_606_radian_degree", "prompt": "# Write a function to convert degrees to radians.\n\ndefmodule HumanEval do\n  def candidate(degree), do: radian_degree(degree)\n  def radian_degree(degree) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'radian_degree' do\n    assert 1.5707963267948966 == HumanEval.candidate(90)\n    assert 1.0471975511965976 == HumanEval.candidate(60)\n    assert 2.0943951023931953 == HumanEval.candidate(120)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_607_find_literals", "prompt": "# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndefmodule HumanEval do\n  def candidate(text, pattern), do: find_literals(text, pattern)\n  def find_literals(text, pattern) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_literals' do\n    assert {\"fox\", 16, 19} == HumanEval.candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n    assert {\"crazy\", 16, 21} == HumanEval.candidate(\"Its been a very crazy procedure right\", \"crazy\")\n    assert {\"will\", 35, 39} == HumanEval.candidate(\"Hardest choices required strongest will\", \"will\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_608_bell_Number", "prompt": "# Write an elixirthon function to find nth bell number.\n\ndefmodule HumanEval do\n  def candidate(n), do: bell_Number(n)\n  def bell_Number(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bell_Number' do\n    assert 2 == HumanEval.candidate(2)\n    assert 5 == HumanEval.candidate(3)\n    assert 15 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "# Write an elixirthon function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndefmodule HumanEval do\n  def candidate(list1, L), do: remove_kth_element(list1, L)\n  def remove_kth_element(list1, L) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_kth_element' do\n    assert [1, 1, 3, 4, 4, 5, 1] == HumanEval.candidate([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    assert [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4] == HumanEval.candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n    assert [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10] == HumanEval.candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndefmodule HumanEval do\n  def candidate(test_list, N), do: max_of_nth(test_list, N)\n  def max_of_nth(test_list, N) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_of_nth' do\n    assert 19 == HumanEval.candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n    assert 10 == HumanEval.candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n    assert 11 == HumanEval.candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_612_merge", "prompt": "# Write an elixirthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndefmodule HumanEval do\n  def candidate(lst), do: merge(lst)\n  def merge(lst) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'merge' do\n    assert [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]] == HumanEval.candidate([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]])\n    assert [[1, 3, 5, 7], [2, 4, 6, 8]] == HumanEval.candidate([[1, 2], [3, 4], [5, 6], [7, 8]])\n    assert [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]] == HumanEval.candidate([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "# Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: cummulative_sum(test_list)\n  def cummulative_sum(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cummulative_sum' do\n    assert 30 == HumanEval.candidate([[1, 3], [5, 6, 7], [2, 6]])\n    assert 37 == HumanEval.candidate([[2, 4], [6, 7, 8], [3, 7]])\n    assert 44 == HumanEval.candidate([[3, 5], [7, 8, 9], [4, 8]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_615_average_tuple", "prompt": "# Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: average_tuple(nums)\n  def average_tuple(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'average_tuple' do\n    assert [30.5, 34.25, 27.0, 23.25] == HumanEval.candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])\n    assert [25.5, -18.0, 3.75] == HumanEval.candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])\n    assert [305.0, 342.5, 270.0, 232.5] == HumanEval.candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "# Write a function which takes two tuples of the same length and performs the element wise modulo.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: tuple_modulo(test_tup1, test_tup2)\n  def tuple_modulo(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_modulo' do\n    assert {0, 4, 5, 1} == HumanEval.candidate({10, 4, 5, 6}, {5, 6, 7, 5})\n    assert {5, 5, 6, 1} == HumanEval.candidate({11, 5, 6, 7}, {6, 7, 8, 6})\n    assert {5, 6, 7, 1} == HumanEval.candidate({12, 6, 7, 8}, {7, 8, 9, 7})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndefmodule HumanEval do\n  def candidate(steps, d), do: min_Jumps(steps, d)\n  def min_Jumps(steps, d) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_Jumps' do\n    assert 3.5 == HumanEval.candidate({3, 4}, 11)\n    assert 0 == HumanEval.candidate({3, 4}, 0)\n    assert 1 == HumanEval.candidate({11, 14}, 11)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_618_div_list", "prompt": "# Write a function to divide two lists element wise.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2), do: div_list(nums1, nums2)\n  def div_list(nums1, nums2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'div_list' do\n    assert [4.0, 2.5, 2.0] == HumanEval.candidate([4, 5, 6], [1, 2, 3])\n    assert [3.0, 0.5] == HumanEval.candidate([3, 2], [1, 4])\n    assert [1.8, 1.7142857142857142] == HumanEval.candidate([90, 120], [50, 70])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_619_move_num", "prompt": "# Write a function to move all the numbers to the end of the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: move_num(test_str)\n  def move_num(test_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'move_num' do\n    assert \"Iloveyouthreethousand1143553000\" == HumanEval.candidate(\"I1love143you55three3000thousand\")\n    assert \"AvengersAssemble124\" == HumanEval.candidate(\"Avengers124Assemble\")\n    assert \"Itsourpathtoseethingsdothings11121314151617\" == HumanEval.candidate(\"Its11our12path13to14see15things16do17things\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_622_get_median", "prompt": "# Write a function to find the median of two sorted lists of same size.\n\ndefmodule HumanEval do\n  def candidate(arr1, arr2, n), do: get_median(arr1, arr2, n)\n  def get_median(arr1, arr2, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_median' do\n    assert 16.0 == HumanEval.candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n    assert 8.5 == HumanEval.candidate([2, 4, 8, 9], [7, 13, 19, 28], 4)\n    assert 25.0 == HumanEval.candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_623_nth_nums", "prompt": "# Write a function to compute the n-th power of each number in a list.\n\ndefmodule HumanEval do\n  def candidate(nums, n), do: nth_nums(nums, n)\n  def nth_nums(nums, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'nth_nums' do\n    assert [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    assert [1000, 8000, 27000] == HumanEval.candidate([10, 20, 30], 3)\n    assert [248832, 759375] == HumanEval.candidate([12, 15], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_624_is_upper", "prompt": "# Write an elixirthon function to convert a given string to uppercase.\n\ndefmodule HumanEval do\n  def candidate(string), do: is_upper(string)\n  def is_upper(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_upper' do\n    assert \"PERSON\" == HumanEval.candidate(\"person\")\n    assert \"FINAL\" == HumanEval.candidate(\"final\")\n    assert \"VALID\" == HumanEval.candidate(\"Valid\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_625_swap_List", "prompt": "# Write an elixirthon function to interchange the first and last element in a given list.\n\ndefmodule HumanEval do\n  def candidate(newList), do: swap_List(newList)\n  def swap_List(newList) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'swap_List' do\n    assert [3, 2, 1] == HumanEval.candidate([1, 2, 3])\n    assert [4, 2, 3, 4, 1] == HumanEval.candidate([1, 2, 3, 4, 4])\n    assert [6, 5, 4] == HumanEval.candidate([4, 5, 6])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_626_triangle_area", "prompt": "# Write an elixirthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndefmodule HumanEval do\n  def candidate(r), do: triangle_area(r)\n  def triangle_area(r) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'triangle_area' do\n    assert nil == HumanEval.candidate(-1)\n    assert 0 == HumanEval.candidate(0)\n    assert 4 == HumanEval.candidate(2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "# Write an elixirthon function to find the smallest missing number from a sorted list of natural numbers.\n\ndefmodule HumanEval do\n  def candidate(array), do: find_First_Missing(array)\n  def find_First_Missing(array) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_First_Missing' do\n    assert 4 == HumanEval.candidate([0, 1, 2, 3])\n    assert 3 == HumanEval.candidate([0, 1, 2, 6, 9])\n    assert 0 == HumanEval.candidate([2, 3, 5, 8, 9])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "# Write a function to replace all spaces in the given string with '%20'.\n\ndefmodule HumanEval do\n  def candidate(string), do: replace_spaces(string)\n  def replace_spaces(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_spaces' do\n    assert \"My%20Name%20is%20Dawood\" == HumanEval.candidate(\"My Name is Dawood\")\n    assert \"I%20am%20a%20Programmer\" == HumanEval.candidate(\"I am a Programmer\")\n    assert \"I%20love%20Coding\" == HumanEval.candidate(\"I love Coding\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_629_Split", "prompt": "# Write an elixirthon function to find even numbers from a list of numbers.\n\ndefmodule HumanEval do\n  def candidate(list), do: Split(list)\n  def Split(list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Split' do\n    assert [2, 4] == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert [4, 6, 8, 0] == HumanEval.candidate([4, 5, 6, 7, 8, 0, 1])\n    assert [8, 12] == HumanEval.candidate([8, 12, 15, 19])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: get_coordinates(test_tup)\n  def get_coordinates(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_coordinates' do\n    assert [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]] == HumanEval.candidate({3, 4})\n    assert [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]] == HumanEval.candidate({4, 5})\n    assert [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]] == HumanEval.candidate({5, 6})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "# Write a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndefmodule HumanEval do\n  def candidate(text), do: replace_spaces(text)\n  def replace_spaces(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_spaces' do\n    assert \"Jumanji_The_Jungle\" == HumanEval.candidate(\"Jumanji The Jungle\")\n    assert \"The Avengers\" == HumanEval.candidate(\"The_Avengers\")\n    assert \"Fast_and_Furious\" == HumanEval.candidate(\"Fast and Furious\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_632_move_zero", "prompt": "# Write an elixirthon function to move all zeroes to the end of the given list.\n\ndefmodule HumanEval do\n  def candidate(num_list), do: move_zero(num_list)\n  def move_zero(num_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'move_zero' do\n    assert [1, 2, 3, 4, 0, 0] == HumanEval.candidate([1, 0, 2, 0, 3, 4])\n    assert [2, 3, 2, 4, 5, 0, 0, 0, 0] == HumanEval.candidate([2, 3, 2, 0, 0, 4, 0, 5, 0])\n    assert [1, 1, 1, 0, 0] == HumanEval.candidate([0, 1, 0, 1, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "# Write an elixirthon function to find the sum of xor of all pairs of numbers in the given list.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: pair_xor_Sum(arr, n)\n  def pair_xor_Sum(arr, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pair_xor_Sum' do\n    assert 47 == HumanEval.candidate([5, 9, 7, 6], 4)\n    assert 12 == HumanEval.candidate([7, 3, 5], 3)\n    assert 4 == HumanEval.candidate([7, 3], 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_635_heap_sort", "prompt": "# Write a function to sort the given list.\n\ndefmodule HumanEval do\n  def candidate(iterable), do: heap_sort(iterable)\n  def heap_sort(iterable) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'heap_sort' do\n    assert [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == HumanEval.candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    assert [14, 22, 25, 25, 35, 58, 65, 75, 85] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    assert [1, 5, 7, 9] == HumanEval.candidate([7, 1, 9, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "# Write a function to check whether the given amount has no profit and no loss\n\ndefmodule HumanEval do\n  def candidate(actual_cost, sale_amount), do: noprofit_noloss(actual_cost, sale_amount)\n  def noprofit_noloss(actual_cost, sale_amount) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'noprofit_noloss' do\n    assert false == HumanEval.candidate(1500, 1200)\n    assert true == HumanEval.candidate(100, 100)\n    assert false == HumanEval.candidate(2000, 5000)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_638_wind_chill", "prompt": "# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndefmodule HumanEval do\n  def candidate(v, t), do: wind_chill(v, t)\n  def wind_chill(v, t) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'wind_chill' do\n    assert 40 == HumanEval.candidate(120, 35)\n    assert 19 == HumanEval.candidate(40, 20)\n    assert 6 == HumanEval.candidate(10, 8)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_639_sample_nam", "prompt": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndefmodule HumanEval do\n  def candidate(sample_names), do: sample_nam(sample_names)\n  def sample_nam(sample_names) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sample_nam' do\n    assert 16 == HumanEval.candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"])\n    assert 10 == HumanEval.candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n    assert 6 == HumanEval.candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "# Write a function to remove the parenthesis and what is inbetween them from a string.\n\ndefmodule HumanEval do\n  def candidate(items), do: remove_parenthesis(items)\n  def remove_parenthesis(items) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_parenthesis' do\n    assert \"python\" == HumanEval.candidate([\"python (chrome)\"])\n    assert \"string\" == HumanEval.candidate([\"string(.abc)\"])\n    assert \"alpha\" == HumanEval.candidate([\"alpha(num)\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "# Write a function to find the nth nonagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_nonagonal(n)\n  def is_nonagonal(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_nonagonal' do\n    assert 325 == HumanEval.candidate(10)\n    assert 750 == HumanEval.candidate(15)\n    assert 1089 == HumanEval.candidate(18)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "# Write a function that checks if a strings contains 'z', except at the start and end of the word.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_wordz_middle(text)\n  def text_match_wordz_middle(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_wordz_middle' do\n    assert true == HumanEval.candidate(\"pythonzabc.\")\n    assert false == HumanEval.candidate(\"zxyabc.\")\n    assert false == HumanEval.candidate(\"  lang  .\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "# Write an elixirthon function to reverse a list upto a given position.\n\ndefmodule HumanEval do\n  def candidate(input, k), do: reverse_Array_Upto_K(input, k)\n  def reverse_Array_Upto_K(input, k) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_Array_Upto_K' do\n    assert [4, 3, 2, 1, 5, 6] == HumanEval.candidate([1, 2, 3, 4, 5, 6], 4)\n    assert [5, 4, 6, 7] == HumanEval.candidate([4, 5, 6, 7], 2)\n    assert [7, 8, 9, 6, 5] == HumanEval.candidate([9, 8, 7, 6, 5], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "# Write a function to add a map to the tuple. The output should be a tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup, test_dict), do: add_dict_to_tuple(test_tup, test_dict)\n  def add_dict_to_tuple(test_tup, test_dict) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_dict_to_tuple' do\n    assert {4, 5, 6, %{\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}} == HumanEval.candidate({4, 5, 6}, %{\"MSAM\" => 1, \"is\" => 2, \"best\" => 3})\n    assert {1, 2, 3, %{\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}} == HumanEval.candidate({1, 2, 3}, %{\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4})\n    assert {8, 9, 10, %{\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}} == HumanEval.candidate({8, 9, 10}, %{\"POS\" => 3, \"is\" => 4, \"Okay\" => 5})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\ndefmodule HumanEval do\n  def candidate(cost), do: maxAverageOfPath(cost)\n  def maxAverageOfPath(cost) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maxAverageOfPath' do\n    assert 5.2 == HumanEval.candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n    assert 6.2 == HumanEval.candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]])\n    assert 7.2 == HumanEval.candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]])\n    assert 5.8 == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_722_filter_data", "prompt": "# The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\ndefmodule HumanEval do\n  def candidate(students, h, w), do: filter_data(students, h, w)\n  def filter_data(students, h, w) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_data' do\n    assert %{\"Cierra Vega\" => {6.2, 70}} == HumanEval.candidate(%{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}}, 6.0, 70)\n    assert %{\"Cierra Vega\" => {6.2, 70}, \"Kierra Gentry\" => {6.0, 68}} == HumanEval.candidate(%{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}}, 5.9, 67)\n    assert %{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}} == HumanEval.candidate(%{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}}, 5.7, 64)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2), do: count_same_pair(nums1, nums2)\n  def count_same_pair(nums1, nums2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_same_pair' do\n    assert 4 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n    assert 11 == HumanEval.candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    assert 1 == HumanEval.candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    assert 3 == HumanEval.candidate([0, 1, 1, 2], [0, 1, 2, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\ndefmodule HumanEval do\n  def candidate(base, power), do: power_base_sum(base, power)\n  def power_base_sum(base, power) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'power_base_sum' do\n    assert 115 == HumanEval.candidate(2, 100)\n    assert 37 == HumanEval.candidate(8, 10)\n    assert 62 == HumanEval.candidate(8, 15)\n    assert 9 == HumanEval.candidate(3, 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "# Write a function to extract values between quotation marks \" \" of the given string.\n\ndefmodule HumanEval do\n  def candidate(text1), do: extract_quotation(text1)\n  def extract_quotation(text1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_quotation' do\n    assert [\"A53\", \"multi\", \"Processor\"] == HumanEval.candidate(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")\n    assert [\"favorite\", \"apps\"] == HumanEval.candidate(\"Cast your \"favorite\" entertainment \"apps\"\")\n    assert [\"4k Ultra HD\", \"HDR 10\"] == HumanEval.candidate(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")\n    assert [] == HumanEval.candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "# Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: multiply_elements(test_tup)\n  def multiply_elements(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiply_elements' do\n    assert [5, 35, 56, 80] == HumanEval.candidate([1, 5, 7, 8, 10])\n    assert [8, 20, 30, 42] == HumanEval.candidate([2, 4, 5, 6, 7])\n    assert [156, 182, 126, 135] == HumanEval.candidate([12, 13, 14, 9, 15])\n    assert [] == HumanEval.candidate([12])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_728_sum_list", "prompt": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndefmodule HumanEval do\n  def candidate(lst1, lst2), do: sum_list(lst1, lst2)\n  def sum_list(lst1, lst2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_list' do\n    assert [25, 45, 65] == HumanEval.candidate([10, 20, 30], [15, 25, 35])\n    assert [6, 8, 10] == HumanEval.candidate([1, 2, 3], [5, 6, 7])\n    assert [30, 65, 105] == HumanEval.candidate([15, 20, 30], [15, 45, 75])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "# Write a function to remove consecutive duplicates of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: consecutive_duplicates(nums)\n  def consecutive_duplicates(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'consecutive_duplicates' do\n    assert [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4] == HumanEval.candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    assert [10, 15, 19, 18, 17, 26, 17, 18, 10] == HumanEval.candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    assert [\"a\", \"b\", \"c\", \"d\"] == HumanEval.candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n    assert [\"a\", \"b\", \"c\", \"d\", \"a\"] == HumanEval.candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "# Write a function to find the lateral surface area of a cone given radius r and the height h.\n\ndefmodule HumanEval do\n  def candidate(r, h), do: lateralsurface_cone(r, h)\n  def lateralsurface_cone(r, h) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lateralsurface_cone' do\n    assert 204.20352248333654 == HumanEval.candidate(5, 12)\n    assert 566.3586699569488 == HumanEval.candidate(10, 15)\n    assert 1521.8090132193388 == HumanEval.candidate(19, 17)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n\ndefmodule HumanEval do\n  def candidate(text), do: replace_specialchar(text)\n  def replace_specialchar(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_specialchar' do\n    assert \"Python:language::Programming:language:\" == HumanEval.candidate(\"Python language, Programming language.\")\n    assert \"a:b:c:d:e:f\" == HumanEval.candidate(\"a b c,d e f\")\n    assert \"ram:reshma:ram:rahim\" == HumanEval.candidate(\"ram reshma,ram rahim\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted list.\n\ndefmodule HumanEval do\n  def candidate(A, x), do: find_first_occurrence(A, x)\n  def find_first_occurrence(A, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_first_occurrence' do\n    assert 1 == HumanEval.candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    assert 2 == HumanEval.candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    assert 4 == HumanEval.candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "# Write an elixirthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n\ndefmodule HumanEval do\n  def candidate(arr), do: sum_Of_Subarray_Prod(arr)\n  def sum_Of_Subarray_Prod(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_Of_Subarray_Prod' do\n    assert 20 == HumanEval.candidate([1, 2, 3])\n    assert 5 == HumanEval.candidate([1, 2])\n    assert 84 == HumanEval.candidate([1, 2, 3, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "# Write an elixirthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndefmodule HumanEval do\n  def candidate(n), do: toggle_middle_bits(n)\n  def toggle_middle_bits(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'toggle_middle_bits' do\n    assert 15 == HumanEval.candidate(9)\n    assert 12 == HumanEval.candidate(10)\n    assert 13 == HumanEval.candidate(11)\n    assert 127 == HumanEval.candidate(65)\n    assert 115 == HumanEval.candidate(77)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_736_left_insertion", "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/elixirthon-exercises/data-structures-and-algorithms/elixirthon-data-structure-exercise-24.php\n\ndefmodule HumanEval do\n  def candidate(a, x), do: left_insertion(a, x)\n  def left_insertion(a, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'left_insertion' do\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 6)\n    assert 2 == HumanEval.candidate([1, 2, 4, 5], 3)\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_737_check_str", "prompt": "# Write a function to check whether the given string is starting with a vowel or not using regex.\n\ndefmodule HumanEval do\n  def candidate(string), do: check_str(string)\n  def check_str(string) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_str' do\n    assert true == HumanEval.candidate(\"annie\")\n    assert false == HumanEval.candidate(\"dawood\")\n    assert true == HumanEval.candidate(\"Else\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/elixirthon-exercises/data-structures-and-algorithms/elixirthon-recursion-exercise-9.php\n\ndefmodule HumanEval do\n  def candidate(n), do: geometric_sum(n)\n  def geometric_sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'geometric_sum' do\n    assert 1.9921875 == HumanEval.candidate(7)\n    assert 1.9375 == HumanEval.candidate(4)\n    assert 1.99609375 == HumanEval.candidate(8)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_739_find_Index", "prompt": "# Write an elixirthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndefmodule HumanEval do\n  def candidate(n), do: find_Index(n)\n  def find_Index(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Index' do\n    assert 4 == HumanEval.candidate(2)\n    assert 14 == HumanEval.candidate(3)\n    assert 45 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "# Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/elixirthon-convert-tuple-to-adjacent-pair-map/\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: tuple_to_dict(test_tup)\n  def tuple_to_dict(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_to_dict' do\n    assert %{1 => 5, 7 => 10, 13 => 5} == HumanEval.candidate({1, 5, 7, 10, 13, 5})\n    assert %{1 => 2, 3 => 4, 5 => 6} == HumanEval.candidate({1, 2, 3, 4, 5, 6})\n    assert %{7 => 8, 9 => 10, 11 => 12} == HumanEval.candidate({7, 8, 9, 10, 11, 12})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "# Write an elixirthon function to check whether all the characters are same or not.\n\ndefmodule HumanEval do\n  def candidate(s), do: all_Characters_Same(s)\n  def all_Characters_Same(s) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_Characters_Same' do\n    assert false == HumanEval.candidate(\"python\")\n    assert true == HumanEval.candidate(\"aaa\")\n    assert false == HumanEval.candidate(\"data\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "# Write a function to caluclate the area of a tetrahedron.\n\ndefmodule HumanEval do\n  def candidate(side), do: area_tetrahedron(side)\n  def area_tetrahedron(side) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'area_tetrahedron' do\n    assert 15.588457268119894 == HumanEval.candidate(3)\n    assert 692.8203230275509 == HumanEval.candidate(20)\n    assert 173.20508075688772 == HumanEval.candidate(10)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_743_rotate_right", "prompt": "# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/elixirthon-program-right-rotate-list-n/\n\ndefmodule HumanEval do\n  def candidate(list, m), do: rotate_right(list, m)\n  def rotate_right(list, m) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rotate_right' do\n    assert [8, 9, 10, 1, 2, 3, 4, 5, 6, 7] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    assert [9, 10, 1, 2, 3, 4, 5, 6, 7, 8] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    assert [6, 7, 8, 9, 10, 1, 2, 3, 4, 5] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_744_check_none", "prompt": "# Write a function to check if the given tuple has any none value or not.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: check_none(test_tup)\n  def check_none(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_none' do\n    assert true == HumanEval.candidate({10, 4, 5, 6, nil})\n    assert false == HumanEval.candidate({7, 8, 9, 11, 14})\n    assert true == HumanEval.candidate({1, 2, 3, 4, nil})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/elixirthon-exercises/lambda/elixirthon-lambda-exercise-24.php\n\ndefmodule HumanEval do\n  def candidate(startnum, endnum), do: divisible_by_digits(startnum, endnum)\n  def divisible_by_digits(startnum, endnum) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'divisible_by_digits' do\n    assert [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] == HumanEval.candidate(1, 22)\n    assert [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15] == HumanEval.candidate(1, 15)\n    assert [22, 24] == HumanEval.candidate(20, 25)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_746_sector_area", "prompt": "# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.\n\ndefmodule HumanEval do\n  def candidate(r, a), do: sector_area(r, a)\n  def sector_area(r, a) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sector_area' do\n    assert 6.283185307179586 == HumanEval.candidate(4, 45)\n    assert 31.808625617596654 == HumanEval.candidate(9, 45)\n    assert nil == HumanEval.candidate(9, 361)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndefmodule HumanEval do\n  def candidate(X, Y, Z), do: lcs_of_three(X, Y, Z)\n  def lcs_of_three(X, Y, Z) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lcs_of_three' do\n    assert 2 == HumanEval.candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\")\n    assert 5 == HumanEval.candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\")\n    assert 3 == HumanEval.candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: capital_words_spaces(str1)\n  def capital_words_spaces(str1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'capital_words_spaces' do\n    assert \"Python\" == HumanEval.candidate(\"Python\")\n    assert \"Python Programming Examples\" == HumanEval.candidate(\"PythonProgrammingExamples\")\n    assert \"Get Ready To Be Coding Freak\" == HumanEval.candidate(\"GetReadyToBeCodingFreak\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/elixirthon-sort-numeric-strings-in-a-list/\n\ndefmodule HumanEval do\n  def candidate(nums_str), do: sort_numeric_strings(nums_str)\n  def sort_numeric_strings(nums_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_numeric_strings' do\n    assert [-500, -12, 0, 4, 7, 12, 45, 100, 200] == HumanEval.candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"])\n    assert [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9] == HumanEval.candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"])\n    assert [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17] == HumanEval.candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_750_add_tuple", "prompt": "# Write a function to add the given tuple to the given list.\n\ndefmodule HumanEval do\n  def candidate(test_list, test_tup), do: add_tuple(test_list, test_tup)\n  def add_tuple(test_list, test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_tuple' do\n    assert [5, 6, 7, 9, 10] == HumanEval.candidate([5, 6, 7], {9, 10})\n    assert [6, 7, 8, 10, 11] == HumanEval.candidate([6, 7, 8], {10, 11})\n    assert [7, 8, 9, 11, 12] == HumanEval.candidate([7, 8, 9], {11, 12})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "# Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n\ndefmodule HumanEval do\n  def candidate(arr), do: check_min_heap(arr)\n  def check_min_heap(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_min_heap' do\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5, 6])\n    assert true == HumanEval.candidate([2, 3, 4, 5, 10, 15])\n    assert false == HumanEval.candidate([2, 10, 4, 5, 3, 15])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\ndefmodule HumanEval do\n  def candidate(n), do: jacobsthal_num(n)\n  def jacobsthal_num(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'jacobsthal_num' do\n    assert 11 == HumanEval.candidate(5)\n    assert 1 == HumanEval.candidate(2)\n    assert 5 == HumanEval.candidate(4)\n    assert 2731 == HumanEval.candidate(13)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_753_min_k", "prompt": "# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/elixirthon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coelixir of test cases\n\ndefmodule HumanEval do\n  def candidate(test_list, K), do: min_k(test_list, K)\n  def min_k(test_list, K) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_k' do\n    assert [{\"Akash\", 2}, {\"Akshat\", 4}] == HumanEval.candidate([{\"Manjeet\", 10}, {\"Akshat\", 4}, {\"Akash\", 2}, {\"Nikhil\", 8}], 2)\n    assert [{\"Akash\", 3}, {\"Angat\", 5}, {\"Nepin\", 9}] == HumanEval.candidate([{\"Sanjeev\", 11}, {\"Angat\", 5}, {\"Akash\", 3}, {\"Nepin\", 9}], 3)\n    assert [{\"Ayesha\", 9}] == HumanEval.candidate([{\"tanmay\", 14}, {\"Amer\", 11}, {\"Ayesha\", 9}, {\"SKD\", 16}], 1)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\ndefmodule HumanEval do\n  def candidate(l1, l2, l3), do: extract_index_list(l1, l2, l3)\n  def extract_index_list(l1, l2, l3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_index_list' do\n    assert [1, 7] == HumanEval.candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n    assert [1, 6] == HumanEval.candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n    assert [1, 5] == HumanEval.candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n    assert [] == HumanEval.candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_755_second_smallest", "prompt": "# Write a function to find the second smallest number in a list.\n\ndefmodule HumanEval do\n  def candidate(numbers), do: second_smallest(numbers)\n  def second_smallest(numbers) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'second_smallest' do\n    assert -2 == HumanEval.candidate([1, 2, -8, -2, 0, -2])\n    assert -0.5 == HumanEval.candidate([1, 1, -0.5, 0, 2, -2, -2])\n    assert nil == HumanEval.candidate([2, 2])\n    assert nil == HumanEval.candidate([2, 2, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/elixirthon-exercises/re/elixirthon-re-exercise-3.php\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_zero_one(text)\n  def text_match_zero_one(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_zero_one' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abbbba\")\n    assert true == HumanEval.candidate(\"dsabbbba\")\n    assert false == HumanEval.candidate(\"asbbbba\")\n    assert true == HumanEval.candidate(\"abaaa\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/elixirthon-program-to-count-the-pairs-of-reverse-strings/\n\ndefmodule HumanEval do\n  def candidate(test_list), do: count_reverse_pairs(test_list)\n  def count_reverse_pairs(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_reverse_pairs' do\n    assert 2 == HumanEval.candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n    assert 1 == HumanEval.candidate([\"geeks\", \"best\", \"for\", \"skeeg\"])\n    assert 2 == HumanEval.candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_759_is_decimal", "prompt": "# Write a function to check whether a given string is a decimal number with a precision of 2.\n\ndefmodule HumanEval do\n  def candidate(num), do: is_decimal(num)\n  def is_decimal(num) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_decimal' do\n    assert true == HumanEval.candidate(\"123.11\")\n    assert false == HumanEval.candidate(\"e666.86\")\n    assert false == HumanEval.candidate(\"3.124587\")\n    assert true == HumanEval.candidate(\"1.11\")\n    assert false == HumanEval.candidate(\"1.1.11\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_760_unique_Element", "prompt": "# Write an elixirthon function to check whether a list of numbers contains only one distinct element or not.\n\ndefmodule HumanEval do\n  def candidate(arr), do: unique_Element(arr)\n  def unique_Element(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'unique_Element' do\n    assert true == HumanEval.candidate([1, 1, 1])\n    assert false == HumanEval.candidate([1, 2, 1, 2])\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\ndefmodule HumanEval do\n  def candidate(monthnum3), do: check_monthnumber_number(monthnum3)\n  def check_monthnumber_number(monthnum3) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_monthnumber_number' do\n    assert true == HumanEval.candidate(6)\n    assert false == HumanEval.candidate(2)\n    assert false == HumanEval.candidate(12)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "# Write an elixirthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: find_min_diff(arr, n)\n  def find_min_diff(arr, n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_min_diff' do\n    assert 1 == HumanEval.candidate([1, 5, 3, 19, 18, 25], 6)\n    assert 1 == HumanEval.candidate([4, 3, 2, 6], 4)\n    assert 4 == HumanEval.candidate([30, 5, 20, 9], 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_764_number_ctr", "prompt": "# Write an elixirthon function to count number of digits in a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: number_ctr(str)\n  def number_ctr(str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'number_ctr' do\n    assert 1 == HumanEval.candidate(\"program2bedone\")\n    assert 1 == HumanEval.candidate(\"3wonders\")\n    assert 3 == HumanEval.candidate(\"123\")\n    assert 3 == HumanEval.candidate(\"3wond-1ers2\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_765_is_polite", "prompt": "# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndefmodule HumanEval do\n  def candidate(n), do: is_polite(n)\n  def is_polite(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_polite' do\n    assert 11 == HumanEval.candidate(7)\n    assert 7 == HumanEval.candidate(4)\n    assert 13 == HumanEval.candidate(9)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_766_pair_wise", "prompt": "# Write a function to return a list of all pairs of consecutive items in a given list.\n\ndefmodule HumanEval do\n  def candidate(l1), do: pair_wise(l1)\n  def pair_wise(l1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pair_wise' do\n    assert [{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}] == HumanEval.candidate([1, 1, 2, 3, 3, 4, 4, 5])\n    assert [{1, 5}, {5, 7}, {7, 9}, {9, 10}] == HumanEval.candidate([1, 5, 7, 9, 10])\n    assert [{5, 1}, {1, 9}, {9, 7}, {7, 10}] == HumanEval.candidate([5, 1, 9, 7, 10])\n    assert [{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "# Write an elixirthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\ndefmodule HumanEval do\n  def candidate(arr, sum), do: get_pairs_count(arr, sum)\n  def get_pairs_count(arr, sum) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_pairs_count' do\n    assert 6 == HumanEval.candidate([1, 1, 1, 1], 2)\n    assert 3 == HumanEval.candidate([1, 5, 7, -1, 5], 6)\n    assert 1 == HumanEval.candidate([1, -2, 3], 1)\n    assert 1 == HumanEval.candidate([-1, -2, 3], -3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_769_Diff", "prompt": "# Write an elixirthon function to get the difference between two lists.\n\ndefmodule HumanEval do\n  def candidate(li1, li2), do: Diff(li1, li2)\n  def Diff(li1, li2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Diff' do\n    assert [10, 20, 30, 15] == HumanEval.candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    assert [2, 3, 4, 5, 6, 7] == HumanEval.candidate([1, 2, 3, 4, 5], [6, 7, 1])\n    assert [2, 3, 6, 7] == HumanEval.candidate([1, 2, 3], [6, 7, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "# Write an elixirthon function to find the sum of fourth power of first n odd natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: odd_num_sum(n)\n  def odd_num_sum(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_num_sum' do\n    assert 82 == HumanEval.candidate(2)\n    assert 707 == HumanEval.candidate(3)\n    assert 3108 == HumanEval.candidate(4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_771_check_expression", "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\ndefmodule HumanEval do\n  def candidate(exp), do: check_expression(exp)\n  def check_expression(exp) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_expression' do\n    assert true == HumanEval.candidate(\"{()}[{}]\")\n    assert false == HumanEval.candidate(\"{()}[{]\")\n    assert true == HumanEval.candidate(\"{()}[{}][]({})\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_772_remove_length", "prompt": "# Write a function to remove all the words with k length in the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str, K), do: remove_length(test_str, K)\n  def remove_length(test_str, K) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_length' do\n    assert \"person is most value\" == HumanEval.candidate(\"The person is most value tet\", 3)\n    assert \"If you me about ok\" == HumanEval.candidate(\"If you told me about this ok\", 4)\n    assert \"Forces of darkeness is the\" == HumanEval.candidate(\"Forces of darkeness is come into the play\", 4)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "# Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\n\ndefmodule HumanEval do\n  def candidate(text, pattern), do: occurance_substring(text, pattern)\n  def occurance_substring(text, pattern) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'occurance_substring' do\n    assert {\"python\", 0, 6} == HumanEval.candidate(\"python programming, python language\", \"python\")\n    assert {\"programming\", 7, 18} == HumanEval.candidate(\"python programming,programming language\", \"programming\")\n    assert {\"language\", 31, 39} == HumanEval.candidate(\"python programming,programming language\", \"language\")\n    assert nil == HumanEval.candidate(\"c++ programming, c++ language\", \"python\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_775_odd_position", "prompt": "# Write an elixirthon function to check whether every odd index contains odd numbers of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: odd_position(nums)\n  def odd_position(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_position' do\n    assert true == HumanEval.candidate([2, 1, 4, 3, 6, 7, 6, 3])\n    assert true == HumanEval.candidate([4, 1, 2])\n    assert false == HumanEval.candidate([1, 2, 3])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_776_count_vowels", "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: count_vowels(test_str)\n  def count_vowels(test_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_vowels' do\n    assert 7 == HumanEval.candidate(\"bestinstareels\")\n    assert 12 == HumanEval.candidate(\"partofthejourneyistheend\")\n    assert 5 == HumanEval.candidate(\"amazonprime\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_777_find_sum", "prompt": "# Write an elixirthon function to find the sum of non-repeated elements in a given list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: find_sum(arr)\n  def find_sum(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_sum' do\n    assert 21 == HumanEval.candidate([1, 2, 3, 1, 1, 4, 5, 6])\n    assert 71 == HumanEval.candidate([1, 10, 9, 4, 2, 10, 10, 45, 4])\n    assert 78 == HumanEval.candidate([12, 10, 9, 45, 2, 10, 10, 45, 10])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\n\ndefmodule HumanEval do\n  def candidate(list1), do: pack_consecutive_duplicates(list1)\n  def pack_consecutive_duplicates(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pack_consecutive_duplicates' do\n    assert [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]] == HumanEval.candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    assert [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]] == HumanEval.candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    assert [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]] == HumanEval.candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_780_find_combinations", "prompt": "# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/elixirthon-combinations-of-sum-with-tuples-in-tuple-list/\n\ndefmodule HumanEval do\n  def candidate(test_list), do: find_combinations(test_list)\n  def find_combinations(test_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_combinations' do\n    assert [{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}] == HumanEval.candidate([{2, 4}, {6, 7}, {5, 1}, {6, 10}])\n    assert [{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}] == HumanEval.candidate([{3, 5}, {7, 8}, {6, 2}, {7, 11}])\n    assert [{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}] == HumanEval.candidate([{4, 6}, {8, 9}, {7, 3}, {8, 12}])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_781_count_divisors", "prompt": "# Write an elixirthon function to check whether the count of divisors is even. https://www.w3resource.com/elixirthon-exercises/basic/elixirthon-basic-1-exercise-24.php\n\ndefmodule HumanEval do\n  def candidate(n), do: count_divisors(n)\n  def count_divisors(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_divisors' do\n    assert true == HumanEval.candidate(10)\n    assert false == HumanEval.candidate(100)\n    assert true == HumanEval.candidate(125)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "# Write an elixirthon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n\ndefmodule HumanEval do\n  def candidate(arr), do: odd_length_sum(arr)\n  def odd_length_sum(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_length_sum' do\n    assert 14 == HumanEval.candidate([1, 2, 4])\n    assert 15 == HumanEval.candidate([1, 2, 1, 2])\n    assert 8 == HumanEval.candidate([1, 7])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\ndefmodule HumanEval do\n  def candidate(r, g, b), do: rgb_to_hsv(r, g, b)\n  def rgb_to_hsv(r, g, b) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rgb_to_hsv' do\n    assert [0.0, 0.0, 100.0] == HumanEval.candidate(255, 255, 255)\n    assert [120.0, 100.0, 84.31372549019608] == HumanEval.candidate(0, 215, 0)\n    assert [149.26829268292684, 95.34883720930233, 84.31372549019608] == HumanEval.candidate(10, 215, 110)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "# Write a function to find the product of first even and odd number of a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: mul_even_odd(list1)\n  def mul_even_odd(list1) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'mul_even_odd' do\n    assert 4 == HumanEval.candidate([1, 3, 5, 7, 4, 1, 6, 8])\n    assert 2 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert 10 == HumanEval.candidate([1, 5, 7, 9, 10])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "# Write a function to convert tuple string to integer tuple.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: tuple_str_int(test_str)\n  def tuple_str_int(test_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_str_int' do\n    assert {7, 8, 9} == HumanEval.candidate(\"(7, 8, 9)\")\n    assert {1, 2, 3} == HumanEval.candidate(\"(1, 2, 3)\")\n    assert {4, 5, 6} == HumanEval.candidate(\"(4, 5, 6)\")\n    assert {7, 81, 19} == HumanEval.candidate(\"(7, 81, 19)\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_786_right_insertion", "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\n\ndefmodule HumanEval do\n  def candidate(a, x), do: right_insertion(a, x)\n  def right_insertion(a, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'right_insertion' do\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 6)\n    assert 2 == HumanEval.candidate([1, 2, 4, 5], 3)\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 7)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_787_text_match_three", "prompt": "# Write a function that matches a string that has an a followed by three 'b'.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_three(text)\n  def text_match_three(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_three' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abbbba\")\n    assert true == HumanEval.candidate(\"caacabbbba\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_788_new_tuple", "prompt": "# Write a function to create a new tuple from the given string and list.\n\ndefmodule HumanEval do\n  def candidate(test_list, test_str), do: new_tuple(test_list, test_str)\n  def new_tuple(test_list, test_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'new_tuple' do\n    assert {\"WEB\", \"is\", \"best\"} == HumanEval.candidate([\"WEB\", \"is\"], \"best\")\n    assert {\"We\", \"are\", \"Developers\"} == HumanEval.candidate([\"We\", \"are\"], \"Developers\")\n    assert {\"Part\", \"is\", \"Wrong\"} == HumanEval.candidate([\"Part\", \"is\"], \"Wrong\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_790_even_position", "prompt": "# Write an elixirthon function to check whether every even index contains even numbers of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: even_position(nums)\n  def even_position(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_position' do\n    assert false == HumanEval.candidate([3, 2, 1])\n    assert false == HumanEval.candidate([1, 2, 3])\n    assert true == HumanEval.candidate([2, 1, 4])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_791_remove_nested", "prompt": "# Write a function to remove tuples from the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: remove_nested(test_tup)\n  def remove_nested(test_tup) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_nested' do\n    assert {1, 5, 7, 10} == HumanEval.candidate({1, 5, 7, {4, 6}, 10})\n    assert {2, 6, 8, 11} == HumanEval.candidate({2, 6, 8, {5, 7}, 11})\n    assert {3, 7, 9, 12} == HumanEval.candidate({3, 7, 9, {6, 8}, 12})\n    assert {3, 7, 9, 12} == HumanEval.candidate({3, 7, 9, {6, 8}, {5, 12}, 12})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_792_count_list", "prompt": "# Write an elixirthon function to count the number of lists in a given number of lists.\n\ndefmodule HumanEval do\n  def candidate(input_list), do: count_list(input_list)\n  def count_list(input_list) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_list' do\n    assert 4 == HumanEval.candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    assert 3 == HumanEval.candidate([[1, 2], [2, 3], [4, 5]])\n    assert 2 == HumanEval.candidate([[1, 0], [2, 0]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_793_last", "prompt": "# Write an elixirthon function to find the last position of an element in a sorted list.\n\ndefmodule HumanEval do\n  def candidate(arr, x), do: last(arr, x)\n  def last(arr, x) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'last' do\n    assert 0 == HumanEval.candidate([1, 2, 3], 1)\n    assert 2 == HumanEval.candidate([1, 1, 1, 2, 3, 4], 1)\n    assert 3 == HumanEval.candidate([2, 3, 2, 3, 6, 8, 9], 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_starta_endb(text)\n  def text_starta_endb(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_starta_endb' do\n    assert true == HumanEval.candidate(\"aabbbb\")\n    assert false == HumanEval.candidate(\"aabAbbbc\")\n    assert false == HumanEval.candidate(\"accddbbjjj\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_796_return_sum", "prompt": "# Write function to find the sum of all items in the given map.\n\ndefmodule HumanEval do\n  def candidate(dict), do: return_sum(dict)\n  def return_sum(dict) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'return_sum' do\n    assert 600 == HumanEval.candidate(%{\"a\" => 100, \"b\" => 200, \"c\" => 300})\n    assert 88 == HumanEval.candidate(%{\"a\" => 25, \"b\" => 18, \"c\" => 45})\n    assert 124 == HumanEval.candidate(%{\"a\" => 36, \"b\" => 39, \"c\" => 49})\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "# Write an elixirthon function to find the sum of all odd natural numbers within the range l and r.\n\ndefmodule HumanEval do\n  def candidate(l, r), do: sum_in_range(l, r)\n  def sum_in_range(l, r) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_in_range' do\n    assert 8 == HumanEval.candidate(2, 5)\n    assert 12 == HumanEval.candidate(5, 7)\n    assert 40 == HumanEval.candidate(7, 13)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_798__sum", "prompt": "# Write an elixirthon function to find the sum of a list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: _sum(arr)\n  def _sum(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test '_sum' do\n    assert 6 == HumanEval.candidate([1, 2, 3])\n    assert 50 == HumanEval.candidate([15, 12, 13, 10])\n    assert 3 == HumanEval.candidate([0, 1, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_799_left_rotate", "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\ndefmodule HumanEval do\n  def candidate(n, d), do: left_rotate(n, d)\n  def left_rotate(n, d) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'left_rotate' do\n    assert 64 == HumanEval.candidate(16, 2)\n    assert 40 == HumanEval.candidate(10, 2)\n    assert 792 == HumanEval.candidate(99, 3)\n    assert 792 == HumanEval.candidate(99, 3)\n    assert 8 == HumanEval.candidate(1, 3)\n    assert 40 == HumanEval.candidate(5, 3)\n    assert 232 == HumanEval.candidate(29, 3)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "# Write a function to remove all whitespaces from a string.\n\ndefmodule HumanEval do\n  def candidate(text), do: remove_all_spaces(text)\n  def remove_all_spaces(text) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_all_spaces' do\n    assert \"pythonprogram\" == HumanEval.candidate(\"python  program\")\n    assert \"pythonprogramminglanguage\" == HumanEval.candidate(\"python   programming    language\")\n    assert \"pythonprogram\" == HumanEval.candidate(\"python                     program\")\n    assert \"pythonprogram\" == HumanEval.candidate(\"   python                     program\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "# Write an elixirthon function to count the number of equal numbers from three given integers.\n\ndefmodule HumanEval do\n  def candidate(x, y, z), do: test_three_equal(x, y, z)\n  def test_three_equal(x, y, z) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'test_three_equal' do\n    assert 3 == HumanEval.candidate(1, 1, 1)\n    assert 0 == HumanEval.candidate(-1, -2, -3)\n    assert 2 == HumanEval.candidate(1, 2, 2)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_802_count_rotation", "prompt": "# Write an elixirthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n\ndefmodule HumanEval do\n  def candidate(arr), do: count_rotation(arr)\n  def count_rotation(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_rotation' do\n    assert 1 == HumanEval.candidate([3, 2, 1])\n    assert 2 == HumanEval.candidate([4, 5, 1, 2, 3])\n    assert 3 == HumanEval.candidate([7, 8, 9, 1, 2, 3])\n    assert 0 == HumanEval.candidate([1, 2, 3])\n    assert 2 == HumanEval.candidate([1, 3, 2])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\ndefmodule HumanEval do\n  def candidate(n), do: is_perfect_square(n)\n  def is_perfect_square(n) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_perfect_square' do\n    assert false == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(36)\n    assert false == HumanEval.candidate(14)\n    assert true == HumanEval.candidate(196)\n    assert false == HumanEval.candidate(125)\n    assert true == HumanEval.candidate(15625)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_804_is_product_even", "prompt": "# Write a function to check whether the product of numbers in a list is even or not.\n\ndefmodule HumanEval do\n  def candidate(arr), do: is_product_even(arr)\n  def is_product_even(arr) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_product_even' do\n    assert true == HumanEval.candidate([1, 2, 3])\n    assert true == HumanEval.candidate([1, 2, 1, 4])\n    assert false == HumanEval.candidate([1, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\n\ndefmodule HumanEval do\n  def candidate(lists), do: max_sum_list(lists)\n  def max_sum_list(lists) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sum_list' do\n    assert [10, 11, 12] == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    assert [12, 11, 10] == HumanEval.candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]])\n    assert [2, 3, 1] == HumanEval.candidate([[2, 3, 1]])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: max_run_uppercase(test_str)\n  def max_run_uppercase(test_str) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_run_uppercase' do\n    assert 5 == HumanEval.candidate(\"GeMKSForGERksISBESt\")\n    assert 6 == HumanEval.candidate(\"PrECIOusMOVemENTSYT\")\n    assert 4 == HumanEval.candidate(\"GooGLEFluTTER\")\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_807_first_odd", "prompt": "# Write an elixirthon function to find the first odd number in a given list of numbers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: first_odd(nums)\n  def first_odd(nums) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_odd' do\n    assert 1 == HumanEval.candidate([1, 3, 5])\n    assert 1 == HumanEval.candidate([2, 4, 1, 3])\n    assert 9 == HumanEval.candidate([8, 9, 1])\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_808_check_K", "prompt": "# Write a function to check if the given tuples contain the k or not.\n\ndefmodule HumanEval do\n  def candidate(test_tup, K), do: check_K(test_tup, K)\n  def check_K(test_tup, K) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_K' do\n    assert true == HumanEval.candidate([10, 4, 5, 6, 8], 6)\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5, 6], 7)\n    assert true == HumanEval.candidate([7, 8, 9, 44, 11, 12], 11)\n  end\nend\n", "language": "elixir"}, {"task_id": "mbpp_809_check_smaller", "prompt": "# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: check_smaller(test_tup1, test_tup2)\n  def check_smaller(test_tup1, test_tup2) do\n    ", "test": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_smaller' do\n    assert false == HumanEval.candidate({1, 2, 3}, {2, 3, 4})\n    assert true == HumanEval.candidate({4, 5, 6}, {3, 4, 5})\n    assert true == HumanEval.candidate({11, 12, 13}, {10, 11, 12})\n  end\nend\n", "language": "elixir"}]