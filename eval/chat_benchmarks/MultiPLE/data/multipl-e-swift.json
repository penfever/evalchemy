[{"task_id": "HumanEval_0_has_close_elements", "prompt": "\n/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)", "language": "swift"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "\n/// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n/// separate those group into separate strings and return the array of those.\n/// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n/// Ignore any spaces in the input string.\n/// >>> separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])", "language": "swift"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "\n/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number: 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)", "language": "swift"}, {"task_id": "HumanEval_3_below_zero", "prompt": "\n/// You're given an array of deposit and withdrawal operations on a bank account that starts with\n/// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n/// at that point function should return true. Otherwise it should return false.\n/// >>> below_zero(operations: [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\nfunc below_zero(operations: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)", "language": "swift"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)", "language": "swift"}, {"task_id": "HumanEval_5_intersperse", "prompt": "\n/// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter: 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])", "language": "swift"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "\n/// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n/// For each of the group, output the deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])", "language": "swift"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "\n/// Filter an input array of strings only for ones that contain given substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings: [String], substring: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])", "language": "swift"}, {"task_id": "HumanEval_8_sum_product", "prompt": "\n/// For a given array of integers, return a tuple consisting of a sum and a product of all the integers in an array.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: [] as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))", "language": "swift"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "\n/// From a given array of integers, generate an array of rolling maximum element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers: [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])", "language": "swift"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "\n/// Find the shortest palindrome that begins with a supplied string.\n/// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string that is a palindrome.\n/// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string: \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n/// >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\nassert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string: \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\nassert(make_palindrome(string: \"jerry\") == \"jerryrrej\")", "language": "swift"}, {"task_id": "HumanEval_11_string_xor", "prompt": "\n/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(a: \"010\", b: \"110\")\n/// \"100\"\nfunc string_xor(a: String, b: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_xor(a: \"111000\", b: \"101010\") == \"010010\")\nassert(string_xor(a: \"1\", b: \"1\") == \"0\")\nassert(string_xor(a: \"0101\", b: \"0000\") == \"0101\")", "language": "swift"}, {"task_id": "HumanEval_12_longest", "prompt": "\n/// Out of array of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return nil in case the input array is empty.\n/// >>> longest(strings: [] as [String])\n/// nil\n/// >>> longest(strings: [\"a\", \"b\", \"c\"])\n/// \"a\"\n/// >>> longest(strings: [\"a\", \"bb\", \"ccc\"])\n/// \"ccc\"\nfunc longest(strings: [String]) -> String? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(longest(strings: [] as [String]) == nil)\nassert(longest(strings: [\"x\", \"y\", \"z\"]) == \"x\")\nassert(longest(strings: [\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")", "language": "swift"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a: 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)", "language": "swift"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "\n/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])", "language": "swift"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "\n/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")", "language": "swift"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "\n/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\")\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)", "language": "swift"}, {"task_id": "HumanEval_17_parse_music", "prompt": "\n/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return array of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string: \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string: String) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])", "language": "swift"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "\n/// Find how many times a given substring can be found in the original string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring: \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n/// 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)", "language": "swift"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one two three four five six\")", "language": "swift"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "\n/// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n/// other and return them in order (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))", "language": "swift"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "\n/// Given array of numbers (of at least two elements), apply a linear transform to that array,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers: [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])", "language": "swift"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "\n/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])", "language": "swift"}, {"task_id": "HumanEval_23_strlen", "prompt": "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n/// 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)", "language": "swift"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "\n/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) == 7)", "language": "swift"}, {"task_id": "HumanEval_25_factorize", "prompt": "\n/// Return array of prime factors of given integer in the order from smallest to largest.\n/// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n/// Input number should be equal to the product of all factors\n/// >>> factorize(n: 8)\n/// [2, 2, 2]\n/// >>> factorize(n: 25)\n/// [5, 5]\n/// >>> factorize(n: 70)\n/// [2, 5, 7]\nfunc factorize(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(factorize(n: 2) == [2])\nassert(factorize(n: 4) == [2, 2])\nassert(factorize(n: 8) == [2, 2, 2])\nassert(factorize(n: 57) == [3, 19])\nassert(factorize(n: 3249) == [3, 3, 19, 19])\nassert(factorize(n: 185193) == [3, 3, 3, 19, 19, 19])\nassert(factorize(n: 20577) == [3, 19, 19, 19])\nassert(factorize(n: 18) == [2, 3, 3])", "language": "swift"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "\n/// From an array of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers: [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])", "language": "swift"}, {"task_id": "HumanEval_27_flip_case", "prompt": "\n/// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")", "language": "swift"}, {"task_id": "HumanEval_28_concatenate", "prompt": "\n/// Concatenate array of strings into a single string\n/// >>> concatenate(strings: [] as [String])\n/// \"\"\n/// >>> concatenate(strings: [\"a\", \"b\", \"c\"])\n/// \"abc\"\nfunc concatenate(strings: [String]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")", "language": "swift"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "\n/// Filter an input array of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String], prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])", "language": "swift"}, {"task_id": "HumanEval_30_get_positive", "prompt": "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l: [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])", "language": "swift"}, {"task_id": "HumanEval_31_is_prime", "prompt": "\n/// Return true if a given number is prime, and false otherwise.\n/// >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n: 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n/// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\nfunc is_prime(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)", "language": "swift"}, {"task_id": "HumanEval_33_sort_third", "prompt": "\n/// This function takes an array l and returns an array l' such that\n/// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n/// to the values of the corresponding indicies of l, but sorted.\n/// >>> sort_third(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third(l: [5, 6, 3, 4, 8, 9, 2])\n/// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])", "language": "swift"}, {"task_id": "HumanEval_34_unique", "prompt": "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])", "language": "swift"}, {"task_id": "HumanEval_35_max_element", "prompt": "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1, 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfunc max_element(l: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)", "language": "swift"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "\n/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n/// >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)", "language": "swift"}, {"task_id": "HumanEval_37_sort_even", "prompt": "\n/// This function takes an array l and returns an array l' such that\n/// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>> sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n/// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])", "language": "swift"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "\n/// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n/// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n: 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)", "language": "swift"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "\n/// triples_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are three distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100]) == false)", "language": "swift"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "\n/// Imagine a road that's a perfectly straight infinitely long line.\n/// n cars are driving left to right;  simultaneously, a different set of n cars\n/// are driving right to left.   The two sets of cars start out being very far from\n/// each other.  All cars move in the same speed.  Two cars are said to collide\n/// when a car that's moving left to right hits a car that's moving right to left.\n/// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n/// in their trajectory as if they did not collide.\n/// This function outputs the number of such collisions.\nfunc car_race_collision(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n: 10) == 100)", "language": "swift"}, {"task_id": "HumanEval_42_incr_list", "prompt": "\n/// Return array with elements incremented by 1.\n/// >>> incr_list(l: [1, 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])", "language": "swift"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)", "language": "swift"}, {"task_id": "HumanEval_44_change_base", "prompt": "\n/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")", "language": "swift"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "\n/// Given length of a side and high return area for a triangle.\n/// >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)", "language": "swift"}, {"task_id": "HumanEval_46_fib4", "prompt": "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n/// 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)", "language": "swift"}, {"task_id": "HumanEval_47_median", "prompt": "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)", "language": "swift"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "\n/// Checks if given string is a palindrome\n/// >>> is_palindrome(text: \"\")\n/// true\n/// >>> is_palindrome(text: \"aba\")\n/// true\n/// >>> is_palindrome(text: \"aaaaa\")\n/// true\n/// >>> is_palindrome(text: \"zbcd\")\n/// false\nfunc is_palindrome(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text: \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text: \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text: \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)", "language": "swift"}, {"task_id": "HumanEval_49_modp", "prompt": "\n/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(n: 3, p: 5)\n/// 3\n/// >>> modp(n: 1101, p: 101)\n/// 2\n/// >>> modp(n: 0, p: 101)\n/// 1\n/// >>> modp(n: 3, p: 11)\n/// 8\n/// >>> modp(n: 100, p: 101)\n/// 1\nfunc modp(n: Int, p: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101, p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\nassert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n: 31, p: 5) == 3)", "language": "swift"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "\n/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")", "language": "swift"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "\n/// Return true if all numbers in the array l are below threshold t.\n/// >>> below_threshold(l: [1, 2, 4, 10], t: 100)\n/// true\n/// >>> below_threshold(l: [1, 20, 4, 10], t: 5)\n/// false\nfunc below_threshold(l: [Int], t: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(below_threshold(l: [1, 2, 4, 10], t: 100) == true)\nassert(below_threshold(l: [1, 20, 4, 10], t: 5) == false)\nassert(below_threshold(l: [1, 20, 4, 10], t: 21) == true)\nassert(below_threshold(l: [1, 20, 4, 10], t: 22) == true)\nassert(below_threshold(l: [1, 8, 4, 10], t: 11) == true)\nassert(below_threshold(l: [1, 8, 4, 10], t: 10) == false)", "language": "swift"}, {"task_id": "HumanEval_53_add", "prompt": "\n/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>> add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0) == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x: 7, y: 5) == 12)", "language": "swift"}, {"task_id": "HumanEval_54_same_chars", "prompt": "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\", s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\")\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n/// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\nfunc same_chars(s0: String, s1: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)", "language": "swift"}, {"task_id": "HumanEval_55_fib", "prompt": "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>> fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\nassert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)", "language": "swift"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n/// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets: \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)", "language": "swift"}, {"task_id": "HumanEval_57_monotonic", "prompt": "\n/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)", "language": "swift"}, {"task_id": "HumanEval_58_common", "prompt": "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])", "language": "swift"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n: 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)", "language": "swift"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n: 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n/// 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)", "language": "swift"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "\n/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n/// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets: \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)", "language": "swift"}, {"task_id": "HumanEval_62_derivative", "prompt": "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4, 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3, 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\nassert(derivative(xs: [1]) == [] as [Int])", "language": "swift"}, {"task_id": "HumanEval_63_fibfib", "prompt": "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n/// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n/// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n/// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)", "language": "swift"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "\n/// Write a function vowels_count which takes a string representing\n/// a word as input and returns the number of vowels in the string.\n/// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(s: \"abcde\")\n/// 2\n/// >>> vowels_count(s: \"ACEDY\")\n/// 3\nfunc vowels_count(s: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(vowels_count(s: \"abcde\") == 2)\nassert(vowels_count(s: \"Alone\") == 3)\nassert(vowels_count(s: \"key\") == 2)\nassert(vowels_count(s: \"bye\") == 1)\nassert(vowels_count(s: \"keY\") == 2)\nassert(vowels_count(s: \"bYe\") == 1)\nassert(vowels_count(s: \"ACEDY\") == 3)", "language": "swift"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "\n/// Circular shift the digits of the integer x, shift the digits right by shift\n/// and return the result as a string.\n/// If shift > number of digits, return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n/// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\")\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97, shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x: 11, shift: 101) == \"11\")", "language": "swift"}, {"task_id": "HumanEval_66_digitSum", "prompt": "\n/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)", "language": "swift"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "\n/// In this task, you will be given a string that represents a number of apples and oranges \n/// that are distributed in a basket of fruit this basket contains \n/// apples, oranges, and mango fruits. Given the string that represents the total number of \n/// the oranges and apples and an integer that represent the total number of the fruits \n/// in the basket return the number of the mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)", "language": "swift"}, {"task_id": "HumanEval_68_pluck", "prompt": "\n/// \"Given an array representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in an array, [ smalest_value, its index ],\n/// If there are no even values or the given array is empty, return [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr: [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3, 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])", "language": "swift"}, {"task_id": "HumanEval_69_search", "prompt": "\n/// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n/// zero, and has a frequency greater than or equal to the value of the integer itself. \n/// The frequency of an integer is the number of times it appears in the array.\n/// If no such a value exist, return -1.\n/// Examples:\n/// >>> search(lst: [4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(lst: [1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(lst: [5, 5, 4, 4, 4])\n/// -1\nfunc search(lst: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(lst: [5, 5, 5, 5, 1]) == 1)\nassert(search(lst: [4, 1, 4, 1, 4, 4]) == 4)\nassert(search(lst: [3, 3]) == -1)\nassert(search(lst: [8, 8, 8, 8, 8, 8, 8, 8]) == 8)\nassert(search(lst: [2, 3, 3, 2, 2]) == 2)\nassert(search(lst: [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\nassert(search(lst: [3, 2, 8, 2]) == 2)\nassert(search(lst: [6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1)\nassert(search(lst: [8, 8, 3, 6, 5, 6, 4]) == -1)\nassert(search(lst: [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1)\nassert(search(lst: [1, 9, 10, 1, 3]) == 1)\nassert(search(lst: [6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\nassert(search(lst: [1]) == 1)\nassert(search(lst: [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\nassert(search(lst: [2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\nassert(search(lst: [1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1)\nassert(search(lst: [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\nassert(search(lst: [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\nassert(search(lst: [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2)\nassert(search(lst: [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1)\nassert(search(lst: [10]) == -1)\nassert(search(lst: [9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\nassert(search(lst: [5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1)\nassert(search(lst: [7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\nassert(search(lst: [3, 10, 10, 9, 2]) == -1)", "language": "swift"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "\n/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])", "language": "swift"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "\n/// Given the lengths of the three sides of a triangle. Return the area of\n/// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1, b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)", "language": "swift"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "\n/// Write a function that returns true if the object q will fly, and false otherwise.\n/// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n/// Example:\n/// >>> will_it_fly(q: [1, 2], w: 5)\n/// false\n/// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>> will_it_fly(q: [3, 2, 3], w: 1)\n/// false\n/// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n/// >>> will_it_fly(q: [3, 2, 3], w: 9)\n/// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n/// >>> will_it_fly(q: [3], w: 5)\n/// true\n/// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q: [Int], w: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(will_it_fly(q: [3, 2, 3], w: 9) == true)\nassert(will_it_fly(q: [1, 2], w: 5) == false)\nassert(will_it_fly(q: [3], w: 5) == true)\nassert(will_it_fly(q: [3, 2, 3], w: 1) == false)\nassert(will_it_fly(q: [1, 2, 3], w: 6) == false)\nassert(will_it_fly(q: [5], w: 5) == true)", "language": "swift"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "\n/// Given an array arr of integers, find the minimum number of elements that\n/// need to be changed to make the array palindromic. A palindromic array is an array that\n/// is read the same backwards and forwards. In one change, you can change one element to any other element.\n/// For example:\n/// >>> smallest_change(arr: [1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(arr: [1, 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(arr: [1, 2, 3, 2, 1])\n/// 0\nfunc smallest_change(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(smallest_change(arr: [1, 2, 3, 5, 4, 7, 9, 6]) == 4)\nassert(smallest_change(arr: [1, 2, 3, 4, 3, 2, 2]) == 1)\nassert(smallest_change(arr: [1, 4, 2]) == 1)\nassert(smallest_change(arr: [1, 4, 4, 2]) == 1)\nassert(smallest_change(arr: [1, 2, 3, 2, 1]) == 0)\nassert(smallest_change(arr: [3, 1, 1, 3]) == 0)\nassert(smallest_change(arr: [1]) == 0)\nassert(smallest_change(arr: [0, 1]) == 1)", "language": "swift"}, {"task_id": "HumanEval_74_total_match", "prompt": "\n/// Write a function that accepts two arrays of strings and returns the array that has \n/// total number of chars in the all strings of the array less than the other array.\n/// if the two arrays have the same number of chars, return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1: [String], lst2: [String]) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])", "language": "swift"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "\n/// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a: 1001) == true)", "language": "swift"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "\n/// Your task is to write a function that returns true if a number x is a simple\n/// power of n and false in other cases.\n/// x is a simple power of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n/// true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x: 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>> is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n/// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)", "language": "swift"}, {"task_id": "HumanEval_77_iscube", "prompt": "\n/// Write a function that takes an integer a and returns true \n/// if this ingeger is a cube of some integer number.\n/// Note: you may assume the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n/// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a: 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\nfunc iscube(a: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)", "language": "swift"}, {"task_id": "HumanEval_78_hex_key", "prompt": "\n/// You have been tasked to write a function that receives \n/// a hexadecimal number as a string and counts the number of hexadecimal \n/// digits that are primes (prime number, or a prime, is a natural number \n/// greater than 1 that is not a product of two smaller natural numbers).\n/// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>> hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n/// >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n/// 2\nfunc hex_key(num: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num: \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num: \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num: \"112233445566778899AABBCCDDEEFF00\") == 12)", "language": "swift"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "\n/// You will be given a number in decimal form and your task is to convert it to\n/// binary format. The function should return a string, with each character representing a binary\n/// number. Each character in the string will be '0' or '1'.\n/// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n/// The extra characters are there to help with the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")", "language": "swift"}, {"task_id": "HumanEval_80_is_happy", "prompt": "\n/// You are given a string s.\n/// Your task is to check if the string is hapswift or not.\n/// A string is hapswift if its length is at least 3 and every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: \"a\")\n/// false\n/// >>> is_happy(s: \"aa\")\n/// false\n/// >>> is_happy(s: \"abcd\")\n/// true\n/// >>> is_happy(s: \"aabb\")\n/// false\n/// >>> is_happy(s: \"adb\")\n/// true\n/// >>> is_happy(s: \"xyy\")\n/// false\nfunc is_happy(s: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)", "language": "swift"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "\n/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you an array of GPAs for some students and you have to write \n/// a function that can output an array of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])", "language": "swift"}, {"task_id": "HumanEval_82_prime_length", "prompt": "\n/// Write a function that takes a string and returns true if the string\n/// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string: \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n/// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string: \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\") == false)", "language": "swift"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "\n/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)", "language": "swift"}, {"task_id": "HumanEval_84_solve", "prompt": "\n/// Given a positive integer N, return the total sum of its digits in binary.\n/// Example\n/// >>> solve(N: 1000)\n/// \"1\"\n/// >>> solve(N: 150)\n/// \"110\"\n/// >>> solve(N: 147)\n/// \"1100\"\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfunc solve(N: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(N: 1000) == \"1\")\nassert(solve(N: 150) == \"110\")\nassert(solve(N: 147) == \"1100\")\nassert(solve(N: 333) == \"1001\")\nassert(solve(N: 963) == \"10010\")", "language": "swift"}, {"task_id": "HumanEval_85_add", "prompt": "\n/// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\nfunc add(lst: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)", "language": "swift"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "\n/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n/// \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")", "language": "swift"}, {"task_id": "HumanEval_87_get_row", "prompt": "\n/// You are given a 2 dimensional data, as a nested arrays,\n/// which is similar to matrix, however, unlike matrices,\n/// each row may contain a different number of columns.\n/// Given lst, and integer x, find integers x in the array,\n/// and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially by rows in ascending order.\n/// Also, sort coordinates of the row by columns in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n/// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst: [[Int]], x: Int) -> [(Int, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\nassert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst: [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3) == [(2, 2)])", "language": "swift"}, {"task_id": "HumanEval_88_sort_array", "prompt": "\n/// Given an array of non-negative integers, return a coswift of the given array after sorting,\n/// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n/// or sort it in descending order if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array: [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n/// >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array: [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])", "language": "swift"}, {"task_id": "HumanEval_89_encrypt", "prompt": "\n/// Create a function encrypt that takes a string as an argument and\n/// returns a string encrypted with the alphabet being rotated. \n/// The alphabet should be rotated in a manner such that the letters \n/// shift down by two multiplied to two places.\n/// For example:\n/// >>> encrypt(s: \"hi\")\n/// \"lm\"\n/// >>> encrypt(s: \"asdfghjkl\")\n/// \"ewhjklnop\"\n/// >>> encrypt(s: \"gf\")\n/// \"kj\"\n/// >>> encrypt(s: \"et\")\n/// \"ix\"\nfunc encrypt(s: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") == \"e\")", "language": "swift"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "\n/// You are given an array of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the array.\n/// Return nil if there is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int]) -> Int? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)", "language": "swift"}, {"task_id": "HumanEval_91_is_bored", "prompt": "\n/// You'll be given a string of words, and your task is to count the number\n/// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)", "language": "swift"}, {"task_id": "HumanEval_92_any_int", "prompt": "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)", "language": "swift"}, {"task_id": "HumanEval_93_encode", "prompt": "\n/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message: \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")", "language": "swift"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "\n/// You are given an array of integers.\n/// You need to find the largest prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n/// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\nfunc skjkasdkd(lst: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)", "language": "swift"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "\n/// Implement a function that takes an non-negative integer and returns an array of the first n\n/// integers that are prime numbers and less than n.\n/// for example:\n/// >>> count_up_to(n: 5)\n/// [2, 3]\n/// >>> count_up_to(n: 11)\n/// [2, 3, 5, 7]\n/// >>> count_up_to(n: 0)\n/// [] as [Int]\n/// >>> count_up_to(n: 20)\n/// [2, 3, 5, 7, 11, 13, 17, 19]\n/// >>> count_up_to(n: 1)\n/// [] as [Int]\n/// >>> count_up_to(n: 18)\n/// [2, 3, 5, 7, 11, 13, 17]\nfunc count_up_to(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_up_to(n: 5) == [2, 3])\nassert(count_up_to(n: 6) == [2, 3, 5])\nassert(count_up_to(n: 7) == [2, 3, 5])\nassert(count_up_to(n: 10) == [2, 3, 5, 7])\nassert(count_up_to(n: 0) == [] as [Int])\nassert(count_up_to(n: 22) == [2, 3, 5, 7, 11, 13, 17, 19])\nassert(count_up_to(n: 1) == [] as [Int])\nassert(count_up_to(n: 18) == [2, 3, 5, 7, 11, 13, 17])\nassert(count_up_to(n: 47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\nassert(count_up_to(n: 101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])", "language": "swift"}, {"task_id": "HumanEval_97_multiply", "prompt": "\n/// Complete the function that takes two integers and returns \n/// the product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19, b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a: 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)", "language": "swift"}, {"task_id": "HumanEval_98_count_upper", "prompt": "\n/// Given a string s, count the number of uppercase vowels in even indices.\n/// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s: \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)", "language": "swift"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "\n/// Create a function that takes a value (string) representing a number\n/// and returns the closest integer to it. If the number is equidistant\n/// from two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value: \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n/// Rounding away from zero means that if the given number is equidistant\n/// from two integers, the one you should return is the one that is the\n/// farthest from zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\nassert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"-15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value: \"0\") == 0)", "language": "swift"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "\n/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in an array, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])", "language": "swift"}, {"task_id": "HumanEval_101_words_string", "prompt": "\n/// You will be given a string of words separated by commas or spaces. Your task is\n/// to split the string into words and return an array of the words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n/// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One, two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])", "language": "swift"}, {"task_id": "HumanEval_102_choose_num", "prompt": "\n/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n/// -1\nfunc choose_num(x: Int, y: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)", "language": "swift"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "\nextension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))", "language": "swift"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "\n/// Given an array of positive integers x. return a sorted array of all \n/// elements that hasn't any even digit.\n/// Note: Returned array should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n/// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])", "language": "swift"}, {"task_id": "HumanEval_105_by_length", "prompt": "\n/// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n/// reverse the resulting array, and then replace each digit by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n/// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])", "language": "swift"}, {"task_id": "HumanEval_106_f", "prompt": "\n/// Implement the function f that takes n as a parameter,\n/// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts from 1.\n/// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\nfunc f(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])", "language": "swift"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "\n/// Given a positive integer n, return a tuple that has the number of even and odd\n/// integer palindromes that fall within the range(1, n), inclusive.\n/// Example 1:\n/// >>> even_odd_palindrome(n: 3)\n/// (1, 2)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n/// Example 2:\n/// >>> even_odd_palindrome(n: 12)\n/// (4, 6)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n/// Note:\n/// 1. 1 <= n <= 10^3\n/// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n: Int) -> (Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_palindrome(n: 123) == (8, 13))\nassert(even_odd_palindrome(n: 12) == (4, 6))\nassert(even_odd_palindrome(n: 3) == (1, 2))\nassert(even_odd_palindrome(n: 63) == (6, 8))\nassert(even_odd_palindrome(n: 25) == (5, 6))\nassert(even_odd_palindrome(n: 19) == (4, 6))\nassert(even_odd_palindrome(n: 9) == (4, 5))\nassert(even_odd_palindrome(n: 1) == (0, 1))", "language": "swift"}, {"task_id": "HumanEval_108_count_nums", "prompt": "\n/// Write a function count_nums which takes an array of integers and returns\n/// the number of elements which has a sum of digits > 0.\n/// If a number is negative, then its first signed digit will be negative:\n/// e.g. -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n/// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr: [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)", "language": "swift"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n/// numbers in the array will be randomly ordered. Your task is to determine if\n/// it is possible to get an array sorted in non-decreasing order by performing \n/// the following operation on the given array:\n/// You are allowed to perform right shift operation any number of times.\n/// One right shift operation means shifting all elements of the array by one\n/// position in the right direction. The last element of the array will be moved to\n/// the starting position in the array i.e. 0th index. \n/// If it is possible to obtain the sorted array by performing the above operation\n/// then return true else return false.\n/// If the given array is empty then return true.\n/// Note: The given array is guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr: [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations, non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr: [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing order for the given\n/// array by performing any number of right shift operations.\nfunc move_one_ball(arr: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)", "language": "swift"}, {"task_id": "HumanEval_110_exchange", "prompt": "\n/// In this problem, you will implement a function that takes two arrays of numbers,\n/// and determines whether it is possible to perform an exchange of elements\n/// between them to make lst1 an array of only even numbers.\n/// There is no limit on the number of exchanged elements between lst1 and lst2.\n/// If it is possible to exchange elements between the lst1 and lst2 to make\n/// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n/// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")", "language": "swift"}, {"task_id": "HumanEval_111_histogram", "prompt": "\n/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])", "language": "swift"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "\n/// Task\n/// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n/// then check if the result string is palindrome.\n/// A string is called palindrome if it reads the same backward as forward.\n/// You should return a tuple containing the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s: \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\", c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\", c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String) -> (String, Bool) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))", "language": "swift"}, {"task_id": "HumanEval_113_odd_count", "prompt": "\n/// Given an array of strings, where each string consists of only digits, return an array.\n/// Each element i of the output should be \"the number of odd elements in the\n/// string i of the input.\" where all the i's should be replaced by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n/// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String]) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])", "language": "swift"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "\n/// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)", "language": "swift"}, {"task_id": "HumanEval_115_max_fill", "prompt": "\n/// You are given a rectangular grid of wells. Each row represents a single well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well has a corresponding bucket that can be used to extract water from it, \n/// and all buckets have the same capacity.\n/// Your task is to use the buckets to empty the wells.\n/// Output the number of times you need to lower the buckets.\n/// Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n/// >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1, 1, 1]], capacity: 9) == 2)", "language": "swift"}, {"task_id": "HumanEval_116_sort_array", "prompt": "\n/// In this Kata, you have to sort an array of non-negative integers according to\n/// number of ones in their binary representation in ascending order.\n/// For similar number of ones, sort based on decimal value.\n/// It must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])", "language": "swift"}, {"task_id": "HumanEval_117_select_words", "prompt": "\n/// Given a string s and a natural number n, you have been tasked to implement \n/// a function that returns an array of all words from string s that contain exactly \n/// n consonants, in order these words appear in the string s.\n/// If the string s is empty then the function should return an empty array.\n/// Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s: String, n: Int) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])", "language": "swift"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "\n/// You are given a word. Your task is to find the closest vowel that stands between \n/// two consonants from the right side of the word (case sensitive).\n/// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n/// find any vowel met the above condition. \n/// You may assume that the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word: \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word: \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")", "language": "swift"}, {"task_id": "HumanEval_119_match_parens", "prompt": "\n/// You are given an array of two strings, both strings consist of open\n/// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if it is possible to concatenate the two strings in\n/// some order, that the resulting string will be good.\n/// A string S is considered to be good if and only if all parentheses in S\n/// are balanced. For example: the string '(())()' is good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(lst: [\"()(\", \")\"])\n/// \"Yes\"\n/// >>> match_parens(lst: [\")\", \")\"])\n/// \"No\"\nfunc match_parens(lst: [String]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(match_parens(lst: [\"()(\", \")\"]) == \"Yes\")\nassert(match_parens(lst: [\")\", \")\"]) == \"No\")\nassert(match_parens(lst: [\"(()(())\", \"())())\"]) == \"No\")\nassert(match_parens(lst: [\")())\", \"(()()(\"]) == \"Yes\")\nassert(match_parens(lst: [\"(())))\", \"(()())((\"]) == \"Yes\")\nassert(match_parens(lst: [\"()\", \"())\"]) == \"No\")\nassert(match_parens(lst: [\"(()(\", \"()))()\"]) == \"Yes\")\nassert(match_parens(lst: [\"((((\", \"((())\"]) == \"No\")\nassert(match_parens(lst: [\")(()\", \"(()(\"]) == \"No\")\nassert(match_parens(lst: [\")(\", \")(\"]) == \"No\")\nassert(match_parens(lst: [\"(\", \")\"]) == \"Yes\")\nassert(match_parens(lst: [\")\", \"(\"]) == \"Yes\")", "language": "swift"}, {"task_id": "HumanEval_120_maximum", "prompt": "\n/// Given an array arr of integers and a positive integer k, return a sorted array \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n/// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])", "language": "swift"}, {"task_id": "HumanEval_121_solution", "prompt": "\n/// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst: [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)", "language": "swift"}, {"task_id": "HumanEval_122_add_elements", "prompt": "\n/// Given a non-empty array of integers arr and an integer k, return\n/// the sum of the elements with at most two digits from the first k elements of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)", "language": "swift"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "\n/// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n/// as follows: start with any positive integer n. Then each term is obtained from the \n/// previous term as follows: if the previous term is even, the next term is one half of \n/// the previous term. If the previous term is odd, the next term is 3 times the previous\n/// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n/// 2. returned array sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n/// >>> get_odd_collatz(n: 5)\n/// [1, 5]\nfunc get_odd_collatz(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_odd_collatz(n: 14) == [1, 5, 7, 11, 13, 17])\nassert(get_odd_collatz(n: 5) == [1, 5])\nassert(get_odd_collatz(n: 12) == [1, 3, 5])\nassert(get_odd_collatz(n: 1) == [1])", "language": "swift"}, {"task_id": "HumanEval_124_valid_date", "prompt": "\n/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\nassert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\") == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date: \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\nassert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\") == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date: \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\nassert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\") == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date: \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)", "language": "swift"}, {"task_id": "HumanEval_125_split_words", "prompt": "\nextension Int: Error {}\n        \n/// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n/// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))", "language": "swift"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "\n/// Given an array of numbers, return whether or not they are sorted\n/// in ascending order. If array has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(lst: [5])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(lst: [1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(lst: [1, 2, 2, 2, 3, 4])\n/// false\nfunc is_sorted(lst: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)", "language": "swift"}, {"task_id": "HumanEval_127_intersection", "prompt": "\n/// You are given two intervals,\n/// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed which means that the interval (start, end)\n/// includes both start and end.\n/// For each given interval, it is assumed that its start is less or equal its end.\n/// Your task is to determine whether the length of intersection of these two \n/// intervals is a prime number.\n/// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n/// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n/// [input/output] samples:\n/// >>> intersection(interval1: (1, 2), interval2: (2, 3))\n/// \"NO\"\n/// >>> intersection(interval1: (-1, 1), interval2: (0, 4))\n/// \"NO\"\n/// >>> intersection(interval1: (-3, -1), interval2: (-5, 5))\n/// \"YES\"\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int)) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection(interval1: (1, 2), interval2: (2, 3)) == \"NO\")\nassert(intersection(interval1: (-1, 1), interval2: (0, 4)) == \"NO\")\nassert(intersection(interval1: (-3, -1), interval2: (-5, 5)) == \"YES\")\nassert(intersection(interval1: (-2, 2), interval2: (-4, 0)) == \"YES\")\nassert(intersection(interval1: (-11, 2), interval2: (-1, -1)) == \"NO\")\nassert(intersection(interval1: (1, 2), interval2: (3, 5)) == \"NO\")\nassert(intersection(interval1: (1, 2), interval2: (1, 2)) == \"NO\")\nassert(intersection(interval1: (-2, -2), interval2: (-3, -2)) == \"NO\")", "language": "swift"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "\n/// You are given an array arr of integers and you need to return\n/// sum of magnitudes of integers multiplied by product of all signs\n/// of each number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr: [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr: [Int]) -> Int? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\nassert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1, 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr: [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\nassert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1, 0]) == 0)", "language": "swift"}, {"task_id": "HumanEval_129_minPath", "prompt": "\n/// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n/// each cell of the grid contains a value. Every integer in the range [1, N * N]\n/// inclusive appears exactly once on the cells of the grid.\n/// You have to find the minimum path of length k in the grid. You can start\n/// from any cell, and in each step you can move to any of the neighbor cells,\n/// in other words, you can go to cells which share an edge with you current\n/// cell.\n/// Please note that a path of length k means visiting exactly k cells (not\n/// necessarily distinct).\n/// You CANNOT go off the grid.\n/// A path A (of length k) is considered less than a path B (of length k) if\n/// after making the ordered arrays of the values on the cells that A and B go\n/// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n/// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n/// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n/// lst_A[j] = lst_B[j].\n/// It is guaranteed that the answer is unique.\n/// Return an ordered array of the values on the cells that the minimum path go through.\n/// Examples:    \n/// >>> minPath(grid: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k: 3)\n/// [1, 2, 1]\n/// >>> minPath(grid: [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k: 1)\n/// [1]\nfunc minPath(grid: [[Int]], k: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(minPath(grid: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k: 3) == [1, 2, 1])\nassert(minPath(grid: [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k: 1) == [1])\nassert(minPath(grid: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], k: 4) == [1, 2, 1, 2])\nassert(minPath(grid: [[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], k: 7) == [1, 10, 1, 10, 1, 10, 1])\nassert(minPath(grid: [[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], k: 5) == [1, 7, 1, 7, 1])\nassert(minPath(grid: [[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], k: 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1])\nassert(minPath(grid: [[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], k: 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\nassert(minPath(grid: [[2, 7, 4], [3, 1, 5], [6, 8, 9]], k: 8) == [1, 3, 1, 3, 1, 3, 1, 3])\nassert(minPath(grid: [[6, 1, 5], [3, 8, 9], [2, 7, 4]], k: 8) == [1, 5, 1, 5, 1, 5, 1, 5])\nassert(minPath(grid: [[1, 2], [3, 4]], k: 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\nassert(minPath(grid: [[1, 3], [3, 2]], k: 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])", "language": "swift"}, {"task_id": "HumanEval_130_tri", "prompt": "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])", "language": "swift"}, {"task_id": "HumanEval_131_digits", "prompt": "\n/// Given a positive integer n, return the product of the odd digits.\n/// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(n: 1)\n/// 1\n/// >>> digits(n: 4)\n/// 0\n/// >>> digits(n: 235)\n/// 15\nfunc digits(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)", "language": "swift"}, {"task_id": "HumanEval_132_is_nested", "prompt": "\n/// Create a function that takes a string as input which contains only square brackets.\n/// The function should return true if and only if there is a valid subsequence of brackets \n/// where at least one bracket in the subsequence is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string: \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n/// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\")\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)", "language": "swift"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "\n/// You are given an array of numbers.\n/// You need to return the sum of squared numbers in the given array,\n/// round each element in the array to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0, 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>> sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4, 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc sum_squares(lst: [Double]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)", "language": "swift"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "\n/// Create a function that returns true if the last character\n/// of a given string is an alphabetical character and is not\n/// a part of a word, and false otherwise.\n/// Note: \"word\" is a group of characters separated by space.\n/// Examples:\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pie\")\n/// false\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pi e\")\n/// true\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pi e \")\n/// false\n/// >>> check_if_last_char_is_a_letter(txt: \"\")\n/// false\nfunc check_if_last_char_is_a_letter(txt: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \") == false)", "language": "swift"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "\n/// Create a function which returns the largest index of an element which\n/// is not greater than or equal to the element immediately preceding it. If\n/// no such element exists then return -1. The given array will not contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1, 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)", "language": "swift"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the largest of negative integers, and 'b' is the smallest\n/// of positive integers in an array.\n/// If there is no negative or positive integers, return them as nil.\n/// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n/// (nil, 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n/// >>> largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\nassert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst: [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3, -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100, 1]) == (-3, 1))", "language": "swift"}, {"task_id": "HumanEval_137_compare_one", "prompt": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2)) == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) == .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\nassert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a: .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a: .stringValue(\"1\"), b: .intValue(1)) == nil)", "language": "swift"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "\n/// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n/// Example\n/// >>> is_equal_to_sum_even(n: 4)\n/// false\n/// >>> is_equal_to_sum_even(n: 6)\n/// false\n/// >>> is_equal_to_sum_even(n: 8)\n/// true\nfunc is_equal_to_sum_even(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_equal_to_sum_even(n: 4) == false)\nassert(is_equal_to_sum_even(n: 6) == false)\nassert(is_equal_to_sum_even(n: 8) == true)\nassert(is_equal_to_sum_even(n: 10) == true)\nassert(is_equal_to_sum_even(n: 11) == false)\nassert(is_equal_to_sum_even(n: 12) == true)\nassert(is_equal_to_sum_even(n: 13) == false)\nassert(is_equal_to_sum_even(n: 16) == true)", "language": "swift"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)", "language": "swift"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "\n/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>> fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text: \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n/// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\")\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text: \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text: \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")", "language": "swift"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "\n/// Create a function which takes a string representing a file's name, and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n/// A file's name is considered to be valid if and only if all the following conditions \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The substring before the dot should not be empty, and it starts with a letter from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name: \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\")\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\") == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\nassert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name: \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\nassert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name: \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\") == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name: \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\") == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\")\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name: \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\") == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name: \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\") == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name: \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\") == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")", "language": "swift"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "\n/// You are given a string representing a sentence,\n/// the sentence contains some words separated by a space,\n/// and you have to return a string that contains the words from the original sentence,\n/// whose lengths are prime numbers,\n/// the order of the words in the new string should be the same as the original one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n/// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\")\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")", "language": "swift"}, {"task_id": "HumanEval_144_simplify", "prompt": "\n/// Your task is to implement a function that will simplify the expression\n/// x * n. The function returns true if x * n evaluates to a whole number and false\n/// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n/// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n/// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n/// >>> simplify(x: \"1/5\", n: \"5/1\")\n/// true\n/// >>> simplify(x: \"1/6\", n: \"2/1\")\n/// false\n/// >>> simplify(x: \"7/10\", n: \"10/2\")\n/// false\nfunc simplify(x: String, n: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(simplify(x: \"1/5\", n: \"5/1\") == true)\nassert(simplify(x: \"1/6\", n: \"2/1\") == false)\nassert(simplify(x: \"5/1\", n: \"3/1\") == true)\nassert(simplify(x: \"7/10\", n: \"10/2\") == false)\nassert(simplify(x: \"2/10\", n: \"50/10\") == true)\nassert(simplify(x: \"7/2\", n: \"4/2\") == true)\nassert(simplify(x: \"11/6\", n: \"6/1\") == true)\nassert(simplify(x: \"2/3\", n: \"5/2\") == false)\nassert(simplify(x: \"5/2\", n: \"3/5\") == false)\nassert(simplify(x: \"2/4\", n: \"8/4\") == true)\nassert(simplify(x: \"2/4\", n: \"4/2\") == true)\nassert(simplify(x: \"1/5\", n: \"5/1\") == true)\nassert(simplify(x: \"1/5\", n: \"1/5\") == false)", "language": "swift"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "\n/// Write a function which sorts the given array of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])", "language": "swift"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "\n/// Write a function that takes an array of numbers as input and returns \n/// the number of elements in the array that are greater than 10 and both \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n/// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums: [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int]) == 0)", "language": "swift"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "\n/// You are given a positive integer n. You have to create an integer array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)", "language": "swift"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "\n/// Write a function that accepts an array of strings as a parameter,\n/// deletes the strings that have odd lengths from it,\n/// and returns the resulted array with a sorted order,\n/// The array is always an array of strings and never an array of numbers,\n/// and it may contain duplicates.\n/// The order of the array should be ascending by length of each word, and you\n/// should return the array sorted by that rule.\n/// If two words have the same length, sort the array alphabetically.\n/// The function should return an array of strings in sorted order.\n/// You may assume that all words will have the same length.\n/// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])", "language": "swift"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "\n/// A simple program which should return the value of x if n is \n/// a prime number and should return the value of y otherwise.\n/// Examples:\n/// >>> x_or_y(n: 7, x: 34, y: 12)\n/// 34\n/// >>> x_or_y(n: 15, x: 8, y: 5)\n/// 5\nfunc x_or_y(n: Int, x: Int, y: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(x_or_y(n: 7, x: 34, y: 12) == 34)\nassert(x_or_y(n: 15, x: 8, y: 5) == 5)\nassert(x_or_y(n: 3, x: 33, y: 5212) == 33)\nassert(x_or_y(n: 1259, x: 3, y: 52) == 3)\nassert(x_or_y(n: 7919, x: -1, y: 12) == -1)\nassert(x_or_y(n: 3609, x: 1245, y: 583) == 583)\nassert(x_or_y(n: 91, x: 56, y: 129) == 129)\nassert(x_or_y(n: 6, x: 34, y: 1234) == 1234)\nassert(x_or_y(n: 1, x: 2, y: 0) == 0)\nassert(x_or_y(n: 2, x: 2, y: 0) == 2)", "language": "swift"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "\n/// Given an array of numbers, return the sum of squares of the numbers\n/// in the array that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst: [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n/// >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty, return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)", "language": "swift"}, {"task_id": "HumanEval_152_compare", "prompt": "\n/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n/// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0, 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0, 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])", "language": "swift"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "\n/// You will be given the name of a class (a string) and an array of extensions.\n/// The extensions are to be used to load additional classes to the class. The\n/// strength of the extension is as follows: Let CAP be the number of the uppercase\n/// letters in the extension's name, and let SM be the number of lowercase letters \n/// in the extension's name, the strength is given by the fraction CAP - SM. \n/// You should find the strongest extension and return a string in this \n/// format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions with the same strength, you should\n/// choose the one that comes first in the array.\n/// For example, if you are given \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name: String, extensions: [String]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")", "language": "swift"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "\n/// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a: \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b: \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n/// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>> cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a: \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)", "language": "swift"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "\n/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))", "language": "swift"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "\n/// Given a positive integer, obtain its roman numeral equivalent as a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number: 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\nfunc int_to_mini_roman(number: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")", "language": "swift"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "\n/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)", "language": "swift"}, {"task_id": "HumanEval_158_find_max", "prompt": "\n/// Write a function that accepts an array of strings.\n/// The array contains different words. Return the word with maximum number\n/// of unique characters. If multiple strings have maximum number of unique\n/// characters, return the one which comes first in lexicographical order.\n/// >>> find_max(words: [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")", "language": "swift"}, {"task_id": "HumanEval_159_eat", "prompt": "\n/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])", "language": "swift"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "\n/// Given two arrays operator, and operand. The first array has basic algebra operations, and \n/// the second array is an array of integers. Use the two given arrays to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator array is equal to the length of operand array minus one.\n/// Operand is an array of of non-negative integers.\n/// Operator array has at least one operator, and operand array has at least two operands.\nfunc do_algebra(operator: [String], operand: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)", "language": "swift"}, {"task_id": "HumanEval_161_solve", "prompt": "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")", "language": "swift"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "\n/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text: String) -> String? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")", "language": "swift"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "\n/// Given two positive integers a and b, return the even digits between a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(a: 2, b: 8)\n/// [2, 4, 6, 8]\n/// >>> generate_integers(a: 8, b: 2)\n/// [2, 4, 6, 8]\n/// >>> generate_integers(a: 10, b: 14)\n/// [] as [Int]\nfunc generate_integers(a: Int, b: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(generate_integers(a: 2, b: 10) == [2, 4, 6, 8])\nassert(generate_integers(a: 10, b: 2) == [2, 4, 6, 8])\nassert(generate_integers(a: 132, b: 2) == [2, 4, 6, 8])\nassert(generate_integers(a: 17, b: 89) == [] as [Int])", "language": "swift"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "\n/// Write a swiftthon function to identify non-prime numbers.\nfunc is_not_prime(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_not_prime(n: 2) == false)\nassert(is_not_prime(n: 10) == true)\nassert(is_not_prime(n: 35) == true)\nassert(is_not_prime(n: 37) == false)", "language": "swift"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "\n/// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunc heap_queue_largest(nums: [Int], n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 3) == [85, 75, 65])\nassert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 2) == [85, 75])\nassert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 5) == [85, 75, 65, 58, 35])", "language": "swift"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "\n/// Write a swiftthon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)", "language": "swift"}, {"task_id": "mbpp_8_square_nums", "prompt": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])", "language": "swift"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "\n/// Write a swiftthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Rotations(str: \"aaaa\") == 1)\nassert(find_Rotations(str: \"ab\") == 2)\nassert(find_Rotations(str: \"abc\") == 3)", "language": "swift"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "\n/// Write a swiftthon function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s: String, ch: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_Occ(s: \"hello\", ch: \"l\") == \"heo\")\nassert(remove_Occ(s: \"abcda\", ch: \"a\") == \"bcd\")\nassert(remove_Occ(s: \"PHP\", ch: \"P\") == \"H\")", "language": "swift"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])", "language": "swift"}, {"task_id": "mbpp_14_find_Volume", "prompt": "\n/// Write a swiftthon function to find the volume of a triangular prism.\nfunc find_Volume(l: Int, b: Int, h: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Volume(l: 10, b: 8, h: 6) == 240)\nassert(find_Volume(l: 3, b: 2, h: 2) == 6)\nassert(find_Volume(l: 1, b: 2, h: 1) == 1)", "language": "swift"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "\n/// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunc text_lowercase_underscore(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_lowercase_underscore(text: \"aab_cbbbc\") == true)\nassert(text_lowercase_underscore(text: \"aab_Abbbc\") == false)\nassert(text_lowercase_underscore(text: \"Aaab_abbbc\") == false)", "language": "swift"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "\n/// Write a function that returns the perimeter of a square given its side length as input.\nfunc square_perimeter(a: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_perimeter(a: 10) == 40)\nassert(square_perimeter(a: 5) == 20)\nassert(square_perimeter(a: 4) == 16)", "language": "swift"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")", "language": "swift"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "\n/// Write a function to find whether a given array of integers contains any duplicate element.\nfunc test_duplicate(arraynums: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_duplicate(arraynums: [1, 2, 3, 4, 5]) == false)\nassert(test_duplicate(arraynums: [1, 2, 3, 4, 4]) == true)\nassert(test_duplicate(arraynums: [1, 1, 2, 2, 3, 3, 4, 4, 5]) == true)", "language": "swift"}, {"task_id": "mbpp_20_is_woodall", "prompt": "\n/// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_woodall(x: 383) == true)\nassert(is_woodall(x: 254) == false)\nassert(is_woodall(x: 200) == false)", "language": "swift"}, {"task_id": "mbpp_56_checks", "prompt": "\n/// Write a swiftthon function to check if a given number is one less than twice its reverse.\nfunc checks(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(checks(n: 70) == false)\nassert(checks(n: 23) == false)\nassert(checks(n: 73) == true)", "language": "swift"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "\n/// Write a swiftthon function to find the largest number that can be formed with the given array of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)", "language": "swift"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "\n/// Write a swiftthon function to check whether the given two integers have opposite sign or not.\nfunc opposite_Signs(x: Int, y: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(opposite_Signs(x: 1, y: -2) == true)\nassert(opposite_Signs(x: 3, y: 2) == false)\nassert(opposite_Signs(x: -10, y: -10) == false)\nassert(opposite_Signs(x: -2, y: 2) == true)", "language": "swift"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)", "language": "swift"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "\n/// Write a swiftthon function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Substrings(s: \"112112\") == 6)\nassert(count_Substrings(s: \"111\") == 6)\nassert(count_Substrings(s: \"1101112\") == 12)", "language": "swift"}, {"task_id": "mbpp_62_smallest_num", "prompt": "\n/// Write a swiftthon function to find smallest number in an array.\nfunc smallest_num(xs: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(smallest_num(xs: [10, 20, 1, 45, 99]) == 1)\nassert(smallest_num(xs: [1, 2, 3]) == 1)\nassert(smallest_num(xs: [45, 46, 50, 60]) == 45)", "language": "swift"}, {"task_id": "mbpp_63_max_difference", "prompt": "\n/// Write a function to find the maximum difference between available pairs in the given tuple array.\nfunc max_difference(test_list: [(Int, Int)]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_difference(test_list: [(3, 5), (1, 7), (10, 3), (1, 2)]) == 7)\nassert(max_difference(test_list: [(4, 6), (2, 17), (9, 13), (11, 12)]) == 15)\nassert(max_difference(test_list: [(12, 35), (21, 27), (13, 23), (41, 22)]) == 23)", "language": "swift"}, {"task_id": "mbpp_64_subject_marks", "prompt": "\n/// Write a function to sort an array of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks: [(String, Int)]) -> [(String, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(subject_marks(subjectmarks: [(\"English\", 88), (\"Science\", 90), (\"Maths\", 97), (\"Social sciences\", 82)]) == [(\"Social sciences\", 82), (\"English\", 88), (\"Science\", 90), (\"Maths\", 97)])\nassert(subject_marks(subjectmarks: [(\"Telugu\", 49), (\"Hindhi\", 54), (\"Social\", 33)]) == [(\"Social\", 33), (\"Telugu\", 49), (\"Hindhi\", 54)])\nassert(subject_marks(subjectmarks: [(\"Physics\", 96), (\"Chemistry\", 97), (\"Biology\", 45)]) == [(\"Biology\", 45), (\"Physics\", 96), (\"Chemistry\", 97)])", "language": "swift"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "\nextension [Int]: Error {}\n        \n/// Write a function to flatten an array and sum all of its elements.\nfunc recursive_list_sum(data_list: [Result<Int, [Int]>]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(recursive_list_sum(data_list: [.success(1), .success(2), .failure([3, 4]), .failure([5, 6])]) == 21)\nassert(recursive_list_sum(data_list: [.success(7), .success(10), .failure([15, 14]), .failure([19, 41])]) == 106)\nassert(recursive_list_sum(data_list: [.success(10), .success(20), .failure([30, 40]), .failure([50, 60])]) == 210)", "language": "swift"}, {"task_id": "mbpp_66_pos_count", "prompt": "\n/// Write a swiftthon function to count the number of positive numbers in an array.\nfunc pos_count(list: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pos_count(list: [1, -2, 3, -4]) == 2)\nassert(pos_count(list: [3, 4, 5, -1]) == 3)\nassert(pos_count(list: [1, 2, 3, 4]) == 4)", "language": "swift"}, {"task_id": "mbpp_67_bell_number", "prompt": "\n/// Write a function to find the number of ways to partition a set of Bell numbers.\nfunc bell_number(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_number(n: 2) == 2)\nassert(bell_number(n: 10) == 115975)\nassert(bell_number(n: 56) == 6775685320645824322581483068371419745979053216268760300)", "language": "swift"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "\n/// Write a swiftthon function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)", "language": "swift"}, {"task_id": "mbpp_69_is_sublist", "prompt": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)", "language": "swift"}, {"task_id": "mbpp_70_get_equal", "prompt": "\n/// Write a function to find whether all the given arrays have equal length or not.\nfunc get_equal(Input: [[Int]]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_equal(Input: [[11, 22, 33], [44, 55, 66]]) == true)\nassert(get_equal(Input: [[1, 2, 3], [4, 5, 6, 7]]) == false)\nassert(get_equal(Input: [[1, 2], [3, 4]]) == true)", "language": "swift"}, {"task_id": "mbpp_71_comb_sort", "prompt": "\n/// Write a function to sort an array of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])", "language": "swift"}, {"task_id": "mbpp_72_dif_Square", "prompt": "\n/// Write a swiftthon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(dif_Square(n: 5) == true)\nassert(dif_Square(n: 10) == false)\nassert(dif_Square(n: 15) == true)", "language": "swift"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "\n/// Write a function to check whether it follows the sequence given in the patterns array.\nfunc is_samepatterns(colors: [String], patterns: [String]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_samepatterns(colors: [\"red\", \"green\", \"green\"], patterns: [\"a\", \"b\", \"b\"]) == true)\nassert(is_samepatterns(colors: [\"red\", \"green\", \"greenn\"], patterns: [\"a\", \"b\", \"b\"]) == false)\nassert(is_samepatterns(colors: [\"red\", \"green\", \"greenn\"], patterns: [\"a\", \"b\"]) == false)", "language": "swift"}, {"task_id": "mbpp_75_find_tuples", "prompt": "\n/// Write a function to find tuples which have all elements divisible by k from the given array of tuples.\nfunc find_tuples(test_list: [(Int, Int, Int)], K: Int) -> [(Int, Int, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_tuples(test_list: [(6, 24, 12), (7, 9, 6), (12, 18, 21)], K: 6) == [(6, 24, 12)])\nassert(find_tuples(test_list: [(5, 25, 30), (4, 2, 3), (7, 8, 9)], K: 5) == [(5, 25, 30)])\nassert(find_tuples(test_list: [(7, 9, 16), (8, 16, 4), (19, 17, 18)], K: 4) == [(8, 16, 4)])", "language": "swift"}, {"task_id": "mbpp_77_is_Diff", "prompt": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)", "language": "swift"}, {"task_id": "mbpp_79_word_len", "prompt": "\n/// Write a swiftthon function to check whether the length of the word is odd or not.\nfunc word_len(s: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(word_len(s: \"Hadoop\") == false)\nassert(word_len(s: \"great\") == true)\nassert(word_len(s: \"structure\") == true)", "language": "swift"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)", "language": "swift"}, {"task_id": "mbpp_83_get_Char", "prompt": "\n/// Write a swiftthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Char(strr: \"abc\") == \"f\")\nassert(get_Char(strr: \"gfg\") == \"t\")\nassert(get_Char(strr: \"ab\") == \"c\")", "language": "swift"}, {"task_id": "mbpp_84_sequence", "prompt": "\n/// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sequence(n: 10) == 6)\nassert(sequence(n: 2) == 1)\nassert(sequence(n: 3) == 2)", "language": "swift"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "\n/// Write a function to find nth centered hexagonal number.\nfunc centered_hexagonal_number(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(centered_hexagonal_number(n: 10) == 271)\nassert(centered_hexagonal_number(n: 2) == 7)\nassert(centered_hexagonal_number(n: 9) == 217)", "language": "swift"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "\n/// Write a function to merge three dictionaries into a single dictionary.\nfunc merge_dictionaries_three(dict1: [String : String], dict2: [String : String], dict3: [String : String]) -> [String : String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(merge_dictionaries_three(dict1: [\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], dict2: [\"G\" : \"Green\", \"W\" : \"White\"], dict3: [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"]) == [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\", \"O\" : \"Orange\"])\nassert(merge_dictionaries_three(dict1: [\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], dict2: [\"G\" : \"Green\", \"W\" : \"White\"], dict3: [\"L\" : \"lavender\", \"B\" : \"Blue\"]) == [\"W\" : \"White\", \"P\" : \"Pink\", \"B\" : \"Black\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\"])\nassert(merge_dictionaries_three(dict1: [\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], dict2: [\"L\" : \"lavender\", \"B\" : \"Blue\"], dict3: [\"G\" : \"Green\", \"W\" : \"White\"]) == [\"B\" : \"Black\", \"P\" : \"Pink\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\", \"W\" : \"White\"])", "language": "swift"}, {"task_id": "mbpp_88_freq_count", "prompt": "\n/// Write a function to get the frequency of all the elements in an array, returned as a dictionary.\nfunc freq_count(list1: [Int]) -> [Int : Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(freq_count(list1: [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == [10 : 4, 20 : 4, 40 : 2, 50 : 2, 30 : 1])\nassert(freq_count(list1: [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == [1 : 3, 2 : 2, 3 : 3, 4 : 3])\nassert(freq_count(list1: [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == [10 : 1, 5 : 3, 6 : 2, 7 : 2, 4 : 2, 9 : 2])", "language": "swift"}, {"task_id": "mbpp_89_closest_num", "prompt": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)", "language": "swift"}, {"task_id": "mbpp_90_len_log", "prompt": "\n/// Write a swiftthon function to find the length of the longest word.\nfunc len_log(list1: [String]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(len_log(list1: [\"python\", \"PHP\", \"bigdata\"]) == 7)\nassert(len_log(list1: [\"a\", \"ab\", \"abc\"]) == 3)\nassert(len_log(list1: [\"small\", \"big\", \"tall\"]) == 5)", "language": "swift"}, {"task_id": "mbpp_91_find_substring", "prompt": "\n/// Write a function to check if a string is present as a substring in a given array of string values.\nfunc find_substring(str1: [String], sub_str: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"ack\") == true)\nassert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"abc\") == false)\nassert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"ange\") == true)", "language": "swift"}, {"task_id": "mbpp_92_is_undulating", "prompt": "\n/// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_undulating(n: 1212121) == true)\nassert(is_undulating(n: 1991) == false)\nassert(is_undulating(n: 121) == true)", "language": "swift"}, {"task_id": "mbpp_93_power", "prompt": "\n/// Write a function to calculate the value of 'a' to the power 'b'.\nfunc power(a: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(power(a: 3, b: 4) == 81)\nassert(power(a: 2, b: 3) == 8)\nassert(power(a: 5, b: 5) == 3125)", "language": "swift"}, {"task_id": "mbpp_94_index_minimum", "prompt": "\n/// Given an array of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunc index_minimum(test_list: [(String, Int)]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(index_minimum(test_list: [(\"Rash\", 143), (\"Manjeet\", 200), (\"Varsha\", 100)]) == \"Varsha\")\nassert(index_minimum(test_list: [(\"Yash\", 185), (\"Dawood\", 125), (\"Sanya\", 175)]) == \"Dawood\")\nassert(index_minimum(test_list: [(\"Sai\", 345), (\"Salman\", 145), (\"Ayesha\", 96)]) == \"Ayesha\")", "language": "swift"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "\n/// Write a swiftthon function to find the length of the smallest array in an array of arrays.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)", "language": "swift"}, {"task_id": "mbpp_96_divisor", "prompt": "\n/// Write a swiftthon function to find the number of divisors of a given integer.\nfunc divisor(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisor(n: 15) == 4)\nassert(divisor(n: 12) == 6)\nassert(divisor(n: 9) == 3)", "language": "swift"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "\n/// Write a function to find frequency of each element in a flattened array of arrays, returned in a dictionary.\nfunc frequency_lists(list1: [[Int]]) -> [Int : Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(frequency_lists(list1: [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == [1 : 1, 2 : 3, 3 : 1, 4 : 1, 5 : 2, 6 : 1, 7 : 1, 8 : 1, 9 : 1])\nassert(frequency_lists(list1: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1])\nassert(frequency_lists(list1: [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == [20 : 2, 30 : 2, 40 : 2, 17 : 1, 18 : 1, 16 : 1, 14 : 1, 13 : 1, 10 : 1])", "language": "swift"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "\n/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(n: 8) == \"1000\")\nassert(decimal_to_binary(n: 18) == \"10010\")\nassert(decimal_to_binary(n: 7) == \"111\")", "language": "swift"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "\n/// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunc next_smallest_palindrome(num: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest_palindrome(num: 99) == 101)\nassert(next_smallest_palindrome(num: 1221) == 1331)\nassert(next_smallest_palindrome(num: 120) == 121)", "language": "swift"}, {"task_id": "mbpp_101_kth_element", "prompt": "\n/// Write a function to find the kth element in the given array using 1-based indexing.\nfunc kth_element(arr: [Int], k: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(kth_element(arr: [12, 3, 5, 7, 19], k: 2) == 3)\nassert(kth_element(arr: [17, 24, 8, 23], k: 3) == 8)\nassert(kth_element(arr: [16, 21, 25, 36, 4], k: 4) == 36)", "language": "swift"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")", "language": "swift"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "\n/// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n: Int, m: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eulerian_num(n: 3, m: 1) == 4)\nassert(eulerian_num(n: 4, m: 1) == 11)\nassert(eulerian_num(n: 5, m: 3) == 26)", "language": "swift"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "\n/// Write a function to sort each subarray of strings in a given array of arrays.\nfunc sort_sublists(input_list: [[String]]) -> [[String]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_sublists(input_list: [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])\nassert(sort_sublists(input_list: [[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]])\nassert(sort_sublists(input_list: [[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]])", "language": "swift"}, {"task_id": "mbpp_105_count", "prompt": "\n/// Write a swiftthon function to count true booleans in the given array.\nfunc count(lst: [Bool]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count(lst: [true, false, true]) == 2)\nassert(count(lst: [false, false]) == 0)\nassert(count(lst: [true, true, true]) == 3)", "language": "swift"}, {"task_id": "mbpp_106_add_lists", "prompt": "\n/// Write a function to append the given array to the given tuples.\nfunc add_lists(test_list: [Int], test_tup: (Int, Int)) -> (Int, Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_lists(test_list: [5, 6, 7], test_tup: (9, 10)) == (9, 10, 5, 6, 7))\nassert(add_lists(test_list: [6, 7, 8], test_tup: (10, 11)) == (10, 11, 6, 7, 8))\nassert(add_lists(test_list: [7, 8, 9], test_tup: (11, 12)) == (11, 12, 7, 8, 9))", "language": "swift"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "\n/// Write a function to merge three arrays into a single sorted array.\nfunc merge_sorted_list(num1: [Int], num2: [Int], num3: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(merge_sorted_list(num1: [25, 24, 15, 4, 5, 29, 110], num2: [19, 20, 11, 56, 25, 233, 154], num3: [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233])\nassert(merge_sorted_list(num1: [1, 3, 5, 6, 8, 9], num2: [2, 5, 7, 11], num3: [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12])\nassert(merge_sorted_list(num1: [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], num2: [25, 35, 22, 85, 14, 65, 75, 25, 58], num3: [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])", "language": "swift"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "\n/// Write a swiftthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunc odd_Equivalent(s: String, n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_Equivalent(s: \"011001\", n: 6) == 3)\nassert(odd_Equivalent(s: \"11011\", n: 5) == 4)\nassert(odd_Equivalent(s: \"1010\", n: 4) == 2)", "language": "swift"}, {"task_id": "mbpp_113_check_integer", "prompt": "\n/// Write a function to check if a string represents an integer or not.\nfunc check_integer(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_integer(text: \"python\") == false)\nassert(check_integer(text: \"1\") == true)\nassert(check_integer(text: \"12345\") == true)", "language": "swift"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "\n/// Write a function to convert a given tuple of positive integers into a single integer.\nfunc tuple_to_int(nums: (Int, Int, Int)) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tuple_to_int(nums: (1, 2, 3)) == 123)\nassert(tuple_to_int(nums: (4, 5, 6)) == 456)\nassert(tuple_to_int(nums: (5, 6, 7)) == 567)", "language": "swift"}, {"task_id": "mbpp_117_list_to_float", "prompt": "\n/// Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunc list_to_float(test_list: [(String, String)]) -> [(Double, Double)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(list_to_float(test_list: [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)])\nassert(list_to_float(test_list: [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)])\nassert(list_to_float(test_list: [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)])", "language": "swift"}, {"task_id": "mbpp_118_string_to_list", "prompt": "\n/// Write a function to convert a string to an array of strings split on the space character.\nfunc string_to_list(string: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_list(string: \"python programming\") == [\"python\", \"programming\"])\nassert(string_to_list(string: \"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"])\nassert(string_to_list(string: \"write a program\") == [\"write\", \"a\", \"program\"])", "language": "swift"}, {"task_id": "mbpp_119_search", "prompt": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)", "language": "swift"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "\n/// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given array.\nfunc max_product_tuple(list1: [(Int, Int)]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product_tuple(list1: [(2, 7), (2, 6), (1, 8), (4, 9)]) == 36)\nassert(max_product_tuple(list1: [(10, 20), (15, 2), (5, 10)]) == 200)\nassert(max_product_tuple(list1: [(11, 44), (10, 15), (20, 5), (12, 9)]) == 484)", "language": "swift"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "\n/// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(amicable_numbers_sum(limit: 999) == 504)\nassert(amicable_numbers_sum(limit: 9999) == 31626)\nassert(amicable_numbers_sum(limit: 99) == 0)", "language": "swift"}, {"task_id": "mbpp_125_find_length", "prompt": "\n/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(string: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_length(string: \"11000010001\") == 6)\nassert(find_length(string: \"10111\") == 1)\nassert(find_length(string: \"11011101100101\") == 2)", "language": "swift"}, {"task_id": "mbpp_126_sum", "prompt": "\n/// Write a swiftthon function to find the sum of common divisors of two given numbers.\nfunc sum(a: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum(a: 10, b: 15) == 6)\nassert(sum(a: 100, b: 150) == 93)\nassert(sum(a: 4, b: 6) == 3)", "language": "swift"}, {"task_id": "mbpp_127_multiply_int", "prompt": "\n/// Write a function to multiply two integers.\nfunc multiply_int(x: Int, y: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(multiply_int(x: 10, y: 20) == 200)\nassert(multiply_int(x: 5, y: 10) == 50)\nassert(multiply_int(x: 4, y: 8) == 32)", "language": "swift"}, {"task_id": "mbpp_128_long_words", "prompt": "\n/// Write a function to find words that are longer than n characters from a given array of words.\nfunc long_words(n: Int, str: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(long_words(n: 3, str: \"python is a programming language\") == [\"python\", \"programming\", \"language\"])\nassert(long_words(n: 2, str: \"writing a program\") == [\"writing\", \"program\"])\nassert(long_words(n: 5, str: \"sorting list\") == [\"sorting\"])", "language": "swift"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "\n/// Write a function to calculate whether the matrix is a magic square.\nfunc magic_square_test(my_matrix: [[Int]]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(magic_square_test(my_matrix: [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == true)\nassert(magic_square_test(my_matrix: [[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == true)\nassert(magic_square_test(my_matrix: [[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == false)", "language": "swift"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)", "language": "swift"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "\n/// Write a swiftthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunc reverse_vowels(str1: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_vowels(str1: \"Python\") == \"Python\")\nassert(reverse_vowels(str1: \"USA\") == \"ASU\")\nassert(reverse_vowels(str1: \"ab\") == \"ab\")", "language": "swift"}, {"task_id": "mbpp_132_tup_string", "prompt": "\n/// Write a function to convert an array to a string.\nfunc tup_string(tup1: [String]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tup_string(tup1: [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]) == \"exercises\")\nassert(tup_string(tup1: [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == \"python\")\nassert(tup_string(tup1: [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]) == \"program\")", "language": "swift"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "\n/// Write a function to calculate the sum of the negative numbers of a given array of numbers.\nfunc sum_negativenum(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_negativenum(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32)\nassert(sum_negativenum(nums: [10, 15, -14, 13, -18, 12, -20]) == -52)\nassert(sum_negativenum(nums: [19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894)", "language": "swift"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "\n/// Write a function to find the nth hexagonal number.\nfunc hexagonal_num(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(hexagonal_num(n: 10) == 190)\nassert(hexagonal_num(n: 5) == 45)\nassert(hexagonal_num(n: 7) == 91)", "language": "swift"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "\n/// Write a swiftthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sum_Of_Powers_Of_Two(n: 10) == true)\nassert(is_Sum_Of_Powers_Of_Two(n: 7) == false)\nassert(is_Sum_Of_Powers_Of_Two(n: 14) == true)", "language": "swift"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "\n/// Write a function to sort an array of elements.\nfunc pancake_sort(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pancake_sort(nums: [15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79])\nassert(pancake_sort(nums: [98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98])\nassert(pancake_sort(nums: [41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42])", "language": "swift"}, {"task_id": "mbpp_142_count_samepair", "prompt": "\n/// Write a function to count number items that are identical in the same position of three given arrays.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)", "language": "swift"}, {"task_id": "mbpp_143_find_lists", "prompt": "\n/// Write a function to find number of arrays present in the given array.\nfunc find_lists(Input: [AnyHashable]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_lists(Input: [[1, 2, 3, 4], [5, 6, 7, 8]]) == 2)\nassert(find_lists(Input: [[1, 2], [3, 4], [5, 6]]) == 3)\nassert(find_lists(Input: [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1)", "language": "swift"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "\n/// Write a swiftthon function to find the maximum difference between any two elements in a given array.\nfunc max_Abs_Diff(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_Abs_Diff(arr: [2, 1, 5, 3]) == 4)\nassert(max_Abs_Diff(arr: [9, 3, 2, 5, 1]) == 8)\nassert(max_Abs_Diff(arr: [3, 2, 1]) == 2)", "language": "swift"}, {"task_id": "mbpp_160_find_solution", "prompt": "\n/// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nil if no solution exists.\nfunc find_solution(a: Int, b: Int, n: Int) -> (Int, Int)? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_solution(a: 2, b: 3, n: 7) == (2, 1))\nassert(find_solution(a: 4, b: 2, n: 7) == nil)\nassert(find_solution(a: 1, b: 13, n: 17) == (4, 1))", "language": "swift"}, {"task_id": "mbpp_161_remove_elements", "prompt": "\n/// Write a function to remove all elements from a given array present in another array.\nfunc remove_elements(list1: [Int], list2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_elements(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2: [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10])\nassert(remove_elements(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2: [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10])\nassert(remove_elements(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2: [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10])", "language": "swift"}, {"task_id": "mbpp_162_sum_series", "prompt": "\n/// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunc sum_series(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_series(n: 6) == 12)\nassert(sum_series(n: 10) == 30)\nassert(sum_series(n: 9) == 25)", "language": "swift"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "\n/// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1: Int, num2: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(are_equivalent(num1: 36, num2: 57) == false)\nassert(are_equivalent(num1: 2, num2: 4) == false)\nassert(are_equivalent(num1: 23, num2: 47) == true)", "language": "swift"}, {"task_id": "mbpp_165_count_char_position", "prompt": "\n/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_char_position(str1: \"xbcefg\") == 2)\nassert(count_char_position(str1: \"ABcED\") == 3)\nassert(count_char_position(str1: \"AbgdeF\") == 5)", "language": "swift"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "\n/// Write a function that counts the number of pairs of integers in an array that xor to an even number.\nfunc find_even_pair(A: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_even_pair(A: [5, 4, 7, 2, 1]) == 4)\nassert(find_even_pair(A: [7, 2, 8, 1, 0, 5, 11]) == 9)\nassert(find_even_pair(A: [1, 2, 3]) == 1)", "language": "swift"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "\n/// Write a swiftthon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)", "language": "swift"}, {"task_id": "mbpp_168_frequency", "prompt": "\n/// Write a function to count the number of occurrences of a number in a given array.\nfunc frequency(a: [Int], x: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(frequency(a: [1, 2, 3], x: 4) == 0)\nassert(frequency(a: [1, 2, 2, 3, 3, 3, 4], x: 3) == 3)\nassert(frequency(a: [0, 1, 2, 3, 1, 2], x: 1) == 2)", "language": "swift"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "\n/// Write a function to find the sum of numbers in an array within a range specified by two indices.\nfunc sum_range_list(list1: [Int], m: Int, n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_range_list(list1: [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], m: 8, n: 10) == 29)\nassert(sum_range_list(list1: [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], m: 5, n: 7) == 16)\nassert(sum_range_list(list1: [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], m: 7, n: 10) == 38)", "language": "swift"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "\n/// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfunc perimeter_pentagon(a: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perimeter_pentagon(a: 5) == 25)\nassert(perimeter_pentagon(a: 10) == 50)\nassert(perimeter_pentagon(a: 15) == 75)", "language": "swift"}, {"task_id": "mbpp_172_count_occurance", "prompt": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)", "language": "swift"}, {"task_id": "mbpp_222_check_type", "prompt": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)", "language": "swift"}, {"task_id": "mbpp_223_is_majority", "prompt": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)", "language": "swift"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "\n/// Write a swiftthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunc count_Set_Bits(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Set_Bits(n: 2) == 1)\nassert(count_Set_Bits(n: 4) == 1)\nassert(count_Set_Bits(n: 6) == 2)", "language": "swift"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "\n/// Write a swiftthon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_values_string(str: \"abcdef\") == \"ace\")\nassert(odd_values_string(str: \"python\") == \"pto\")\nassert(odd_values_string(str: \"data\") == \"dt\")\nassert(odd_values_string(str: \"lambs\") == \"lms\")", "language": "swift"}, {"task_id": "mbpp_227_min_of_three", "prompt": "\n/// Write a function to find minimum of three numbers.\nfunc min_of_three(a: Int, b: Int, c: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_of_three(a: 10, b: 20, c: 0) == 0)\nassert(min_of_three(a: 19, b: 15, c: 18) == 15)\nassert(min_of_three(a: -10, b: -20, c: -30) == -30)", "language": "swift"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "\n/// Write a swiftthon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n: Int, l: Int, r: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_Bits_Set_In_The_Given_Range(n: 4, l: 1, r: 2) == true)\nassert(all_Bits_Set_In_The_Given_Range(n: 17, l: 2, r: 4) == true)\nassert(all_Bits_Set_In_The_Given_Range(n: 39, l: 4, r: 6) == false)", "language": "swift"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])", "language": "swift"}, {"task_id": "mbpp_230_replace_blank", "prompt": "\n/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1: String, char: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_blank(str1: \"hello people\", char: \"@\") == \"hello@people\")\nassert(replace_blank(str1: \"python program language\", char: \"$\") == \"python$program$language\")\nassert(replace_blank(str1: \"blank space\", char: \"-\") == \"blank-space\")", "language": "swift"}, {"task_id": "mbpp_234_volume_cube", "prompt": "\n/// Write a function to find the volume of a cube given its side length.\nfunc volume_cube(l: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(volume_cube(l: 3) == 27)\nassert(volume_cube(l: 2) == 8)\nassert(volume_cube(l: 5) == 125)", "language": "swift"}, {"task_id": "mbpp_237_check_occurences", "prompt": "\n/// Write a function that takes in an array of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the array.\nfunc check_occurences(test_list: [(Int, Int)]) -> [(Int, Int) : Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_occurences(test_list: [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == [(1, 3) : 2, (2, 5) : 2, (3, 6) : 1])\nassert(check_occurences(test_list: [(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == [(2, 4) : 2, (3, 6) : 2, (4, 7) : 1])\nassert(check_occurences(test_list: [(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == [(2, 13) : 1, (11, 23) : 1, (12, 25) : 2, (16, 23) : 1])", "language": "swift"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "\n/// Write a swiftthon function to count the number of non-empty substrings of a given string.\nfunc number_of_substrings(str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(number_of_substrings(str: \"abc\") == 6)\nassert(number_of_substrings(str: \"abcd\") == 10)\nassert(number_of_substrings(str: \"abcde\") == 15)", "language": "swift"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "\n/// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunc get_total_number_of_sequences(m: Int, n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_total_number_of_sequences(m: 10, n: 4) == 4)\nassert(get_total_number_of_sequences(m: 5, n: 2) == 6)\nassert(get_total_number_of_sequences(m: 16, n: 3) == 84)", "language": "swift"}, {"task_id": "mbpp_240_replace_list", "prompt": "\n/// Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.\nfunc replace_list(list1: [AnyHashable], list2: [AnyHashable]) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_list(list1: [1, 3, 5, 7, 9, 10], list2: [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8])\nassert(replace_list(list1: [1, 2, 3, 4, 5], list2: [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])\nassert(replace_list(list1: [\"red\", \"blue\", \"green\"], list2: [\"yellow\"]) == [\"red\", \"blue\", \"yellow\"])", "language": "swift"}, {"task_id": "mbpp_242_count_charac", "prompt": "\n/// Write a function to count the total number of characters in a string.\nfunc count_charac(str1: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_charac(str1: \"python programming\") == 18)\nassert(count_charac(str1: \"language\") == 8)\nassert(count_charac(str1: \"words\") == 5)", "language": "swift"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)", "language": "swift"}, {"task_id": "mbpp_245_max_sum", "prompt": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)", "language": "swift"}, {"task_id": "mbpp_247_lps", "prompt": "\n/// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunc lps(str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lps(str: \"TENS FOR TENS\") == 5)\nassert(lps(str: \"CARDIO FOR CARDS\") == 7)\nassert(lps(str: \"PART OF THE JOURNEY IS PART\") == 9)", "language": "swift"}, {"task_id": "mbpp_249_intersection_array", "prompt": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])", "language": "swift"}, {"task_id": "mbpp_250_count_X", "prompt": "\n/// Write a swiftthon function that takes in a tuple and an element and counts the occcurences of the element in the array.\nfunc count_X(tup: [Int], x: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_X(tup: [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], x: 4) == 0)\nassert(count_X(tup: [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], x: 10) == 3)\nassert(count_X(tup: [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], x: 8) == 4)", "language": "swift"}, {"task_id": "mbpp_251_insert_element", "prompt": "\n/// Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\nfunc insert_element(list: [String], element: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(insert_element(list: [\"Red\", \"Green\", \"Black\"], element: \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"])\nassert(insert_element(list: [\"python\", \"java\"], element: \"program\") == [\"program\", \"python\", \"program\", \"java\"])\nassert(insert_element(list: [\"happy\", \"sad\"], element: \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"])", "language": "swift"}, {"task_id": "mbpp_252_convert", "prompt": "\n/// Write a swiftthon function to convert complex numbers to polar coordinates.\nfunc convert(numbers: Int) -> (Double, Double) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert(numbers: 1) == (1.0, 0.0))\nassert(convert(numbers: 4) == (4.0, 0.0))\nassert(convert(numbers: 5) == (5.0, 0.0))", "language": "swift"}, {"task_id": "mbpp_253_count_integer", "prompt": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case stringValue(String)\n    case doubleValue(Double)\n}\n\n            \n/// Write a swiftthon function that returns the number of integer elements in a given array.\nfunc count_integer(list1: [Value]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_integer(list1: [.intValue(1), .intValue(2), .stringValue(\"abc\"), .doubleValue(1.2)]) == 2)\nassert(count_integer(list1: [.intValue(1), .intValue(2), .intValue(3)]) == 3)\nassert(count_integer(list1: [.intValue(1), .doubleValue(1.2), .intValue(4), .doubleValue(5.1)]) == 2)", "language": "swift"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "\n/// Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunc combinations_colors(l: [String], n: Int) -> [[String]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(combinations_colors(l: [\"Red\", \"Green\", \"Blue\"], n: 1) == [[\"Red\"], [\"Green\"], [\"Blue\"]])\nassert(combinations_colors(l: [\"Red\", \"Green\", \"Blue\"], n: 2) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]])\nassert(combinations_colors(l: [\"Red\", \"Green\", \"Blue\"], n: 3) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]])", "language": "swift"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "\n/// Write a swiftthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunc count_Primes_nums(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Primes_nums(n: 5) == 2)\nassert(count_Primes_nums(n: 10) == 4)\nassert(count_Primes_nums(n: 100) == 25)", "language": "swift"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "\n/// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunc swap_numbers(a: Int, b: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(swap_numbers(a: 10, b: 20) == [20, 10])\nassert(swap_numbers(a: 15, b: 17) == [17, 15])\nassert(swap_numbers(a: 100, b: 200) == [200, 100])", "language": "swift"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "\n/// Write a function to maximize the given two arrays.\nfunc maximize_elements(test_tup1: [[Int]], test_tup2: [[Int]]) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(maximize_elements(test_tup1: [[1, 3], [4, 5], [2, 9], [1, 10]], test_tup2: [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]])\nassert(maximize_elements(test_tup1: [[2, 4], [5, 6], [3, 10], [2, 11]], test_tup2: [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[7, 8], [5, 10], [3, 10], [8, 11]])\nassert(maximize_elements(test_tup1: [[3, 5], [6, 7], [4, 11], [3, 12]], test_tup2: [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[8, 9], [6, 11], [4, 11], [9, 12]])", "language": "swift"}, {"task_id": "mbpp_260_newman_prime", "prompt": "\n/// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunc newman_prime(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(newman_prime(n: 3) == 7)\nassert(newman_prime(n: 4) == 17)\nassert(newman_prime(n: 5) == 41)", "language": "swift"}, {"task_id": "mbpp_261_division_elements", "prompt": "\n/// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunc division_elements(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(division_elements(test_tup1: (10, 4, 6, 9), test_tup2: (5, 2, 3, 3)) == (2, 2, 2, 3))\nassert(division_elements(test_tup1: (12, 6, 8, 16), test_tup2: (6, 3, 4, 4)) == (2, 2, 2, 4))\nassert(division_elements(test_tup1: (20, 14, 36, 18), test_tup2: (5, 7, 6, 9)) == (4, 2, 6, 2))", "language": "swift"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "\n/// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in a tuple.\nfunc split_two_parts(list1: [AnyHashable], L: Int) -> AnyHashable {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_two_parts(list1: [1, 1, 2, 3, 4, 4, 5, 1], L: 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\nassert(split_two_parts(list1: [\"a\", \"b\", \"c\", \"d\"], L: 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\nassert(split_two_parts(list1: [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], L: 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))", "language": "swift"}, {"task_id": "mbpp_264_dog_age", "prompt": "\n/// Write a function to calculate a dog's age in dog's years.\nfunc dog_age(h_age: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(dog_age(h_age: 12) == 61)\nassert(dog_age(h_age: 15) == 73)\nassert(dog_age(h_age: 24) == 109)", "language": "swift"}, {"task_id": "mbpp_265_list_split", "prompt": "\n/// Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunc list_split(S: [AnyHashable], step: Int) -> [[AnyHashable]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(list_split(S: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], step: 3) == [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])\nassert(list_split(S: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], step: 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])\nassert(list_split(S: [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], step: 2) == [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])", "language": "swift"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "\n/// Write a function to find the lateral surface area of a cube given its side length.\nfunc lateralsurface_cube(l: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lateralsurface_cube(l: 5) == 100)\nassert(lateralsurface_cube(l: 9) == 324)\nassert(lateralsurface_cube(l: 10) == 400)", "language": "swift"}, {"task_id": "mbpp_267_square_Sum", "prompt": "\n/// Write a swiftthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_Sum(n: 2) == 10)\nassert(square_Sum(n: 3) == 35)\nassert(square_Sum(n: 4) == 84)", "language": "swift"}, {"task_id": "mbpp_268_find_star_num", "prompt": "\n/// Write a function to find the n'th star number.\nfunc find_star_num(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_star_num(n: 3) == 37)\nassert(find_star_num(n: 4) == 73)\nassert(find_star_num(n: 5) == 121)", "language": "swift"}, {"task_id": "mbpp_269_ascii_value", "prompt": "\n/// Write a function to find the ascii value of a character.\nfunc ascii_value(k: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(ascii_value(k: \"A\") == 65)\nassert(ascii_value(k: \"R\") == 82)\nassert(ascii_value(k: \"S\") == 83)", "language": "swift"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)", "language": "swift"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "\n/// Write a swiftthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunc even_Power_Sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_Power_Sum(n: 2) == 1056)\nassert(even_Power_Sum(n: 3) == 8832)\nassert(even_Power_Sum(n: 1) == 32)", "language": "swift"}, {"task_id": "mbpp_272_rear_extract", "prompt": "\n/// Write a function that takes in an array of tuples and returns an array containing the rear element of each tuple.\nfunc rear_extract(test_list: [(Int, String, Int)]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rear_extract(test_list: [(1, \"Rash\", 21), (2, \"Varsha\", 20), (3, \"Kil\", 19)]) == [21, 20, 19])\nassert(rear_extract(test_list: [(1, \"Sai\", 36), (2, \"Ayesha\", 25), (3, \"Salman\", 45)]) == [36, 25, 45])\nassert(rear_extract(test_list: [(1, \"Sudeep\", 14), (2, \"Vandana\", 36), (3, \"Dawood\", 56)]) == [14, 36, 56])", "language": "swift"}, {"task_id": "mbpp_273_substract_elements", "prompt": "\n/// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunc substract_elements(test_tup1: (Int, Int, Int), test_tup2: (Int, Int, Int)) -> (Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(substract_elements(test_tup1: (10, 4, 5), test_tup2: (2, 5, 18)) == (8, -1, -13))\nassert(substract_elements(test_tup1: (11, 2, 3), test_tup2: (24, 45, 16)) == (-13, -43, -13))\nassert(substract_elements(test_tup1: (7, 18, 9), test_tup2: (10, 11, 12)) == (-3, 7, -3))", "language": "swift"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "\n/// Write a swiftthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunc even_binomial_Coeff_Sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_binomial_Coeff_Sum(n: 4) == 8)\nassert(even_binomial_Coeff_Sum(n: 6) == 32)\nassert(even_binomial_Coeff_Sum(n: 2) == 2)", "language": "swift"}, {"task_id": "mbpp_277_dict_filter", "prompt": "\n/// Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunc dict_filter(dict: [String : Int], n: Int) -> [String : Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(dict_filter(dict: [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], n: 170) == [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Pierre Cox\" : 190])\nassert(dict_filter(dict: [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], n: 180) == [\"Alden Cantrell\" : 180, \"Pierre Cox\" : 190])\nassert(dict_filter(dict: [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], n: 190) == [\"Pierre Cox\" : 190])", "language": "swift"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "\nextension (Int, Int): Error {}\n        \n/// Write a function to find the number of elements that occurs before the array element in the given tuple.\nfunc count_first_elements(test_tup: [Result<Int, (Int, Int)>]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_first_elements(test_tup: [.success(1), .success(5), .success(7), .failure((4, 6)), .success(10)]) == 3)\nassert(count_first_elements(test_tup: [.success(2), .success(9), .failure((5, 7)), .success(11)]) == 2)\nassert(count_first_elements(test_tup: [.success(11), .success(15), .success(5), .success(8), .failure((2, 3)), .success(8)]) == 4)", "language": "swift"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "\n/// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_num_decagonal(n: 3) == 27)\nassert(is_num_decagonal(n: 7) == 175)\nassert(is_num_decagonal(n: 10) == 370)", "language": "swift"}, {"task_id": "mbpp_280_sequential_search", "prompt": "\n/// Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunc sequential_search(dlist: [Int], item: Int) -> (Bool, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sequential_search(dlist: [11, 23, 58, 31, 56, 77, 43, 12, 65, 19], item: 31) == (true, 3))\nassert(sequential_search(dlist: [12, 32, 45, 62, 35, 47, 44, 61], item: 61) == (true, 7))\nassert(sequential_search(dlist: [9, 10, 17, 19, 22, 39, 48, 56], item: 48) == (true, 6))", "language": "swift"}, {"task_id": "mbpp_281_all_unique", "prompt": "\n/// Write a swiftthon function to check if the elements of a given array are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)", "language": "swift"}, {"task_id": "mbpp_282_sub_list", "prompt": "\n/// Write a function to subtract two arrays element-wise.\nfunc sub_list(nums1: [Int], nums2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sub_list(nums1: [1, 2, 3], nums2: [4, 5, 6]) == [-3, -3, -3])\nassert(sub_list(nums1: [1, 2], nums2: [3, 4]) == [-2, -2])\nassert(sub_list(nums1: [90, 120], nums2: [50, 70]) == [40, 50])", "language": "swift"}, {"task_id": "mbpp_283_validate", "prompt": "\n/// Write a swiftthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(validate(n: 1234) == true)\nassert(validate(n: 51241) == false)\nassert(validate(n: 321) == true)", "language": "swift"}, {"task_id": "mbpp_284_check_element", "prompt": "\n/// Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\nfunc check_element(list: [AnyHashable], element: AnyHashable) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_element(list: [\"green\", \"orange\", \"black\", \"white\"], element: \"blue\") == false)\nassert(check_element(list: [1, 2, 3, 4], element: 7) == false)\nassert(check_element(list: [\"green\", \"green\", \"green\", \"green\"], element: \"green\") == true)", "language": "swift"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "\n/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunc text_match_two_three(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_two_three(text: \"ac\") == false)\nassert(text_match_two_three(text: \"dc\") == false)\nassert(text_match_two_three(text: \"abbbba\") == true)", "language": "swift"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "\n/// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunc max_sub_array_sum_repeated(a: [Int], n: Int, k: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sub_array_sum_repeated(a: [10, 20, -30, -1], n: 4, k: 3) == 30)\nassert(max_sub_array_sum_repeated(a: [-1, 10, 20], n: 3, k: 2) == 59)\nassert(max_sub_array_sum_repeated(a: [-1, -2, -3], n: 3, k: 3) == -1)", "language": "swift"}, {"task_id": "mbpp_287_square_Sum", "prompt": "\n/// Write a swiftthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunc square_Sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_Sum(n: 2) == 20)\nassert(square_Sum(n: 3) == 56)\nassert(square_Sum(n: 4) == 120)", "language": "swift"}, {"task_id": "mbpp_290_max_length", "prompt": "\n/// Write a function to find the array of maximum length in an array of arrays.\nfunc max_length(list1: [[Int]]) -> (Int, [Int]) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_length(list1: [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))\nassert(max_length(list1: [[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15]))\nassert(max_length(list1: [[5], [15, 20, 25]]) == (3, [15, 20, 25]))", "language": "swift"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)", "language": "swift"}, {"task_id": "mbpp_292_find", "prompt": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)", "language": "swift"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "\n/// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w: Int, h: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(otherside_rightangle(w: 7, h: 8) == 10.63014581273465)\nassert(otherside_rightangle(w: 3, h: 4) == 5)\nassert(otherside_rightangle(w: 7, h: 15) == 16.55294535724685)", "language": "swift"}, {"task_id": "mbpp_294_max_val", "prompt": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)", "language": "swift"}, {"task_id": "mbpp_295_sum_div", "prompt": "\n/// Write a function to return the sum of all divisors of a number.\nfunc sum_div(number: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_div(number: 8) == 7)\nassert(sum_div(number: 12) == 16)\nassert(sum_div(number: 7) == 1)", "language": "swift"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)", "language": "swift"}, {"task_id": "mbpp_297_flatten_list", "prompt": "\nextension [Int]: Error {}\n        \n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: [Result<Int, [Int]>]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [.success(0), .success(10), .failure([20, 30]), .success(40), .success(50), .failure([60, 70, 80]), .failure([90, 100, 110, 120])]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [.failure([10, 20]), .failure([40]), .failure([30, 56, 25]), .failure([10, 20]), .failure([33]), .failure([40])]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [.failure([1, 2, 3]), .failure([4, 5, 6]), .failure([10, 11, 12]), .failure([7, 8, 9])]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])", "language": "swift"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "\n/// Write a function to calculate the maximum aggregate from the array of tuples.\nfunc max_aggregate(stdata: [(String, Int)]) -> (String, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_aggregate(stdata: [(\"Juan Whelan\", 90), (\"Sabah Colley\", 88), (\"Peter Nichols\", 7), (\"Juan Whelan\", 122), (\"Sabah Colley\", 84)]) == (\"Juan Whelan\", 212))\nassert(max_aggregate(stdata: [(\"Juan Whelan\", 50), (\"Sabah Colley\", 48), (\"Peter Nichols\", 37), (\"Juan Whelan\", 22), (\"Sabah Colley\", 14)]) == (\"Juan Whelan\", 72))\nassert(max_aggregate(stdata: [(\"Juan Whelan\", 10), (\"Sabah Colley\", 20), (\"Peter Nichols\", 30), (\"Juan Whelan\", 40), (\"Sabah Colley\", 50)]) == (\"Sabah Colley\", 70))", "language": "swift"}, {"task_id": "mbpp_304_find_Element", "prompt": "\n/// Write a swiftthon function to find element at a given index after number of rotations.\nfunc find_Element(arr: [Int], ranges: [[Int]], rotations: Int, index: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Element(arr: [1, 2, 3, 4, 5], ranges: [[0, 2], [0, 3]], rotations: 2, index: 1) == 3)\nassert(find_Element(arr: [1, 2, 3, 4], ranges: [[0, 1], [0, 2]], rotations: 1, index: 2) == 3)\nassert(find_Element(arr: [1, 2, 3, 4, 5, 6], ranges: [[0, 1], [0, 2]], rotations: 1, index: 1) == 1)", "language": "swift"}, {"task_id": "mbpp_305_start_withp", "prompt": "\n/// Write a function to return two words from an array of words starting with letter 'p'.\nfunc start_withp(words: [String]) -> (String, String) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(start_withp(words: [\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == (\"Python\", \"PHP\"))\nassert(start_withp(words: [\"Python Programming\", \"Java Programming\"]) == (\"Python\", \"Programming\"))\nassert(start_withp(words: [\"Pqrst Pqr\", \"qrstuv\"]) == (\"Pqrst\", \"Pqr\"))", "language": "swift"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)", "language": "swift"}, {"task_id": "mbpp_308_large_product", "prompt": "\n/// Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunc large_product(nums1: [Int], nums2: [Int], N: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(large_product(nums1: [1, 2, 3, 4, 5, 6], nums2: [3, 6, 8, 9, 10, 6], N: 3) == [60, 54, 50])\nassert(large_product(nums1: [1, 2, 3, 4, 5, 6], nums2: [3, 6, 8, 9, 10, 6], N: 4) == [60, 54, 50, 48])\nassert(large_product(nums1: [1, 2, 3, 4, 5, 6], nums2: [3, 6, 8, 9, 10, 6], N: 5) == [60, 54, 50, 48, 45])", "language": "swift"}, {"task_id": "mbpp_309_maximum", "prompt": "\n/// Write a swiftthon function to find the maximum of two numbers.\nfunc maximum(a: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(a: 5, b: 10) == 10)\nassert(maximum(a: -1, b: -2) == -1)\nassert(maximum(a: 9, b: 7) == 9)", "language": "swift"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "\n/// Write a function to convert a given string to an array of characters.\nfunc string_to_tuple(str1: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_tuple(str1: \"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"])\nassert(string_to_tuple(str1: \"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"])\nassert(string_to_tuple(str1: \"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"])", "language": "swift"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)", "language": "swift"}, {"task_id": "mbpp_389_find_lucas", "prompt": "\n/// Write a function to find the n'th lucas number.\nfunc find_lucas(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_lucas(n: 9) == 76)\nassert(find_lucas(n: 4) == 7)\nassert(find_lucas(n: 3) == 4)", "language": "swift"}, {"task_id": "mbpp_390_add_string", "prompt": "\n/// Write a function to apply a given format string to all of the elements in an array.\nfunc add_string(list_: [AnyHashable], string: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_string(list_: [1, 2, 3, 4], string: \"temp{0}\") == [\"temp1\", \"temp2\", \"temp3\", \"temp4\"])\nassert(add_string(list_: [\"a\", \"b\", \"c\", \"d\"], string: \"python{0}\") == [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])\nassert(add_string(list_: [5, 6, 7, 8], string: \"string{0}\") == [\"string5\", \"string6\", \"string7\", \"string8\"])", "language": "swift"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])", "language": "swift"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)", "language": "swift"}, {"task_id": "mbpp_393_max_length_list", "prompt": "\n/// Write a function to find the array with maximum length.\nfunc max_length_list(input_list: [[Int]]) -> (Int, [Int]) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_length_list(input_list: [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))\nassert(max_length_list(input_list: [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) == (5, [1, 2, 3, 4, 5]))\nassert(max_length_list(input_list: [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == (4, [6, 7, 8, 9]))", "language": "swift"}, {"task_id": "mbpp_394_check_distinct", "prompt": "\n/// Write a function to check if given array contains no duplicates.\nfunc check_distinct(test_tup: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_distinct(test_tup: [1, 4, 5, 6, 1, 4]) == false)\nassert(check_distinct(test_tup: [1, 4, 5, 6]) == true)\nassert(check_distinct(test_tup: [2, 3, 4, 5, 6]) == true)", "language": "swift"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")", "language": "swift"}, {"task_id": "mbpp_396_check_char", "prompt": "\n/// Write a function to check whether the given string starts and ends with the same character or not.\nfunc check_char(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_char(string: \"abba\") == \"Valid\")\nassert(check_char(string: \"a\") == \"Valid\")\nassert(check_char(string: \"abcd\") == \"Invalid\")", "language": "swift"}, {"task_id": "mbpp_397_median_numbers", "prompt": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)", "language": "swift"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "\n/// Write a function to compute the sum of digits of each number of a given array.\nfunc sum_of_digits(nums: [AnyHashable]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_of_digits(nums: [10, 2, 56]) == 14)\nassert(sum_of_digits(nums: [[10, 20, 4, 5, \"b\", 70, \"a\"]]) == 19)\nassert(sum_of_digits(nums: [10, 20, -4, 5, -70]) == 19)", "language": "swift"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "\n/// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nfunc bitwise_xor(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bitwise_xor(test_tup1: (10, 4, 6, 9), test_tup2: (5, 2, 3, 3)) == (15, 6, 5, 10))\nassert(bitwise_xor(test_tup1: (11, 5, 7, 10), test_tup2: (6, 3, 4, 4)) == (13, 6, 3, 14))\nassert(bitwise_xor(test_tup1: (12, 6, 8, 11), test_tup2: (7, 4, 5, 6)) == (11, 2, 13, 13))", "language": "swift"}, {"task_id": "mbpp_400_extract_freq", "prompt": "\n/// Write a function to extract the number of unique tuples in the given array.\nfunc extract_freq(test_list: [(Int, Int)]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_freq(test_list: [(3, 4), (1, 2), (4, 3), (5, 6)]) == 3)\nassert(extract_freq(test_list: [(4, 15), (2, 3), (5, 4), (6, 7)]) == 4)\nassert(extract_freq(test_list: [(5, 16), (2, 3), (6, 5), (6, 9)]) == 4)", "language": "swift"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "\n/// Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunc add_nested_tuples(test_tup1: [[Int]], test_tup2: [[Int]]) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_nested_tuples(test_tup1: [[1, 3], [4, 5], [2, 9], [1, 10]], test_tup2: [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]])\nassert(add_nested_tuples(test_tup1: [[2, 4], [5, 6], [3, 10], [2, 11]], test_tup2: [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[9, 12], [9, 16], [5, 12], [10, 15]])\nassert(add_nested_tuples(test_tup1: [[3, 5], [6, 7], [4, 11], [3, 12]], test_tup2: [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[11, 14], [11, 18], [7, 14], [12, 17]])", "language": "swift"}, {"task_id": "mbpp_404_minimum", "prompt": "\n/// Write a swiftthon function to find the minimum of two numbers.\nfunc minimum(a: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(minimum(a: 1, b: 2) == 1)\nassert(minimum(a: -5, b: -4) == -5)\nassert(minimum(a: 0, b: 0) == 0)", "language": "swift"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "\nextension Int: Error {}\n        \n/// Write a function to check whether an element exists within a tuple.\nfunc check_tuplex(tuplex: [Result<String, Int>], tuple1: AnyHashable) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_tuplex(tuplex: [.success(\"w\"), .failure(3), .success(\"r\"), .success(\"e\"), .success(\"s\"), .success(\"o\"), .success(\"u\"), .success(\"r\"), .success(\"c\"), .success(\"e\")], tuple1: \"r\") == true)\nassert(check_tuplex(tuplex: [.success(\"w\"), .failure(3), .success(\"r\"), .success(\"e\"), .success(\"s\"), .success(\"o\"), .success(\"u\"), .success(\"r\"), .success(\"c\"), .success(\"e\")], tuple1: \"5\") == false)\nassert(check_tuplex(tuplex: [.success(\"w\"), .failure(3), .success(\"r\"), .success(\"e\"), .success(\"s\"), .success(\"o\"), .success(\"u\"), .success(\"r\"), .success(\"c\"), .success(\"e\")], tuple1: 3) == true)", "language": "swift"}, {"task_id": "mbpp_406_find_Parity", "prompt": "\n/// Write a swiftthon function to find whether the parity of a given number is odd.\nfunc find_Parity(x: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Parity(x: 12) == false)\nassert(find_Parity(x: 7) == true)\nassert(find_Parity(x: 10) == false)", "language": "swift"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)", "language": "swift"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "\n/// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunc k_smallest_pairs(nums1: [Int], nums2: [Int], k: Int) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(k_smallest_pairs(nums1: [1, 3, 7], nums2: [2, 4, 6], k: 2) == [[1, 2], [1, 4]])\nassert(k_smallest_pairs(nums1: [1, 3, 7], nums2: [2, 4, 6], k: 1) == [[1, 2]])\nassert(k_smallest_pairs(nums1: [1, 3, 7], nums2: [2, 4, 6], k: 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]])", "language": "swift"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "\n/// Write a function to find the minimum product from the pairs of tuples within a given array.\nfunc min_product_tuple(list1: [(Int, Int)]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_product_tuple(list1: [(2, 7), (2, 6), (1, 8), (4, 9)]) == 8)\nassert(min_product_tuple(list1: [(10, 20), (15, 2), (5, 10)]) == 30)\nassert(min_product_tuple(list1: [(11, 44), (10, 15), (20, 5), (12, 9)]) == 100)", "language": "swift"}, {"task_id": "mbpp_410_min_val", "prompt": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)", "language": "swift"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")", "language": "swift"}, {"task_id": "mbpp_412_remove_odd", "prompt": "\n/// Write a swiftthon function to remove odd numbers from a given array.\nfunc remove_odd(l: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_odd(l: [1, 2, 3]) == [2])\nassert(remove_odd(l: [2, 4, 6]) == [2, 4, 6])\nassert(remove_odd(l: [10, 20, 3]) == [10, 20])", "language": "swift"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "\n/// Write a function to extract the nth element from a given array of tuples.\nfunc extract_nth_element(list1: [(String, Int, Int)], n: Int) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_nth_element(list1: [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], n: 0) == [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"])\nassert(extract_nth_element(list1: [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], n: 2) == [99, 96, 94, 98])\nassert(extract_nth_element(list1: [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], n: 1) == [98, 97, 91, 94])", "language": "swift"}, {"task_id": "mbpp_414_overlapping", "prompt": "\n/// Write a swiftthon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1: [Int], list2: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(overlapping(list1: [1, 2, 3, 4, 5], list2: [6, 7, 8, 9]) == false)\nassert(overlapping(list1: [1, 2, 3], list2: [4, 5, 6]) == false)\nassert(overlapping(list1: [1, 4, 5], list2: [1, 4, 5]) == true)", "language": "swift"}, {"task_id": "mbpp_415_max_Product", "prompt": "\n/// Write a swiftthon function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr: [Int]) -> (Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_Product(arr: [1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8))\nassert(max_Product(arr: [0, -1, -2, -4, 5, 0, -6]) == (-4, -6))\nassert(max_Product(arr: [1, 2, 3]) == (2, 3))", "language": "swift"}, {"task_id": "mbpp_417_group_tuples", "prompt": "\n/// Write a function to find common first element in given array of arrays.\nfunc group_tuples(Input: [[String]]) -> [[String]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(group_tuples(Input: [[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])\nassert(group_tuples(Input: [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\nassert(group_tuples(Input: [[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])", "language": "swift"}, {"task_id": "mbpp_418_Find_Max", "prompt": "\n/// Write a swiftthon function to find the element of an array having maximum length.\nfunc Find_Max(lst: [[AnyHashable]]) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max(lst: [[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]) == [\"A\", \"B\", \"C\"])\nassert(Find_Max(lst: [[1], [1, 2], [1, 2, 3]]) == [1, 2, 3])\nassert(Find_Max(lst: [[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1])", "language": "swift"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "\nextension Int: Error {}\n        \n/// Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.\nfunc round_and_sum(list1: [Result<Double, Int>]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(round_and_sum(list1: [.success(22.4), .success(4.0), .success(-16.22), .success(-9.1), .success(11.0), .success(-12.22), .success(14.2), .success(-5.2), .success(17.5)]) == 243)\nassert(round_and_sum(list1: [.failure(5), .failure(2), .failure(9), .success(24.3), .failure(29)]) == 345)\nassert(round_and_sum(list1: [.success(25.0), .success(56.7), .success(89.2)]) == 513)", "language": "swift"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "\n/// Write a swiftthon function to find the cube sum of first n even natural numbers.\nfunc cube_Sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cube_Sum(n: 2) == 72)\nassert(cube_Sum(n: 3) == 288)\nassert(cube_Sum(n: 4) == 800)", "language": "swift"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "\n/// Write a function to concatenate each element of tuple by the delimiter.\nfunc concatenate_tuple(test_tup: (String, String, Int, String)) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate_tuple(test_tup: (\"ID\", \"is\", 4, \"UTS\")) == \"ID-is-4-UTS\")\nassert(concatenate_tuple(test_tup: (\"QWE\", \"is\", 4, \"RTY\")) == \"QWE-is-4-RTY\")\nassert(concatenate_tuple(test_tup: (\"ZEN\", \"is\", 4, \"OP\")) == \"ZEN-is-4-OP\")", "language": "swift"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "\n/// Write a swiftthon function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)", "language": "swift"}, {"task_id": "mbpp_424_extract_rear", "prompt": "\n/// Write a function to extract only the rear index element of each string in the given tuple.\nfunc extract_rear(test_tuple: (String, String, String)) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_rear(test_tuple: (\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"])\nassert(extract_rear(test_tuple: (\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"])\nassert(extract_rear(test_tuple: (\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"])", "language": "swift"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "\n/// Write a function to count the number of subarrays containing a particular element.\nfunc count_element_in_list(list1: [[AnyHashable]], x: AnyHashable) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_element_in_list(list1: [[1, 3], [5, 7], [1, 11], [1, 15, 7]], x: 1) == 3)\nassert(count_element_in_list(list1: [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], x: \"A\") == 3)\nassert(count_element_in_list(list1: [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], x: \"E\") == 1)", "language": "swift"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "\n/// Write a function to filter odd numbers.\nfunc filter_oddnumbers(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_oddnumbers(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9])\nassert(filter_oddnumbers(nums: [10, 20, 45, 67, 84, 93]) == [45, 67, 93])\nassert(filter_oddnumbers(nums: [5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3])", "language": "swift"}, {"task_id": "mbpp_427_change_date_format", "prompt": "\n/// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(change_date_format(dt: \"2026-01-02\") == \"02-01-2026\")\nassert(change_date_format(dt: \"2020-11-13\") == \"13-11-2020\")\nassert(change_date_format(dt: \"2021-04-26\") == \"26-04-2021\")", "language": "swift"}, {"task_id": "mbpp_428_shell_sort", "prompt": "\n/// Write a function to sort the given array by using shell sort.\nfunc shell_sort(my_list: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(shell_sort(my_list: [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95])\nassert(shell_sort(my_list: [24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87])\nassert(shell_sort(my_list: [32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96])", "language": "swift"}, {"task_id": "mbpp_429_and_tuples", "prompt": "\n/// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(and_tuples(test_tup1: (10, 4, 6, 9), test_tup2: (5, 2, 3, 3)) == (0, 0, 2, 1))\nassert(and_tuples(test_tup1: (1, 2, 3, 4), test_tup2: (5, 6, 7, 8)) == (1, 2, 3, 0))\nassert(and_tuples(test_tup1: (8, 9, 11, 12), test_tup2: (7, 13, 14, 17)) == (0, 9, 10, 0))", "language": "swift"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "\n/// Write a function to find the directrix of a parabola.\nfunc parabola_directrix(a: Int, b: Int, c: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(parabola_directrix(a: 5, b: 3, c: 2) == -198)\nassert(parabola_directrix(a: 9, b: 8, c: 4) == -2336)\nassert(parabola_directrix(a: 2, b: 4, c: 6) == -130)", "language": "swift"}, {"task_id": "mbpp_431_common_element", "prompt": "\n/// Write a function that takes two arrays and returns true if they have at least one common element.\nfunc common_element(list1: [AnyHashable], list2: [AnyHashable]) -> Bool? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(common_element(list1: [1, 2, 3, 4, 5], list2: [5, 6, 7, 8, 9]) == true)\nassert(common_element(list1: [1, 2, 3, 4, 5], list2: [6, 7, 8, 9]) == nil)\nassert(common_element(list1: [\"a\", \"b\", \"c\"], list2: [\"d\", \"b\", \"e\"]) == true)", "language": "swift"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "\n/// Write a function to find the median length of a trapezium.\nfunc median_trapezium(base1: Int, base2: Int, height: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_trapezium(base1: 15, base2: 25, height: 35) == 20)\nassert(median_trapezium(base1: 10, base2: 20, height: 30) == 15)\nassert(median_trapezium(base1: 6, base2: 9, height: 4) == 7.5)", "language": "swift"}, {"task_id": "mbpp_433_check_greater", "prompt": "\n/// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr: [Int], number: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_greater(arr: [1, 2, 3, 4, 5], number: 4) == false)\nassert(check_greater(arr: [2, 3, 4, 5, 6], number: 8) == true)\nassert(check_greater(arr: [9, 7, 4, 8, 6, 1], number: 11) == true)", "language": "swift"}, {"task_id": "mbpp_434_text_match_one", "prompt": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)", "language": "swift"}, {"task_id": "mbpp_435_last_Digit", "prompt": "\n/// Write a swiftthon function to find the last digit of a given number.\nfunc last_Digit(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(last_Digit(n: 123) == 3)\nassert(last_Digit(n: 25) == 5)\nassert(last_Digit(n: 30) == 0)", "language": "swift"}, {"task_id": "mbpp_436_neg_nos", "prompt": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])", "language": "swift"}, {"task_id": "mbpp_437_remove_odd", "prompt": "\n/// Write a function to remove odd characters in a string.\nfunc remove_odd(str1: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_odd(str1: \"python\") == \"yhn\")\nassert(remove_odd(str1: \"program\") == \"rga\")\nassert(remove_odd(str1: \"language\") == \"agae\")", "language": "swift"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "\n/// Write a function to count bidirectional tuple pairs.\nfunc count_bidirectional(test_list: [(Int, Int)]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_bidirectional(test_list: [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3)\nassert(count_bidirectional(test_list: [(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2)\nassert(count_bidirectional(test_list: [(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4)", "language": "swift"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "\n/// Write a function to join an array of multiple integers into a single integer.\nfunc multiple_to_single(L: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(multiple_to_single(L: [11, 33, 50]) == 113350)\nassert(multiple_to_single(L: [-1, 2, 3, 4, 5, 6]) == -123456)\nassert(multiple_to_single(L: [10, 15, 20, 25]) == 10152025)", "language": "swift"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "\n/// Write a function to find the first adverb and their positions in a given sentence.\nfunc find_adverb_position(text: String) -> (Int, Int, String) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_adverb_position(text: \"clearly!! we can see the sky\") == (0, 7, \"clearly\"))\nassert(find_adverb_position(text: \"seriously!! there are many roses\") == (0, 9, \"seriously\"))\nassert(find_adverb_position(text: \"unfortunately!! sita is going to home\") == (0, 13, \"unfortunately\"))", "language": "swift"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "\n/// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(surfacearea_cube(l: 5) == 150)\nassert(surfacearea_cube(l: 3) == 54)\nassert(surfacearea_cube(l: 10) == 600)", "language": "swift"}, {"task_id": "mbpp_442_positive_count", "prompt": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)", "language": "swift"}, {"task_id": "mbpp_443_largest_neg", "prompt": "\n/// Write a swiftthon function to find the largest negative number from the given array.\nfunc largest_neg(list1: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(largest_neg(list1: [1, 2, 3, -4, -6]) == -6)\nassert(largest_neg(list1: [1, 2, 3, -8, -9]) == -9)\nassert(largest_neg(list1: [1, 2, 3, 4, -1]) == -1)", "language": "swift"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "\n/// Write a function to trim each array by k in the given arrays.\nfunc trim_tuple(test_list: [[Int]], K: Int) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(trim_tuple(test_list: [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], K: 2) == [[2], [9], [2], [2]])\nassert(trim_tuple(test_list: [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], K: 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]])\nassert(trim_tuple(test_list: [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], K: 1) == [[8, 4], [8, 12], [1, 7], [6, 9]])", "language": "swift"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "\n/// Write a function to perform index wise multiplication of array elements in the given two arrays.\nfunc index_multiplication(test_tup1: [[Int]], test_tup2: [[Int]]) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(index_multiplication(test_tup1: [[1, 3], [4, 5], [2, 9], [1, 10]], test_tup2: [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]])\nassert(index_multiplication(test_tup1: [[2, 4], [5, 6], [3, 10], [2, 11]], test_tup2: [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[14, 32], [20, 60], [6, 20], [16, 44]])\nassert(index_multiplication(test_tup1: [[3, 5], [6, 7], [4, 11], [3, 12]], test_tup2: [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[24, 45], [30, 77], [12, 33], [27, 60]])", "language": "swift"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "\n/// Write a swiftthon function to count the occurence of all elements of array in a tuple.\nfunc count_Occurrence(tup: AnyHashable, lst: [AnyHashable]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Occurrence(tup: (\"a\", \"a\", \"c\", \"b\", \"d\"), lst: [\"a\", \"b\"]) == 3)\nassert(count_Occurrence(tup: (1, 2, 3, 1, 4, 6, 7, 1, 4), lst: [1, 4, 7]) == 6)\nassert(count_Occurrence(tup: (1, 2, 3, 4, 5, 6), lst: [1, 2]) == 2)", "language": "swift"}, {"task_id": "mbpp_447_cube_nums", "prompt": "\n/// Write a function to find cubes of individual elements in an array.\nfunc cube_nums(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cube_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000])\nassert(cube_nums(nums: [10, 20, 30]) == [1000, 8000, 27000])\nassert(cube_nums(nums: [12, 15]) == [1728, 3375])", "language": "swift"}, {"task_id": "mbpp_448_cal_sum", "prompt": "\n/// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cal_sum(n: 9) == 49)\nassert(cal_sum(n: 10) == 66)\nassert(cal_sum(n: 11) == 88)", "language": "swift"}, {"task_id": "mbpp_450_extract_string", "prompt": "\n/// Write a function to extract specified size of strings from a given array of string values.\nfunc extract_string(str: [String], l: Int) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 8) == [\"practice\", \"solution\"])\nassert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 6) == [\"Python\"])\nassert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 9) == [\"exercises\"])", "language": "swift"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "\n/// Write a function to remove all whitespaces from the given string.\nfunc remove_whitespaces(text1: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_whitespaces(text1: \" Google    Flutter \") == \"GoogleFlutter\")\nassert(remove_whitespaces(text1: \" Google    Dart \") == \"GoogleDart\")\nassert(remove_whitespaces(text1: \" iOS    Swift \") == \"iOSSwift\")", "language": "swift"}, {"task_id": "mbpp_452_loss_amount", "prompt": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)", "language": "swift"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "\n/// Write a swiftthon function to find the sum of even factors of a number.\nfunc sumofFactors(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sumofFactors(n: 18) == 26)\nassert(sumofFactors(n: 30) == 48)\nassert(sumofFactors(n: 6) == 8)", "language": "swift"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)", "language": "swift"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "\n/// Write a function to check whether the given month number contains 31 days or not.\nfunc check_monthnumb_number(monthnum2: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_monthnumb_number(monthnum2: 5) == true)\nassert(check_monthnumb_number(monthnum2: 2) == false)\nassert(check_monthnumb_number(monthnum2: 6) == false)", "language": "swift"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "\n/// Write a function to reverse each string in a given array of string values.\nfunc reverse_string_list(stringlist: [String]) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_string_list(stringlist: [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"])\nassert(reverse_string_list(stringlist: [\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"])\nassert(reverse_string_list(stringlist: [\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"])", "language": "swift"}, {"task_id": "mbpp_457_Find_Min", "prompt": "\n/// Write a swiftthon function to find the subarray having minimum length.\nfunc Find_Min(lst: [[AnyHashable]]) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min(lst: [[1], [1, 2], [1, 2, 3]]) == [1])\nassert(Find_Min(lst: [[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1])\nassert(Find_Min(lst: [[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]) == [\"x\"])", "language": "swift"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "\n/// Write a function to find the area of a rectangle.\nfunc rectangle_area(l: Int, b: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rectangle_area(l: 10, b: 20) == 200)\nassert(rectangle_area(l: 10, b: 5) == 50)\nassert(rectangle_area(l: 4, b: 2) == 8)", "language": "swift"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")", "language": "swift"}, {"task_id": "mbpp_460_Extract", "prompt": "\n/// Write a swiftthon function to get the first element of each subarray.\nfunc Extract(lst: [[Int]]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Extract(lst: [[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6])\nassert(Extract(lst: [[1, 2, 3], [4, 5]]) == [1, 4])\nassert(Extract(lst: [[9, 8, 1], [1, 2]]) == [9, 1])", "language": "swift"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "\n/// Write a swiftthon function to count the upper case characters in a given string.\nfunc upper_ctr(str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(upper_ctr(str: \"PYthon\") == 1)\nassert(upper_ctr(str: \"BigData\") == 1)\nassert(upper_ctr(str: \"program\") == 0)", "language": "swift"}, {"task_id": "mbpp_462_combinations_list", "prompt": "\nextension [String]: Error {}\n        \n/// Write a function to find all possible combinations of the elements of a given array.\nfunc combinations_list(list1: [String]) -> [Result<[()], [String]>] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(combinations_list(list1: [\"orange\", \"red\", \"green\", \"blue\"]) == [.success([] as [()]), .failure([\"orange\"]), .failure([\"red\"]), .failure([\"red\", \"orange\"]), .failure([\"green\"]), .failure([\"green\", \"orange\"]), .failure([\"green\", \"red\"]), .failure([\"green\", \"red\", \"orange\"]), .failure([\"blue\"]), .failure([\"blue\", \"orange\"]), .failure([\"blue\", \"red\"]), .failure([\"blue\", \"red\", \"orange\"]), .failure([\"blue\", \"green\"]), .failure([\"blue\", \"green\", \"orange\"]), .failure([\"blue\", \"green\", \"red\"]), .failure([\"blue\", \"green\", \"red\", \"orange\"])])\nassert(combinations_list(list1: [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]) == [.success([] as [()]), .failure([\"red\"]), .failure([\"green\"]), .failure([\"green\", \"red\"]), .failure([\"blue\"]), .failure([\"blue\", \"red\"]), .failure([\"blue\", \"green\"]), .failure([\"blue\", \"green\", \"red\"]), .failure([\"white\"]), .failure([\"white\", \"red\"]), .failure([\"white\", \"green\"]), .failure([\"white\", \"green\", \"red\"]), .failure([\"white\", \"blue\"]), .failure([\"white\", \"blue\", \"red\"]), .failure([\"white\", \"blue\", \"green\"]), .failure([\"white\", \"blue\", \"green\", \"red\"]), .failure([\"black\"]), .failure([\"black\", \"red\"]), .failure([\"black\", \"green\"]), .failure([\"black\", \"green\", \"red\"]), .failure([\"black\", \"blue\"]), .failure([\"black\", \"blue\", \"red\"]), .failure([\"black\", \"blue\", \"green\"]), .failure([\"black\", \"blue\", \"green\", \"red\"]), .failure([\"black\", \"white\"]), .failure([\"black\", \"white\", \"red\"]), .failure([\"black\", \"white\", \"green\"]), .failure([\"black\", \"white\", \"green\", \"red\"]), .failure([\"black\", \"white\", \"blue\"]), .failure([\"black\", \"white\", \"blue\", \"red\"]), .failure([\"black\", \"white\", \"blue\", \"green\"]), .failure([\"black\", \"white\", \"blue\", \"green\", \"red\"]), .failure([\"orange\"]), .failure([\"orange\", \"red\"]), .failure([\"orange\", \"green\"]), .failure([\"orange\", \"green\", \"red\"]), .failure([\"orange\", \"blue\"]), .failure([\"orange\", \"blue\", \"red\"]), .failure([\"orange\", \"blue\", \"green\"]), .failure([\"orange\", \"blue\", \"green\", \"red\"]), .failure([\"orange\", \"white\"]), .failure([\"orange\", \"white\", \"red\"]), .failure([\"orange\", \"white\", \"green\"]), .failure([\"orange\", \"white\", \"green\", \"red\"]), .failure([\"orange\", \"white\", \"blue\"]), .failure([\"orange\", \"white\", \"blue\", \"red\"]), .failure([\"orange\", \"white\", \"blue\", \"green\"]), .failure([\"orange\", \"white\", \"blue\", \"green\", \"red\"]), .failure([\"orange\", \"black\"]), .failure([\"orange\", \"black\", \"red\"]), .failure([\"orange\", \"black\", \"green\"]), .failure([\"orange\", \"black\", \"green\", \"red\"]), .failure([\"orange\", \"black\", \"blue\"]), .failure([\"orange\", \"black\", \"blue\", \"red\"]), .failure([\"orange\", \"black\", \"blue\", \"green\"]), .failure([\"orange\", \"black\", \"blue\", \"green\", \"red\"]), .failure([\"orange\", \"black\", \"white\"]), .failure([\"orange\", \"black\", \"white\", \"red\"]), .failure([\"orange\", \"black\", \"white\", \"green\"]), .failure([\"orange\", \"black\", \"white\", \"green\", \"red\"]), .failure([\"orange\", \"black\", \"white\", \"blue\"]), .failure([\"orange\", \"black\", \"white\", \"blue\", \"red\"]), .failure([\"orange\", \"black\", \"white\", \"blue\", \"green\"]), .failure([\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"])])\nassert(combinations_list(list1: [\"red\", \"green\", \"black\", \"orange\"]) == [.success([] as [()]), .failure([\"red\"]), .failure([\"green\"]), .failure([\"green\", \"red\"]), .failure([\"black\"]), .failure([\"black\", \"red\"]), .failure([\"black\", \"green\"]), .failure([\"black\", \"green\", \"red\"]), .failure([\"orange\"]), .failure([\"orange\", \"red\"]), .failure([\"orange\", \"green\"]), .failure([\"orange\", \"green\", \"red\"]), .failure([\"orange\", \"black\"]), .failure([\"orange\", \"black\", \"red\"]), .failure([\"orange\", \"black\", \"green\"]), .failure([\"orange\", \"black\", \"green\", \"red\"])])", "language": "swift"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "\n/// Write a function to find the maximum product subarray of the given array.\nfunc max_subarray_product(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_subarray_product(arr: [1, -2, -3, 0, 7, -8, -2]) == 112)\nassert(max_subarray_product(arr: [6, -3, -10, 0, 2]) == 180)\nassert(max_subarray_product(arr: [-2, -40, 0, -2, -3]) == 80)", "language": "swift"}, {"task_id": "mbpp_464_check_value", "prompt": "\n/// Write a function to check if all values are same in a dictionary.\nfunc check_value(dict: [String : Int], n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_value(dict: [\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], n: 10) == false)\nassert(check_value(dict: [\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], n: 12) == true)\nassert(check_value(dict: [\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], n: 5) == false)", "language": "swift"}, {"task_id": "mbpp_465_drop_empty", "prompt": "\n/// Write a function to drop empty items from a given dictionary.\nfunc drop_empty(dict1: [String : String?]) -> [String : String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(drop_empty(dict1: [\"c1\" : \"Red\", \"c2\" : \"Green\", \"c3\" : nil]) == [\"c1\" : \"Red\", \"c2\" : \"Green\"])\nassert(drop_empty(dict1: [\"c1\" : \"Red\", \"c2\" : nil, \"c3\" : nil]) == [\"c1\" : \"Red\"])\nassert(drop_empty(dict1: [\"c1\" : nil, \"c2\" : \"Green\", \"c3\" : nil]) == [\"c2\" : \"Green\"])", "language": "swift"}, {"task_id": "mbpp_468_max_product", "prompt": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)", "language": "swift"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "\n/// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfunc add_pairwise(test_tup: (Int, Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_pairwise(test_tup: (1, 5, 7, 8, 10)) == (6, 12, 15, 18))\nassert(add_pairwise(test_tup: (2, 6, 8, 9, 11)) == (8, 14, 17, 20))\nassert(add_pairwise(test_tup: (3, 7, 9, 10, 12)) == (10, 16, 19, 22))", "language": "swift"}, {"task_id": "mbpp_471_find_remainder", "prompt": "\n/// Write a swiftthon function to find the product of the array multiplication modulo n.\nfunc find_remainder(arr: [Int], n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_remainder(arr: [100, 10, 5, 25, 35, 14], n: 11) == 9)\nassert(find_remainder(arr: [1, 1, 1], n: 1) == 0)\nassert(find_remainder(arr: [1, 2, 1], n: 2) == 0)", "language": "swift"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)", "language": "swift"}, {"task_id": "mbpp_474_replace_char", "prompt": "\n/// Write a function to replace characters in a string.\nfunc replace_char(str1: String, ch: String, newch: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_char(str1: \"polygon\", ch: \"y\", newch: \"l\") == \"pollgon\")\nassert(replace_char(str1: \"character\", ch: \"c\", newch: \"a\") == \"aharaater\")\nassert(replace_char(str1: \"python\", ch: \"l\", newch: \"a\") == \"python\")", "language": "swift"}, {"task_id": "mbpp_475_sort_counter", "prompt": "\n/// Write a function to sort a dictionary by value.\nfunc sort_counter(dict1: [String : Int]) -> [(String, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_counter(dict1: [\"Math\" : 81, \"Physics\" : 83, \"Chemistry\" : 87]) == [(\"Chemistry\", 87), (\"Physics\", 83), (\"Math\", 81)])\nassert(sort_counter(dict1: [\"Math\" : 400, \"Physics\" : 300, \"Chemistry\" : 250]) == [(\"Math\", 400), (\"Physics\", 300), (\"Chemistry\", 250)])\nassert(sort_counter(dict1: [\"Math\" : 900, \"Physics\" : 1000, \"Chemistry\" : 1250]) == [(\"Chemistry\", 1250), (\"Physics\", 1000), (\"Math\", 900)])", "language": "swift"}, {"task_id": "mbpp_476_big_sum", "prompt": "\n/// Write a swiftthon function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)", "language": "swift"}, {"task_id": "mbpp_477_is_lower", "prompt": "\n/// Write a swiftthon function to convert the given string to lower case.\nfunc is_lower(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_lower(string: \"InValid\") == \"invalid\")\nassert(is_lower(string: \"TruE\") == \"true\")\nassert(is_lower(string: \"SenTenCE\") == \"sentence\")", "language": "swift"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "\n/// Write a function to remove lowercase substrings from a given string.\nfunc remove_lowercase(str1: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_lowercase(str1: \"PYTHon\") == \"PYTH\")\nassert(remove_lowercase(str1: \"FInD\") == \"FID\")\nassert(remove_lowercase(str1: \"STRinG\") == \"STRG\")", "language": "swift"}, {"task_id": "mbpp_479_first_Digit", "prompt": "\n/// Write a swiftthon function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)", "language": "swift"}, {"task_id": "mbpp_554_Split", "prompt": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])", "language": "swift"}, {"task_id": "mbpp_555_difference", "prompt": "\n/// Write a swiftthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunc difference(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(difference(n: 3) == 30)\nassert(difference(n: 5) == 210)\nassert(difference(n: 2) == 6)", "language": "swift"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "\n/// Write a swiftthon function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A: [Int], N: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Odd_Pair(A: [5, 4, 7, 2, 1], N: 5) == 6)\nassert(find_Odd_Pair(A: [7, 2, 8, 1, 0, 5, 11], N: 7) == 12)\nassert(find_Odd_Pair(A: [1, 2, 3], N: 3) == 2)", "language": "swift"}, {"task_id": "mbpp_557_toggle_string", "prompt": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")", "language": "swift"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)", "language": "swift"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "\n/// Write a function to find the sum of the largest contiguous subarray in the given array.\nfunc max_sub_array_sum(a: [Int], size: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sub_array_sum(a: [-2, -3, 4, -1, -2, 1, 5, -3], size: 8) == 7)\nassert(max_sub_array_sum(a: [-3, -4, 5, -2, -3, 2, 6, -4], size: 8) == 8)\nassert(max_sub_array_sum(a: [-4, -5, 6, -3, -4, 3, 7, -5], size: 8) == 10)", "language": "swift"}, {"task_id": "mbpp_560_union_elements", "prompt": "\n/// Write a function to find the union of the elements of two given arrays and output them in sorted order.\nfunc union_elements(test_tup1: [Int], test_tup2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(union_elements(test_tup1: [3, 4, 5, 6], test_tup2: [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10])\nassert(union_elements(test_tup1: [1, 2, 3, 4], test_tup2: [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6])\nassert(union_elements(test_tup1: [11, 12, 13, 14], test_tup2: [13, 15, 16, 17]) == [11, 12, 13, 14, 15, 16, 17])", "language": "swift"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)", "language": "swift"}, {"task_id": "mbpp_563_extract_values", "prompt": "\n/// Write a function to extract values between quotation marks from a string.\nfunc extract_values(text: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_values(text: \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])\nassert(extract_values(text: \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])\nassert(extract_values(text: \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])", "language": "swift"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)", "language": "swift"}, {"task_id": "mbpp_565_split", "prompt": "\n/// Write a swiftthon function to split a string into characters.\nfunc split(word: String) -> [String] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split(word: \"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\nassert(split(word: \"Name\") == [\"N\", \"a\", \"m\", \"e\"])\nassert(split(word: \"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])", "language": "swift"}, {"task_id": "mbpp_566_sum_digits", "prompt": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)", "language": "swift"}, {"task_id": "mbpp_567_issort_list", "prompt": "\n/// Write a function to check whether a specified array is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)", "language": "swift"}, {"task_id": "mbpp_568_empty_list", "prompt": "\n/// Write a function to create an array of N empty dictionaries.\nfunc empty_list(length: Int) -> [[() : ()]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(empty_list(length: 5) == [[:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()]])\nassert(empty_list(length: 6) == [[:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()]])\nassert(empty_list(length: 7) == [[:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()]])", "language": "swift"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "\n/// Write a function to sort each subarray of strings in a given array of arrays.\nfunc sort_sublists(list1: [[String]]) -> [[String]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_sublists(list1: [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])\nassert(sort_sublists(list1: [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\nassert(sort_sublists(list1: [[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]])", "language": "swift"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])", "language": "swift"}, {"task_id": "mbpp_573_unique_product", "prompt": "\n/// Write a swiftthon function to calculate the product of the unique numbers in a given array.\nfunc unique_product(list_data: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)", "language": "swift"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "\n/// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r: Int, h: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(surfacearea_cylinder(r: 10, h: 5) == 942.45)\nassert(surfacearea_cylinder(r: 4, h: 5) == 226.18800000000002)\nassert(surfacearea_cylinder(r: 4, h: 10) == 351.848)", "language": "swift"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)", "language": "swift"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "\n/// Write a swiftthon function to find the last digit in factorial of a given number.\nfunc last_Digit_Factorial(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(last_Digit_Factorial(n: 4) == 4)\nassert(last_Digit_Factorial(n: 21) == 0)\nassert(last_Digit_Factorial(n: 30) == 0)", "language": "swift"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "\n/// Write a function to interleave 3 arrays of the same length into a single flat array.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])", "language": "swift"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "\n/// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_dissimilar(test_tup1: (3, 4, 5, 6), test_tup2: (5, 7, 4, 10)) == (3, 6, 7, 10))\nassert(find_dissimilar(test_tup1: (1, 2, 3, 4), test_tup2: (7, 2, 3, 9)) == (1, 4, 7, 9))\nassert(find_dissimilar(test_tup1: (21, 11, 25, 26), test_tup2: (26, 34, 21, 36)) == (34, 36, 11, 25))", "language": "swift"}, {"task_id": "mbpp_580_extract_even", "prompt": "\n/// Write a function to remove uneven elements in the nested mixed tuple.\nfunc extract_even(test_tuple: (Int, Int, (Int, Int, (Int, Int)), Int, Int)) -> AnyHashable {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_even(test_tuple: (4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8))\nassert(extract_even(test_tuple: (5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8))))\nassert(extract_even(test_tuple: (5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10))", "language": "swift"}, {"task_id": "mbpp_581_surface_Area", "prompt": "\n/// Write a swiftthon function to find the surface area of a square swiftramid with a given base edge and height.\nfunc surface_Area(b: Int, s: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(surface_Area(b: 3, s: 4) == 33)\nassert(surface_Area(b: 4, s: 5) == 56)\nassert(surface_Area(b: 1, s: 2) == 5)", "language": "swift"}, {"task_id": "mbpp_583_catalan_number", "prompt": "\n/// Write a function which returns nth catalan number.\nfunc catalan_number(num: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(catalan_number(num: 10) == 16796)\nassert(catalan_number(num: 9) == 4862)\nassert(catalan_number(num: 7) == 429)", "language": "swift"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "\n/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunc find_adverbs(text: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_adverbs(text: \"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")\nassert(find_adverbs(text: \"Please handle the situation carefuly\") == \"28-36: carefuly\")\nassert(find_adverbs(text: \"Complete the task quickly\") == \"18-25: quickly\")", "language": "swift"}, {"task_id": "mbpp_585_expensive_items", "prompt": "\nextension Double: Error {}\n        \n/// Write a function to find the n most expensive items in a given dataset.\nfunc expensive_items(items: [[String : Result<String, Double>]], n: Int) -> [[String : Result<String, Double>]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]], n: 1) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]])\nassert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-3\"), \"price\" : .failure(45.09)]], n: 2) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)]])\nassert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-3\"), \"price\" : .failure(45.09)], [\"name\" : .success(\"Item-4\"), \"price\" : .failure(22.75)]], n: 1) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]])", "language": "swift"}, {"task_id": "mbpp_586_split_Arr", "prompt": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])", "language": "swift"}, {"task_id": "mbpp_587_list_tuple", "prompt": "\n/// Write a function to convert an array to a tuple.\nfunc list_tuple(listx: [Int]) -> AnyHashable {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(list_tuple(listx: [5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3))\nassert(list_tuple(listx: [2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7))\nassert(list_tuple(listx: [58, 44, 56]) == (58, 44, 56))", "language": "swift"}, {"task_id": "mbpp_588_big_diff", "prompt": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)", "language": "swift"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])", "language": "swift"}, {"task_id": "mbpp_591_swap_List", "prompt": "\n/// Write a swiftthon function to interchange the first and last elements in an array.\nfunc swap_List(newList: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(swap_List(newList: [12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12])\nassert(swap_List(newList: [1, 2, 3]) == [3, 2, 1])\nassert(swap_List(newList: [4, 5, 6]) == [6, 5, 4])", "language": "swift"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "\n/// Write a swiftthon function to find the sum of the product of consecutive binomial co-efficients.\nfunc sum_Of_product(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_product(n: 3) == 15)\nassert(sum_Of_product(n: 4) == 56)\nassert(sum_Of_product(n: 1) == 1)", "language": "swift"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "\n/// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(removezero_ip(ip: \"216.08.094.196\") == \"216.8.94.196\")\nassert(removezero_ip(ip: \"12.01.024\") == \"12.1.24\")\nassert(removezero_ip(ip: \"216.08.094.0196\") == \"216.8.94.196\")", "language": "swift"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)", "language": "swift"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")", "language": "swift"}, {"task_id": "mbpp_597_find_kth", "prompt": "\n/// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1: [Int], arr2: [Int], k: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_kth(arr1: [2, 3, 6, 7, 9], arr2: [1, 4, 8, 10], k: 5) == 6)\nassert(find_kth(arr1: [100, 112, 256, 349, 770], arr2: [72, 86, 113, 119, 265, 445, 892], k: 7) == 256)\nassert(find_kth(arr1: [3, 4, 7, 8, 10], arr2: [2, 5, 9, 11], k: 6) == 8)", "language": "swift"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)", "language": "swift"}, {"task_id": "mbpp_599_sum_average", "prompt": "\n/// Write a function to find sum and average of first n natural numbers.\nfunc sum_average(number: Int) -> (Int, Double) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_average(number: 10) == (55, 5.5))\nassert(sum_average(number: 15) == (120, 8.0))\nassert(sum_average(number: 20) == (210, 10.5))", "language": "swift"}, {"task_id": "mbpp_600_is_Even", "prompt": "\n/// Write a swiftthon function to check whether the given number is even or not.\nfunc is_Even(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Even(n: 1) == false)\nassert(is_Even(n: 2) == true)\nassert(is_Even(n: 3) == false)", "language": "swift"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "\n/// Write a swiftthon function to find the first repeated character in a given string.\nfunc first_repeated_char(str1: String) -> String? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_repeated_char(str1: \"abcabc\") == \"a\")\nassert(first_repeated_char(str1: \"abc\") == nil)\nassert(first_repeated_char(str1: \"123123\") == \"1\")", "language": "swift"}, {"task_id": "mbpp_603_get_ludic", "prompt": "\n/// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfunc get_ludic(n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_ludic(n: 10) == [1, 2, 3, 5, 7])\nassert(get_ludic(n: 25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25])\nassert(get_ludic(n: 45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43])", "language": "swift"}, {"task_id": "mbpp_604_reverse_words", "prompt": "\n/// Write a function to reverse words seperated by spaces in a given string.\nfunc reverse_words(s: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_words(s: \"python program\") == \"program python\")\nassert(reverse_words(s: \"java language\") == \"language java\")\nassert(reverse_words(s: \"indian man\") == \"man indian\")", "language": "swift"}, {"task_id": "mbpp_605_prime_num", "prompt": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)", "language": "swift"}, {"task_id": "mbpp_606_radian_degree", "prompt": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)", "language": "swift"}, {"task_id": "mbpp_607_find_literals", "prompt": "\n/// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunc find_literals(text: String, pattern: String) -> (String, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_literals(text: \"The quick brown fox jumps over the lazy dog.\", pattern: \"fox\") == (\"fox\", 16, 19))\nassert(find_literals(text: \"Its been a very crazy procedure right\", pattern: \"crazy\") == (\"crazy\", 16, 21))\nassert(find_literals(text: \"Hardest choices required strongest will\", pattern: \"will\") == (\"will\", 35, 39))", "language": "swift"}, {"task_id": "mbpp_608_bell_Number", "prompt": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)", "language": "swift"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "\n/// Write a swiftthon function which takes an array and returns an array with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1: [Int], L: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_kth_element(list1: [1, 1, 2, 3, 4, 4, 5, 1], L: 3) == [1, 1, 3, 4, 4, 5, 1])\nassert(remove_kth_element(list1: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], L: 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\nassert(remove_kth_element(list1: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], L: 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10])", "language": "swift"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "\n/// Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunc max_of_nth(test_list: [[Int]], N: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_of_nth(test_list: [[5, 6, 7], [1, 3, 5], [8, 9, 19]], N: 2) == 19)\nassert(max_of_nth(test_list: [[6, 7, 8], [2, 4, 6], [9, 10, 20]], N: 1) == 10)\nassert(max_of_nth(test_list: [[7, 8, 9], [3, 5, 7], [10, 11, 21]], N: 1) == 11)", "language": "swift"}, {"task_id": "mbpp_612_merge", "prompt": "\n/// Write a swiftthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nfunc merge(lst: [[AnyHashable]]) -> [[AnyHashable]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(merge(lst: [[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])\nassert(merge(lst: [[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]])\nassert(merge(lst: [[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])", "language": "swift"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "\n/// Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\nfunc cummulative_sum(test_list: [[Int]]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cummulative_sum(test_list: [[1, 3], [5, 6, 7], [2, 6]]) == 30)\nassert(cummulative_sum(test_list: [[2, 4], [6, 7, 8], [3, 7]]) == 37)\nassert(cummulative_sum(test_list: [[3, 5], [7, 8, 9], [4, 8]]) == 44)", "language": "swift"}, {"task_id": "mbpp_615_average_tuple", "prompt": "\n/// Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.\nfunc average_tuple(nums: [[Int]]) -> [Double] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(average_tuple(nums: [[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25])\nassert(average_tuple(nums: [[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) == [25.5, -18.0, 3.75])\nassert(average_tuple(nums: [[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) == [305.0, 342.5, 270.0, 232.5])", "language": "swift"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "\n/// Write a function which takes two tuples of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tuple_modulo(test_tup1: (10, 4, 5, 6), test_tup2: (5, 6, 7, 5)) == (0, 4, 5, 1))\nassert(tuple_modulo(test_tup1: (11, 5, 6, 7), test_tup2: (6, 7, 8, 6)) == (5, 5, 6, 1))\nassert(tuple_modulo(test_tup1: (12, 6, 7, 8), test_tup2: (7, 8, 9, 7)) == (5, 6, 7, 1))", "language": "swift"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "\n/// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunc min_Jumps(steps: (Int, Int), d: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Jumps(steps: (3, 4), d: 11) == 3.5)\nassert(min_Jumps(steps: (3, 4), d: 0) == 0)\nassert(min_Jumps(steps: (11, 14), d: 11) == 1)", "language": "swift"}, {"task_id": "mbpp_618_div_list", "prompt": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])", "language": "swift"}, {"task_id": "mbpp_619_move_num", "prompt": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")", "language": "swift"}, {"task_id": "mbpp_622_get_median", "prompt": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)", "language": "swift"}, {"task_id": "mbpp_623_nth_nums", "prompt": "\n/// Write a function to compute the n-th power of each number in an array.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])", "language": "swift"}, {"task_id": "mbpp_624_is_upper", "prompt": "\n/// Write a swiftthon function to convert a given string to uppercase.\nfunc is_upper(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_upper(string: \"person\") == \"PERSON\")\nassert(is_upper(string: \"final\") == \"FINAL\")\nassert(is_upper(string: \"Valid\") == \"VALID\")", "language": "swift"}, {"task_id": "mbpp_625_swap_List", "prompt": "\n/// Write a swiftthon function to interchange the first and last element in a given array.\nfunc swap_List(newList: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(swap_List(newList: [1, 2, 3]) == [3, 2, 1])\nassert(swap_List(newList: [1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1])\nassert(swap_List(newList: [4, 5, 6]) == [6, 5, 4])", "language": "swift"}, {"task_id": "mbpp_626_triangle_area", "prompt": "\n/// Write a swiftthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunc triangle_area(r: Int) -> Int? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(r: -1) == nil)\nassert(triangle_area(r: 0) == 0)\nassert(triangle_area(r: 2) == 4)", "language": "swift"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)", "language": "swift"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "\n/// Write a function to replace all spaces in the given string with '%20'.\nfunc replace_spaces(string: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_spaces(string: \"My Name is Dawood\") == \"My%20Name%20is%20Dawood\")\nassert(replace_spaces(string: \"I am a Programmer\") == \"I%20am%20a%20Programmer\")\nassert(replace_spaces(string: \"I love Coding\") == \"I%20love%20Coding\")", "language": "swift"}, {"task_id": "mbpp_629_Split", "prompt": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])", "language": "swift"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "\n/// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfunc get_coordinates(test_tup: (Int, Int)) -> [[Int]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_coordinates(test_tup: (3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])\nassert(get_coordinates(test_tup: (4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])\nassert(get_coordinates(test_tup: (5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])", "language": "swift"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "\n/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_spaces(text: \"Jumanji The Jungle\") == \"Jumanji_The_Jungle\")\nassert(replace_spaces(text: \"The_Avengers\") == \"The Avengers\")\nassert(replace_spaces(text: \"Fast and Furious\") == \"Fast_and_Furious\")", "language": "swift"}, {"task_id": "mbpp_632_move_zero", "prompt": "\n/// Write a swiftthon function to move all zeroes to the end of the given array.\nfunc move_zero(num_list: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])", "language": "swift"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "\n/// Write a swiftthon function to find the sum of xor of all pairs of numbers in the given array.\nfunc pair_xor_Sum(arr: [Int], n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pair_xor_Sum(arr: [5, 9, 7, 6], n: 4) == 47)\nassert(pair_xor_Sum(arr: [7, 3, 5], n: 3) == 12)\nassert(pair_xor_Sum(arr: [7, 3], n: 2) == 4)", "language": "swift"}, {"task_id": "mbpp_635_heap_sort", "prompt": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])", "language": "swift"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "\n/// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost: Int, sale_amount: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(noprofit_noloss(actual_cost: 1500, sale_amount: 1200) == false)\nassert(noprofit_noloss(actual_cost: 100, sale_amount: 100) == true)\nassert(noprofit_noloss(actual_cost: 2000, sale_amount: 5000) == false)", "language": "swift"}, {"task_id": "mbpp_638_wind_chill", "prompt": "\n/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v: Int, t: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(wind_chill(v: 120, t: 35) == 40)\nassert(wind_chill(v: 40, t: 20) == 19)\nassert(wind_chill(v: 10, t: 8) == 6)", "language": "swift"}, {"task_id": "mbpp_639_sample_nam", "prompt": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)", "language": "swift"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "\n/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items: [String]) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_parenthesis(items: [\"python (chrome)\"]) == \"python\")\nassert(remove_parenthesis(items: [\"string(.abc)\"]) == \"string\")\nassert(remove_parenthesis(items: [\"alpha(num)\"]) == \"alpha\")", "language": "swift"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "\n/// Write a function to find the nth nonagonal number.\nfunc is_nonagonal(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_nonagonal(n: 10) == 325)\nassert(is_nonagonal(n: 15) == 750)\nassert(is_nonagonal(n: 18) == 1089)", "language": "swift"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)", "language": "swift"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])", "language": "swift"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "\n/// Write a function to add a dictionary to the tuple. The output should be a tuple.\nfunc add_dict_to_tuple(test_tup: (Int, Int, Int), test_dict: [String : Int]) -> (Int, Int, Int, [String : Int]) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_dict_to_tuple(test_tup: (4, 5, 6), test_dict: [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]) == (4, 5, 6, [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]))\nassert(add_dict_to_tuple(test_tup: (1, 2, 3), test_dict: [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]) == (1, 2, 3, [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]))\nassert(add_dict_to_tuple(test_tup: (8, 9, 10), test_dict: [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]) == (8, 9, 10, [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]))", "language": "swift"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "\n/// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunc maxAverageOfPath(cost: [[Int]]) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(maxAverageOfPath(cost: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\nassert(maxAverageOfPath(cost: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\nassert(maxAverageOfPath(cost: [[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\nassert(maxAverageOfPath(cost: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)", "language": "swift"}, {"task_id": "mbpp_722_filter_data", "prompt": "\n/// The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunc filter_data(students: [String : (Double, Int)], h: Double, w: Int) -> [String : (Double, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_data(students: [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)], h: 6.0, w: 70) == [\"Cierra Vega\" : (6.2, 70)])\nassert(filter_data(students: [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)], h: 5.9, w: 67) == [\"Cierra Vega\" : (6.2, 70), \"Kierra Gentry\" : (6.0, 68)])\nassert(filter_data(students: [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)], h: 5.7, w: 64) == [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)])", "language": "swift"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)", "language": "swift"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "\n/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base: Int, power: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(power_base_sum(base: 2, power: 100) == 115)\nassert(power_base_sum(base: 8, power: 10) == 37)\nassert(power_base_sum(base: 8, power: 15) == 62)\nassert(power_base_sum(base: 3, power: 3) == 9)", "language": "swift"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "\n/// Write a function to extract values between quotation marks \" \" of the given string.\nfunc extract_quotation(text1: String) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_quotation(text1: \"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") == [\"A53\", \"multi\", \"Processor\"])\nassert(extract_quotation(text1: \"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") == [\"favorite\", \"apps\"])\nassert(extract_quotation(text1: \"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\") == [\"4k Ultra HD\", \"HDR 10\"])\nassert(extract_quotation(text1: \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == [] as [AnyHashable])", "language": "swift"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "\n/// Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunc multiply_elements(test_tup: [Int]) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(multiply_elements(test_tup: [1, 5, 7, 8, 10]) == [5, 35, 56, 80])\nassert(multiply_elements(test_tup: [2, 4, 5, 6, 7]) == [8, 20, 30, 42])\nassert(multiply_elements(test_tup: [12, 13, 14, 9, 15]) == [156, 182, 126, 135])\nassert(multiply_elements(test_tup: [12]) == [] as [AnyHashable])", "language": "swift"}, {"task_id": "mbpp_728_sum_list", "prompt": "\n/// Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])", "language": "swift"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "\n/// Write a function to remove consecutive duplicates of a given array.\nfunc consecutive_duplicates(nums: [AnyHashable]) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(consecutive_duplicates(nums: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])\nassert(consecutive_duplicates(nums: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])\nassert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])\nassert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])", "language": "swift"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "\n/// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfunc lateralsurface_cone(r: Int, h: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lateralsurface_cone(r: 5, h: 12) == 204.20352248333654)\nassert(lateralsurface_cone(r: 10, h: 15) == 566.3586699569488)\nassert(lateralsurface_cone(r: 19, h: 17) == 1521.8090132193388)", "language": "swift"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "\n/// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_specialchar(text: \"Python language, Programming language.\") == \"Python:language::Programming:language:\")\nassert(replace_specialchar(text: \"a b c,d e f\") == \"a:b:c:d:e:f\")\nassert(replace_specialchar(text: \"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\")", "language": "swift"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)", "language": "swift"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "\n/// Write a swiftthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)", "language": "swift"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "\n/// Write a swiftthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunc toggle_middle_bits(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_middle_bits(n: 9) == 15)\nassert(toggle_middle_bits(n: 10) == 12)\nassert(toggle_middle_bits(n: 11) == 13)\nassert(toggle_middle_bits(n: 65) == 127)\nassert(toggle_middle_bits(n: 77) == 115)", "language": "swift"}, {"task_id": "mbpp_736_left_insertion", "prompt": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)", "language": "swift"}, {"task_id": "mbpp_737_check_str", "prompt": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)", "language": "swift"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "\n/// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-recursion-exercise-9.php\nfunc geometric_sum(n: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(geometric_sum(n: 7) == 1.9921875)\nassert(geometric_sum(n: 4) == 1.9375)\nassert(geometric_sum(n: 8) == 1.99609375)", "language": "swift"}, {"task_id": "mbpp_739_find_Index", "prompt": "\n/// Write a swiftthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Index(n: 2) == 4)\nassert(find_Index(n: 3) == 14)\nassert(find_Index(n: 4) == 45)", "language": "swift"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "\n/// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/swiftthon-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup: (Int, Int, Int, Int, Int, Int)) -> [Int : Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tuple_to_dict(test_tup: (1, 5, 7, 10, 13, 5)) == [1 : 5, 7 : 10, 13 : 5])\nassert(tuple_to_dict(test_tup: (1, 2, 3, 4, 5, 6)) == [1 : 2, 3 : 4, 5 : 6])\nassert(tuple_to_dict(test_tup: (7, 8, 9, 10, 11, 12)) == [7 : 8, 9 : 10, 11 : 12])", "language": "swift"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "\n/// Write a swiftthon function to check whether all the characters are same or not.\nfunc all_Characters_Same(s: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_Characters_Same(s: \"python\") == false)\nassert(all_Characters_Same(s: \"aaa\") == true)\nassert(all_Characters_Same(s: \"data\") == false)", "language": "swift"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "\n/// Write a function to caluclate the area of a tetrahedron.\nfunc area_tetrahedron(side: Int) -> Double {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(area_tetrahedron(side: 3) == 15.588457268119894)\nassert(area_tetrahedron(side: 20) == 692.8203230275509)\nassert(area_tetrahedron(side: 10) == 173.20508075688772)", "language": "swift"}, {"task_id": "mbpp_743_rotate_right", "prompt": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])", "language": "swift"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])", "language": "swift"}, {"task_id": "mbpp_746_sector_area", "prompt": "\n/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.\nfunc sector_area(r: Int, a: Int) -> Double? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sector_area(r: 4, a: 45) == 6.283185307179586)\nassert(sector_area(r: 9, a: 45) == 31.808625617596654)\nassert(sector_area(r: 9, a: 361) == nil)", "language": "swift"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)", "language": "swift"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")", "language": "swift"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "\n/// Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/swiftthon-sort-numeric-strings-in-a-array/\nfunc sort_numeric_strings(nums_str: [String]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numeric_strings(nums_str: [\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500, -12, 0, 4, 7, 12, 45, 100, 200])\nassert(sort_numeric_strings(nums_str: [\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9])\nassert(sort_numeric_strings(nums_str: [\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17])", "language": "swift"}, {"task_id": "mbpp_750_add_tuple", "prompt": "\n/// Write a function to add the given tuple to the given array.\nfunc add_tuple(test_list: [Int], test_tup: (Int, Int)) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_tuple(test_list: [5, 6, 7], test_tup: (9, 10)) == [5, 6, 7, 9, 10])\nassert(add_tuple(test_list: [6, 7, 8], test_tup: (10, 11)) == [6, 7, 8, 10, 11])\nassert(add_tuple(test_list: [7, 8, 9], test_tup: (11, 12)) == [7, 8, 9, 11, 12])", "language": "swift"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)", "language": "swift"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)", "language": "swift"}, {"task_id": "mbpp_753_min_k", "prompt": "\n/// Write a function to find minimum k records from tuple array. https://www.geeksforgeeks.org/swiftthon-find-minimum-k-records-from-tuple-array/ - in this case a verbatim coswift of test cases\nfunc min_k(test_list: [(String, Int)], K: Int) -> [(String, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_k(test_list: [(\"Manjeet\", 10), (\"Akshat\", 4), (\"Akash\", 2), (\"Nikhil\", 8)], K: 2) == [(\"Akash\", 2), (\"Akshat\", 4)])\nassert(min_k(test_list: [(\"Sanjeev\", 11), (\"Angat\", 5), (\"Akash\", 3), (\"Nepin\", 9)], K: 3) == [(\"Akash\", 3), (\"Angat\", 5), (\"Nepin\", 9)])\nassert(min_k(test_list: [(\"tanmay\", 14), (\"Amer\", 11), (\"Ayesha\", 9), (\"SKD\", 16)], K: 1) == [(\"Ayesha\", 9)])", "language": "swift"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> [AnyHashable] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])", "language": "swift"}, {"task_id": "mbpp_755_second_smallest", "prompt": "\nextension Double: Error {}\n        \n/// Write a function to find the second smallest number in an array.\nfunc second_smallest(numbers: [Result<Int, Double>]) -> Double? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [.success(1), .success(2), .success(-8), .success(-2), .success(0), .success(-2)]) == -2)\nassert(second_smallest(numbers: [.success(1), .success(1), .failure(-0.5), .success(0), .success(2), .success(-2), .success(-2)]) == -0.5)\nassert(second_smallest(numbers: [.success(2), .success(2)]) == nil)\nassert(second_smallest(numbers: [.success(2), .success(2), .success(2)]) == nil)", "language": "swift"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "\n/// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/swiftthon-exercises/re/swiftthon-re-exercise-3.php\nfunc text_match_zero_one(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_zero_one(text: \"ac\") == false)\nassert(text_match_zero_one(text: \"dc\") == false)\nassert(text_match_zero_one(text: \"abbbba\") == true)\nassert(text_match_zero_one(text: \"dsabbbba\") == true)\nassert(text_match_zero_one(text: \"asbbbba\") == false)\nassert(text_match_zero_one(text: \"abaaa\") == true)", "language": "swift"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "\n/// Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/swiftthon-program-to-count-the-pairs-of-reverse-strings/\nfunc count_reverse_pairs(test_list: [String]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_reverse_pairs(test_list: [\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2)\nassert(count_reverse_pairs(test_list: [\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1)\nassert(count_reverse_pairs(test_list: [\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2)", "language": "swift"}, {"task_id": "mbpp_759_is_decimal", "prompt": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)", "language": "swift"}, {"task_id": "mbpp_760_unique_Element", "prompt": "\n/// Write a swiftthon function to check whether an array of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)", "language": "swift"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "\n/// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfunc check_monthnumber_number(monthnum3: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_monthnumber_number(monthnum3: 6) == true)\nassert(check_monthnumber_number(monthnum3: 2) == false)\nassert(check_monthnumber_number(monthnum3: 12) == false)", "language": "swift"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "\n/// Write a swiftthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr: [Int], n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_min_diff(arr: [1, 5, 3, 19, 18, 25], n: 6) == 1)\nassert(find_min_diff(arr: [4, 3, 2, 6], n: 4) == 1)\nassert(find_min_diff(arr: [30, 5, 20, 9], n: 4) == 4)", "language": "swift"}, {"task_id": "mbpp_764_number_ctr", "prompt": "\n/// Write a swiftthon function to count number of digits in a given string.\nfunc number_ctr(str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(number_ctr(str: \"program2bedone\") == 1)\nassert(number_ctr(str: \"3wonders\") == 1)\nassert(number_ctr(str: \"123\") == 3)\nassert(number_ctr(str: \"3wond-1ers2\") == 3)", "language": "swift"}, {"task_id": "mbpp_765_is_polite", "prompt": "\n/// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_polite(n: 7) == 11)\nassert(is_polite(n: 4) == 7)\nassert(is_polite(n: 9) == 13)", "language": "swift"}, {"task_id": "mbpp_766_pair_wise", "prompt": "\n/// Write a function to return an array of all pairs of consecutive items in a given array.\nfunc pair_wise(l1: [Int]) -> [(Int, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pair_wise(l1: [1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)])\nassert(pair_wise(l1: [1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)])\nassert(pair_wise(l1: [5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)])\nassert(pair_wise(l1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)])", "language": "swift"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "\n/// Write a swiftthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\nfunc get_pairs_count(arr: [Int], sum: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_pairs_count(arr: [1, 1, 1, 1], sum: 2) == 6)\nassert(get_pairs_count(arr: [1, 5, 7, -1, 5], sum: 6) == 3)\nassert(get_pairs_count(arr: [1, -2, 3], sum: 1) == 1)\nassert(get_pairs_count(arr: [-1, -2, 3], sum: -3) == 1)", "language": "swift"}, {"task_id": "mbpp_769_Diff", "prompt": "\n/// Write a swiftthon function to get the difference between two arrays.\nfunc Diff(li1: [Int], li2: [Int]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Diff(li1: [10, 15, 20, 25, 30, 35, 40], li2: [25, 40, 35]) == [10, 20, 30, 15])\nassert(Diff(li1: [1, 2, 3, 4, 5], li2: [6, 7, 1]) == [2, 3, 4, 5, 6, 7])\nassert(Diff(li1: [1, 2, 3], li2: [6, 7, 1]) == [2, 3, 6, 7])", "language": "swift"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "\n/// Write a swiftthon function to find the sum of fourth power of first n odd natural numbers.\nfunc odd_num_sum(n: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_num_sum(n: 2) == 82)\nassert(odd_num_sum(n: 3) == 707)\nassert(odd_num_sum(n: 4) == 3108)", "language": "swift"}, {"task_id": "mbpp_771_check_expression", "prompt": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)", "language": "swift"}, {"task_id": "mbpp_772_remove_length", "prompt": "\n/// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str: String, K: Int) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_length(test_str: \"The person is most value tet\", K: 3) == \"person is most value\")\nassert(remove_length(test_str: \"If you told me about this ok\", K: 4) == \"If you me about ok\")\nassert(remove_length(test_str: \"Forces of darkeness is come into the play\", K: 4) == \"Forces of darkeness is the\")", "language": "swift"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "\n/// Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\nfunc occurance_substring(text: String, pattern: String) -> (String, Int, Int)? {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(occurance_substring(text: \"python programming, python language\", pattern: \"python\") == (\"python\", 0, 6))\nassert(occurance_substring(text: \"python programming,programming language\", pattern: \"programming\") == (\"programming\", 7, 18))\nassert(occurance_substring(text: \"python programming,programming language\", pattern: \"language\") == (\"language\", 31, 39))\nassert(occurance_substring(text: \"c++ programming, c++ language\", pattern: \"python\") == nil)", "language": "swift"}, {"task_id": "mbpp_775_odd_position", "prompt": "\n/// Write a swiftthon function to check whether every odd index contains odd numbers of a given array.\nfunc odd_position(nums: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_position(nums: [2, 1, 4, 3, 6, 7, 6, 3]) == true)\nassert(odd_position(nums: [4, 1, 2]) == true)\nassert(odd_position(nums: [1, 2, 3]) == false)", "language": "swift"}, {"task_id": "mbpp_776_count_vowels", "prompt": "\n/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_vowels(test_str: \"bestinstareels\") == 7)\nassert(count_vowels(test_str: \"partofthejourneyistheend\") == 12)\nassert(count_vowels(test_str: \"amazonprime\") == 5)", "language": "swift"}, {"task_id": "mbpp_777_find_sum", "prompt": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)", "language": "swift"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "\n/// Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunc pack_consecutive_duplicates(list1: [AnyHashable]) -> [[AnyHashable]] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(pack_consecutive_duplicates(list1: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\nassert(pack_consecutive_duplicates(list1: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\nassert(pack_consecutive_duplicates(list1: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])", "language": "swift"}, {"task_id": "mbpp_780_find_combinations", "prompt": "\n/// Write a function to find the combinations of sums with tuples in the given tuple array. https://www.geeksforgeeks.org/swiftthon-combinations-of-sum-with-tuples-in-tuple-array/\nfunc find_combinations(test_list: [(Int, Int)]) -> [(Int, Int)] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_combinations(test_list: [(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)])\nassert(find_combinations(test_list: [(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)])\nassert(find_combinations(test_list: [(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)])", "language": "swift"}, {"task_id": "mbpp_781_count_divisors", "prompt": "\n/// Write a swiftthon function to check whether the count of divisors is even. https://www.w3resource.com/swiftthon-exercises/basic/swiftthon-basic-1-exercise-24.php\nfunc count_divisors(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_divisors(n: 10) == true)\nassert(count_divisors(n: 100) == false)\nassert(count_divisors(n: 125) == true)", "language": "swift"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "\n/// Write a swiftthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(odd_length_sum(arr: [1, 2, 4]) == 14)\nassert(odd_length_sum(arr: [1, 2, 1, 2]) == 15)\nassert(odd_length_sum(arr: [1, 7]) == 8)", "language": "swift"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> [Double] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == [0.0, 0.0, 100.0])\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == [120.0, 100.0, 84.31372549019608])\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == [149.26829268292684, 95.34883720930233, 84.31372549019608])", "language": "swift"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)", "language": "swift"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "\n/// Write a function to convert tuple string to integer tuple.\nfunc tuple_str_int(test_str: String) -> (Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tuple_str_int(test_str: \"(7, 8, 9)\") == (7, 8, 9))\nassert(tuple_str_int(test_str: \"(1, 2, 3)\") == (1, 2, 3))\nassert(tuple_str_int(test_str: \"(4, 5, 6)\") == (4, 5, 6))\nassert(tuple_str_int(test_str: \"(7, 81, 19)\") == (7, 81, 19))", "language": "swift"}, {"task_id": "mbpp_786_right_insertion", "prompt": "\n/// Write a function to locate the right insertion point for a specified value in sorted order.\nfunc right_insertion(a: [Int], x: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(right_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(right_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(right_insertion(a: [1, 2, 4, 5], x: 7) == 4)", "language": "swift"}, {"task_id": "mbpp_787_text_match_three", "prompt": "\n/// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_three(text: \"ac\") == false)\nassert(text_match_three(text: \"dc\") == false)\nassert(text_match_three(text: \"abbbba\") == true)\nassert(text_match_three(text: \"caacabbbba\") == true)", "language": "swift"}, {"task_id": "mbpp_788_new_tuple", "prompt": "\n/// Write a function to create a new tuple from the given string and array.\nfunc new_tuple(test_list: [String], test_str: String) -> (String, String, String) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(new_tuple(test_list: [\"WEB\", \"is\"], test_str: \"best\") == (\"WEB\", \"is\", \"best\"))\nassert(new_tuple(test_list: [\"We\", \"are\"], test_str: \"Developers\") == (\"We\", \"are\", \"Developers\"))\nassert(new_tuple(test_list: [\"Part\", \"is\"], test_str: \"Wrong\") == (\"Part\", \"is\", \"Wrong\"))", "language": "swift"}, {"task_id": "mbpp_790_even_position", "prompt": "\n/// Write a swiftthon function to check whether every even index contains even numbers of a given array.\nfunc even_position(nums: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(even_position(nums: [3, 2, 1]) == false)\nassert(even_position(nums: [1, 2, 3]) == false)\nassert(even_position(nums: [2, 1, 4]) == true)", "language": "swift"}, {"task_id": "mbpp_791_remove_nested", "prompt": "\n/// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup: AnyHashable) -> (Int, Int, Int, Int) {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_nested(test_tup: (1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10))\nassert(remove_nested(test_tup: (2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11))\nassert(remove_nested(test_tup: (3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12))\nassert(remove_nested(test_tup: (3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12))", "language": "swift"}, {"task_id": "mbpp_792_count_list", "prompt": "\n/// Write a swiftthon function to count the number of arrays in a given number of arrays.\nfunc count_list(input_list: [[Int]]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_list(input_list: [[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4)\nassert(count_list(input_list: [[1, 2], [2, 3], [4, 5]]) == 3)\nassert(count_list(input_list: [[1, 0], [2, 0]]) == 2)", "language": "swift"}, {"task_id": "mbpp_793_last", "prompt": "\n/// Write a swiftthon function to find the last position of an element in a sorted array.\nfunc last(arr: [Int], x: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(last(arr: [1, 2, 3], x: 1) == 0)\nassert(last(arr: [1, 1, 1, 2, 3, 4], x: 1) == 2)\nassert(last(arr: [2, 3, 2, 3, 6, 8, 9], x: 3) == 3)", "language": "swift"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "\n/// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text: String) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_starta_endb(text: \"aabbbb\") == true)\nassert(text_starta_endb(text: \"aabAbbbc\") == false)\nassert(text_starta_endb(text: \"accddbbjjj\") == false)", "language": "swift"}, {"task_id": "mbpp_796_return_sum", "prompt": "\n/// Write function to find the sum of all items in the given dictionary.\nfunc return_sum(dict: [String : Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(return_sum(dict: [\"a\" : 100, \"b\" : 200, \"c\" : 300]) == 600)\nassert(return_sum(dict: [\"a\" : 25, \"b\" : 18, \"c\" : 45]) == 88)\nassert(return_sum(dict: [\"a\" : 36, \"b\" : 39, \"c\" : 49]) == 124)", "language": "swift"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "\n/// Write a swiftthon function to find the sum of all odd natural numbers within the range l and r.\nfunc sum_in_range(l: Int, r: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_in_range(l: 2, r: 5) == 8)\nassert(sum_in_range(l: 5, r: 7) == 12)\nassert(sum_in_range(l: 7, r: 13) == 40)", "language": "swift"}, {"task_id": "mbpp_798__sum", "prompt": "\n/// Write a swiftthon function to find the sum of an array.\nfunc _sum(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(_sum(arr: [1, 2, 3]) == 6)\nassert(_sum(arr: [15, 12, 13, 10]) == 50)\nassert(_sum(arr: [0, 1, 2]) == 3)", "language": "swift"}, {"task_id": "mbpp_799_left_rotate", "prompt": "\n/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n: Int, d: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_rotate(n: 16, d: 2) == 64)\nassert(left_rotate(n: 10, d: 2) == 40)\nassert(left_rotate(n: 99, d: 3) == 792)\nassert(left_rotate(n: 99, d: 3) == 792)\nassert(left_rotate(n: 1, d: 3) == 8)\nassert(left_rotate(n: 5, d: 3) == 40)\nassert(left_rotate(n: 29, d: 3) == 232)", "language": "swift"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "\n/// Write a function to remove all whitespaces from a string.\nfunc remove_all_spaces(text: String) -> String {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_all_spaces(text: \"python  program\") == \"pythonprogram\")\nassert(remove_all_spaces(text: \"python   programming    language\") == \"pythonprogramminglanguage\")\nassert(remove_all_spaces(text: \"python                     program\") == \"pythonprogram\")\nassert(remove_all_spaces(text: \"   python                     program\") == \"pythonprogram\")", "language": "swift"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)", "language": "swift"}, {"task_id": "mbpp_802_count_rotation", "prompt": "\n/// Write a swiftthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_rotation(arr: [3, 2, 1]) == 1)\nassert(count_rotation(arr: [4, 5, 1, 2, 3]) == 2)\nassert(count_rotation(arr: [7, 8, 9, 1, 2, 3]) == 3)\nassert(count_rotation(arr: [1, 2, 3]) == 0)\nassert(count_rotation(arr: [1, 3, 2]) == 2)", "language": "swift"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)", "language": "swift"}, {"task_id": "mbpp_804_is_product_even", "prompt": "\n/// Write a function to check whether the product of numbers in an array is even or not.\nfunc is_product_even(arr: [Int]) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_product_even(arr: [1, 2, 3]) == true)\nassert(is_product_even(arr: [1, 2, 1, 4]) == true)\nassert(is_product_even(arr: [1, 1]) == false)", "language": "swift"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "\n/// Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])", "language": "swift"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)", "language": "swift"}, {"task_id": "mbpp_807_first_odd", "prompt": "\n/// Write a swiftthon function to find the first odd number in a given array of numbers.\nfunc first_odd(nums: [Int]) -> Int {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_odd(nums: [1, 3, 5]) == 1)\nassert(first_odd(nums: [2, 4, 1, 3]) == 1)\nassert(first_odd(nums: [8, 9, 1]) == 9)", "language": "swift"}, {"task_id": "mbpp_808_check_K", "prompt": "\n/// Write a function to check if the given tuples contain the k or not.\nfunc check_K(test_tup: [Int], K: Int) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_K(test_tup: [10, 4, 5, 6, 8], K: 6) == true)\nassert(check_K(test_tup: [1, 2, 3, 4, 5, 6], K: 7) == false)\nassert(check_K(test_tup: [7, 8, 9, 44, 11, 12], K: 11) == true)", "language": "swift"}, {"task_id": "mbpp_809_check_smaller", "prompt": "\n/// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunc check_smaller(test_tup1: (Int, Int, Int), test_tup2: (Int, Int, Int)) -> Bool {\n", "test": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_smaller(test_tup1: (1, 2, 3), test_tup2: (2, 3, 4)) == false)\nassert(check_smaller(test_tup1: (4, 5, 6), test_tup2: (3, 4, 5)) == true)\nassert(check_smaller(test_tup1: (11, 12, 13), test_tup2: (10, 11, 12)) == true)", "language": "swift"}]