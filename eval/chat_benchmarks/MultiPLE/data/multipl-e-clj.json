[{"task_id": "HumanEval_0_has_close_elements", "prompt": "(defn has_close_elements\n  \" Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> (has_close_elements [1.0 2.0 3.0] 0.5)\n  false\n  >>> (has_close_elements [1.0 2.8 3.0 4.0 5.0 2.0] 0.3)\n  true\"\n  [numbers threshold]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate has_close_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1.0 2.0 3.9 4.0 5.0 2.2] 0.3) true))\n  (is (= (candidate [1.0 2.0 3.9 4.0 5.0 2.2] 0.05) false))\n  (is (= (candidate [1.0 2.0 5.9 4.0 5.0] 0.95) true))\n  (is (= (candidate [1.0 2.0 5.9 4.0 5.0] 0.8) false))\n  (is (= (candidate [1.0 2.0 3.0 4.0 5.0 2.0] 0.1) true))\n  (is (= (candidate [1.1 2.2 3.1 4.1 5.1] 1.0) true))\n  (is (= (candidate [1.1 2.2 3.1 4.1 5.1] 0.5) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "(defn separate_paren_groups\n  \" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n  [\"()\" \"(())\" \"(()())\"]\"\n  [paren_string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate separate_paren_groups)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"(()()) ((())) () ((())()())\") [\"(()())\" \"((()))\" \"()\" \"((())()())\"]))\n  (is (= (candidate \"() (()) ((())) (((())))\") [\"()\" \"(())\" \"((()))\" \"(((())))\"]))\n  (is (= (candidate \"(()(())((())))\") [\"(()(())((())))\"]))\n  (is (= (candidate \"( ) (( )) (( )( ))\") [\"()\" \"(())\" \"(()())\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "(defn truncate_number\n  \" Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n  Return the decimal part of the number.\n  >>> (truncate_number 3.5)\n  0.5\"\n  [number]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate truncate_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3.5) 0.5))\n  (is (= (candidate 1.25) 0.25))\n  (is (= (candidate 123.0) 0.0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_3_below_zero", "prompt": "(defn below_zero\n  \" You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> (below_zero [1 2 3])\n  false\n  >>> (below_zero [1 2 -4 5])\n  true\"\n  [operations]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate below_zero)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) false))\n  (is (= (candidate [1 2 -3 1 2 -3]) false))\n  (is (= (candidate [1 2 -4 5 6]) true))\n  (is (= (candidate [1 -1 2 -2 5 -5 4 -4]) false))\n  (is (= (candidate [1 -1 2 -2 5 -5 4 -5]) true))\n  (is (= (candidate [1 -2 2 -2 5 -5 4 -4]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "(defn mean_absolute_deviation\n  \" For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> (mean_absolute_deviation [1.0 2.0 3.0 4.0])\n  1.0\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate mean_absolute_deviation)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1.0 2.0]) 0.5))\n  (is (= (candidate [1.0 2.0 3.0 4.0]) 1.0))\n  (is (= (candidate [1.0 2.0 3.0 4.0 5.0]) 1.2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_5_intersperse", "prompt": "(defn intersperse\n  \" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> (intersperse [] 4)\n  []\n  >>> (intersperse [1 2 3] 4)\n  [1 4 2 4 3]\"\n  [numbers delimeter]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate intersperse)\n\n(deftest test-humaneval\n\n  (is (= (candidate [] 7) []))\n  (is (= (candidate [5 6 3 2] 8) [5 8 6 8 3 8 2]))\n  (is (= (candidate [2 2 2] 2) [2 2 2 2 2]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "(defn parse_nested_parens\n  \" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n  >>> (parse_nested_parens \"(()()) ((())) () ((())()())\")\n  [2 3 1 3]\"\n  [paren_string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate parse_nested_parens)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"(()()) ((())) () ((())()())\") [2 3 1 3]))\n  (is (= (candidate \"() (()) ((())) (((())))\") [1 2 3 4]))\n  (is (= (candidate \"(()(())((())))\") [4]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "(defn filter_by_substring\n  \" Filter an input list of strings only for ones that contain given substring\n  >>> (filter_by_substring [] \"a\")\n  []\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_by_substring)\n\n(deftest test-humaneval\n\n  (is (= (candidate [] \"john\") []))\n  (is (= (candidate [\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xxx\") [\"xxx\" \"xxxAAA\" \"xxx\"]))\n  (is (= (candidate [\"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xx\") [\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"]))\n  (is (= (candidate [\"grunt\" \"trumpet\" \"prune\" \"gruesome\"] \"run\") [\"grunt\" \"prune\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_8_sum_product", "prompt": "(defn sum_product\n  \" For a given list of integers, return a vector consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> (sum_product [])\n  [0 1]\n  >>> (sum_product [1 2 3 4])\n  [10 24]\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) [0 1]))\n  (is (= (candidate [1 1 1]) [3 1]))\n  (is (= (candidate [100 0]) [100 0]))\n  (is (= (candidate [3 5 7]) [15 105]))\n  (is (= (candidate [10]) [10 10]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "(defn rolling_max\n  \" From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> (rolling_max [1 2 3 2 3 4 2])\n  [1 2 3 3 3 4 4]\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rolling_max)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) []))\n  (is (= (candidate [1 2 3 4]) [1 2 3 4]))\n  (is (= (candidate [4 3 2 1]) [4 4 4 4]))\n  (is (= (candidate [3 2 3 100 3]) [3 3 3 100 100]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "(defn make_palindrome\n  \" Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> (make_palindrome \"\")\n  \"\"\n  >>> (make_palindrome \"cat\")\n  \"catac\"\n  >>> (make_palindrome \"cata\")\n  \"catac\"\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate make_palindrome)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") \"\"))\n  (is (= (candidate \"x\") \"x\"))\n  (is (= (candidate \"xyz\") \"xyzyx\"))\n  (is (= (candidate \"xyx\") \"xyx\"))\n  (is (= (candidate \"jerry\") \"jerryrrej\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_11_string_xor", "prompt": "(defn string_xor\n  \" Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> (string_xor \"010\" \"110\")\n  \"100\"\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_xor)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"111000\" \"101010\") \"010010\"))\n  (is (= (candidate \"1\" \"1\") \"0\"))\n  (is (= (candidate \"0101\" \"0000\") \"0101\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_12_longest", "prompt": "(defn longest\n  \" Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return nil in case the input list is empty.\n  >>> (longest [])\n  nil\n  >>> (longest [\"a\" \"b\" \"c\"])\n  \"a\"\n  >>> (longest [\"a\" \"bb\" \"ccc\"])\n  \"ccc\"\"\n  [strings]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate longest)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) nil))\n  (is (= (candidate [\"x\" \"y\" \"z\"]) \"x\"))\n  (is (= (candidate [\"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\"]) \"zzzz\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "(defn greatest_common_divisor\n  \" Return a greatest common divisor of two integers a and b\n  >>> (greatest_common_divisor 3 5)\n  1\n  >>> (greatest_common_divisor 25 15)\n  5\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate greatest_common_divisor)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 7) 1))\n  (is (= (candidate 10 15) 5))\n  (is (= (candidate 49 14) 7))\n  (is (= (candidate 144 60) 12))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "(defn all_prefixes\n  \" Return list of all prefixes from shortest to longest of the input string\n  >>> (all_prefixes \"abc\")\n  [\"a\" \"ab\" \"abc\"]\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_prefixes)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") []))\n  (is (= (candidate \"asdfgh\") [\"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"]))\n  (is (= (candidate \"WWW\") [\"W\" \"WW\" \"WWW\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "(defn string_sequence\n  \" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> (string_sequence 0)\n  \"0\"\n  >>> (string_sequence 5)\n  \"0 1 2 3 4 5\"\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_sequence)\n\n(deftest test-humaneval\n\n  (is (= (candidate 0) \"0\"))\n  (is (= (candidate 3) \"0 1 2 3\"))\n  (is (= (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "(defn count_distinct_characters\n  \" Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> (count_distinct_characters \"xyzXYZ\")\n  3\n  >>> (count_distinct_characters \"Jerry\")\n  4\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_distinct_characters)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") 0))\n  (is (= (candidate \"abcde\") 5))\n  (is (= (candidate \"abcdecadeCADE\") 5))\n  (is (= (candidate \"aaaaAAAAaaaa\") 1))\n  (is (= (candidate \"Jerry jERRY JeRRRY\") 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_17_parse_music", "prompt": "(defn parse_music\n  \" Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate parse_music)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") []))\n  (is (= (candidate \"o o o o\") [4 4 4 4]))\n  (is (= (candidate \".| .| .| .|\") [1 1 1 1]))\n  (is (= (candidate \"o| o| .| .| o o o o\") [2 2 1 1 4 4 4 4]))\n  (is (= (candidate \"o| .| o| .| o o| o o|\") [2 1 2 1 4 2 4 2]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "(defn how_many_times\n  \" Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> (how_many_times \"\" \"a\")\n  0\n  >>> (how_many_times \"aaa\" \"a\")\n  3\n  >>> (how_many_times \"aaaa\" \"aa\")\n  3\"\n  [string substring]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate how_many_times)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\" \"x\") 0))\n  (is (= (candidate \"xyxyxyx\" \"x\") 4))\n  (is (= (candidate \"cacacacac\" \"cac\") 4))\n  (is (= (candidate \"john doe\" \"john\") 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "(defn sort_numbers\n  \" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> (sort_numbers \"three one five\")\n  \"one three five\"\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_numbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") \"\"))\n  (is (= (candidate \"three\") \"three\"))\n  (is (= (candidate \"three five nine\") \"three five nine\"))\n  (is (= (candidate \"five zero four seven nine eight\") \"zero four five seven eight nine\"))\n  (is (= (candidate \"six five four three two one zero\") \"zero one two three four five six\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "(defn find_closest_elements\n  \" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> (find_closest_elements [1.0 2.0 3.0 4.0 5.0 2.2])\n  [2.0 2.2]\n  >>> (find_closest_elements [1.0 2.0 3.0 4.0 5.0 2.0])\n  [2.0 2.0]\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_closest_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1.0 2.0 3.9 4.0 5.0 2.2]) [3.9 4.0]))\n  (is (= (candidate [1.0 2.0 5.9 4.0 5.0]) [5.0 5.9]))\n  (is (= (candidate [1.0 2.0 3.0 4.0 5.0 2.2]) [2.0 2.2]))\n  (is (= (candidate [1.0 2.0 3.0 4.0 5.0 2.0]) [2.0 2.0]))\n  (is (= (candidate [1.1 2.2 3.1 4.1 5.1]) [2.2 3.1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "(defn rescale_to_unit\n  \" Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> (rescale_to_unit [1.0 2.0 3.0 4.0 5.0])\n  [0.0 0.25 0.5 0.75 1.0]\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rescale_to_unit)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2.0 49.9]) [0.0 1.0]))\n  (is (= (candidate [100.0 49.9]) [1.0 0.0]))\n  (is (= (candidate [1.0 2.0 3.0 4.0 5.0]) [0.0 0.25 0.5 0.75 1.0]))\n  (is (= (candidate [2.0 1.0 5.0 3.0 4.0]) [0.25 0.0 1.0 0.5 0.75]))\n  (is (= (candidate [12.0 11.0 15.0 13.0 14.0]) [0.25 0.0 1.0 0.5 0.75]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "(defn filter_integers\n  \" Filter given list of any cljthon values only for integers\n  >>> (filter_integers [\"a\" 3.14 5])\n  [5]\n  >>> (filter_integers [1 2 3 \"abc\" {} []])\n  [1 2 3]\"\n  [values]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_integers)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) []))\n  (is (= (candidate [4 {} [] 23.2 9 \"adasd\"]) [4 9]))\n  (is (= (candidate [3 \"c\" 3 3 \"a\" \"b\"]) [3 3 3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_23_strlen", "prompt": "(defn strlen\n  \" Return length of given string\n  >>> (strlen \"\")\n  0\n  >>> (strlen \"abc\")\n  3\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate strlen)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") 0))\n  (is (= (candidate \"x\") 1))\n  (is (= (candidate \"asdasnakj\") 9))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "(defn largest_divisor\n  \" For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> (largest_divisor 15)\n  5\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate largest_divisor)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 1))\n  (is (= (candidate 7) 1))\n  (is (= (candidate 10) 5))\n  (is (= (candidate 100) 50))\n  (is (= (candidate 49) 7))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_25_factorize", "prompt": "(defn factorize\n  \" Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> (factorize 8)\n  [2 2 2]\n  >>> (factorize 25)\n  [5 5]\n  >>> (factorize 70)\n  [2 5 7]\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate factorize)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) [2]))\n  (is (= (candidate 4) [2 2]))\n  (is (= (candidate 8) [2 2 2]))\n  (is (= (candidate 57) [3 19]))\n  (is (= (candidate 3249) [3 3 19 19]))\n  (is (= (candidate 185193) [3 3 3 19 19 19]))\n  (is (= (candidate 20577) [3 19 19 19]))\n  (is (= (candidate 18) [2 3 3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "(defn remove_duplicates\n  \" From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> (remove_duplicates [1 2 3 2 4])\n  [1 3 4]\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_duplicates)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) []))\n  (is (= (candidate [1 2 3 4]) [1 2 3 4]))\n  (is (= (candidate [1 2 3 2 4 3 5]) [1 4 5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_27_flip_case", "prompt": "(defn flip_case\n  \" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> (flip_case \"Hello\")\n  \"hELLO\"\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate flip_case)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") \"\"))\n  (is (= (candidate \"Hello!\") \"hELLO!\"))\n  (is (= (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_28_concatenate", "prompt": "(defn concatenate\n  \" Concatenate list of strings into a single string\n  >>> (concatenate [])\n  \"\"\n  >>> (concatenate [\"a\" \"b\" \"c\"])\n  \"abc\"\"\n  [strings]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate concatenate)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) \"\"))\n  (is (= (candidate [\"x\" \"y\" \"z\"]) \"xyz\"))\n  (is (= (candidate [\"x\" \"y\" \"z\" \"w\" \"k\"]) \"xyzwk\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "(defn filter_by_prefix\n  \" Filter an input list of strings only for ones that start with a given prefix.\n  >>> (filter_by_prefix [] \"a\")\n  []\n  >>> (filter_by_prefix [\"abc\" \"bcd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"array\"]\"\n  [strings prefix]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_by_prefix)\n\n(deftest test-humaneval\n\n  (is (= (candidate [] \"john\") []))\n  (is (= (candidate [\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xxx\") [\"xxx\" \"xxxAAA\" \"xxx\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_30_get_positive", "prompt": "(defn get_positive\n  \"Return only positive numbers in the list.\n  >>> (get_positive [-1 2 -4 5 6])\n  [2 5 6]\n  >>> (get_positive [5 3 -5 2 -3 3 9 0 123 1 -10])\n  [5 3 2 3 9 123 1]\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_positive)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-1 -2 4 5 6]) [4 5 6]))\n  (is (= (candidate [5 3 -5 2 3 3 9 0 123 1 -10]) [5 3 2 3 3 9 123 1]))\n  (is (= (candidate [-1 -2]) []))\n  (is (= (candidate []) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_31_is_prime", "prompt": "(defn is_prime\n  \"Return true if a given number is prime, and false otherwise.\n  >>> (is_prime 6)\n  false\n  >>> (is_prime 101)\n  true\n  >>> (is_prime 11)\n  true\n  >>> (is_prime 13441)\n  true\n  >>> (is_prime 61)\n  true\n  >>> (is_prime 4)\n  false\n  >>> (is_prime 1)\n  false\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_prime)\n\n(deftest test-humaneval\n\n  (is (= (candidate 6) false))\n  (is (= (candidate 101) true))\n  (is (= (candidate 11) true))\n  (is (= (candidate 13441) true))\n  (is (= (candidate 61) true))\n  (is (= (candidate 4) false))\n  (is (= (candidate 1) false))\n  (is (= (candidate 5) true))\n  (is (= (candidate 11) true))\n  (is (= (candidate 17) true))\n  (is (= (candidate 85) false))\n  (is (= (candidate 77) false))\n  (is (= (candidate 255379) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_33_sort_third", "prompt": "(defn sort_third\n  \"This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> (sort_third [1 2 3])\n  [1 2 3]\n  >>> (sort_third [5 6 3 4 8 9 2])\n  [2 6 3 4 8 9 5]\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_third)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 3 4 8 9 2]) [2 6 3 4 8 9 5]))\n  (is (= (candidate [5 8 3 4 6 9 2]) [2 8 3 4 6 9 5]))\n  (is (= (candidate [5 6 9 4 8 3 2]) [2 6 9 4 8 3 5]))\n  (is (= (candidate [5 6 3 4 8 9 2 1]) [2 6 3 4 8 9 5 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_34_unique", "prompt": "(defn unique\n  \"Return sorted unique elements in a list\n  >>> (unique [5 3 5 2 3 3 9 0 123])\n  [0 2 3 5 9 123]\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate unique)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 3 5 2 3 3 9 0 123]) [0 2 3 5 9 123]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_35_max_element", "prompt": "(defn max_element\n  \"Return maximum element in the list.\n  >>> (max_element [1 2 3])\n  3\n  >>> (max_element [5 3 -5 2 -3 3 9 0 123 1 -10])\n  123\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 3))\n  (is (= (candidate [5 3 -5 2 -3 3 9 0 124 1 -10]) 124))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "(defn fizz_buzz\n  \"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> (fizz_buzz 50)\n  0\n  >>> (fizz_buzz 78)\n  2\n  >>> (fizz_buzz 79)\n  3\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate fizz_buzz)\n\n(deftest test-humaneval\n\n  (is (= (candidate 50) 0))\n  (is (= (candidate 78) 2))\n  (is (= (candidate 79) 3))\n  (is (= (candidate 100) 3))\n  (is (= (candidate 200) 6))\n  (is (= (candidate 4000) 192))\n  (is (= (candidate 10000) 639))\n  (is (= (candidate 100000) 8026))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_37_sort_even", "prompt": "(defn sort_even\n  \"This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> (sort_even [1 2 3])\n  [1 2 3]\n  >>> (sort_even [5 6 3 4])\n  [3 6 5 4]\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_even)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) [1 2 3]))\n  (is (= (candidate [5 3 -5 2 -3 3 9 0 123 1 -10]) [-10 3 -5 2 -3 3 5 0 9 1 123]))\n  (is (= (candidate [5 8 -12 4 23 2 3 11 12 -10]) [-12 8 3 4 5 2 12 11 23 -10]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "(defn prime_fib\n  \"prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> (prime_fib 1)\n  2\n  >>> (prime_fib 2)\n  3\n  >>> (prime_fib 3)\n  5\n  >>> (prime_fib 4)\n  13\n  >>> (prime_fib 5)\n  89\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate prime_fib)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) 2))\n  (is (= (candidate 2) 3))\n  (is (= (candidate 3) 5))\n  (is (= (candidate 4) 13))\n  (is (= (candidate 5) 89))\n  (is (= (candidate 6) 233))\n  (is (= (candidate 7) 1597))\n  (is (= (candidate 8) 28657))\n  (is (= (candidate 9) 514229))\n  (is (= (candidate 10) 433494437))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "(defn triples_sum_to_zero\n  \"triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> (triples_sum_to_zero [1 3 5 0])\n  false\n  >>> (triples_sum_to_zero [1 3 -2 1])\n  true\n  >>> (triples_sum_to_zero [1 2 3 7])\n  false\n  >>> (triples_sum_to_zero [2 4 -5 3 9 7])\n  true\n  >>> (triples_sum_to_zero [1])\n  false\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate triples_sum_to_zero)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 0]) false))\n  (is (= (candidate [1 3 5 -1]) false))\n  (is (= (candidate [1 3 -2 1]) true))\n  (is (= (candidate [1 2 3 7]) false))\n  (is (= (candidate [1 2 5 7]) false))\n  (is (= (candidate [2 4 -5 3 9 7]) true))\n  (is (= (candidate [1]) false))\n  (is (= (candidate [1 3 5 -100]) false))\n  (is (= (candidate [100 3 5 -100]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "(defn car_race_collision\n  \"Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n  This function outputs the number of such collisions.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate car_race_collision)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 4))\n  (is (= (candidate 3) 9))\n  (is (= (candidate 4) 16))\n  (is (= (candidate 8) 64))\n  (is (= (candidate 10) 100))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_42_incr_list", "prompt": "(defn incr_list\n  \"Return list with elements incremented by 1.\n  >>> (incr_list [1 2 3])\n  [2 3 4]\n  >>> (incr_list [5 3 5 2 3 3 9 0 123])\n  [6 4 6 3 4 4 10 1 124]\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate incr_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) []))\n  (is (= (candidate [3 2 1]) [4 3 2]))\n  (is (= (candidate [5 2 5 2 3 3 9 0 123]) [6 3 6 3 4 4 10 1 124]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "(defn pairs_sum_to_zero\n  \"pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> (pairs_sum_to_zero [1 3 5 0])\n  false\n  >>> (pairs_sum_to_zero [1 3 -2 1])\n  false\n  >>> (pairs_sum_to_zero [1 2 3 7])\n  false\n  >>> (pairs_sum_to_zero [2 4 -5 3 5 7])\n  true\n  >>> (pairs_sum_to_zero [1])\n  false\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pairs_sum_to_zero)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 0]) false))\n  (is (= (candidate [1 3 -2 1]) false))\n  (is (= (candidate [1 2 3 7]) false))\n  (is (= (candidate [2 4 -5 3 5 7]) true))\n  (is (= (candidate [1]) false))\n  (is (= (candidate [-3 9 -1 3 2 30]) true))\n  (is (= (candidate [-3 9 -1 3 2 31]) true))\n  (is (= (candidate [-3 9 -1 4 2 30]) false))\n  (is (= (candidate [-3 9 -1 4 2 31]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_44_change_base", "prompt": "(defn change_base\n  \"Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> (change_base 8 3)\n  \"22\"\n  >>> (change_base 8 2)\n  \"1000\"\n  >>> (change_base 7 2)\n  \"111\"\"\n  [x base]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate change_base)\n\n(deftest test-humaneval\n\n  (is (= (candidate 8 3) \"22\"))\n  (is (= (candidate 9 3) \"100\"))\n  (is (= (candidate 234 2) \"11101010\"))\n  (is (= (candidate 16 2) \"10000\"))\n  (is (= (candidate 8 2) \"1000\"))\n  (is (= (candidate 7 2) \"111\"))\n  (is (= (candidate 2 3) \"2\"))\n  (is (= (candidate 3 4) \"3\"))\n  (is (= (candidate 4 5) \"4\"))\n  (is (= (candidate 5 6) \"5\"))\n  (is (= (candidate 6 7) \"6\"))\n  (is (= (candidate 7 8) \"7\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "(defn triangle_area\n  \"Given length of a side and high return area for a triangle.\n  >>> (triangle_area 5 3)\n  7.5\"\n  [a h]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate triangle_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 3) 7.5))\n  (is (= (candidate 2 2) 2.0))\n  (is (= (candidate 10 8) 40.0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_46_fib4", "prompt": "(defn fib4\n  \"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> (fib4 5)\n  4\n  >>> (fib4 6)\n  8\n  >>> (fib4 7)\n  14\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate fib4)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 4))\n  (is (= (candidate 8) 28))\n  (is (= (candidate 10) 104))\n  (is (= (candidate 12) 386))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_47_median", "prompt": "(defn median\n  \"Return median of elements in the list l.\n  >>> (median [3 1 2 4 5])\n  3\n  >>> (median [-10 4 6 1000 10 20])\n  15.0\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate median)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 1 2 4 5]) 3))\n  (is (= (candidate [-10 4 6 1000 10 20]) 8.0))\n  (is (= (candidate [5]) 5))\n  (is (= (candidate [6 5]) 5.5))\n  (is (= (candidate [8 1 3 9 9 2 7]) 7))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "(defn is_palindrome\n  \"Checks if given string is a palindrome\n  >>> (is_palindrome \"\")\n  true\n  >>> (is_palindrome \"aba\")\n  true\n  >>> (is_palindrome \"aaaaa\")\n  true\n  >>> (is_palindrome \"zbcd\")\n  false\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_palindrome)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") true))\n  (is (= (candidate \"aba\") true))\n  (is (= (candidate \"aaaaa\") true))\n  (is (= (candidate \"zbcd\") false))\n  (is (= (candidate \"xywyx\") true))\n  (is (= (candidate \"xywyz\") false))\n  (is (= (candidate \"xywzx\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_49_modp", "prompt": "(defn modp\n  \"Return 2^n modulo p (be aware of numerics).\n  >>> (modp 3 5)\n  3\n  >>> (modp 1101 101)\n  2\n  >>> (modp 0 101)\n  1\n  >>> (modp 3 11)\n  8\n  >>> (modp 100 101)\n  1\"\n  [n p]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate modp)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 5) 3))\n  (is (= (candidate 1101 101) 2))\n  (is (= (candidate 0 101) 1))\n  (is (= (candidate 3 11) 8))\n  (is (= (candidate 100 101) 1))\n  (is (= (candidate 30 5) 4))\n  (is (= (candidate 31 5) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "(defn remove_vowels\n  \"remove_vowels is a function that takes string and returns string without vowels.\n  >>> (remove_vowels \"\")\n  \"\"\n  >>> (remove_vowels \"abcdef\")\n  \"bcdf\"\n  >>> (remove_vowels \"aaaaa\")\n  \"\"\n  >>> (remove_vowels \"aaBAA\")\n  \"B\"\n  >>> (remove_vowels \"zbcd\")\n  \"zbcd\"\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_vowels)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") \"\"))\n  (is (= (candidate \"abcdef\nghijklm\") \"bcdf\nghjklm\"))\n  (is (= (candidate \"fedcba\") \"fdcb\"))\n  (is (= (candidate \"eeeee\") \"\"))\n  (is (= (candidate \"acBAA\") \"cB\"))\n  (is (= (candidate \"EcBOO\") \"cB\"))\n  (is (= (candidate \"ybcd\") \"ybcd\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "(defn below_threshold\n  \"Return true if all numbers in the list l are below threshold t.\n  >>> (below_threshold [1 2 4 10] 100)\n  true\n  >>> (below_threshold [1 20 4 10] 5)\n  false\"\n  [l t]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate below_threshold)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 10] 100) true))\n  (is (= (candidate [1 20 4 10] 5) false))\n  (is (= (candidate [1 20 4 10] 21) true))\n  (is (= (candidate [1 20 4 10] 22) true))\n  (is (= (candidate [1 8 4 10] 11) true))\n  (is (= (candidate [1 8 4 10] 10) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_53_add", "prompt": "(defn add\n  \"Add two numbers x and y\n  >>> (add 2 3)\n  5\n  >>> (add 5 7)\n  12\"\n  [x y]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add)\n\n(deftest test-humaneval\n\n  (is (= (candidate 0 1) 1))\n  (is (= (candidate 1 0) 1))\n  (is (= (candidate 2 3) 5))\n  (is (= (candidate 5 7) 12))\n  (is (= (candidate 7 5) 12))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_54_same_chars", "prompt": "(defn same_chars\n  \"Check if two words have the same characters.\n  >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n  true\n  >>> (same_chars \"abcd\" \"dddddddabc\")\n  true\n  >>> (same_chars \"dddddddabc\" \"abcd\")\n  true\n  >>> (same_chars \"eabcd\" \"dddddddabc\")\n  false\n  >>> (same_chars \"abcd\" \"dddddddabce\")\n  false\n  >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n  false\"\n  [s0 s1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate same_chars)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") true))\n  (is (= (candidate \"abcd\" \"dddddddabc\") true))\n  (is (= (candidate \"dddddddabc\" \"abcd\") true))\n  (is (= (candidate \"eabcd\" \"dddddddabc\") false))\n  (is (= (candidate \"abcd\" \"dddddddabcf\") false))\n  (is (= (candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") false))\n  (is (= (candidate \"aabb\" \"aaccc\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_55_fib", "prompt": "(defn fib\n  \"Return n-th Fibonacci number.\n  >>> (fib 10)\n  55\n  >>> (fib 1)\n  1\n  >>> (fib 8)\n  21\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate fib)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 55))\n  (is (= (candidate 1) 1))\n  (is (= (candidate 8) 21))\n  (is (= (candidate 11) 89))\n  (is (= (candidate 12) 144))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "(defn correct_bracketing\n  \" brackets is a string of \"<\" and \">\".\n  return true if every opening bracket has a corresponding closing bracket.\n  >>> (correct_bracketing \"<\")\n  false\n  >>> (correct_bracketing \"<>\")\n  true\n  >>> (correct_bracketing \"<<><>>\")\n  true\n  >>> (correct_bracketing \"><<>\")\n  false\"\n  [brackets]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate correct_bracketing)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"<>\") true))\n  (is (= (candidate \"<<><>>\") true))\n  (is (= (candidate \"<><><<><>><>\") true))\n  (is (= (candidate \"<><><<<><><>><>><<><><<>>>\") true))\n  (is (= (candidate \"<<<><>>>>\") false))\n  (is (= (candidate \"><<>\") false))\n  (is (= (candidate \"<\") false))\n  (is (= (candidate \"<<<<\") false))\n  (is (= (candidate \">\") false))\n  (is (= (candidate \"<<>\") false))\n  (is (= (candidate \"<><><<><>><>><<>\") false))\n  (is (= (candidate \"<><><<><>><>>><>\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_57_monotonic", "prompt": "(defn monotonic\n  \"Return true is list elements are monotonically increasing or decreasing.\n  >>> (monotonic [1 2 4 20])\n  true\n  >>> (monotonic [1 20 4 10])\n  false\n  >>> (monotonic [4 1 0 -10])\n  true\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate monotonic)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 10]) true))\n  (is (= (candidate [1 2 4 20]) true))\n  (is (= (candidate [1 20 4 10]) false))\n  (is (= (candidate [4 1 0 -10]) true))\n  (is (= (candidate [4 1 1 0]) true))\n  (is (= (candidate [1 2 3 2 5 60]) false))\n  (is (= (candidate [1 2 3 4 5 60]) true))\n  (is (= (candidate [9 9 9 9]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_58_common", "prompt": "(defn common\n  \"Return sorted unique common elements for two lists.\n  >>> (common [1 4 3 34 653 2 5] [5 7 1 5 9 653 121])\n  [1 5 653]\n  >>> (common [5 3 2 8] [3 2])\n  [2 3]\"\n  [l1 l2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate common)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 4 3 34 653 2 5] [5 7 1 5 9 653 121]) [1 5 653]))\n  (is (= (candidate [5 3 2 8] [3 2]) [2 3]))\n  (is (= (candidate [4 3 2 8] [3 2 4]) [2 3 4]))\n  (is (= (candidate [4 3 2 8] []) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "(defn largest_prime_factor\n  \"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> (largest_prime_factor 13195)\n  29\n  >>> (largest_prime_factor 2048)\n  2\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate largest_prime_factor)\n\n(deftest test-humaneval\n\n  (is (= (candidate 15) 5))\n  (is (= (candidate 27) 3))\n  (is (= (candidate 63) 7))\n  (is (= (candidate 330) 11))\n  (is (= (candidate 13195) 29))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "(defn sum_to_n\n  \"sum_to_n is a function that sums numbers from 1 to n.\n  >>> (sum_to_n 30)\n  465\n  >>> (sum_to_n 100)\n  5050\n  >>> (sum_to_n 5)\n  15\n  >>> (sum_to_n 10)\n  55\n  >>> (sum_to_n 1)\n  1\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_to_n)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) 1))\n  (is (= (candidate 6) 21))\n  (is (= (candidate 11) 66))\n  (is (= (candidate 30) 465))\n  (is (= (candidate 100) 5050))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "(defn correct_bracketing\n  \" brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n  >>> (correct_bracketing \"(\")\n  false\n  >>> (correct_bracketing \"()\")\n  true\n  >>> (correct_bracketing \"(()())\")\n  true\n  >>> (correct_bracketing \")(()\")\n  false\"\n  [brackets]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate correct_bracketing)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"()\") true))\n  (is (= (candidate \"(()())\") true))\n  (is (= (candidate \"()()(()())()\") true))\n  (is (= (candidate \"()()((()()())())(()()(()))\") true))\n  (is (= (candidate \"((()())))\") false))\n  (is (= (candidate \")(()\") false))\n  (is (= (candidate \"(\") false))\n  (is (= (candidate \"((((\") false))\n  (is (= (candidate \")\") false))\n  (is (= (candidate \"(()\") false))\n  (is (= (candidate \"()()(()())())(()\") false))\n  (is (= (candidate \"()()(()())()))()\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_62_derivative", "prompt": "(defn derivative\n  \" xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> (derivative [3 1 2 4 5])\n  [1 4 12 20]\n  >>> (derivative [1 2 3])\n  [2 6]\"\n  [xs]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate derivative)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 1 2 4 5]) [1 4 12 20]))\n  (is (= (candidate [1 2 3]) [2 6]))\n  (is (= (candidate [3 2 1]) [2 2]))\n  (is (= (candidate [3 2 1 0 4]) [2 2 0 16]))\n  (is (= (candidate [1]) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_63_fibfib", "prompt": "(defn fibfib\n  \"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> (fibfib 1)\n  0\n  >>> (fibfib 5)\n  4\n  >>> (fibfib 8)\n  24\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate fibfib)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 1))\n  (is (= (candidate 1) 0))\n  (is (= (candidate 5) 4))\n  (is (= (candidate 8) 24))\n  (is (= (candidate 10) 81))\n  (is (= (candidate 12) 274))\n  (is (= (candidate 14) 927))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "(defn vowels_count\n  \"Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n  Example:\n  >>> (vowels_count \"abcde\")\n  2\n  >>> (vowels_count \"ACEDY\")\n  3\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate vowels_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcde\") 2))\n  (is (= (candidate \"Alone\") 3))\n  (is (= (candidate \"key\") 2))\n  (is (= (candidate \"bye\") 1))\n  (is (= (candidate \"keY\") 2))\n  (is (= (candidate \"bYe\") 1))\n  (is (= (candidate \"ACEDY\") 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "(defn circular_shift\n  \"Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> (circular_shift 12 1)\n  \"21\"\n  >>> (circular_shift 12 2)\n  \"12\"\"\n  [x shift]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate circular_shift)\n\n(deftest test-humaneval\n\n  (is (= (candidate 100 2) \"001\"))\n  (is (= (candidate 12 2) \"12\"))\n  (is (= (candidate 97 8) \"79\"))\n  (is (= (candidate 12 1) \"21\"))\n  (is (= (candidate 11 101) \"11\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_66_digitSum", "prompt": "(defn digitSum\n  \"Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n  Examples:\n  >>> (digitSum \"\")\n  0\n  >>> (digitSum \"abAB\")\n  131\n  >>> (digitSum \"abcCd\")\n  67\n  >>> (digitSum \"helloE\")\n  69\n  >>> (digitSum \"woArBld\")\n  131\n  >>> (digitSum \"aAaaaXa\")\n  153\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate digitSum)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\") 0))\n  (is (= (candidate \"abAB\") 131))\n  (is (= (candidate \"abcCd\") 67))\n  (is (= (candidate \"helloE\") 69))\n  (is (= (candidate \"woArBld\") 131))\n  (is (= (candidate \"aAaaaXa\") 153))\n  (is (= (candidate \" How are yOu?\") 151))\n  (is (= (candidate \"You arE Very Smart\") 327))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "(defn fruit_distribution\n  \"In this task, you will be given a string that represents a number of apples and oranges \n  that are distributed in a basket of fruit this basket contains \n  apples, oranges, and mango fruits. Given the string that represents the total number of \n  the oranges and apples and an integer that represent the total number of the fruits \n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n  8\n  >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n  2\n  >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n  95\n  >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n  19\"\n  [s n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate fruit_distribution)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"5 apples and 6 oranges\" 19) 8))\n  (is (= (candidate \"5 apples and 6 oranges\" 21) 10))\n  (is (= (candidate \"0 apples and 1 oranges\" 3) 2))\n  (is (= (candidate \"1 apples and 0 oranges\" 3) 2))\n  (is (= (candidate \"2 apples and 3 oranges\" 100) 95))\n  (is (= (candidate \"2 apples and 3 oranges\" 5) 0))\n  (is (= (candidate \"1 apples and 100 oranges\" 120) 19))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_68_pluck", "prompt": "(defn pluck\n  \"\"Given a vector representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given vector is empty, return [].\n  Example 1:\n  >>> (pluck [4 2 3])\n  [2 1]\n  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n  Example 2:\n  >>> (pluck [1 2 3])\n  [2 1]\n  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n  Example 3:\n  >>> (pluck [])\n  []\n  Example 4:\n  >>> (pluck [5 0 3 0 4 2])\n  [0 1]\n  Explanation: 0 is the smallest value, but  there are two zeros,\n               so we will choose the first zero, which has the smallest index.\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pluck)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 2 3]) [2 1]))\n  (is (= (candidate [1 2 3]) [2 1]))\n  (is (= (candidate []) []))\n  (is (= (candidate [5 0 3 0 4 2]) [0 1]))\n  (is (= (candidate [1 2 3 0 5 3]) [0 3]))\n  (is (= (candidate [5 4 8 4 8]) [4 1]))\n  (is (= (candidate [7 6 7 1]) [6 1]))\n  (is (= (candidate [7 9 7 1]) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_69_search", "prompt": "(defn search\n  \"You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n  zero, and has a frequency greater than or equal to the value of the integer itself. \n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n  >>> (search [4 1 2 2 3 1])\n  2\n  >>> (search [1 2 2 3 3 3 4 4 4])\n  3\n  >>> (search [5 5 4 4 4])\n  -1\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate search)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 5 5 5 1]) 1))\n  (is (= (candidate [4 1 4 1 4 4]) 4))\n  (is (= (candidate [3 3]) -1))\n  (is (= (candidate [8 8 8 8 8 8 8 8]) 8))\n  (is (= (candidate [2 3 3 2 2]) 2))\n  (is (= (candidate [2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1]) 1))\n  (is (= (candidate [3 2 8 2]) 2))\n  (is (= (candidate [6 7 1 8 8 10 5 8 5 3 10]) 1))\n  (is (= (candidate [8 8 3 6 5 6 4]) -1))\n  (is (= (candidate [6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9]) 1))\n  (is (= (candidate [1 9 10 1 3]) 1))\n  (is (= (candidate [6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10]) 5))\n  (is (= (candidate [1]) 1))\n  (is (= (candidate [8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5]) 4))\n  (is (= (candidate [2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10]) 2))\n  (is (= (candidate [1 6 10 1 6 9 10 8 6 8 7 3]) 1))\n  (is (= (candidate [9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4]) 4))\n  (is (= (candidate [2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7]) 4))\n  (is (= (candidate [9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1]) 2))\n  (is (= (candidate [5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8]) -1))\n  (is (= (candidate [10]) -1))\n  (is (= (candidate [9 7 7 2 4 7 2 10 9 7 5 7 2]) 2))\n  (is (= (candidate [5 4 10 2 1 1 10 3 6 1 8]) 1))\n  (is (= (candidate [7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6]) 1))\n  (is (= (candidate [3 10 10 9 2]) -1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "(defn strange_sort_list\n  \"Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n  Examples:\n  >>> (strange_sort_list [1 2 3 4])\n  [1 4 2 3]\n  >>> (strange_sort_list [5 5 5 5])\n  [5 5 5 5]\n  >>> (strange_sort_list [])\n  []\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate strange_sort_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4]) [1 4 2 3]))\n  (is (= (candidate [5 6 7 8 9]) [5 9 6 8 7]))\n  (is (= (candidate [1 2 3 4 5]) [1 5 2 4 3]))\n  (is (= (candidate [5 6 7 8 9 1]) [1 9 5 8 6 7]))\n  (is (= (candidate [5 5 5 5]) [5 5 5 5]))\n  (is (= (candidate []) []))\n  (is (= (candidate [1 2 3 4 5 6 7 8]) [1 8 2 7 3 6 4 5]))\n  (is (= (candidate [0 2 2 2 5 5 -5 -5]) [-5 5 -5 5 0 2 2 2]))\n  (is (= (candidate [111111]) [111111]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "(defn triangle_area\n  \"Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater \n  than the third side.\n  Example:\n  >>> (triangle_area 3 4 5)\n  6.0\n  >>> (triangle_area 1 2 10)\n  -1\"\n  [a b c]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate triangle_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 4 5) 6.0))\n  (is (= (candidate 1 2 10) -1))\n  (is (= (candidate 4 8 5) 8.18))\n  (is (= (candidate 2 2 2) 1.73))\n  (is (= (candidate 1 2 3) -1))\n  (is (= (candidate 10 5 7) 16.25))\n  (is (= (candidate 2 6 3) -1))\n  (is (= (candidate 1 1 1) 0.43))\n  (is (= (candidate 2 2 10) -1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "(defn will_it_fly\n  \"Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n  Example:\n  >>> (will_it_fly [1 2] 5)\n  false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n  >>> (will_it_fly [3 2 3] 1)\n  false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n  >>> (will_it_fly [3 2 3] 9)\n  true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  >>> (will_it_fly [3] 5)\n  true\n  # 3 is less than the maximum possible weight, and it's balanced.\"\n  [q w]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate will_it_fly)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 2 3] 9) true))\n  (is (= (candidate [1 2] 5) false))\n  (is (= (candidate [3] 5) true))\n  (is (= (candidate [3 2 3] 1) false))\n  (is (= (candidate [1 2 3] 6) false))\n  (is (= (candidate [5] 5) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "(defn smallest_change\n  \"Given a vector arr of integers, find the minimum number of elements that\n  need to be changed to make the vector palindromic. A palindromic vector is a vector that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n  For example:\n  >>> (smallest_change [1 2 3 5 4 7 9 6])\n  4\n  >>> (smallest_change [1 2 3 4 3 2 2])\n  1\n  >>> (smallest_change [1 2 3 2 1])\n  0\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate smallest_change)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 5 4 7 9 6]) 4))\n  (is (= (candidate [1 2 3 4 3 2 2]) 1))\n  (is (= (candidate [1 4 2]) 1))\n  (is (= (candidate [1 4 4 2]) 1))\n  (is (= (candidate [1 2 3 2 1]) 0))\n  (is (= (candidate [3 1 1 3]) 0))\n  (is (= (candidate [1]) 0))\n  (is (= (candidate [0 1]) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_74_total_match", "prompt": "(defn total_match\n  \"Write a function that accepts two lists of strings and returns the list that has \n  total number of chars in the all strings of the list less than the other list.\n  if the two lists have the same number of chars, return the first list.\n  Examples\n  >>> (total_match [] [])\n  []\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"Hi\"])\n  [\"hI\" \"Hi\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n  [\"hi\" \"admin\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n  [\"hI\" \"hi\" \"hi\"]\n  >>> (total_match [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"])\n  [\"4\"]\"\n  [lst1 lst2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate total_match)\n\n(deftest test-humaneval\n\n  (is (= (candidate [] []) []))\n  (is (= (candidate [\"hi\" \"admin\"] [\"hi\" \"hi\"]) [\"hi\" \"hi\"]))\n  (is (= (candidate [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"]) [\"hi\" \"admin\"]))\n  (is (= (candidate [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"]) [\"4\"]))\n  (is (= (candidate [\"hi\" \"admin\"] [\"hI\" \"Hi\"]) [\"hI\" \"Hi\"]))\n  (is (= (candidate [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"]) [\"hI\" \"hi\" \"hi\"]))\n  (is (= (candidate [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hii\"]) [\"hi\" \"admin\"]))\n  (is (= (candidate [] [\"this\"]) []))\n  (is (= (candidate [\"this\"] []) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "(defn is_multiply_prime\n  \"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100. \n  Example:\n  >>> (is_multiply_prime 30)\n  true\n  30 = 2 * 3 * 5\"\n  [a]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_multiply_prime)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) false))\n  (is (= (candidate 30) true))\n  (is (= (candidate 8) true))\n  (is (= (candidate 10) false))\n  (is (= (candidate 125) true))\n  (is (= (candidate 105) true))\n  (is (= (candidate 126) false))\n  (is (= (candidate 729) false))\n  (is (= (candidate 891) false))\n  (is (= (candidate 1001) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "(defn is_simple_power\n  \"Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  >>> (is_simple_power 1 4)\n  true\n  >>> (is_simple_power 2 2)\n  true\n  >>> (is_simple_power 8 2)\n  true\n  >>> (is_simple_power 3 2)\n  false\n  >>> (is_simple_power 3 1)\n  false\n  >>> (is_simple_power 5 3)\n  false\"\n  [x n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_simple_power)\n\n(deftest test-humaneval\n\n  (is (= (candidate 16 2) true))\n  (is (= (candidate 143214 16) false))\n  (is (= (candidate 4 2) true))\n  (is (= (candidate 9 3) true))\n  (is (= (candidate 16 4) true))\n  (is (= (candidate 24 2) false))\n  (is (= (candidate 128 4) false))\n  (is (= (candidate 12 6) false))\n  (is (= (candidate 1 1) true))\n  (is (= (candidate 1 12) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_77_iscube", "prompt": "(defn iscube\n  \"Write a function that takes an integer a and returns true \n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  >>> (iscube 1)\n  true\n  >>> (iscube 2)\n  false\n  >>> (iscube -1)\n  true\n  >>> (iscube 64)\n  true\n  >>> (iscube 0)\n  true\n  >>> (iscube 180)\n  false\"\n  [a]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate iscube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) true))\n  (is (= (candidate 2) false))\n  (is (= (candidate -1) true))\n  (is (= (candidate 64) true))\n  (is (= (candidate 180) false))\n  (is (= (candidate 1000) true))\n  (is (= (candidate 0) true))\n  (is (= (candidate 1729) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_78_hex_key", "prompt": "(defn hex_key\n  \"You have been tasked to write a function that receives \n  a hexadecimal number as a string and counts the number of hexadecimal \n  digits that are primes (prime number, or a prime, is a natural number \n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n  So you have to determine a number of the following digits: 2, 3, 5, 7, \n  B (=decimal 11), D (=decimal 13).\n  Note: you may assume the input is always correct or empty string, \n  and symbols A,B,C,D,E,F are always uppercase.\n  Examples:\n  >>> (hex_key \"AB\")\n  1\n  >>> (hex_key \"1077E\")\n  2\n  >>> (hex_key \"ABED1A33\")\n  4\n  >>> (hex_key \"123456789ABCDEF0\")\n  6\n  >>> (hex_key \"2020\")\n  2\"\n  [num]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate hex_key)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"AB\") 1))\n  (is (= (candidate \"1077E\") 2))\n  (is (= (candidate \"ABED1A33\") 4))\n  (is (= (candidate \"2020\") 2))\n  (is (= (candidate \"123456789ABCDEF0\") 6))\n  (is (= (candidate \"112233445566778899AABBCCDDEEFF00\") 12))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "(defn decimal_to_binary\n  \"You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n  Examples:\n  >>> (decimal_to_binary 15)\n  \"db1111db\"\n  >>> (decimal_to_binary 32)\n  \"db100000db\"\"\n  [decimal]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate decimal_to_binary)\n\n(deftest test-humaneval\n\n  (is (= (candidate 0) \"db0db\"))\n  (is (= (candidate 32) \"db100000db\"))\n  (is (= (candidate 103) \"db1100111db\"))\n  (is (= (candidate 15) \"db1111db\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_80_is_happy", "prompt": "(defn is_happy\n  \"You are given a string s.\n  Your task is to check if the string is hapclj or not.\n  A string is hapclj if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  >>> (is_happy \"a\")\n  false\n  >>> (is_happy \"aa\")\n  false\n  >>> (is_happy \"abcd\")\n  true\n  >>> (is_happy \"aabb\")\n  false\n  >>> (is_happy \"adb\")\n  true\n  >>> (is_happy \"xyy\")\n  false\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_happy)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"a\") false))\n  (is (= (candidate \"aa\") false))\n  (is (= (candidate \"abcd\") true))\n  (is (= (candidate \"aabb\") false))\n  (is (= (candidate \"adb\") true))\n  (is (= (candidate \"xyy\") false))\n  (is (= (candidate \"iopaxpoi\") true))\n  (is (= (candidate \"iopaxioi\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "(defn numerical_letter_grade\n  \"It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write \n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A \n          > 3.3                A- \n          > 3.0                B+\n          > 2.7                B \n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+ \n          > 0.7                D \n          > 0.0                D-\n            0.0                E\n  Example:\n  >>> (grade_equation [4.0 3 1.7 2 3.5])\n  [\"A+\" \"B\" \"C-\" \"C\" \"A-\"]\"\n  [grades]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate numerical_letter_grade)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4.0 3 1.7 2 3.5]) [\"A+\" \"B\" \"C-\" \"C\" \"A-\"]))\n  (is (= (candidate [1.2]) [\"D+\"]))\n  (is (= (candidate [0.5]) [\"D-\"]))\n  (is (= (candidate [0.0]) [\"E\"]))\n  (is (= (candidate [1.0 0.3 1.5 2.8 3.3]) [\"D\" \"D-\" \"C-\" \"B\" \"B+\"]))\n  (is (= (candidate [0.0 0.7]) [\"E\" \"D-\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_82_prime_length", "prompt": "(defn prime_length\n  \"Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  >>> (prime_length \"Hello\")\n  true\n  >>> (prime_length \"abcdcba\")\n  true\n  >>> (prime_length \"kittens\")\n  true\n  >>> (prime_length \"orange\")\n  false\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate prime_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hello\") true))\n  (is (= (candidate \"abcdcba\") true))\n  (is (= (candidate \"kittens\") true))\n  (is (= (candidate \"orange\") false))\n  (is (= (candidate \"wow\") true))\n  (is (= (candidate \"world\") true))\n  (is (= (candidate \"MadaM\") true))\n  (is (= (candidate \"Wow\") true))\n  (is (= (candidate \"\") false))\n  (is (= (candidate \"HI\") true))\n  (is (= (candidate \"go\") true))\n  (is (= (candidate \"gogo\") false))\n  (is (= (candidate \"aaaaaaaaaaaaaaa\") false))\n  (is (= (candidate \"Madam\") true))\n  (is (= (candidate \"M\") false))\n  (is (= (candidate \"0\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "(defn starts_one_ends\n  \"Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate starts_one_ends)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) 1))\n  (is (= (candidate 2) 18))\n  (is (= (candidate 3) 180))\n  (is (= (candidate 4) 1800))\n  (is (= (candidate 5) 18000))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_84_solve", "prompt": "(defn solve\n  \"Given a positive integer N, return the total sum of its digits in binary.\n  Example\n  >>> (solve 1000)\n  \"1\"\n  >>> (solve 150)\n  \"110\"\n  >>> (solve 147)\n  \"1100\"\n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\"\n  [N]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate solve)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1000) \"1\"))\n  (is (= (candidate 150) \"110\"))\n  (is (= (candidate 147) \"1100\"))\n  (is (= (candidate 333) \"1001\"))\n  (is (= (candidate 963) \"10010\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_85_add", "prompt": "(defn add\n  \"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n  Examples:\n  >>> (add [4 2 6 7])\n  2\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 88]) 88))\n  (is (= (candidate [4 5 6 7 2 122]) 122))\n  (is (= (candidate [4 0 6 7]) 0))\n  (is (= (candidate [4 4 6 8]) 12))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "(defn anti_shuffle\n  \"Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n  For example:\n  >>> (anti_shuffle \"Hi\")\n  \"Hi\"\n  >>> (anti_shuffle \"hello\")\n  \"ehllo\"\n  >>> (anti_shuffle \"Hello World!!!\")\n  \"Hello !!!Wdlor\"\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate anti_shuffle)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hi\") \"Hi\"))\n  (is (= (candidate \"hello\") \"ehllo\"))\n  (is (= (candidate \"number\") \"bemnru\"))\n  (is (= (candidate \"abcd\") \"abcd\"))\n  (is (= (candidate \"Hello World!!!\") \"Hello !!!Wdlor\"))\n  (is (= (candidate \"\") \"\"))\n  (is (= (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst .Rboot How aer ?ouy\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_87_get_row", "prompt": "(defn get_row\n  \"You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of vectors, [(x1, y1), (x2, y2) ...] such that\n  each vector is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  Examples:\n  >>> (get_row [[1 2 3 4 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)\n  [[0 0] [1 4] [1 0] [2 5] [2 0]]\n  >>> (get_row [] 1)\n  []\n  >>> (get_row [[] [1] [1 2 3]] 3)\n  [[2 2]]\"\n  [lst x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_row)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3 4 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1) [[0 0] [1 4] [1 0] [2 5] [2 0]]))\n  (is (= (candidate [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6]] 2) [[0 1] [1 1] [2 1] [3 1] [4 1] [5 1]]))\n  (is (= (candidate [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 1 3 4 5 6] [1 2 1 4 5 6] [1 2 3 1 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1) [[0 0] [1 0] [2 1] [2 0] [3 2] [3 0] [4 3] [4 0] [5 4] [5 0] [6 5] [6 0]]))\n  (is (= (candidate [] 1) []))\n  (is (= (candidate [[1]] 2) []))\n  (is (= (candidate [[] [1] [1 2 3]] 3) [[2 2]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_88_sort_array", "prompt": "(defn sort_array\n  \"Given a vector of non-negative integers, return a coclj of the given vector after sorting,\n  you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n  Note:\n  * don't change the given vector.\n  Examples:\n  >>> (sort_array [])\n  []\n  >>> (sort_array [5])\n  [5]\n  >>> (sort_array [2 4 3 0 1 5])\n  [0 1 2 3 4 5]\n  >>> (sort_array [2 4 3 0 1 5 6])\n  [6 5 4 3 2 1 0]\"\n  [array]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_array)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) []))\n  (is (= (candidate [5]) [5]))\n  (is (= (candidate [2 4 3 0 1 5]) [0 1 2 3 4 5]))\n  (is (= (candidate [2 4 3 0 1 5 6]) [6 5 4 3 2 1 0]))\n  (is (= (candidate [2 1]) [1 2]))\n  (is (= (candidate [15 42 87 32 11 0]) [0 11 15 32 42 87]))\n  (is (= (candidate [21 14 23 11]) [23 21 14 11]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_89_encrypt", "prompt": "(defn encrypt\n  \"Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  >>> (encrypt \"hi\")\n  \"lm\"\n  >>> (encrypt \"asdfghjkl\")\n  \"ewhjklnop\"\n  >>> (encrypt \"gf\")\n  \"kj\"\n  >>> (encrypt \"et\")\n  \"ix\"\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate encrypt)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"hi\") \"lm\"))\n  (is (= (candidate \"asdfghjkl\") \"ewhjklnop\"))\n  (is (= (candidate \"gf\") \"kj\"))\n  (is (= (candidate \"et\") \"ix\"))\n  (is (= (candidate \"faewfawefaewg\") \"jeiajeaijeiak\"))\n  (is (= (candidate \"hellomyfriend\") \"lippsqcjvmirh\"))\n  (is (= (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"))\n  (is (= (candidate \"a\") \"e\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "(defn next_smallest\n  \"You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return nil if there is no such element.\n  >>> (next_smallest [1 2 3 4 5])\n  2\n  >>> (next_smallest [5 1 4 3 2])\n  2\n  >>> (next_smallest [])\n  nil\n  >>> (next_smallest [1 1])\n  nil\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_smallest)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) 2))\n  (is (= (candidate [5 1 4 3 2]) 2))\n  (is (= (candidate []) nil))\n  (is (= (candidate [1 1]) nil))\n  (is (= (candidate [1 1 1 1 0]) 1))\n  (is (= (candidate [1 1]) nil))\n  (is (= (candidate [-35 34 12 -45]) -35))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_91_is_bored", "prompt": "(defn is_bored\n  \"You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n  For example:\n  >>> (is_bored \"Hello world\")\n  0\n  >>> (is_bored \"The sky is blue. The sun is shining. I love this weather\")\n  1\"\n  [S]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_bored)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hello world\") 0))\n  (is (= (candidate \"Is the sky blue?\") 0))\n  (is (= (candidate \"I love It !\") 1))\n  (is (= (candidate \"bIt\") 0))\n  (is (= (candidate \"I feel good today. I will be productive. will kill It\") 2))\n  (is (= (candidate \"You and I are going for a walk\") 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_92_any_int", "prompt": "(defn any_int\n  \"Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  >>> (any_int 5 2 7)\n  true\n  >>> (any_int 3 2 2)\n  false\n  >>> (any_int 3 -2 1)\n  true\n  >>> (any_int 3.6 -2.2 2)\n  false\"\n  [x y z]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate any_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 3 1) true))\n  (is (= (candidate 2.5 2 3) false))\n  (is (= (candidate 1.5 5 3.5) false))\n  (is (= (candidate 2 6 2) false))\n  (is (= (candidate 4 2 2) true))\n  (is (= (candidate 2.2 2.2 2.2) false))\n  (is (= (candidate -4 6 2) true))\n  (is (= (candidate 2 1 1) true))\n  (is (= (candidate 3 4 7) true))\n  (is (= (candidate 3.0 4 7) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_93_encode", "prompt": "(defn encode\n  \"Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  Examples:\n  >>> (encode \"test\")\n  \"TGST\"\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate encode)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"TEST\") \"tgst\"))\n  (is (= (candidate \"Mudasir\") \"mWDCSKR\"))\n  (is (= (candidate \"YES\") \"ygs\"))\n  (is (= (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"))\n  (is (= (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "(defn skjkasdkd\n  \"You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n  Examples:\n  >>> (skjkasdkd [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3])\n  10\n  >>> (skjkasdkd [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1])\n  25\n  >>> (skjkasdkd [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3])\n  13\n  >>> (skjkasdkd [0 724 32 71 99 32 6 0 5 91 83 0 5 6])\n  11\n  >>> (skjkasdkd [0 81 12 3 1 21])\n  3\n  >>> (skjkasdkd [0 8 1 2 1 7])\n  7\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate skjkasdkd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3]) 10))\n  (is (= (candidate [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1]) 25))\n  (is (= (candidate [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3]) 13))\n  (is (= (candidate [0 724 32 71 99 32 6 0 5 91 83 0 5 6]) 11))\n  (is (= (candidate [0 81 12 3 1 21]) 3))\n  (is (= (candidate [0 8 1 2 1 7]) 7))\n  (is (= (candidate [8191]) 19))\n  (is (= (candidate [8191 123456 127 7]) 19))\n  (is (= (candidate [127 97 8192]) 10))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "(defn check_dict_case\n  \"Given a map, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given map is empty.\n  Examples:\n  >>> (check_dict_case {\"a\" \"apple\" \"b\" \"banana\"})\n  true\n  >>> (check_dict_case {\"a\" \"apple\" \"A\" \"banana\" \"B\" \"banana\"})\n  false\n  >>> (check_dict_case {\"a\" \"apple\" 8 \"banana\" \"a\" \"apple\"})\n  false\n  >>> (check_dict_case {\"Name\" \"John\" \"Age\" \"36\" \"City\" \"Houston\"})\n  false\n  >>> (check_dict_case {\"STATE\" \"NC\" \"ZIP\" \"12345\"})\n  true\"\n  [dict]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_dict_case)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"p\" \"pineapple\" \"b\" \"banana\"}) true))\n  (is (= (candidate {\"p\" \"pineapple\" \"A\" \"banana\" \"B\" \"banana\"}) false))\n  (is (= (candidate {\"p\" \"pineapple\" \"5\" \"banana\" \"a\" \"apple\"}) false))\n  (is (= (candidate {\"Name\" \"John\" \"Age\" \"36\" \"City\" \"Houston\"}) false))\n  (is (= (candidate {\"STATE\" \"NC\" \"ZIP\" \"12345\"}) true))\n  (is (= (candidate {\"fruit\" \"Orange\" \"taste\" \"Sweet\"}) true))\n  (is (= (candidate {}) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "(defn count_up_to\n  \"Implement a function that takes an non-negative integer and returns a vector of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  >>> (count_up_to 5)\n  [2 3]\n  >>> (count_up_to 11)\n  [2 3 5 7]\n  >>> (count_up_to 0)\n  []\n  >>> (count_up_to 20)\n  [2 3 5 7 11 13 17 19]\n  >>> (count_up_to 1)\n  []\n  >>> (count_up_to 18)\n  [2 3 5 7 11 13 17]\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_up_to)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) [2 3]))\n  (is (= (candidate 6) [2 3 5]))\n  (is (= (candidate 7) [2 3 5]))\n  (is (= (candidate 10) [2 3 5 7]))\n  (is (= (candidate 0) []))\n  (is (= (candidate 22) [2 3 5 7 11 13 17 19]))\n  (is (= (candidate 1) []))\n  (is (= (candidate 18) [2 3 5 7 11 13 17]))\n  (is (= (candidate 47) [2 3 5 7 11 13 17 19 23 29 31 37 41 43]))\n  (is (= (candidate 101) [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_97_multiply", "prompt": "(defn multiply\n  \"Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  >>> (multiply 148 412)\n  16\n  >>> (multiply 19 28)\n  72\n  >>> (multiply 2020 1851)\n  0\n  >>> (multiply 14 -15)\n  20\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiply)\n\n(deftest test-humaneval\n\n  (is (= (candidate 148 412) 16))\n  (is (= (candidate 19 28) 72))\n  (is (= (candidate 2020 1851) 0))\n  (is (= (candidate 14 -15) 20))\n  (is (= (candidate 76 67) 42))\n  (is (= (candidate 17 27) 49))\n  (is (= (candidate 0 1) 0))\n  (is (= (candidate 0 0) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_98_count_upper", "prompt": "(defn count_upper\n  \"Given a string s, count the number of uppercase vowels in even indices.\n  For example:\n  >>> (count_upper \"aBCdEf\")\n  1\n  >>> (count_upper \"abcdefg\")\n  0\n  >>> (count_upper \"dBBE\")\n  0\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_upper)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aBCdEf\") 1))\n  (is (= (candidate \"abcdefg\") 0))\n  (is (= (candidate \"dBBE\") 0))\n  (is (= (candidate \"B\") 0))\n  (is (= (candidate \"U\") 1))\n  (is (= (candidate \"\") 0))\n  (is (= (candidate \"EEEE\") 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "(defn closest_integer\n  \"Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> (closest_integer \"10\")\n  10\n  >>> (closest_integer \"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\"\n  [value]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate closest_integer)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"10\") 10))\n  (is (= (candidate \"14.5\") 15))\n  (is (= (candidate \"-15.5\") -16))\n  (is (= (candidate \"15.3\") 15))\n  (is (= (candidate \"0\") 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "(defn make_a_pile\n  \"Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n  Examples:\n  >>> (make_a_pile 3)\n  [3 5 7]\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate make_a_pile)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) [3 5 7]))\n  (is (= (candidate 4) [4 6 8 10]))\n  (is (= (candidate 5) [5 7 9 11 13]))\n  (is (= (candidate 6) [6 8 10 12 14 16]))\n  (is (= (candidate 8) [8 10 12 14 16 18 20 22]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_101_words_string", "prompt": "(defn words_string\n  \"You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return a vector of the words.\n  For example:\n  >>> (words_string \"Hi, my name is John\")\n  [\"Hi\" \"my\" \"name\" \"is\" \"John\"]\n  >>> (words_string \"One, two, three, four, five, six\")\n  [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"]\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate words_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hi, my name is John\") [\"Hi\" \"my\" \"name\" \"is\" \"John\"]))\n  (is (= (candidate \"One, two, three, four, five, six\") [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"]))\n  (is (= (candidate \"Hi, my name\") [\"Hi\" \"my\" \"name\"]))\n  (is (= (candidate \"One,, two, three, four, five, six,\") [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"]))\n  (is (= (candidate \"\") []))\n  (is (= (candidate \"ahmed     , gamal\") [\"ahmed\" \"gamal\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_102_choose_num", "prompt": "(defn choose_num\n  \"This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n  For example:\n  >>> (choose_num 12 15)\n  14\n  >>> (choose_num 13 12)\n  -1\"\n  [x y]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate choose_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12 15) 14))\n  (is (= (candidate 13 12) -1))\n  (is (= (candidate 33 12354) 12354))\n  (is (= (candidate 5234 5233) -1))\n  (is (= (candidate 6 29) 28))\n  (is (= (candidate 27 10) -1))\n  (is (= (candidate 7 7) -1))\n  (is (= (candidate 546 546) 546))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "(defn rounded_avg\n  \"You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  >>> (rounded_avg 1 5)\n  \"0b11\"\n  >>> (rounded_avg 7 5)\n  -1\n  >>> (rounded_avg 10 20)\n  \"0b1111\"\n  >>> (rounded_avg 20 33)\n  \"0b11010\"\"\n  [n m]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rounded_avg)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 5) \"0b11\"))\n  (is (= (candidate 7 13) \"0b1010\"))\n  (is (= (candidate 964 977) \"0b1111001010\"))\n  (is (= (candidate 996 997) \"0b1111100100\"))\n  (is (= (candidate 560 851) \"0b1011000010\"))\n  (is (= (candidate 185 546) \"0b101101110\"))\n  (is (= (candidate 362 496) \"0b110101101\"))\n  (is (= (candidate 350 902) \"0b1001110010\"))\n  (is (= (candidate 197 233) \"0b11010111\"))\n  (is (= (candidate 7 5) -1))\n  (is (= (candidate 5 1) -1))\n  (is (= (candidate 5 5) \"0b101\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "(defn unique_digits\n  \"Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n  Note: Returned list should be sorted in increasing order.\n  For example:\n  >>> (unique_digits [15 33 1422 1])\n  [1 15 33]\n  >>> (unique_digits [152 323 1422 10])\n  []\"\n  [x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate unique_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate [15 33 1422 1]) [1 15 33]))\n  (is (= (candidate [152 323 1422 10]) []))\n  (is (= (candidate [12345 2033 111 151]) [111 151]))\n  (is (= (candidate [135 103 31]) [31 135]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_105_by_length", "prompt": "(defn by_length\n  \"Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting vector, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n  For example:\n  >>> (by_length [2 1 1 4 5 8 2 3])\n  [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"]\n    If the vector is empty, return an empty vector:\n  >>> (by_length [])\n  []\n    If the vector has any strange number ignore it:\n  >>> (by_length [1 -1 55])\n  [\"One\"]\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate by_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 1 4 5 8 2 3]) [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"]))\n  (is (= (candidate []) []))\n  (is (= (candidate [1 -1 55]) [\"One\"]))\n  (is (= (candidate [1 -1 3 2]) [\"Three\" \"Two\" \"One\"]))\n  (is (= (candidate [9 4 8]) [\"Nine\" \"Eight\" \"Four\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_106_f", "prompt": "(defn f\n  \" Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  >>> (f 5)\n  [1 2 6 24 15]\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate f)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) [1 2 6 24 15]))\n  (is (= (candidate 7) [1 2 6 24 15 720 28]))\n  (is (= (candidate 1) [1]))\n  (is (= (candidate 3) [1 2 6]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "(defn even_odd_palindrome\n  \"Given a positive integer n, return a vector that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n  Example 1:\n  >>> (even_odd_palindrome 3)\n  [1 2]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n  Example 2:\n  >>> (even_odd_palindrome 12)\n  [4 6]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned vector has the number of even and odd integer palindromes respectively.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_odd_palindrome)\n\n(deftest test-humaneval\n\n  (is (= (candidate 123) [8 13]))\n  (is (= (candidate 12) [4 6]))\n  (is (= (candidate 3) [1 2]))\n  (is (= (candidate 63) [6 8]))\n  (is (= (candidate 25) [5 6]))\n  (is (= (candidate 19) [4 6]))\n  (is (= (candidate 9) [4 5]))\n  (is (= (candidate 1) [0 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_108_count_nums", "prompt": "(defn count_nums\n  \"Write a function count_nums which takes a vector of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> (count_nums [])\n  0\n  >>> (count_nums [-1 11 -11])\n  1\n  >>> (count_nums [1 1 2])\n  3\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) 0))\n  (is (= (candidate [-1 -2 0]) 0))\n  (is (= (candidate [1 1 2 -2 3 4 5]) 6))\n  (is (= (candidate [1 6 9 -6 0 1 5]) 5))\n  (is (= (candidate [1 100 98 -7 1 -1]) 4))\n  (is (= (candidate [12 23 34 -45 -56 0]) 5))\n  (is (= (candidate [0 1]) 1))\n  (is (= (candidate [1]) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "(defn move_one_ball\n  \"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the vector will be randomly ordered. Your task is to determine if\n  it is possible to get a vector sorted in non-decreasing order by performing \n  the following operation on the given vector:\n      You are allowed to perform right shift operation any number of times.\n  One right shift operation means shifting all elements of the vector by one\n  position in the right direction. The last element of the vector will be moved to\n  the starting position in the vector i.e. 0th index. \n  If it is possible to obtain the sorted vector by performing the above operation\n  then return true else return false.\n  If the given vector is empty then return true.\n  Note: The given list is guaranteed to have unique elements.\n  For Example:\n  >>> (move_one_ball [3 4 5 1 2])\n  true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given vector.\n  >>> (move_one_ball [3 5 4 1 2])\n  false\n  Explanation:It is not possible to get non-decreasing order for the given\n              vector by performing any number of right shift operations.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate move_one_ball)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4 5 1 2]) true))\n  (is (= (candidate [3 5 10 1 2]) true))\n  (is (= (candidate [4 3 1 2]) false))\n  (is (= (candidate [3 5 4 1 2]) false))\n  (is (= (candidate []) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_110_exchange", "prompt": "(defn exchange\n  \"In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"YES\"\n  >>> (exchange [1 2 3 4] [1 5 3 4])\n  \"NO\"\n  It is assumed that the input lists will be non-empty.\"\n  [lst1 lst2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate exchange)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4] [1 2 3 4]) \"YES\"))\n  (is (= (candidate [1 2 3 4] [1 5 3 4]) \"NO\"))\n  (is (= (candidate [1 2 3 4] [2 1 4 3]) \"YES\"))\n  (is (= (candidate [5 7 3] [2 6 4]) \"YES\"))\n  (is (= (candidate [5 7 3] [2 6 3]) \"NO\"))\n  (is (= (candidate [3 2 6 1 8 9] [3 5 5 1 1 1]) \"NO\"))\n  (is (= (candidate [100 200] [200 200]) \"YES\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_111_histogram", "prompt": "(defn histogram\n  \"Given a string representing a space separated lowercase letters, return a map\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  Example:\n  >>> (histogram \"a b c\")\n  {\"a\" 1 \"b\" 1 \"c\" 1}\n  >>> (histogram \"a b b a\")\n  {\"a\" 2 \"b\" 2}\n  >>> (histogram \"a b c a b\")\n  {\"a\" 2 \"b\" 2}\n  >>> (histogram \"b b b b a\")\n  {\"b\" 4}\n  >>> (histogram \"\")\n  {}\"\n  [test]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate histogram)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"a b b a\") {\"a\" 2 \"b\" 2}))\n  (is (= (candidate \"a b c a b\") {\"a\" 2 \"b\" 2}))\n  (is (= (candidate \"a b c d g\") {\"a\" 1 \"b\" 1 \"c\" 1 \"d\" 1 \"g\" 1}))\n  (is (= (candidate \"r t g\") {\"r\" 1 \"t\" 1 \"g\" 1}))\n  (is (= (candidate \"b b b b a\") {\"b\" 4}))\n  (is (= (candidate \"r t g\") {\"r\" 1 \"t\" 1 \"g\" 1}))\n  (is (= (candidate \"\") {}))\n  (is (= (candidate \"a\") {\"a\" 1}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "(defn reverse_delete\n  \"Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a vector containing the result string and true/false for the check.\n  Example\n  >>> (reverse_delete \"abcde\" \"ae\")\n  [\"bcd\" false]\n  >>> (reverse_delete \"abcdef\" \"b\")\n  [\"acdef\" false]\n  >>> (reverse_delete \"abcdedcba\" \"ab\")\n  [\"cdedc\" true]\"\n  [s c]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_delete)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcde\" \"ae\") [\"bcd\" false]))\n  (is (= (candidate \"abcdef\" \"b\") [\"acdef\" false]))\n  (is (= (candidate \"abcdedcba\" \"ab\") [\"cdedc\" true]))\n  (is (= (candidate \"dwik\" \"w\") [\"dik\" false]))\n  (is (= (candidate \"a\" \"a\") [\"\" true]))\n  (is (= (candidate \"abcdedcba\" \"\") [\"abcdedcba\" true]))\n  (is (= (candidate \"abcdedcba\" \"v\") [\"abcdedcba\" true]))\n  (is (= (candidate \"vabba\" \"v\") [\"abba\" true]))\n  (is (= (candidate \"mamma\" \"mia\") [\"\" true]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_113_odd_count", "prompt": "(defn odd_count\n  \"Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n  >>> (odd_count [\"1234567\"])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> (odd_count [\"3\" \"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"1234567\"]) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]))\n  (is (= (candidate [\"3\" \"11111111\"]) [\"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]))\n  (is (= (candidate [\"271\" \"137\" \"314\"]) [\"the number of odd elements 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "(defn minSubArraySum\n  \"Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n  of nums.\n  Example\n  >>> (minSubArraySum [2 3 4 1 2 4])\n  1\n  >>> (minSubArraySum [-1 -2 -3])\n  -6\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate minSubArraySum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 3 4 1 2 4]) 1))\n  (is (= (candidate [-1 -2 -3]) -6))\n  (is (= (candidate [-1 -2 -3 2 -10]) -14))\n  (is (= (candidate [-9999999999999999]) -9999999999999999))\n  (is (= (candidate [0 10 20 1000000]) 0))\n  (is (= (candidate [-1 -2 -3 10 -5]) -6))\n  (is (= (candidate [100 -1 -2 -3 10 -5]) -6))\n  (is (= (candidate [10 11 13 8 3 4]) 3))\n  (is (= (candidate [100 -33 32 -1 0 -2]) -33))\n  (is (= (candidate [-10]) -10))\n  (is (= (candidate [7]) 7))\n  (is (= (candidate [1 -1]) -1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_115_max_fill", "prompt": "(defn max_fill\n  \"You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n  Example 1:\n  >>> (max_fill [[0 0 1 0] [0 1 0 0] [1 1 1 1]] 1)\n  6\n  Example 2:\n  >>> (max_fill [[0 0 1 1] [0 0 0 0] [1 1 1 1] [0 1 1 1]] 2)\n  5\n  Example 3:\n  >>> (max_fill [[0 0 0] [0 0 0]] 5)\n  0\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\"\n  [grid capacity]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_fill)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[0 0 1 0] [0 1 0 0] [1 1 1 1]] 1) 6))\n  (is (= (candidate [[0 0 1 1] [0 0 0 0] [1 1 1 1] [0 1 1 1]] 2) 5))\n  (is (= (candidate [[0 0 0] [0 0 0]] 5) 0))\n  (is (= (candidate [[1 1 1 1] [1 1 1 1]] 2) 4))\n  (is (= (candidate [[1 1 1 1] [1 1 1 1]] 9) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_116_sort_array", "prompt": "(defn sort_array\n  \"In this Kata, you have to sort a vector of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n  It must be implemented like this:\n  >>> (sort_array [1 5 2 3 4])\n  [1 2 3 4 5]\n  >>> (sort_array [-2 -3 -4 -5 -6])\n  [-6 -5 -4 -3 -2]\n  >>> (sort_array [1 0 2 3 4])\n  [0 1 2 3 4]\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 2 3 4]) [1 2 4 3 5]))\n  (is (= (candidate [-2 -3 -4 -5 -6]) [-4 -2 -6 -5 -3]))\n  (is (= (candidate [1 0 2 3 4]) [0 1 2 4 3]))\n  (is (= (candidate []) []))\n  (is (= (candidate [2 5 77 4 5 3 5 7 2 3 4]) [2 2 4 4 3 3 5 5 5 7 77]))\n  (is (= (candidate [3 6 44 12 32 5]) [32 3 5 6 12 44]))\n  (is (= (candidate [2 4 8 16 32]) [2 4 8 16 32]))\n  (is (= (candidate [2 4 8 16 32]) [2 4 8 16 32]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_117_select_words", "prompt": "(defn select_words\n  \"Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  >>> (select_words \"Mary had a little lamb\" 4)\n  [\"little\"]\n  >>> (select_words \"Mary had a little lamb\" 3)\n  [\"Mary\" \"lamb\"]\n  >>> (select_words \"simple white space\" 2)\n  []\n  >>> (select_words \"Hello world\" 4)\n  [\"world\"]\n  >>> (select_words \"Uncle sam\" 3)\n  [\"Uncle\"]\"\n  [s n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate select_words)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Mary had a little lamb\" 4) [\"little\"]))\n  (is (= (candidate \"Mary had a little lamb\" 3) [\"Mary\" \"lamb\"]))\n  (is (= (candidate \"simple white space\" 2) []))\n  (is (= (candidate \"Hello world\" 4) [\"world\"]))\n  (is (= (candidate \"Uncle sam\" 3) [\"Uncle\"]))\n  (is (= (candidate \"\" 4) []))\n  (is (= (candidate \"a b c d e f\" 1) [\"b\" \"c\" \"d\" \"f\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "(defn get_closest_vowel\n  \"You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n  You may assume that the given string contains English letter only.\n  Example:\n  >>> (get_closest_vowel \"yogurt\")\n  \"u\"\n  >>> (get_closest_vowel \"FULL\")\n  \"U\"\n  >>> (get_closest_vowel \"quick\")\n  \"\"\n  >>> (get_closest_vowel \"ab\")\n  \"\"\"\n  [word]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_closest_vowel)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"yogurt\") \"u\"))\n  (is (= (candidate \"full\") \"u\"))\n  (is (= (candidate \"easy\") \"\"))\n  (is (= (candidate \"eAsy\") \"\"))\n  (is (= (candidate \"ali\") \"\"))\n  (is (= (candidate \"bad\") \"a\"))\n  (is (= (candidate \"most\") \"o\"))\n  (is (= (candidate \"ab\") \"\"))\n  (is (= (candidate \"ba\") \"\"))\n  (is (= (candidate \"quick\") \"\"))\n  (is (= (candidate \"anime\") \"i\"))\n  (is (= (candidate \"Asia\") \"\"))\n  (is (= (candidate \"Above\") \"o\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_119_match_parens", "prompt": "(defn match_parens\n  \"You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  >>> (match_parens [\"()(\" \")\"])\n  \"Yes\"\n  >>> (match_parens [\")\" \")\"])\n  \"No\"\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate match_parens)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"()(\" \")\"]) \"Yes\"))\n  (is (= (candidate [\")\" \")\"]) \"No\"))\n  (is (= (candidate [\"(()(())\" \"())())\"]) \"No\"))\n  (is (= (candidate [\")())\" \"(()()(\"]) \"Yes\"))\n  (is (= (candidate [\"(())))\" \"(()())((\"]) \"Yes\"))\n  (is (= (candidate [\"()\" \"())\"]) \"No\"))\n  (is (= (candidate [\"(()(\" \"()))()\"]) \"Yes\"))\n  (is (= (candidate [\"((((\" \"((())\"]) \"No\"))\n  (is (= (candidate [\")(()\" \"(()(\"]) \"No\"))\n  (is (= (candidate [\")(\" \")(\"]) \"No\"))\n  (is (= (candidate [\"(\" \")\"]) \"Yes\"))\n  (is (= (candidate [\")\" \"(\"]) \"Yes\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_120_maximum", "prompt": "(defn maximum\n  \"Given a vector arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n  Example 1:\n  >>> (maximum [-3 -4 5] 3)\n  [-4 -3 5]\n  Example 2:\n  >>> (maximum [4 -4 4] 2)\n  [4 4]\n  Example 3:\n  >>> (maximum [-3 2 1 2 -1 -2 1] 1)\n  [2]\n  Note:\n      1. The length of the vector will be in the range of [1, 1000].\n      2. The elements in the vector will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\"\n  [arr k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maximum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-3 -4 5] 3) [-4 -3 5]))\n  (is (= (candidate [4 -4 4] 2) [4 4]))\n  (is (= (candidate [-3 2 1 2 -1 -2 1] 1) [2]))\n  (is (= (candidate [123 -123 20 0 1 2 -3] 3) [2 20 123]))\n  (is (= (candidate [-123 20 0 1 2 -3] 4) [0 1 2 20]))\n  (is (= (candidate [5 15 0 3 -13 -8 0] 7) [-13 -8 0 0 3 5 15]))\n  (is (= (candidate [-1 0 2 5 3 -10] 2) [3 5]))\n  (is (= (candidate [1 0 5 -7] 1) [5]))\n  (is (= (candidate [4 -4] 2) [-4 4]))\n  (is (= (candidate [-10 10] 2) [-10 10]))\n  (is (= (candidate [1 2 3 -23 243 -400 0] 0) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_121_solution", "prompt": "(defn solution\n  \"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  Examples\n  >>> (solution [5 8 7 1])\n  12\n  >>> (solution [3 3 3 3 3])\n  9\n  >>> (solution [30 13 24 321])\n  0\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate solution)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 8 7 1]) 12))\n  (is (= (candidate [3 3 3 3 3]) 9))\n  (is (= (candidate [30 13 24 321]) 0))\n  (is (= (candidate [5 9]) 5))\n  (is (= (candidate [2 4 8]) 0))\n  (is (= (candidate [30 13 23 32]) 23))\n  (is (= (candidate [3 13 2 9]) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_122_add_elements", "prompt": "(defn add_elements\n  \"Given a non-empty vector of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n  Example:\n  >>> (add_elements [111 21 3 4000 5 6 7 8 9] 4)\n  24\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\"\n  [arr k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 -2 -3 41 57 76 87 88 99] 3) -4))\n  (is (= (candidate [111 121 3 4000 5 6] 2) 0))\n  (is (= (candidate [11 21 3 90 5 6 7 8 9] 4) 125))\n  (is (= (candidate [111 21 3 4000 5 6 7 8 9] 4) 24))\n  (is (= (candidate [1] 1) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "(defn get_odd_collatz\n  \"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  >>> (get_odd_collatz 5)\n  [1 5]\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_odd_collatz)\n\n(deftest test-humaneval\n\n  (is (= (candidate 14) [1 5 7 11 13 17]))\n  (is (= (candidate 5) [1 5]))\n  (is (= (candidate 12) [1 3 5]))\n  (is (= (candidate 1) [1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_124_valid_date", "prompt": "(defn valid_date\n  \"You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n  >>> (valid_date \"03-11-2000\")\n  true\n  >>> (valid_date \"15-01-2012\")\n  false\n  >>> (valid_date \"04-0-2040\")\n  false\n  >>> (valid_date \"06-04-2020\")\n  true\n  >>> (valid_date \"06/04/2020\")\n  false\"\n  [date]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate valid_date)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"03-11-2000\") true))\n  (is (= (candidate \"15-01-2012\") false))\n  (is (= (candidate \"04-0-2040\") false))\n  (is (= (candidate \"06-04-2020\") true))\n  (is (= (candidate \"01-01-2007\") true))\n  (is (= (candidate \"03-32-2011\") false))\n  (is (= (candidate \"\") false))\n  (is (= (candidate \"04-31-3000\") false))\n  (is (= (candidate \"06-06-2005\") true))\n  (is (= (candidate \"21-31-2000\") false))\n  (is (= (candidate \"04-12-2003\") true))\n  (is (= (candidate \"04122003\") false))\n  (is (= (candidate \"20030412\") false))\n  (is (= (candidate \"2003-04\") false))\n  (is (= (candidate \"2003-04-12\") false))\n  (is (= (candidate \"04-2003\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_125_split_words", "prompt": "(defn split_words\n  \"Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  >>> (split_words \"Hello world!\")\n  [\"Hello\" \"world!\"]\n  >>> (split_words \"Hello,world!\")\n  [\"Hello\" \"world!\"]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split_words)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hello world!\") [\"Hello\" \"world!\"]))\n  (is (= (candidate \"Hello,world!\") [\"Hello\" \"world!\"]))\n  (is (= (candidate \"Hello world,!\") [\"Hello\" \"world,!\"]))\n  (is (= (candidate \"Hello,Hello,world !\") [\"Hello,Hello,world\" \"!\"]))\n  (is (= (candidate \"abcdef\") 3))\n  (is (= (candidate \"aaabb\") 2))\n  (is (= (candidate \"aaaBb\") 1))\n  (is (= (candidate \"\") 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "(defn is_sorted\n  \"Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  >>> (is_sorted [5])\n  true\n  >>> (is_sorted [1 2 3 4 5])\n  true\n  >>> (is_sorted [1 3 2 4 5])\n  false\n  >>> (is_sorted [1 2 3 4 5 6])\n  true\n  >>> (is_sorted [1 2 3 4 5 6 7])\n  true\n  >>> (is_sorted [1 3 2 4 5 6 7])\n  false\n  >>> (is_sorted [1 2 2 3 3 4])\n  true\n  >>> (is_sorted [1 2 2 2 3 4])\n  false\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_sorted)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5]) true))\n  (is (= (candidate [1 2 3 4 5]) true))\n  (is (= (candidate [1 3 2 4 5]) false))\n  (is (= (candidate [1 2 3 4 5 6]) true))\n  (is (= (candidate [1 2 3 4 5 6 7]) true))\n  (is (= (candidate [1 3 2 4 5 6 7]) false))\n  (is (= (candidate []) true))\n  (is (= (candidate [1]) true))\n  (is (= (candidate [3 2 1]) false))\n  (is (= (candidate [1 2 2 2 3 4]) false))\n  (is (= (candidate [1 2 3 3 3 4]) false))\n  (is (= (candidate [1 2 2 3 3 4]) true))\n  (is (= (candidate [1 2 3 4]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_127_intersection", "prompt": "(defn intersection\n  \"You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n  [input/output] samples:\n  >>> (intersection [1 2] [2 3])\n  \"NO\"\n  >>> (intersection [-1 1] [0 4])\n  \"NO\"\n  >>> (intersection [-3 -1] [-5 5])\n  \"YES\"\"\n  [interval1 interval2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate intersection)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2] [2 3]) \"NO\"))\n  (is (= (candidate [-1 1] [0 4]) \"NO\"))\n  (is (= (candidate [-3 -1] [-5 5]) \"YES\"))\n  (is (= (candidate [-2 2] [-4 0]) \"YES\"))\n  (is (= (candidate [-11 2] [-1 -1]) \"NO\"))\n  (is (= (candidate [1 2] [3 5]) \"NO\"))\n  (is (= (candidate [1 2] [1 2]) \"NO\"))\n  (is (= (candidate [-2 -2] [-3 -2]) \"NO\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "(defn prod_signs\n  \"You are given a vector arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the vector, represented by 1, -1 or 0.\n  Note: return nil for empty arr.\n  Example:\n  >>> (prod_signs [1 2 2 -4])\n  9\n  >>> (prod_signs [0 1])\n  0\n  >>> (prod_signs [])\n  nil\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate prod_signs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 2 -4]) -9))\n  (is (= (candidate [0 1]) 0))\n  (is (= (candidate [1 1 1 2 3 -1 1]) -10))\n  (is (= (candidate []) nil))\n  (is (= (candidate [2 4 1 2 -1 -1 9]) 20))\n  (is (= (candidate [-1 1 -1 1]) 4))\n  (is (= (candidate [-1 1 1 1]) -4))\n  (is (= (candidate [-1 1 1 0]) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_129_minPath", "prompt": "(defn minPath\n  \"Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n  Examples:    \n  >>> (minPath [[1 2 3] [4 5 6] [7 8 9]] 3)\n  [1 2 1]\n  >>> (minPath [[5 9 3] [4 1 6] [7 8 2]] 1)\n  [1]\"\n  [grid k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate minPath)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [4 5 6] [7 8 9]] 3) [1 2 1]))\n  (is (= (candidate [[5 9 3] [4 1 6] [7 8 2]] 1) [1]))\n  (is (= (candidate [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]] 4) [1 2 1 2]))\n  (is (= (candidate [[6 4 13 10] [5 7 12 1] [3 16 11 15] [8 14 9 2]] 7) [1 10 1 10 1 10 1]))\n  (is (= (candidate [[8 14 9 2] [6 4 13 15] [5 7 1 12] [3 10 11 16]] 5) [1 7 1 7 1]))\n  (is (= (candidate [[11 8 7 2] [5 16 14 4] [9 3 15 6] [12 13 10 1]] 9) [1 6 1 6 1 6 1 6 1]))\n  (is (= (candidate [[12 13 10 1] [9 3 15 6] [5 16 14 4] [11 8 7 2]] 12) [1 6 1 6 1 6 1 6 1 6 1 6]))\n  (is (= (candidate [[2 7 4] [3 1 5] [6 8 9]] 8) [1 3 1 3 1 3 1 3]))\n  (is (= (candidate [[6 1 5] [3 8 9] [2 7 4]] 8) [1 5 1 5 1 5 1 5]))\n  (is (= (candidate [[1 2] [3 4]] 10) [1 2 1 2 1 2 1 2 1 2]))\n  (is (= (candidate [[1 3] [3 2]] 10) [1 3 1 3 1 3 1 3 1 3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_130_tri", "prompt": "(defn tri\n  \"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  >>> (tri 3)\n  [1 3 2 8]\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tri)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) [1 3 2 8]))\n  (is (= (candidate 4) [1 3 2 8 3]))\n  (is (= (candidate 5) [1 3 2 8 3 15]))\n  (is (= (candidate 6) [1 3 2 8 3 15 4]))\n  (is (= (candidate 7) [1 3 2 8 3 15 4 24]))\n  (is (= (candidate 8) [1 3 2 8 3 15 4 24 5]))\n  (is (= (candidate 9) [1 3 2 8 3 15 4 24 5 35]))\n  (is (= (candidate 20) [1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11]))\n  (is (= (candidate 0) [1]))\n  (is (= (candidate 1) [1 3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_131_digits", "prompt": "(defn digits\n  \"Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  >>> (digits 1)\n  1\n  >>> (digits 4)\n  0\n  >>> (digits 235)\n  15\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 5))\n  (is (= (candidate 54) 5))\n  (is (= (candidate 120) 1))\n  (is (= (candidate 5014) 5))\n  (is (= (candidate 98765) 315))\n  (is (= (candidate 5576543) 2625))\n  (is (= (candidate 2468) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_132_is_nested", "prompt": "(defn is_nested\n  \"Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets \n  where at least one bracket in the subsequence is nested.\n  >>> (is_nested \"[[]]\")\n  true\n  >>> (is_nested \"[]]]]]]][[[[[]\")\n  false\n  >>> (is_nested \"[][]\")\n  false\n  >>> (is_nested \"[]\")\n  false\n  >>> (is_nested \"[[][]]\")\n  true\n  >>> (is_nested \"[[]][[\")\n  true\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_nested)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"[[]]\") true))\n  (is (= (candidate \"[]]]]]]][[[[[]\") false))\n  (is (= (candidate \"[][]\") false))\n  (is (= (candidate \"[]\") false))\n  (is (= (candidate \"[[[[]]]]\") true))\n  (is (= (candidate \"[]]]]]]]]]]\") false))\n  (is (= (candidate \"[][][[]]\") true))\n  (is (= (candidate \"[[]\") false))\n  (is (= (candidate \"[]]\") false))\n  (is (= (candidate \"[[]][[\") true))\n  (is (= (candidate \"[[][]]\") true))\n  (is (= (candidate \"\") false))\n  (is (= (candidate \"[[[[[[[[\") false))\n  (is (= (candidate \"]]]]]]]]\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "(defn sum_squares\n  \"You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  >>> (lst [1.0 2.0 3.0])\n  14\n  >>> (lst [1.0 4.0 9.0])\n  98\n  >>> (lst [1.0 3.0 5.0 7.0])\n  84\n  >>> (lst [1.4 4.2 0.0])\n  29\n  >>> (lst [-2.4 1.0 1.0])\n  6\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_squares)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1.0 2.0 3.0]) 14))\n  (is (= (candidate [1.0 2.0 3.0]) 14))\n  (is (= (candidate [1.0 3.0 5.0 7.0]) 84))\n  (is (= (candidate [1.4 4.2 0.0]) 29))\n  (is (= (candidate [-2.4 1.0 1.0]) 6))\n  (is (= (candidate [100.0 1.0 15.0 2.0]) 10230))\n  (is (= (candidate [10000.0 10000.0]) 200000000))\n  (is (= (candidate [-1.4 4.6 6.3]) 75))\n  (is (= (candidate [-1.4 17.9 18.9 19.9]) 1086))\n  (is (= (candidate [0.0]) 0))\n  (is (= (candidate [-1.0]) 1))\n  (is (= (candidate [-1.0 1.0 0.0]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "(defn check_if_last_char_is_a_letter\n  \"Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  >>> (check_if_last_char_is_a_letter \"apple pie\")\n  false\n  >>> (check_if_last_char_is_a_letter \"apple pi e\")\n  true\n  >>> (check_if_last_char_is_a_letter \"apple pi e \")\n  false\n  >>> (check_if_last_char_is_a_letter \"\")\n  false\"\n  [txt]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_if_last_char_is_a_letter)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"apple\") false))\n  (is (= (candidate \"apple pi e\") true))\n  (is (= (candidate \"eeeee\") false))\n  (is (= (candidate \"A\") true))\n  (is (= (candidate \"Pumpkin pie \") false))\n  (is (= (candidate \"Pumpkin pie 1\") false))\n  (is (= (candidate \"\") false))\n  (is (= (candidate \"eeeee e \") false))\n  (is (= (candidate \"apple pie\") false))\n  (is (= (candidate \"apple pi e \") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "(defn can_arrange\n  \"Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given vector will not contain\n  duplicate values.\n  Examples:\n  >>> (can_arrange [1 2 4 3 5])\n  3\n  >>> (can_arrange [1 2 3])\n  -1\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate can_arrange)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 3 5]) 3))\n  (is (= (candidate [1 2 4 5]) -1))\n  (is (= (candidate [1 4 2 5 6 7 8 9 10]) 2))\n  (is (= (candidate [4 8 5 7 3]) 4))\n  (is (= (candidate []) -1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "(defn largest_smallest_integers\n  \"Create a function that returns a vector (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as nil.\n  Examples:\n  >>> (largest_smallest_integers [2 4 1 3 5 7])\n  [nil 1]\n  >>> (largest_smallest_integers [])\n  [nil nil]\n  >>> (largest_smallest_integers [0])\n  [nil nil]\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate largest_smallest_integers)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 4 1 3 5 7]) [nil 1]))\n  (is (= (candidate [2 4 1 3 5 7 0]) [nil 1]))\n  (is (= (candidate [1 3 2 4 5 6 -2]) [-2 1]))\n  (is (= (candidate [4 5 3 6 2 7 -7]) [-7 2]))\n  (is (= (candidate [7 3 8 4 9 2 5 -9]) [-9 2]))\n  (is (= (candidate []) [nil nil]))\n  (is (= (candidate [0]) [nil nil]))\n  (is (= (candidate [-1 -3 -5 -6]) [-1 nil]))\n  (is (= (candidate [-1 -3 -5 -6 0]) [-1 nil]))\n  (is (= (candidate [-6 -4 -4 -3 1]) [-3 1]))\n  (is (= (candidate [-6 -4 -4 -3 -100 1]) [-3 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_137_compare_one", "prompt": "(defn compare_one\n  \"Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return nil if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n  >>> (compare_one 1 2.5)\n  2.5\n  >>> (compare_one 1 \"2,3\")\n  \"2,3\"\n  >>> (compare_one \"5,1\" \"6\")\n  \"6\"\n  >>> (compare_one \"1\" 1)\n  nil\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate compare_one)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 2) 2))\n  (is (= (candidate 1 2.5) 2.5))\n  (is (= (candidate 2 3) 3))\n  (is (= (candidate 5 6) 6))\n  (is (= (candidate 1 \"2,3\") \"2,3\"))\n  (is (= (candidate \"5,1\" \"6\") \"6\"))\n  (is (= (candidate \"1\" \"2\") \"2\"))\n  (is (= (candidate \"1\" 1) nil))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "(defn is_equal_to_sum_even\n  \"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  >>> (is_equal_to_sum_even 4)\n  false\n  >>> (is_equal_to_sum_even 6)\n  false\n  >>> (is_equal_to_sum_even 8)\n  true\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_equal_to_sum_even)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4) false))\n  (is (= (candidate 6) false))\n  (is (= (candidate 8) true))\n  (is (= (candidate 10) true))\n  (is (= (candidate 11) false))\n  (is (= (candidate 12) true))\n  (is (= (candidate 13) false))\n  (is (= (candidate 16) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "(defn special_factorial\n  \"The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n  For example:\n  >>> (special_factorial 4)\n  288\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate special_factorial)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4) 288))\n  (is (= (candidate 5) 34560))\n  (is (= (candidate 7) 125411328000))\n  (is (= (candidate 1) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "(defn fix_spaces\n  \"Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  >>> (fix_spaces \" Example\")\n  \"Example\"\n  >>> (fix_spaces \" Example 1\")\n  \"Example_1\"\n  >>> (fix_spaces \" Example 2\")\n  \"_Example_2\"\n  >>> (fix_spaces \" Example 3\")\n  \"_Example-3\"\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate fix_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Example\") \"Example\"))\n  (is (= (candidate \"Mudasir Hanif \") \"Mudasir_Hanif_\"))\n  (is (= (candidate \"Yellow Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\"))\n  (is (= (candidate \"Exa   mple\") \"Exa-mple\"))\n  (is (= (candidate \"   Exa 1 2 2 mple\") \"-Exa_1_2_2_mple\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "(defn file_name_check\n  \"Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  >>> (file_name_check \"example.txt\")\n  \"Yes\"\n  >>> (file_name_check \"1example.dll\")\n  \"No\"\"\n  [file_name]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate file_name_check)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"example.txt\") \"Yes\"))\n  (is (= (candidate \"1example.dll\") \"No\"))\n  (is (= (candidate \"s1sdf3.asd\") \"No\"))\n  (is (= (candidate \"K.dll\") \"Yes\"))\n  (is (= (candidate \"MY16FILE3.exe\") \"Yes\"))\n  (is (= (candidate \"His12FILE94.exe\") \"No\"))\n  (is (= (candidate \"_Y.txt\") \"No\"))\n  (is (= (candidate \"?aREYA.exe\") \"No\"))\n  (is (= (candidate \"/this_is_valid.dll\") \"No\"))\n  (is (= (candidate \"this_is_valid.wow\") \"No\"))\n  (is (= (candidate \"this_is_valid.txt\") \"Yes\"))\n  (is (= (candidate \"this_is_valid.txtexe\") \"No\"))\n  (is (= (candidate \"#this2_i4s_5valid.ten\") \"No\"))\n  (is (= (candidate \"@this1_is6_valid.exe\") \"No\"))\n  (is (= (candidate \"this_is_12valid.6exe4.txt\") \"No\"))\n  (is (= (candidate \"all.exe.txt\") \"No\"))\n  (is (= (candidate \"I563_No.exe\") \"Yes\"))\n  (is (= (candidate \"Is3youfault.txt\") \"Yes\"))\n  (is (= (candidate \"no_one#knows.dll\") \"Yes\"))\n  (is (= (candidate \"1I563_Yes3.exe\") \"No\"))\n  (is (= (candidate \"I563_Yes3.txtt\") \"No\"))\n  (is (= (candidate \"final..txt\") \"No\"))\n  (is (= (candidate \"final132\") \"No\"))\n  (is (= (candidate \"_f4indsartal132.\") \"No\"))\n  (is (= (candidate \".txt\") \"No\"))\n  (is (= (candidate \"s.\") \"No\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "(defn sum_squares\n  \"\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  Examples:\n  >>> lst\n  [1 2 3]\n  >>> lst\n  []\n  >>> lst\n  [-1 -5 2 -1 -5]\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_squares)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 6))\n  (is (= (candidate [1 4 9]) 14))\n  (is (= (candidate []) 0))\n  (is (= (candidate [1 1 1 1 1 1 1 1 1]) 9))\n  (is (= (candidate [-1 -1 -1 -1 -1 -1 -1 -1 -1]) -3))\n  (is (= (candidate [0]) 0))\n  (is (= (candidate [-1 -5 2 -1 -5]) -126))\n  (is (= (candidate [-56 -99 1 0 -2]) 3030))\n  (is (= (candidate [-1 0 0 0 0 0 0 0 -1]) 0))\n  (is (= (candidate [-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37]) -14196))\n  (is (= (candidate [-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10]) -1448))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "(defn words_in_sentence\n  \"You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n  Example 1:\n  >>> (words_in_sentence \"This is a test\")\n  \"is\"\n  Example 2:\n  >>> (words_in_sentence \"lets go for swimming\")\n  \"go for\"\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\"\n  [sentence]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate words_in_sentence)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"This is a test\") \"is\"))\n  (is (= (candidate \"lets go for swimming\") \"go for\"))\n  (is (= (candidate \"there is no place available here\") \"there is no place\"))\n  (is (= (candidate \"Hi I am Hussein\") \"Hi am Hussein\"))\n  (is (= (candidate \"go for it\") \"go for it\"))\n  (is (= (candidate \"here\") \"\"))\n  (is (= (candidate \"here is\") \"is\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_144_simplify", "prompt": "(defn simplify\n  \"Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n  >>> (simplify \"1/5\" \"5/1\")\n  true\n  >>> (simplify \"1/6\" \"2/1\")\n  false\n  >>> (simplify \"7/10\" \"10/2\")\n  false\"\n  [x n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate simplify)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"1/5\" \"5/1\") true))\n  (is (= (candidate \"1/6\" \"2/1\") false))\n  (is (= (candidate \"5/1\" \"3/1\") true))\n  (is (= (candidate \"7/10\" \"10/2\") false))\n  (is (= (candidate \"2/10\" \"50/10\") true))\n  (is (= (candidate \"7/2\" \"4/2\") true))\n  (is (= (candidate \"11/6\" \"6/1\") true))\n  (is (= (candidate \"2/3\" \"5/2\") false))\n  (is (= (candidate \"5/2\" \"3/5\") false))\n  (is (= (candidate \"2/4\" \"8/4\") true))\n  (is (= (candidate \"2/4\" \"4/2\") true))\n  (is (= (candidate \"1/5\" \"5/1\") true))\n  (is (= (candidate \"1/5\" \"1/5\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "(defn order_by_points\n  \"Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n  For example:\n  >>> (order_by_points [1 11 -1 -11 -12])\n  [-1 -11 1 -12 11]\n  >>> (order_by_points [])\n  []\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate order_by_points)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 11 -1 -11 -12]) [-1 -11 1 -12 11]))\n  (is (= (candidate [1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46]) [0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457]))\n  (is (= (candidate []) []))\n  (is (= (candidate [1 -11 -32 43 54 -98 2 -3]) [-3 -32 -98 -11 1 2 43 54]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10 11]) [1 10 2 11 3 4 5 6 7 8 9]))\n  (is (= (candidate [0 6 6 -76 -21 23 4]) [-76 -21 0 4 23 6 6]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "(defn specialFilter\n  \"Write a function that takes a vector of numbers as input and returns \n  the number of elements in the vector that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  >>> (specialFilter [15 -73 14 -15])\n  1\n  >>> (specialFilter [33 -2 -3 45 21 109])\n  2\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate specialFilter)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 -2 1 -5]) 0))\n  (is (= (candidate [15 -73 14 -15]) 1))\n  (is (= (candidate [33 -2 -3 45 21 109]) 2))\n  (is (= (candidate [43 -12 93 125 121 109]) 4))\n  (is (= (candidate [71 -2 -33 75 21 19]) 3))\n  (is (= (candidate [1]) 0))\n  (is (= (candidate []) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "(defn get_max_triples\n  \"    You are given a positive integer n. You have to create an integer vector a of length n.\n  For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n  Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n      and a[i] + a[j] + a[k] is a multiple of 3.\n      Example :\n      >>> (get_max_triples 5)\n      1\n  Explanation: \n  a = [1, 3, 7, 13, 21]\n  The only valid triple is (1, 7, 13).\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_max_triples)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 1))\n  (is (= (candidate 6) 4))\n  (is (= (candidate 10) 36))\n  (is (= (candidate 100) 53361))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_148_bf", "prompt": "(defn bf\n  \"There are eight planets in our solar system: the closerst to the Sun \n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2. \n  The function should return a vector containing all planets whose orbits are \n  located between the orbit of planet1 and the orbit of planet2, sorted by \n  the proximity to the sun. \n  The function should return an empty vector if planet1 or planet2\n  are not correct planet names. \n  Examples\n  >>> (bf \"Jupiter\" \"Neptune\")\n  [\"Saturn\" \"Uranus\"]\n  >>> (bf \"Earth\" \"Mercury\")\n  \"Venus\"\n  >>> (bf \"Mercury\" \"Uranus\")\n  [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"]\"\n  [planet1 planet2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bf)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Jupiter\" \"Neptune\") [\"Saturn\" \"Uranus\"]))\n  (is (= (candidate \"Earth\" \"Mercury\") [\"Venus\"]))\n  (is (= (candidate \"Mercury\" \"Uranus\") [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"]))\n  (is (= (candidate \"Neptune\" \"Venus\") [\"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"]))\n  (is (= (candidate \"Earth\" \"Earth\") []))\n  (is (= (candidate \"Mars\" \"Earth\") []))\n  (is (= (candidate \"Jupiter\" \"Makemake\") []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "(defn sorted_list_sum\n  \"Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never a vector of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  >>> (list_sort [\"aa\" \"a\" \"aaa\"])\n  [\"aa\"]\n  >>> (list_sort [\"ab\" \"a\" \"aaa\" \"cd\"])\n  [\"ab\" \"cd\"]\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sorted_list_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"aa\" \"a\" \"aaa\"]) [\"aa\"]))\n  (is (= (candidate [\"school\" \"AI\" \"asdf\" \"b\"]) [\"AI\" \"asdf\" \"school\"]))\n  (is (= (candidate [\"d\" \"b\" \"c\" \"a\"]) []))\n  (is (= (candidate [\"d\" \"dcba\" \"abcd\" \"a\"]) [\"abcd\" \"dcba\"]))\n  (is (= (candidate [\"AI\" \"ai\" \"au\"]) [\"AI\" \"ai\" \"au\"]))\n  (is (= (candidate [\"a\" \"b\" \"b\" \"c\" \"c\" \"a\"]) []))\n  (is (= (candidate [\"aaaa\" \"bbbb\" \"dd\" \"cc\"]) [\"cc\" \"dd\" \"aaaa\" \"bbbb\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "(defn x_or_y\n  \"A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n  Examples:\n  >>> (x_or_y 7 34 12)\n  34\n  >>> (x_or_y 15 8 5)\n  5\"\n  [n x y]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate x_or_y)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7 34 12) 34))\n  (is (= (candidate 15 8 5) 5))\n  (is (= (candidate 3 33 5212) 33))\n  (is (= (candidate 1259 3 52) 3))\n  (is (= (candidate 7919 -1 12) -1))\n  (is (= (candidate 3609 1245 583) 583))\n  (is (= (candidate 91 56 129) 129))\n  (is (= (candidate 6 34 1234) 1234))\n  (is (= (candidate 1 2 0) 0))\n  (is (= (candidate 2 2 0) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "(defn double_the_difference\n  \"Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  >>> (double_the_difference [1 3 2 0])\n  10\n  >>> (double_the_difference [-1 -2 0])\n  0\n  >>> (double_the_difference [9 -2])\n  81\n  >>> (double_the_difference [0])\n  0\n  If the input list is empty, return 0.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate double_the_difference)\n\n(deftest test-humaneval\n\n  (is (= (candidate []) 0))\n  (is (= (candidate [5.0 4.0]) 25))\n  (is (= (candidate [0.1 0.2 0.3]) 0))\n  (is (= (candidate [-10.0 -20.0 -30.0]) 0))\n  (is (= (candidate [-1.0 -2.0 8.0]) 0))\n  (is (= (candidate [0.2 3.0 5.0]) 34))\n  (is (= (candidate [-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0]) 165))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_152_compare", "prompt": "(defn compare\n  \"I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two vectors of scores and guesses of equal length, where each index shows a match. \n  Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  example:\n  >>> (compare [1 2 3 4 5 1] [1 2 3 4 2 -2])\n  [0 0 0 0 3 3]\n  >>> (compare [0 5 0 0 0 4] [4 1 1 0 0 -2])\n  [4 4 1 0 0 6]\"\n  [game guess]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate compare)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 1] [1 2 3 4 2 -2]) [0 0 0 0 3 3]))\n  (is (= (candidate [0 0 0 0 0 0] [0 0 0 0 0 0]) [0 0 0 0 0 0]))\n  (is (= (candidate [1 2 3] [-1 -2 -3]) [2 4 6]))\n  (is (= (candidate [1 2 3 5] [-1 2 3 4]) [2 0 0 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "(defn Strongest_Extension\n  \"You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters \n  in the extension's name, the strength is given by the fraction CAP - SM. \n  You should find the strongest extension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n  (its strength is -1).\n  Example:\n  >>> (Strongest_Extension \"my_class\" [\"AA\" \"Be\" \"CC\"])\n  \"my_class.AA\"\"\n  [class_name extensions]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Strongest_Extension)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Watashi\" [\"tEN\" \"niNE\" \"eIGHt8OKe\"]) \"Watashi.eIGHt8OKe\"))\n  (is (= (candidate \"Boku123\" [\"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"]) \"Boku123.YEs.WeCaNe\"))\n  (is (= (candidate \"__YESIMHERE\" [\"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\"]) \"__YESIMHERE.NuLl__\"))\n  (is (= (candidate \"K\" [\"Ta\" \"TAR\" \"t234An\" \"cosSo\"]) \"K.TAR\"))\n  (is (= (candidate \"__HAHA\" [\"Tab\" \"123\" \"781345\" \"-_-\"]) \"__HAHA.123\"))\n  (is (= (candidate \"YameRore\" [\"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"]) \"YameRore.okIWILL123\"))\n  (is (= (candidate \"finNNalLLly\" [\"Die\" \"NowW\" \"Wow\" \"WoW\"]) \"finNNalLLly.WoW\"))\n  (is (= (candidate \"_\" [\"Bb\" \"91245\"]) \"_.Bb\"))\n  (is (= (candidate \"Sp\" [\"671235\" \"Bb\"]) \"Sp.671235\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "(defn cycpattern_check\n  \"You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  >>> (cycpattern_check \"abcd\" \"abd\")\n  false\n  >>> (cycpattern_check \"hello\" \"ell\")\n  true\n  >>> (cycpattern_check \"whassup\" \"psus\")\n  false\n  >>> (cycpattern_check \"abab\" \"baa\")\n  true\n  >>> (cycpattern_check \"efef\" \"eeff\")\n  false\n  >>> (cycpattern_check \"himenss\" \"simen\")\n  true\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cycpattern_check)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"xyzw\" \"xyw\") false))\n  (is (= (candidate \"yello\" \"ell\") true))\n  (is (= (candidate \"whattup\" \"ptut\") false))\n  (is (= (candidate \"efef\" \"fee\") true))\n  (is (= (candidate \"abab\" \"aabb\") false))\n  (is (= (candidate \"winemtt\" \"tinem\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "(defn even_odd_count\n  \"Given an integer. return a vector that has the number of even and odd digits respectively.\n  Example:\n      >>> (even_odd_count -12)\n      [1 1]\n      >>> (even_odd_count 123)\n      [1 2]\"\n  [num]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_odd_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7) [0 1]))\n  (is (= (candidate -78) [1 1]))\n  (is (= (candidate 3452) [2 2]))\n  (is (= (candidate 346211) [3 3]))\n  (is (= (candidate -345821) [3 3]))\n  (is (= (candidate -2) [1 0]))\n  (is (= (candidate -45347) [2 3]))\n  (is (= (candidate 0) [1 0]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "(defn int_to_mini_roman\n  \"Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n  Examples:\n  >>> (int_to_mini_roman 19)\n  \"xix\"\n  >>> (int_to_mini_roman 152)\n  \"clii\"\n  >>> (int_to_mini_roman 426)\n  \"cdxxvi\"\"\n  [number]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate int_to_mini_roman)\n\n(deftest test-humaneval\n\n  (is (= (candidate 19) \"xix\"))\n  (is (= (candidate 152) \"clii\"))\n  (is (= (candidate 251) \"ccli\"))\n  (is (= (candidate 426) \"cdxxvi\"))\n  (is (= (candidate 500) \"d\"))\n  (is (= (candidate 1) \"i\"))\n  (is (= (candidate 4) \"iv\"))\n  (is (= (candidate 43) \"xliii\"))\n  (is (= (candidate 90) \"xc\"))\n  (is (= (candidate 94) \"xciv\"))\n  (is (= (candidate 532) \"dxxxii\"))\n  (is (= (candidate 900) \"cm\"))\n  (is (= (candidate 994) \"cmxciv\"))\n  (is (= (candidate 1000) \"m\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "(defn right_angle_triangle\n  \"Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or \n  90 degree.\n  Example:\n  >>> (right_angle_triangle 3 4 5)\n  true\n  >>> (right_angle_triangle 1 2 3)\n  false\"\n  [a b c]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate right_angle_triangle)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 4 5) true))\n  (is (= (candidate 1 2 3) false))\n  (is (= (candidate 10 6 8) true))\n  (is (= (candidate 2 2 2) false))\n  (is (= (candidate 7 24 25) true))\n  (is (= (candidate 10 5 7) false))\n  (is (= (candidate 5 12 13) true))\n  (is (= (candidate 15 8 17) true))\n  (is (= (candidate 48 55 73) true))\n  (is (= (candidate 1 1 1) false))\n  (is (= (candidate 2 2 10) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_158_find_max", "prompt": "(defn find_max\n  \"Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n  >>> (find_max [\"name\" \"of\" \"string\"])\n  \"string\"\n  >>> (find_max [\"name\" \"enam\" \"game\"])\n  \"enam\"\n  >>> (find_max [\"aaaaaaa\" \"bb\" \"cc\"])\n  \"aaaaaaa\"\"\n  [words]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_max)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"name\" \"of\" \"string\"]) \"string\"))\n  (is (= (candidate [\"name\" \"enam\" \"game\"]) \"enam\"))\n  (is (= (candidate [\"aaaaaaa\" \"bb\" \"cc\"]) \"aaaaaaa\"))\n  (is (= (candidate [\"abc\" \"cba\"]) \"abc\"))\n  (is (= (candidate [\"play\" \"this\" \"game\" \"of\" \"footbott\"]) \"footbott\"))\n  (is (= (candidate [\"we\" \"are\" \"gonna\" \"rock\"]) \"gonna\"))\n  (is (= (candidate [\"we\" \"are\" \"a\" \"mad\" \"nation\"]) \"nation\"))\n  (is (= (candidate [\"this\" \"is\" \"a\" \"prrk\"]) \"this\"))\n  (is (= (candidate [\"b\"]) \"b\"))\n  (is (= (candidate [\"play\" \"play\" \"play\"]) \"play\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_159_eat", "prompt": "(defn eat\n  \"You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return a vector of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  Example:\n  >>> (eat 5 6 10)\n  [11 4]\n  >>> (eat 4 8 9)\n  [12 1]\n  >>> (eat 1 10 10)\n  [11 0]\n  >>> (eat 2 11 5)\n  [7 0]\n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  Have fun :)\"\n  [number need remaining]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate eat)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 6 10) [11 4]))\n  (is (= (candidate 4 8 9) [12 1]))\n  (is (= (candidate 1 10 10) [11 0]))\n  (is (= (candidate 2 11 5) [7 0]))\n  (is (= (candidate 4 5 7) [9 2]))\n  (is (= (candidate 4 5 1) [5 0]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "(defn do_algebra\n  \"Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n  Example:\n  operator['+', '*', '-']\n  vector = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\"\n  [operator operand]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate do_algebra)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"**\" \"*\" \"+\"] [2 3 4 5]) 37))\n  (is (= (candidate [\"+\" \"*\" \"-\"] [2 3 4 5]) 9))\n  (is (= (candidate [\"//\" \"*\"] [7 3 4]) 8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_161_solve", "prompt": "(defn solve\n  \"You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  >>> (solve \"1234\")\n  \"4321\"\n  >>> (solve \"ab\")\n  \"AB\"\n  >>> (solve \"#a@C\")\n  \"#A@c\"\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate solve)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"AsDf\") \"aSdF\"))\n  (is (= (candidate \"1234\") \"4321\"))\n  (is (= (candidate \"ab\") \"AB\"))\n  (is (= (candidate \"#a@C\") \"#A@c\"))\n  (is (= (candidate \"#AsdfW^45\") \"#aSDFw^45\"))\n  (is (= (candidate \"#6@2\") \"2@6#\"))\n  (is (= (candidate \"#$a^D\") \"#$A^d\"))\n  (is (= (candidate \"#ccc\") \"#CCC\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "(defn string_to_md5\n  \"Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return nil.\n  >>> (string_to_md5 \"Hello world\")\n  \"3e25960a79dbc69b674cd4ec67a72c62\"\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_to_md5)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\"))\n  (is (= (candidate \"\") nil))\n  (is (= (candidate \"A B C\") \"0ef78513b0cb8cef12743f5aeb35f888\"))\n  (is (= (candidate \"password\") \"5f4dcc3b5aa765d61d8327deb882cf99\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "(defn generate_integers\n  \"Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n  For example:\n  >>> (generate_integers 2 8)\n  [2 4 6 8]\n  >>> (generate_integers 8 2)\n  [2 4 6 8]\n  >>> (generate_integers 10 14)\n  []\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate generate_integers)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 10) [2 4 6 8]))\n  (is (= (candidate 10 2) [2 4 6 8]))\n  (is (= (candidate 132 2) [2 4 6 8]))\n  (is (= (candidate 17 89) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "(defn is_not_prime\n  \"\tWrite a cljthon function to identify non-prime numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_not_prime)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) false))\n  (is (= (candidate 10) true))\n  (is (= (candidate 35) true))\n  (is (= (candidate 37) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "(defn heap_queue_largest\n  \"\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\"\n  [nums n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate heap_queue_largest)\n\n(deftest test-humaneval\n\n  (is (= (candidate [25 35 22 85 14 65 75 22 58] 3) [85 75 65]))\n  (is (= (candidate [25 35 22 85 14 65 75 22 58] 2) [85 75]))\n  (is (= (candidate [25 35 22 85 14 65 75 22 58] 5) [85 75 65 58 35]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "(defn differ_At_One_Bit_Pos\n  \"\tWrite a cljthon function to check whether the two numbers differ at one bit position only or not.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate differ_At_One_Bit_Pos)\n\n(deftest test-humaneval\n\n  (is (= (candidate 13 9) true))\n  (is (= (candidate 15 8) false))\n  (is (= (candidate 2 4) false))\n  (is (= (candidate 2 3) true))\n  (is (= (candidate 5 1) true))\n  (is (= (candidate 1 5) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_8_square_nums", "prompt": "(defn square_nums\n  \"\tWrite a function to find squares of individual elements in a list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [1 4 9 16 25 36 49 64 81 100]))\n  (is (= (candidate [10 20 30]) [100 400 900]))\n  (is (= (candidate [12 15]) [144 225]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "(defn find_Rotations\n  \"\tWrite a cljthon function to find the minimum number of rotations (greater than 0) required to get the same string.\"\n  [str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Rotations)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aaaa\") 1))\n  (is (= (candidate \"ab\") 2))\n  (is (= (candidate \"abc\") 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "(defn remove_Occ\n  \"\tWrite a cljthon function to remove first and last occurrence of a given character from the string.\"\n  [s ch]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_Occ)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"hello\" \"l\") \"heo\"))\n  (is (= (candidate \"abcda\" \"a\") \"bcd\"))\n  (is (= (candidate \"PHP\" \"P\") \"H\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "(defn sort_matrix\n  \"\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\"\n  [M]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_matrix)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [2 4 5] [1 1 1]]) [[1 1 1] [1 2 3] [2 4 5]]))\n  (is (= (candidate [[1 2 3] [-2 4 -5] [1 -1 1]]) [[-2 4 -5] [1 -1 1] [1 2 3]]))\n  (is (= (candidate [[5 8 9] [6 4 3] [2 1 4]]) [[2 1 4] [6 4 3] [5 8 9]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_14_find_Volume", "prompt": "(defn find_Volume\n  \"\tWrite a cljthon function to find the volume of a triangular prism.\"\n  [l b h]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Volume)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 8 6) 240))\n  (is (= (candidate 3 2 2) 6))\n  (is (= (candidate 1 2 1) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "(defn text_lowercase_underscore\n  \"\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_lowercase_underscore)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aab_cbbbc\") true))\n  (is (= (candidate \"aab_Abbbc\") false))\n  (is (= (candidate \"Aaab_abbbc\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "(defn square_perimeter\n  \"\tWrite a function that returns the perimeter of a square given its side length as input.\"\n  [a]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_perimeter)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 40))\n  (is (= (candidate 5) 20))\n  (is (= (candidate 4) 16))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "(defn remove_dirty_chars\n  \"\tWrite a function to remove characters from the first string which are present in the second string.\"\n  [string second_string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_dirty_chars)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"probasscurve\" \"pros\") \"bacuve\"))\n  (is (= (candidate \"digitalindia\" \"talent\") \"digiidi\"))\n  (is (= (candidate \"exoticmiles\" \"toxic\") \"emles\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "(defn test_duplicate\n  \"\tWrite a function to find whether a given vector of integers contains any duplicate element.\"\n  [arraynums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate test_duplicate)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) false))\n  (is (= (candidate [1 2 3 4 4]) true))\n  (is (= (candidate [1 1 2 2 3 3 4 4 5]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_20_is_woodall", "prompt": "(defn is_woodall\n  \"\tWrite a function to check if the given number is woodball or not.\"\n  [x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_woodall)\n\n(deftest test-humaneval\n\n  (is (= (candidate 383) true))\n  (is (= (candidate 254) false))\n  (is (= (candidate 200) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_56_checks", "prompt": "(defn checks\n  \"\tWrite a cljthon function to check if a given number is one less than twice its reverse.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate checks)\n\n(deftest test-humaneval\n\n  (is (= (candidate 70) false))\n  (is (= (candidate 23) false))\n  (is (= (candidate 73) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "(defn find_Max_Num\n  \"\tWrite a cljthon function to find the largest number that can be formed with the given list of digits.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Max_Num)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 321))\n  (is (= (candidate [4 5 6 1]) 6541))\n  (is (= (candidate [1 2 3 9]) 9321))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "(defn opposite_Signs\n  \"\tWrite a cljthon function to check whether the given two integers have opposite sign or not.\"\n  [x y]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate opposite_Signs)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 -2) true))\n  (is (= (candidate 3 2) false))\n  (is (= (candidate -10 -10) false))\n  (is (= (candidate -2 2) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "(defn is_octagonal\n  \"\tWrite a function to find the nth octagonal number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_octagonal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 65))\n  (is (= (candidate 10) 280))\n  (is (= (candidate 15) 645))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "(defn count_Substrings\n  \"\tWrite a cljthon function to count the number of substrings with the sum of digits equal to their length.\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Substrings)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"112112\") 6))\n  (is (= (candidate \"111\") 6))\n  (is (= (candidate \"1101112\") 12))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_62_smallest_num", "prompt": "(defn smallest_num\n  \"\tWrite a cljthon function to find smallest number in a list.\"\n  [xs]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate smallest_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 1 45 99]) 1))\n  (is (= (candidate [1 2 3]) 1))\n  (is (= (candidate [45 46 50 60]) 45))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_63_max_difference", "prompt": "(defn max_difference\n  \"\tWrite a function to find the maximum difference between available pairs in the given vector list.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_difference)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[3 5] [1 7] [10 3] [1 2]]) 7))\n  (is (= (candidate [[4 6] [2 17] [9 13] [11 12]]) 15))\n  (is (= (candidate [[12 35] [21 27] [13 23] [41 22]]) 23))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_64_subject_marks", "prompt": "(defn subject_marks\n  \"\tWrite a function to sort a list of vectors using the second value of each vector.\"\n  [subjectmarks]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate subject_marks)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"English\" 88] [\"Science\" 90] [\"Maths\" 97] [\"Social sciences\" 82]]) [[\"Social sciences\" 82] [\"English\" 88] [\"Science\" 90] [\"Maths\" 97]]))\n  (is (= (candidate [[\"Telugu\" 49] [\"Hindhi\" 54] [\"Social\" 33]]) [[\"Social\" 33] [\"Telugu\" 49] [\"Hindhi\" 54]]))\n  (is (= (candidate [[\"Physics\" 96] [\"Chemistry\" 97] [\"Biology\" 45]]) [[\"Biology\" 45] [\"Physics\" 96] [\"Chemistry\" 97]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "(defn recursive_list_sum\n  \"\tWrite a function to flatten a list and sum all of its elements.\"\n  [data_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate recursive_list_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 [3 4] [5 6]]) 21))\n  (is (= (candidate [7 10 [15 14] [19 41]]) 106))\n  (is (= (candidate [10 20 [30 40] [50 60]]) 210))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_66_pos_count", "prompt": "(defn pos_count\n  \"\tWrite a cljthon function to count the number of positive numbers in a list.\"\n  [list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pos_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 -2 3 -4]) 2))\n  (is (= (candidate [3 4 5 -1]) 3))\n  (is (= (candidate [1 2 3 4]) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_67_bell_number", "prompt": "(defn bell_number\n  \"\tWrite a function to find the number of ways to partition a set of Bell numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bell_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 2))\n  (is (= (candidate 10) 115975))\n  (is (= (candidate 56) 6775685320645824322581483068371419745979053216268760300))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "(defn is_Monotonic\n  \"\tWrite a cljthon function to check whether the given vector is monotonic or not.\"\n  [A]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Monotonic)\n\n(deftest test-humaneval\n\n  (is (= (candidate [6 5 4 4]) true))\n  (is (= (candidate [1 2 2 3]) true))\n  (is (= (candidate [1 3 2]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_69_is_sublist", "prompt": "(defn is_sublist\n  \"\tWrite a function to check whether a list contains the given sublist or not.\"\n  [l s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_sublist)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 4 3 5 7] [3 7]) false))\n  (is (= (candidate [2 4 3 5 7] [4 3]) true))\n  (is (= (candidate [2 4 3 5 7] [1 6]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_70_get_equal", "prompt": "(defn get_equal\n  \"\tWrite a function to find whether all the given lists have equal length or not.\"\n  [Input]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_equal)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[11 22 33] [44 55 66]]) true))\n  (is (= (candidate [[1 2 3] [4 5 6 7]]) false))\n  (is (= (candidate [[1 2] [3 4]]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_71_comb_sort", "prompt": "(defn comb_sort\n  \"\tWrite a function to sort a list of elements.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate comb_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 15 37 25 79]) [5 15 25 37 79]))\n  (is (= (candidate [41 32 15 19 22]) [15 19 22 32 41]))\n  (is (= (candidate [99 15 13 47]) [13 15 47 99]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_72_dif_Square", "prompt": "(defn dif_Square\n  \"\tWrite a cljthon function to check whether the given number can be represented as the difference of two squares or not.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate dif_Square)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) true))\n  (is (= (candidate 10) false))\n  (is (= (candidate 15) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "(defn is_samepatterns\n  \"\tWrite a function to check whether it follows the sequence given in the patterns vector.\"\n  [colors patterns]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_samepatterns)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"red\" \"green\" \"green\"] [\"a\" \"b\" \"b\"]) true))\n  (is (= (candidate [\"red\" \"green\" \"greenn\"] [\"a\" \"b\" \"b\"]) false))\n  (is (= (candidate [\"red\" \"green\" \"greenn\"] [\"a\" \"b\"]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_75_find_tuples", "prompt": "(defn find_tuples\n  \"\tWrite a function to find vectors which have all elements divisible by k from the given list of vectors.\"\n  [test_list K]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[6 24 12] [7 9 6] [12 18 21]] 6) [[6 24 12]]))\n  (is (= (candidate [[5 25 30] [4 2 3] [7 8 9]] 5) [[5 25 30]]))\n  (is (= (candidate [[7 9 16] [8 16 4] [19 17 18]] 4) [[8 16 4]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_77_is_Diff", "prompt": "(defn is_Diff\n  \"\tWrite a cljthon function to find whether a number is divisible by 11.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12345) false))\n  (is (= (candidate 1212112) true))\n  (is (= (candidate 1212) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_79_word_len", "prompt": "(defn word_len\n  \"\tWrite a cljthon function to check whether the length of the word is odd or not.\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate word_len)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hadoop\") false))\n  (is (= (candidate \"great\") true))\n  (is (= (candidate \"structure\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "(defn tetrahedral_number\n  \"\tWrite a function to find the nth tetrahedral number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tetrahedral_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 35))\n  (is (= (candidate 6) 56))\n  (is (= (candidate 7) 84))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_83_get_Char", "prompt": "(defn get_Char\n  \"\tWrite a cljthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\"\n  [strr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_Char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abc\") \"f\"))\n  (is (= (candidate \"gfg\") \"t\"))\n  (is (= (candidate \"ab\") \"c\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_84_sequence", "prompt": "(defn sequence\n  \"\tWrite a function to find the nth number in the newman conway sequence.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sequence)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 6))\n  (is (= (candidate 2) 1))\n  (is (= (candidate 3) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "(defn centered_hexagonal_number\n  \"\tWrite a function to find nth centered hexagonal number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate centered_hexagonal_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 271))\n  (is (= (candidate 2) 7))\n  (is (= (candidate 9) 217))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "(defn merge_dictionaries_three\n  \"\tWrite a function to merge three dictionaries into a single map.\"\n  [dict1 dict2 dict3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate merge_dictionaries_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"R\" \"Red\" \"B\" \"Black\" \"P\" \"Pink\"} {\"G\" \"Green\" \"W\" \"White\"} {\"O\" \"Orange\" \"W\" \"White\" \"B\" \"Black\"}) {\"B\" \"Black\" \"R\" \"Red\" \"P\" \"Pink\" \"G\" \"Green\" \"W\" \"White\" \"O\" \"Orange\"}))\n  (is (= (candidate {\"R\" \"Red\" \"B\" \"Black\" \"P\" \"Pink\"} {\"G\" \"Green\" \"W\" \"White\"} {\"L\" \"lavender\" \"B\" \"Blue\"}) {\"W\" \"White\" \"P\" \"Pink\" \"B\" \"Black\" \"R\" \"Red\" \"G\" \"Green\" \"L\" \"lavender\"}))\n  (is (= (candidate {\"R\" \"Red\" \"B\" \"Black\" \"P\" \"Pink\"} {\"L\" \"lavender\" \"B\" \"Blue\"} {\"G\" \"Green\" \"W\" \"White\"}) {\"B\" \"Black\" \"P\" \"Pink\" \"R\" \"Red\" \"G\" \"Green\" \"L\" \"lavender\" \"W\" \"White\"}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_88_freq_count", "prompt": "(defn freq_count\n  \"\tWrite a function to get the frequency of all the elements in a list, returned as a map.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate freq_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 10 10 10 20 20 20 20 40 40 50 50 30]) {10 4 20 4 40 2 50 2 30 1}))\n  (is (= (candidate [1 2 3 4 3 2 4 1 3 1 4]) {1 3 2 2 3 3 4 3}))\n  (is (= (candidate [5 6 7 4 9 10 4 5 6 7 9 5]) {10 1 5 3 6 2 7 2 4 2 9 2}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_89_closest_num", "prompt": "(defn closest_num\n  \"\tWrite a function to find the closest smaller number than n.\"\n  [N]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate closest_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 11) 10))\n  (is (= (candidate 7) 6))\n  (is (= (candidate 12) 11))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_90_len_log", "prompt": "(defn len_log\n  \"\tWrite a cljthon function to find the length of the longest word.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate len_log)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"python\" \"PHP\" \"bigdata\"]) 7))\n  (is (= (candidate [\"a\" \"ab\" \"abc\"]) 3))\n  (is (= (candidate [\"small\" \"big\" \"tall\"]) 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_91_find_substring", "prompt": "(defn find_substring\n  \"\tWrite a function to check if a string is present as a substring in a given list of string values.\"\n  [str1 sub_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_substring)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"red\" \"black\" \"white\" \"green\" \"orange\"] \"ack\") true))\n  (is (= (candidate [\"red\" \"black\" \"white\" \"green\" \"orange\"] \"abc\") false))\n  (is (= (candidate [\"red\" \"black\" \"white\" \"green\" \"orange\"] \"ange\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_92_is_undulating", "prompt": "(defn is_undulating\n  \"\tWrite a function to check whether the given number is undulating or not.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_undulating)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1212121) true))\n  (is (= (candidate 1991) false))\n  (is (= (candidate 121) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_93_power", "prompt": "(defn power\n  \"\tWrite a function to calculate the value of 'a' to the power 'b'.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate power)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 4) 81))\n  (is (= (candidate 2 3) 8))\n  (is (= (candidate 5 5) 3125))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_94_index_minimum", "prompt": "(defn index_minimum\n  \"\tGiven a list of vectors, write a function that returns the first value of the vector with the smallest second value.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate index_minimum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Rash\" 143] [\"Manjeet\" 200] [\"Varsha\" 100]]) \"Varsha\"))\n  (is (= (candidate [[\"Yash\" 185] [\"Dawood\" 125] [\"Sanya\" 175]]) \"Dawood\"))\n  (is (= (candidate [[\"Sai\" 345] [\"Salman\" 145] [\"Ayesha\" 96]]) \"Ayesha\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "(defn Find_Min_Length\n  \"\tWrite a cljthon function to find the length of the smallest list in a list of lists.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Min_Length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1] [1 2]]) 1))\n  (is (= (candidate [[1 2] [1 2 3] [1 2 3 4]]) 2))\n  (is (= (candidate [[3 3 3] [4 4 4 4]]) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_96_divisor", "prompt": "(defn divisor\n  \"\tWrite a cljthon function to find the number of divisors of a given integer.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate divisor)\n\n(deftest test-humaneval\n\n  (is (= (candidate 15) 4))\n  (is (= (candidate 12) 6))\n  (is (= (candidate 9) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "(defn frequency_lists\n  \"\tWrite a function to find frequency of each element in a flattened list of lists, returned in a map.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate frequency_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3 2] [4 5 6 2] [7 8 9 5]]) {1 1 2 3 3 1 4 1 5 2 6 1 7 1 8 1 9 1}))\n  (is (= (candidate [[1 2 3 4] [5 6 7 8] [9 10 11 12]]) {1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1}))\n  (is (= (candidate [[20 30 40 17] [18 16 14 13] [10 20 30 40]]) {20 2 30 2 40 2 17 1 18 1 16 1 14 1 13 1 10 1}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "(defn decimal_to_binary\n  \"\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate decimal_to_binary)\n\n(deftest test-humaneval\n\n  (is (= (candidate 8) \"1000\"))\n  (is (= (candidate 18) \"10010\"))\n  (is (= (candidate 7) \"111\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "(defn next_smallest_palindrome\n  \"\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\"\n  [num]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_smallest_palindrome)\n\n(deftest test-humaneval\n\n  (is (= (candidate 99) 101))\n  (is (= (candidate 1221) 1331))\n  (is (= (candidate 120) 121))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_101_kth_element", "prompt": "(defn kth_element\n  \"\tWrite a function to find the kth element in the given vector using 1-based indexing.\"\n  [arr k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate kth_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 3 5 7 19] 2) 3))\n  (is (= (candidate [17 24 8 23] 3) 8))\n  (is (= (candidate [16 21 25 36 4] 4) 36))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "(defn snake_to_camel\n  \"\tWrite a function to convert a snake case string to camel case string.\"\n  [word]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate snake_to_camel)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python_program\") \"PythonProgram\"))\n  (is (= (candidate \"python_language\") \"PythonLanguage\"))\n  (is (= (candidate \"programming_language\") \"ProgrammingLanguage\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "(defn eulerian_num\n  \"\tWrite a function to find the Eulerian number a(n, m).\"\n  [n m]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate eulerian_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 1) 4))\n  (is (= (candidate 4 1) 11))\n  (is (= (candidate 5 3) 26))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "(defn sort_sublists\n  \"\tWrite a function to sort each sublist of strings in a given list of lists.\"\n  [input_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_sublists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"green\" \"orange\"] [\"black\" \"white\"] [\"white\" \"black\" \"orange\"]]) [[\"green\" \"orange\"] [\"black\" \"white\"] [\"black\" \"orange\" \"white\"]]))\n  (is (= (candidate [[\" red \" \"green\"] [\"blue \" \" black\"] [\" orange\" \"brown\"]]) [[\" red \" \"green\"] [\" black\" \"blue \"] [\" orange\" \"brown\"]]))\n  (is (= (candidate [[\"zilver\" \"gold\"] [\"magnesium\" \"aluminium\"] [\"steel\" \"bronze\"]]) [[\"gold\" \"zilver\"] [\"aluminium\" \"magnesium\"] [\"bronze\" \"steel\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_105_count", "prompt": "(defn count\n  \"\tWrite a cljthon function to count true booleans in the given list.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [true false true]) 2))\n  (is (= (candidate [false false]) 0))\n  (is (= (candidate [true true true]) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_106_add_lists", "prompt": "(defn add_lists\n  \"\tWrite a function to append the given list to the given vectors.\"\n  [test_list test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 7] [9 10]) [9 10 5 6 7]))\n  (is (= (candidate [6 7 8] [10 11]) [10 11 6 7 8]))\n  (is (= (candidate [7 8 9] [11 12]) [11 12 7 8 9]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "(defn merge_sorted_list\n  \"\tWrite a function to merge three lists into a single sorted list.\"\n  [num1 num2 num3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate merge_sorted_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [25 24 15 4 5 29 110] [19 20 11 56 25 233 154] [24 26 54 48]) [4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233]))\n  (is (= (candidate [1 3 5 6 8 9] [2 5 7 11] [1 4 7 8 12]) [1 1 2 3 4 5 5 6 7 7 8 8 9 11 12]))\n  (is (= (candidate [18 14 10 9 8 7 9 3 2 4 1] [25 35 22 85 14 65 75 25 58] [12 74 9 50 61 41]) [1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "(defn odd_Equivalent\n  \"\tWrite a cljthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\"\n  [s n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_Equivalent)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"011001\" 6) 3))\n  (is (= (candidate \"11011\" 5) 4))\n  (is (= (candidate \"1010\" 4) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_113_check_integer", "prompt": "(defn check_integer\n  \"\tWrite a function to check if a string represents an integer or not.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_integer)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") false))\n  (is (= (candidate \"1\") true))\n  (is (= (candidate \"12345\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "(defn tuple_to_int\n  \"\tWrite a function to convert a given vector of positive integers into a single integer.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_to_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 123))\n  (is (= (candidate [4 5 6]) 456))\n  (is (= (candidate [5 6 7]) 567))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_117_list_to_float", "prompt": "(defn list_to_float\n  \"\tWrite a function to convert all possible convertible elements in a list of lists to floats.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate list_to_float)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"3\" \"4\"] [\"1\" \"26.45\"] [\"7.32\" \"8\"] [\"4\" \"8\"]]) [[3.0 4.0] [1.0 26.45] [7.32 8.0] [4.0 8.0]]))\n  (is (= (candidate [[\"4\" \"4\"] [\"2\" \"27\"] [\"4.12\" \"9\"] [\"7\" \"11\"]]) [[4.0 4.0] [2.0 27.0] [4.12 9.0] [7.0 11.0]]))\n  (is (= (candidate [[\"6\" \"78\"] [\"5\" \"26.45\"] [\"1.33\" \"4\"] [\"82\" \"13\"]]) [[6.0 78.0] [5.0 26.45] [1.33 4.0] [82.0 13.0]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_118_string_to_list", "prompt": "(defn string_to_list\n  \"\tWrite a function to convert a string to a list of strings split on the space character.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_to_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python programming\") [\"python\" \"programming\"]))\n  (is (= (candidate \"lists tuples strings\") [\"lists\" \"tuples\" \"strings\"]))\n  (is (= (candidate \"write a program\") [\"write\" \"a\" \"program\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_119_search", "prompt": "(defn search\n  \"\tWrite a cljthon function to find the element that appears only once in a sorted vector.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate search)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 2 3]) 3))\n  (is (= (candidate [1 1 3 3 4 4 5 5 7 7 8]) 8))\n  (is (= (candidate [1 2 2 3 3 4 4]) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "(defn max_product_tuple\n  \"\tWrite a function to find the maximum absolute product between numbers in pairs of vectors within a given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_product_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[2 7] [2 6] [1 8] [4 9]]) 36))\n  (is (= (candidate [[10 20] [15 2] [5 10]]) 200))\n  (is (= (candidate [[11 44] [10 15] [20 5] [12 9]]) 484))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "(defn amicable_numbers_sum\n  \"\tWrite a function to sum all amicable numbers from 1 to a specified number.\"\n  [limit]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate amicable_numbers_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 999) 504))\n  (is (= (candidate 9999) 31626))\n  (is (= (candidate 99) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_125_find_length", "prompt": "(defn find_length\n  \"\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"11000010001\") 6))\n  (is (= (candidate \"10111\") 1))\n  (is (= (candidate \"11011101100101\") 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_126_sum", "prompt": "(defn sum\n  \"\tWrite a cljthon function to find the sum of common divisors of two given numbers.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 15) 6))\n  (is (= (candidate 100 150) 93))\n  (is (= (candidate 4 6) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_127_multiply_int", "prompt": "(defn multiply_int\n  \"\tWrite a function to multiply two integers.\"\n  [x y]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiply_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20) 200))\n  (is (= (candidate 5 10) 50))\n  (is (= (candidate 4 8) 32))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_128_long_words", "prompt": "(defn long_words\n  \"\tWrite a function to find words that are longer than n characters from a given list of words.\"\n  [n str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate long_words)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 \"python is a programming language\") [\"python\" \"programming\" \"language\"]))\n  (is (= (candidate 2 \"writing a program\") [\"writing\" \"program\"]))\n  (is (= (candidate 5 \"sorting list\") [\"sorting\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "(defn magic_square_test\n  \"\tWrite a function to calculate whether the matrix is a magic square.\"\n  [my_matrix]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate magic_square_test)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[7 12 1 14] [2 13 8 11] [16 3 10 5] [9 6 15 4]]) true))\n  (is (= (candidate [[2 7 6] [9 5 1] [4 3 8]]) true))\n  (is (= (candidate [[2 7 6] [9 5 1] [4 3 7]]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "(defn max_occurrences\n  \"\tWrite a function to find the item with maximum frequency in a given list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_occurrences)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2]) 2))\n  (is (= (candidate [2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18]) 8))\n  (is (= (candidate [10 20 20 30 40 90 80 50 30 20 50 10]) 20))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "(defn reverse_vowels\n  \"\tWrite a cljthon function to reverse only the vowels of a given string (where y is not a vowel).\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_vowels)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python\") \"Python\"))\n  (is (= (candidate \"USA\") \"ASU\"))\n  (is (= (candidate \"ab\") \"ab\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_132_tup_string", "prompt": "(defn tup_string\n  \"\tWrite a function to convert a list to a string.\"\n  [tup1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tup_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"e\" \"x\" \"e\" \"r\" \"c\" \"i\" \"s\" \"e\" \"s\"]) \"exercises\"))\n  (is (= (candidate [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\"]) \"python\"))\n  (is (= (candidate [\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"]) \"program\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "(defn sum_negativenum\n  \"\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_negativenum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 4 -6 -9 11 -12 14 -5 17]) -32))\n  (is (= (candidate [10 15 -14 13 -18 12 -20]) -52))\n  (is (= (candidate [19 -65 57 39 152 -639 121 44 90 -190]) -894))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "(defn hexagonal_num\n  \"\tWrite a function to find the nth hexagonal number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate hexagonal_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 190))\n  (is (= (candidate 5) 45))\n  (is (= (candidate 7) 91))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "(defn is_Sum_Of_Powers_Of_Two\n  \"\tWrite a cljthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Sum_Of_Powers_Of_Two)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) true))\n  (is (= (candidate 7) false))\n  (is (= (candidate 14) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "(defn pancake_sort\n  \"\tWrite a function to sort a list of elements.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pancake_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [15 79 25 38 69]) [15 25 38 69 79]))\n  (is (= (candidate [98 12 54 36 85]) [12 36 54 85 98]))\n  (is (= (candidate [41 42 32 12 23]) [12 23 32 41 42]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_142_count_samepair", "prompt": "(defn count_samepair\n  \"\tWrite a function to count number items that are identical in the same position of three given lists.\"\n  [list1 list2 list3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_samepair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8] [2 2 3 1 2 6 7 9] [2 1 3 1 2 6 7 9]) 3))\n  (is (= (candidate [1 2 3 4 5 6 7 8] [2 2 3 1 2 6 7 8] [2 1 3 1 2 6 7 8]) 4))\n  (is (= (candidate [1 2 3 4 2 6 7 8] [2 2 3 1 2 6 7 8] [2 1 3 1 2 6 7 8]) 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_143_find_lists", "prompt": "(defn find_lists\n  \"\tWrite a function to find number of lists present in the given list.\"\n  [Input]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3 4] [5 6 7 8]]) 2))\n  (is (= (candidate [[1 2] [3 4] [5 6]]) 3))\n  (is (= (candidate [9 8 7 6 5 4 3 2 1]) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "(defn max_Abs_Diff\n  \"\tWrite a cljthon function to find the maximum difference between any two elements in a given vector.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_Abs_Diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 5 3]) 4))\n  (is (= (candidate [9 3 2 5 1]) 8))\n  (is (= (candidate [3 2 1]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_160_find_solution", "prompt": "(defn find_solution\n  \"\tWrite a function that returns integers x and y that satisfy ax + by = n as a vector, or return nil if no solution exists.\"\n  [a b n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_solution)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 3 7) [2 1]))\n  (is (= (candidate 4 2 7) nil))\n  (is (= (candidate 1 13 17) [4 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_161_remove_elements", "prompt": "(defn remove_elements\n  \"\tWrite a function to remove all elements from a given list present in another list.\"\n  [list1 list2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] [2 4 6 8]) [1 3 5 7 9 10]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] [1 3 5 7]) [2 4 6 8 9 10]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] [5 7]) [1 2 3 4 6 8 9 10]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_162_sum_series", "prompt": "(defn sum_series\n  \"\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_series)\n\n(deftest test-humaneval\n\n  (is (= (candidate 6) 12))\n  (is (= (candidate 10) 30))\n  (is (= (candidate 9) 25))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "(defn are_equivalent\n  \"\tWrite a function to determine if the sum of the divisors of two integers are the same.\"\n  [num1 num2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate are_equivalent)\n\n(deftest test-humaneval\n\n  (is (= (candidate 36 57) false))\n  (is (= (candidate 2 4) false))\n  (is (= (candidate 23 47) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_165_count_char_position", "prompt": "(defn count_char_position\n  \"\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_char_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"xbcefg\") 2))\n  (is (= (candidate \"ABcED\") 3))\n  (is (= (candidate \"AbgdeF\") 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "(defn find_even_pair\n  \"\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\"\n  [A]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_even_pair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 4 7 2 1]) 4))\n  (is (= (candidate [7 2 8 1 0 5 11]) 9))\n  (is (= (candidate [1 2 3]) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "(defn next_power_of_2\n  \"\tWrite a cljthon function to find the smallest power of 2 greater than or equal to n.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_power_of_2)\n\n(deftest test-humaneval\n\n  (is (= (candidate 0) 1))\n  (is (= (candidate 5) 8))\n  (is (= (candidate 17) 32))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_168_frequency", "prompt": "(defn frequency\n  \"\tWrite a function to count the number of occurrences of a number in a given list.\"\n  [a x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate frequency)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] 4) 0))\n  (is (= (candidate [1 2 2 3 3 3 4] 3) 3))\n  (is (= (candidate [0 1 2 3 1 2] 1) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "(defn sum_range_list\n  \"\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\"\n  [list1 m n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_range_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 5 6 8 3 4 9 10 11 8 12] 8 10) 29))\n  (is (= (candidate [2 1 5 6 8 3 4 9 10 11 8 12] 5 7) 16))\n  (is (= (candidate [2 1 5 6 8 3 4 9 10 11 8 12] 7 10) 38))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "(defn perimeter_pentagon\n  \"\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\"\n  [a]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate perimeter_pentagon)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 25))\n  (is (= (candidate 10) 50))\n  (is (= (candidate 15) 75))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_172_count_occurance", "prompt": "(defn count_occurance\n  \"\tWrite a function to count the number of occurence of the string 'std' in a given string.\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_occurance)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"letstdlenstdporstd\") 3))\n  (is (= (candidate \"truststdsolensporsd\") 1))\n  (is (= (candidate \"makestdsostdworthit\") 2))\n  (is (= (candidate \"stds\") 1))\n  (is (= (candidate \"\") 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_222_check_type", "prompt": "(defn check_type\n  \"\tWrite a function to check if all the elements in vector have same data type or not.\"\n  [test_tuple]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_type)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 7 3 5 6]) true))\n  (is (= (candidate [1 2 \"4\"]) false))\n  (is (= (candidate [3 2 1 4 5]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_223_is_majority", "prompt": "(defn is_majority\n  \"\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\"\n  [arr n x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_majority)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 3 3 3 10] 7 3) true))\n  (is (= (candidate [1 1 2 4 4 4 6 6] 8 4) false))\n  (is (= (candidate [1 1 1 2 2] 5 1) true))\n  (is (= (candidate [1 1 2 2] 5 1) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "(defn count_Set_Bits\n  \"\tWrite a cljthon function to count the number of set bits (binary digits with value 1) in a given number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Set_Bits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 1))\n  (is (= (candidate 4) 1))\n  (is (= (candidate 6) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "(defn odd_values_string\n  \"\tWrite a cljthon function to remove the characters which have odd index values of a given string.\"\n  [str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_values_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcdef\") \"ace\"))\n  (is (= (candidate \"python\") \"pto\"))\n  (is (= (candidate \"data\") \"dt\"))\n  (is (= (candidate \"lambs\") \"lms\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_227_min_of_three", "prompt": "(defn min_of_three\n  \"\tWrite a function to find minimum of three numbers.\"\n  [a b c]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_of_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20 0) 0))\n  (is (= (candidate 19 15 18) 15))\n  (is (= (candidate -10 -20 -30) -30))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "(defn all_Bits_Set_In_The_Given_Range\n  \"\tWrite a cljthon function to check whether all the bits are unset in the given range or not.\"\n  [n l r]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_Bits_Set_In_The_Given_Range)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4 1 2) true))\n  (is (= (candidate 17 2 4) true))\n  (is (= (candidate 39 4 6) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "(defn re_arrange_array\n  \"\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\n  [arr n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate re_arrange_array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-1 2 -3 4 5 6 -7 8 9] 9) [-1 -3 -7 4 5 6 2 8 9]))\n  (is (= (candidate [12 -14 -26 13 15] 5) [-14 -26 12 13 15]))\n  (is (= (candidate [10 24 36 -42 -39 -78 85] 7) [-42 -39 -78 10 24 36 85]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_230_replace_blank", "prompt": "(defn replace_blank\n  \"\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\"\n  [str1 char]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_blank)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"hello people\" \"@\") \"hello@people\"))\n  (is (= (candidate \"python program language\" \"$\") \"python$program$language\"))\n  (is (= (candidate \"blank space\" \"-\") \"blank-space\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_234_volume_cube", "prompt": "(defn volume_cube\n  \"\tWrite a function to find the volume of a cube given its side length.\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate volume_cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 27))\n  (is (= (candidate 2) 8))\n  (is (= (candidate 5) 125))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_237_check_occurences", "prompt": "(defn check_occurences\n  \"\tWrite a function that takes in a list of vectors and returns a map mapping each unique vector to the number of times it occurs in the list.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_occurences)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[3 1] [1 3] [2 5] [5 2] [6 3]]) {[1 3] 2 [2 5] 2 [3 6] 1}))\n  (is (= (candidate [[4 2] [2 4] [3 6] [6 3] [7 4]]) {[2 4] 2 [3 6] 2 [4 7] 1}))\n  (is (= (candidate [[13 2] [11 23] [12 25] [25 12] [16 23]]) {[2 13] 1 [11 23] 1 [12 25] 2 [16 23] 1}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "(defn number_of_substrings\n  \"\tWrite a cljthon function to count the number of non-empty substrings of a given string.\"\n  [str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate number_of_substrings)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abc\") 6))\n  (is (= (candidate \"abcd\") 10))\n  (is (= (candidate \"abcde\") 15))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "(defn get_total_number_of_sequences\n  \"\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\"\n  [m n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_total_number_of_sequences)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 4) 4))\n  (is (= (candidate 5 2) 6))\n  (is (= (candidate 16 3) 84))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_240_replace_list", "prompt": "(defn replace_list\n  \"\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\"\n  [list1 list2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 9 10] [2 4 6 8]) [1 3 5 7 9 2 4 6 8]))\n  (is (= (candidate [1 2 3 4 5] [5 6 7 8]) [1 2 3 4 5 6 7 8]))\n  (is (= (candidate [\"red\" \"blue\" \"green\"] [\"yellow\"]) [\"red\" \"blue\" \"yellow\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_242_count_charac", "prompt": "(defn count_charac\n  \"\tWrite a function to count the total number of characters in a string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_charac)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python programming\") 18))\n  (is (= (candidate \"language\") 8))\n  (is (= (candidate \"words\") 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "(defn next_Perfect_Square\n  \"\tWrite a cljthon function to find the next perfect square greater than a given number.\"\n  [N]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_Perfect_Square)\n\n(deftest test-humaneval\n\n  (is (= (candidate 35) 36))\n  (is (= (candidate 6) 9))\n  (is (= (candidate 9) 16))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_245_max_sum", "prompt": "(defn max_sum\n  \"\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 15 51 45 33 100 12 18 9]) 194))\n  (is (= (candidate [80 60 30 40 20 10]) 210))\n  (is (= (candidate [2 3 14 16 21 23 29 30]) 138))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_247_lps", "prompt": "(defn lps\n  \"\tWrite a function to find the length of the longest palindromic subsequence in the given string.\"\n  [str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lps)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"TENS FOR TENS\") 5))\n  (is (= (candidate \"CARDIO FOR CARDS\") 7))\n  (is (= (candidate \"PART OF THE JOURNEY IS PART\") 9))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_249_intersection_array", "prompt": "(defn intersection_array\n  \"\tWrite a function to find the intersection of two vectors.\"\n  [array_nums1 array_nums2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate intersection_array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 5 7 8 9 10] [1 2 4 8 9]) [1 2 8 9]))\n  (is (= (candidate [1 2 3 5 7 8 9 10] [3 5 7 9]) [3 5 7 9]))\n  (is (= (candidate [1 2 3 5 7 8 9 10] [10 20 30 40]) [10]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_250_count_X", "prompt": "(defn count_X\n  \"\tWrite a cljthon function that takes in a vector and an element and counts the occcurences of the element in the list.\"\n  [tup x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_X)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 8 5 2 10 15 10 8 5 8 8 2] 4) 0))\n  (is (= (candidate [10 8 5 2 10 15 10 8 5 8 8 2] 10) 3))\n  (is (= (candidate [10 8 5 2 10 15 10 8 5 8 8 2] 8) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_251_insert_element", "prompt": "(defn insert_element\n  \"\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\"\n  [list element]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate insert_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Red\" \"Green\" \"Black\"] \"c\") [\"c\" \"Red\" \"c\" \"Green\" \"c\" \"Black\"]))\n  (is (= (candidate [\"python\" \"java\"] \"program\") [\"program\" \"python\" \"program\" \"java\"]))\n  (is (= (candidate [\"happy\" \"sad\"] \"laugh\") [\"laugh\" \"happy\" \"laugh\" \"sad\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_252_convert", "prompt": "(defn convert\n  \"\tWrite a cljthon function to convert complex numbers to polar coordinates.\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate convert)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) [1.0 0.0]))\n  (is (= (candidate 4) [4.0 0.0]))\n  (is (= (candidate 5) [5.0 0.0]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_253_count_integer", "prompt": "(defn count_integer\n  \"\tWrite a cljthon function that returns the number of integer elements in a given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_integer)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 \"abc\" 1.2]) 2))\n  (is (= (candidate [1 2 3]) 3))\n  (is (= (candidate [1 1.2 4 5.1]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "(defn combinations_colors\n  \"\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\"\n  [l n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate combinations_colors)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\"] 1) [[\"Red\"] [\"Green\"] [\"Blue\"]]))\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\"] 2) [[\"Red\" \"Red\"] [\"Red\" \"Green\"] [\"Red\" \"Blue\"] [\"Green\" \"Green\"] [\"Green\" \"Blue\"] [\"Blue\" \"Blue\"]]))\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\"] 3) [[\"Red\" \"Red\" \"Red\"] [\"Red\" \"Red\" \"Green\"] [\"Red\" \"Red\" \"Blue\"] [\"Red\" \"Green\" \"Green\"] [\"Red\" \"Green\" \"Blue\"] [\"Red\" \"Blue\" \"Blue\"] [\"Green\" \"Green\" \"Green\"] [\"Green\" \"Green\" \"Blue\"] [\"Green\" \"Blue\" \"Blue\"] [\"Blue\" \"Blue\" \"Blue\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "(defn count_Primes_nums\n  \"\tWrite a cljthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Primes_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 2))\n  (is (= (candidate 10) 4))\n  (is (= (candidate 100) 25))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "(defn swap_numbers\n  \"\tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate swap_numbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20) [20 10]))\n  (is (= (candidate 15 17) [17 15]))\n  (is (= (candidate 100 200) [200 100]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "(defn maximize_elements\n  \"\tWrite a function to maximize the given two lists.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maximize_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [4 5] [2 9] [1 10]] [[6 7] [3 9] [1 1] [7 3]]) [[6 7] [4 9] [2 9] [7 10]]))\n  (is (= (candidate [[2 4] [5 6] [3 10] [2 11]] [[7 8] [4 10] [2 2] [8 4]]) [[7 8] [5 10] [3 10] [8 11]]))\n  (is (= (candidate [[3 5] [6 7] [4 11] [3 12]] [[8 9] [5 11] [3 3] [9 5]]) [[8 9] [6 11] [4 11] [9 12]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_260_newman_prime", "prompt": "(defn newman_prime\n  \"\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate newman_prime)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 7))\n  (is (= (candidate 4) 17))\n  (is (= (candidate 5) 41))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_261_division_elements", "prompt": "(defn division_elements\n  \"\tWrite a function that takes in two vectors and performs mathematical division operation element-wise across the given vectors.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate division_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 6 9] [5 2 3 3]) [2 2 2 3]))\n  (is (= (candidate [12 6 8 16] [6 3 4 4]) [2 2 2 4]))\n  (is (= (candidate [20 14 36 18] [5 7 6 9]) [4 2 6 2]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "(defn split_two_parts\n  \"\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a vector.\"\n  [list1 L]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split_two_parts)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 3 4 4 5 1] 3) [[1 1 2] [3 4 4 5 1]]))\n  (is (= (candidate [\"a\" \"b\" \"c\" \"d\"] 2) [[\"a\" \"b\"] [\"c\" \"d\"]]))\n  (is (= (candidate [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\"] 4) [[\"p\" \"y\" \"t\" \"h\"] [\"o\" \"n\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_264_dog_age", "prompt": "(defn dog_age\n  \"\tWrite a function to calculate a dog's age in dog's years.\"\n  [h_age]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate dog_age)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12) 61))\n  (is (= (candidate 15) 73))\n  (is (= (candidate 24) 109))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_265_list_split", "prompt": "(defn list_split\n  \"\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\"\n  [S step]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate list_split)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\"] 3) [[\"a\" \"d\" \"g\" \"j\" \"m\"] [\"b\" \"e\" \"h\" \"k\" \"n\"] [\"c\" \"f\" \"i\" \"l\"]]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10 11 12 13 14] 3) [[1 4 7 10 13] [2 5 8 11 14] [3 6 9 12]]))\n  (is (= (candidate [\"python\" \"java\" \"C\" \"C++\" \"DBMS\" \"SQL\"] 2) [[\"python\" \"C\" \"DBMS\"] [\"java\" \"C++\" \"SQL\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "(defn lateralsurface_cube\n  \"\tWrite a function to find the lateral surface area of a cube given its side length.\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lateralsurface_cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 100))\n  (is (= (candidate 9) 324))\n  (is (= (candidate 10) 400))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_267_square_Sum", "prompt": "(defn square_Sum\n  \"\tWrite a cljthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 10))\n  (is (= (candidate 3) 35))\n  (is (= (candidate 4) 84))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_268_find_star_num", "prompt": "(defn find_star_num\n  \"\tWrite a function to find the n'th star number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_star_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 37))\n  (is (= (candidate 4) 73))\n  (is (= (candidate 5) 121))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_269_ascii_value", "prompt": "(defn ascii_value\n  \"\tWrite a function to find the ascii value of a character.\"\n  [k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate ascii_value)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"A\") 65))\n  (is (= (candidate \"R\") 82))\n  (is (= (candidate \"S\") 83))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "(defn sum_even_and_even_index\n  \"\tWrite a cljthon function to find the sum of even numbers at even positions of a list.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_even_and_even_index)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 12 1 18 8]) 30))\n  (is (= (candidate [3 20 17 9 2 10 18 13 6 18]) 26))\n  (is (= (candidate [5 6 12 1]) 12))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "(defn even_Power_Sum\n  \"\tWrite a cljthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_Power_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 1056))\n  (is (= (candidate 3) 8832))\n  (is (= (candidate 1) 32))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_272_rear_extract", "prompt": "(defn rear_extract\n  \"\tWrite a function that takes in a list of vectors and returns a list containing the rear element of each vector.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rear_extract)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 \"Rash\" 21] [2 \"Varsha\" 20] [3 \"Kil\" 19]]) [21 20 19]))\n  (is (= (candidate [[1 \"Sai\" 36] [2 \"Ayesha\" 25] [3 \"Salman\" 45]]) [36 25 45]))\n  (is (= (candidate [[1 \"Sudeep\" 14] [2 \"Vandana\" 36] [3 \"Dawood\" 56]]) [14 36 56]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_273_substract_elements", "prompt": "(defn substract_elements\n  \"\tWrite a function that takes in two vectors and subtracts the elements of the first vector by the elements of the second vector with the same index.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate substract_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5] [2 5 18]) [8 -1 -13]))\n  (is (= (candidate [11 2 3] [24 45 16]) [-13 -43 -13]))\n  (is (= (candidate [7 18 9] [10 11 12]) [-3 7 -3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "(defn even_binomial_Coeff_Sum\n  \"\tWrite a cljthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_binomial_Coeff_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4) 8))\n  (is (= (candidate 6) 32))\n  (is (= (candidate 2) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_277_dict_filter", "prompt": "(defn dict_filter\n  \"\tWrite a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\"\n  [dict n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate dict_filter)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Kierra Gentry\" 165 \"Pierre Cox\" 190} 170) {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Pierre Cox\" 190}))\n  (is (= (candidate {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Kierra Gentry\" 165 \"Pierre Cox\" 190} 180) {\"Alden Cantrell\" 180 \"Pierre Cox\" 190}))\n  (is (= (candidate {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Kierra Gentry\" 165 \"Pierre Cox\" 190} 190) {\"Pierre Cox\" 190}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "(defn count_first_elements\n  \"\tWrite a function to find the number of elements that occurs before the list element in the given vector.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_first_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 [4 6] 10]) 3))\n  (is (= (candidate [2 9 [5 7] 11]) 2))\n  (is (= (candidate [11 15 5 8 [2 3] 8]) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "(defn is_num_decagonal\n  \"\tWrite a function to find the nth decagonal number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_num_decagonal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 27))\n  (is (= (candidate 7) 175))\n  (is (= (candidate 10) 370))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_280_sequential_search", "prompt": "(defn sequential_search\n  \"\tWrite a function that takes in a vector and element and returns a vector containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\"\n  [dlist item]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sequential_search)\n\n(deftest test-humaneval\n\n  (is (= (candidate [11 23 58 31 56 77 43 12 65 19] 31) [true 3]))\n  (is (= (candidate [12 32 45 62 35 47 44 61] 61) [true 7]))\n  (is (= (candidate [9 10 17 19 22 39 48 56] 48) [true 6]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_281_all_unique", "prompt": "(defn all_unique\n  \"\tWrite a cljthon function to check if the elements of a given list are unique or not.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_unique)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) true))\n  (is (= (candidate [1 2 1 2]) false))\n  (is (= (candidate [1 2 3 4 5]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_282_sub_list", "prompt": "(defn sub_list\n  \"\tWrite a function to subtract two lists element-wise.\"\n  [nums1 nums2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sub_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] [4 5 6]) [-3 -3 -3]))\n  (is (= (candidate [1 2] [3 4]) [-2 -2]))\n  (is (= (candidate [90 120] [50 70]) [40 50]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_283_validate", "prompt": "(defn validate\n  \"\tWrite a cljthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate validate)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1234) true))\n  (is (= (candidate 51241) false))\n  (is (= (candidate 321) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_284_check_element", "prompt": "(defn check_element\n  \"\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\"\n  [list element]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"green\" \"orange\" \"black\" \"white\"] \"blue\") false))\n  (is (= (candidate [1 2 3 4] 7) false))\n  (is (= (candidate [\"green\" \"green\" \"green\" \"green\"] \"green\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "(defn text_match_two_three\n  \"\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_two_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abbbba\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "(defn max_sub_array_sum_repeated\n  \"\tWrite a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\"\n  [a n k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sub_array_sum_repeated)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 -30 -1] 4 3) 30))\n  (is (= (candidate [-1 10 20] 3 2) 59))\n  (is (= (candidate [-1 -2 -3] 3 3) -1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_287_square_Sum", "prompt": "(defn square_Sum\n  \"\tWrite a cljthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 20))\n  (is (= (candidate 3) 56))\n  (is (= (candidate 4) 120))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_290_max_length", "prompt": "(defn max_length\n  \"\tWrite a function to find the list of maximum length in a list of lists.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[0] [1 3] [5 7] [9 11] [13 15 17]]) [3 [13 15 17]]))\n  (is (= (candidate [[1] [5 7] [10 12 14 15]]) [4 [10 12 14 15]]))\n  (is (= (candidate [[5] [15 20 25]]) [3 [15 20 25]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "(defn count_no_of_ways\n  \"\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\"\n  [n k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_no_of_ways)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 4) 16))\n  (is (= (candidate 3 2) 6))\n  (is (= (candidate 4 4) 228))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_292_find", "prompt": "(defn find\n  \"\tWrite a cljthon function to find quotient of two numbers (rounded down to the nearest integer).\"\n  [n m]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 3) 3))\n  (is (= (candidate 4 2) 2))\n  (is (= (candidate 20 5) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "(defn otherside_rightangle\n  \"\tWrite a function to find the third side of a right angled triangle.\"\n  [w h]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate otherside_rightangle)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7 8) 10.63014581273465))\n  (is (= (candidate 3 4) 5))\n  (is (= (candidate 7 15) 16.55294535724685))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_294_max_val", "prompt": "(defn max_val\n  \"\tWrite a function to find the maximum value in a given heterogeneous list.\"\n  [listval]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_val)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python\" 3 2 4 5 \"version\"]) 5))\n  (is (= (candidate [\"Python\" 15 20 25]) 25))\n  (is (= (candidate [\"Python\" 30 20 40 50 \"version\"]) 50))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_295_sum_div", "prompt": "(defn sum_div\n  \"\tWrite a function to return the sum of all divisors of a number.\"\n  [number]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_div)\n\n(deftest test-humaneval\n\n  (is (= (candidate 8) 7))\n  (is (= (candidate 12) 16))\n  (is (= (candidate 7) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "(defn get_Inv_Count\n  \"\tWrite a cljthon function to count inversions in a vector.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_Inv_Count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 20 6 4 5]) 5))\n  (is (= (candidate [1 2 1]) 1))\n  (is (= (candidate [1 2 5 6 1]) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_297_flatten_list", "prompt": "(defn flatten_list\n  \"\tWrite a function to flatten a given nested list structure.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate flatten_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 10 [20 30] 40 50 [60 70 80] [90 100 110 120]]) [0 10 20 30 40 50 60 70 80 90 100 110 120]))\n  (is (= (candidate [[10 20] [40] [30 56 25] [10 20] [33] [40]]) [10 20 40 30 56 25 10 20 33 40]))\n  (is (= (candidate [[1 2 3] [4 5 6] [10 11 12] [7 8 9]]) [1 2 3 4 5 6 10 11 12 7 8 9]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "(defn max_aggregate\n  \"\tWrite a function to calculate the maximum aggregate from the list of vectors.\"\n  [stdata]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_aggregate)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Juan Whelan\" 90] [\"Sabah Colley\" 88] [\"Peter Nichols\" 7] [\"Juan Whelan\" 122] [\"Sabah Colley\" 84]]) [\"Juan Whelan\" 212]))\n  (is (= (candidate [[\"Juan Whelan\" 50] [\"Sabah Colley\" 48] [\"Peter Nichols\" 37] [\"Juan Whelan\" 22] [\"Sabah Colley\" 14]]) [\"Juan Whelan\" 72]))\n  (is (= (candidate [[\"Juan Whelan\" 10] [\"Sabah Colley\" 20] [\"Peter Nichols\" 30] [\"Juan Whelan\" 40] [\"Sabah Colley\" 50]]) [\"Sabah Colley\" 70]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_304_find_Element", "prompt": "(defn find_Element\n  \"\tWrite a cljthon function to find element at a given index after number of rotations.\"\n  [arr ranges rotations index]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] [[0 2] [0 3]] 2 1) 3))\n  (is (= (candidate [1 2 3 4] [[0 1] [0 2]] 1 2) 3))\n  (is (= (candidate [1 2 3 4 5 6] [[0 1] [0 2]] 1 1) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_305_start_withp", "prompt": "(defn start_withp\n  \"\tWrite a function to return two words from a list of words starting with letter 'p'.\"\n  [words]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate start_withp)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python PHP\" \"Java JavaScript\" \"c c++\"]) [\"Python\" \"PHP\"]))\n  (is (= (candidate [\"Python Programming\" \"Java Programming\"]) [\"Python\" \"Programming\"]))\n  (is (= (candidate [\"Pqrst Pqr\" \"qrstuv\"]) [\"Pqrst\" \"Pqr\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "(defn max_sum_increasing_subseq\n  \"\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\"\n  [a n index k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sum_increasing_subseq)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 101 2 3 100 4 5] 7 4 6) 11))\n  (is (= (candidate [1 101 2 3 100 4 5] 7 2 5) 7))\n  (is (= (candidate [11 15 19 21 26 28 31] 7 2 4) 71))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_308_large_product", "prompt": "(defn large_product\n  \"\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\"\n  [nums1 nums2 N]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate large_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6] [3 6 8 9 10 6] 3) [60 54 50]))\n  (is (= (candidate [1 2 3 4 5 6] [3 6 8 9 10 6] 4) [60 54 50 48]))\n  (is (= (candidate [1 2 3 4 5 6] [3 6 8 9 10 6] 5) [60 54 50 48 45]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_309_maximum", "prompt": "(defn maximum\n  \"\tWrite a cljthon function to find the maximum of two numbers.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maximum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 10) 10))\n  (is (= (candidate -1 -2) -1))\n  (is (= (candidate 9 7) 9))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "(defn string_to_tuple\n  \"\tWrite a function to convert a given string to a list of characters.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_to_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python 3.0\") [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\" \"3\" \".\" \"0\"]))\n  (is (= (candidate \"item1\") [\"i\" \"t\" \"e\" \"m\" \"1\"]))\n  (is (= (candidate \"15.10\") [\"1\" \"5\" \".\" \"1\" \"0\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "(defn highest_Power_of_2\n  \"\tWrite a cljthon function to find the highest power of 2 that is less than or equal to n.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate highest_Power_of_2)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 8))\n  (is (= (candidate 19) 16))\n  (is (= (candidate 32) 32))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_389_find_lucas", "prompt": "(defn find_lucas\n  \"\tWrite a function to find the n'th lucas number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_lucas)\n\n(deftest test-humaneval\n\n  (is (= (candidate 9) 76))\n  (is (= (candidate 4) 7))\n  (is (= (candidate 3) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_390_add_string", "prompt": "(defn add_string\n  \"\tWrite a function to apply a given format string to all of the elements in a list.\"\n  [list_ string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4] \"temp{0}\") [\"temp1\" \"temp2\" \"temp3\" \"temp4\"]))\n  (is (= (candidate [\"a\" \"b\" \"c\" \"d\"] \"python{0}\") [\"pythona\" \"pythonb\" \"pythonc\" \"pythond\"]))\n  (is (= (candidate [5 6 7 8] \"string{0}\") [\"string5\" \"string6\" \"string7\" \"string8\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "(defn convert_list_dictionary\n  \"\tWrite a function to convert more than one list to nested map.\"\n  [l1 l2 l3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate convert_list_dictionary)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"S001\" \"S002\" \"S003\" \"S004\"] [\"Adina Park\" \"Leyton Marsh\" \"Duncan Boyle\" \"Saim Richards\"] [85 98 89 92]) [{\"S001\" {\"Adina Park\" 85}} {\"S002\" {\"Leyton Marsh\" 98}} {\"S003\" {\"Duncan Boyle\" 89}} {\"S004\" {\"Saim Richards\" 92}}]))\n  (is (= (candidate [\"abc\" \"def\" \"ghi\" \"jkl\"] [\"python\" \"program\" \"language\" \"programs\"] [100 200 300 400]) [{\"abc\" {\"python\" 100}} {\"def\" {\"program\" 200}} {\"ghi\" {\"language\" 300}} {\"jkl\" {\"programs\" 400}}]))\n  (is (= (candidate [\"A1\" \"A2\" \"A3\" \"A4\"] [\"java\" \"C\" \"C++\" \"DBMS\"] [10 20 30 40]) [{\"A1\" {\"java\" 10}} {\"A2\" {\"C\" 20}} {\"A3\" {\"C++\" 30}} {\"A4\" {\"DBMS\" 40}}]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "(defn get_max_sum\n  \"\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_max_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 60) 106))\n  (is (= (candidate 10) 12))\n  (is (= (candidate 2) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_393_max_length_list", "prompt": "(defn max_length_list\n  \"\tWrite a function to find the list with maximum length.\"\n  [input_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_length_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[0] [1 3] [5 7] [9 11] [13 15 17]]) [3 [13 15 17]]))\n  (is (= (candidate [[1 2 3 4 5] [1 2 3 4] [1 2 3] [1 2] [1]]) [5 [1 2 3 4 5]]))\n  (is (= (candidate [[3 4 5] [6 7 8 9] [10 11 12]]) [4 [6 7 8 9]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_394_check_distinct", "prompt": "(defn check_distinct\n  \"\tWrite a function to check if given list contains no duplicates.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_distinct)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 4 5 6 1 4]) false))\n  (is (= (candidate [1 4 5 6]) true))\n  (is (= (candidate [2 3 4 5 6]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "(defn first_non_repeating_character\n  \"\tWrite a cljthon function to find the first non-repeated character in a given string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_non_repeating_character)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcabc\") nil))\n  (is (= (candidate \"abc\") \"a\"))\n  (is (= (candidate \"ababc\") \"c\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_396_check_char", "prompt": "(defn check_char\n  \"\tWrite a function to check whether the given string starts and ends with the same character or not.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abba\") \"Valid\"))\n  (is (= (candidate \"a\") \"Valid\"))\n  (is (= (candidate \"abcd\") \"Invalid\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_397_median_numbers", "prompt": "(defn median_numbers\n  \"\tWrite a function to find the median of three numbers.\"\n  [a b c]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate median_numbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate 25 55 65) 55.0))\n  (is (= (candidate 20 10 30) 20.0))\n  (is (= (candidate 15 45 75) 45.0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "(defn sum_of_digits\n  \"\tWrite a function to compute the sum of digits of each number of a given list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_of_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 2 56]) 14))\n  (is (= (candidate [[10 20 4 5 \"b\" 70 \"a\"]]) 19))\n  (is (= (candidate [10 20 -4 5 -70]) 19))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "(defn bitwise_xor\n  \"\tWrite a function to perform the mathematical bitwise xor operation across the given vectors.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bitwise_xor)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 6 9] [5 2 3 3]) [15 6 5 10]))\n  (is (= (candidate [11 5 7 10] [6 3 4 4]) [13 6 3 14]))\n  (is (= (candidate [12 6 8 11] [7 4 5 6]) [11 2 13 13]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_400_extract_freq", "prompt": "(defn extract_freq\n  \"\tWrite a function to extract the number of unique vectors in the given list.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_freq)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[3 4] [1 2] [4 3] [5 6]]) 3))\n  (is (= (candidate [[4 15] [2 3] [5 4] [6 7]]) 4))\n  (is (= (candidate [[5 16] [2 3] [6 5] [6 9]]) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "(defn add_nested_tuples\n  \"\tWrite a function to perform index wise addition of list elements in the given two nested lists.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_nested_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [4 5] [2 9] [1 10]] [[6 7] [3 9] [1 1] [7 3]]) [[7 10] [7 14] [3 10] [8 13]]))\n  (is (= (candidate [[2 4] [5 6] [3 10] [2 11]] [[7 8] [4 10] [2 2] [8 4]]) [[9 12] [9 16] [5 12] [10 15]]))\n  (is (= (candidate [[3 5] [6 7] [4 11] [3 12]] [[8 9] [5 11] [3 3] [9 5]]) [[11 14] [11 18] [7 14] [12 17]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_404_minimum", "prompt": "(defn minimum\n  \"\tWrite a cljthon function to find the minimum of two numbers.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate minimum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 2) 1))\n  (is (= (candidate -5 -4) -5))\n  (is (= (candidate 0 0) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "(defn check_tuplex\n  \"\tWrite a function to check whether an element exists within a vector.\"\n  [tuplex tuple1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_tuplex)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\"] \"r\") true))\n  (is (= (candidate [\"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\"] \"5\") false))\n  (is (= (candidate [\"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\"] 3) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_406_find_Parity", "prompt": "(defn find_Parity\n  \"\tWrite a cljthon function to find whether the parity of a given number is odd.\"\n  [x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Parity)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12) false))\n  (is (= (candidate 7) true))\n  (is (= (candidate 10) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "(defn rearrange_bigger\n  \"\tWrite a function to create the next bigger number by rearranging the digits of a given number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rearrange_bigger)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12) 21))\n  (is (= (candidate 10) false))\n  (is (= (candidate 102) 120))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "(defn k_smallest_pairs\n  \"\tWrite a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\"\n  [nums1 nums2 k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate k_smallest_pairs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 7] [2 4 6] 2) [[1 2] [1 4]]))\n  (is (= (candidate [1 3 7] [2 4 6] 1) [[1 2]]))\n  (is (= (candidate [1 3 7] [2 4 6] 7) [[1 2] [1 4] [3 2] [1 6] [3 4] [3 6] [7 2]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "(defn min_product_tuple\n  \"\tWrite a function to find the minimum product from the pairs of vectors within a given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_product_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[2 7] [2 6] [1 8] [4 9]]) 8))\n  (is (= (candidate [[10 20] [15 2] [5 10]]) 30))\n  (is (= (candidate [[11 44] [10 15] [20 5] [12 9]]) 100))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_410_min_val", "prompt": "(defn min_val\n  \"\tWrite a function to find the minimum value in a given heterogeneous list.\"\n  [listval]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_val)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python\" 3 2 4 5 \"version\"]) 2))\n  (is (= (candidate [\"Python\" 15 20 25]) 15))\n  (is (= (candidate [\"Python\" 30 20 40 50 \"version\"]) 20))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "(defn snake_to_camel\n  \"\tWrite a function to convert the given snake case string to camel case string.\"\n  [word]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate snake_to_camel)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"android_tv\") \"AndroidTv\"))\n  (is (= (candidate \"google_pixel\") \"GooglePixel\"))\n  (is (= (candidate \"apple_watch\") \"AppleWatch\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_412_remove_odd", "prompt": "(defn remove_odd\n  \"\tWrite a cljthon function to remove odd numbers from a given list.\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) [2]))\n  (is (= (candidate [2 4 6]) [2 4 6]))\n  (is (= (candidate [10 20 3]) [10 20]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "(defn extract_nth_element\n  \"\tWrite a function to extract the nth element from a given list of vectors.\"\n  [list1 n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_nth_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Greyson Fulton\" 98 99] [\"Brady Kent\" 97 96] [\"Wyatt Knott\" 91 94] [\"Beau Turnbull\" 94 98]] 0) [\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"]))\n  (is (= (candidate [[\"Greyson Fulton\" 98 99] [\"Brady Kent\" 97 96] [\"Wyatt Knott\" 91 94] [\"Beau Turnbull\" 94 98]] 2) [99 96 94 98]))\n  (is (= (candidate [[\"Greyson Fulton\" 98 99] [\"Brady Kent\" 97 96] [\"Wyatt Knott\" 91 94] [\"Beau Turnbull\" 94 98]] 1) [98 97 91 94]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_414_overlapping", "prompt": "(defn overlapping\n  \"\tWrite a cljthon function to check whether any value in a sequence exists in a sequence or not.\"\n  [list1 list2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate overlapping)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] [6 7 8 9]) false))\n  (is (= (candidate [1 2 3] [4 5 6]) false))\n  (is (= (candidate [1 4 5] [1 4 5]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_415_max_Product", "prompt": "(defn max_Product\n  \"\tWrite a cljthon function to find a pair with highest product from a given vector of integers.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_Product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 7 0 8 4]) [7 8]))\n  (is (= (candidate [0 -1 -2 -4 5 0 -6]) [-4 -6]))\n  (is (= (candidate [1 2 3]) [2 3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_417_group_tuples", "prompt": "(defn group_tuples\n  \"\tWrite a function to find common first element in given list of lists.\"\n  [Input]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate group_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"x\" \"y\"] [\"x\" \"z\"] [\"w\" \"t\"]]) [[\"x\" \"y\" \"z\"] [\"w\" \"t\"]]))\n  (is (= (candidate [[\"a\" \"b\"] [\"a\" \"c\"] [\"d\" \"e\"]]) [[\"a\" \"b\" \"c\"] [\"d\" \"e\"]]))\n  (is (= (candidate [[\"f\" \"g\"] [\"f\" \"g\"] [\"h\" \"i\"]]) [[\"f\" \"g\" \"g\"] [\"h\" \"i\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_418_Find_Max", "prompt": "(defn Find_Max\n  \"\tWrite a cljthon function to find the element of a list having maximum length.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Max)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"A\"] [\"A\" \"B\"] [\"A\" \"B\" \"C\"]]) [\"A\" \"B\" \"C\"]))\n  (is (= (candidate [[1] [1 2] [1 2 3]]) [1 2 3]))\n  (is (= (candidate [[1 1] [1 2 3] [1 5 6 1]]) [1 5 6 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "(defn round_and_sum\n  \"\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate round_and_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5]) 243))\n  (is (= (candidate [5 2 9 24.3 29]) 345))\n  (is (= (candidate [25.0 56.7 89.2]) 513))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "(defn cube_Sum\n  \"\tWrite a cljthon function to find the cube sum of first n even natural numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cube_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 72))\n  (is (= (candidate 3) 288))\n  (is (= (candidate 4) 800))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "(defn concatenate_tuple\n  \"\tWrite a function to concatenate each element of vector by the delimiter.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate concatenate_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"ID\" \"is\" 4 \"UTS\"]) \"ID-is-4-UTS\"))\n  (is (= (candidate [\"QWE\" \"is\" 4 \"RTY\"]) \"QWE-is-4-RTY\"))\n  (is (= (candidate [\"ZEN\" \"is\" 4 \"OP\"]) \"ZEN-is-4-OP\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "(defn find_Average_Of_Cube\n  \"\tWrite a cljthon function to find the average of cubes of first n natural numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Average_Of_Cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 4.5))\n  (is (= (candidate 3) 12))\n  (is (= (candidate 1) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_424_extract_rear", "prompt": "(defn extract_rear\n  \"\tWrite a function to extract only the rear index element of each string in the given vector.\"\n  [test_tuple]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_rear)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Mers\" \"for\" \"Vers\"]) [\"s\" \"r\" \"s\"]))\n  (is (= (candidate [\"Avenge\" \"for\" \"People\"]) [\"e\" \"r\" \"e\"]))\n  (is (= (candidate [\"Gotta\" \"get\" \"go\"]) [\"a\" \"t\" \"o\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "(defn count_element_in_list\n  \"\tWrite a function to count the number of sublists containing a particular element.\"\n  [list1 x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_element_in_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [5 7] [1 11] [1 15 7]] 1) 3))\n  (is (= (candidate [[\"A\" \"B\"] [\"A\" \"C\"] [\"A\" \"D\" \"E\"] [\"B\" \"C\" \"D\"]] \"A\") 3))\n  (is (= (candidate [[\"A\" \"B\"] [\"A\" \"C\"] [\"A\" \"D\" \"E\"] [\"B\" \"C\" \"D\"]] \"E\") 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "(defn filter_oddnumbers\n  \"\tWrite a function to filter odd numbers.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_oddnumbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [1 3 5 7 9]))\n  (is (= (candidate [10 20 45 67 84 93]) [45 67 93]))\n  (is (= (candidate [5 7 9 8 6 4 3]) [5 7 9 3]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_427_change_date_format", "prompt": "(defn change_date_format\n  \"\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\"\n  [dt]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate change_date_format)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"2026-01-02\") \"02-01-2026\"))\n  (is (= (candidate \"2020-11-13\") \"13-11-2020\"))\n  (is (= (candidate \"2021-04-26\") \"26-04-2021\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_428_shell_sort", "prompt": "(defn shell_sort\n  \"\tWrite a function to sort the given vector by using shell sort.\"\n  [my_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate shell_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 23 4 5 3 2 12 81 56 95]) [2 3 4 5 12 12 23 56 81 95]))\n  (is (= (candidate [24 22 39 34 87 73 68]) [22 24 34 39 68 73 87]))\n  (is (= (candidate [32 30 16 96 82 83 74]) [16 30 32 74 82 83 96]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_429_and_tuples", "prompt": "(defn and_tuples\n  \"\tWrite a function to extract the elementwise and vectors from the given two vectors.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate and_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 6 9] [5 2 3 3]) [0 0 2 1]))\n  (is (= (candidate [1 2 3 4] [5 6 7 8]) [1 2 3 0]))\n  (is (= (candidate [8 9 11 12] [7 13 14 17]) [0 9 10 0]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "(defn parabola_directrix\n  \"\tWrite a function to find the directrix of a parabola.\"\n  [a b c]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate parabola_directrix)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 3 2) -198))\n  (is (= (candidate 9 8 4) -2336))\n  (is (= (candidate 2 4 6) -130))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_431_common_element", "prompt": "(defn common_element\n  \"\tWrite a function that takes two lists and returns true if they have at least one common element.\"\n  [list1 list2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate common_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] [5 6 7 8 9]) true))\n  (is (= (candidate [1 2 3 4 5] [6 7 8 9]) nil))\n  (is (= (candidate [\"a\" \"b\" \"c\"] [\"d\" \"b\" \"e\"]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "(defn median_trapezium\n  \"\tWrite a function to find the median length of a trapezium.\"\n  [base1 base2 height]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate median_trapezium)\n\n(deftest test-humaneval\n\n  (is (= (candidate 15 25 35) 20))\n  (is (= (candidate 10 20 30) 15))\n  (is (= (candidate 6 9 4) 7.5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_433_check_greater", "prompt": "(defn check_greater\n  \"\tWrite a function to check whether the entered number is greater than the elements of the given vector.\"\n  [arr number]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_greater)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] 4) false))\n  (is (= (candidate [2 3 4 5 6] 8) true))\n  (is (= (candidate [9 7 4 8 6 1] 11) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_434_text_match_one", "prompt": "(defn text_match_one\n  \"\tWrite a function that matches a string that has an a followed by one or more b's.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_one)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abba\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_435_last_Digit", "prompt": "(defn last_Digit\n  \"\tWrite a cljthon function to find the last digit of a given number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate last_Digit)\n\n(deftest test-humaneval\n\n  (is (= (candidate 123) 3))\n  (is (= (candidate 25) 5))\n  (is (= (candidate 30) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_436_neg_nos", "prompt": "(defn neg_nos\n  \"\tWrite a cljthon function to return the negative numbers in a list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate neg_nos)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-1 4 5 -6]) [-1 -6]))\n  (is (= (candidate [-1 -2 3 4]) [-1 -2]))\n  (is (= (candidate [-7 -6 8 9]) [-7 -6]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_437_remove_odd", "prompt": "(defn remove_odd\n  \"\tWrite a function to remove odd characters in a string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") \"yhn\"))\n  (is (= (candidate \"program\") \"rga\"))\n  (is (= (candidate \"language\") \"agae\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "(defn count_bidirectional\n  \"\tWrite a function to count bidirectional vector pairs.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_bidirectional)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[5 6] [1 2] [6 5] [9 1] [6 5] [2 1]]) 3))\n  (is (= (candidate [[5 6] [1 3] [6 5] [9 1] [6 5] [2 1]]) 2))\n  (is (= (candidate [[5 6] [1 2] [6 5] [9 2] [6 5] [2 1]]) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "(defn multiple_to_single\n  \"\tWrite a function to join a list of multiple integers into a single integer.\"\n  [L]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiple_to_single)\n\n(deftest test-humaneval\n\n  (is (= (candidate [11 33 50]) 113350))\n  (is (= (candidate [-1 2 3 4 5 6]) -123456))\n  (is (= (candidate [10 15 20 25]) 10152025))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "(defn find_adverb_position\n  \"\tWrite a function to find the first adverb and their positions in a given sentence.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_adverb_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"clearly!! we can see the sky\") [0 7 \"clearly\"]))\n  (is (= (candidate \"seriously!! there are many roses\") [0 9 \"seriously\"]))\n  (is (= (candidate \"unfortunately!! sita is going to home\") [0 13 \"unfortunately\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "(defn surfacearea_cube\n  \"\tWrite a function to find the surface area of a cube of a given size.\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate surfacearea_cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 150))\n  (is (= (candidate 3) 54))\n  (is (= (candidate 10) 600))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_442_positive_count", "prompt": "(defn positive_count\n  \"\tWrite a function to find the ration of positive numbers in a vector of integers.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate positive_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 1 2 -1 -5 6 0 -3 -2 3 4 6 8]) 0.54))\n  (is (= (candidate [2 1 2 -1 -5 6 4 -3 -2 3 4 6 8]) 0.69))\n  (is (= (candidate [2 4 -6 -9 11 -12 14 -5 17]) 0.56))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_443_largest_neg", "prompt": "(defn largest_neg\n  \"\tWrite a cljthon function to find the largest negative number from the given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate largest_neg)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 -4 -6]) -6))\n  (is (= (candidate [1 2 3 -8 -9]) -9))\n  (is (= (candidate [1 2 3 4 -1]) -1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "(defn trim_tuple\n  \"\tWrite a function to trim each list by k in the given lists.\"\n  [test_list K]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate trim_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[5 3 2 1 4] [3 4 9 2 1] [9 1 2 3 5] [4 8 2 1 7]] 2) [[2] [9] [2] [2]]))\n  (is (= (candidate [[5 3 2 1 4] [3 4 9 2 1] [9 1 2 3 5] [4 8 2 1 7]] 1) [[3 2 1] [4 9 2] [1 2 3] [8 2 1]]))\n  (is (= (candidate [[7 8 4 9] [11 8 12 4] [4 1 7 8] [3 6 9 7]] 1) [[8 4] [8 12] [1 7] [6 9]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "(defn index_multiplication\n  \"\tWrite a function to perform index wise multiplication of list elements in the given two lists.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate index_multiplication)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [4 5] [2 9] [1 10]] [[6 7] [3 9] [1 1] [7 3]]) [[6 21] [12 45] [2 9] [7 30]]))\n  (is (= (candidate [[2 4] [5 6] [3 10] [2 11]] [[7 8] [4 10] [2 2] [8 4]]) [[14 32] [20 60] [6 20] [16 44]]))\n  (is (= (candidate [[3 5] [6 7] [4 11] [3 12]] [[8 9] [5 11] [3 3] [9 5]]) [[24 45] [30 77] [12 33] [27 60]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "(defn count_Occurrence\n  \"\tWrite a cljthon function to count the occurence of all elements of list in a vector.\"\n  [tup lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Occurrence)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"a\" \"a\" \"c\" \"b\" \"d\"] [\"a\" \"b\"]) 3))\n  (is (= (candidate [1 2 3 1 4 6 7 1 4] [1 4 7]) 6))\n  (is (= (candidate [1 2 3 4 5 6] [1 2]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_447_cube_nums", "prompt": "(defn cube_nums\n  \"\tWrite a function to find cubes of individual elements in a list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cube_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [1 8 27 64 125 216 343 512 729 1000]))\n  (is (= (candidate [10 20 30]) [1000 8000 27000]))\n  (is (= (candidate [12 15]) [1728 3375]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_448_cal_sum", "prompt": "(defn cal_sum\n  \"\tWrite a function to calculate the sum of perrin numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cal_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 9) 49))\n  (is (= (candidate 10) 66))\n  (is (= (candidate 11) 88))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_450_extract_string", "prompt": "(defn extract_string\n  \"\tWrite a function to extract specified size of strings from a given list of string values.\"\n  [str l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python\" \"list\" \"exercises\" \"practice\" \"solution\"] 8) [\"practice\" \"solution\"]))\n  (is (= (candidate [\"Python\" \"list\" \"exercises\" \"practice\" \"solution\"] 6) [\"Python\"]))\n  (is (= (candidate [\"Python\" \"list\" \"exercises\" \"practice\" \"solution\"] 9) [\"exercises\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "(defn remove_whitespaces\n  \"\tWrite a function to remove all whitespaces from the given string.\"\n  [text1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_whitespaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \" Google    Flutter \") \"GoogleFlutter\"))\n  (is (= (candidate \" Google    Dart \") \"GoogleDart\"))\n  (is (= (candidate \" iOS    Swift \") \"iOSSwift\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_452_loss_amount", "prompt": "(defn loss_amount\n  \"\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\"\n  [actual_cost sale_amount]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate loss_amount)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1500 1200) 0))\n  (is (= (candidate 100 200) 100))\n  (is (= (candidate 2000 5000) 3000))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "(defn sumofFactors\n  \"\tWrite a cljthon function to find the sum of even factors of a number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sumofFactors)\n\n(deftest test-humaneval\n\n  (is (= (candidate 18) 26))\n  (is (= (candidate 30) 48))\n  (is (= (candidate 6) 8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "(defn text_match_wordz\n  \"\tWrite a function that matches a word containing 'z'.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_wordz)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"pythonz.\") true))\n  (is (= (candidate \"xyz.\") true))\n  (is (= (candidate \"  lang  .\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "(defn check_monthnumb_number\n  \"\tWrite a function to check whether the given month number contains 31 days or not.\"\n  [monthnum2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_monthnumb_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) true))\n  (is (= (candidate 2) false))\n  (is (= (candidate 6) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "(defn reverse_string_list\n  \"\tWrite a function to reverse each string in a given list of string values.\"\n  [stringlist]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_string_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\" \"White\" \"Black\"]) [\"deR\" \"neerG\" \"eulB\" \"etihW\" \"kcalB\"]))\n  (is (= (candidate [\"john\" \"amal\" \"joel\" \"george\"]) [\"nhoj\" \"lama\" \"leoj\" \"egroeg\"]))\n  (is (= (candidate [\"jack\" \"john\" \"mary\"]) [\"kcaj\" \"nhoj\" \"yram\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_457_Find_Min", "prompt": "(defn Find_Min\n  \"\tWrite a cljthon function to find the sublist having minimum length.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Min)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1] [1 2] [1 2 3]]) [1]))\n  (is (= (candidate [[1 1] [1 1 1] [1 2 7 8]]) [1 1]))\n  (is (= (candidate [[\"x\"] [\"x\" \"y\"] [\"x\" \"y\" \"z\"]]) [\"x\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "(defn rectangle_area\n  \"\tWrite a function to find the area of a rectangle.\"\n  [l b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rectangle_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20) 200))\n  (is (= (candidate 10 5) 50))\n  (is (= (candidate 4 2) 8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "(defn remove_uppercase\n  \"\tWrite a function to remove uppercase substrings from a given string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_uppercase)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"cAstyoUrFavoRitETVshoWs\") \"cstyoravoitshos\"))\n  (is (= (candidate \"wAtchTheinTernEtrAdIo\") \"wtchheinerntrdo\"))\n  (is (= (candidate \"VoicESeaRchAndreComMendaTionS\") \"oiceachndreomendaion\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_460_Extract", "prompt": "(defn Extract\n  \"\tWrite a cljthon function to get the first element of each sublist.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Extract)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2] [3 4 5] [6 7 8 9]]) [1 3 6]))\n  (is (= (candidate [[1 2 3] [4 5]]) [1 4]))\n  (is (= (candidate [[9 8 1] [1 2]]) [9 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "(defn upper_ctr\n  \"\tWrite a cljthon function to count the upper case characters in a given string.\"\n  [str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate upper_ctr)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"PYthon\") 1))\n  (is (= (candidate \"BigData\") 1))\n  (is (= (candidate \"program\") 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_462_combinations_list", "prompt": "(defn combinations_list\n  \"\tWrite a function to find all possible combinations of the elements of a given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate combinations_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"orange\" \"red\" \"green\" \"blue\"]) [[] [\"orange\"] [\"red\"] [\"red\" \"orange\"] [\"green\"] [\"green\" \"orange\"] [\"green\" \"red\"] [\"green\" \"red\" \"orange\"] [\"blue\"] [\"blue\" \"orange\"] [\"blue\" \"red\"] [\"blue\" \"red\" \"orange\"] [\"blue\" \"green\"] [\"blue\" \"green\" \"orange\"] [\"blue\" \"green\" \"red\"] [\"blue\" \"green\" \"red\" \"orange\"]]))\n  (is (= (candidate [\"red\" \"green\" \"blue\" \"white\" \"black\" \"orange\"]) [[] [\"red\"] [\"green\"] [\"green\" \"red\"] [\"blue\"] [\"blue\" \"red\"] [\"blue\" \"green\"] [\"blue\" \"green\" \"red\"] [\"white\"] [\"white\" \"red\"] [\"white\" \"green\"] [\"white\" \"green\" \"red\"] [\"white\" \"blue\"] [\"white\" \"blue\" \"red\"] [\"white\" \"blue\" \"green\"] [\"white\" \"blue\" \"green\" \"red\"] [\"black\"] [\"black\" \"red\"] [\"black\" \"green\"] [\"black\" \"green\" \"red\"] [\"black\" \"blue\"] [\"black\" \"blue\" \"red\"] [\"black\" \"blue\" \"green\"] [\"black\" \"blue\" \"green\" \"red\"] [\"black\" \"white\"] [\"black\" \"white\" \"red\"] [\"black\" \"white\" \"green\"] [\"black\" \"white\" \"green\" \"red\"] [\"black\" \"white\" \"blue\"] [\"black\" \"white\" \"blue\" \"red\"] [\"black\" \"white\" \"blue\" \"green\"] [\"black\" \"white\" \"blue\" \"green\" \"red\"] [\"orange\"] [\"orange\" \"red\"] [\"orange\" \"green\"] [\"orange\" \"green\" \"red\"] [\"orange\" \"blue\"] [\"orange\" \"blue\" \"red\"] [\"orange\" \"blue\" \"green\"] [\"orange\" \"blue\" \"green\" \"red\"] [\"orange\" \"white\"] [\"orange\" \"white\" \"red\"] [\"orange\" \"white\" \"green\"] [\"orange\" \"white\" \"green\" \"red\"] [\"orange\" \"white\" \"blue\"] [\"orange\" \"white\" \"blue\" \"red\"] [\"orange\" \"white\" \"blue\" \"green\"] [\"orange\" \"white\" \"blue\" \"green\" \"red\"] [\"orange\" \"black\"] [\"orange\" \"black\" \"red\"] [\"orange\" \"black\" \"green\"] [\"orange\" \"black\" \"green\" \"red\"] [\"orange\" \"black\" \"blue\"] [\"orange\" \"black\" \"blue\" \"red\"] [\"orange\" \"black\" \"blue\" \"green\"] [\"orange\" \"black\" \"blue\" \"green\" \"red\"] [\"orange\" \"black\" \"white\"] [\"orange\" \"black\" \"white\" \"red\"] [\"orange\" \"black\" \"white\" \"green\"] [\"orange\" \"black\" \"white\" \"green\" \"red\"] [\"orange\" \"black\" \"white\" \"blue\"] [\"orange\" \"black\" \"white\" \"blue\" \"red\"] [\"orange\" \"black\" \"white\" \"blue\" \"green\"] [\"orange\" \"black\" \"white\" \"blue\" \"green\" \"red\"]]))\n  (is (= (candidate [\"red\" \"green\" \"black\" \"orange\"]) [[] [\"red\"] [\"green\"] [\"green\" \"red\"] [\"black\"] [\"black\" \"red\"] [\"black\" \"green\"] [\"black\" \"green\" \"red\"] [\"orange\"] [\"orange\" \"red\"] [\"orange\" \"green\"] [\"orange\" \"green\" \"red\"] [\"orange\" \"black\"] [\"orange\" \"black\" \"red\"] [\"orange\" \"black\" \"green\"] [\"orange\" \"black\" \"green\" \"red\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "(defn max_subarray_product\n  \"\tWrite a function to find the maximum product subvector of the given vector.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_subarray_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 -2 -3 0 7 -8 -2]) 112))\n  (is (= (candidate [6 -3 -10 0 2]) 180))\n  (is (= (candidate [-2 -40 0 -2 -3]) 80))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_464_check_value", "prompt": "(defn check_value\n  \"\tWrite a function to check if all values are same in a map.\"\n  [dict n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_value)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Cierra Vega\" 12 \"Alden Cantrell\" 12 \"Kierra Gentry\" 12 \"Pierre Cox\" 12} 10) false))\n  (is (= (candidate {\"Cierra Vega\" 12 \"Alden Cantrell\" 12 \"Kierra Gentry\" 12 \"Pierre Cox\" 12} 12) true))\n  (is (= (candidate {\"Cierra Vega\" 12 \"Alden Cantrell\" 12 \"Kierra Gentry\" 12 \"Pierre Cox\" 12} 5) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_465_drop_empty", "prompt": "(defn drop_empty\n  \"\tWrite a function to drop empty items from a given map.\"\n  [dict1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate drop_empty)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"c1\" \"Red\" \"c2\" \"Green\" \"c3\" nil}) {\"c1\" \"Red\" \"c2\" \"Green\"}))\n  (is (= (candidate {\"c1\" \"Red\" \"c2\" nil \"c3\" nil}) {\"c1\" \"Red\"}))\n  (is (= (candidate {\"c1\" nil \"c2\" \"Green\" \"c3\" nil}) {\"c2\" \"Green\"}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_468_max_product", "prompt": "(defn max_product\n  \"\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 100 4 5 150 6]) 3000))\n  (is (= (candidate [4 42 55 68 80]) 50265600))\n  (is (= (candidate [10 22 9 33 21 50 41 60]) 2460))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "(defn add_pairwise\n  \"\tWrite a function to find the pairwise addition of the neighboring elements of the given vector.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_pairwise)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 8 10]) [6 12 15 18]))\n  (is (= (candidate [2 6 8 9 11]) [8 14 17 20]))\n  (is (= (candidate [3 7 9 10 12]) [10 16 19 22]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_471_find_remainder", "prompt": "(defn find_remainder\n  \"\tWrite a cljthon function to find the product of the vector multiplication modulo n.\"\n  [arr n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_remainder)\n\n(deftest test-humaneval\n\n  (is (= (candidate [100 10 5 25 35 14] 11) 9))\n  (is (= (candidate [1 1 1] 1) 0))\n  (is (= (candidate [1 2 1] 2) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "(defn check_Consecutive\n  \"\tWrite a cljthon function to check whether the given list contains consecutive numbers or not.\"\n  [l]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_Consecutive)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) true))\n  (is (= (candidate [1 2 3 5 6]) false))\n  (is (= (candidate [1 2 1]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_474_replace_char", "prompt": "(defn replace_char\n  \"\tWrite a function to replace characters in a string.\"\n  [str1 ch newch]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"polygon\" \"y\" \"l\") \"pollgon\"))\n  (is (= (candidate \"character\" \"c\" \"a\") \"aharaater\"))\n  (is (= (candidate \"python\" \"l\" \"a\") \"python\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_475_sort_counter", "prompt": "(defn sort_counter\n  \"\tWrite a function to sort a map by value.\"\n  [dict1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_counter)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Math\" 81 \"Physics\" 83 \"Chemistry\" 87}) [[\"Chemistry\" 87] [\"Physics\" 83] [\"Math\" 81]]))\n  (is (= (candidate {\"Math\" 400 \"Physics\" 300 \"Chemistry\" 250}) [[\"Math\" 400] [\"Physics\" 300] [\"Chemistry\" 250]]))\n  (is (= (candidate {\"Math\" 900 \"Physics\" 1000 \"Chemistry\" 1250}) [[\"Chemistry\" 1250] [\"Physics\" 1000] [\"Math\" 900]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_476_big_sum", "prompt": "(defn big_sum\n  \"\tWrite a cljthon function to find the sum of the largest and smallest value in a given vector.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate big_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 4))\n  (is (= (candidate [-1 2 3 4]) 3))\n  (is (= (candidate [2 3 6]) 8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_477_is_lower", "prompt": "(defn is_lower\n  \"\tWrite a cljthon function to convert the given string to lower case.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_lower)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"InValid\") \"invalid\"))\n  (is (= (candidate \"TruE\") \"true\"))\n  (is (= (candidate \"SenTenCE\") \"sentence\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "(defn remove_lowercase\n  \"\tWrite a function to remove lowercase substrings from a given string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_lowercase)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"PYTHon\") \"PYTH\"))\n  (is (= (candidate \"FInD\") \"FID\"))\n  (is (= (candidate \"STRinG\") \"STRG\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_479_first_Digit", "prompt": "(defn first_Digit\n  \"\tWrite a cljthon function to find the first digit of a given number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_Digit)\n\n(deftest test-humaneval\n\n  (is (= (candidate 123) 1))\n  (is (= (candidate 456) 4))\n  (is (= (candidate 12) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_554_Split", "prompt": "(defn Split\n  \"\tWrite a cljthon function which takes a list of integers and only returns the odd ones.\"\n  [list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Split)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6]) [1 3 5]))\n  (is (= (candidate [10 11 12 13]) [11 13]))\n  (is (= (candidate [7 8 9 1]) [7 9 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_555_difference", "prompt": "(defn difference\n  \"\tWrite a cljthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate difference)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 30))\n  (is (= (candidate 5) 210))\n  (is (= (candidate 2) 6))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "(defn find_Odd_Pair\n  \"\tWrite a cljthon function to count the number of pairs whose xor value is odd.\"\n  [A N]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Odd_Pair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 4 7 2 1] 5) 6))\n  (is (= (candidate [7 2 8 1 0 5 11] 7) 12))\n  (is (= (candidate [1 2 3] 3) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_557_toggle_string", "prompt": "(defn toggle_string\n  \"\tWrite a function to toggle the case of all characters in a string.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate toggle_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python\") \"pYTHON\"))\n  (is (= (candidate \"Pangram\") \"pANGRAM\"))\n  (is (= (candidate \"LIttLE\") \"liTTle\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "(defn digit_distance_nums\n  \"\tWrite a cljthon function to find the sum of the per-digit difference between two integers.\"\n  [n1 n2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate digit_distance_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 2) 1))\n  (is (= (candidate 23 56) 6))\n  (is (= (candidate 123 256) 7))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "(defn max_sub_array_sum\n  \"\tWrite a function to find the sum of the largest contiguous sublist in the given list.\"\n  [a size]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sub_array_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-2 -3 4 -1 -2 1 5 -3] 8) 7))\n  (is (= (candidate [-3 -4 5 -2 -3 2 6 -4] 8) 8))\n  (is (= (candidate [-4 -5 6 -3 -4 3 7 -5] 8) 10))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_560_union_elements", "prompt": "(defn union_elements\n  \"\tWrite a function to find the union of the elements of two given lists and output them in sorted order.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate union_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4 5 6] [5 7 4 10]) [3 4 5 6 7 10]))\n  (is (= (candidate [1 2 3 4] [3 4 5 6]) [1 2 3 4 5 6]))\n  (is (= (candidate [11 12 13 14] [13 15 16 17]) [11 12 13 14 15 16 17]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "(defn Find_Max_Length\n  \"\tWrite a cljthon function to find the length of the longest sublists.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Max_Length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1] [1 4] [5 6 7 8]]) 4))\n  (is (= (candidate [[0 1] [2 2] [3 2 1]]) 3))\n  (is (= (candidate [[7] [22 23] [13 14 15] [10 20 30 40 50]]) 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_563_extract_values", "prompt": "(defn extract_values\n  \"\tWrite a function to extract values between quotation marks from a string.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_values)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\"Python\", \"PHP\", \"Java\"\") [\"Python\" \"PHP\" \"Java\"]))\n  (is (= (candidate \"\"python\",\"program\",\"language\"\") [\"python\" \"program\" \"language\"]))\n  (is (= (candidate \"\"red\",\"blue\",\"green\",\"yellow\"\") [\"red\" \"blue\" \"green\" \"yellow\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "(defn count_Pairs\n  \"\tWrite a cljthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\"\n  [arr n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Pairs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 1] 3) 2))\n  (is (= (candidate [1 1 1 1] 4) 0))\n  (is (= (candidate [1 2 3 4 5] 5) 10))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_565_split", "prompt": "(defn split\n  \"\tWrite a cljthon function to split a string into characters.\"\n  [word]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\"]))\n  (is (= (candidate \"Name\") [\"N\" \"a\" \"m\" \"e\"]))\n  (is (= (candidate \"program\") [\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_566_sum_digits", "prompt": "(defn sum_digits\n  \"\tWrite a function to get the sum of the digits of a non-negative integer.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 345) 12))\n  (is (= (candidate 12) 3))\n  (is (= (candidate 97) 16))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_567_issort_list", "prompt": "(defn issort_list\n  \"\tWrite a function to check whether a specified list is sorted or not.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate issort_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 6 8 10 12 14 16 17]) true))\n  (is (= (candidate [1 2 4 6 8 10 12 14 20 17]) false))\n  (is (= (candidate [1 2 4 6 8 10 15 14 20]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_568_empty_list", "prompt": "(defn empty_list\n  \"\tWrite a function to create a list of N empty dictionaries.\"\n  [length]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate empty_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) [{} {} {} {} {}]))\n  (is (= (candidate 6) [{} {} {} {} {} {}]))\n  (is (= (candidate 7) [{} {} {} {} {} {} {}]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "(defn sort_sublists\n  \"\tWrite a function to sort each sublist of strings in a given list of lists.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_sublists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"green\" \"orange\"] [\"black\" \"white\"] [\"white\" \"black\" \"orange\"]]) [[\"green\" \"orange\"] [\"black\" \"white\"] [\"black\" \"orange\" \"white\"]]))\n  (is (= (candidate [[\"green\" \"orange\"] [\"black\"] [\"green\" \"orange\"] [\"white\"]]) [[\"green\" \"orange\"] [\"black\"] [\"green\" \"orange\"] [\"white\"]]))\n  (is (= (candidate [[\"a\" \"b\"] [\"d\" \"c\"] [\"g\" \"h\"] [\"f\" \"e\"]]) [[\"a\" \"b\"] [\"c\" \"d\"] [\"g\" \"h\"] [\"e\" \"f\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "(defn two_unique_nums\n  \"\tWrite a cljthon function to remove duplicate numbers from a given number of lists.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate two_unique_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 2 3 4 5]) [1 4 5]))\n  (is (= (candidate [1 2 3 2 4 5]) [1 3 4 5]))\n  (is (= (candidate [1 2 3 4 5]) [1 2 3 4 5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_573_unique_product", "prompt": "(defn unique_product\n  \"\tWrite a cljthon function to calculate the product of the unique numbers in a given list.\"\n  [list_data]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate unique_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 30 40 20 50 60 40]) 720000000))\n  (is (= (candidate [1 2 3 1]) 6))\n  (is (= (candidate [7 8 9 0 1 1]) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "(defn surfacearea_cylinder\n  \"\tWrite a function to find the surface area of a cylinder.\"\n  [r h]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate surfacearea_cylinder)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 5) 942.45))\n  (is (= (candidate 4 5) 226.18800000000002))\n  (is (= (candidate 4 10) 351.848))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "(defn is_Sub_Array\n  \"\tWrite a cljthon function to check whether a list is sublist of another or not.\"\n  [A B]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Sub_Array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 4 3 5] [1 2]) false))\n  (is (= (candidate [1 2 1] [1 2 1]) true))\n  (is (= (candidate [1 0 2 2] [2 2 0]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "(defn last_Digit_Factorial\n  \"\tWrite a cljthon function to find the last digit in factorial of a given number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate last_Digit_Factorial)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4) 4))\n  (is (= (candidate 21) 0))\n  (is (= (candidate 30) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "(defn interleave_lists\n  \"\tWrite a function to interleave 3 lists of the same length into a single flat list.\"\n  [list1 list2 list3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate interleave_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7] [10 20 30 40 50 60 70] [100 200 300 400 500 600 700]) [1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700]))\n  (is (= (candidate [10 20] [15 2] [5 10]) [10 15 5 20 2 10]))\n  (is (= (candidate [11 44] [10 15] [20 5]) [11 10 20 44 15 5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "(defn find_dissimilar\n  \"\tWrite a function to find the dissimilar elements in the given two vectors.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_dissimilar)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4 5 6] [5 7 4 10]) [3 6 7 10]))\n  (is (= (candidate [1 2 3 4] [7 2 3 9]) [1 4 7 9]))\n  (is (= (candidate [21 11 25 26] [26 34 21 36]) [34 36 11 25]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_580_extract_even", "prompt": "(defn extract_even\n  \"\tWrite a function to remove uneven elements in the nested mixed vector.\"\n  [test_tuple]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_even)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 5 [7 6 [2 4]] 6 8]) [4 [6 [2 4]] 6 8]))\n  (is (= (candidate [5 6 [8 7 [4 8]] 7 9]) [6 [8 [4 8]]]))\n  (is (= (candidate [5 6 [9 8 [4 6]] 8 10]) [6 [8 [4 6]] 8 10]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_581_surface_Area", "prompt": "(defn surface_Area\n  \"\tWrite a cljthon function to find the surface area of a square cljramid with a given base edge and height.\"\n  [b s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate surface_Area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 4) 33))\n  (is (= (candidate 4 5) 56))\n  (is (= (candidate 1 2) 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_583_catalan_number", "prompt": "(defn catalan_number\n  \"\tWrite a function which returns nth catalan number.\"\n  [num]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate catalan_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 16796))\n  (is (= (candidate 9) 4862))\n  (is (= (candidate 7) 429))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "(defn find_adverbs\n  \"\tWrite a function to find the first adverb ending with ly and its positions in a given string.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_adverbs)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\"))\n  (is (= (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\"))\n  (is (= (candidate \"Complete the task quickly\") \"18-25: quickly\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_585_expensive_items", "prompt": "(defn expensive_items\n  \"\tWrite a function to find the n most expensive items in a given dataset.\"\n  [items n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate expensive_items)\n\n(deftest test-humaneval\n\n  (is (= (candidate [{\"name\" \"Item-1\" \"price\" 101.1} {\"name\" \"Item-2\" \"price\" 555.22}] 1) [{\"name\" \"Item-2\" \"price\" 555.22}]))\n  (is (= (candidate [{\"name\" \"Item-1\" \"price\" 101.1} {\"name\" \"Item-2\" \"price\" 555.22} {\"name\" \"Item-3\" \"price\" 45.09}] 2) [{\"name\" \"Item-2\" \"price\" 555.22} {\"name\" \"Item-1\" \"price\" 101.1}]))\n  (is (= (candidate [{\"name\" \"Item-1\" \"price\" 101.1} {\"name\" \"Item-2\" \"price\" 555.22} {\"name\" \"Item-3\" \"price\" 45.09} {\"name\" \"Item-4\" \"price\" 22.75}] 1) [{\"name\" \"Item-2\" \"price\" 555.22}]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_586_split_Arr", "prompt": "(defn split_Arr\n  \"\tWrite a cljthon function to split a list at the nth eelment and add the first part to the end.\"\n  [l n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split_Arr)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 10 5 6 52 36] 2) [5 6 52 36 12 10]))\n  (is (= (candidate [1 2 3 4] 1) [2 3 4 1]))\n  (is (= (candidate [0 1 2 3 4 5 6 7] 3) [3 4 5 6 7 0 1 2]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_587_list_tuple", "prompt": "(defn list_tuple\n  \"\tWrite a function to convert a list to a vector.\"\n  [listx]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate list_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 10 7 4 15 3]) [5 10 7 4 15 3]))\n  (is (= (candidate [2 4 5 6 2 3 4 4 7]) [2 4 5 6 2 3 4 4 7]))\n  (is (= (candidate [58 44 56]) [58 44 56]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_588_big_diff", "prompt": "(defn big_diff\n  \"\tWrite a cljthon function to find the difference between largest and smallest value in a given list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate big_diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4]) 3))\n  (is (= (candidate [4 5 12]) 8))\n  (is (= (candidate [9 2 3]) 7))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "(defn perfect_squares\n  \"\tWrite a function to find perfect squares between two given numbers.\"\n  [a b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate perfect_squares)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 30) [1 4 9 16 25]))\n  (is (= (candidate 50 100) [64 81 100]))\n  (is (= (candidate 100 200) [100 121 144 169 196]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_591_swap_List", "prompt": "(defn swap_List\n  \"\tWrite a cljthon function to interchange the first and last elements in a list.\"\n  [newList]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate swap_List)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 35 9 56 24]) [24 35 9 56 12]))\n  (is (= (candidate [1 2 3]) [3 2 1]))\n  (is (= (candidate [4 5 6]) [6 5 4]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "(defn sum_Of_product\n  \"\tWrite a cljthon function to find the sum of the product of consecutive binomial co-efficients.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_Of_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 15))\n  (is (= (candidate 4) 56))\n  (is (= (candidate 1) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "(defn removezero_ip\n  \"\tWrite a function to remove leading zeroes from an ip address.\"\n  [ip]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate removezero_ip)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"216.08.094.196\") \"216.8.94.196\"))\n  (is (= (candidate \"12.01.024\") \"12.1.24\"))\n  (is (= (candidate \"216.08.094.0196\") \"216.8.94.196\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "(defn diff_even_odd\n  \"\tWrite a function to find the difference of the first even and first odd number of a given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate diff_even_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 4 1 6 8]) 3))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) 1))\n  (is (= (candidate [1 5 7 9 10]) 9))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "(defn min_Swaps\n  \"\tWrite a cljthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\"\n  [str1 str2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_Swaps)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"1101\" \"1110\") 1))\n  (is (= (candidate \"111\" \"000\") \"Not Possible\"))\n  (is (= (candidate \"111\" \"110\") \"Not Possible\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_597_find_kth", "prompt": "(defn find_kth\n  \"\tWrite a function to find kth element from the given two sorted vectors.\"\n  [arr1 arr2 k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_kth)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 3 6 7 9] [1 4 8 10] 5) 6))\n  (is (= (candidate [100 112 256 349 770] [72 86 113 119 265 445 892] 7) 256))\n  (is (= (candidate [3 4 7 8 10] [2 5 9 11] 6) 8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "(defn armstrong_number\n  \"\tWrite a function to check whether the given number is armstrong or not.\"\n  [number]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate armstrong_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 153) true))\n  (is (= (candidate 259) false))\n  (is (= (candidate 4458) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_599_sum_average", "prompt": "(defn sum_average\n  \"\tWrite a function to find sum and average of first n natural numbers.\"\n  [number]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_average)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) [55 5.5]))\n  (is (= (candidate 15) [120 8.0]))\n  (is (= (candidate 20) [210 10.5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_600_is_Even", "prompt": "(defn is_Even\n  \"\tWrite a cljthon function to check whether the given number is even or not.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Even)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) false))\n  (is (= (candidate 2) true))\n  (is (= (candidate 3) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "(defn first_repeated_char\n  \"\tWrite a cljthon function to find the first repeated character in a given string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_repeated_char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcabc\") \"a\"))\n  (is (= (candidate \"abc\") nil))\n  (is (= (candidate \"123123\") \"1\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_603_get_ludic", "prompt": "(defn get_ludic\n  \"\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_ludic)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) [1 2 3 5 7]))\n  (is (= (candidate 25) [1 2 3 5 7 11 13 17 23 25]))\n  (is (= (candidate 45) [1 2 3 5 7 11 13 17 23 25 29 37 41 43]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_604_reverse_words", "prompt": "(defn reverse_words\n  \"\tWrite a function to reverse words seperated by spaces in a given string.\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_words)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python program\") \"program python\"))\n  (is (= (candidate \"java language\") \"language java\"))\n  (is (= (candidate \"indian man\") \"man indian\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_605_prime_num", "prompt": "(defn prime_num\n  \"\tWrite a function to check if the given integer is a prime number.\"\n  [num]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate prime_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 13) true))\n  (is (= (candidate 7) true))\n  (is (= (candidate -1010) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_606_radian_degree", "prompt": "(defn radian_degree\n  \"\tWrite a function to convert degrees to radians.\"\n  [degree]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate radian_degree)\n\n(deftest test-humaneval\n\n  (is (= (candidate 90) 1.5707963267948966))\n  (is (= (candidate 60) 1.0471975511965976))\n  (is (= (candidate 120) 2.0943951023931953))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_607_find_literals", "prompt": "(defn find_literals\n  \"\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\"\n  [text pattern]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_literals)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") [\"fox\" 16 19]))\n  (is (= (candidate \"Its been a very crazy procedure right\" \"crazy\") [\"crazy\" 16 21]))\n  (is (= (candidate \"Hardest choices required strongest will\" \"will\") [\"will\" 35 39]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_608_bell_Number", "prompt": "(defn bell_Number\n  \"\tWrite a cljthon function to find nth bell number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bell_Number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 2))\n  (is (= (candidate 3) 5))\n  (is (= (candidate 4) 15))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "(defn remove_kth_element\n  \"\tWrite a cljthon function which takes a list and returns a list with the same elements, but the k'th element removed.\"\n  [list1 L]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_kth_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 3 4 4 5 1] 3) [1 1 3 4 4 5 1]))\n  (is (= (candidate [0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4] 4) [0 0 1 3 4 4 5 6 6 6 7 8 9 4 4]))\n  (is (= (candidate [10 10 15 19 18 18 17 26 26 17 18 10] 5) [10 10 15 19 18 17 26 26 17 18 10]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "(defn max_of_nth\n  \"\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\"\n  [test_list N]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_of_nth)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[5 6 7] [1 3 5] [8 9 19]] 2) 19))\n  (is (= (candidate [[6 7 8] [2 4 6] [9 10 20]] 1) 10))\n  (is (= (candidate [[7 8 9] [3 5 7] [10 11 21]] 1) 11))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_612_merge", "prompt": "(defn merge\n  \"\tWrite a cljthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\"\n  [lst]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate merge)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"x\" \"y\"] [\"a\" \"b\"] [\"m\" \"n\"]]) [[\"x\" \"a\" \"m\"] [\"y\" \"b\" \"n\"]]))\n  (is (= (candidate [[1 2] [3 4] [5 6] [7 8]]) [[1 3 5 7] [2 4 6 8]]))\n  (is (= (candidate [[\"x\" \"y\" \"z\"] [\"a\" \"b\" \"c\"] [\"m\" \"n\" \"o\"]]) [[\"x\" \"a\" \"m\"] [\"y\" \"b\" \"n\"] [\"z\" \"c\" \"o\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "(defn cummulative_sum\n  \"\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cummulative_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [5 6 7] [2 6]]) 30))\n  (is (= (candidate [[2 4] [6 7 8] [3 7]]) 37))\n  (is (= (candidate [[3 5] [7 8 9] [4 8]]) 44))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_615_average_tuple", "prompt": "(defn average_tuple\n  \"\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate average_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[10 10 10 12] [30 45 56 45] [81 80 39 32] [1 2 3 4]]) [30.5 34.25 27.0 23.25]))\n  (is (= (candidate [[1 1 -5] [30 -15 56] [81 -60 -39] [-10 2 3]]) [25.5 -18.0 3.75]))\n  (is (= (candidate [[100 100 100 120] [300 450 560 450] [810 800 390 320] [10 20 30 40]]) [305.0 342.5 270.0 232.5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "(defn tuple_modulo\n  \"\tWrite a function which takes two vectors of the same length and performs the element wise modulo.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_modulo)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5 6] [5 6 7 5]) [0 4 5 1]))\n  (is (= (candidate [11 5 6 7] [6 7 8 6]) [5 5 6 1]))\n  (is (= (candidate [12 6 7 8] [7 8 9 7]) [5 6 7 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "(defn min_Jumps\n  \"\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\"\n  [steps d]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_Jumps)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4] 11) 3.5))\n  (is (= (candidate [3 4] 0) 0))\n  (is (= (candidate [11 14] 11) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_618_div_list", "prompt": "(defn div_list\n  \"\tWrite a function to divide two lists element wise.\"\n  [nums1 nums2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate div_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 5 6] [1 2 3]) [4.0 2.5 2.0]))\n  (is (= (candidate [3 2] [1 4]) [3.0 0.5]))\n  (is (= (candidate [90 120] [50 70]) [1.8 1.7142857142857142]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_619_move_num", "prompt": "(defn move_num\n  \"\tWrite a function to move all the numbers to the end of the given string.\"\n  [test_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate move_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"I1love143you55three3000thousand\") \"Iloveyouthreethousand1143553000\"))\n  (is (= (candidate \"Avengers124Assemble\") \"AvengersAssemble124\"))\n  (is (= (candidate \"Its11our12path13to14see15things16do17things\") \"Itsourpathtoseethingsdothings11121314151617\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_622_get_median", "prompt": "(defn get_median\n  \"\tWrite a function to find the median of two sorted lists of same size.\"\n  [arr1 arr2 n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_median)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 12 15 26 38] [2 13 17 30 45] 5) 16.0))\n  (is (= (candidate [2 4 8 9] [7 13 19 28] 4) 8.5))\n  (is (= (candidate [3 6 14 23 36 42] [2 18 27 39 49 55] 6) 25.0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_623_nth_nums", "prompt": "(defn nth_nums\n  \"\tWrite a function to compute the n-th power of each number in a list.\"\n  [nums n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate nth_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 2) [1 4 9 16 25 36 49 64 81 100]))\n  (is (= (candidate [10 20 30] 3) [1000 8000 27000]))\n  (is (= (candidate [12 15] 5) [248832 759375]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_624_is_upper", "prompt": "(defn is_upper\n  \"\tWrite a cljthon function to convert a given string to uppercase.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_upper)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"person\") \"PERSON\"))\n  (is (= (candidate \"final\") \"FINAL\"))\n  (is (= (candidate \"Valid\") \"VALID\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_625_swap_List", "prompt": "(defn swap_List\n  \"\tWrite a cljthon function to interchange the first and last element in a given list.\"\n  [newList]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate swap_List)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) [3 2 1]))\n  (is (= (candidate [1 2 3 4 4]) [4 2 3 4 1]))\n  (is (= (candidate [4 5 6]) [6 5 4]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_626_triangle_area", "prompt": "(defn triangle_area\n  \"\tWrite a cljthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\"\n  [r]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate triangle_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate -1) nil))\n  (is (= (candidate 0) 0))\n  (is (= (candidate 2) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "(defn find_First_Missing\n  \"\tWrite a cljthon function to find the smallest missing number from a sorted list of natural numbers.\"\n  [array]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_First_Missing)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 1 2 3]) 4))\n  (is (= (candidate [0 1 2 6 9]) 3))\n  (is (= (candidate [2 3 5 8 9]) 0))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "(defn replace_spaces\n  \"\tWrite a function to replace all spaces in the given string with '%20'.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\"))\n  (is (= (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\"))\n  (is (= (candidate \"I love Coding\") \"I%20love%20Coding\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_629_Split", "prompt": "(defn Split\n  \"\tWrite a cljthon function to find even numbers from a list of numbers.\"\n  [list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Split)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) [2 4]))\n  (is (= (candidate [4 5 6 7 8 0 1]) [4 6 8 0]))\n  (is (= (candidate [8 12 15 19]) [8 12]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "(defn get_coordinates\n  \"\tWrite a function to extract all the adjacent coordinates of the given coordinate vector.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_coordinates)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4]) [[2 3] [2 4] [2 5] [3 3] [3 4] [3 5] [4 3] [4 4] [4 5]]))\n  (is (= (candidate [4 5]) [[3 4] [3 5] [3 6] [4 4] [4 5] [4 6] [5 4] [5 5] [5 6]]))\n  (is (= (candidate [5 6]) [[4 5] [4 6] [4 7] [5 5] [5 6] [5 7] [6 5] [6 6] [6 7]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "(defn replace_spaces\n  \"\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Jumanji The Jungle\") \"Jumanji_The_Jungle\"))\n  (is (= (candidate \"The_Avengers\") \"The Avengers\"))\n  (is (= (candidate \"Fast and Furious\") \"Fast_and_Furious\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_632_move_zero", "prompt": "(defn move_zero\n  \"\tWrite a cljthon function to move all zeroes to the end of the given list.\"\n  [num_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate move_zero)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 0 2 0 3 4]) [1 2 3 4 0 0]))\n  (is (= (candidate [2 3 2 0 0 4 0 5 0]) [2 3 2 4 5 0 0 0 0]))\n  (is (= (candidate [0 1 0 1 1]) [1 1 1 0 0]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "(defn pair_xor_Sum\n  \"\tWrite a cljthon function to find the sum of xor of all pairs of numbers in the given list.\"\n  [arr n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pair_xor_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 9 7 6] 4) 47))\n  (is (= (candidate [7 3 5] 3) 12))\n  (is (= (candidate [7 3] 2) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_635_heap_sort", "prompt": "(defn heap_sort\n  \"\tWrite a function to sort the given list.\"\n  [iterable]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate heap_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 9 2 4 6 8 0]) [0 1 2 3 4 5 6 7 8 9]))\n  (is (= (candidate [25 35 22 85 14 65 75 25 58]) [14 22 25 25 35 58 65 75 85]))\n  (is (= (candidate [7 1 9 5]) [1 5 7 9]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "(defn noprofit_noloss\n  \"\tWrite a function to check whether the given amount has no profit and no loss\"\n  [actual_cost sale_amount]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate noprofit_noloss)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1500 1200) false))\n  (is (= (candidate 100 100) true))\n  (is (= (candidate 2000 5000) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_638_wind_chill", "prompt": "(defn wind_chill\n  \"\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\"\n  [v t]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate wind_chill)\n\n(deftest test-humaneval\n\n  (is (= (candidate 120 35) 40))\n  (is (= (candidate 40 20) 19))\n  (is (= (candidate 10 8) 6))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_639_sample_nam", "prompt": "(defn sample_nam\n  \"\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\"\n  [sample_names]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sample_nam)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\"]) 16))\n  (is (= (candidate [\"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\"]) 10))\n  (is (= (candidate [\"abcd\" \"Python\" \"abba\" \"aba\"]) 6))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "(defn remove_parenthesis\n  \"\tWrite a function to remove the parenthesis and what is inbetween them from a string.\"\n  [items]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_parenthesis)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"python (chrome)\"]) \"python\"))\n  (is (= (candidate [\"string(.abc)\"]) \"string\"))\n  (is (= (candidate [\"alpha(num)\"]) \"alpha\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "(defn is_nonagonal\n  \"\tWrite a function to find the nth nonagonal number.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_nonagonal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 325))\n  (is (= (candidate 15) 750))\n  (is (= (candidate 18) 1089))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "(defn text_match_wordz_middle\n  \"\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_wordz_middle)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"pythonzabc.\") true))\n  (is (= (candidate \"zxyabc.\") false))\n  (is (= (candidate \"  lang  .\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "(defn reverse_Array_Upto_K\n  \"\tWrite a cljthon function to reverse a vector upto a given position.\"\n  [input k]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_Array_Upto_K)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6] 4) [4 3 2 1 5 6]))\n  (is (= (candidate [4 5 6 7] 2) [5 4 6 7]))\n  (is (= (candidate [9 8 7 6 5] 3) [7 8 9 6 5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "(defn add_dict_to_tuple\n  \"\tWrite a function to add a map to the vector. The output should be a vector.\"\n  [test_tup test_dict]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_dict_to_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 5 6] {\"MSAM\" 1 \"is\" 2 \"best\" 3}) [4 5 6 {\"MSAM\" 1 \"is\" 2 \"best\" 3}]))\n  (is (= (candidate [1 2 3] {\"UTS\" 2 \"is\" 3 \"Worst\" 4}) [1 2 3 {\"UTS\" 2 \"is\" 3 \"Worst\" 4}]))\n  (is (= (candidate [8 9 10] {\"POS\" 3 \"is\" 4 \"Okay\" 5}) [8 9 10 {\"POS\" 3 \"is\" 4 \"Okay\" 5}]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "(defn maxAverageOfPath\n  \"\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\"\n  [cost]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maxAverageOfPath)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [6 5 4] [7 3 9]]) 5.2))\n  (is (= (candidate [[2 3 4] [7 6 5] [8 4 10]]) 6.2))\n  (is (= (candidate [[3 4 5] [8 7 6] [9 5 11]]) 7.2))\n  (is (= (candidate [[1 2 3] [4 5 6] [7 8 9]]) 5.8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_722_filter_data", "prompt": "(defn filter_data\n  \"\tThe input is given as - a map with a student name as a key and a vector of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\"\n  [students h w]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_data)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]} 6.0 70) {\"Cierra Vega\" [6.2 70]}))\n  (is (= (candidate {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]} 5.9 67) {\"Cierra Vega\" [6.2 70] \"Kierra Gentry\" [6.0 68]}))\n  (is (= (candidate {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]} 5.7 64) {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "(defn count_same_pair\n  \"\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\"\n  [nums1 nums2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_same_pair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8] [2 2 3 1 2 6 7 9]) 4))\n  (is (= (candidate [0 1 2 -1 -5 6 0 -3 -2 3 4 6 8] [2 1 2 -1 -5 6 4 -3 -2 3 4 6 8]) 11))\n  (is (= (candidate [2 4 -6 -9 11 -12 14 -5 17] [2 1 2 -1 -5 6 4 -3 -2 3 4 6 8]) 1))\n  (is (= (candidate [0 1 1 2] [0 1 2 2]) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "(defn power_base_sum\n  \"\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\"\n  [base power]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate power_base_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 100) 115))\n  (is (= (candidate 8 10) 37))\n  (is (= (candidate 8 15) 62))\n  (is (= (candidate 3 3) 9))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "(defn extract_quotation\n  \"\tWrite a function to extract values between quotation marks \" \" of the given string.\"\n  [text1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_quotation)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\") [\"A53\" \"multi\" \"Processor\"]))\n  (is (= (candidate \"Cast your \"favorite\" entertainment \"apps\"\") [\"favorite\" \"apps\"]))\n  (is (= (candidate \"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\") [\"4k Ultra HD\" \"HDR 10\"]))\n  (is (= (candidate \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "(defn multiply_elements\n  \"\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the vector is equal to t_i * t_{i+1}.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiply_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 8 10]) [5 35 56 80]))\n  (is (= (candidate [2 4 5 6 7]) [8 20 30 42]))\n  (is (= (candidate [12 13 14 9 15]) [156 182 126 135]))\n  (is (= (candidate [12]) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_728_sum_list", "prompt": "(defn sum_list\n  \"\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\"\n  [lst1 lst2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 30] [15 25 35]) [25 45 65]))\n  (is (= (candidate [1 2 3] [5 6 7]) [6 8 10]))\n  (is (= (candidate [15 20 30] [15 45 75]) [30 65 105]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "(defn consecutive_duplicates\n  \"\tWrite a function to remove consecutive duplicates of a given list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate consecutive_duplicates)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4]) [0 1 2 3 4 5 6 7 8 9 4]))\n  (is (= (candidate [10 10 15 19 18 18 17 26 26 17 18 10]) [10 15 19 18 17 26 17 18 10]))\n  (is (= (candidate [\"a\" \"a\" \"b\" \"c\" \"d\" \"d\"]) [\"a\" \"b\" \"c\" \"d\"]))\n  (is (= (candidate [\"a\" \"a\" \"b\" \"c\" \"d\" \"d\" \"a\" \"a\"]) [\"a\" \"b\" \"c\" \"d\" \"a\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "(defn lateralsurface_cone\n  \"\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\"\n  [r h]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lateralsurface_cone)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 12) 204.20352248333654))\n  (is (= (candidate 10 15) 566.3586699569488))\n  (is (= (candidate 19 17) 1521.8090132193388))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "(defn replace_specialchar\n  \"\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_specialchar)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python language, Programming language.\") \"Python:language::Programming:language:\"))\n  (is (= (candidate \"a b c,d e f\") \"a:b:c:d:e:f\"))\n  (is (= (candidate \"ram reshma,ram rahim\") \"ram:reshma:ram:rahim\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "(defn find_first_occurrence\n  \"\tWrite a function to find the index of the first occurrence of a given number in a sorted vector.\"\n  [A x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_first_occurrence)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 5 5 5 6 6 8 9 9 9] 5) 1))\n  (is (= (candidate [2 3 5 5 6 6 8 9 9 9] 5) 2))\n  (is (= (candidate [2 4 1 5 6 6 8 9 9 9] 6) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "(defn sum_Of_Subarray_Prod\n  \"\tWrite a cljthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_Of_Subarray_Prod)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 20))\n  (is (= (candidate [1 2]) 5))\n  (is (= (candidate [1 2 3 4]) 84))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "(defn toggle_middle_bits\n  \"\tWrite a cljthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate toggle_middle_bits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 9) 15))\n  (is (= (candidate 10) 12))\n  (is (= (candidate 11) 13))\n  (is (= (candidate 65) 127))\n  (is (= (candidate 77) 115))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_736_left_insertion", "prompt": "(defn left_insertion\n  \"\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/cljthon-exercises/data-structures-and-algorithms/cljthon-data-structure-exercise-24.php\"\n  [a x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate left_insertion)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 5] 6) 4))\n  (is (= (candidate [1 2 4 5] 3) 2))\n  (is (= (candidate [1 2 4 5] 7) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_737_check_str", "prompt": "(defn check_str\n  \"\tWrite a function to check whether the given string is starting with a vowel or not using regex.\"\n  [string]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_str)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"annie\") true))\n  (is (= (candidate \"dawood\") false))\n  (is (= (candidate \"Else\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "(defn geometric_sum\n  \"\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/cljthon-exercises/data-structures-and-algorithms/cljthon-recursion-exercise-9.php\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate geometric_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7) 1.9921875))\n  (is (= (candidate 4) 1.9375))\n  (is (= (candidate 8) 1.99609375))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_739_find_Index", "prompt": "(defn find_Index\n  \"\tWrite a cljthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Index)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 4))\n  (is (= (candidate 3) 14))\n  (is (= (candidate 4) 45))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "(defn tuple_to_dict\n  \"\tWrite a function to convert the given vector to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cljthon-convert-vector-to-adjacent-pair-map/\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_to_dict)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 10 13 5]) {1 5 7 10 13 5}))\n  (is (= (candidate [1 2 3 4 5 6]) {1 2 3 4 5 6}))\n  (is (= (candidate [7 8 9 10 11 12]) {7 8 9 10 11 12}))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "(defn all_Characters_Same\n  \"\tWrite a cljthon function to check whether all the characters are same or not.\"\n  [s]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_Characters_Same)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") false))\n  (is (= (candidate \"aaa\") true))\n  (is (= (candidate \"data\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "(defn area_tetrahedron\n  \"\tWrite a function to caluclate the area of a tetrahedron.\"\n  [side]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate area_tetrahedron)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 15.588457268119894))\n  (is (= (candidate 20) 692.8203230275509))\n  (is (= (candidate 10) 173.20508075688772))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_743_rotate_right", "prompt": "(defn rotate_right\n  \"\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/cljthon-program-right-rotate-list-n/\"\n  [list m]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rotate_right)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 3) [8 9 10 1 2 3 4 5 6 7]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 2) [9 10 1 2 3 4 5 6 7 8]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 5) [6 7 8 9 10 1 2 3 4 5]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_744_check_none", "prompt": "(defn check_none\n  \"\tWrite a function to check if the given vector has any none value or not.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_none)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5 6 nil]) true))\n  (is (= (candidate [7 8 9 11 14]) false))\n  (is (= (candidate [1 2 3 4 nil]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "(defn divisible_by_digits\n  \"\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/cljthon-exercises/lambda/cljthon-lambda-exercise-24.php\"\n  [startnum endnum]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate divisible_by_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 22) [1 2 3 4 5 6 7 8 9 11 12 15 22]))\n  (is (= (candidate 1 15) [1 2 3 4 5 6 7 8 9 11 12 15]))\n  (is (= (candidate 20 25) [22 24]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_746_sector_area", "prompt": "(defn sector_area\n  \"\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.\"\n  [r a]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sector_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4 45) 6.283185307179586))\n  (is (= (candidate 9 45) 31.808625617596654))\n  (is (= (candidate 9 361) nil))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "(defn lcs_of_three\n  \"\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\"\n  [X Y Z]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lcs_of_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2))\n  (is (= (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5))\n  (is (= (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "(defn capital_words_spaces\n  \"\tWrite a function to put spaces between words starting with capital letters in a given string.\"\n  [str1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate capital_words_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python\") \"Python\"))\n  (is (= (candidate \"PythonProgrammingExamples\") \"Python Programming Examples\"))\n  (is (= (candidate \"GetReadyToBeCodingFreak\") \"Get Ready To Be Coding Freak\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "(defn sort_numeric_strings\n  \"\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/cljthon-sort-numeric-strings-in-a-list/\"\n  [nums_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_numeric_strings)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"4\" \"12\" \"45\" \"7\" \"0\" \"100\" \"200\" \"-12\" \"-500\"]) [-500 -12 0 4 7 12 45 100 200]))\n  (is (= (candidate [\"2\" \"3\" \"8\" \"4\" \"7\" \"9\" \"8\" \"2\" \"6\" \"5\" \"1\" \"6\" \"1\" \"2\" \"3\" \"4\" \"6\" \"9\" \"1\" \"2\"]) [1 1 1 2 2 2 2 3 3 4 4 5 6 6 6 7 8 8 9 9]))\n  (is (= (candidate [\"1\" \"3\" \"5\" \"7\" \"1\" \"3\" \"13\" \"15\" \"17\" \"5\" \"7 \" \"9\" \"1\" \"11\"]) [1 1 1 3 3 5 5 7 7 9 11 13 15 17]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_750_add_tuple", "prompt": "(defn add_tuple\n  \"\tWrite a function to add the given vector to the given list.\"\n  [test_list test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 7] [9 10]) [5 6 7 9 10]))\n  (is (= (candidate [6 7 8] [10 11]) [6 7 8 10 11]))\n  (is (= (candidate [7 8 9] [11 12]) [7 8 9 11 12]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "(defn check_min_heap\n  \"\tWrite a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_min_heap)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6]) true))\n  (is (= (candidate [2 3 4 5 10 15]) true))\n  (is (= (candidate [2 10 4 5 3 15]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "(defn jacobsthal_num\n  \"\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate jacobsthal_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 11))\n  (is (= (candidate 2) 1))\n  (is (= (candidate 4) 5))\n  (is (= (candidate 13) 2731))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_753_min_k", "prompt": "(defn min_k\n  \"\tWrite a function to find minimum k records from vector list. https://www.geeksforgeeks.org/cljthon-find-minimum-k-records-from-vector-list/ - in this case a verbatim coclj of test cases\"\n  [test_list K]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_k)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Manjeet\" 10] [\"Akshat\" 4] [\"Akash\" 2] [\"Nikhil\" 8]] 2) [[\"Akash\" 2] [\"Akshat\" 4]]))\n  (is (= (candidate [[\"Sanjeev\" 11] [\"Angat\" 5] [\"Akash\" 3] [\"Nepin\" 9]] 3) [[\"Akash\" 3] [\"Angat\" 5] [\"Nepin\" 9]]))\n  (is (= (candidate [[\"tanmay\" 14] [\"Amer\" 11] [\"Ayesha\" 9] [\"SKD\" 16]] 1) [[\"Ayesha\" 9]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "(defn extract_index_list\n  \"\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\"\n  [l1 l2 l3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_index_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 3 4 5 6 7] [0 1 2 3 4 5 7] [0 1 2 3 4 5 7]) [1 7]))\n  (is (= (candidate [1 1 3 4 5 6 7] [0 1 2 3 4 6 5] [0 1 2 3 4 6 7]) [1 6]))\n  (is (= (candidate [1 1 3 4 6 5 6] [0 1 2 3 4 5 7] [0 1 2 3 4 5 7]) [1 5]))\n  (is (= (candidate [1 2 3 4 6 6 6] [0 1 2 3 4 5 7] [0 1 2 3 4 5 7]) []))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_755_second_smallest", "prompt": "(defn second_smallest\n  \"\tWrite a function to find the second smallest number in a list.\"\n  [numbers]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate second_smallest)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 -8 -2 0 -2]) -2))\n  (is (= (candidate [1 1 -0.5 0 2 -2 -2]) -0.5))\n  (is (= (candidate [2 2]) nil))\n  (is (= (candidate [2 2 2]) nil))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "(defn text_match_zero_one\n  \"\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/cljthon-exercises/re/cljthon-re-exercise-3.php\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_zero_one)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abbbba\") true))\n  (is (= (candidate \"dsabbbba\") true))\n  (is (= (candidate \"asbbbba\") false))\n  (is (= (candidate \"abaaa\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "(defn count_reverse_pairs\n  \"\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/cljthon-program-to-count-the-pairs-of-reverse-strings/\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_reverse_pairs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"julia\" \"best\" \"tseb\" \"for\" \"ailuj\"]) 2))\n  (is (= (candidate [\"geeks\" \"best\" \"for\" \"skeeg\"]) 1))\n  (is (= (candidate [\"makes\" \"best\" \"sekam\" \"for\" \"rof\"]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_759_is_decimal", "prompt": "(defn is_decimal\n  \"\tWrite a function to check whether a given string is a decimal number with a precision of 2.\"\n  [num]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_decimal)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"123.11\") true))\n  (is (= (candidate \"e666.86\") false))\n  (is (= (candidate \"3.124587\") false))\n  (is (= (candidate \"1.11\") true))\n  (is (= (candidate \"1.1.11\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_760_unique_Element", "prompt": "(defn unique_Element\n  \"\tWrite a cljthon function to check whether a list of numbers contains only one distinct element or not.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate unique_Element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 1]) true))\n  (is (= (candidate [1 2 1 2]) false))\n  (is (= (candidate [1 2 3 4 5]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "(defn check_monthnumber_number\n  \"\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\"\n  [monthnum3]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_monthnumber_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 6) true))\n  (is (= (candidate 2) false))\n  (is (= (candidate 12) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "(defn find_min_diff\n  \"\tWrite a cljthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\"\n  [arr n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_min_diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 3 19 18 25] 6) 1))\n  (is (= (candidate [4 3 2 6] 4) 1))\n  (is (= (candidate [30 5 20 9] 4) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_764_number_ctr", "prompt": "(defn number_ctr\n  \"\tWrite a cljthon function to count number of digits in a given string.\"\n  [str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate number_ctr)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"program2bedone\") 1))\n  (is (= (candidate \"3wonders\") 1))\n  (is (= (candidate \"123\") 3))\n  (is (= (candidate \"3wond-1ers2\") 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_765_is_polite", "prompt": "(defn is_polite\n  \"\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_polite)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7) 11))\n  (is (= (candidate 4) 7))\n  (is (= (candidate 9) 13))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_766_pair_wise", "prompt": "(defn pair_wise\n  \"\tWrite a function to return a list of all pairs of consecutive items in a given list.\"\n  [l1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pair_wise)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 3 3 4 4 5]) [[1 1] [1 2] [2 3] [3 3] [3 4] [4 4] [4 5]]))\n  (is (= (candidate [1 5 7 9 10]) [[1 5] [5 7] [7 9] [9 10]]))\n  (is (= (candidate [5 1 9 7 10]) [[5 1] [1 9] [9 7] [7 10]]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [[1 2] [2 3] [3 4] [4 5] [5 6] [6 7] [7 8] [8 9] [9 10]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "(defn get_pairs_count\n  \"\tWrite a cljthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\"\n  [arr sum]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_pairs_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 1 1] 2) 6))\n  (is (= (candidate [1 5 7 -1 5] 6) 3))\n  (is (= (candidate [1 -2 3] 1) 1))\n  (is (= (candidate [-1 -2 3] -3) 1))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_769_Diff", "prompt": "(defn Diff\n  \"\tWrite a cljthon function to get the difference between two lists.\"\n  [li1 li2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 15 20 25 30 35 40] [25 40 35]) [10 20 30 15]))\n  (is (= (candidate [1 2 3 4 5] [6 7 1]) [2 3 4 5 6 7]))\n  (is (= (candidate [1 2 3] [6 7 1]) [2 3 6 7]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "(defn odd_num_sum\n  \"\tWrite a cljthon function to find the sum of fourth power of first n odd natural numbers.\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_num_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 82))\n  (is (= (candidate 3) 707))\n  (is (= (candidate 4) 3108))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_771_check_expression", "prompt": "(defn check_expression\n  \"\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\"\n  [exp]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_expression)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"{()}[{}]\") true))\n  (is (= (candidate \"{()}[{]\") false))\n  (is (= (candidate \"{()}[{}][]({})\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_772_remove_length", "prompt": "(defn remove_length\n  \"\tWrite a function to remove all the words with k length in the given string.\"\n  [test_str K]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"The person is most value tet\" 3) \"person is most value\"))\n  (is (= (candidate \"If you told me about this ok\" 4) \"If you me about ok\"))\n  (is (= (candidate \"Forces of darkeness is come into the play\" 4) \"Forces of darkeness is the\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "(defn occurance_substring\n  \"\tWrite a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\"\n  [text pattern]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate occurance_substring)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python programming, python language\" \"python\") [\"python\" 0 6]))\n  (is (= (candidate \"python programming,programming language\" \"programming\") [\"programming\" 7 18]))\n  (is (= (candidate \"python programming,programming language\" \"language\") [\"language\" 31 39]))\n  (is (= (candidate \"c++ programming, c++ language\" \"python\") nil))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_775_odd_position", "prompt": "(defn odd_position\n  \"\tWrite a cljthon function to check whether every odd index contains odd numbers of a given list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 4 3 6 7 6 3]) true))\n  (is (= (candidate [4 1 2]) true))\n  (is (= (candidate [1 2 3]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_776_count_vowels", "prompt": "(defn count_vowels\n  \"\tWrite a function to count those characters which have vowels as their neighbors in the given string.\"\n  [test_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_vowels)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"bestinstareels\") 7))\n  (is (= (candidate \"partofthejourneyistheend\") 12))\n  (is (= (candidate \"amazonprime\") 5))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_777_find_sum", "prompt": "(defn find_sum\n  \"\tWrite a cljthon function to find the sum of non-repeated elements in a given list.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 1 1 4 5 6]) 21))\n  (is (= (candidate [1 10 9 4 2 10 10 45 4]) 71))\n  (is (= (candidate [12 10 9 45 2 10 10 45 10]) 78))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "(defn pack_consecutive_duplicates\n  \"\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pack_consecutive_duplicates)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4]) [[0 0] [1] [2] [3] [4 4] [5] [6 6 6] [7] [8] [9] [4 4]]))\n  (is (= (candidate [10 10 15 19 18 18 17 26 26 17 18 10]) [[10 10] [15] [19] [18 18] [17] [26 26] [17] [18] [10]]))\n  (is (= (candidate [\"a\" \"a\" \"b\" \"c\" \"d\" \"d\"]) [[\"a\" \"a\"] [\"b\"] [\"c\"] [\"d\" \"d\"]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_780_find_combinations", "prompt": "(defn find_combinations\n  \"\tWrite a function to find the combinations of sums with vectors in the given vector list. https://www.geeksforgeeks.org/cljthon-combinations-of-sum-with-vectors-in-vector-list/\"\n  [test_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_combinations)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[2 4] [6 7] [5 1] [6 10]]) [[8 11] [7 5] [8 14] [11 8] [12 17] [11 11]]))\n  (is (= (candidate [[3 5] [7 8] [6 2] [7 11]]) [[10 13] [9 7] [10 16] [13 10] [14 19] [13 13]]))\n  (is (= (candidate [[4 6] [8 9] [7 3] [8 12]]) [[12 15] [11 9] [12 18] [15 12] [16 21] [15 15]]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_781_count_divisors", "prompt": "(defn count_divisors\n  \"\tWrite a cljthon function to check whether the count of divisors is even. https://www.w3resource.com/cljthon-exercises/basic/cljthon-basic-1-exercise-24.php\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_divisors)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) true))\n  (is (= (candidate 100) false))\n  (is (= (candidate 125) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "(defn odd_length_sum\n  \"\tWrite a cljthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_length_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4]) 14))\n  (is (= (candidate [1 2 1 2]) 15))\n  (is (= (candidate [1 7]) 8))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "(defn rgb_to_hsv\n  \"\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\"\n  [r g b]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rgb_to_hsv)\n\n(deftest test-humaneval\n\n  (is (= (candidate 255 255 255) [0.0 0.0 100.0]))\n  (is (= (candidate 0 215 0) [120.0 100.0 84.31372549019608]))\n  (is (= (candidate 10 215 110) [149.26829268292684 95.34883720930233 84.31372549019608]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "(defn mul_even_odd\n  \"\tWrite a function to find the product of first even and odd number of a given list.\"\n  [list1]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate mul_even_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 4 1 6 8]) 4))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) 2))\n  (is (= (candidate [1 5 7 9 10]) 10))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "(defn tuple_str_int\n  \"\tWrite a function to convert vector string to integer vector.\"\n  [test_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_str_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"(7, 8, 9)\") [7 8 9]))\n  (is (= (candidate \"(1, 2, 3)\") [1 2 3]))\n  (is (= (candidate \"(4, 5, 6)\") [4 5 6]))\n  (is (= (candidate \"(7, 81, 19)\") [7 81 19]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_786_right_insertion", "prompt": "(defn right_insertion\n  \"\tWrite a function to locate the right insertion point for a specified value in sorted order.\"\n  [a x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate right_insertion)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 5] 6) 4))\n  (is (= (candidate [1 2 4 5] 3) 2))\n  (is (= (candidate [1 2 4 5] 7) 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_787_text_match_three", "prompt": "(defn text_match_three\n  \"\tWrite a function that matches a string that has an a followed by three 'b'.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abbbba\") true))\n  (is (= (candidate \"caacabbbba\") true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_788_new_tuple", "prompt": "(defn new_tuple\n  \"\tWrite a function to create a new vector from the given string and list.\"\n  [test_list test_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate new_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"WEB\" \"is\"] \"best\") [\"WEB\" \"is\" \"best\"]))\n  (is (= (candidate [\"We\" \"are\"] \"Developers\") [\"We\" \"are\" \"Developers\"]))\n  (is (= (candidate [\"Part\" \"is\"] \"Wrong\") [\"Part\" \"is\" \"Wrong\"]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_790_even_position", "prompt": "(defn even_position\n  \"\tWrite a cljthon function to check whether every even index contains even numbers of a given list.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 2 1]) false))\n  (is (= (candidate [1 2 3]) false))\n  (is (= (candidate [2 1 4]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_791_remove_nested", "prompt": "(defn remove_nested\n  \"\tWrite a function to remove vectors from the given vector.\"\n  [test_tup]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_nested)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 [4 6] 10]) [1 5 7 10]))\n  (is (= (candidate [2 6 8 [5 7] 11]) [2 6 8 11]))\n  (is (= (candidate [3 7 9 [6 8] 12]) [3 7 9 12]))\n  (is (= (candidate [3 7 9 [6 8] [5 12] 12]) [3 7 9 12]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_792_count_list", "prompt": "(defn count_list\n  \"\tWrite a cljthon function to count the number of lists in a given number of lists.\"\n  [input_list]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [5 7] [9 11] [13 15 17]]) 4))\n  (is (= (candidate [[1 2] [2 3] [4 5]]) 3))\n  (is (= (candidate [[1 0] [2 0]]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_793_last", "prompt": "(defn last\n  \"\tWrite a cljthon function to find the last position of an element in a sorted vector.\"\n  [arr x]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate last)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] 1) 0))\n  (is (= (candidate [1 1 1 2 3 4] 1) 2))\n  (is (= (candidate [2 3 2 3 6 8 9] 3) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "(defn text_starta_endb\n  \"\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_starta_endb)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aabbbb\") true))\n  (is (= (candidate \"aabAbbbc\") false))\n  (is (= (candidate \"accddbbjjj\") false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_796_return_sum", "prompt": "(defn return_sum\n  \"\tWrite function to find the sum of all items in the given map.\"\n  [dict]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate return_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"a\" 100 \"b\" 200 \"c\" 300}) 600))\n  (is (= (candidate {\"a\" 25 \"b\" 18 \"c\" 45}) 88))\n  (is (= (candidate {\"a\" 36 \"b\" 39 \"c\" 49}) 124))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "(defn sum_in_range\n  \"\tWrite a cljthon function to find the sum of all odd natural numbers within the range l and r.\"\n  [l r]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_in_range)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 5) 8))\n  (is (= (candidate 5 7) 12))\n  (is (= (candidate 7 13) 40))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_798__sum", "prompt": "(defn _sum\n  \"\tWrite a cljthon function to find the sum of a vector.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate _sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 6))\n  (is (= (candidate [15 12 13 10]) 50))\n  (is (= (candidate [0 1 2]) 3))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_799_left_rotate", "prompt": "(defn left_rotate\n  \"\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\"\n  [n d]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate left_rotate)\n\n(deftest test-humaneval\n\n  (is (= (candidate 16 2) 64))\n  (is (= (candidate 10 2) 40))\n  (is (= (candidate 99 3) 792))\n  (is (= (candidate 99 3) 792))\n  (is (= (candidate 1 3) 8))\n  (is (= (candidate 5 3) 40))\n  (is (= (candidate 29 3) 232))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "(defn remove_all_spaces\n  \"\tWrite a function to remove all whitespaces from a string.\"\n  [text]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_all_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python  program\") \"pythonprogram\"))\n  (is (= (candidate \"python   programming    language\") \"pythonprogramminglanguage\"))\n  (is (= (candidate \"python                     program\") \"pythonprogram\"))\n  (is (= (candidate \"   python                     program\") \"pythonprogram\"))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "(defn test_three_equal\n  \"\tWrite a cljthon function to count the number of equal numbers from three given integers.\"\n  [x y z]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate test_three_equal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 1 1) 3))\n  (is (= (candidate -1 -2 -3) 0))\n  (is (= (candidate 1 2 2) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_802_count_rotation", "prompt": "(defn count_rotation\n  \"\tWrite a cljthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_rotation)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 2 1]) 1))\n  (is (= (candidate [4 5 1 2 3]) 2))\n  (is (= (candidate [7 8 9 1 2 3]) 3))\n  (is (= (candidate [1 2 3]) 0))\n  (is (= (candidate [1 3 2]) 2))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "(defn is_perfect_square\n  \"\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\"\n  [n]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_perfect_square)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) false))\n  (is (= (candidate 36) true))\n  (is (= (candidate 14) false))\n  (is (= (candidate 196) true))\n  (is (= (candidate 125) false))\n  (is (= (candidate 15625) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_804_is_product_even", "prompt": "(defn is_product_even\n  \"\tWrite a function to check whether the product of numbers in a list is even or not.\"\n  [arr]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_product_even)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) true))\n  (is (= (candidate [1 2 1 4]) true))\n  (is (= (candidate [1 1]) false))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "(defn max_sum_list\n  \"\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\"\n  [lists]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sum_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [4 5 6] [10 11 12] [7 8 9]]) [10 11 12]))\n  (is (= (candidate [[3 2 1] [6 5 4] [12 11 10]]) [12 11 10]))\n  (is (= (candidate [[2 3 1]]) [2 3 1]))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "(defn max_run_uppercase\n  \"\tWrite a function to find maximum run of uppercase characters in the given string.\"\n  [test_str]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_run_uppercase)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"GeMKSForGERksISBESt\") 5))\n  (is (= (candidate \"PrECIOusMOVemENTSYT\") 6))\n  (is (= (candidate \"GooGLEFluTTER\") 4))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_807_first_odd", "prompt": "(defn first_odd\n  \"\tWrite a cljthon function to find the first odd number in a given list of numbers.\"\n  [nums]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5]) 1))\n  (is (= (candidate [2 4 1 3]) 1))\n  (is (= (candidate [8 9 1]) 9))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_808_check_K", "prompt": "(defn check_K\n  \"\tWrite a function to check if the given vectors contain the k or not.\"\n  [test_tup K]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_K)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5 6 8] 6) true))\n  (is (= (candidate [1 2 3 4 5 6] 7) false))\n  (is (= (candidate [7 8 9 44 11 12] 11) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}, {"task_id": "mbpp_809_check_smaller", "prompt": "(defn check_smaller\n  \"\tWrite a function to check if each element of second vector is smaller than its corresponding element in the first vector.\"\n  [test_tup1 test_tup2]\n  ", "test": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_smaller)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] [2 3 4]) false))\n  (is (= (candidate [4 5 6] [3 4 5]) true))\n  (is (= (candidate [11 12 13] [10 11 12]) true))\n)\n\n(run-test test-humaneval)", "language": "clj"}]