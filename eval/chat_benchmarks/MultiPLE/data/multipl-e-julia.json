[{"task_id": "HumanEval_0_has_close_elements", "prompt": "\"\"\" Check if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nfalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\ntrue\"\"\"\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]\"\"\"\nfunction separate_paren_groups(paren_string::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = separate_paren_groups;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"])\n\t@test(candidate(\"(()(())((())))\") == [\"(()(())((())))\"])\n\t@test(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\"\"\"\nfunction truncate_number(number::Float64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_3_below_zero", "prompt": "\"\"\" You're given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero([1, 2, 3])\nfalse\n>>> below_zero([1, 2, -4, 5])\ntrue\"\"\"\nfunction below_zero(operations::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = below_zero;\n\t@test(candidate(Vector{Int64}([])) == false)\n\t@test(candidate([1, 2, -3, 1, 2, -3]) == false)\n\t@test(candidate([1, 2, -4, 5, 6]) == true)\n\t@test(candidate([1, -1, 2, -2, 5, -5, 4, -4]) == false)\n\t@test(candidate([1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\t@test(candidate([1, -2, 2, -2, 5, -5, 4, -4]) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n", "language": "jl"}, {"task_id": "HumanEval_5_intersperse", "prompt": "\"\"\" Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\"\"\"\nfunction intersperse(numbers::Vector{Int64}, delimeter::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n", "language": "jl"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n[2, 3, 1, 3]\"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n", "language": "jl"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "\"\"\" Filter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_8_sum_product", "prompt": "\"\"\" For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n", "language": "jl"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "\"\"\" From a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n", "language": "jl"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"\"\"\"\nfunction make_palindrome(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_11_string_xor", "prompt": "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\"\"\"\nfunction string_xor(a::String, b::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_12_longest", "prompt": "\"\"\" Out of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return nothing in case the input vector is empty.\n>>> longest([])\nnothing\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\"\"\"\nfunction longest(strings::Vector{String})::Union{String, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n", "language": "jl"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]\"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\"\"\"\nfunction string_sequence(n::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\"\"\"\nfunction count_distinct_characters(string::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n", "language": "jl"}, {"task_id": "HumanEval_17_parse_music", "prompt": "\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\"\"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n", "language": "jl"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers(\"three one five\")\n\"one three five\"\"\"\"\nfunction sort_numbers(numbers::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\") == \"zero one two three four five six\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "\"\"\" From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n", "language": "jl"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "\"\"\" Given vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n", "language": "jl"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "\"\"\" Filter given vector of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n", "language": "jl"}, {"task_id": "HumanEval_23_strlen", "prompt": "\"\"\" Return length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\"\"\"\nfunction strlen(string::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n", "language": "jl"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\"\"\"\nfunction largest_divisor(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n", "language": "jl"}, {"task_id": "HumanEval_25_factorize", "prompt": "\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n", "language": "jl"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "\"\"\" From a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n", "language": "jl"}, {"task_id": "HumanEval_27_flip_case", "prompt": "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\"\"\"\nfunction flip_case(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_28_concatenate", "prompt": "\"\"\" Concatenate vector of strings into a single string\n>>> concatenate([])\n\"\"\n>>> concatenate([\"a\", \"b\", \"c\"])\n\"abc\"\"\"\"\nfunction concatenate(strings::Vector{String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = concatenate;\n\t@test(candidate(Vector{String}([])) == \"\")\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"xyz\")\n\t@test(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "\"\"\" Filter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], \"a\")\n[]\n>>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\"\"\"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_30_get_positive", "prompt": "\"\"\"Return only positive numbers in the vector.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n", "language": "jl"}, {"task_id": "HumanEval_31_is_prime", "prompt": "\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\"\"\"\nfunction is_prime(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_prime;\n\t@test(candidate(6) == false)\n\t@test(candidate(101) == true)\n\t@test(candidate(11) == true)\n\t@test(candidate(13441) == true)\n\t@test(candidate(61) == true)\n\t@test(candidate(4) == false)\n\t@test(candidate(1) == false)\n\t@test(candidate(5) == true)\n\t@test(candidate(11) == true)\n\t@test(candidate(17) == true)\n\t@test(candidate(85) == false)\n\t@test(candidate(77) == false)\n\t@test(candidate(255379) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_33_sort_third", "prompt": "\"\"\"This function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\"\"\"\nfunction sort_third(l::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_third;\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\n\t@test(candidate([5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\t@test(candidate([5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])\nend\n", "language": "jl"}, {"task_id": "HumanEval_34_unique", "prompt": "\"\"\"Return sorted unique elements in a vector\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n", "language": "jl"}, {"task_id": "HumanEval_35_max_element", "prompt": "\"\"\"Return maximum element in the vector.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n", "language": "jl"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\"\"\"\nfunction fizz_buzz(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\nend\n", "language": "jl"}, {"task_id": "HumanEval_37_sort_even", "prompt": "\"\"\"This function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\"\"\"\nfunction sort_even(l::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_even;\n\t@test(candidate([1, 2, 3]) == [1, 2, 3])\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\t@test(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\nend\n", "language": "jl"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "\"\"\"prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\"\"\"\nfunction prime_fib(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = prime_fib;\n\t@test(candidate(1) == 2)\n\t@test(candidate(2) == 3)\n\t@test(candidate(3) == 5)\n\t@test(candidate(4) == 13)\n\t@test(candidate(5) == 89)\n\t@test(candidate(6) == 233)\n\t@test(candidate(7) == 1597)\n\t@test(candidate(8) == 28657)\n\t@test(candidate(9) == 514229)\n\t@test(candidate(10) == 433494437)\nend\n", "language": "jl"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "\"\"\"triples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> triples_sum_to_zero([1, 3, 5, 0])\nfalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\ntrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nfalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\ntrue\n>>> triples_sum_to_zero([1])\nfalse\"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "\"\"\"Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.\"\"\"\nfunction car_race_collision(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n", "language": "jl"}, {"task_id": "HumanEval_42_incr_list", "prompt": "\"\"\"Return vector with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n", "language": "jl"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "\"\"\"pairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nfalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nfalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nfalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\ntrue\n>>> pairs_sum_to_zero([1])\nfalse\"\"\"\nfunction pairs_sum_to_zero(l::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = pairs_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, -2, 1]) == false)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 5, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([-3, 9, -1, 3, 2, 30]) == true)\n\t@test(candidate([-3, 9, -1, 3, 2, 31]) == true)\n\t@test(candidate([-3, 9, -1, 4, 2, 30]) == false)\n\t@test(candidate([-3, 9, -1, 4, 2, 31]) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_44_change_base", "prompt": "\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\"\"\"\nfunction change_base(x::Int64, base::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\"\"\"\nfunction triangle_area(a::Int64, h::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(5, 3) == 7.5)\n\t@test(candidate(2, 2) == 2.0)\n\t@test(candidate(10, 8) == 40.0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_46_fib4", "prompt": "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\"\"\"\nfunction fib4(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n", "language": "jl"}, {"task_id": "HumanEval_47_median", "prompt": "\"\"\"Return median of elements in the vector l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\"\"\"\nfunction median(l::Vector{Int64})::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n", "language": "jl"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "\"\"\"Checks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\"\"\"\nfunction is_palindrome(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_49_modp", "prompt": "\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\"\"\"\nfunction modp(n::Int64, p::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = modp;\n\t@test(candidate(3, 5) == 3)\n\t@test(candidate(1101, 101) == 2)\n\t@test(candidate(0, 101) == 1)\n\t@test(candidate(3, 11) == 8)\n\t@test(candidate(100, 101) == 1)\n\t@test(candidate(30, 5) == 4)\n\t@test(candidate(31, 5) == 3)\nend\n", "language": "jl"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "\"\"\"remove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\"\"\"\nfunction remove_vowels(text::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_vowels;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\")\n\t@test(candidate(\"fedcba\") == \"fdcb\")\n\t@test(candidate(\"eeeee\") == \"\")\n\t@test(candidate(\"acBAA\") == \"cB\")\n\t@test(candidate(\"EcBOO\") == \"cB\")\n\t@test(candidate(\"ybcd\") == \"ybcd\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "\"\"\"Return true if all numbers in the vector l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\ntrue\n>>> below_threshold([1, 20, 4, 10], 5)\nfalse\"\"\"\nfunction below_threshold(l::Vector{Int64}, t::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_53_add", "prompt": "\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1) == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n", "language": "jl"}, {"task_id": "HumanEval_54_same_chars", "prompt": "\"\"\"Check if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\"\"\"\nfunction same_chars(s0::String, s1::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_55_fib", "prompt": "\"\"\"Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\"\"\"\nfunction fib(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n", "language": "jl"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "\"\"\" brackets is a string of \"<\" and \">\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_57_monotonic", "prompt": "\"\"\"Return true is vector elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\ntrue\n>>> monotonic([1, 20, 4, 10])\nfalse\n>>> monotonic([4, 1, 0, -10])\ntrue\"\"\"\nfunction monotonic(l::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_58_common", "prompt": "\"\"\"Return sorted unique common elements for two vectors.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n", "language": "jl"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15) == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330) == 11)\n\t@test(candidate(13195) == 29)\nend\n", "language": "jl"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\"\"\"\nfunction sum_to_n(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n", "language": "jl"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "\"\"\" brackets is a string of \"(\" and \")\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_62_derivative", "prompt": "\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n", "language": "jl"}, {"task_id": "HumanEval_63_fibfib", "prompt": "\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\"\"\"\nfunction fibfib(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = fibfib;\n\t@test(candidate(2) == 1)\n\t@test(candidate(1) == 0)\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 24)\n\t@test(candidate(10) == 81)\n\t@test(candidate(12) == 274)\n\t@test(candidate(14) == 927)\nend\n", "language": "jl"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\"\"\"\nfunction vowels_count(s::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = vowels_count;\n\t@test(candidate(\"abcde\") == 2)\n\t@test(candidate(\"Alone\") == 3)\n\t@test(candidate(\"key\") == 2)\n\t@test(candidate(\"bye\") == 1)\n\t@test(candidate(\"keY\") == 2)\n\t@test(candidate(\"bYe\") == 1)\n\t@test(candidate(\"ACEDY\") == 3)\nend\n", "language": "jl"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\"\"\"\nfunction circular_shift(x::Int64, shift::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_66_digitSum", "prompt": "\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n>>> digitSum(\"\")\n0\n>>> digitSum(\"abAB\")\n131\n>>> digitSum(\"abcCd\")\n67\n>>> digitSum(\"helloE\")\n69\n>>> digitSum(\"woArBld\")\n131\n>>> digitSum(\"aAaaaXa\")\n153\"\"\"\nfunction digitSum(s::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n", "language": "jl"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "\"\"\"In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\n>>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n8\n>>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n2\n>>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n95\n>>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n19\"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n", "language": "jl"}, {"task_id": "HumanEval_68_pluck", "prompt": "\"\"\"\"Given a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a vector, [ smalest_value, its index ],\nIf there are no even values or the given vector is empty, return [].\nExample 1:\n>>> pluck([4, 2, 3])\n[2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\n>>> pluck([1, 2, 3])\n[2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>> pluck([])\n[]\nExample 4:\n>>> pluck([5, 0, 3, 0, 4, 2])\n[0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\n             so we will choose the first zero, which has the smallest index.\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n", "language": "jl"}, {"task_id": "HumanEval_69_search", "prompt": "\"\"\"You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n>>> search([4, 1, 2, 2, 3, 1])\n2\n>>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n3\n>>> search([5, 5, 4, 4, 4])\n-1\"\"\"\nfunction search(lst::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = search;\n\t@test(candidate([5, 5, 5, 5, 1]) == 1)\n\t@test(candidate([4, 1, 4, 1, 4, 4]) == 4)\n\t@test(candidate([3, 3]) == -1)\n\t@test(candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8)\n\t@test(candidate([2, 3, 3, 2, 2]) == 2)\n\t@test(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n\t@test(candidate([3, 2, 8, 2]) == 2)\n\t@test(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1)\n\t@test(candidate([8, 8, 3, 6, 5, 6, 4]) == -1)\n\t@test(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1)\n\t@test(candidate([1, 9, 10, 1, 3]) == 1)\n\t@test(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\n\t@test(candidate([1]) == 1)\n\t@test(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\n\t@test(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\n\t@test(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1)\n\t@test(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\n\t@test(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n\t@test(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2)\n\t@test(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1)\n\t@test(candidate([10]) == -1)\n\t@test(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\n\t@test(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1)\n\t@test(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\n\t@test(candidate([3, 10, 10, 9, 2]) == -1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "\"\"\"Given vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list([1, 2, 3, 4])\n[1, 4, 2, 3]\n>>> strange_sort_list([5, 5, 5, 5])\n[5, 5, 5, 5]\n>>> strange_sort_list([])\n[]\"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n", "language": "jl"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "\"\"\"Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\n>>> triangle_area(3, 4, 5)\n6.0\n>>> triangle_area(1, 2, 10)\n-1\"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3, 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5) == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1, 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "\"\"\"Write a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n>>> will_it_fly([1, 2], 5)\nfalse\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n>>> will_it_fly([3, 2, 3], 1)\nfalse\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n>>> will_it_fly([3, 2, 3], 9)\ntrue\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n>>> will_it_fly([3], 5)\ntrue\n# 3 is less than the maximum possible weight, and it's balanced.\"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "\"\"\"Given a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n>>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n4\n>>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n1\n>>> smallest_change([1, 2, 3, 2, 1])\n0\"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_74_total_match", "prompt": "\"\"\"Write a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\nif the two vectors have the same number of chars, return the first vector.\nExamples\n>>> total_match([], [])\n[]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n[\"hI\", \"Hi\"]\n>>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n[\"hi\", \"admin\"]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n[\"hI\", \"hi\", \"hi\"]\n>>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n[\"4\"]\"\"\"\nfunction total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]), [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([])) == Vector{String}([]))\nend\n", "language": "jl"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\n>>> is_multiply_prime(30)\ntrue\n30 = 2 * 3 * 5\"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "\"\"\"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\n>>> is_simple_power(1, 4)\ntrue\n>>> is_simple_power(2, 2)\ntrue\n>>> is_simple_power(8, 2)\ntrue\n>>> is_simple_power(3, 2)\nfalse\n>>> is_simple_power(3, 1)\nfalse\n>>> is_simple_power(5, 3)\nfalse\"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_77_iscube", "prompt": "\"\"\"Write a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>> iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\nfalse\"\"\"\nfunction iscube(a::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_78_hex_key", "prompt": "\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\"\"\"\nfunction hex_key(num::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n", "language": "jl"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\n>>> decimal_to_binary(15)\n\"db1111db\"\n>>> decimal_to_binary(32)\n\"db100000db\"\"\"\"\nfunction decimal_to_binary(decimal::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(0) == \"db0db\")\n\t@test(candidate(32) == \"db100000db\")\n\t@test(candidate(103) == \"db1100111db\")\n\t@test(candidate(15) == \"db1111db\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_80_is_happy", "prompt": "\"\"\"You are given a string s.\nYour task is to check if the string is hapjl or not.\nA string is hapjl if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>> is_happy(\"a\")\nfalse\n>>> is_happy(\"aa\")\nfalse\n>>> is_happy(\"abcd\")\ntrue\n>>> is_happy(\"aabb\")\nfalse\n>>> is_happy(\"adb\")\ntrue\n>>> is_happy(\"xyy\")\nfalse\"\"\"\nfunction is_happy(s::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\nExample:\n>>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_82_prime_length", "prompt": "\"\"\"Write a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\ntrue\n>>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\"\"\"\nfunction prime_length(string::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "\"\"\"Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\"\"\"\nfunction starts_one_ends(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n", "language": "jl"}, {"task_id": "HumanEval_84_solve", "prompt": "\"\"\"Given a positive integer N, return the total sum of its digits in binary.\nExample\n>>> solve(1000)\n\"1\"\n>>> solve(150)\n\"110\"\n>>> solve(147)\n\"1100\"\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\"\"\"\nfunction solve(N::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_85_add", "prompt": "\"\"\"Given a non-empty vector of integers lst. add the even elements that are at odd indices..\nExamples:\n>>> add([4, 2, 6, 7])\n2\"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n", "language": "jl"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "\"\"\"Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\")\n\"Hello !!!Wdlor\"\"\"\"\nfunction anti_shuffle(s::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_87_get_row", "prompt": "\"\"\"You are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\n>>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>>> get_row([], 1)\n[]\n>>> get_row([[], [1], [1, 2, 3]], 3)\n[(2, 2)]\"\"\"\nfunction get_row(lst::Vector{Vector{Int64}}, x::Int64)::Vector{Tuple{Int64, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n", "language": "jl"}, {"task_id": "HumanEval_88_sort_array", "prompt": "\"\"\"Given a vector of non-negative integers, return a cojl of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given vector.\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n", "language": "jl"}, {"task_id": "HumanEval_89_encrypt", "prompt": "\"\"\"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\n>>> encrypt(\"hi\")\n\"lm\"\n>>> encrypt(\"asdfghjkl\")\n\"ewhjklnop\"\n>>> encrypt(\"gf\")\n\"kj\"\n>>> encrypt(\"et\")\n\"ix\"\"\"\"\nfunction encrypt(s::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") == \"e\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "\"\"\"You are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn nothing if there is no such element.\n>>> next_smallest([1, 2, 3, 4, 5])\n2\n>>> next_smallest([5, 1, 4, 3, 2])\n2\n>>> next_smallest([])\nnothing\n>>> next_smallest([1, 1])\nnothing\"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n", "language": "jl"}, {"task_id": "HumanEval_91_is_bored", "prompt": "\"\"\"You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\"\"\"\nfunction is_bored(S::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_92_any_int", "prompt": "\"\"\"Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n>>> any_int(5, 2, 7)\ntrue\n>>> any_int(3, 2, 2)\nfalse\n>>> any_int(3, -2, 1)\ntrue\n>>> any_int(3.6, -2.2, 2)\nfalse\"\"\"\nfunction any_int(x::Float64, y::Float64, z::Float64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = any_int;\n\t@test(candidate(2, 3, 1) == true)\n\t@test(candidate(2.5, 2, 3) == false)\n\t@test(candidate(1.5, 5, 3.5) == false)\n\t@test(candidate(2, 6, 2) == false)\n\t@test(candidate(4, 2, 2) == true)\n\t@test(candidate(2.2, 2.2, 2.2) == false)\n\t@test(candidate(-4, 6, 2) == true)\n\t@test(candidate(2, 1, 1) == true)\n\t@test(candidate(3, 4, 7) == true)\n\t@test(candidate(3.0, 4, 7) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_93_encode", "prompt": "\"\"\"Write a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \nExamples:\n>>> encode(\"test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n\"tHKS KS C MGSSCGG\"\"\"\"\nfunction encode(message::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "\"\"\"You are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\n>>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n10\n>>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n25\n>>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n13\n>>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n11\n>>> skjkasdkd([0, 81, 12, 3, 1, 21])\n3\n>>> skjkasdkd([0, 8, 1, 2, 1, 7])\n7\"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0, 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191, 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n", "language": "jl"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "\"\"\"Given a dictionary, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\ntrue\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nfalse\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\ntrue\"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "\"\"\"Implement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\n>>> count_up_to(5)\n[2, 3]\n>>> count_up_to(11)\n[2, 3, 5, 7]\n>>> count_up_to(0)\n[]\n>>> count_up_to(20)\n[2, 3, 5, 7, 11, 13, 17, 19]\n>>> count_up_to(1)\n[]\n>>> count_up_to(18)\n[2, 3, 5, 7, 11, 13, 17]\"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n", "language": "jl"}, {"task_id": "HumanEval_97_multiply", "prompt": "\"\"\"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_98_count_upper", "prompt": "\"\"\"Given a string s, count the number of uppercase vowels in even indices.\nFor example:\n>>> count_upper(\"aBCdEf\")\n1\n>>> count_upper(\"abcdefg\")\n0\n>>> count_upper(\"dBBE\")\n0\"\"\"\nfunction count_upper(s::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n", "language": "jl"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "\"\"\"Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\"\"\"\nfunction closest_integer(value::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") == -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "\"\"\"Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n", "language": "jl"}, {"task_id": "HumanEval_101_words_string", "prompt": "\"\"\"You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\nFor example:\n>>> words_string(\"Hi, my name is John\")\n[\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>>> words_string(\"One, two, three, four, five, six\")\n[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\"\"\"\nfunction words_string(s::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_102_choose_num", "prompt": "\"\"\"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\nFor example:\n>>> choose_num(12, 15)\n14\n>>> choose_num(13, 12)\n-1\"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n", "language": "jl"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "\"\"\"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\n>>> rounded_avg(1, 5)\n\"0b11\"\n>>> rounded_avg(7, 5)\n-1\n>>> rounded_avg(10, 20)\n\"0b1111\"\n>>> rounded_avg(20, 33)\n\"0b11010\"\"\"\"\nfunction rounded_avg(n::Int64, m::Int64)::Union{String, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "\"\"\"Given a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\nNote: Returned vector should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n", "language": "jl"}, {"task_id": "HumanEval_105_by_length", "prompt": "\"\"\"Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  If the vector is empty, return an empty vector:\n>>> by_length([])\n[]\n  If the vector has any strange number ignore it:\n>>> by_length([1, -1, 55])\n[\"One\"]\"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_106_f", "prompt": "\"\"\" Implement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n>>> f(5)\n[1, 2, 6, 24, 15]\"\"\"\nfunction f(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n", "language": "jl"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "\"\"\"Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\n>>> even_odd_palindrome(3)\n(1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\n>>> even_odd_palindrome(12)\n(4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\"\"\"\nfunction even_odd_palindrome(n::Int64)::Tuple{Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = even_odd_palindrome;\n\t@test(candidate(123) == (8, 13))\n\t@test(candidate(12) == (4, 6))\n\t@test(candidate(3) == (1, 2))\n\t@test(candidate(63) == (6, 8))\n\t@test(candidate(25) == (5, 6))\n\t@test(candidate(19) == (4, 6))\n\t@test(candidate(9) == (4, 5))\n\t@test(candidate(1) == (0, 1))\nend\n", "language": "jl"}, {"task_id": "HumanEval_108_count_nums", "prompt": "\"\"\"Write a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\n0\n>>> count_nums([-1, 11, -11])\n1\n>>> count_nums([1, 1, 2])\n3\"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\nNote: The given vector is guaranteed to have unique elements.\nFor Example:\n>>> move_one_ball([3, 4, 5, 1, 2])\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\n>>> move_one_ball([3, 5, 4, 1, 2])\nfalse\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_110_exchange", "prompt": "\"\"\"In this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\"NO\"\nIt is assumed that the input vectors will be non-empty.\"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_111_histogram", "prompt": "\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\nExample:\n>>> histogram(\"a b c\")\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\nDict(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\nDict(\"b\" => 4)\n>>> histogram(\"\")\nDict()\"\"\"\nfunction histogram(test::String)::Dict{String, Int64}> \n", "test": "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n", "language": "jl"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "\"\"\"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\n>>> reverse_delete(\"abcde\", \"ae\")\n(\"bcd\", false)\n>>> reverse_delete(\"abcdef\", \"b\")\n(\"acdef\", false)\n>>> reverse_delete(\"abcdedcba\", \"ab\")\n(\"cdedc\", true)\"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String, Bool} \n", "test": "using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n", "language": "jl"}, {"task_id": "HumanEval_113_odd_count", "prompt": "\"\"\"Given a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count([\"1234567\"])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count([\"3\", \"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "\"\"\"Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\"\"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_115_max_fill", "prompt": "\"\"\"You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n>>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n6\nExample 2:\n>>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n5\nExample 3:\n>>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n0\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_fill;\n\t@test(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n\t@test(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n\t@test(candidate([[0, 0, 0], [0, 0, 0]], 5) == 0)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n\t@test(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)\nend\n", "language": "jl"}, {"task_id": "HumanEval_116_sort_array", "prompt": "\"\"\"In this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4])\n[1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6])\n[-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4])\n[0, 1, 2, 3, 4]\"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n", "language": "jl"}, {"task_id": "HumanEval_117_select_words", "prompt": "\"\"\"Given a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a little lamb\", 4)\n[\"little\"]\n>>> select_words(\"Mary had a little lamb\", 3)\n[\"Mary\", \"lamb\"]\n>>> select_words(\"simple white space\", 2)\n[]\n>>> select_words(\"Hello world\", 4)\n[\"world\"]\n>>> select_words(\"Uncle sam\", 3)\n[\"Uncle\"]\"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "\"\"\"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \nYou may assume that the given string contains English letter only.\nExample:\n>>> get_closest_vowel(\"yogurt\")\n\"u\"\n>>> get_closest_vowel(\"FULL\")\n\"U\"\n>>> get_closest_vowel(\"quick\")\n\"\"\n>>> get_closest_vowel(\"ab\")\n\"\"\"\"\"\nfunction get_closest_vowel(word::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_119_match_parens", "prompt": "\"\"\"You are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n>>> match_parens([\"()(\", \")\"])\n\"Yes\"\n>>> match_parens([\")\", \")\"])\n\"No\"\"\"\"\nfunction match_parens(lst::Vector{String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_120_maximum", "prompt": "\"\"\"Given a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum([-3, -4, 5], 3)\n[-4, -3, 5]\nExample 2:\n>>> maximum([4, -4, 4], 2)\n[4, 4]\nExample 3:\n>>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n[2]\nNote:\n    1. The length of the vector will be in the range of [1, 1000].\n    2. The elements in the vector will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n", "language": "jl"}, {"task_id": "HumanEval_121_solution", "prompt": "\"\"\"Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\nExamples\n>>> solution([5, 8, 7, 1])\n12\n>>> solution([3, 3, 3, 3, 3])\n9\n>>> solution([30, 13, 24, 321])\n0\"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n", "language": "jl"}, {"task_id": "HumanEval_122_add_elements", "prompt": "\"\"\"Given a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\n>>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n24\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\"\"\"\nfunction add_elements(arr::Vector{Int64}, k::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "\"\"\"Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote: \n    1. Collatz(1) is [1].\n    2. returned vector sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>>> get_odd_collatz(5)\n[1, 5]\"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n", "language": "jl"}, {"task_id": "HumanEval_124_valid_date", "prompt": "\"\"\"You have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n>>> valid_date(\"03-11-2000\")\ntrue\n>>> valid_date(\"15-01-2012\")\nfalse\n>>> valid_date(\"04-0-2040\")\nfalse\n>>> valid_date(\"06-04-2020\")\ntrue\n>>> valid_date(\"06/04/2020\")\nfalse\"\"\"\nfunction valid_date(date::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = valid_date;\n\t@test(candidate(\"03-11-2000\") == true)\n\t@test(candidate(\"15-01-2012\") == false)\n\t@test(candidate(\"04-0-2040\") == false)\n\t@test(candidate(\"06-04-2020\") == true)\n\t@test(candidate(\"01-01-2007\") == true)\n\t@test(candidate(\"03-32-2011\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"04-31-3000\") == false)\n\t@test(candidate(\"06-06-2005\") == true)\n\t@test(candidate(\"21-31-2000\") == false)\n\t@test(candidate(\"04-12-2003\") == true)\n\t@test(candidate(\"04122003\") == false)\n\t@test(candidate(\"20030412\") == false)\n\t@test(candidate(\"2003-04\") == false)\n\t@test(candidate(\"2003-04-12\") == false)\n\t@test(candidate(\"04-2003\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_125_split_words", "prompt": "\"\"\"Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"Hello,world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"abcdef\")\n3\"\"\"\nfunction split_words(txt::String)::Union{Vector{String}, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "\"\"\"Given a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted([5])\ntrue\n>>> is_sorted([1, 2, 3, 4, 5])\ntrue\n>>> is_sorted([1, 3, 2, 4, 5])\nfalse\n>>> is_sorted([1, 2, 3, 4, 5, 6])\ntrue\n>>> is_sorted([1, 2, 3, 4, 5, 6, 7])\ntrue\n>>> is_sorted([1, 3, 2, 4, 5, 6, 7])\nfalse\n>>> is_sorted([1, 2, 2, 3, 3, 4])\ntrue\n>>> is_sorted([1, 2, 2, 2, 3, 4])\nfalse\"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_127_intersection", "prompt": "\"\"\"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\n>>> intersection((1, 2), (2, 3))\n\"NO\"\n>>> intersection((-1, 1), (0, 4))\n\"NO\"\n>>> intersection((-3, -1), (-5, 5))\n\"YES\"\"\"\"\nfunction intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64, Int64})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "\"\"\"You are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return nothing for empty arr.\nExample:\n>>> prod_signs([1, 2, 2, -4])\n9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nnothing\"\"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_129_minPath", "prompt": "\"\"\"Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\nExamples:    \n>>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n[1, 2, 1]\n>>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n[1]\"\"\"\nfunction minPath(grid::Vector{Vector{Int64}}, k::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = minPath;\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1])\n\t@test(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1])\n\t@test(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2])\n\t@test(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1])\n\t@test(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1])\n\t@test(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1])\n\t@test(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n\t@test(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3])\n\t@test(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5])\n\t@test(candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t@test(candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\nend\n", "language": "jl"}, {"task_id": "HumanEval_130_tri", "prompt": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3)\n[1, 3, 2, 8]\"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n", "language": "jl"}, {"task_id": "HumanEval_131_digits", "prompt": "\"\"\"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15\"\"\"\nfunction digits(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_132_is_nested", "prompt": "\"\"\"Create a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue\"\"\"\nfunction is_nested(string::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "\"\"\"You are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\n>>> lst([1.0, 2.0, 3.0])\n14\n>>> lst([1.0, 4.0, 9.0])\n98\n>>> lst([1.0, 3.0, 5.0, 7.0])\n84\n>>> lst([1.4, 4.2, 0.0])\n29\n>>> lst([-2.4, 1.0, 1.0])\n6\"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4, 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0, 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0]) == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n", "language": "jl"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "\"\"\"Create a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\n>>> check_if_last_char_is_a_letter(\"apple pie\")\nfalse\n>>> check_if_last_char_is_a_letter(\"apple pi e\")\ntrue\n>>> check_if_last_char_is_a_letter(\"apple pi e \")\nfalse\n>>> check_if_last_char_is_a_letter(\"\")\nfalse\"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "\"\"\"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\nExamples:\n>>> can_arrange([1, 2, 4, 3, 5])\n3\n>>> can_arrange([1, 2, 3])\n-1\"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "\"\"\"Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as nothing.\nExamples:\n>>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n(nothing, 1)\n>>> largest_smallest_integers([])\n(nothing, nothing)\n>>> largest_smallest_integers([0])\n(nothing, nothing)\"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1))\nend\n", "language": "jl"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\n>>> is_equal_to_sum_even(4)\nfalse\n>>> is_equal_to_sum_even(6)\nfalse\n>>> is_equal_to_sum_even(8)\ntrue\"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "\"\"\"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\"\"\"\nfunction special_factorial(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n", "language": "jl"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "\"\"\"Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n>>> fix_spaces(\" Example\")\n\"Example\"\n>>> fix_spaces(\" Example 1\")\n\"Example_1\"\n>>> fix_spaces(\" Example 2\")\n\"_Example_2\"\n>>> fix_spaces(\" Example 3\")\n\"_Example-3\"\"\"\"\nfunction fix_spaces(text::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\")\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\n>>> file_name_check(\"example.txt\")\n\"Yes\"\n>>> file_name_check(\"1example.dll\")\n\"No\"\"\"\"\nfunction file_name_check(file_name::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\") == \"No\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "\"\"\"\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448)\nend\n", "language": "jl"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "\"\"\"You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>> words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\"\"\"\nfunction words_in_sentence(sentence::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_144_simplify", "prompt": "\"\"\"Your task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n>>> simplify(\"1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"7/10\", \"10/2\")\nfalse\"\"\"\nfunction simplify(x::String, n::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = simplify;\n\t@test(candidate(\"1/5\", \"5/1\") == true)\n\t@test(candidate(\"1/6\", \"2/1\") == false)\n\t@test(candidate(\"5/1\", \"3/1\") == true)\n\t@test(candidate(\"7/10\", \"10/2\") == false)\n\t@test(candidate(\"2/10\", \"50/10\") == true)\n\t@test(candidate(\"7/2\", \"4/2\") == true)\n\t@test(candidate(\"11/6\", \"6/1\") == true)\n\t@test(candidate(\"2/3\", \"5/2\") == false)\n\t@test(candidate(\"5/2\", \"3/5\") == false)\n\t@test(candidate(\"2/4\", \"8/4\") == true)\n\t@test(candidate(\"2/4\", \"4/2\") == true)\n\t@test(candidate(\"1/5\", \"5/1\") == true)\n\t@test(candidate(\"1/5\", \"1/5\") == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "\"\"\"Write a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12])\n[-1, -11, 1, -12, 11]\n>>> order_by_points([])\n[]\"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n", "language": "jl"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "\"\"\"Write a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n>>> specialFilter([15, -73, 14, -15])\n1\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n2\"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n", "language": "jl"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "\"\"\"    You are given a positive integer n. You have to create an integer vector a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    Example :\n    >>> get_max_triples(5)\n    1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n", "language": "jl"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "\"\"\"Write a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\n>>> list_sort([\"aa\", \"a\", \"aaa\"])\n[\"aa\"]\n>>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n[\"ab\", \"cd\"]\"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n", "language": "jl"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "\"\"\"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\nExamples:\n>>> x_or_y(7, 34, 12)\n34\n>>> x_or_y(15, 8, 5)\n5\"\"\"\nfunction x_or_y(n::Int64, x::Int64, y::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = x_or_y;\n\t@test(candidate(7, 34, 12) == 34)\n\t@test(candidate(15, 8, 5) == 5)\n\t@test(candidate(3, 33, 5212) == 33)\n\t@test(candidate(1259, 3, 52) == 3)\n\t@test(candidate(7919, -1, 12) == -1)\n\t@test(candidate(3609, 1245, 583) == 583)\n\t@test(candidate(91, 56, 129) == 129)\n\t@test(candidate(6, 34, 1234) == 1234)\n\t@test(candidate(1, 2, 0) == 0)\n\t@test(candidate(2, 2, 0) == 2)\nend\n", "language": "jl"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "\"\"\"Given a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n>>> double_the_difference([1, 3, 2, 0])\n10\n>>> double_the_difference([-1, -2, 0])\n0\n>>> double_the_difference([9, -2])\n81\n>>> double_the_difference([0])\n0\nIf the input vector is empty, return 0.\"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n", "language": "jl"}, {"task_id": "HumanEval_152_compare", "prompt": "\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n>>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n[0, 0, 0, 0, 3, 3]\n>>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n[4, 4, 1, 0, 0, 6]\"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n", "language": "jl"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "\"\"\"You will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class.AA\"\"\"\"\nfunction Strongest_Extension(class_name::String, extensions::Vector{String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "\"\"\"You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n>>> cycpattern_check(\"abcd\", \"abd\")\nfalse\n>>> cycpattern_check(\"hello\", \"ell\")\ntrue\n>>> cycpattern_check(\"whassup\", \"psus\")\nfalse\n>>> cycpattern_check(\"abab\", \"baa\")\ntrue\n>>> cycpattern_check(\"efef\", \"eeff\")\nfalse\n>>> cycpattern_check(\"himenss\", \"simen\")\ntrue\"\"\"\nfunction cycpattern_check(a::String, b::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = cycpattern_check;\n\t@test(candidate(\"xyzw\", \"xyw\") == false)\n\t@test(candidate(\"yello\", \"ell\") == true)\n\t@test(candidate(\"whattup\", \"ptut\") == false)\n\t@test(candidate(\"efef\", \"fee\") == true)\n\t@test(candidate(\"abab\", \"aabb\") == false)\n\t@test(candidate(\"winemtt\", \"tinem\") == true)\nend\n", "language": "jl"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n", "language": "jl"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "\"\"\"Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"\"\"\"\nfunction int_to_mini_roman(number::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = int_to_mini_roman;\n\t@test(candidate(19) == \"xix\")\n\t@test(candidate(152) == \"clii\")\n\t@test(candidate(251) == \"ccli\")\n\t@test(candidate(426) == \"cdxxvi\")\n\t@test(candidate(500) == \"d\")\n\t@test(candidate(1) == \"i\")\n\t@test(candidate(4) == \"iv\")\n\t@test(candidate(43) == \"xliii\")\n\t@test(candidate(90) == \"xc\")\n\t@test(candidate(94) == \"xciv\")\n\t@test(candidate(532) == \"dxxxii\")\n\t@test(candidate(900) == \"cm\")\n\t@test(candidate(994) == \"cmxciv\")\n\t@test(candidate(1000) == \"m\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "\"\"\"Given the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\n>>> right_angle_triangle(3, 4, 5)\ntrue\n>>> right_angle_triangle(1, 2, 3)\nfalse\"\"\"\nfunction right_angle_triangle(a::Int64, b::Int64, c::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n", "language": "jl"}, {"task_id": "HumanEval_158_find_max", "prompt": "\"\"\"Write a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n>>> find_max([\"name\", \"of\", \"string\"])\n\"string\"\n>>> find_max([\"name\", \"enam\", \"game\"])\n\"enam\"\n>>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\"aaaaaaa\"\"\"\"\nfunction find_max(words::Vector{String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_159_eat", "prompt": "\"\"\"You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n", "language": "jl"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "\"\"\"Given two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\noperator['+', '*', '-']\nvector = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n", "language": "jl"}, {"task_id": "HumanEval_161_solve", "prompt": "\"\"\"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n>>> solve(\"1234\")\n\"4321\"\n>>> solve(\"ab\")\n\"AB\"\n>>> solve(\"#a@C\")\n\"#A@c\"\"\"\"\nfunction solve(s::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"#\\$a^D\") == \"#\\$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "\"\"\"Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return nothing.\n>>> string_to_md5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\"\"\"\nfunction string_to_md5(text::String)::Union{String, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n", "language": "jl"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "\"\"\"Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\n>>> generate_integers(2, 8)\n[2, 4, 6, 8]\n>>> generate_integers(8, 2)\n[2, 4, 6, 8]\n>>> generate_integers(10, 14)\n[]\"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n", "language": "jl"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "\"\"\"\tWrite a jlthon function to identify non-prime numbers.\"\"\"\nfunction is_not_prime(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_not_prime;\n\t@test(candidate(2) == false)\n\t@test(candidate(10) == true)\n\t@test(candidate(35) == true)\n\t@test(candidate(37) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "\"\"\"\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\"\"\"\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = heap_queue_largest;\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65])\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75])\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35])\nend\n", "language": "jl"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "\"\"\"\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\"\"\"\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = differ_At_One_Bit_Pos;\n\t@test(candidate(13, 9) == true)\n\t@test(candidate(15, 8) == false)\n\t@test(candidate(2, 4) == false)\n\t@test(candidate(2, 3) == true)\n\t@test(candidate(5, 1) == true)\n\t@test(candidate(1, 5) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_8_square_nums", "prompt": "\"\"\"\tWrite a function to find squares of individual elements in a vector.\"\"\"\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = square_nums;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\n\t@test(candidate([10, 20, 30]) == [100, 400, 900])\n\t@test(candidate([12, 15]) == [144, 225])\nend\n", "language": "jl"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "\"\"\"\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\"\"\"\nfunction find_Rotations(str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Rotations;\n\t@test(candidate(\"aaaa\") == 1)\n\t@test(candidate(\"ab\") == 2)\n\t@test(candidate(\"abc\") == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "\"\"\"\tWrite a jlthon function to remove first and last occurrence of a given character from the string.\"\"\"\nfunction remove_Occ(s::String, ch::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_Occ;\n\t@test(candidate(\"hello\", \"l\") == \"heo\")\n\t@test(candidate(\"abcda\", \"a\") == \"bcd\")\n\t@test(candidate(\"PHP\", \"P\") == \"H\")\nend\n", "language": "jl"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "\"\"\"\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\"\"\"\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_matrix;\n\t@test(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\n\t@test(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\n\t@test(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])\nend\n", "language": "jl"}, {"task_id": "mbpp_14_find_Volume", "prompt": "\"\"\"\tWrite a jlthon function to find the volume of a triangular prism.\"\"\"\nfunction find_Volume(l::Int64, b::Int64, h::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Volume;\n\t@test(candidate(10, 8, 6) == 240)\n\t@test(candidate(3, 2, 2) == 6)\n\t@test(candidate(1, 2, 1) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "\"\"\"\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\"\"\"\nfunction text_lowercase_underscore(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_lowercase_underscore;\n\t@test(candidate(\"aab_cbbbc\") == true)\n\t@test(candidate(\"aab_Abbbc\") == false)\n\t@test(candidate(\"Aaab_abbbc\") == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "\"\"\"\tWrite a function that returns the perimeter of a square given its side length as input.\"\"\"\nfunction square_perimeter(a::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = square_perimeter;\n\t@test(candidate(10) == 40)\n\t@test(candidate(5) == 20)\n\t@test(candidate(4) == 16)\nend\n", "language": "jl"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "\"\"\"\tWrite a function to remove characters from the first string which are present in the second string.\"\"\"\nfunction remove_dirty_chars(string::String, second_string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_dirty_chars;\n\t@test(candidate(\"probasscurve\", \"pros\") == \"bacuve\")\n\t@test(candidate(\"digitalindia\", \"talent\") == \"digiidi\")\n\t@test(candidate(\"exoticmiles\", \"toxic\") == \"emles\")\nend\n", "language": "jl"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "\"\"\"\tWrite a function to find whether a given vector of integers contains any duplicate element.\"\"\"\nfunction test_duplicate(arraynums::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = test_duplicate;\n\t@test(candidate([1, 2, 3, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 4]) == true)\n\t@test(candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_20_is_woodall", "prompt": "\"\"\"\tWrite a function to check if the given number is woodball or not.\"\"\"\nfunction is_woodall(x::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_woodall;\n\t@test(candidate(383) == true)\n\t@test(candidate(254) == false)\n\t@test(candidate(200) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_56_checks", "prompt": "\"\"\"\tWrite a jlthon function to check if a given number is one less than twice its reverse.\"\"\"\nfunction checks(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = checks;\n\t@test(candidate(70) == false)\n\t@test(candidate(23) == false)\n\t@test(candidate(73) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "\"\"\"\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\"\"\"\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Max_Num;\n\t@test(candidate([1, 2, 3]) == 321)\n\t@test(candidate([4, 5, 6, 1]) == 6541)\n\t@test(candidate([1, 2, 3, 9]) == 9321)\nend\n", "language": "jl"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "\"\"\"\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\"\"\"\nfunction opposite_Signs(x::Int64, y::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = opposite_Signs;\n\t@test(candidate(1, -2) == true)\n\t@test(candidate(3, 2) == false)\n\t@test(candidate(-10, -10) == false)\n\t@test(candidate(-2, 2) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "\"\"\"\tWrite a function to find the nth octagonal number.\"\"\"\nfunction is_octagonal(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_octagonal;\n\t@test(candidate(5) == 65)\n\t@test(candidate(10) == 280)\n\t@test(candidate(15) == 645)\nend\n", "language": "jl"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "\"\"\"\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\"\"\"\nfunction count_Substrings(s::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_Substrings;\n\t@test(candidate(\"112112\") == 6)\n\t@test(candidate(\"111\") == 6)\n\t@test(candidate(\"1101112\") == 12)\nend\n", "language": "jl"}, {"task_id": "mbpp_62_smallest_num", "prompt": "\"\"\"\tWrite a jlthon function to find smallest number in a vector.\"\"\"\nfunction smallest_num(xs::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = smallest_num;\n\t@test(candidate([10, 20, 1, 45, 99]) == 1)\n\t@test(candidate([1, 2, 3]) == 1)\n\t@test(candidate([45, 46, 50, 60]) == 45)\nend\n", "language": "jl"}, {"task_id": "mbpp_63_max_difference", "prompt": "\"\"\"\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\"\"\"\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_difference;\n\t@test(candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7)\n\t@test(candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15)\n\t@test(candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23)\nend\n", "language": "jl"}, {"task_id": "mbpp_64_subject_marks", "prompt": "\"\"\"\tWrite a function to sort a vector of tuples using the second value of each tuple.\"\"\"\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = subject_marks;\n\t@test(candidate([(\"English\", 88), (\"Science\", 90), (\"Maths\", 97), (\"Social sciences\", 82)]) == [(\"Social sciences\", 82), (\"English\", 88), (\"Science\", 90), (\"Maths\", 97)])\n\t@test(candidate([(\"Telugu\", 49), (\"Hindhi\", 54), (\"Social\", 33)]) == [(\"Social\", 33), (\"Telugu\", 49), (\"Hindhi\", 54)])\n\t@test(candidate([(\"Physics\", 96), (\"Chemistry\", 97), (\"Biology\", 45)]) == [(\"Biology\", 45), (\"Physics\", 96), (\"Chemistry\", 97)])\nend\n", "language": "jl"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "\"\"\"\tWrite a function to flatten a vector and sum all of its elements.\"\"\"\nfunction recursive_list_sum(data_list::Vector{Union{Int64, Vector{Int64}}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = recursive_list_sum;\n\t@test(candidate([1, 2, [3, 4], [5, 6]]) == 21)\n\t@test(candidate([7, 10, [15, 14], [19, 41]]) == 106)\n\t@test(candidate([10, 20, [30, 40], [50, 60]]) == 210)\nend\n", "language": "jl"}, {"task_id": "mbpp_66_pos_count", "prompt": "\"\"\"\tWrite a jlthon function to count the number of positive numbers in a vector.\"\"\"\nfunction pos_count(list::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = pos_count;\n\t@test(candidate([1, -2, 3, -4]) == 2)\n\t@test(candidate([3, 4, 5, -1]) == 3)\n\t@test(candidate([1, 2, 3, 4]) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_67_bell_number", "prompt": "\"\"\"\tWrite a function to find the number of ways to partition a set of Bell numbers.\"\"\"\nfunction bell_number(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = bell_number;\n\t@test(candidate(2) == 2)\n\t@test(candidate(10) == 115975)\n\t@test(candidate(56) == 6775685320645824322581483068371419745979053216268760300)\nend\n", "language": "jl"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "\"\"\"\tWrite a jlthon function to check whether the given vector is monotonic or not.\"\"\"\nfunction is_Monotonic(A::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_Monotonic;\n\t@test(candidate([6, 5, 4, 4]) == true)\n\t@test(candidate([1, 2, 2, 3]) == true)\n\t@test(candidate([1, 3, 2]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_69_is_sublist", "prompt": "\"\"\"\tWrite a function to check whether a vector contains the given subvector or not.\"\"\"\nfunction is_sublist(l::Vector{Int64}, s::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_sublist;\n\t@test(candidate([2, 4, 3, 5, 7], [3, 7]) == false)\n\t@test(candidate([2, 4, 3, 5, 7], [4, 3]) == true)\n\t@test(candidate([2, 4, 3, 5, 7], [1, 6]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_70_get_equal", "prompt": "\"\"\"\tWrite a function to find whether all the given vectors have equal length or not.\"\"\"\nfunction get_equal(Input::Vector{Vector{Int64}})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_equal;\n\t@test(candidate([[11, 22, 33], [44, 55, 66]]) == true)\n\t@test(candidate([[1, 2, 3], [4, 5, 6, 7]]) == false)\n\t@test(candidate([[1, 2], [3, 4]]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_71_comb_sort", "prompt": "\"\"\"\tWrite a function to sort a vector of elements.\"\"\"\nfunction comb_sort(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = comb_sort;\n\t@test(candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\n\t@test(candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\n\t@test(candidate([99, 15, 13, 47]) == [13, 15, 47, 99])\nend\n", "language": "jl"}, {"task_id": "mbpp_72_dif_Square", "prompt": "\"\"\"\tWrite a jlthon function to check whether the given number can be represented as the difference of two squares or not.\"\"\"\nfunction dif_Square(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = dif_Square;\n\t@test(candidate(5) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(15) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "\"\"\"\tWrite a function to check whether it follows the sequence given in the patterns vector.\"\"\"\nfunction is_samepatterns(colors::Vector{String}, patterns::Vector{String})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_samepatterns;\n\t@test(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true)\n\t@test(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false)\n\t@test(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_75_find_tuples", "prompt": "\"\"\"\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\"\"\"\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_tuples;\n\t@test(candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)])\n\t@test(candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)])\n\t@test(candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)])\nend\n", "language": "jl"}, {"task_id": "mbpp_77_is_Diff", "prompt": "\"\"\"\tWrite a jlthon function to find whether a number is divisible by 11.\"\"\"\nfunction is_Diff(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_Diff;\n\t@test(candidate(12345) == false)\n\t@test(candidate(1212112) == true)\n\t@test(candidate(1212) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_79_word_len", "prompt": "\"\"\"\tWrite a jlthon function to check whether the length of the word is odd or not.\"\"\"\nfunction word_len(s::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = word_len;\n\t@test(candidate(\"Hadoop\") == false)\n\t@test(candidate(\"great\") == true)\n\t@test(candidate(\"structure\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "\"\"\"\tWrite a function to find the nth tetrahedral number.\"\"\"\nfunction tetrahedral_number(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = tetrahedral_number;\n\t@test(candidate(5) == 35)\n\t@test(candidate(6) == 56)\n\t@test(candidate(7) == 84)\nend\n", "language": "jl"}, {"task_id": "mbpp_83_get_Char", "prompt": "\"\"\"\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\"\"\"\nfunction get_Char(strr::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_Char;\n\t@test(candidate(\"abc\") == \"f\")\n\t@test(candidate(\"gfg\") == \"t\")\n\t@test(candidate(\"ab\") == \"c\")\nend\n", "language": "jl"}, {"task_id": "mbpp_84_sequence", "prompt": "\"\"\"\tWrite a function to find the nth number in the newman conway sequence.\"\"\"\nfunction sequence(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sequence;\n\t@test(candidate(10) == 6)\n\t@test(candidate(2) == 1)\n\t@test(candidate(3) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "\"\"\"\tWrite a function to find nth centered hexagonal number.\"\"\"\nfunction centered_hexagonal_number(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = centered_hexagonal_number;\n\t@test(candidate(10) == 271)\n\t@test(candidate(2) == 7)\n\t@test(candidate(9) == 217)\nend\n", "language": "jl"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "\"\"\"\tWrite a function to merge three dictionaries into a single dictionary.\"\"\"\nfunction merge_dictionaries_three(dict1::Dict{String, String}>, dict2::Dict{String, String}>, dict3::Dict{String, String}>)::Dict{String, String}> \n", "test": "using Test\n\n@testset begin\n\ncandidate = merge_dictionaries_three;\n\t@test(candidate(Dict(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), Dict(\"G\" => \"Green\", \"W\" => \"White\"), Dict(\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\")) == Dict(\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"))\n\t@test(candidate(Dict(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), Dict(\"G\" => \"Green\", \"W\" => \"White\"), Dict(\"L\" => \"lavender\", \"B\" => \"Blue\")) == Dict(\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"))\n\t@test(candidate(Dict(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), Dict(\"L\" => \"lavender\", \"B\" => \"Blue\"), Dict(\"G\" => \"Green\", \"W\" => \"White\")) == Dict(\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"))\nend\n", "language": "jl"}, {"task_id": "mbpp_88_freq_count", "prompt": "\"\"\"\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\"\"\"\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n", "test": "using Test\n\n@testset begin\n\ncandidate = freq_count;\n\t@test(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == Dict(10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1))\n\t@test(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == Dict(1 => 3, 2 => 2, 3 => 3, 4 => 3))\n\t@test(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == Dict(10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2))\nend\n", "language": "jl"}, {"task_id": "mbpp_89_closest_num", "prompt": "\"\"\"\tWrite a function to find the closest smaller number than n.\"\"\"\nfunction closest_num(N::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = closest_num;\n\t@test(candidate(11) == 10)\n\t@test(candidate(7) == 6)\n\t@test(candidate(12) == 11)\nend\n", "language": "jl"}, {"task_id": "mbpp_90_len_log", "prompt": "\"\"\"\tWrite a jlthon function to find the length of the longest word.\"\"\"\nfunction len_log(list1::Vector{String})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = len_log;\n\t@test(candidate([\"python\", \"PHP\", \"bigdata\"]) == 7)\n\t@test(candidate([\"a\", \"ab\", \"abc\"]) == 3)\n\t@test(candidate([\"small\", \"big\", \"tall\"]) == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_91_find_substring", "prompt": "\"\"\"\tWrite a function to check if a string is present as a substring in a given vector of string values.\"\"\"\nfunction find_substring(str1::Vector{String}, sub_str::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_substring;\n\t@test(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == true)\n\t@test(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == false)\n\t@test(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_92_is_undulating", "prompt": "\"\"\"\tWrite a function to check whether the given number is undulating or not.\"\"\"\nfunction is_undulating(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_undulating;\n\t@test(candidate(1212121) == true)\n\t@test(candidate(1991) == false)\n\t@test(candidate(121) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_93_power", "prompt": "\"\"\"\tWrite a function to calculate the value of 'a' to the power 'b'.\"\"\"\nfunction power(a::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = power;\n\t@test(candidate(3, 4) == 81)\n\t@test(candidate(2, 3) == 8)\n\t@test(candidate(5, 5) == 3125)\nend\n", "language": "jl"}, {"task_id": "mbpp_94_index_minimum", "prompt": "\"\"\"\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\"\"\"\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = index_minimum;\n\t@test(candidate([(\"Rash\", 143), (\"Manjeet\", 200), (\"Varsha\", 100)]) == \"Varsha\")\n\t@test(candidate([(\"Yash\", 185), (\"Dawood\", 125), (\"Sanya\", 175)]) == \"Dawood\")\n\t@test(candidate([(\"Sai\", 345), (\"Salman\", 145), (\"Ayesha\", 96)]) == \"Ayesha\")\nend\n", "language": "jl"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "\"\"\"\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\"\"\"\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = Find_Min_Length;\n\t@test(candidate([[1], [1, 2]]) == 1)\n\t@test(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\n\t@test(candidate([[3, 3, 3], [4, 4, 4, 4]]) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_96_divisor", "prompt": "\"\"\"\tWrite a jlthon function to find the number of divisors of a given integer.\"\"\"\nfunction divisor(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = divisor;\n\t@test(candidate(15) == 4)\n\t@test(candidate(12) == 6)\n\t@test(candidate(9) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "\"\"\"\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\"\"\"\nfunction frequency_lists(list1::Vector{Vector{Int64}})::Dict{Int64, Int64}> \n", "test": "using Test\n\n@testset begin\n\ncandidate = frequency_lists;\n\t@test(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == Dict(1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1))\n\t@test(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == Dict(1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1))\n\t@test(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == Dict(20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1))\nend\n", "language": "jl"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "\"\"\"\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\"\"\"\nfunction decimal_to_binary(n::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(8) == \"1000\")\n\t@test(candidate(18) == \"10010\")\n\t@test(candidate(7) == \"111\")\nend\n", "language": "jl"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "\"\"\"\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\"\"\"\nfunction next_smallest_palindrome(num::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = next_smallest_palindrome;\n\t@test(candidate(99) == 101)\n\t@test(candidate(1221) == 1331)\n\t@test(candidate(120) == 121)\nend\n", "language": "jl"}, {"task_id": "mbpp_101_kth_element", "prompt": "\"\"\"\tWrite a function to find the kth element in the given vector using 1-based indexing.\"\"\"\nfunction kth_element(arr::Vector{Int64}, k::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = kth_element;\n\t@test(candidate([12, 3, 5, 7, 19], 2) == 3)\n\t@test(candidate([17, 24, 8, 23], 3) == 8)\n\t@test(candidate([16, 21, 25, 36, 4], 4) == 36)\nend\n", "language": "jl"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "\"\"\"\tWrite a function to convert a snake case string to camel case string.\"\"\"\nfunction snake_to_camel(word::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"python_program\") == \"PythonProgram\")\n\t@test(candidate(\"python_language\") == \"PythonLanguage\")\n\t@test(candidate(\"programming_language\") == \"ProgrammingLanguage\")\nend\n", "language": "jl"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "\"\"\"\tWrite a function to find the Eulerian number a(n, m).\"\"\"\nfunction eulerian_num(n::Int64, m::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = eulerian_num;\n\t@test(candidate(3, 1) == 4)\n\t@test(candidate(4, 1) == 11)\n\t@test(candidate(5, 3) == 26)\nend\n", "language": "jl"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "\"\"\"\tWrite a function to sort each subvector of strings in a given vector of vectors.\"\"\"\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_sublists;\n\t@test(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])\n\t@test(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]])\n\t@test(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_105_count", "prompt": "\"\"\"\tWrite a jlthon function to count true booleans in the given vector.\"\"\"\nfunction count(lst::Vector{Bool})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count;\n\t@test(candidate([true, false, true]) == 2)\n\t@test(candidate([false, false]) == 0)\n\t@test(candidate([true, true, true]) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_106_add_lists", "prompt": "\"\"\"\tWrite a function to append the given vector to the given tuples.\"\"\"\nfunction add_lists(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Tuple{Int64, Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_lists;\n\t@test(candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7))\n\t@test(candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8))\n\t@test(candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9))\nend\n", "language": "jl"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "\"\"\"\tWrite a function to merge three vectors into a single sorted vector.\"\"\"\nfunction merge_sorted_list(num1::Vector{Int64}, num2::Vector{Int64}, num3::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = merge_sorted_list;\n\t@test(candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233])\n\t@test(candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12])\n\t@test(candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])\nend\n", "language": "jl"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "\"\"\"\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\"\"\"\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = odd_Equivalent;\n\t@test(candidate(\"011001\", 6) == 3)\n\t@test(candidate(\"11011\", 5) == 4)\n\t@test(candidate(\"1010\", 4) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_113_check_integer", "prompt": "\"\"\"\tWrite a function to check if a string represents an integer or not.\"\"\"\nfunction check_integer(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_integer;\n\t@test(candidate(\"python\") == false)\n\t@test(candidate(\"1\") == true)\n\t@test(candidate(\"12345\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "\"\"\"\tWrite a function to convert a given tuple of positive integers into a single integer.\"\"\"\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = tuple_to_int;\n\t@test(candidate((1, 2, 3)) == 123)\n\t@test(candidate((4, 5, 6)) == 456)\n\t@test(candidate((5, 6, 7)) == 567)\nend\n", "language": "jl"}, {"task_id": "mbpp_117_list_to_float", "prompt": "\"\"\"\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\"\"\"\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = list_to_float;\n\t@test(candidate([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)])\n\t@test(candidate([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)])\n\t@test(candidate([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)])\nend\n", "language": "jl"}, {"task_id": "mbpp_118_string_to_list", "prompt": "\"\"\"\tWrite a function to convert a string to a vector of strings split on the space character.\"\"\"\nfunction string_to_list(string::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = string_to_list;\n\t@test(candidate(\"python programming\") == [\"python\", \"programming\"])\n\t@test(candidate(\"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"])\n\t@test(candidate(\"write a program\") == [\"write\", \"a\", \"program\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_119_search", "prompt": "\"\"\"\tWrite a jlthon function to find the element that appears only once in a sorted vector.\"\"\"\nfunction search(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = search;\n\t@test(candidate([1, 1, 2, 2, 3]) == 3)\n\t@test(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\n\t@test(candidate([1, 2, 2, 3, 3, 4, 4]) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "\"\"\"\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\"\"\"\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_product_tuple;\n\t@test(candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36)\n\t@test(candidate([(10, 20), (15, 2), (5, 10)]) == 200)\n\t@test(candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484)\nend\n", "language": "jl"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "\"\"\"\tWrite a function to sum all amicable numbers from 1 to a specified number.\"\"\"\nfunction amicable_numbers_sum(limit::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = amicable_numbers_sum;\n\t@test(candidate(999) == 504)\n\t@test(candidate(9999) == 31626)\n\t@test(candidate(99) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_125_find_length", "prompt": "\"\"\"\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\"\"\"\nfunction find_length(string::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_length;\n\t@test(candidate(\"11000010001\") == 6)\n\t@test(candidate(\"10111\") == 1)\n\t@test(candidate(\"11011101100101\") == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_126_sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of common divisors of two given numbers.\"\"\"\nfunction sum(a::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum;\n\t@test(candidate(10, 15) == 6)\n\t@test(candidate(100, 150) == 93)\n\t@test(candidate(4, 6) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_127_multiply_int", "prompt": "\"\"\"\tWrite a function to multiply two integers.\"\"\"\nfunction multiply_int(x::Int64, y::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = multiply_int;\n\t@test(candidate(10, 20) == 200)\n\t@test(candidate(5, 10) == 50)\n\t@test(candidate(4, 8) == 32)\nend\n", "language": "jl"}, {"task_id": "mbpp_128_long_words", "prompt": "\"\"\"\tWrite a function to find words that are longer than n characters from a given vector of words.\"\"\"\nfunction long_words(n::Int64, str::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = long_words;\n\t@test(candidate(3, \"python is a programming language\") == [\"python\", \"programming\", \"language\"])\n\t@test(candidate(2, \"writing a program\") == [\"writing\", \"program\"])\n\t@test(candidate(5, \"sorting list\") == [\"sorting\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "\"\"\"\tWrite a function to calculate whether the matrix is a magic square.\"\"\"\nfunction magic_square_test(my_matrix::Vector{Vector{Int64}})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = magic_square_test;\n\t@test(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == true)\n\t@test(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == true)\n\t@test(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "\"\"\"\tWrite a function to find the item with maximum frequency in a given vector.\"\"\"\nfunction max_occurrences(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_occurrences;\n\t@test(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\n\t@test(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\n\t@test(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)\nend\n", "language": "jl"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "\"\"\"\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\"\"\"\nfunction reverse_vowels(str1::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = reverse_vowels;\n\t@test(candidate(\"Python\") == \"Python\")\n\t@test(candidate(\"USA\") == \"ASU\")\n\t@test(candidate(\"ab\") == \"ab\")\nend\n", "language": "jl"}, {"task_id": "mbpp_132_tup_string", "prompt": "\"\"\"\tWrite a function to convert a vector to a string.\"\"\"\nfunction tup_string(tup1::Vector{String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = tup_string;\n\t@test(candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]) == \"exercises\")\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == \"python\")\n\t@test(candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]) == \"program\")\nend\n", "language": "jl"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "\"\"\"\tWrite a function to calculate the sum of the negative numbers of a given vector of numbers.\"\"\"\nfunction sum_negativenum(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_negativenum;\n\t@test(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32)\n\t@test(candidate([10, 15, -14, 13, -18, 12, -20]) == -52)\n\t@test(candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894)\nend\n", "language": "jl"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "\"\"\"\tWrite a function to find the nth hexagonal number.\"\"\"\nfunction hexagonal_num(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = hexagonal_num;\n\t@test(candidate(10) == 190)\n\t@test(candidate(5) == 45)\n\t@test(candidate(7) == 91)\nend\n", "language": "jl"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "\"\"\"\tWrite a jlthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\"\"\"\nfunction is_Sum_Of_Powers_Of_Two(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_Sum_Of_Powers_Of_Two;\n\t@test(candidate(10) == true)\n\t@test(candidate(7) == false)\n\t@test(candidate(14) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "\"\"\"\tWrite a function to sort a vector of elements.\"\"\"\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = pancake_sort;\n\t@test(candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79])\n\t@test(candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98])\n\t@test(candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42])\nend\n", "language": "jl"}, {"task_id": "mbpp_142_count_samepair", "prompt": "\"\"\"\tWrite a function to count number items that are identical in the same position of three given vectors.\"\"\"\nfunction count_samepair(list1::Vector{Int64}, list2::Vector{Int64}, list3::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_samepair;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\n\t@test(candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_143_find_lists", "prompt": "\"\"\"\tWrite a function to find number of vectors present in the given vector.\"\"\"\nfunction find_lists(Input::Vector{Any})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_lists;\n\t@test(candidate([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2)\n\t@test(candidate([[1, 2], [3, 4], [5, 6]]) == 3)\n\t@test(candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "\"\"\"\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\"\"\"\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_Abs_Diff;\n\t@test(candidate([2, 1, 5, 3]) == 4)\n\t@test(candidate([9, 3, 2, 5, 1]) == 8)\n\t@test(candidate([3, 2, 1]) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_160_find_solution", "prompt": "\"\"\"\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\"\"\"\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Tuple{Int64, Int64}, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_solution;\n\t@test(candidate(2, 3, 7) == (2, 1))\n\t@test(candidate(4, 2, 7) == nothing)\n\t@test(candidate(1, 13, 17) == (4, 1))\nend\n", "language": "jl"}, {"task_id": "mbpp_161_remove_elements", "prompt": "\"\"\"\tWrite a function to remove all elements from a given vector present in another vector.\"\"\"\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_elements;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10])\nend\n", "language": "jl"}, {"task_id": "mbpp_162_sum_series", "prompt": "\"\"\"\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\"\"\"\nfunction sum_series(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_series;\n\t@test(candidate(6) == 12)\n\t@test(candidate(10) == 30)\n\t@test(candidate(9) == 25)\nend\n", "language": "jl"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "\"\"\"\tWrite a function to determine if the sum of the divisors of two integers are the same.\"\"\"\nfunction are_equivalent(num1::Int64, num2::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = are_equivalent;\n\t@test(candidate(36, 57) == false)\n\t@test(candidate(2, 4) == false)\n\t@test(candidate(23, 47) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_165_count_char_position", "prompt": "\"\"\"\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\"\"\"\nfunction count_char_position(str1::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_char_position;\n\t@test(candidate(\"xbcefg\") == 2)\n\t@test(candidate(\"ABcED\") == 3)\n\t@test(candidate(\"AbgdeF\") == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "\"\"\"\tWrite a function that counts the number of pairs of integers in a vector that xor to an even number.\"\"\"\nfunction find_even_pair(A::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_even_pair;\n\t@test(candidate([5, 4, 7, 2, 1]) == 4)\n\t@test(candidate([7, 2, 8, 1, 0, 5, 11]) == 9)\n\t@test(candidate([1, 2, 3]) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "\"\"\"\tWrite a jlthon function to find the smallest power of 2 greater than or equal to n.\"\"\"\nfunction next_power_of_2(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = next_power_of_2;\n\t@test(candidate(0) == 1)\n\t@test(candidate(5) == 8)\n\t@test(candidate(17) == 32)\nend\n", "language": "jl"}, {"task_id": "mbpp_168_frequency", "prompt": "\"\"\"\tWrite a function to count the number of occurrences of a number in a given vector.\"\"\"\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = frequency;\n\t@test(candidate([1, 2, 3], 4) == 0)\n\t@test(candidate([1, 2, 2, 3, 3, 3, 4], 3) == 3)\n\t@test(candidate([0, 1, 2, 3, 1, 2], 1) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "\"\"\"\tWrite a function to find the sum of numbers in a vector within a range specified by two indices.\"\"\"\nfunction sum_range_list(list1::Vector{Int64}, m::Int64, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_range_list;\n\t@test(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29)\n\t@test(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) == 16)\n\t@test(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) == 38)\nend\n", "language": "jl"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "\"\"\"\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\"\"\"\nfunction perimeter_pentagon(a::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = perimeter_pentagon;\n\t@test(candidate(5) == 25)\n\t@test(candidate(10) == 50)\n\t@test(candidate(15) == 75)\nend\n", "language": "jl"}, {"task_id": "mbpp_172_count_occurance", "prompt": "\"\"\"\tWrite a function to count the number of occurence of the string 'std' in a given string.\"\"\"\nfunction count_occurance(s::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_occurance;\n\t@test(candidate(\"letstdlenstdporstd\") == 3)\n\t@test(candidate(\"truststdsolensporsd\") == 1)\n\t@test(candidate(\"makestdsostdworthit\") == 2)\n\t@test(candidate(\"stds\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_222_check_type", "prompt": "\"\"\"\tWrite a function to check if all the elements in tuple have same data type or not.\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_223_is_majority", "prompt": "\"\"\"\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\"\"\"\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_majority;\n\t@test(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == true)\n\t@test(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == false)\n\t@test(candidate([1, 1, 1, 2, 2], 5, 1) == true)\n\t@test(candidate([1, 1, 2, 2], 5, 1) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "\"\"\"\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\"\"\"\nfunction count_Set_Bits(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_Set_Bits;\n\t@test(candidate(2) == 1)\n\t@test(candidate(4) == 1)\n\t@test(candidate(6) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "\"\"\"\tWrite a jlthon function to remove the characters which have odd index values of a given string.\"\"\"\nfunction odd_values_string(str::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = odd_values_string;\n\t@test(candidate(\"abcdef\") == \"ace\")\n\t@test(candidate(\"python\") == \"pto\")\n\t@test(candidate(\"data\") == \"dt\")\n\t@test(candidate(\"lambs\") == \"lms\")\nend\n", "language": "jl"}, {"task_id": "mbpp_227_min_of_three", "prompt": "\"\"\"\tWrite a function to find minimum of three numbers.\"\"\"\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = min_of_three;\n\t@test(candidate(10, 20, 0) == 0)\n\t@test(candidate(19, 15, 18) == 15)\n\t@test(candidate(-10, -20, -30) == -30)\nend\n", "language": "jl"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "\"\"\"\tWrite a jlthon function to check whether all the bits are unset in the given range or not.\"\"\"\nfunction all_Bits_Set_In_The_Given_Range(n::Int64, l::Int64, r::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = all_Bits_Set_In_The_Given_Range;\n\t@test(candidate(4, 1, 2) == true)\n\t@test(candidate(17, 2, 4) == true)\n\t@test(candidate(39, 4, 6) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "\"\"\"\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\"\"\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = re_arrange_array;\n\t@test(candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\n\t@test(candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15])\n\t@test(candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85])\nend\n", "language": "jl"}, {"task_id": "mbpp_230_replace_blank", "prompt": "\"\"\"\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\"\"\"\nfunction replace_blank(str1::String, char::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = replace_blank;\n\t@test(candidate(\"hello people\", \"@\") == \"hello@people\")\n\t@test(candidate(\"python program language\", \"\\$\") == \"python\\$program\\$language\")\n\t@test(candidate(\"blank space\", \"-\") == \"blank-space\")\nend\n", "language": "jl"}, {"task_id": "mbpp_234_volume_cube", "prompt": "\"\"\"\tWrite a function to find the volume of a cube given its side length.\"\"\"\nfunction volume_cube(l::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = volume_cube;\n\t@test(candidate(3) == 27)\n\t@test(candidate(2) == 8)\n\t@test(candidate(5) == 125)\nend\n", "language": "jl"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "\"\"\"\tWrite a jlthon function to count the number of non-empty substrings of a given string.\"\"\"\nfunction number_of_substrings(str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = number_of_substrings;\n\t@test(candidate(\"abc\") == 6)\n\t@test(candidate(\"abcd\") == 10)\n\t@test(candidate(\"abcde\") == 15)\nend\n", "language": "jl"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "\"\"\"\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\"\"\"\nfunction get_total_number_of_sequences(m::Int64, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_total_number_of_sequences;\n\t@test(candidate(10, 4) == 4)\n\t@test(candidate(5, 2) == 6)\n\t@test(candidate(16, 3) == 84)\nend\n", "language": "jl"}, {"task_id": "mbpp_240_replace_list", "prompt": "\"\"\"\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\"\"\"\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = replace_list;\n\t@test(candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8])\n\t@test(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])\n\t@test(candidate([\"red\", \"blue\", \"green\"], [\"yellow\"]) == [\"red\", \"blue\", \"yellow\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_242_count_charac", "prompt": "\"\"\"\tWrite a function to count the total number of characters in a string.\"\"\"\nfunction count_charac(str1::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_charac;\n\t@test(candidate(\"python programming\") == 18)\n\t@test(candidate(\"language\") == 8)\n\t@test(candidate(\"words\") == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "\"\"\"\tWrite a jlthon function to find the next perfect square greater than a given number.\"\"\"\nfunction next_Perfect_Square(N::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = next_Perfect_Square;\n\t@test(candidate(35) == 36)\n\t@test(candidate(6) == 9)\n\t@test(candidate(9) == 16)\nend\n", "language": "jl"}, {"task_id": "mbpp_245_max_sum", "prompt": "\"\"\"\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\"\"\"\nfunction max_sum(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_sum;\n\t@test(candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\n\t@test(candidate([80, 60, 30, 40, 20, 10]) == 210)\n\t@test(candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138)\nend\n", "language": "jl"}, {"task_id": "mbpp_247_lps", "prompt": "\"\"\"\tWrite a function to find the length of the longest palindromic subsequence in the given string.\"\"\"\nfunction lps(str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = lps;\n\t@test(candidate(\"TENS FOR TENS\") == 5)\n\t@test(candidate(\"CARDIO FOR CARDS\") == 7)\n\t@test(candidate(\"PART OF THE JOURNEY IS PART\") == 9)\nend\n", "language": "jl"}, {"task_id": "mbpp_249_intersection_array", "prompt": "\"\"\"\tWrite a function to find the intersection of two vectors.\"\"\"\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = intersection_array;\n\t@test(candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\n\t@test(candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9])\n\t@test(candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10])\nend\n", "language": "jl"}, {"task_id": "mbpp_250_count_X", "prompt": "\"\"\"\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\"\"\"\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_X;\n\t@test(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0)\n\t@test(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) == 3)\n\t@test(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_251_insert_element", "prompt": "\"\"\"\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\"\"\"\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = insert_element;\n\t@test(candidate([\"Red\", \"Green\", \"Black\"], \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"])\n\t@test(candidate([\"python\", \"java\"], \"program\") == [\"program\", \"python\", \"program\", \"java\"])\n\t@test(candidate([\"happy\", \"sad\"], \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_252_convert", "prompt": "\"\"\"\tWrite a jlthon function to convert complex numbers to polar coordinates.\"\"\"\nfunction convert(numbers::Int64)::Tuple{Float64, Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = convert;\n\t@test(candidate(1) == (1.0, 0.0))\n\t@test(candidate(4) == (4.0, 0.0))\n\t@test(candidate(5) == (5.0, 0.0))\nend\n", "language": "jl"}, {"task_id": "mbpp_253_count_integer", "prompt": "\"\"\"\tWrite a jlthon function that returns the number of integer elements in a given vector.\"\"\"\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_integer;\n\t@test(candidate([1, 2, \"abc\", 1.2]) == 2)\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([1, 1.2, 4, 5.1]) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "\"\"\"\tWrite a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\"\"\"\nfunction combinations_colors(l::Vector{String}, n::Int64)::Vector{Vector{String}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = combinations_colors;\n\t@test(candidate([\"Red\", \"Green\", \"Blue\"], 1) == [[\"Red\"], [\"Green\"], [\"Blue\"]])\n\t@test(candidate([\"Red\", \"Green\", \"Blue\"], 2) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]])\n\t@test(candidate([\"Red\", \"Green\", \"Blue\"], 3) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "\"\"\"\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\"\"\"\nfunction count_Primes_nums(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_Primes_nums;\n\t@test(candidate(5) == 2)\n\t@test(candidate(10) == 4)\n\t@test(candidate(100) == 25)\nend\n", "language": "jl"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "\"\"\"\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\"\"\"\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = swap_numbers;\n\t@test(candidate(10, 20) == [20, 10])\n\t@test(candidate(15, 17) == [17, 15])\n\t@test(candidate(100, 200) == [200, 100])\nend\n", "language": "jl"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "\"\"\"\tWrite a function to maximize the given two vectors.\"\"\"\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = maximize_elements;\n\t@test(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]])\n\t@test(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[7, 8], [5, 10], [3, 10], [8, 11]])\n\t@test(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[8, 9], [6, 11], [4, 11], [9, 12]])\nend\n", "language": "jl"}, {"task_id": "mbpp_260_newman_prime", "prompt": "\"\"\"\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\"\"\"\nfunction newman_prime(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = newman_prime;\n\t@test(candidate(3) == 7)\n\t@test(candidate(4) == 17)\n\t@test(candidate(5) == 41)\nend\n", "language": "jl"}, {"task_id": "mbpp_261_division_elements", "prompt": "\"\"\"\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\"\"\"\nfunction division_elements(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = division_elements;\n\t@test(candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3))\n\t@test(candidate((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4))\n\t@test(candidate((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2))\nend\n", "language": "jl"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "\"\"\"\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\"\"\"\nfunction split_two_parts(list1::Vector{Any}, L::Int64)::Any \n", "test": "using Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n", "language": "jl"}, {"task_id": "mbpp_264_dog_age", "prompt": "\"\"\"\tWrite a function to calculate a dog's age in dog's years.\"\"\"\nfunction dog_age(h_age::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = dog_age;\n\t@test(candidate(12) == 61)\n\t@test(candidate(15) == 73)\n\t@test(candidate(24) == 109)\nend\n", "language": "jl"}, {"task_id": "mbpp_265_list_split", "prompt": "\"\"\"\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\"\"\"\nfunction list_split(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = list_split;\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3) == [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])\n\t@test(candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2) == [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "\"\"\"\tWrite a function to find the lateral surface area of a cube given its side length.\"\"\"\nfunction lateralsurface_cube(l::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = lateralsurface_cube;\n\t@test(candidate(5) == 100)\n\t@test(candidate(9) == 324)\n\t@test(candidate(10) == 400)\nend\n", "language": "jl"}, {"task_id": "mbpp_267_square_Sum", "prompt": "\"\"\"\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\"\"\"\nfunction square_Sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = square_Sum;\n\t@test(candidate(2) == 10)\n\t@test(candidate(3) == 35)\n\t@test(candidate(4) == 84)\nend\n", "language": "jl"}, {"task_id": "mbpp_268_find_star_num", "prompt": "\"\"\"\tWrite a function to find the n'th star number.\"\"\"\nfunction find_star_num(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_star_num;\n\t@test(candidate(3) == 37)\n\t@test(candidate(4) == 73)\n\t@test(candidate(5) == 121)\nend\n", "language": "jl"}, {"task_id": "mbpp_269_ascii_value", "prompt": "\"\"\"\tWrite a function to find the ascii value of a character.\"\"\"\nfunction ascii_value(k::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = ascii_value;\n\t@test(candidate(\"A\") == 65)\n\t@test(candidate(\"R\") == 82)\n\t@test(candidate(\"S\") == 83)\nend\n", "language": "jl"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of even numbers at even positions of a vector.\"\"\"\nfunction sum_even_and_even_index(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_even_and_even_index;\n\t@test(candidate([5, 6, 12, 1, 18, 8]) == 30)\n\t@test(candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\n\t@test(candidate([5, 6, 12, 1]) == 12)\nend\n", "language": "jl"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "\"\"\"\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\"\"\"\nfunction even_Power_Sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = even_Power_Sum;\n\t@test(candidate(2) == 1056)\n\t@test(candidate(3) == 8832)\n\t@test(candidate(1) == 32)\nend\n", "language": "jl"}, {"task_id": "mbpp_272_rear_extract", "prompt": "\"\"\"\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\"\"\"\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = rear_extract;\n\t@test(candidate([(1, \"Rash\", 21), (2, \"Varsha\", 20), (3, \"Kil\", 19)]) == [21, 20, 19])\n\t@test(candidate([(1, \"Sai\", 36), (2, \"Ayesha\", 25), (3, \"Salman\", 45)]) == [36, 25, 45])\n\t@test(candidate([(1, \"Sudeep\", 14), (2, \"Vandana\", 36), (3, \"Dawood\", 56)]) == [14, 36, 56])\nend\n", "language": "jl"}, {"task_id": "mbpp_273_substract_elements", "prompt": "\"\"\"\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\"\"\"\nfunction substract_elements(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Tuple{Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = substract_elements;\n\t@test(candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13))\n\t@test(candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13))\n\t@test(candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3))\nend\n", "language": "jl"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "\"\"\"\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\"\"\"\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = even_binomial_Coeff_Sum;\n\t@test(candidate(4) == 8)\n\t@test(candidate(6) == 32)\n\t@test(candidate(2) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_277_dict_filter", "prompt": "\"\"\"\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\"\"\"\nfunction dict_filter(dict::Dict{String, Int64}>, n::Int64)::Dict{String, Int64}> \n", "test": "using Test\n\n@testset begin\n\ncandidate = dict_filter;\n\t@test(candidate(Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 170) == Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190))\n\t@test(candidate(Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 180) == Dict(\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190))\n\t@test(candidate(Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 190) == Dict(\"Pierre Cox\" => 190))\nend\n", "language": "jl"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "\"\"\"\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\"\"\"\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_first_elements;\n\t@test(candidate([1, 5, 7, (4, 6), 10]) == 3)\n\t@test(candidate([2, 9, (5, 7), 11]) == 2)\n\t@test(candidate([11, 15, 5, 8, (2, 3), 8]) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "\"\"\"\tWrite a function to find the nth decagonal number.\"\"\"\nfunction is_num_decagonal(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_num_decagonal;\n\t@test(candidate(3) == 27)\n\t@test(candidate(7) == 175)\n\t@test(candidate(10) == 370)\nend\n", "language": "jl"}, {"task_id": "mbpp_280_sequential_search", "prompt": "\"\"\"\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\"\"\"\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sequential_search;\n\t@test(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (true, 3))\n\t@test(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61) == (true, 7))\n\t@test(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48) == (true, 6))\nend\n", "language": "jl"}, {"task_id": "mbpp_281_all_unique", "prompt": "\"\"\"\tWrite a jlthon function to check if the elements of a given vector are unique or not.\"\"\"\nfunction all_unique(test_list::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = all_unique;\n\t@test(candidate([1, 2, 3]) == true)\n\t@test(candidate([1, 2, 1, 2]) == false)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_282_sub_list", "prompt": "\"\"\"\tWrite a function to subtract two vectors element-wise.\"\"\"\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sub_list;\n\t@test(candidate([1, 2, 3], [4, 5, 6]) == [-3, -3, -3])\n\t@test(candidate([1, 2], [3, 4]) == [-2, -2])\n\t@test(candidate([90, 120], [50, 70]) == [40, 50])\nend\n", "language": "jl"}, {"task_id": "mbpp_283_validate", "prompt": "\"\"\"\tWrite a jlthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\"\"\"\nfunction validate(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = validate;\n\t@test(candidate(1234) == true)\n\t@test(candidate(51241) == false)\n\t@test(candidate(321) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_284_check_element", "prompt": "\"\"\"\tWrite a function that takes in a vector and element and checks whether all items in the vector are equal to the given element.\"\"\"\nfunction check_element(list::Vector{Any}, element::Any)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_element;\n\t@test(candidate([\"green\", \"orange\", \"black\", \"white\"], \"blue\") == false)\n\t@test(candidate([1, 2, 3, 4], 7) == false)\n\t@test(candidate([\"green\", \"green\", \"green\", \"green\"], \"green\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "\"\"\"\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\"\"\nfunction text_match_two_three(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_match_two_three;\n\t@test(candidate(\"ac\") == false)\n\t@test(candidate(\"dc\") == false)\n\t@test(candidate(\"abbbba\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "\"\"\"\tWrite a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\"\"\"\nfunction max_sub_array_sum_repeated(a::Vector{Int64}, n::Int64, k::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_sub_array_sum_repeated;\n\t@test(candidate([10, 20, -30, -1], 4, 3) == 30)\n\t@test(candidate([-1, 10, 20], 3, 2) == 59)\n\t@test(candidate([-1, -2, -3], 3, 3) == -1)\nend\n", "language": "jl"}, {"task_id": "mbpp_287_square_Sum", "prompt": "\"\"\"\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\"\"\"\nfunction square_Sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = square_Sum;\n\t@test(candidate(2) == 20)\n\t@test(candidate(3) == 56)\n\t@test(candidate(4) == 120)\nend\n", "language": "jl"}, {"task_id": "mbpp_290_max_length", "prompt": "\"\"\"\tWrite a function to find the vector of maximum length in a vector of vectors.\"\"\"\nfunction max_length(list1::Vector{Vector{Int64}})::Tuple{Int64, Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_length;\n\t@test(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))\n\t@test(candidate([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15]))\n\t@test(candidate([[5], [15, 20, 25]]) == (3, [15, 20, 25]))\nend\n", "language": "jl"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "\"\"\"\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\"\"\"\nfunction count_no_of_ways(n::Int64, k::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_no_of_ways;\n\t@test(candidate(2, 4) == 16)\n\t@test(candidate(3, 2) == 6)\n\t@test(candidate(4, 4) == 228)\nend\n", "language": "jl"}, {"task_id": "mbpp_292_find", "prompt": "\"\"\"\tWrite a jlthon function to find quotient of two numbers (rounded down to the nearest integer).\"\"\"\nfunction find(n::Int64, m::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find;\n\t@test(candidate(10, 3) == 3)\n\t@test(candidate(4, 2) == 2)\n\t@test(candidate(20, 5) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "\"\"\"\tWrite a function to find the third side of a right angled triangle.\"\"\"\nfunction otherside_rightangle(w::Int64, h::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = otherside_rightangle;\n\t@test(candidate(7, 8) == 10.63014581273465)\n\t@test(candidate(3, 4) == 5)\n\t@test(candidate(7, 15) == 16.55294535724685)\nend\n", "language": "jl"}, {"task_id": "mbpp_294_max_val", "prompt": "\"\"\"\tWrite a function to find the maximum value in a given heterogeneous vector.\"\"\"\nfunction max_val(listval::Vector{Union{String, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_val;\n\t@test(candidate([\"Python\", 3, 2, 4, 5, \"version\"]) == 5)\n\t@test(candidate([\"Python\", 15, 20, 25]) == 25)\n\t@test(candidate([\"Python\", 30, 20, 40, 50, \"version\"]) == 50)\nend\n", "language": "jl"}, {"task_id": "mbpp_295_sum_div", "prompt": "\"\"\"\tWrite a function to return the sum of all divisors of a number.\"\"\"\nfunction sum_div(number::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_div;\n\t@test(candidate(8) == 7)\n\t@test(candidate(12) == 16)\n\t@test(candidate(7) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "\"\"\"\tWrite a jlthon function to count inversions in a vector.\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_297_flatten_list", "prompt": "\"\"\"\tWrite a function to flatten a given nested vector structure.\"\"\"\nfunction flatten_list(list1::Vector{Union{Int64, Vector{Int64}}})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = flatten_list;\n\t@test(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n\t@test(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])\nend\n", "language": "jl"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "\"\"\"\tWrite a function to calculate the maximum aggregate from the vector of tuples.\"\"\"\nfunction max_aggregate(stdata::Vector{Tuple{String, Int64}})::Tuple{String, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_aggregate;\n\t@test(candidate([(\"Juan Whelan\", 90), (\"Sabah Colley\", 88), (\"Peter Nichols\", 7), (\"Juan Whelan\", 122), (\"Sabah Colley\", 84)]) == (\"Juan Whelan\", 212))\n\t@test(candidate([(\"Juan Whelan\", 50), (\"Sabah Colley\", 48), (\"Peter Nichols\", 37), (\"Juan Whelan\", 22), (\"Sabah Colley\", 14)]) == (\"Juan Whelan\", 72))\n\t@test(candidate([(\"Juan Whelan\", 10), (\"Sabah Colley\", 20), (\"Peter Nichols\", 30), (\"Juan Whelan\", 40), (\"Sabah Colley\", 50)]) == (\"Sabah Colley\", 70))\nend\n", "language": "jl"}, {"task_id": "mbpp_304_find_Element", "prompt": "\"\"\"\tWrite a jlthon function to find element at a given index after number of rotations.\"\"\"\nfunction find_Element(arr::Vector{Int64}, ranges::Vector{Vector{Int64}}, rotations::Int64, index::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Element;\n\t@test(candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3)\n\t@test(candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) == 3)\n\t@test(candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_305_start_withp", "prompt": "\"\"\"\tWrite a function to return two words from a vector of words starting with letter 'p'.\"\"\"\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = start_withp;\n\t@test(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == (\"Python\", \"PHP\"))\n\t@test(candidate([\"Python Programming\", \"Java Programming\"]) == (\"Python\", \"Programming\"))\n\t@test(candidate([\"Pqrst Pqr\", \"qrstuv\"]) == (\"Pqrst\", \"Pqr\"))\nend\n", "language": "jl"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "\"\"\"\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\"\"\"\nfunction max_sum_increasing_subseq(a::Vector{Int64}, n::Int64, index::Int64, k::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_sum_increasing_subseq;\n\t@test(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11)\n\t@test(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7)\n\t@test(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71)\nend\n", "language": "jl"}, {"task_id": "mbpp_308_large_product", "prompt": "\"\"\"\tWrite a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\"\"\"\nfunction large_product(nums1::Vector{Int64}, nums2::Vector{Int64}, N::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = large_product;\n\t@test(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50])\n\t@test(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48])\n\t@test(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45])\nend\n", "language": "jl"}, {"task_id": "mbpp_309_maximum", "prompt": "\"\"\"\tWrite a jlthon function to find the maximum of two numbers.\"\"\"\nfunction maximum(a::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate(5, 10) == 10)\n\t@test(candidate(-1, -2) == -1)\n\t@test(candidate(9, 7) == 9)\nend\n", "language": "jl"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "\"\"\"\tWrite a function to convert a given string to a vector of characters.\"\"\"\nfunction string_to_tuple(str1::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = string_to_tuple;\n\t@test(candidate(\"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"])\n\t@test(candidate(\"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"])\n\t@test(candidate(\"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "\"\"\"\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\"\"\"\nfunction highest_Power_of_2(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = highest_Power_of_2;\n\t@test(candidate(10) == 8)\n\t@test(candidate(19) == 16)\n\t@test(candidate(32) == 32)\nend\n", "language": "jl"}, {"task_id": "mbpp_389_find_lucas", "prompt": "\"\"\"\tWrite a function to find the n'th lucas number.\"\"\"\nfunction find_lucas(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_lucas;\n\t@test(candidate(9) == 76)\n\t@test(candidate(4) == 7)\n\t@test(candidate(3) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_390_add_string", "prompt": "\"\"\"\tWrite a function to apply a given format string to all of the elements in a vector.\"\"\"\nfunction add_string(list_::Vector{Any}, string::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_string;\n\t@test(candidate([1, 2, 3, 4], \"temp{0}\") == [\"temp1\", \"temp2\", \"temp3\", \"temp4\"])\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\") == [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])\n\t@test(candidate([5, 6, 7, 8], \"string{0}\") == [\"string5\", \"string6\", \"string7\", \"string8\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "\"\"\"\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\"\"\"\nfunction get_max_sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_max_sum;\n\t@test(candidate(60) == 106)\n\t@test(candidate(10) == 12)\n\t@test(candidate(2) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_393_max_length_list", "prompt": "\"\"\"\tWrite a function to find the vector with maximum length.\"\"\"\nfunction max_length_list(input_list::Vector{Vector{Int64}})::Tuple{Int64, Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_length_list;\n\t@test(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))\n\t@test(candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) == (5, [1, 2, 3, 4, 5]))\n\t@test(candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == (4, [6, 7, 8, 9]))\nend\n", "language": "jl"}, {"task_id": "mbpp_394_check_distinct", "prompt": "\"\"\"\tWrite a function to check if given vector contains no duplicates.\"\"\"\nfunction check_distinct(test_tup::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_distinct;\n\t@test(candidate([1, 4, 5, 6, 1, 4]) == false)\n\t@test(candidate([1, 4, 5, 6]) == true)\n\t@test(candidate([2, 3, 4, 5, 6]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "\"\"\"\tWrite a jlthon function to find the first non-repeated character in a given string.\"\"\"\nfunction first_non_repeating_character(str1::String)::Union{String, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = first_non_repeating_character;\n\t@test(candidate(\"abcabc\") == nothing)\n\t@test(candidate(\"abc\") == \"a\")\n\t@test(candidate(\"ababc\") == \"c\")\nend\n", "language": "jl"}, {"task_id": "mbpp_396_check_char", "prompt": "\"\"\"\tWrite a function to check whether the given string starts and ends with the same character or not.\"\"\"\nfunction check_char(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_char;\n\t@test(candidate(\"abba\") == \"Valid\")\n\t@test(candidate(\"a\") == \"Valid\")\n\t@test(candidate(\"abcd\") == \"Invalid\")\nend\n", "language": "jl"}, {"task_id": "mbpp_397_median_numbers", "prompt": "\"\"\"\tWrite a function to find the median of three numbers.\"\"\"\nfunction median_numbers(a::Int64, b::Int64, c::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = median_numbers;\n\t@test(candidate(25, 55, 65) == 55.0)\n\t@test(candidate(20, 10, 30) == 20.0)\n\t@test(candidate(15, 45, 75) == 45.0)\nend\n", "language": "jl"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "\"\"\"\tWrite a function to compute the sum of digits of each number of a given vector.\"\"\"\nfunction sum_of_digits(nums::Vector{Any})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_of_digits;\n\t@test(candidate([10, 2, 56]) == 14)\n\t@test(candidate([[10, 20, 4, 5, \"b\", 70, \"a\"]]) == 19)\n\t@test(candidate([10, 20, -4, 5, -70]) == 19)\nend\n", "language": "jl"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "\"\"\"\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\"\"\"\nfunction bitwise_xor(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = bitwise_xor;\n\t@test(candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10))\n\t@test(candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14))\n\t@test(candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13))\nend\n", "language": "jl"}, {"task_id": "mbpp_400_extract_freq", "prompt": "\"\"\"\tWrite a function to extract the number of unique tuples in the given vector.\"\"\"\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_freq;\n\t@test(candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3)\n\t@test(candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4)\n\t@test(candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "\"\"\"\tWrite a function to perform index wise addition of vector elements in the given two nested vectors.\"\"\"\nfunction add_nested_tuples(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_nested_tuples;\n\t@test(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]])\n\t@test(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[9, 12], [9, 16], [5, 12], [10, 15]])\n\t@test(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[11, 14], [11, 18], [7, 14], [12, 17]])\nend\n", "language": "jl"}, {"task_id": "mbpp_404_minimum", "prompt": "\"\"\"\tWrite a jlthon function to find the minimum of two numbers.\"\"\"\nfunction minimum(a::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = minimum;\n\t@test(candidate(1, 2) == 1)\n\t@test(candidate(-5, -4) == -5)\n\t@test(candidate(0, 0) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "\"\"\"\tWrite a function to check whether an element exists within a tuple.\"\"\"\nfunction check_tuplex(tuplex::Vector{Union{String, Int64}}, tuple1::Any)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_tuplex;\n\t@test(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\") == true)\n\t@test(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\") == false)\n\t@test(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_406_find_Parity", "prompt": "\"\"\"\tWrite a jlthon function to find whether the parity of a given number is odd.\"\"\"\nfunction find_Parity(x::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Parity;\n\t@test(candidate(12) == false)\n\t@test(candidate(7) == true)\n\t@test(candidate(10) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "\"\"\"\tWrite a function to create the next bigger number by rearranging the digits of a given number.\"\"\"\nfunction rearrange_bigger(n::Int64)::Any \n", "test": "using Test\n\n@testset begin\n\ncandidate = rearrange_bigger;\n\t@test(candidate(12) == 21)\n\t@test(candidate(10) == false)\n\t@test(candidate(102) == 120)\nend\n", "language": "jl"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "\"\"\"\tWrite a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\"\"\"\nfunction k_smallest_pairs(nums1::Vector{Int64}, nums2::Vector{Int64}, k::Int64)::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = k_smallest_pairs;\n\t@test(candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]])\n\t@test(candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]])\n\t@test(candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]])\nend\n", "language": "jl"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "\"\"\"\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\"\"\"\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = min_product_tuple;\n\t@test(candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8)\n\t@test(candidate([(10, 20), (15, 2), (5, 10)]) == 30)\n\t@test(candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100)\nend\n", "language": "jl"}, {"task_id": "mbpp_410_min_val", "prompt": "\"\"\"\tWrite a function to find the minimum value in a given heterogeneous vector.\"\"\"\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = min_val;\n\t@test(candidate([\"Python\", 3, 2, 4, 5, \"version\"]) == 2)\n\t@test(candidate([\"Python\", 15, 20, 25]) == 15)\n\t@test(candidate([\"Python\", 30, 20, 40, 50, \"version\"]) == 20)\nend\n", "language": "jl"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "\"\"\"\tWrite a function to convert the given snake case string to camel case string.\"\"\"\nfunction snake_to_camel(word::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"android_tv\") == \"AndroidTv\")\n\t@test(candidate(\"google_pixel\") == \"GooglePixel\")\n\t@test(candidate(\"apple_watch\") == \"AppleWatch\")\nend\n", "language": "jl"}, {"task_id": "mbpp_412_remove_odd", "prompt": "\"\"\"\tWrite a jlthon function to remove odd numbers from a given vector.\"\"\"\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_odd;\n\t@test(candidate([1, 2, 3]) == [2])\n\t@test(candidate([2, 4, 6]) == [2, 4, 6])\n\t@test(candidate([10, 20, 3]) == [10, 20])\nend\n", "language": "jl"}, {"task_id": "mbpp_413_extract_nth_element", "prompt": "\"\"\"\tWrite a function to extract the nth element from a given vector of tuples.\"\"\"\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_nth_element;\n\t@test(candidate([(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 0) == [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"])\n\t@test(candidate([(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 2) == [99, 96, 94, 98])\n\t@test(candidate([(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 1) == [98, 97, 91, 94])\nend\n", "language": "jl"}, {"task_id": "mbpp_414_overlapping", "prompt": "\"\"\"\tWrite a jlthon function to check whether any value in a sequence exists in a sequence or not.\"\"\"\nfunction overlapping(list1::Vector{Int64}, list2::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = overlapping;\n\t@test(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == false)\n\t@test(candidate([1, 2, 3], [4, 5, 6]) == false)\n\t@test(candidate([1, 4, 5], [1, 4, 5]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_415_max_Product", "prompt": "\"\"\"\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\"\"\"\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_Product;\n\t@test(candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8))\n\t@test(candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6))\n\t@test(candidate([1, 2, 3]) == (2, 3))\nend\n", "language": "jl"}, {"task_id": "mbpp_417_group_tuples", "prompt": "\"\"\"\tWrite a function to find common first element in given vector of vectors.\"\"\"\nfunction group_tuples(Input::Vector{Vector{String}})::Vector{Vector{String}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = group_tuples;\n\t@test(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])\n\t@test(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n\t@test(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_418_Find_Max", "prompt": "\"\"\"\tWrite a jlthon function to find the element of a vector having maximum length.\"\"\"\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = Find_Max;\n\t@test(candidate([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]) == [\"A\", \"B\", \"C\"])\n\t@test(candidate([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3])\n\t@test(candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1])\nend\n", "language": "jl"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "\"\"\"\tWrite a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\"\"\"\nfunction round_and_sum(list1::Vector{Union{Float64, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = round_and_sum;\n\t@test(candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243)\n\t@test(candidate([5, 2, 9, 24.3, 29]) == 345)\n\t@test(candidate([25.0, 56.7, 89.2]) == 513)\nend\n", "language": "jl"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "\"\"\"\tWrite a jlthon function to find the cube sum of first n even natural numbers.\"\"\"\nfunction cube_Sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = cube_Sum;\n\t@test(candidate(2) == 72)\n\t@test(candidate(3) == 288)\n\t@test(candidate(4) == 800)\nend\n", "language": "jl"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "\"\"\"\tWrite a function to concatenate each element of tuple by the delimiter.\"\"\"\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = concatenate_tuple;\n\t@test(candidate((\"ID\", \"is\", 4, \"UTS\")) == \"ID-is-4-UTS\")\n\t@test(candidate((\"QWE\", \"is\", 4, \"RTY\")) == \"QWE-is-4-RTY\")\n\t@test(candidate((\"ZEN\", \"is\", 4, \"OP\")) == \"ZEN-is-4-OP\")\nend\n", "language": "jl"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "\"\"\"\tWrite a jlthon function to find the average of cubes of first n natural numbers.\"\"\"\nfunction find_Average_Of_Cube(n::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Average_Of_Cube;\n\t@test(candidate(2) == 4.5)\n\t@test(candidate(3) == 12)\n\t@test(candidate(1) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_424_extract_rear", "prompt": "\"\"\"\tWrite a function to extract only the rear index element of each string in the given tuple.\"\"\"\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_rear;\n\t@test(candidate((\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"])\n\t@test(candidate((\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"])\n\t@test(candidate((\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "\"\"\"\tWrite a function to count the number of subvectors containing a particular element.\"\"\"\nfunction count_element_in_list(list1::Vector{Vector{Any}}, x::Any)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_element_in_list;\n\t@test(candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3)\n\t@test(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\") == 3)\n\t@test(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\") == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "\"\"\"\tWrite a function to filter odd numbers.\"\"\"\nfunction filter_oddnumbers(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = filter_oddnumbers;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9])\n\t@test(candidate([10, 20, 45, 67, 84, 93]) == [45, 67, 93])\n\t@test(candidate([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3])\nend\n", "language": "jl"}, {"task_id": "mbpp_427_change_date_format", "prompt": "\"\"\"\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\"\"\"\nfunction change_date_format(dt::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = change_date_format;\n\t@test(candidate(\"2026-01-02\") == \"02-01-2026\")\n\t@test(candidate(\"2020-11-13\") == \"13-11-2020\")\n\t@test(candidate(\"2021-04-26\") == \"26-04-2021\")\nend\n", "language": "jl"}, {"task_id": "mbpp_428_shell_sort", "prompt": "\"\"\"\tWrite a function to sort the given vector by using shell sort.\"\"\"\nfunction shell_sort(my_list::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = shell_sort;\n\t@test(candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95])\n\t@test(candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87])\n\t@test(candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96])\nend\n", "language": "jl"}, {"task_id": "mbpp_429_and_tuples", "prompt": "\"\"\"\tWrite a function to extract the elementwise and tuples from the given two tuples.\"\"\"\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = and_tuples;\n\t@test(candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1))\n\t@test(candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0))\n\t@test(candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0))\nend\n", "language": "jl"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "\"\"\"\tWrite a function to find the directrix of a parabola.\"\"\"\nfunction parabola_directrix(a::Int64, b::Int64, c::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = parabola_directrix;\n\t@test(candidate(5, 3, 2) == -198)\n\t@test(candidate(9, 8, 4) == -2336)\n\t@test(candidate(2, 4, 6) == -130)\nend\n", "language": "jl"}, {"task_id": "mbpp_431_common_element", "prompt": "\"\"\"\tWrite a function that takes two vectors and returns true if they have at least one common element.\"\"\"\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = common_element;\n\t@test(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == true)\n\t@test(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == nothing)\n\t@test(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "\"\"\"\tWrite a function to find the median length of a trapezium.\"\"\"\nfunction median_trapezium(base1::Int64, base2::Int64, height::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = median_trapezium;\n\t@test(candidate(15, 25, 35) == 20)\n\t@test(candidate(10, 20, 30) == 15)\n\t@test(candidate(6, 9, 4) == 7.5)\nend\n", "language": "jl"}, {"task_id": "mbpp_433_check_greater", "prompt": "\"\"\"\tWrite a function to check whether the entered number is greater than the elements of the given vector.\"\"\"\nfunction check_greater(arr::Vector{Int64}, number::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_greater;\n\t@test(candidate([1, 2, 3, 4, 5], 4) == false)\n\t@test(candidate([2, 3, 4, 5, 6], 8) == true)\n\t@test(candidate([9, 7, 4, 8, 6, 1], 11) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_434_text_match_one", "prompt": "\"\"\"\tWrite a function that matches a string that has an a followed by one or more b's.\"\"\"\nfunction text_match_one(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_match_one;\n\t@test(candidate(\"ac\") == false)\n\t@test(candidate(\"dc\") == false)\n\t@test(candidate(\"abba\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_435_last_Digit", "prompt": "\"\"\"\tWrite a jlthon function to find the last digit of a given number.\"\"\"\nfunction last_Digit(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = last_Digit;\n\t@test(candidate(123) == 3)\n\t@test(candidate(25) == 5)\n\t@test(candidate(30) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_436_neg_nos", "prompt": "\"\"\"\tWrite a jlthon function to return the negative numbers in a vector.\"\"\"\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = neg_nos;\n\t@test(candidate([-1, 4, 5, -6]) == [-1, -6])\n\t@test(candidate([-1, -2, 3, 4]) == [-1, -2])\n\t@test(candidate([-7, -6, 8, 9]) == [-7, -6])\nend\n", "language": "jl"}, {"task_id": "mbpp_437_remove_odd", "prompt": "\"\"\"\tWrite a function to remove odd characters in a string.\"\"\"\nfunction remove_odd(str1::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_odd;\n\t@test(candidate(\"python\") == \"yhn\")\n\t@test(candidate(\"program\") == \"rga\")\n\t@test(candidate(\"language\") == \"agae\")\nend\n", "language": "jl"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "\"\"\"\tWrite a function to count bidirectional tuple pairs.\"\"\"\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_bidirectional;\n\t@test(candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3)\n\t@test(candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2)\n\t@test(candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "\"\"\"\tWrite a function to join a vector of multiple integers into a single integer.\"\"\"\nfunction multiple_to_single(L::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = multiple_to_single;\n\t@test(candidate([11, 33, 50]) == 113350)\n\t@test(candidate([-1, 2, 3, 4, 5, 6]) == -123456)\n\t@test(candidate([10, 15, 20, 25]) == 10152025)\nend\n", "language": "jl"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "\"\"\"\tWrite a function to find the first adverb and their positions in a given sentence.\"\"\"\nfunction find_adverb_position(text::String)::Tuple{Int64, Int64, String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_adverb_position;\n\t@test(candidate(\"clearly!! we can see the sky\") == (0, 7, \"clearly\"))\n\t@test(candidate(\"seriously!! there are many roses\") == (0, 9, \"seriously\"))\n\t@test(candidate(\"unfortunately!! sita is going to home\") == (0, 13, \"unfortunately\"))\nend\n", "language": "jl"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "\"\"\"\tWrite a function to find the surface area of a cube of a given size.\"\"\"\nfunction surfacearea_cube(l::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = surfacearea_cube;\n\t@test(candidate(5) == 150)\n\t@test(candidate(3) == 54)\n\t@test(candidate(10) == 600)\nend\n", "language": "jl"}, {"task_id": "mbpp_442_positive_count", "prompt": "\"\"\"\tWrite a function to find the ration of positive numbers in a vector of integers.\"\"\"\nfunction positive_count(nums::Vector{Int64})::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = positive_count;\n\t@test(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\n\t@test(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\n\t@test(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)\nend\n", "language": "jl"}, {"task_id": "mbpp_443_largest_neg", "prompt": "\"\"\"\tWrite a jlthon function to find the largest negative number from the given vector.\"\"\"\nfunction largest_neg(list1::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = largest_neg;\n\t@test(candidate([1, 2, 3, -4, -6]) == -6)\n\t@test(candidate([1, 2, 3, -8, -9]) == -9)\n\t@test(candidate([1, 2, 3, 4, -1]) == -1)\nend\n", "language": "jl"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "\"\"\"\tWrite a function to trim each vector by k in the given vectors.\"\"\"\nfunction trim_tuple(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = trim_tuple;\n\t@test(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]])\n\t@test(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]])\n\t@test(candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) == [[8, 4], [8, 12], [1, 7], [6, 9]])\nend\n", "language": "jl"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "\"\"\"\tWrite a function to perform index wise multiplication of vector elements in the given two vectors.\"\"\"\nfunction index_multiplication(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = index_multiplication;\n\t@test(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]])\n\t@test(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[14, 32], [20, 60], [6, 20], [16, 44]])\n\t@test(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[24, 45], [30, 77], [12, 33], [27, 60]])\nend\n", "language": "jl"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "\"\"\"\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\"\"\"\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_Occurrence;\n\t@test(candidate((\"a\", \"a\", \"c\", \"b\", \"d\"), [\"a\", \"b\"]) == 3)\n\t@test(candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6)\n\t@test(candidate((1, 2, 3, 4, 5, 6), [1, 2]) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_447_cube_nums", "prompt": "\"\"\"\tWrite a function to find cubes of individual elements in a vector.\"\"\"\nfunction cube_nums(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = cube_nums;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000])\n\t@test(candidate([10, 20, 30]) == [1000, 8000, 27000])\n\t@test(candidate([12, 15]) == [1728, 3375])\nend\n", "language": "jl"}, {"task_id": "mbpp_448_cal_sum", "prompt": "\"\"\"\tWrite a function to calculate the sum of perrin numbers.\"\"\"\nfunction cal_sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = cal_sum;\n\t@test(candidate(9) == 49)\n\t@test(candidate(10) == 66)\n\t@test(candidate(11) == 88)\nend\n", "language": "jl"}, {"task_id": "mbpp_450_extract_string", "prompt": "\"\"\"\tWrite a function to extract specified size of strings from a given vector of string values.\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "\"\"\"\tWrite a function to remove all whitespaces from the given string.\"\"\"\nfunction remove_whitespaces(text1::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_whitespaces;\n\t@test(candidate(\" Google    Flutter \") == \"GoogleFlutter\")\n\t@test(candidate(\" Google    Dart \") == \"GoogleDart\")\n\t@test(candidate(\" iOS    Swift \") == \"iOSSwift\")\nend\n", "language": "jl"}, {"task_id": "mbpp_452_loss_amount", "prompt": "\"\"\"\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\"\"\"\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = loss_amount;\n\t@test(candidate(1500, 1200) == 0)\n\t@test(candidate(100, 200) == 100)\n\t@test(candidate(2000, 5000) == 3000)\nend\n", "language": "jl"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of even factors of a number.\"\"\"\nfunction sumofFactors(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sumofFactors;\n\t@test(candidate(18) == 26)\n\t@test(candidate(30) == 48)\n\t@test(candidate(6) == 8)\nend\n", "language": "jl"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "\"\"\"\tWrite a function that matches a word containing 'z'.\"\"\"\nfunction text_match_wordz(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_match_wordz;\n\t@test(candidate(\"pythonz.\") == true)\n\t@test(candidate(\"xyz.\") == true)\n\t@test(candidate(\"  lang  .\") == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "\"\"\"\tWrite a function to check whether the given month number contains 31 days or not.\"\"\"\nfunction check_monthnumb_number(monthnum2::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_monthnumb_number;\n\t@test(candidate(5) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(6) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "\"\"\"\tWrite a function to reverse each string in a given vector of string values.\"\"\"\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = reverse_string_list;\n\t@test(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"])\n\t@test(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"])\n\t@test(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_457_Find_Min", "prompt": "\"\"\"\tWrite a jlthon function to find the subvector having minimum length.\"\"\"\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = Find_Min;\n\t@test(candidate([[1], [1, 2], [1, 2, 3]]) == [1])\n\t@test(candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1])\n\t@test(candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]) == [\"x\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "\"\"\"\tWrite a function to find the area of a rectangle.\"\"\"\nfunction rectangle_area(l::Int64, b::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = rectangle_area;\n\t@test(candidate(10, 20) == 200)\n\t@test(candidate(10, 5) == 50)\n\t@test(candidate(4, 2) == 8)\nend\n", "language": "jl"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "\"\"\"\tWrite a function to remove uppercase substrings from a given string.\"\"\"\nfunction remove_uppercase(str1::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_uppercase;\n\t@test(candidate(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\n\t@test(candidate(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\n\t@test(candidate(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")\nend\n", "language": "jl"}, {"task_id": "mbpp_460_Extract", "prompt": "\"\"\"\tWrite a jlthon function to get the first element of each subvector.\"\"\"\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = Extract;\n\t@test(candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6])\n\t@test(candidate([[1, 2, 3], [4, 5]]) == [1, 4])\n\t@test(candidate([[9, 8, 1], [1, 2]]) == [9, 1])\nend\n", "language": "jl"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "\"\"\"\tWrite a jlthon function to count the upper case characters in a given string.\"\"\"\nfunction upper_ctr(str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = upper_ctr;\n\t@test(candidate(\"PYthon\") == 1)\n\t@test(candidate(\"BigData\") == 1)\n\t@test(candidate(\"program\") == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "\"\"\"\tWrite a function to find the maximum product subvector of the given vector.\"\"\"\nfunction max_subarray_product(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_subarray_product;\n\t@test(candidate([1, -2, -3, 0, 7, -8, -2]) == 112)\n\t@test(candidate([6, -3, -10, 0, 2]) == 180)\n\t@test(candidate([-2, -40, 0, -2, -3]) == 80)\nend\n", "language": "jl"}, {"task_id": "mbpp_464_check_value", "prompt": "\"\"\"\tWrite a function to check if all values are same in a dictionary.\"\"\"\nfunction check_value(dict::Dict{String, Int64}>, n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_value;\n\t@test(candidate(Dict(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 10) == false)\n\t@test(candidate(Dict(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 12) == true)\n\t@test(candidate(Dict(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 5) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_468_max_product", "prompt": "\"\"\"\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\"\"\"\nfunction max_product(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_product;\n\t@test(candidate([3, 100, 4, 5, 150, 6]) == 3000)\n\t@test(candidate([4, 42, 55, 68, 80]) == 50265600)\n\t@test(candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460)\nend\n", "language": "jl"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "\"\"\"\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\"\"\"\nfunction add_pairwise(test_tup::Tuple{Int64, Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_pairwise;\n\t@test(candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18))\n\t@test(candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20))\n\t@test(candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22))\nend\n", "language": "jl"}, {"task_id": "mbpp_471_find_remainder", "prompt": "\"\"\"\tWrite a jlthon function to find the product of the vector multiplication modulo n.\"\"\"\nfunction find_remainder(arr::Vector{Int64}, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_remainder;\n\t@test(candidate([100, 10, 5, 25, 35, 14], 11) == 9)\n\t@test(candidate([1, 1, 1], 1) == 0)\n\t@test(candidate([1, 2, 1], 2) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "\"\"\"\tWrite a jlthon function to check whether the given vector contains consecutive numbers or not.\"\"\"\nfunction check_Consecutive(l::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_Consecutive;\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 2, 3, 5, 6]) == false)\n\t@test(candidate([1, 2, 1]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_474_replace_char", "prompt": "\"\"\"\tWrite a function to replace characters in a string.\"\"\"\nfunction replace_char(str1::String, ch::String, newch::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = replace_char;\n\t@test(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\")\n\t@test(candidate(\"character\", \"c\", \"a\") == \"aharaater\")\n\t@test(candidate(\"python\", \"l\", \"a\") == \"python\")\nend\n", "language": "jl"}, {"task_id": "mbpp_475_sort_counter", "prompt": "\"\"\"\tWrite a function to sort a dictionary by value.\"\"\"\nfunction sort_counter(dict1::Dict{String, Int64}>)::Vector{Tuple{String, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_counter;\n\t@test(candidate(Dict(\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87)) == [(\"Chemistry\", 87), (\"Physics\", 83), (\"Math\", 81)])\n\t@test(candidate(Dict(\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250)) == [(\"Math\", 400), (\"Physics\", 300), (\"Chemistry\", 250)])\n\t@test(candidate(Dict(\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250)) == [(\"Chemistry\", 1250), (\"Physics\", 1000), (\"Math\", 900)])\nend\n", "language": "jl"}, {"task_id": "mbpp_476_big_sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of the largest and smallest value in a given vector.\"\"\"\nfunction big_sum(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = big_sum;\n\t@test(candidate([1, 2, 3]) == 4)\n\t@test(candidate([-1, 2, 3, 4]) == 3)\n\t@test(candidate([2, 3, 6]) == 8)\nend\n", "language": "jl"}, {"task_id": "mbpp_477_is_lower", "prompt": "\"\"\"\tWrite a jlthon function to convert the given string to lower case.\"\"\"\nfunction is_lower(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_lower;\n\t@test(candidate(\"InValid\") == \"invalid\")\n\t@test(candidate(\"TruE\") == \"true\")\n\t@test(candidate(\"SenTenCE\") == \"sentence\")\nend\n", "language": "jl"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "\"\"\"\tWrite a function to remove lowercase substrings from a given string.\"\"\"\nfunction remove_lowercase(str1::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_lowercase;\n\t@test(candidate(\"PYTHon\") == \"PYTH\")\n\t@test(candidate(\"FInD\") == \"FID\")\n\t@test(candidate(\"STRinG\") == \"STRG\")\nend\n", "language": "jl"}, {"task_id": "mbpp_479_first_Digit", "prompt": "\"\"\"\tWrite a jlthon function to find the first digit of a given number.\"\"\"\nfunction first_Digit(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = first_Digit;\n\t@test(candidate(123) == 1)\n\t@test(candidate(456) == 4)\n\t@test(candidate(12) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_554_Split", "prompt": "\"\"\"\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n", "language": "jl"}, {"task_id": "mbpp_555_difference", "prompt": "\"\"\"\tWrite a jlthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\"\"\"\nfunction difference(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = difference;\n\t@test(candidate(3) == 30)\n\t@test(candidate(5) == 210)\n\t@test(candidate(2) == 6)\nend\n", "language": "jl"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "\"\"\"\tWrite a jlthon function to count the number of pairs whose xor value is odd.\"\"\"\nfunction find_Odd_Pair(A::Vector{Int64}, N::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Odd_Pair;\n\t@test(candidate([5, 4, 7, 2, 1], 5) == 6)\n\t@test(candidate([7, 2, 8, 1, 0, 5, 11], 7) == 12)\n\t@test(candidate([1, 2, 3], 3) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_557_toggle_string", "prompt": "\"\"\"\tWrite a function to toggle the case of all characters in a string.\"\"\"\nfunction toggle_string(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = toggle_string;\n\t@test(candidate(\"Python\") == \"pYTHON\")\n\t@test(candidate(\"Pangram\") == \"pANGRAM\")\n\t@test(candidate(\"LIttLE\") == \"liTTle\")\nend\n", "language": "jl"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\"\"\"\nfunction digit_distance_nums(n1::Int64, n2::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = digit_distance_nums;\n\t@test(candidate(1, 2) == 1)\n\t@test(candidate(23, 56) == 6)\n\t@test(candidate(123, 256) == 7)\nend\n", "language": "jl"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "\"\"\"\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\"\"\"\nfunction max_sub_array_sum(a::Vector{Int64}, size::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_sub_array_sum;\n\t@test(candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7)\n\t@test(candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8)\n\t@test(candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10)\nend\n", "language": "jl"}, {"task_id": "mbpp_560_union_elements", "prompt": "\"\"\"\tWrite a function to find the union of the elements of two given vectors and output them in sorted order.\"\"\"\nfunction union_elements(test_tup1::Vector{Int64}, test_tup2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = union_elements;\n\t@test(candidate([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10])\n\t@test(candidate([1, 2, 3, 4], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6])\n\t@test(candidate([11, 12, 13, 14], [13, 15, 16, 17]) == [11, 12, 13, 14, 15, 16, 17])\nend\n", "language": "jl"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "\"\"\"\tWrite a jlthon function to find the length of the longest subvectors.\"\"\"\nfunction Find_Max_Length(lst::Vector{Vector{Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = Find_Max_Length;\n\t@test(candidate([[1], [1, 4], [5, 6, 7, 8]]) == 4)\n\t@test(candidate([[0, 1], [2, 2], [3, 2, 1]]) == 3)\n\t@test(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_563_extract_values", "prompt": "\"\"\"\tWrite a function to extract values between quotation marks from a string.\"\"\"\nfunction extract_values(text::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_values;\n\t@test(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])\n\t@test(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])\n\t@test(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "\"\"\"\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\"\"\"\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_Pairs;\n\t@test(candidate([1, 2, 1], 3) == 2)\n\t@test(candidate([1, 1, 1, 1], 4) == 0)\n\t@test(candidate([1, 2, 3, 4, 5], 5) == 10)\nend\n", "language": "jl"}, {"task_id": "mbpp_565_split", "prompt": "\"\"\"\tWrite a jlthon function to split a string into characters.\"\"\"\nfunction split(word::String)::Vector{String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = split;\n\t@test(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n\t@test(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"])\n\t@test(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_566_sum_digits", "prompt": "\"\"\"\tWrite a function to get the sum of the digits of a non-negative integer.\"\"\"\nfunction sum_digits(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_digits;\n\t@test(candidate(345) == 12)\n\t@test(candidate(12) == 3)\n\t@test(candidate(97) == 16)\nend\n", "language": "jl"}, {"task_id": "mbpp_567_issort_list", "prompt": "\"\"\"\tWrite a function to check whether a specified vector is sorted or not.\"\"\"\nfunction issort_list(list1::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = issort_list;\n\t@test(candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\n\t@test(candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\n\t@test(candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "\"\"\"\tWrite a function to sort each subvector of strings in a given vector of vectors.\"\"\"\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_sublists;\n\t@test(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])\n\t@test(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n\t@test(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "\"\"\"\tWrite a jlthon function to remove duplicate numbers from a given number of vectors.\"\"\"\nfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = two_unique_nums;\n\t@test(candidate([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\n\t@test(candidate([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])\nend\n", "language": "jl"}, {"task_id": "mbpp_573_unique_product", "prompt": "\"\"\"\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\"\"\"\nfunction unique_product(list_data::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = unique_product;\n\t@test(candidate([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\n\t@test(candidate([1, 2, 3, 1]) == 6)\n\t@test(candidate([7, 8, 9, 0, 1, 1]) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "\"\"\"\tWrite a function to find the surface area of a cylinder.\"\"\"\nfunction surfacearea_cylinder(r::Int64, h::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = surfacearea_cylinder;\n\t@test(candidate(10, 5) == 942.45)\n\t@test(candidate(4, 5) == 226.18800000000002)\n\t@test(candidate(4, 10) == 351.848)\nend\n", "language": "jl"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "\"\"\"\tWrite a jlthon function to check whether a vector is subvector of another or not.\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "\"\"\"\tWrite a jlthon function to find the last digit in factorial of a given number.\"\"\"\nfunction last_Digit_Factorial(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = last_Digit_Factorial;\n\t@test(candidate(4) == 4)\n\t@test(candidate(21) == 0)\n\t@test(candidate(30) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "\"\"\"\tWrite a function to interleave 3 vectors of the same length into a single flat vector.\"\"\"\nfunction interleave_lists(list1::Vector{Int64}, list2::Vector{Int64}, list3::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = interleave_lists;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\n\t@test(candidate([10, 20], [15, 2], [5, 10]) == [10, 15, 5, 20, 2, 10])\n\t@test(candidate([11, 44], [10, 15], [20, 5]) == [11, 10, 20, 44, 15, 5])\nend\n", "language": "jl"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "\"\"\"\tWrite a function to find the dissimilar elements in the given two tuples.\"\"\"\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_dissimilar;\n\t@test(candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10))\n\t@test(candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9))\n\t@test(candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25))\nend\n", "language": "jl"}, {"task_id": "mbpp_580_extract_even", "prompt": "\"\"\"\tWrite a function to remove uneven elements in the nested mixed tuple.\"\"\"\nfunction extract_even(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_even;\n\t@test(candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8))\n\t@test(candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8))))\n\t@test(candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10))\nend\n", "language": "jl"}, {"task_id": "mbpp_581_surface_Area", "prompt": "\"\"\"\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\"\"\"\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = surface_Area;\n\t@test(candidate(3, 4) == 33)\n\t@test(candidate(4, 5) == 56)\n\t@test(candidate(1, 2) == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_583_catalan_number", "prompt": "\"\"\"\tWrite a function which returns nth catalan number.\"\"\"\nfunction catalan_number(num::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = catalan_number;\n\t@test(candidate(10) == 16796)\n\t@test(candidate(9) == 4862)\n\t@test(candidate(7) == 429)\nend\n", "language": "jl"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "\"\"\"\tWrite a function to find the first adverb ending with ly and its positions in a given string.\"\"\"\nfunction find_adverbs(text::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_adverbs;\n\t@test(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")\n\t@test(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\")\n\t@test(candidate(\"Complete the task quickly\") == \"18-25: quickly\")\nend\n", "language": "jl"}, {"task_id": "mbpp_586_split_Arr", "prompt": "\"\"\"\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\"\"\"\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = split_Arr;\n\t@test(candidate([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10])\n\t@test(candidate([1, 2, 3, 4], 1) == [2, 3, 4, 1])\n\t@test(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2])\nend\n", "language": "jl"}, {"task_id": "mbpp_587_list_tuple", "prompt": "\"\"\"\tWrite a function to convert a vector to a tuple.\"\"\"\nfunction list_tuple(listx::Vector{Int64})::Any \n", "test": "using Test\n\n@testset begin\n\ncandidate = list_tuple;\n\t@test(candidate([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3))\n\t@test(candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7))\n\t@test(candidate([58, 44, 56]) == (58, 44, 56))\nend\n", "language": "jl"}, {"task_id": "mbpp_588_big_diff", "prompt": "\"\"\"\tWrite a jlthon function to find the difference between largest and smallest value in a given vector.\"\"\"\nfunction big_diff(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = big_diff;\n\t@test(candidate([1, 2, 3, 4]) == 3)\n\t@test(candidate([4, 5, 12]) == 8)\n\t@test(candidate([9, 2, 3]) == 7)\nend\n", "language": "jl"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "\"\"\"\tWrite a function to find perfect squares between two given numbers.\"\"\"\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = perfect_squares;\n\t@test(candidate(1, 30) == [1, 4, 9, 16, 25])\n\t@test(candidate(50, 100) == [64, 81, 100])\n\t@test(candidate(100, 200) == [100, 121, 144, 169, 196])\nend\n", "language": "jl"}, {"task_id": "mbpp_591_swap_List", "prompt": "\"\"\"\tWrite a jlthon function to interchange the first and last elements in a vector.\"\"\"\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = swap_List;\n\t@test(candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12])\n\t@test(candidate([1, 2, 3]) == [3, 2, 1])\n\t@test(candidate([4, 5, 6]) == [6, 5, 4])\nend\n", "language": "jl"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\"\"\"\nfunction sum_Of_product(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_Of_product;\n\t@test(candidate(3) == 15)\n\t@test(candidate(4) == 56)\n\t@test(candidate(1) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "\"\"\"\tWrite a function to remove leading zeroes from an ip address.\"\"\"\nfunction removezero_ip(ip::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = removezero_ip;\n\t@test(candidate(\"216.08.094.196\") == \"216.8.94.196\")\n\t@test(candidate(\"12.01.024\") == \"12.1.24\")\n\t@test(candidate(\"216.08.094.0196\") == \"216.8.94.196\")\nend\n", "language": "jl"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "\"\"\"\tWrite a function to find the difference of the first even and first odd number of a given vector.\"\"\"\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = diff_even_odd;\n\t@test(candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 3)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\n\t@test(candidate([1, 5, 7, 9, 10]) == 9)\nend\n", "language": "jl"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "\"\"\"\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\"\"\"\nfunction min_Swaps(str1::String, str2::String)::Any \n", "test": "using Test\n\n@testset begin\n\ncandidate = min_Swaps;\n\t@test(candidate(\"1101\", \"1110\") == 1)\n\t@test(candidate(\"111\", \"000\") == \"Not Possible\")\n\t@test(candidate(\"111\", \"110\") == \"Not Possible\")\nend\n", "language": "jl"}, {"task_id": "mbpp_597_find_kth", "prompt": "\"\"\"\tWrite a function to find kth element from the given two sorted vectors.\"\"\"\nfunction find_kth(arr1::Vector{Int64}, arr2::Vector{Int64}, k::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_kth;\n\t@test(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6)\n\t@test(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256)\n\t@test(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8)\nend\n", "language": "jl"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "\"\"\"\tWrite a function to check whether the given number is armstrong or not.\"\"\"\nfunction armstrong_number(number::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = armstrong_number;\n\t@test(candidate(153) == true)\n\t@test(candidate(259) == false)\n\t@test(candidate(4458) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_599_sum_average", "prompt": "\"\"\"\tWrite a function to find sum and average of first n natural numbers.\"\"\"\nfunction sum_average(number::Int64)::Tuple{Int64, Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_average;\n\t@test(candidate(10) == (55, 5.5))\n\t@test(candidate(15) == (120, 8.0))\n\t@test(candidate(20) == (210, 10.5))\nend\n", "language": "jl"}, {"task_id": "mbpp_600_is_Even", "prompt": "\"\"\"\tWrite a jlthon function to check whether the given number is even or not.\"\"\"\nfunction is_Even(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_Even;\n\t@test(candidate(1) == false)\n\t@test(candidate(2) == true)\n\t@test(candidate(3) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "\"\"\"\tWrite a jlthon function to find the first repeated character in a given string.\"\"\"\nfunction first_repeated_char(str1::String)::Union{String, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = first_repeated_char;\n\t@test(candidate(\"abcabc\") == \"a\")\n\t@test(candidate(\"abc\") == nothing)\n\t@test(candidate(\"123123\") == \"1\")\nend\n", "language": "jl"}, {"task_id": "mbpp_603_get_ludic", "prompt": "\"\"\"\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\"\"\"\nfunction get_ludic(n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_ludic;\n\t@test(candidate(10) == [1, 2, 3, 5, 7])\n\t@test(candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25])\n\t@test(candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43])\nend\n", "language": "jl"}, {"task_id": "mbpp_604_reverse_words", "prompt": "\"\"\"\tWrite a function to reverse words seperated by spaces in a given string.\"\"\"\nfunction reverse_words(s::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = reverse_words;\n\t@test(candidate(\"python program\") == \"program python\")\n\t@test(candidate(\"java language\") == \"language java\")\n\t@test(candidate(\"indian man\") == \"man indian\")\nend\n", "language": "jl"}, {"task_id": "mbpp_605_prime_num", "prompt": "\"\"\"\tWrite a function to check if the given integer is a prime number.\"\"\"\nfunction prime_num(num::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = prime_num;\n\t@test(candidate(13) == true)\n\t@test(candidate(7) == true)\n\t@test(candidate(-1010) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_606_radian_degree", "prompt": "\"\"\"\tWrite a function to convert degrees to radians.\"\"\"\nfunction radian_degree(degree::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = radian_degree;\n\t@test(candidate(90) == 1.5707963267948966)\n\t@test(candidate(60) == 1.0471975511965976)\n\t@test(candidate(120) == 2.0943951023931953)\nend\n", "language": "jl"}, {"task_id": "mbpp_607_find_literals", "prompt": "\"\"\"\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\"\"\"\nfunction find_literals(text::String, pattern::String)::Tuple{String, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_literals;\n\t@test(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") == (\"fox\", 16, 19))\n\t@test(candidate(\"Its been a very crazy procedure right\", \"crazy\") == (\"crazy\", 16, 21))\n\t@test(candidate(\"Hardest choices required strongest will\", \"will\") == (\"will\", 35, 39))\nend\n", "language": "jl"}, {"task_id": "mbpp_608_bell_Number", "prompt": "\"\"\"\tWrite a jlthon function to find nth bell number.\"\"\"\nfunction bell_Number(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = bell_Number;\n\t@test(candidate(2) == 2)\n\t@test(candidate(3) == 5)\n\t@test(candidate(4) == 15)\nend\n", "language": "jl"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "\"\"\"\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\"\"\"\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_kth_element;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1])\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10])\nend\n", "language": "jl"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "\"\"\"\tWrite a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\"\"\"\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_of_nth;\n\t@test(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19)\n\t@test(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10)\n\t@test(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11)\nend\n", "language": "jl"}, {"task_id": "mbpp_612_merge", "prompt": "\"\"\"\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\"\"\"\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = merge;\n\t@test(candidate([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])\n\t@test(candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]])\n\t@test(candidate([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "\"\"\"\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\"\"\"\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = cummulative_sum;\n\t@test(candidate([[1, 3], [5, 6, 7], [2, 6]]) == 30)\n\t@test(candidate([[2, 4], [6, 7, 8], [3, 7]]) == 37)\n\t@test(candidate([[3, 5], [7, 8, 9], [4, 8]]) == 44)\nend\n", "language": "jl"}, {"task_id": "mbpp_615_average_tuple", "prompt": "\"\"\"\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\"\"\"\nfunction average_tuple(nums::Vector{Vector{Int64}})::Vector{Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = average_tuple;\n\t@test(candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25])\n\t@test(candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) == [25.5, -18.0, 3.75])\n\t@test(candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) == [305.0, 342.5, 270.0, 232.5])\nend\n", "language": "jl"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "\"\"\"\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\"\"\"\nfunction tuple_modulo(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = tuple_modulo;\n\t@test(candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1))\n\t@test(candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1))\n\t@test(candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1))\nend\n", "language": "jl"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "\"\"\"\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\"\"\"\nfunction min_Jumps(steps::Tuple{Int64, Int64}, d::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = min_Jumps;\n\t@test(candidate((3, 4), 11) == 3.5)\n\t@test(candidate((3, 4), 0) == 0)\n\t@test(candidate((11, 14), 11) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_618_div_list", "prompt": "\"\"\"\tWrite a function to divide two vectors element wise.\"\"\"\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = div_list;\n\t@test(candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0])\n\t@test(candidate([3, 2], [1, 4]) == [3.0, 0.5])\n\t@test(candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142])\nend\n", "language": "jl"}, {"task_id": "mbpp_619_move_num", "prompt": "\"\"\"\tWrite a function to move all the numbers to the end of the given string.\"\"\"\nfunction move_num(test_str::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = move_num;\n\t@test(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\n\t@test(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\")\n\t@test(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")\nend\n", "language": "jl"}, {"task_id": "mbpp_622_get_median", "prompt": "\"\"\"\tWrite a function to find the median of two sorted vectors of same size.\"\"\"\nfunction get_median(arr1::Vector{Int64}, arr2::Vector{Int64}, n::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_median;\n\t@test(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0)\n\t@test(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5)\n\t@test(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0)\nend\n", "language": "jl"}, {"task_id": "mbpp_623_nth_nums", "prompt": "\"\"\"\tWrite a function to compute the n-th power of each number in a vector.\"\"\"\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = nth_nums;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\n\t@test(candidate([10, 20, 30], 3) == [1000, 8000, 27000])\n\t@test(candidate([12, 15], 5) == [248832, 759375])\nend\n", "language": "jl"}, {"task_id": "mbpp_624_is_upper", "prompt": "\"\"\"\tWrite a jlthon function to convert a given string to uppercase.\"\"\"\nfunction is_upper(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_upper;\n\t@test(candidate(\"person\") == \"PERSON\")\n\t@test(candidate(\"final\") == \"FINAL\")\n\t@test(candidate(\"Valid\") == \"VALID\")\nend\n", "language": "jl"}, {"task_id": "mbpp_625_swap_List", "prompt": "\"\"\"\tWrite a jlthon function to interchange the first and last element in a given vector.\"\"\"\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = swap_List;\n\t@test(candidate([1, 2, 3]) == [3, 2, 1])\n\t@test(candidate([1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1])\n\t@test(candidate([4, 5, 6]) == [6, 5, 4])\nend\n", "language": "jl"}, {"task_id": "mbpp_626_triangle_area", "prompt": "\"\"\"\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\"\"\"\nfunction triangle_area(r::Int64)::Union{Int64, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(-1) == nothing)\n\t@test(candidate(0) == 0)\n\t@test(candidate(2) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "\"\"\"\tWrite a jlthon function to find the smallest missing number from a sorted vector of natural numbers.\"\"\"\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_First_Missing;\n\t@test(candidate([0, 1, 2, 3]) == 4)\n\t@test(candidate([0, 1, 2, 6, 9]) == 3)\n\t@test(candidate([2, 3, 5, 8, 9]) == 0)\nend\n", "language": "jl"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "\"\"\"\tWrite a function to replace all spaces in the given string with '%20'.\"\"\"\nfunction replace_spaces(string::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = replace_spaces;\n\t@test(candidate(\"My Name is Dawood\") == \"My%20Name%20is%20Dawood\")\n\t@test(candidate(\"I am a Programmer\") == \"I%20am%20a%20Programmer\")\n\t@test(candidate(\"I love Coding\") == \"I%20love%20Coding\")\nend\n", "language": "jl"}, {"task_id": "mbpp_629_Split", "prompt": "\"\"\"\tWrite a jlthon function to find even numbers from a vector of numbers.\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5]) == [2, 4])\n\t@test(candidate([4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\n\t@test(candidate([8, 12, 15, 19]) == [8, 12])\nend\n", "language": "jl"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "\"\"\"\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\"\"\"\nfunction get_coordinates(test_tup::Tuple{Int64, Int64})::Vector{Vector{Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_coordinates;\n\t@test(candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])\n\t@test(candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])\n\t@test(candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])\nend\n", "language": "jl"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "\"\"\"\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\"\"\"\nfunction replace_spaces(text::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = replace_spaces;\n\t@test(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\")\n\t@test(candidate(\"The_Avengers\") == \"The Avengers\")\n\t@test(candidate(\"Fast and Furious\") == \"Fast_and_Furious\")\nend\n", "language": "jl"}, {"task_id": "mbpp_632_move_zero", "prompt": "\"\"\"\tWrite a jlthon function to move all zeroes to the end of the given vector.\"\"\"\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = move_zero;\n\t@test(candidate([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\n\t@test(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\n\t@test(candidate([0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])\nend\n", "language": "jl"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\"\"\"\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = pair_xor_Sum;\n\t@test(candidate([5, 9, 7, 6], 4) == 47)\n\t@test(candidate([7, 3, 5], 3) == 12)\n\t@test(candidate([7, 3], 2) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_635_heap_sort", "prompt": "\"\"\"\tWrite a function to sort the given vector.\"\"\"\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = heap_sort;\n\t@test(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\n\t@test(candidate([7, 1, 9, 5]) == [1, 5, 7, 9])\nend\n", "language": "jl"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "\"\"\"\tWrite a function to check whether the given amount has no profit and no loss\"\"\"\nfunction noprofit_noloss(actual_cost::Int64, sale_amount::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = noprofit_noloss;\n\t@test(candidate(1500, 1200) == false)\n\t@test(candidate(100, 100) == true)\n\t@test(candidate(2000, 5000) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_638_wind_chill", "prompt": "\"\"\"\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\"\"\"\nfunction wind_chill(v::Int64, t::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = wind_chill;\n\t@test(candidate(120, 35) == 40)\n\t@test(candidate(40, 20) == 19)\n\t@test(candidate(10, 8) == 6)\nend\n", "language": "jl"}, {"task_id": "mbpp_639_sample_nam", "prompt": "\"\"\"\tWrite a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\"\"\"\nfunction sample_nam(sample_names::Vector{String})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sample_nam;\n\t@test(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\n\t@test(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\n\t@test(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)\nend\n", "language": "jl"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "\"\"\"\tWrite a function to remove the parenthesis and what is inbetween them from a string.\"\"\"\nfunction remove_parenthesis(items::Vector{String})::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_parenthesis;\n\t@test(candidate([\"python (chrome)\"]) == \"python\")\n\t@test(candidate([\"string(.abc)\"]) == \"string\")\n\t@test(candidate([\"alpha(num)\"]) == \"alpha\")\nend\n", "language": "jl"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "\"\"\"\tWrite a function to find the nth nonagonal number.\"\"\"\nfunction is_nonagonal(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_nonagonal;\n\t@test(candidate(10) == 325)\n\t@test(candidate(15) == 750)\n\t@test(candidate(18) == 1089)\nend\n", "language": "jl"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "\"\"\"\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\"\"\"\nfunction text_match_wordz_middle(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_match_wordz_middle;\n\t@test(candidate(\"pythonzabc.\") == true)\n\t@test(candidate(\"zxyabc.\") == false)\n\t@test(candidate(\"  lang  .\") == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "\"\"\"\tWrite a jlthon function to reverse a vector upto a given position.\"\"\"\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = reverse_Array_Upto_K;\n\t@test(candidate([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6])\n\t@test(candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7])\n\t@test(candidate([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5])\nend\n", "language": "jl"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "\"\"\"\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\"\"\"\nfunction add_dict_to_tuple(test_tup::Tuple{Int64, Int64, Int64}, test_dict::Dict{String, Int64}>)::Tuple{Int64, Int64, Int64, Dict{String, Int64}>} \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_dict_to_tuple;\n\t@test(candidate((4, 5, 6), Dict(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3)) == (4, 5, 6, Dict(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3)))\n\t@test(candidate((1, 2, 3), Dict(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4)) == (1, 2, 3, Dict(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4)))\n\t@test(candidate((8, 9, 10), Dict(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5)) == (8, 9, 10, Dict(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5)))\nend\n", "language": "jl"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "\"\"\"\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n", "language": "jl"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "\"\"\"\tThe input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\"\"\"\nfunction count_same_pair(nums1::Vector{Int64}, nums2::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_same_pair;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\n\t@test(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\n\t@test(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\n\t@test(candidate([0, 1, 1, 2], [0, 1, 2, 2]) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "\"\"\"\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\"\"\"\nfunction power_base_sum(base::Int64, power::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = power_base_sum;\n\t@test(candidate(2, 100) == 115)\n\t@test(candidate(8, 10) == 37)\n\t@test(candidate(8, 15) == 62)\n\t@test(candidate(3, 3) == 9)\nend\n", "language": "jl"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "\"\"\"\tWrite a function to extract values between quotation marks \" \" of the given string.\"\"\"\nfunction extract_quotation(text1::String)::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_quotation;\n\t@test(candidate(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") == [\"A53\", \"multi\", \"Processor\"])\n\t@test(candidate(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") == [\"favorite\", \"apps\"])\n\t@test(candidate(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\") == [\"4k Ultra HD\", \"HDR 10\"])\n\t@test(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == Vector{Any}([]))\nend\n", "language": "jl"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "\"\"\"\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\"\"\"\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = multiply_elements;\n\t@test(candidate([1, 5, 7, 8, 10]) == [5, 35, 56, 80])\n\t@test(candidate([2, 4, 5, 6, 7]) == [8, 20, 30, 42])\n\t@test(candidate([12, 13, 14, 9, 15]) == [156, 182, 126, 135])\n\t@test(candidate([12]) == Vector{Any}([]))\nend\n", "language": "jl"}, {"task_id": "mbpp_728_sum_list", "prompt": "\"\"\"\tWrite a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\"\"\"\nfunction sum_list(lst1::Vector{Int64}, lst2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_list;\n\t@test(candidate([10, 20, 30], [15, 25, 35]) == [25, 45, 65])\n\t@test(candidate([1, 2, 3], [5, 6, 7]) == [6, 8, 10])\n\t@test(candidate([15, 20, 30], [15, 45, 75]) == [30, 65, 105])\nend\n", "language": "jl"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "\"\"\"\tWrite a function to remove consecutive duplicates of a given vector.\"\"\"\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])\nend\n", "language": "jl"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "\"\"\"\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\"\"\"\nfunction lateralsurface_cone(r::Int64, h::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = lateralsurface_cone;\n\t@test(candidate(5, 12) == 204.20352248333654)\n\t@test(candidate(10, 15) == 566.3586699569488)\n\t@test(candidate(19, 17) == 1521.8090132193388)\nend\n", "language": "jl"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "\"\"\"\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\"\"\"\nfunction replace_specialchar(text::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = replace_specialchar;\n\t@test(candidate(\"Python language, Programming language.\") == \"Python:language::Programming:language:\")\n\t@test(candidate(\"a b c,d e f\") == \"a:b:c:d:e:f\")\n\t@test(candidate(\"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\")\nend\n", "language": "jl"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "\"\"\"\tWrite a function to find the index of the first occurrence of a given number in a sorted vector.\"\"\"\nfunction find_first_occurrence(A::Vector{Int64}, x::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_first_occurrence;\n\t@test(candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1)\n\t@test(candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2)\n\t@test(candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "\"\"\"\tWrite a jlthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\"\"\"\nfunction sum_Of_Subarray_Prod(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_Of_Subarray_Prod;\n\t@test(candidate([1, 2, 3]) == 20)\n\t@test(candidate([1, 2]) == 5)\n\t@test(candidate([1, 2, 3, 4]) == 84)\nend\n", "language": "jl"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "\"\"\"\tWrite a jlthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\"\"\"\nfunction toggle_middle_bits(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = toggle_middle_bits;\n\t@test(candidate(9) == 15)\n\t@test(candidate(10) == 12)\n\t@test(candidate(11) == 13)\n\t@test(candidate(65) == 127)\n\t@test(candidate(77) == 115)\nend\n", "language": "jl"}, {"task_id": "mbpp_736_left_insertion", "prompt": "\"\"\"\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-data-structure-exercise-24.php\"\"\"\nfunction left_insertion(a::Vector{Int64}, x::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = left_insertion;\n\t@test(candidate([1, 2, 4, 5], 6) == 4)\n\t@test(candidate([1, 2, 4, 5], 3) == 2)\n\t@test(candidate([1, 2, 4, 5], 7) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_737_check_str", "prompt": "\"\"\"\tWrite a function to check whether the given string is starting with a vowel or not using regex.\"\"\"\nfunction check_str(string::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_str;\n\t@test(candidate(\"annie\") == true)\n\t@test(candidate(\"dawood\") == false)\n\t@test(candidate(\"Else\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "\"\"\"\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-recursion-exercise-9.php\"\"\"\nfunction geometric_sum(n::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = geometric_sum;\n\t@test(candidate(7) == 1.9921875)\n\t@test(candidate(4) == 1.9375)\n\t@test(candidate(8) == 1.99609375)\nend\n", "language": "jl"}, {"task_id": "mbpp_739_find_Index", "prompt": "\"\"\"\tWrite a jlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\"\"\"\nfunction find_Index(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_Index;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 14)\n\t@test(candidate(4) == 45)\nend\n", "language": "jl"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "\"\"\"\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/jlthon-convert-tuple-to-adjacent-pair-dictionary/\"\"\"\nfunction tuple_to_dict(test_tup::Tuple{Int64, Int64, Int64, Int64, Int64, Int64})::Dict{Int64, Int64}> \n", "test": "using Test\n\n@testset begin\n\ncandidate = tuple_to_dict;\n\t@test(candidate((1, 5, 7, 10, 13, 5)) == Dict(1 => 5, 7 => 10, 13 => 5))\n\t@test(candidate((1, 2, 3, 4, 5, 6)) == Dict(1 => 2, 3 => 4, 5 => 6))\n\t@test(candidate((7, 8, 9, 10, 11, 12)) == Dict(7 => 8, 9 => 10, 11 => 12))\nend\n", "language": "jl"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "\"\"\"\tWrite a jlthon function to check whether all the characters are same or not.\"\"\"\nfunction all_Characters_Same(s::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = all_Characters_Same;\n\t@test(candidate(\"python\") == false)\n\t@test(candidate(\"aaa\") == true)\n\t@test(candidate(\"data\") == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "\"\"\"\tWrite a function to caluclate the area of a tetrahedron.\"\"\"\nfunction area_tetrahedron(side::Int64)::Float64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = area_tetrahedron;\n\t@test(candidate(3) == 15.588457268119894)\n\t@test(candidate(20) == 692.8203230275509)\n\t@test(candidate(10) == 173.20508075688772)\nend\n", "language": "jl"}, {"task_id": "mbpp_743_rotate_right", "prompt": "\"\"\"\tWrite a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/jlthon-program-right-rotate-vector-n/\"\"\"\nfunction rotate_right(list::Vector{Int64}, m::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = rotate_right;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])\nend\n", "language": "jl"}, {"task_id": "mbpp_744_check_none", "prompt": "\"\"\"\tWrite a function to check if the given tuple has any none value or not.\"\"\"\nfunction check_none(test_tup::Any)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_none;\n\t@test(candidate((10, 4, 5, 6, nothing)) == true)\n\t@test(candidate((7, 8, 9, 11, 14)) == false)\n\t@test(candidate((1, 2, 3, 4, nothing)) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "\"\"\"\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n", "language": "jl"}, {"task_id": "mbpp_746_sector_area", "prompt": "\"\"\"\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\"\"\"\nfunction sector_area(r::Int64, a::Int64)::Union{Float64, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sector_area;\n\t@test(candidate(4, 45) == 6.283185307179586)\n\t@test(candidate(9, 45) == 31.808625617596654)\n\t@test(candidate(9, 361) == nothing)\nend\n", "language": "jl"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "\"\"\"\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\"\"\"\nfunction lcs_of_three(X::String, Y::String, Z::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = lcs_of_three;\n\t@test(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2)\n\t@test(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5)\n\t@test(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "\"\"\"\tWrite a function to put spaces between words starting with capital letters in a given string.\"\"\"\nfunction capital_words_spaces(str1::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = capital_words_spaces;\n\t@test(candidate(\"Python\") == \"Python\")\n\t@test(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\")\n\t@test(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")\nend\n", "language": "jl"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "\"\"\"\tWrite a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/jlthon-sort-numeric-strings-in-a-vector/\"\"\"\nfunction sort_numeric_strings(nums_str::Vector{String})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = sort_numeric_strings;\n\t@test(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500, -12, 0, 4, 7, 12, 45, 100, 200])\n\t@test(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9])\n\t@test(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17])\nend\n", "language": "jl"}, {"task_id": "mbpp_750_add_tuple", "prompt": "\"\"\"\tWrite a function to add the given tuple to the given vector.\"\"\"\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = add_tuple;\n\t@test(candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10])\n\t@test(candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11])\n\t@test(candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12])\nend\n", "language": "jl"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "\"\"\"\tWrite a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\"\"\"\nfunction check_min_heap(arr::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_min_heap;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([2, 3, 4, 5, 10, 15]) == true)\n\t@test(candidate([2, 10, 4, 5, 3, 15]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "\"\"\"\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\"\"\"\nfunction jacobsthal_num(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = jacobsthal_num;\n\t@test(candidate(5) == 11)\n\t@test(candidate(2) == 1)\n\t@test(candidate(4) == 5)\n\t@test(candidate(13) == 2731)\nend\n", "language": "jl"}, {"task_id": "mbpp_753_min_k", "prompt": "\"\"\"\tWrite a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/jlthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cojl of test cases\"\"\"\nfunction min_k(test_list::Vector{Tuple{String, Int64}}, K::Int64)::Vector{Tuple{String, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = min_k;\n\t@test(candidate([(\"Manjeet\", 10), (\"Akshat\", 4), (\"Akash\", 2), (\"Nikhil\", 8)], 2) == [(\"Akash\", 2), (\"Akshat\", 4)])\n\t@test(candidate([(\"Sanjeev\", 11), (\"Angat\", 5), (\"Akash\", 3), (\"Nepin\", 9)], 3) == [(\"Akash\", 3), (\"Angat\", 5), (\"Nepin\", 9)])\n\t@test(candidate([(\"tanmay\", 14), (\"Amer\", 11), (\"Ayesha\", 9), (\"SKD\", 16)], 1) == [(\"Ayesha\", 9)])\nend\n", "language": "jl"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "\"\"\"\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\"\"\"\nfunction extract_index_list(l1::Vector{Int64}, l2::Vector{Int64}, l3::Vector{Int64})::Vector{Any} \n", "test": "using Test\n\n@testset begin\n\ncandidate = extract_index_list;\n\t@test(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n\t@test(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n\t@test(candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n\t@test(candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == Vector{Any}([]))\nend\n", "language": "jl"}, {"task_id": "mbpp_755_second_smallest", "prompt": "\"\"\"\tWrite a function to find the second smallest number in a vector.\"\"\"\nfunction second_smallest(numbers::Vector{Union{Int64, Float64}})::Union{Float64, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = second_smallest;\n\t@test(candidate([1, 2, -8, -2, 0, -2]) == -2)\n\t@test(candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\n\t@test(candidate([2, 2]) == nothing)\n\t@test(candidate([2, 2, 2]) == nothing)\nend\n", "language": "jl"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "\"\"\"\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\"\"\"\nfunction text_match_zero_one(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_match_zero_one;\n\t@test(candidate(\"ac\") == false)\n\t@test(candidate(\"dc\") == false)\n\t@test(candidate(\"abbbba\") == true)\n\t@test(candidate(\"dsabbbba\") == true)\n\t@test(candidate(\"asbbbba\") == false)\n\t@test(candidate(\"abaaa\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "\"\"\"\tWrite a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/jlthon-program-to-count-the-pairs-of-reverse-strings/\"\"\"\nfunction count_reverse_pairs(test_list::Vector{String})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_reverse_pairs;\n\t@test(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2)\n\t@test(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1)\n\t@test(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_759_is_decimal", "prompt": "\"\"\"\tWrite a function to check whether a given string is a decimal number with a precision of 2.\"\"\"\nfunction is_decimal(num::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_decimal;\n\t@test(candidate(\"123.11\") == true)\n\t@test(candidate(\"e666.86\") == false)\n\t@test(candidate(\"3.124587\") == false)\n\t@test(candidate(\"1.11\") == true)\n\t@test(candidate(\"1.1.11\") == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_760_unique_Element", "prompt": "\"\"\"\tWrite a jlthon function to check whether a vector of numbers contains only one distinct element or not.\"\"\"\nfunction unique_Element(arr::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = unique_Element;\n\t@test(candidate([1, 1, 1]) == true)\n\t@test(candidate([1, 2, 1, 2]) == false)\n\t@test(candidate([1, 2, 3, 4, 5]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "\"\"\"\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\"\"\"\nfunction check_monthnumber_number(monthnum3::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_monthnumber_number;\n\t@test(candidate(6) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(12) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "\"\"\"\tWrite a jlthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\"\"\"\nfunction find_min_diff(arr::Vector{Int64}, n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_min_diff;\n\t@test(candidate([1, 5, 3, 19, 18, 25], 6) == 1)\n\t@test(candidate([4, 3, 2, 6], 4) == 1)\n\t@test(candidate([30, 5, 20, 9], 4) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_764_number_ctr", "prompt": "\"\"\"\tWrite a jlthon function to count number of digits in a given string.\"\"\"\nfunction number_ctr(str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = number_ctr;\n\t@test(candidate(\"program2bedone\") == 1)\n\t@test(candidate(\"3wonders\") == 1)\n\t@test(candidate(\"123\") == 3)\n\t@test(candidate(\"3wond-1ers2\") == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_765_is_polite", "prompt": "\"\"\"\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\"\"\"\nfunction is_polite(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_polite;\n\t@test(candidate(7) == 11)\n\t@test(candidate(4) == 7)\n\t@test(candidate(9) == 13)\nend\n", "language": "jl"}, {"task_id": "mbpp_766_pair_wise", "prompt": "\"\"\"\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\"\"\"\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = pair_wise;\n\t@test(candidate([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)])\n\t@test(candidate([1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)])\n\t@test(candidate([5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)])\nend\n", "language": "jl"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "\"\"\"\tWrite a jlthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,\"\"\"\nfunction get_pairs_count(arr::Vector{Int64}, sum::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = get_pairs_count;\n\t@test(candidate([1, 1, 1, 1], 2) == 6)\n\t@test(candidate([1, 5, 7, -1, 5], 6) == 3)\n\t@test(candidate([1, -2, 3], 1) == 1)\n\t@test(candidate([-1, -2, 3], -3) == 1)\nend\n", "language": "jl"}, {"task_id": "mbpp_769_Diff", "prompt": "\"\"\"\tWrite a jlthon function to get the difference between two vectors.\"\"\"\nfunction Diff(li1::Vector{Int64}, li2::Vector{Int64})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = Diff;\n\t@test(candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15])\n\t@test(candidate([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5, 6, 7])\n\t@test(candidate([1, 2, 3], [6, 7, 1]) == [2, 3, 6, 7])\nend\n", "language": "jl"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\"\"\"\nfunction odd_num_sum(n::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = odd_num_sum;\n\t@test(candidate(2) == 82)\n\t@test(candidate(3) == 707)\n\t@test(candidate(4) == 3108)\nend\n", "language": "jl"}, {"task_id": "mbpp_771_check_expression", "prompt": "\"\"\"\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\"\"\"\nfunction check_expression(exp::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_expression;\n\t@test(candidate(\"{()}[{}]\") == true)\n\t@test(candidate(\"{()}[{]\") == false)\n\t@test(candidate(\"{()}[{}][]({})\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_772_remove_length", "prompt": "\"\"\"\tWrite a function to remove all the words with k length in the given string.\"\"\"\nfunction remove_length(test_str::String, K::Int64)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_length;\n\t@test(candidate(\"The person is most value tet\", 3) == \"person is most value\")\n\t@test(candidate(\"If you told me about this ok\", 4) == \"If you me about ok\")\n\t@test(candidate(\"Forces of darkeness is come into the play\", 4) == \"Forces of darkeness is the\")\nend\n", "language": "jl"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "\"\"\"\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\"\"\"\nfunction occurance_substring(text::String, pattern::String)::Union{Tuple{String, Int64, Int64}, Nothing} \n", "test": "using Test\n\n@testset begin\n\ncandidate = occurance_substring;\n\t@test(candidate(\"python programming, python language\", \"python\") == (\"python\", 0, 6))\n\t@test(candidate(\"python programming,programming language\", \"programming\") == (\"programming\", 7, 18))\n\t@test(candidate(\"python programming,programming language\", \"language\") == (\"language\", 31, 39))\n\t@test(candidate(\"c++ programming, c++ language\", \"python\") == nothing)\nend\n", "language": "jl"}, {"task_id": "mbpp_775_odd_position", "prompt": "\"\"\"\tWrite a jlthon function to check whether every odd index contains odd numbers of a given vector.\"\"\"\nfunction odd_position(nums::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = odd_position;\n\t@test(candidate([2, 1, 4, 3, 6, 7, 6, 3]) == true)\n\t@test(candidate([4, 1, 2]) == true)\n\t@test(candidate([1, 2, 3]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_776_count_vowels", "prompt": "\"\"\"\tWrite a function to count those characters which have vowels as their neighbors in the given string.\"\"\"\nfunction count_vowels(test_str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_vowels;\n\t@test(candidate(\"bestinstareels\") == 7)\n\t@test(candidate(\"partofthejourneyistheend\") == 12)\n\t@test(candidate(\"amazonprime\") == 5)\nend\n", "language": "jl"}, {"task_id": "mbpp_777_find_sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\"\"\"\nfunction find_sum(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_sum;\n\t@test(candidate([1, 2, 3, 1, 1, 4, 5, 6]) == 21)\n\t@test(candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\n\t@test(candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)\nend\n", "language": "jl"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "\"\"\"\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\"\"\"\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n", "language": "jl"}, {"task_id": "mbpp_780_find_combinations", "prompt": "\"\"\"\tWrite a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/jlthon-combinations-of-sum-with-tuples-in-tuple-vector/\"\"\"\nfunction find_combinations(test_list::Vector{Tuple{Int64, Int64}})::Vector{Tuple{Int64, Int64}} \n", "test": "using Test\n\n@testset begin\n\ncandidate = find_combinations;\n\t@test(candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)])\n\t@test(candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)])\n\t@test(candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)])\nend\n", "language": "jl"}, {"task_id": "mbpp_781_count_divisors", "prompt": "\"\"\"\tWrite a jlthon function to check whether the count of divisors is even. https://www.w3resource.com/jlthon-exercises/basic/jlthon-basic-1-exercise-24.php\"\"\"\nfunction count_divisors(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_divisors;\n\t@test(candidate(10) == true)\n\t@test(candidate(100) == false)\n\t@test(candidate(125) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\"\"\"\nfunction odd_length_sum(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = odd_length_sum;\n\t@test(candidate([1, 2, 4]) == 14)\n\t@test(candidate([1, 2, 1, 2]) == 15)\n\t@test(candidate([1, 7]) == 8)\nend\n", "language": "jl"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "\"\"\"\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\"\"\"\nfunction rgb_to_hsv(r::Int64, g::Int64, b::Int64)::Vector{Float64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = rgb_to_hsv;\n\t@test(candidate(255, 255, 255) == [0.0, 0.0, 100.0])\n\t@test(candidate(0, 215, 0) == [120.0, 100.0, 84.31372549019608])\n\t@test(candidate(10, 215, 110) == [149.26829268292684, 95.34883720930233, 84.31372549019608])\nend\n", "language": "jl"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "\"\"\"\tWrite a function to find the product of first even and odd number of a given vector.\"\"\"\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = mul_even_odd;\n\t@test(candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([1, 5, 7, 9, 10]) == 10)\nend\n", "language": "jl"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "\"\"\"\tWrite a function to convert tuple string to integer tuple.\"\"\"\nfunction tuple_str_int(test_str::String)::Tuple{Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = tuple_str_int;\n\t@test(candidate(\"(7, 8, 9)\") == (7, 8, 9))\n\t@test(candidate(\"(1, 2, 3)\") == (1, 2, 3))\n\t@test(candidate(\"(4, 5, 6)\") == (4, 5, 6))\n\t@test(candidate(\"(7, 81, 19)\") == (7, 81, 19))\nend\n", "language": "jl"}, {"task_id": "mbpp_786_right_insertion", "prompt": "\"\"\"\tWrite a function to locate the right insertion point for a specified value in sorted order.\"\"\"\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = right_insertion;\n\t@test(candidate([1, 2, 4, 5], 6) == 4)\n\t@test(candidate([1, 2, 4, 5], 3) == 2)\n\t@test(candidate([1, 2, 4, 5], 7) == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_787_text_match_three", "prompt": "\"\"\"\tWrite a function that matches a string that has an a followed by three 'b'.\"\"\"\nfunction text_match_three(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_match_three;\n\t@test(candidate(\"ac\") == false)\n\t@test(candidate(\"dc\") == false)\n\t@test(candidate(\"abbbba\") == true)\n\t@test(candidate(\"caacabbbba\") == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_788_new_tuple", "prompt": "\"\"\"\tWrite a function to create a new tuple from the given string and vector.\"\"\"\nfunction new_tuple(test_list::Vector{String}, test_str::String)::Tuple{String, String, String} \n", "test": "using Test\n\n@testset begin\n\ncandidate = new_tuple;\n\t@test(candidate([\"WEB\", \"is\"], \"best\") == (\"WEB\", \"is\", \"best\"))\n\t@test(candidate([\"We\", \"are\"], \"Developers\") == (\"We\", \"are\", \"Developers\"))\n\t@test(candidate([\"Part\", \"is\"], \"Wrong\") == (\"Part\", \"is\", \"Wrong\"))\nend\n", "language": "jl"}, {"task_id": "mbpp_790_even_position", "prompt": "\"\"\"\tWrite a jlthon function to check whether every even index contains even numbers of a given vector.\"\"\"\nfunction even_position(nums::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = even_position;\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 3]) == false)\n\t@test(candidate([2, 1, 4]) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_791_remove_nested", "prompt": "\"\"\"\tWrite a function to remove tuples from the given tuple.\"\"\"\nfunction remove_nested(test_tup::Any)::Tuple{Int64, Int64, Int64, Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_nested;\n\t@test(candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10))\n\t@test(candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11))\n\t@test(candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12))\n\t@test(candidate((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12))\nend\n", "language": "jl"}, {"task_id": "mbpp_792_count_list", "prompt": "\"\"\"\tWrite a jlthon function to count the number of vectors in a given number of vectors.\"\"\"\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_list;\n\t@test(candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4)\n\t@test(candidate([[1, 2], [2, 3], [4, 5]]) == 3)\n\t@test(candidate([[1, 0], [2, 0]]) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_793_last", "prompt": "\"\"\"\tWrite a jlthon function to find the last position of an element in a sorted vector.\"\"\"\nfunction last(arr::Vector{Int64}, x::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = last;\n\t@test(candidate([1, 2, 3], 1) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, 4], 1) == 2)\n\t@test(candidate([2, 3, 2, 3, 6, 8, 9], 3) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "\"\"\"\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\"\"\"\nfunction text_starta_endb(text::String)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = text_starta_endb;\n\t@test(candidate(\"aabbbb\") == true)\n\t@test(candidate(\"aabAbbbc\") == false)\n\t@test(candidate(\"accddbbjjj\") == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_796_return_sum", "prompt": "\"\"\"\tWrite function to find the sum of all items in the given dictionary.\"\"\"\nfunction return_sum(dict::Dict{String, Int64}>)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = return_sum;\n\t@test(candidate(Dict(\"a\" => 100, \"b\" => 200, \"c\" => 300)) == 600)\n\t@test(candidate(Dict(\"a\" => 25, \"b\" => 18, \"c\" => 45)) == 88)\n\t@test(candidate(Dict(\"a\" => 36, \"b\" => 39, \"c\" => 49)) == 124)\nend\n", "language": "jl"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\"\"\"\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = sum_in_range;\n\t@test(candidate(2, 5) == 8)\n\t@test(candidate(5, 7) == 12)\n\t@test(candidate(7, 13) == 40)\nend\n", "language": "jl"}, {"task_id": "mbpp_798__sum", "prompt": "\"\"\"\tWrite a jlthon function to find the sum of a vector.\"\"\"\nfunction _sum(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = _sum;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([15, 12, 13, 10]) == 50)\n\t@test(candidate([0, 1, 2]) == 3)\nend\n", "language": "jl"}, {"task_id": "mbpp_799_left_rotate", "prompt": "\"\"\"\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\"\"\"\nfunction left_rotate(n::Int64, d::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = left_rotate;\n\t@test(candidate(16, 2) == 64)\n\t@test(candidate(10, 2) == 40)\n\t@test(candidate(99, 3) == 792)\n\t@test(candidate(99, 3) == 792)\n\t@test(candidate(1, 3) == 8)\n\t@test(candidate(5, 3) == 40)\n\t@test(candidate(29, 3) == 232)\nend\n", "language": "jl"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "\"\"\"\tWrite a function to remove all whitespaces from a string.\"\"\"\nfunction remove_all_spaces(text::String)::String \n", "test": "using Test\n\n@testset begin\n\ncandidate = remove_all_spaces;\n\t@test(candidate(\"python  program\") == \"pythonprogram\")\n\t@test(candidate(\"python   programming    language\") == \"pythonprogramminglanguage\")\n\t@test(candidate(\"python                     program\") == \"pythonprogram\")\n\t@test(candidate(\"   python                     program\") == \"pythonprogram\")\nend\n", "language": "jl"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "\"\"\"\tWrite a jlthon function to count the number of equal numbers from three given integers.\"\"\"\nfunction test_three_equal(x::Int64, y::Int64, z::Int64)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = test_three_equal;\n\t@test(candidate(1, 1, 1) == 3)\n\t@test(candidate(-1, -2, -3) == 0)\n\t@test(candidate(1, 2, 2) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_802_count_rotation", "prompt": "\"\"\"\tWrite a jlthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\"\"\"\nfunction count_rotation(arr::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = count_rotation;\n\t@test(candidate([3, 2, 1]) == 1)\n\t@test(candidate([4, 5, 1, 2, 3]) == 2)\n\t@test(candidate([7, 8, 9, 1, 2, 3]) == 3)\n\t@test(candidate([1, 2, 3]) == 0)\n\t@test(candidate([1, 3, 2]) == 2)\nend\n", "language": "jl"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "\"\"\"\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\"\"\"\nfunction is_perfect_square(n::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_perfect_square;\n\t@test(candidate(10) == false)\n\t@test(candidate(36) == true)\n\t@test(candidate(14) == false)\n\t@test(candidate(196) == true)\n\t@test(candidate(125) == false)\n\t@test(candidate(15625) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_804_is_product_even", "prompt": "\"\"\"\tWrite a function to check whether the product of numbers in a vector is even or not.\"\"\"\nfunction is_product_even(arr::Vector{Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = is_product_even;\n\t@test(candidate([1, 2, 3]) == true)\n\t@test(candidate([1, 2, 1, 4]) == true)\n\t@test(candidate([1, 1]) == false)\nend\n", "language": "jl"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "\"\"\"\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\"\"\"\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_sum_list;\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\n\t@test(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\n\t@test(candidate([[2, 3, 1]]) == [2, 3, 1])\nend\n", "language": "jl"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "\"\"\"\tWrite a function to find maximum run of uppercase characters in the given string.\"\"\"\nfunction max_run_uppercase(test_str::String)::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = max_run_uppercase;\n\t@test(candidate(\"GeMKSForGERksISBESt\") == 5)\n\t@test(candidate(\"PrECIOusMOVemENTSYT\") == 6)\n\t@test(candidate(\"GooGLEFluTTER\") == 4)\nend\n", "language": "jl"}, {"task_id": "mbpp_807_first_odd", "prompt": "\"\"\"\tWrite a jlthon function to find the first odd number in a given vector of numbers.\"\"\"\nfunction first_odd(nums::Vector{Int64})::Int64 \n", "test": "using Test\n\n@testset begin\n\ncandidate = first_odd;\n\t@test(candidate([1, 3, 5]) == 1)\n\t@test(candidate([2, 4, 1, 3]) == 1)\n\t@test(candidate([8, 9, 1]) == 9)\nend\n", "language": "jl"}, {"task_id": "mbpp_808_check_K", "prompt": "\"\"\"\tWrite a function to check if the given tuples contain the k or not.\"\"\"\nfunction check_K(test_tup::Vector{Int64}, K::Int64)::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_K;\n\t@test(candidate([10, 4, 5, 6, 8], 6) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6], 7) == false)\n\t@test(candidate([7, 8, 9, 44, 11, 12], 11) == true)\nend\n", "language": "jl"}, {"task_id": "mbpp_809_check_smaller", "prompt": "\"\"\"\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\"\"\"\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n", "test": "using Test\n\n@testset begin\n\ncandidate = check_smaller;\n\t@test(candidate((1, 2, 3), (2, 3, 4)) == false)\n\t@test(candidate((4, 5, 6), (3, 4, 5)) == true)\n\t@test(candidate((11, 12, 13), (10, 11, 12)) == true)\nend\n", "language": "jl"}]