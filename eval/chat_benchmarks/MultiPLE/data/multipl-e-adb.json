[{"task_id": "HumanEval_0_has_close_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   function Has_Close_Elements (Numbers : Float_Array; Threshold : Float) return Boolean;\n   -- Check if in given Vector of numbers, are any two numbers closer to each other than\n   -- given threshold.\n   -- >>> Has_Close_Elements ([1.0, 2.0, 3.0], 0.5)\n   -- False\n   -- >>> Has_Close_Elements ([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Has_Close_Elements (Numbers : Float_Array; Threshold : Float) return Boolean", "test": "\n   end Has_Close_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Float_Array; Threshold : Float) return Boolean renames Placeholder.Has_Close_Elements;\n\nbegin\n   pragma Assert (Candidate ([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) = True);\n   pragma Assert (Candidate ([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) = False);\n   pragma Assert (Candidate ([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) = True);\n   pragma Assert (Candidate ([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) = False);\n   pragma Assert (Candidate ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) = True);\n   pragma Assert (Candidate ([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) = True);\n   pragma Assert (Candidate ([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Separate_Paren_Groups (Paren_String : String) return Unbounded_String_Array;\n   -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n   -- separate those group into separate strings and return the Vector of those.\n   -- Separate groups are balanced (each open brace is properly closed) and not nested within each other\n   -- Ignore any spaces in the input string.\n   -- >>> Separate_Paren_Groups (\"( ) (( )) (( )( ))\")\n   -- [To_Unbounded_String (\"()\"), To_Unbounded_String (\"(())\"), To_Unbounded_String (\"(()())\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Separate_Paren_Groups (Paren_String : String) return Unbounded_String_Array", "test": "\n   end Separate_Paren_Groups;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Paren_String : String) return Unbounded_String_Array renames Placeholder.Separate_Paren_Groups;\n\nbegin\n   pragma Assert (Candidate (\"(()()) ((())) () ((())()())\") = [To_Unbounded_String (\"(()())\"), To_Unbounded_String (\"((()))\"), To_Unbounded_String (\"()\"), To_Unbounded_String (\"((())()())\")]);\n   pragma Assert (Candidate (\"() (()) ((())) (((())))\") = [To_Unbounded_String (\"()\"), To_Unbounded_String (\"(())\"), To_Unbounded_String (\"((()))\"), To_Unbounded_String (\"(((())))\")]);\n   pragma Assert (Candidate (\"(()(())((())))\") = [To_Unbounded_String (\"(()(())((())))\")]);\n   pragma Assert (Candidate (\"( ) (( )) (( )( ))\") = [To_Unbounded_String (\"()\"), To_Unbounded_String (\"(())\"), To_Unbounded_String (\"(()())\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Truncate_Number (Number : Float) return Float;\n   -- Given a positive floating point number, it can be decomposed into\n   -- and integer part (largest integer smaller than given number) and decimals\n   -- (leftover part always smaller than 1).\n   -- Return the decimal part of the number.\n   -- >>> Truncate_Number (3.5)\n   -- 0.5\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Truncate_Number (Number : Float) return Float", "test": "\n   end Truncate_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Number : Float) return Float renames Placeholder.Truncate_Number;\n\nbegin\n   pragma Assert (Candidate (3.5) = 0.5);\n   pragma Assert (Candidate (1.25) = 0.25);\n   pragma Assert (Candidate (123.0) = 0.0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_3_below_zero", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Below_Zero (Operations : Integer_Array) return Boolean;\n   -- You're given a Vector of deposit and withdrawal operations on a bank account that starts with\n   -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n   -- at that point function should return True. Otherwise it should return False.\n   -- >>> Below_Zero ([1, 2, 3])\n   -- False\n   -- >>> Below_Zero ([1, 2, -4, 5])\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Below_Zero (Operations : Integer_Array) return Boolean", "test": "\n   end Below_Zero;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Operations : Integer_Array) return Boolean renames Placeholder.Below_Zero;\n\nbegin\n   pragma Assert (Candidate ([]) = False);\n   pragma Assert (Candidate ([1, 2, -3, 1, 2, -3]) = False);\n   pragma Assert (Candidate ([1, 2, -4, 5, 6]) = True);\n   pragma Assert (Candidate ([1, -1, 2, -2, 5, -5, 4, -4]) = False);\n   pragma Assert (Candidate ([1, -1, 2, -2, 5, -5, 4, -5]) = True);\n   pragma Assert (Candidate ([1, -2, 2, -2, 5, -5, 4, -4]) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   function Mean_Absolute_Deviation (Numbers : Float_Array) return Float;\n   -- For a given Vector of input numbers, calculate Mean Absolute Deviation\n   -- around the mean of this dataset.\n   -- Mean Absolute Deviation is the average absolute difference between each\n   -- element and a centerpoint (mean in this case):\n   -- MAD = average | x - x_mean |\n   -- >>> Mean_Absolute_Deviation ([1.0, 2.0, 3.0, 4.0])\n   -- 1.0\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Mean_Absolute_Deviation (Numbers : Float_Array) return Float", "test": "\n   end Mean_Absolute_Deviation;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Float_Array) return Float renames Placeholder.Mean_Absolute_Deviation;\n\nbegin\n   pragma Assert (Candidate ([1.0, 2.0]) = 0.5);\n   pragma Assert (Candidate ([1.0, 2.0, 3.0, 4.0]) = 1.0);\n   pragma Assert (Candidate ([1.0, 2.0, 3.0, 4.0, 5.0]) = 1.2);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_5_intersperse", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Intersperse (Numbers : Integer_Array; Delimeter : Integer) return Integer_Array;\n   -- Insert a number 'delimeter' between every two consecutive elements of input Vector `numbers'\n   -- >>> Intersperse ([], 4)\n   -- []\n   -- >>> Intersperse ([1, 2, 3], 4)\n   -- [1, 4, 2, 4, 3]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Intersperse (Numbers : Integer_Array; Delimeter : Integer) return Integer_Array", "test": "\n   end Intersperse;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Integer_Array; Delimeter : Integer) return Integer_Array renames Placeholder.Intersperse;\n\nbegin\n   pragma Assert (Candidate ([], 7) = []);\n   pragma Assert (Candidate ([5, 6, 3, 2], 8) = [5, 8, 6, 8, 3, 8, 2]);\n   pragma Assert (Candidate ([2, 2, 2], 2) = [2, 2, 2, 2, 2]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Parse_Nested_Parens (Paren_String : String) return Integer_Array;\n   -- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n   -- For each of the group, output the deepest level of nesting of parentheses.\n   -- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n   -- >>> Parse_Nested_Parens (\"(()()) ((())) () ((())()())\")\n   -- [2, 3, 1, 3]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Parse_Nested_Parens (Paren_String : String) return Integer_Array", "test": "\n   end Parse_Nested_Parens;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Paren_String : String) return Integer_Array renames Placeholder.Parse_Nested_Parens;\n\nbegin\n   pragma Assert (Candidate (\"(()()) ((())) () ((())()())\") = [2, 3, 1, 3]);\n   pragma Assert (Candidate (\"() (()) ((())) (((())))\") = [1, 2, 3, 4]);\n   pragma Assert (Candidate (\"(()(())((())))\") = [4]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Filter_By_Substring (Strings : Unbounded_String_Array; Substring : String) return Unbounded_String_Array;\n   -- Filter an input Vector of strings only for ones that contain given substring\n   -- >>> Filter_By_Substring ([], \"a\")\n   -- []\n   -- >>> Filter_By_Substring ([To_Unbounded_String (\"abc\"), To_Unbounded_String (\"bacd\"), To_Unbounded_String (\"cde\"), To_Unbounded_String (\"array\")], \"a\")\n   -- [To_Unbounded_String (\"abc\"), To_Unbounded_String (\"bacd\"), To_Unbounded_String (\"array\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Filter_By_Substring (Strings : Unbounded_String_Array; Substring : String) return Unbounded_String_Array", "test": "\n   end Filter_By_Substring;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Strings : Unbounded_String_Array; Substring : String) return Unbounded_String_Array renames Placeholder.Filter_By_Substring;\n\nbegin\n   pragma Assert (Candidate ([], \"john\") = []);\n   pragma Assert (Candidate ([To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"xxy\"), To_Unbounded_String (\"john doe\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")], \"xxx\") = [To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"aaaxxy\"), To_Unbounded_String (\"john doe\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")], \"xx\") = [To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"aaaxxy\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"grunt\"), To_Unbounded_String (\"trumpet\"), To_Unbounded_String (\"prune\"), To_Unbounded_String (\"gruesome\")], \"run\") = [To_Unbounded_String (\"grunt\"), To_Unbounded_String (\"prune\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_8_sum_product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Sum_Product (Numbers : Integer_Array) return Integer_Integer_Tuple;\n   -- For a given Vector of integers, return a record consisting of a sum and a product of all the integers in a Vector.\n   -- Empty sum should be equal to 0 and empty product should be equal to 1.\n   -- >>> Sum_Product ([])\n   -- (0, 1)\n   -- >>> Sum_Product ([1, 2, 3, 4])\n   -- (10, 24)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Product (Numbers : Integer_Array) return Integer_Integer_Tuple", "test": "\n   end Sum_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Integer_Array) return Integer_Integer_Tuple renames Placeholder.Sum_Product;\n\nbegin\n   pragma Assert (Candidate ([]) = (0, 1));\n   pragma Assert (Candidate ([1, 1, 1]) = (3, 1));\n   pragma Assert (Candidate ([100, 0]) = (100, 0));\n   pragma Assert (Candidate ([3, 5, 7]) = (15, 105));\n   pragma Assert (Candidate ([10]) = (10, 10));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Rolling_Max (Numbers : Integer_Array) return Integer_Array;\n   -- From a given Vector of integers, generate a Vector of rolling maximum element found until given moment\n   -- in the sequence.\n   -- >>> Rolling_Max ([1, 2, 3, 2, 3, 4, 2])\n   -- [1, 2, 3, 3, 3, 4, 4]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Rolling_Max (Numbers : Integer_Array) return Integer_Array", "test": "\n   end Rolling_Max;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Integer_Array) return Integer_Array renames Placeholder.Rolling_Max;\n\nbegin\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([1, 2, 3, 4]) = [1, 2, 3, 4]);\n   pragma Assert (Candidate ([4, 3, 2, 1]) = [4, 4, 4, 4]);\n   pragma Assert (Candidate ([3, 2, 3, 100, 3]) = [3, 3, 3, 100, 100]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Make_Palindrome (My_String : String) return String;\n   -- Find the shortest palindrome that begins with a supplied string.\n   -- Algorithm idea is simple:\n   -- - Find the longest postfix of supplied string that is a palindrome.\n   -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n   -- >>> Make_Palindrome (\"\")\n   -- \"\"\n   -- >>> Make_Palindrome (\"cat\")\n   -- \"catac\"\n   -- >>> Make_Palindrome (\"cata\")\n   -- \"catac\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Make_Palindrome (My_String : String) return String", "test": "\n   end Make_Palindrome;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Make_Palindrome;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"x\") = \"x\");\n   pragma Assert (Candidate (\"xyz\") = \"xyzyx\");\n   pragma Assert (Candidate (\"xyx\") = \"xyx\");\n   pragma Assert (Candidate (\"jerry\") = \"jerryrrej\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_11_string_xor", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function String_Xor (A : String; B : String) return String;\n   -- Input are two strings a and b consisting only of 1s and 0s.\n   -- Perform binary XOR on these inputs and return result also as a string.\n   -- >>> String_Xor (\"010\", \"110\")\n   -- \"100\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function String_Xor (A : String; B : String) return String", "test": "\n   end String_Xor;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : String; B : String) return String renames Placeholder.String_Xor;\n\nbegin\n   pragma Assert (Candidate (\"111000\", \"101010\") = \"010010\");\n   pragma Assert (Candidate (\"1\", \"1\") = \"0\");\n   pragma Assert (Candidate (\"0101\", \"0000\") = \"0101\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_12_longest", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   function Longest (Strings : Unbounded_String_Array) return Unbounded_String_Option;\n   -- Out of Vector of strings, return the longest one. Return the first one in case of multiple\n   -- strings of the same length. Return null in case the input Vector is empty.\n   -- >>> Longest ([])\n   -- (Valid => False)\n   -- >>> Longest ([To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\")])\n   -- (Valid => True, Value => To_Unbounded_String (\"a\"))\n   -- >>> Longest ([To_Unbounded_String (\"a\"), To_Unbounded_String (\"bb\"), To_Unbounded_String (\"ccc\")])\n   -- (Valid => True, Value => To_Unbounded_String (\"ccc\"))\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Longest (Strings : Unbounded_String_Array) return Unbounded_String_Option", "test": "\n   end Longest;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Strings : Unbounded_String_Array) return Unbounded_String_Option renames Placeholder.Longest;\n\nbegin\n   pragma Assert (Candidate ([]) = (Valid => False));\n   pragma Assert (Candidate ([To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\")]) = (Valid => True, Value => To_Unbounded_String (\"x\")));\n   pragma Assert (Candidate ([To_Unbounded_String (\"x\"), To_Unbounded_String (\"yyy\"), To_Unbounded_String (\"zzzz\"), To_Unbounded_String (\"www\"), To_Unbounded_String (\"kkkk\"), To_Unbounded_String (\"abc\")]) = (Valid => True, Value => To_Unbounded_String (\"zzzz\")));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Greatest_Common_Divisor (A : Integer; B : Integer) return Integer;\n   -- Return a greatest common divisor of two integers a and b\n   -- >>> Greatest_Common_Divisor (3, 5)\n   -- 1\n   -- >>> Greatest_Common_Divisor (25, 15)\n   -- 5\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Greatest_Common_Divisor (A : Integer; B : Integer) return Integer", "test": "\n   end Greatest_Common_Divisor;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Greatest_Common_Divisor;\n\nbegin\n   pragma Assert (Candidate (3, 7) = 1);\n   pragma Assert (Candidate (10, 15) = 5);\n   pragma Assert (Candidate (49, 14) = 7);\n   pragma Assert (Candidate (144, 60) = 12);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function All_Prefixes (My_String : String) return Unbounded_String_Array;\n   -- Return Vector of all prefixes from shortest to longest of the input string\n   -- >>> All_Prefixes (\"abc\")\n   -- [To_Unbounded_String (\"a\"), To_Unbounded_String (\"ab\"), To_Unbounded_String (\"abc\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function All_Prefixes (My_String : String) return Unbounded_String_Array", "test": "\n   end All_Prefixes;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Unbounded_String_Array renames Placeholder.All_Prefixes;\n\nbegin\n   pragma Assert (Candidate (\"\") = []);\n   pragma Assert (Candidate (\"asdfgh\") = [To_Unbounded_String (\"a\"), To_Unbounded_String (\"as\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"asdf\"), To_Unbounded_String (\"asdfg\"), To_Unbounded_String (\"asdfgh\")]);\n   pragma Assert (Candidate (\"WWW\") = [To_Unbounded_String (\"W\"), To_Unbounded_String (\"WW\"), To_Unbounded_String (\"WWW\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function String_Sequence (N : Integer) return String;\n   -- Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n   -- >>> String_Sequence (0)\n   -- \"0\"\n   -- >>> String_Sequence (5)\n   -- \"0 1 2 3 4 5\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function String_Sequence (N : Integer) return String", "test": "\n   end String_Sequence;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return String renames Placeholder.String_Sequence;\n\nbegin\n   pragma Assert (Candidate (0) = \"0\");\n   pragma Assert (Candidate (3) = \"0 1 2 3\");\n   pragma Assert (Candidate (10) = \"0 1 2 3 4 5 6 7 8 9 10\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Distinct_Characters (My_String : String) return Integer;\n   -- Given a string, find out how many distinct characters (regardless of case) does it consist of\n   -- >>> Count_Distinct_Characters (\"xyzXYZ\")\n   -- 3\n   -- >>> Count_Distinct_Characters (\"Jerry\")\n   -- 4\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Distinct_Characters (My_String : String) return Integer", "test": "\n   end Count_Distinct_Characters;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Integer renames Placeholder.Count_Distinct_Characters;\n\nbegin\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"abcde\") = 5);\n   pragma Assert (Candidate (\"abcdecadeCADE\") = 5);\n   pragma Assert (Candidate (\"aaaaAAAAaaaa\") = 1);\n   pragma Assert (Candidate (\"Jerry jERRY JeRRRY\") = 5);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_17_parse_music", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Parse_Music (Music_String : String) return Integer_Array;\n   -- Input to this function is a string representing musical notes in a special ASCII format.\n   -- Your task is to parse this string and return Vector of integers corresponding to how many beats does each\n   -- not last.\n   -- Here is a legend:\n   -- 'o' - whole note, lasts four beats\n   -- 'o|' - half note, lasts two beats\n   -- '.|' - quater note, lasts one beat\n   -- >>> Parse_Music (\"o o| .| o| o| .| .| .| .| o o\")\n   -- [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Parse_Music (Music_String : String) return Integer_Array", "test": "\n   end Parse_Music;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Music_String : String) return Integer_Array renames Placeholder.Parse_Music;\n\nbegin\n   pragma Assert (Candidate (\"\") = []);\n   pragma Assert (Candidate (\"o o o o\") = [4, 4, 4, 4]);\n   pragma Assert (Candidate (\".| .| .| .|\") = [1, 1, 1, 1]);\n   pragma Assert (Candidate (\"o| o| .| .| o o o o\") = [2, 2, 1, 1, 4, 4, 4, 4]);\n   pragma Assert (Candidate (\"o| .| o| .| o o| o o|\") = [2, 1, 2, 1, 4, 2, 4, 2]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function How_Many_Times (My_String : String; Substring : String) return Integer;\n   -- Find how many times a given substring can be found in the original string. Count overlaping cases.\n   -- >>> How_Many_Times (\"\", \"a\")\n   -- 0\n   -- >>> How_Many_Times (\"aaa\", \"a\")\n   -- 3\n   -- >>> How_Many_Times (\"aaaa\", \"aa\")\n   -- 3\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function How_Many_Times (My_String : String; Substring : String) return Integer", "test": "\n   end How_Many_Times;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String; Substring : String) return Integer renames Placeholder.How_Many_Times;\n\nbegin\n   pragma Assert (Candidate (\"\", \"x\") = 0);\n   pragma Assert (Candidate (\"xyxyxyx\", \"x\") = 4);\n   pragma Assert (Candidate (\"cacacacac\", \"cac\") = 4);\n   pragma Assert (Candidate (\"john doe\", \"john\") = 1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sort_Numbers (Numbers : String) return String;\n   -- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n   -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n   -- Return the string with numbers sorted from smallest to largest\n   -- >>> Sort_Numbers (\"three one five\")\n   -- \"one three five\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sort_Numbers (Numbers : String) return String", "test": "\n   end Sort_Numbers;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : String) return String renames Placeholder.Sort_Numbers;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"three\") = \"three\");\n   pragma Assert (Candidate (\"three five nine\") = \"three five nine\");\n   pragma Assert (Candidate (\"five zero four seven nine eight\") = \"zero four five seven eight nine\");\n   pragma Assert (Candidate (\"six five four three two one zero\") = \"zero one two three four five six\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   type Float_Float_Tuple is record\n      Float_1 : Float;\n      Float_2 : Float;\n   end record;\n\n   function Find_Closest_Elements (Numbers : Float_Array) return Float_Float_Tuple;\n   -- From a supplied Vector of numbers (of length at least two) select and return two that are the closest to each\n   -- other and return them in order (smaller number, larger number).\n   -- >>> Find_Closest_Elements ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n   -- (2.0, 2.2)\n   -- >>> Find_Closest_Elements ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n   -- (2.0, 2.0)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Closest_Elements (Numbers : Float_Array) return Float_Float_Tuple", "test": "\n   end Find_Closest_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Float_Array) return Float_Float_Tuple renames Placeholder.Find_Closest_Elements;\n\nbegin\n   pragma Assert (Candidate ([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) = (3.9, 4.0));\n   pragma Assert (Candidate ([1.0, 2.0, 5.9, 4.0, 5.0]) = (5.0, 5.9));\n   pragma Assert (Candidate ([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) = (2.0, 2.2));\n   pragma Assert (Candidate ([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) = (2.0, 2.0));\n   pragma Assert (Candidate ([1.1, 2.2, 3.1, 4.1, 5.1]) = (2.2, 3.1));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   function Rescale_To_Unit (Numbers : Float_Array) return Float_Array;\n   -- Given Vector of numbers (of at least two elements), apply a linear transform to that Vector,\n   -- such that the smallest number will become 0 and the largest will become 1\n   -- >>> Rescale_To_Unit ([1.0, 2.0, 3.0, 4.0, 5.0])\n   -- [0.0, 0.25, 0.5, 0.75, 1.0]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Rescale_To_Unit (Numbers : Float_Array) return Float_Array", "test": "\n   end Rescale_To_Unit;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Float_Array) return Float_Array renames Placeholder.Rescale_To_Unit;\n\nbegin\n   pragma Assert (Candidate ([2.0, 49.9]) = [0.0, 1.0]);\n   pragma Assert (Candidate ([100.0, 49.9]) = [1.0, 0.0]);\n   pragma Assert (Candidate ([1.0, 2.0, 3.0, 4.0, 5.0]) = [0.0, 0.25, 0.5, 0.75, 1.0]);\n   pragma Assert (Candidate ([2.0, 1.0, 5.0, 3.0, 4.0]) = [0.25, 0.0, 1.0, 0.5, 0.75]);\n   pragma Assert (Candidate ([12.0, 11.0, 15.0, 13.0, 14.0]) = [0.25, 0.0, 1.0, 0.5, 0.75]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_23_strlen", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Strlen (My_String : String) return Integer;\n   -- Return length of given string\n   -- >>> Strlen (\"\")\n   -- 0\n   -- >>> Strlen (\"abc\")\n   -- 3\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Strlen (My_String : String) return Integer", "test": "\n   end Strlen;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Integer renames Placeholder.Strlen;\n\nbegin\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"x\") = 1);\n   pragma Assert (Candidate (\"asdasnakj\") = 9);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Largest_Divisor (N : Integer) return Integer;\n   -- For a given number n, find the largest number that divides n evenly, smaller than n\n   -- >>> Largest_Divisor (15)\n   -- 5\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Largest_Divisor (N : Integer) return Integer", "test": "\n   end Largest_Divisor;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Largest_Divisor;\n\nbegin\n   pragma Assert (Candidate (3) = 1);\n   pragma Assert (Candidate (7) = 1);\n   pragma Assert (Candidate (10) = 5);\n   pragma Assert (Candidate (100) = 50);\n   pragma Assert (Candidate (49) = 7);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_25_factorize", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Factorize (N : Integer) return Integer_Array;\n   -- Return Vector of prime factors of given integer in the order from smallest to largest.\n   -- Each of the factors should be Vectored number of times corresponding to how many times it appeares in factorization.\n   -- Input number should be equal to the product of all factors\n   -- >>> Factorize (8)\n   -- [2, 2, 2]\n   -- >>> Factorize (25)\n   -- [5, 5]\n   -- >>> Factorize (70)\n   -- [2, 5, 7]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Factorize (N : Integer) return Integer_Array", "test": "\n   end Factorize;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Factorize;\n\nbegin\n   pragma Assert (Candidate (2) = [2]);\n   pragma Assert (Candidate (4) = [2, 2]);\n   pragma Assert (Candidate (8) = [2, 2, 2]);\n   pragma Assert (Candidate (57) = [3, 19]);\n   pragma Assert (Candidate (3249) = [3, 3, 19, 19]);\n   pragma Assert (Candidate (185193) = [3, 3, 3, 19, 19, 19]);\n   pragma Assert (Candidate (20577) = [3, 19, 19, 19]);\n   pragma Assert (Candidate (18) = [2, 3, 3]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Remove_Duplicates (Numbers : Integer_Array) return Integer_Array;\n   -- From a Vector of integers, remove all elements that occur more than once.\n   -- Keep order of elements left the same as in the input.\n   -- >>> Remove_Duplicates ([1, 2, 3, 2, 4])\n   -- [1, 3, 4]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Duplicates (Numbers : Integer_Array) return Integer_Array", "test": "\n   end Remove_Duplicates;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Integer_Array) return Integer_Array renames Placeholder.Remove_Duplicates;\n\nbegin\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([1, 2, 3, 4]) = [1, 2, 3, 4]);\n   pragma Assert (Candidate ([1, 2, 3, 2, 4, 3, 5]) = [1, 4, 5]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_27_flip_case", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Flip_Case (My_String : String) return String;\n   -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n   -- >>> Flip_Case (\"Hello\")\n   -- \"hELLO\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Flip_Case (My_String : String) return String", "test": "\n   end Flip_Case;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Flip_Case;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"Hello!\") = \"hELLO!\");\n   pragma Assert (Candidate (\"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_28_concatenate", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Concatenate (Strings : Unbounded_String_Array) return String;\n   -- Concatenate Vector of strings into a single string\n   -- >>> Concatenate ([])\n   -- \"\"\n   -- >>> Concatenate ([To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\")])\n   -- \"abc\"\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Concatenate (Strings : Unbounded_String_Array) return String", "test": "\n   end Concatenate;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Strings : Unbounded_String_Array) return String renames Placeholder.Concatenate;\n\nbegin\n   pragma Assert (Candidate ([]) = \"\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\")]) = \"xyz\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\"), To_Unbounded_String (\"w\"), To_Unbounded_String (\"k\")]) = \"xyzwk\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Filter_By_Prefix (Strings : Unbounded_String_Array; Prefix : String) return Unbounded_String_Array;\n   -- Filter an input Vector of strings only for ones that start with a given prefix.\n   -- >>> Filter_By_Prefix ([], \"a\")\n   -- []\n   -- >>> Filter_By_Prefix ([To_Unbounded_String (\"abc\"), To_Unbounded_String (\"bcd\"), To_Unbounded_String (\"cde\"), To_Unbounded_String (\"array\")], \"a\")\n   -- [To_Unbounded_String (\"abc\"), To_Unbounded_String (\"array\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Filter_By_Prefix (Strings : Unbounded_String_Array; Prefix : String) return Unbounded_String_Array", "test": "\n   end Filter_By_Prefix;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Strings : Unbounded_String_Array; Prefix : String) return Unbounded_String_Array renames Placeholder.Filter_By_Prefix;\n\nbegin\n   pragma Assert (Candidate ([], \"john\") = []);\n   pragma Assert (Candidate ([To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"xxy\"), To_Unbounded_String (\"john doe\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")], \"xxx\") = [To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_30_get_positive", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Get_Positive (L : Integer_Array) return Integer_Array;\n   -- Return only positive numbers in the Vector.\n   -- >>> Get_Positive ([-1, 2, -4, 5, 6])\n   -- [2, 5, 6]\n   -- >>> Get_Positive ([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   -- [5, 3, 2, 3, 9, 123, 1]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Positive (L : Integer_Array) return Integer_Array", "test": "\n   end Get_Positive;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Get_Positive;\n\nbegin\n   pragma Assert (Candidate ([-1, -2, 4, 5, 6]) = [4, 5, 6]);\n   pragma Assert (Candidate ([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) = [5, 3, 2, 3, 3, 9, 123, 1]);\n   pragma Assert (Candidate ([-1, -2]) = []);\n   pragma Assert (Candidate ([]) = []);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_31_is_prime", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Prime (N : Integer) return Boolean;\n   -- Return true if a given number is prime, and false otherwise.\n   -- >>> Is_Prime (6)\n   -- False\n   -- >>> Is_Prime (101)\n   -- True\n   -- >>> Is_Prime (11)\n   -- True\n   -- >>> Is_Prime (13441)\n   -- True\n   -- >>> Is_Prime (61)\n   -- True\n   -- >>> Is_Prime (4)\n   -- False\n   -- >>> Is_Prime (1)\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Prime (N : Integer) return Boolean", "test": "\n   end Is_Prime;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Prime;\n\nbegin\n   pragma Assert (Candidate (6) = False);\n   pragma Assert (Candidate (101) = True);\n   pragma Assert (Candidate (11) = True);\n   pragma Assert (Candidate (13441) = True);\n   pragma Assert (Candidate (61) = True);\n   pragma Assert (Candidate (4) = False);\n   pragma Assert (Candidate (1) = False);\n   pragma Assert (Candidate (5) = True);\n   pragma Assert (Candidate (11) = True);\n   pragma Assert (Candidate (17) = True);\n   pragma Assert (Candidate (85) = False);\n   pragma Assert (Candidate (77) = False);\n   pragma Assert (Candidate (255379) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_33_sort_third", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sort_Third (L : Integer_Array) return Integer_Array;\n   -- This function takes a Vector l and returns a Vector l' such that\n   -- l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n   -- to the values of the corresponding indicies of l, but sorted.\n   -- >>> Sort_Third ([1, 2, 3])\n   -- [1, 2, 3]\n   -- >>> Sort_Third ([5, 6, 3, 4, 8, 9, 2])\n   -- [2, 6, 3, 4, 8, 9, 5]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sort_Third (L : Integer_Array) return Integer_Array", "test": "\n   end Sort_Third;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Sort_Third;\n\nbegin\n   pragma Assert (Candidate ([5, 6, 3, 4, 8, 9, 2]) = [2, 6, 3, 4, 8, 9, 5]);\n   pragma Assert (Candidate ([5, 8, 3, 4, 6, 9, 2]) = [2, 8, 3, 4, 6, 9, 5]);\n   pragma Assert (Candidate ([5, 6, 9, 4, 8, 3, 2]) = [2, 6, 9, 4, 8, 3, 5]);\n   pragma Assert (Candidate ([5, 6, 3, 4, 8, 9, 2, 1]) = [2, 6, 3, 4, 8, 9, 5, 1]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_34_unique", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Unique (L : Integer_Array) return Integer_Array;\n   -- Return sorted unique elements in a Vector\n   -- >>> Unique ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   -- [0, 2, 3, 5, 9, 123]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Unique (L : Integer_Array) return Integer_Array", "test": "\n   end Unique;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Unique;\n\nbegin\n   pragma Assert (Candidate ([5, 3, 5, 2, 3, 3, 9, 0, 123]) = [0, 2, 3, 5, 9, 123]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_35_max_element", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Element (L : Integer_Array) return Integer;\n   -- Return maximum element in the Vector.\n   -- >>> Max_Element ([1, 2, 3])\n   -- 3\n   -- >>> Max_Element ([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   -- 123\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Element (L : Integer_Array) return Integer", "test": "\n   end Max_Element;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer renames Placeholder.Max_Element;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = 3);\n   pragma Assert (Candidate ([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) = 124);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Fizz_Buzz (N : Integer) return Integer;\n   -- Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n   -- >>> Fizz_Buzz (50)\n   -- 0\n   -- >>> Fizz_Buzz (78)\n   -- 2\n   -- >>> Fizz_Buzz (79)\n   -- 3\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Fizz_Buzz (N : Integer) return Integer", "test": "\n   end Fizz_Buzz;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Fizz_Buzz;\n\nbegin\n   pragma Assert (Candidate (50) = 0);\n   pragma Assert (Candidate (78) = 2);\n   pragma Assert (Candidate (79) = 3);\n   pragma Assert (Candidate (100) = 3);\n   pragma Assert (Candidate (200) = 6);\n   pragma Assert (Candidate (4000) = 192);\n   pragma Assert (Candidate (10000) = 639);\n   pragma Assert (Candidate (100000) = 8026);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_37_sort_even", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sort_Even (L : Integer_Array) return Integer_Array;\n   -- This function takes a Vector l and returns a Vector l' such that\n   -- l' is identical to l in the odd indicies, while its values at the even indicies are equal\n   -- to the values of the even indicies of l, but sorted.\n   -- >>> Sort_Even ([1, 2, 3])\n   -- [1, 2, 3]\n   -- >>> Sort_Even ([5, 6, 3, 4])\n   -- [3, 6, 5, 4]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sort_Even (L : Integer_Array) return Integer_Array", "test": "\n   end Sort_Even;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Sort_Even;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = [1, 2, 3]);\n   pragma Assert (Candidate ([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) = [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n   pragma Assert (Candidate ([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) = [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Prime_Fib (N : Integer) return Integer;\n   -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n   -- >>> Prime_Fib (1)\n   -- 2\n   -- >>> Prime_Fib (2)\n   -- 3\n   -- >>> Prime_Fib (3)\n   -- 5\n   -- >>> Prime_Fib (4)\n   -- 13\n   -- >>> Prime_Fib (5)\n   -- 89\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Prime_Fib (N : Integer) return Integer", "test": "\n   end Prime_Fib;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Prime_Fib;\n\nbegin\n   pragma Assert (Candidate (1) = 2);\n   pragma Assert (Candidate (2) = 3);\n   pragma Assert (Candidate (3) = 5);\n   pragma Assert (Candidate (4) = 13);\n   pragma Assert (Candidate (5) = 89);\n   pragma Assert (Candidate (6) = 233);\n   pragma Assert (Candidate (7) = 1597);\n   pragma Assert (Candidate (8) = 28657);\n   pragma Assert (Candidate (9) = 514229);\n   pragma Assert (Candidate (10) = 433494437);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Triples_Sum_To_Zero (L : Integer_Array) return Boolean;\n   -- triples_sum_to_zero takes a Vector of integers as an input.\n   -- it returns True if there are three distinct elements in the Vector that\n   -- sum to zero, and False otherwise.\n   -- >>> Triples_Sum_To_Zero ([1, 3, 5, 0])\n   -- False\n   -- >>> Triples_Sum_To_Zero ([1, 3, -2, 1])\n   -- True\n   -- >>> Triples_Sum_To_Zero ([1, 2, 3, 7])\n   -- False\n   -- >>> Triples_Sum_To_Zero ([2, 4, -5, 3, 9, 7])\n   -- True\n   -- >>> Triples_Sum_To_Zero ([1])\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Triples_Sum_To_Zero (L : Integer_Array) return Boolean", "test": "\n   end Triples_Sum_To_Zero;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Triples_Sum_To_Zero;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 5, 0]) = False);\n   pragma Assert (Candidate ([1, 3, 5, -1]) = False);\n   pragma Assert (Candidate ([1, 3, -2, 1]) = True);\n   pragma Assert (Candidate ([1, 2, 3, 7]) = False);\n   pragma Assert (Candidate ([1, 2, 5, 7]) = False);\n   pragma Assert (Candidate ([2, 4, -5, 3, 9, 7]) = True);\n   pragma Assert (Candidate ([1]) = False);\n   pragma Assert (Candidate ([1, 3, 5, -100]) = False);\n   pragma Assert (Candidate ([100, 3, 5, -100]) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Car_Race_Collision (N : Integer) return Integer;\n   -- Imagine a road that's a perfectly straight infinitely long line.\n   -- n cars are driving left to right;  simultaneously, a different set of n cars\n   -- are driving right to left.   The two sets of cars start out being very far from\n   -- each other.  All cars move in the same speed.  Two cars are said to collide\n   -- when a car that's moving left to right hits a car that's moving right to left.\n   -- However, the cars are infinitely sturdy and strong; as a result, they continue moving\n   -- in their trajectory as if they did not collide.\n   -- This function outputs the number of such collisions.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Car_Race_Collision (N : Integer) return Integer", "test": "\n   end Car_Race_Collision;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Car_Race_Collision;\n\nbegin\n   pragma Assert (Candidate (2) = 4);\n   pragma Assert (Candidate (3) = 9);\n   pragma Assert (Candidate (4) = 16);\n   pragma Assert (Candidate (8) = 64);\n   pragma Assert (Candidate (10) = 100);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_42_incr_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Incr_List (L : Integer_Array) return Integer_Array;\n   -- Return Vector with elements incremented by 1.\n   -- >>> Incr_List ([1, 2, 3])\n   -- [2, 3, 4]\n   -- >>> Incr_List ([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   -- [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Incr_List (L : Integer_Array) return Integer_Array", "test": "\n   end Incr_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Incr_List;\n\nbegin\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([3, 2, 1]) = [4, 3, 2]);\n   pragma Assert (Candidate ([5, 2, 5, 2, 3, 3, 9, 0, 123]) = [6, 3, 6, 3, 4, 4, 10, 1, 124]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Pairs_Sum_To_Zero (L : Integer_Array) return Boolean;\n   -- pairs_sum_to_zero takes a Vector of integers as an input.\n   -- it returns True if there are two distinct elements in the Vector that\n   -- sum to zero, and False otherwise.\n   -- >>> Pairs_Sum_To_Zero ([1, 3, 5, 0])\n   -- False\n   -- >>> Pairs_Sum_To_Zero ([1, 3, -2, 1])\n   -- False\n   -- >>> Pairs_Sum_To_Zero ([1, 2, 3, 7])\n   -- False\n   -- >>> Pairs_Sum_To_Zero ([2, 4, -5, 3, 5, 7])\n   -- True\n   -- >>> Pairs_Sum_To_Zero ([1])\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Pairs_Sum_To_Zero (L : Integer_Array) return Boolean", "test": "\n   end Pairs_Sum_To_Zero;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Pairs_Sum_To_Zero;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 5, 0]) = False);\n   pragma Assert (Candidate ([1, 3, -2, 1]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 7]) = False);\n   pragma Assert (Candidate ([2, 4, -5, 3, 5, 7]) = True);\n   pragma Assert (Candidate ([1]) = False);\n   pragma Assert (Candidate ([-3, 9, -1, 3, 2, 30]) = True);\n   pragma Assert (Candidate ([-3, 9, -1, 3, 2, 31]) = True);\n   pragma Assert (Candidate ([-3, 9, -1, 4, 2, 30]) = False);\n   pragma Assert (Candidate ([-3, 9, -1, 4, 2, 31]) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_44_change_base", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Change_Base (X : Integer; Base : Integer) return String;\n   -- Change numerical base of input number x to base.\n   -- return string representation after the conversion.\n   -- base numbers are less than 10.\n   -- >>> Change_Base (8, 3)\n   -- \"22\"\n   -- >>> Change_Base (8, 2)\n   -- \"1000\"\n   -- >>> Change_Base (7, 2)\n   -- \"111\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Change_Base (X : Integer; Base : Integer) return String", "test": "\n   end Change_Base;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Base : Integer) return String renames Placeholder.Change_Base;\n\nbegin\n   pragma Assert (Candidate (8, 3) = \"22\");\n   pragma Assert (Candidate (9, 3) = \"100\");\n   pragma Assert (Candidate (234, 2) = \"11101010\");\n   pragma Assert (Candidate (16, 2) = \"10000\");\n   pragma Assert (Candidate (8, 2) = \"1000\");\n   pragma Assert (Candidate (7, 2) = \"111\");\n   pragma Assert (Candidate (2, 3) = \"2\");\n   pragma Assert (Candidate (3, 4) = \"3\");\n   pragma Assert (Candidate (4, 5) = \"4\");\n   pragma Assert (Candidate (5, 6) = \"5\");\n   pragma Assert (Candidate (6, 7) = \"6\");\n   pragma Assert (Candidate (7, 8) = \"7\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Triangle_Area (A : Integer; H : Integer) return Float;\n   -- Given length of a side and high return area for a triangle.\n   -- >>> Triangle_Area (5, 3)\n   -- 7.5\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Triangle_Area (A : Integer; H : Integer) return Float", "test": "\n   end Triangle_Area;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; H : Integer) return Float renames Placeholder.Triangle_Area;\n\nbegin\n   pragma Assert (Candidate (5, 3) = 7.5);\n   pragma Assert (Candidate (2, 2) = 2.0);\n   pragma Assert (Candidate (10, 8) = 40.0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_46_fib4", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Fib4 (N : Integer) return Integer;\n   -- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n   -- fib4(0) -> 0\n   -- fib4(1) -> 0\n   -- fib4(2) -> 2\n   -- fib4(3) -> 0\n   -- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   -- Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n   -- >>> Fib4 (5)\n   -- 4\n   -- >>> Fib4 (6)\n   -- 8\n   -- >>> Fib4 (7)\n   -- 14\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Fib4 (N : Integer) return Integer", "test": "\n   end Fib4;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Fib4;\n\nbegin\n   pragma Assert (Candidate (5) = 4);\n   pragma Assert (Candidate (8) = 28);\n   pragma Assert (Candidate (10) = 104);\n   pragma Assert (Candidate (12) = 386);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_47_median", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Median (L : Integer_Array) return Float;\n   -- Return median of elements in the Vector l.\n   -- >>> Median ([3, 1, 2, 4, 5])\n   -- 3\n   -- >>> Median ([-10, 4, 6, 1000, 10, 20])\n   -- 15.0\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Median (L : Integer_Array) return Float", "test": "\n   end Median;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Float renames Placeholder.Median;\n\nbegin\n   pragma Assert (Candidate ([3, 1, 2, 4, 5]) = 3);\n   pragma Assert (Candidate ([-10, 4, 6, 1000, 10, 20]) = 8.0);\n   pragma Assert (Candidate ([5]) = 5);\n   pragma Assert (Candidate ([6, 5]) = 5.5);\n   pragma Assert (Candidate ([8, 1, 3, 9, 9, 2, 7]) = 7);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Palindrome (Text : String) return Boolean;\n   -- Checks if given string is a palindrome\n   -- >>> Is_Palindrome (\"\")\n   -- True\n   -- >>> Is_Palindrome (\"aba\")\n   -- True\n   -- >>> Is_Palindrome (\"aaaaa\")\n   -- True\n   -- >>> Is_Palindrome (\"zbcd\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Palindrome (Text : String) return Boolean", "test": "\n   end Is_Palindrome;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Is_Palindrome;\n\nbegin\n   pragma Assert (Candidate (\"\") = True);\n   pragma Assert (Candidate (\"aba\") = True);\n   pragma Assert (Candidate (\"aaaaa\") = True);\n   pragma Assert (Candidate (\"zbcd\") = False);\n   pragma Assert (Candidate (\"xywyx\") = True);\n   pragma Assert (Candidate (\"xywyz\") = False);\n   pragma Assert (Candidate (\"xywzx\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_49_modp", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Modp (N : Integer; P : Integer) return Integer;\n   -- Return 2^n modulo p (be aware of numerics).\n   -- >>> Modp (3, 5)\n   -- 3\n   -- >>> Modp (1101, 101)\n   -- 2\n   -- >>> Modp (0, 101)\n   -- 1\n   -- >>> Modp (3, 11)\n   -- 8\n   -- >>> Modp (100, 101)\n   -- 1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Modp (N : Integer; P : Integer) return Integer", "test": "\n   end Modp;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; P : Integer) return Integer renames Placeholder.Modp;\n\nbegin\n   pragma Assert (Candidate (3, 5) = 3);\n   pragma Assert (Candidate (1101, 101) = 2);\n   pragma Assert (Candidate (0, 101) = 1);\n   pragma Assert (Candidate (3, 11) = 8);\n   pragma Assert (Candidate (100, 101) = 1);\n   pragma Assert (Candidate (30, 5) = 4);\n   pragma Assert (Candidate (31, 5) = 3);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Vowels (Text : String) return String;\n   -- remove_vowels is a function that takes string and returns string without vowels.\n   -- >>> Remove_Vowels (\"\")\n   -- \"\"\n   -- >>> Remove_Vowels (\"abcdef\")\n   -- \"bcdf\"\n   -- >>> Remove_Vowels (\"aaaaa\")\n   -- \"\"\n   -- >>> Remove_Vowels (\"aaBAA\")\n   -- \"B\"\n   -- >>> Remove_Vowels (\"zbcd\")\n   -- \"zbcd\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Vowels (Text : String) return String", "test": "\n   end Remove_Vowels;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return String renames Placeholder.Remove_Vowels;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"abcdef\nghijklm\") = \"bcdf\nghjklm\");\n   pragma Assert (Candidate (\"fedcba\") = \"fdcb\");\n   pragma Assert (Candidate (\"eeeee\") = \"\");\n   pragma Assert (Candidate (\"acBAA\") = \"cB\");\n   pragma Assert (Candidate (\"EcBOO\") = \"cB\");\n   pragma Assert (Candidate (\"ybcd\") = \"ybcd\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Below_Threshold (L : Integer_Array; T : Integer) return Boolean;\n   -- Return True if all numbers in the Vector l are below threshold t.\n   -- >>> Below_Threshold ([1, 2, 4, 10], 100)\n   -- True\n   -- >>> Below_Threshold ([1, 20, 4, 10], 5)\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Below_Threshold (L : Integer_Array; T : Integer) return Boolean", "test": "\n   end Below_Threshold;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array; T : Integer) return Boolean renames Placeholder.Below_Threshold;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4, 10], 100) = True);\n   pragma Assert (Candidate ([1, 20, 4, 10], 5) = False);\n   pragma Assert (Candidate ([1, 20, 4, 10], 21) = True);\n   pragma Assert (Candidate ([1, 20, 4, 10], 22) = True);\n   pragma Assert (Candidate ([1, 8, 4, 10], 11) = True);\n   pragma Assert (Candidate ([1, 8, 4, 10], 10) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_53_add", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Add (X : Integer; Y : Integer) return Integer;\n   -- Add two numbers x and y\n   -- >>> Add (2, 3)\n   -- 5\n   -- >>> Add (5, 7)\n   -- 12\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Add (X : Integer; Y : Integer) return Integer", "test": "\n   end Add;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Y : Integer) return Integer renames Placeholder.Add;\n\nbegin\n   pragma Assert (Candidate (0, 1) = 1);\n   pragma Assert (Candidate (1, 0) = 1);\n   pragma Assert (Candidate (2, 3) = 5);\n   pragma Assert (Candidate (5, 7) = 12);\n   pragma Assert (Candidate (7, 5) = 12);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_54_same_chars", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Same_Chars (S0 : String; S1 : String) return Boolean;\n   -- Check if two words have the same characters.\n   -- >>> Same_Chars (\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   -- True\n   -- >>> Same_Chars (\"abcd\", \"dddddddabc\")\n   -- True\n   -- >>> Same_Chars (\"dddddddabc\", \"abcd\")\n   -- True\n   -- >>> Same_Chars (\"eabcd\", \"dddddddabc\")\n   -- False\n   -- >>> Same_Chars (\"abcd\", \"dddddddabce\")\n   -- False\n   -- >>> Same_Chars (\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Same_Chars (S0 : String; S1 : String) return Boolean", "test": "\n   end Same_Chars;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S0 : String; S1 : String) return Boolean renames Placeholder.Same_Chars;\n\nbegin\n   pragma Assert (Candidate (\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") = True);\n   pragma Assert (Candidate (\"abcd\", \"dddddddabc\") = True);\n   pragma Assert (Candidate (\"dddddddabc\", \"abcd\") = True);\n   pragma Assert (Candidate (\"eabcd\", \"dddddddabc\") = False);\n   pragma Assert (Candidate (\"abcd\", \"dddddddabcf\") = False);\n   pragma Assert (Candidate (\"eabcdzzzz\", \"dddzzzzzzzddddabc\") = False);\n   pragma Assert (Candidate (\"aabb\", \"aaccc\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_55_fib", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Fib (N : Integer) return Integer;\n   -- Return n-th Fibonacci number.\n   -- >>> Fib (10)\n   -- 55\n   -- >>> Fib (1)\n   -- 1\n   -- >>> Fib (8)\n   -- 21\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Fib (N : Integer) return Integer", "test": "\n   end Fib;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Fib;\n\nbegin\n   pragma Assert (Candidate (10) = 55);\n   pragma Assert (Candidate (1) = 1);\n   pragma Assert (Candidate (8) = 21);\n   pragma Assert (Candidate (11) = 89);\n   pragma Assert (Candidate (12) = 144);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean;\n   -- brackets is a string of \"<\" and \">\".\n   -- return True if every opening bracket has a corresponding closing bracket.\n   -- >>> Correct_Bracketing (\"<\")\n   -- False\n   -- >>> Correct_Bracketing (\"<>\")\n   -- True\n   -- >>> Correct_Bracketing (\"<<><>>\")\n   -- True\n   -- >>> Correct_Bracketing (\"><<>\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean", "test": "\n   end Correct_Bracketing;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Brackets : String) return Boolean renames Placeholder.Correct_Bracketing;\n\nbegin\n   pragma Assert (Candidate (\"<>\") = True);\n   pragma Assert (Candidate (\"<<><>>\") = True);\n   pragma Assert (Candidate (\"<><><<><>><>\") = True);\n   pragma Assert (Candidate (\"<><><<<><><>><>><<><><<>>>\") = True);\n   pragma Assert (Candidate (\"<<<><>>>>\") = False);\n   pragma Assert (Candidate (\"><<>\") = False);\n   pragma Assert (Candidate (\"<\") = False);\n   pragma Assert (Candidate (\"<<<<\") = False);\n   pragma Assert (Candidate (\">\") = False);\n   pragma Assert (Candidate (\"<<>\") = False);\n   pragma Assert (Candidate (\"<><><<><>><>><<>\") = False);\n   pragma Assert (Candidate (\"<><><<><>><>>><>\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_57_monotonic", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Monotonic (L : Integer_Array) return Boolean;\n   -- Return True is Vector elements are monotonically increasing or decreasing.\n   -- >>> Monotonic ([1, 2, 4, 20])\n   -- True\n   -- >>> Monotonic ([1, 20, 4, 10])\n   -- False\n   -- >>> Monotonic ([4, 1, 0, -10])\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Monotonic (L : Integer_Array) return Boolean", "test": "\n   end Monotonic;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Monotonic;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4, 10]) = True);\n   pragma Assert (Candidate ([1, 2, 4, 20]) = True);\n   pragma Assert (Candidate ([1, 20, 4, 10]) = False);\n   pragma Assert (Candidate ([4, 1, 0, -10]) = True);\n   pragma Assert (Candidate ([4, 1, 1, 0]) = True);\n   pragma Assert (Candidate ([1, 2, 3, 2, 5, 60]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 60]) = True);\n   pragma Assert (Candidate ([9, 9, 9, 9]) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_58_common", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Common (L1 : Integer_Array; L2 : Integer_Array) return Integer_Array;\n   -- Return sorted unique common elements for two Vectors.\n   -- >>> Common ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n   -- [1, 5, 653]\n   -- >>> Common ([5, 3, 2, 8], [3, 2])\n   -- [2, 3]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Common (L1 : Integer_Array; L2 : Integer_Array) return Integer_Array", "test": "\n   end Common;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L1 : Integer_Array; L2 : Integer_Array) return Integer_Array renames Placeholder.Common;\n\nbegin\n   pragma Assert (Candidate ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]);\n   pragma Assert (Candidate ([5, 3, 2, 8], [3, 2]) = [2, 3]);\n   pragma Assert (Candidate ([4, 3, 2, 8], [3, 2, 4]) = [2, 3, 4]);\n   pragma Assert (Candidate ([4, 3, 2, 8], []) = []);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Largest_Prime_Factor (N : Integer) return Integer;\n   -- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n   -- >>> Largest_Prime_Factor (13195)\n   -- 29\n   -- >>> Largest_Prime_Factor (2048)\n   -- 2\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Largest_Prime_Factor (N : Integer) return Integer", "test": "\n   end Largest_Prime_Factor;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Largest_Prime_Factor;\n\nbegin\n   pragma Assert (Candidate (15) = 5);\n   pragma Assert (Candidate (27) = 3);\n   pragma Assert (Candidate (63) = 7);\n   pragma Assert (Candidate (330) = 11);\n   pragma Assert (Candidate (13195) = 29);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum_To_N (N : Integer) return Integer;\n   -- sum_to_n is a function that sums numbers from 1 to n.\n   -- >>> Sum_To_N (30)\n   -- 465\n   -- >>> Sum_To_N (100)\n   -- 5050\n   -- >>> Sum_To_N (5)\n   -- 15\n   -- >>> Sum_To_N (10)\n   -- 55\n   -- >>> Sum_To_N (1)\n   -- 1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_To_N (N : Integer) return Integer", "test": "\n   end Sum_To_N;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Sum_To_N;\n\nbegin\n   pragma Assert (Candidate (1) = 1);\n   pragma Assert (Candidate (6) = 21);\n   pragma Assert (Candidate (11) = 66);\n   pragma Assert (Candidate (30) = 465);\n   pragma Assert (Candidate (100) = 5050);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean;\n   -- brackets is a string of \"(\" and \")\".\n   -- return True if every opening bracket has a corresponding closing bracket.\n   -- >>> Correct_Bracketing (\"(\")\n   -- False\n   -- >>> Correct_Bracketing (\"()\")\n   -- True\n   -- >>> Correct_Bracketing (\"(()())\")\n   -- True\n   -- >>> Correct_Bracketing (\")(()\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean", "test": "\n   end Correct_Bracketing;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Brackets : String) return Boolean renames Placeholder.Correct_Bracketing;\n\nbegin\n   pragma Assert (Candidate (\"()\") = True);\n   pragma Assert (Candidate (\"(()())\") = True);\n   pragma Assert (Candidate (\"()()(()())()\") = True);\n   pragma Assert (Candidate (\"()()((()()())())(()()(()))\") = True);\n   pragma Assert (Candidate (\"((()())))\") = False);\n   pragma Assert (Candidate (\")(()\") = False);\n   pragma Assert (Candidate (\"(\") = False);\n   pragma Assert (Candidate (\"((((\") = False);\n   pragma Assert (Candidate (\")\") = False);\n   pragma Assert (Candidate (\"(()\") = False);\n   pragma Assert (Candidate (\"()()(()())())(()\") = False);\n   pragma Assert (Candidate (\"()()(()())()))()\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_62_derivative", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Derivative (Xs : Integer_Array) return Integer_Array;\n   -- xs represent coefficients of a polynomial.\n   -- xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   -- Return derivative of this polynomial in the same form.\n   -- >>> Derivative ([3, 1, 2, 4, 5])\n   -- [1, 4, 12, 20]\n   -- >>> Derivative ([1, 2, 3])\n   -- [2, 6]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Derivative (Xs : Integer_Array) return Integer_Array", "test": "\n   end Derivative;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Xs : Integer_Array) return Integer_Array renames Placeholder.Derivative;\n\nbegin\n   pragma Assert (Candidate ([3, 1, 2, 4, 5]) = [1, 4, 12, 20]);\n   pragma Assert (Candidate ([1, 2, 3]) = [2, 6]);\n   pragma Assert (Candidate ([3, 2, 1]) = [2, 2]);\n   pragma Assert (Candidate ([3, 2, 1, 0, 4]) = [2, 2, 0, 16]);\n   pragma Assert (Candidate ([1]) = []);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_63_fibfib", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Fibfib (N : Integer) return Integer;\n   -- The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n   -- fibfib(0) == 0\n   -- fibfib(1) == 0\n   -- fibfib(2) == 1\n   -- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   -- Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n   -- >>> Fibfib (1)\n   -- 0\n   -- >>> Fibfib (5)\n   -- 4\n   -- >>> Fibfib (8)\n   -- 24\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Fibfib (N : Integer) return Integer", "test": "\n   end Fibfib;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Fibfib;\n\nbegin\n   pragma Assert (Candidate (2) = 1);\n   pragma Assert (Candidate (1) = 0);\n   pragma Assert (Candidate (5) = 4);\n   pragma Assert (Candidate (8) = 24);\n   pragma Assert (Candidate (10) = 81);\n   pragma Assert (Candidate (12) = 274);\n   pragma Assert (Candidate (14) = 927);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Vowels_Count (S : String) return Integer;\n   -- Write a function vowels_count which takes a string representing\n   -- a word as input and returns the number of vowels in the string.\n   -- Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n   -- vowel, but only when it is at the end of the given word.\n   -- Example:\n   -- >>> Vowels_Count (\"abcde\")\n   -- 2\n   -- >>> Vowels_Count (\"ACEDY\")\n   -- 3\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Vowels_Count (S : String) return Integer", "test": "\n   end Vowels_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Integer renames Placeholder.Vowels_Count;\n\nbegin\n   pragma Assert (Candidate (\"abcde\") = 2);\n   pragma Assert (Candidate (\"Alone\") = 3);\n   pragma Assert (Candidate (\"key\") = 2);\n   pragma Assert (Candidate (\"bye\") = 1);\n   pragma Assert (Candidate (\"keY\") = 2);\n   pragma Assert (Candidate (\"bYe\") = 1);\n   pragma Assert (Candidate (\"ACEDY\") = 3);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Circular_Shift (X : Integer; Shift : Integer) return String;\n   -- Circular shift the digits of the integer x, shift the digits right by shift\n   -- and return the result as a string.\n   -- If shift > number of digits, return digits reversed.\n   -- >>> Circular_Shift (12, 1)\n   -- \"21\"\n   -- >>> Circular_Shift (12, 2)\n   -- \"12\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Circular_Shift (X : Integer; Shift : Integer) return String", "test": "\n   end Circular_Shift;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Shift : Integer) return String renames Placeholder.Circular_Shift;\n\nbegin\n   pragma Assert (Candidate (100, 2) = \"001\");\n   pragma Assert (Candidate (12, 2) = \"12\");\n   pragma Assert (Candidate (97, 8) = \"79\");\n   pragma Assert (Candidate (12, 1) = \"21\");\n   pragma Assert (Candidate (11, 101) = \"11\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_66_digitSum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Digit_Sum (S : String) return Integer;\n   -- Task\n   -- Write a function that takes a string as input and returns the sum of the upper characters only'\n   -- ASCII codes.\n   -- Examples:\n   -- >>> Digitsum (\"\")\n   -- 0\n   -- >>> Digitsum (\"abAB\")\n   -- 131\n   -- >>> Digitsum (\"abcCd\")\n   -- 67\n   -- >>> Digitsum (\"helloE\")\n   -- 69\n   -- >>> Digitsum (\"woArBld\")\n   -- 131\n   -- >>> Digitsum (\"aAaaaXa\")\n   -- 153\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Digit_Sum (S : String) return Integer", "test": "\n   end Digit_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Integer renames Placeholder.Digit_Sum;\n\nbegin\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"abAB\") = 131);\n   pragma Assert (Candidate (\"abcCd\") = 67);\n   pragma Assert (Candidate (\"helloE\") = 69);\n   pragma Assert (Candidate (\"woArBld\") = 131);\n   pragma Assert (Candidate (\"aAaaaXa\") = 153);\n   pragma Assert (Candidate (\" How are yOu?\") = 151);\n   pragma Assert (Candidate (\"You arE Very Smart\") = 327);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Fruit_Distribution (S : String; N : Integer) return Integer;\n   -- In this task, you will be given a string that represents a number of apples and oranges \n   -- that are distributed in a basket of fruit this basket contains \n   -- apples, oranges, and mango fruits. Given the string that represents the total number of \n   -- the oranges and apples and an integer that represent the total number of the fruits \n   -- in the basket return the number of the mango fruits in the basket.\n   -- for examble:\n   -- >>> Fruit_Distribution (\"5 apples and 6 oranges\", 19)\n   -- 8\n   -- >>> Fruit_Distribution (\"0 apples and 1 oranges\", 3)\n   -- 2\n   -- >>> Fruit_Distribution (\"2 apples and 3 oranges\", 100)\n   -- 95\n   -- >>> Fruit_Distribution (\"100 apples and 1 oranges\", 120)\n   -- 19\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Fruit_Distribution (S : String; N : Integer) return Integer", "test": "\n   end Fruit_Distribution;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String; N : Integer) return Integer renames Placeholder.Fruit_Distribution;\n\nbegin\n   pragma Assert (Candidate (\"5 apples and 6 oranges\", 19) = 8);\n   pragma Assert (Candidate (\"5 apples and 6 oranges\", 21) = 10);\n   pragma Assert (Candidate (\"0 apples and 1 oranges\", 3) = 2);\n   pragma Assert (Candidate (\"1 apples and 0 oranges\", 3) = 2);\n   pragma Assert (Candidate (\"2 apples and 3 oranges\", 100) = 95);\n   pragma Assert (Candidate (\"2 apples and 3 oranges\", 5) = 0);\n   pragma Assert (Candidate (\"1 apples and 100 oranges\", 120) = 19);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_68_pluck", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Pluck (Arr : Integer_Array) return Integer_Array;\n   -- \"Given an array representing a branch of a tree that has non-negative integer nodes\n   -- your task is to pluck one of the nodes and return it.\n   -- The plucked node should be the node with the smallest even value.\n   -- If multiple nodes with the same smallest even value are found return the node that has smallest index.\n   -- The plucked node should be returned in a Vector, [ smalest_value, its index ],\n   -- If there are no even values or the given array is empty, return [].\n   -- Example 1:\n   -- >>> Pluck ([4, 2, 3])\n   -- [2, 1]\n   -- Explanation: 2 has the smallest even value, and 2 has the smallest index.\n   -- Example 2:\n   -- >>> Pluck ([1, 2, 3])\n   -- [2, 1]\n   -- Explanation: 2 has the smallest even value, and 2 has the smallest index.\n   -- Example 3:\n   -- >>> Pluck ([])\n   -- []\n   -- Example 4:\n   -- >>> Pluck ([5, 0, 3, 0, 4, 2])\n   -- [0, 1]\n   -- Explanation: 0 is the smallest value, but  there are two zeros,\n   -- so we will choose the first zero, which has the smallest index.\n   -- Constraints:\n   -- * 1 <= nodes.length <= 10000\n   -- * 0 <= node.value\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Pluck (Arr : Integer_Array) return Integer_Array", "test": "\n   end Pluck;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer_Array renames Placeholder.Pluck;\n\nbegin\n   pragma Assert (Candidate ([4, 2, 3]) = [2, 1]);\n   pragma Assert (Candidate ([1, 2, 3]) = [2, 1]);\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([5, 0, 3, 0, 4, 2]) = [0, 1]);\n   pragma Assert (Candidate ([1, 2, 3, 0, 5, 3]) = [0, 3]);\n   pragma Assert (Candidate ([5, 4, 8, 4, 8]) = [4, 1]);\n   pragma Assert (Candidate ([7, 6, 7, 1]) = [6, 1]);\n   pragma Assert (Candidate ([7, 9, 7, 1]) = []);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_69_search", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Search (Lst : Integer_Array) return Integer;\n   -- You are given a non-empty Vector of positive integers. Return the greatest integer that is greater than\n   -- zero, and has a frequency greater than or equal to the value of the integer itself.\n   -- The frequency of an integer is the number of times it appears in the Vector.\n   -- If no such a value exist, return -1.\n   -- Examples:\n   -- >>> Search ([4, 1, 2, 2, 3, 1])\n   -- 2\n   -- >>> Search ([1, 2, 2, 3, 3, 3, 4, 4, 4])\n   -- 3\n   -- >>> Search ([5, 5, 4, 4, 4])\n   -- -1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Search (Lst : Integer_Array) return Integer", "test": "\n   end Search;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Search;\n\nbegin\n   pragma Assert (Candidate ([5, 5, 5, 5, 1]) = 1);\n   pragma Assert (Candidate ([4, 1, 4, 1, 4, 4]) = 4);\n   pragma Assert (Candidate ([3, 3]) = -1);\n   pragma Assert (Candidate ([8, 8, 8, 8, 8, 8, 8, 8]) = 8);\n   pragma Assert (Candidate ([2, 3, 3, 2, 2]) = 2);\n   pragma Assert (Candidate ([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) = 1);\n   pragma Assert (Candidate ([3, 2, 8, 2]) = 2);\n   pragma Assert (Candidate ([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) = 1);\n   pragma Assert (Candidate ([8, 8, 3, 6, 5, 6, 4]) = -1);\n   pragma Assert (Candidate ([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) = 1);\n   pragma Assert (Candidate ([1, 9, 10, 1, 3]) = 1);\n   pragma Assert (Candidate ([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) = 5);\n   pragma Assert (Candidate ([1]) = 1);\n   pragma Assert (Candidate ([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) = 4);\n   pragma Assert (Candidate ([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) = 2);\n   pragma Assert (Candidate ([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) = 1);\n   pragma Assert (Candidate ([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) = 4);\n   pragma Assert (Candidate ([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) = 4);\n   pragma Assert (Candidate ([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) = 2);\n   pragma Assert (Candidate ([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) = -1);\n   pragma Assert (Candidate ([10]) = -1);\n   pragma Assert (Candidate ([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) = 2);\n   pragma Assert (Candidate ([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) = 1);\n   pragma Assert (Candidate ([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) = 1);\n   pragma Assert (Candidate ([3, 10, 10, 9, 2]) = -1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Strange_Sort_List (Lst : Integer_Array) return Integer_Array;\n   -- Given Vector of integers, return Vector in strange order.\n   -- Strange sorting, is when you start with the minimum value,\n   -- then maximum of the remaining integers, then minimum and so on.\n   -- Examples:\n   -- >>> Strange_Sort_List ([1, 2, 3, 4])\n   -- [1, 4, 2, 3]\n   -- >>> Strange_Sort_List ([5, 5, 5, 5])\n   -- [5, 5, 5, 5]\n   -- >>> Strange_Sort_List ([])\n   -- []\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Strange_Sort_List (Lst : Integer_Array) return Integer_Array", "test": "\n   end Strange_Sort_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer_Array renames Placeholder.Strange_Sort_List;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4]) = [1, 4, 2, 3]);\n   pragma Assert (Candidate ([5, 6, 7, 8, 9]) = [5, 9, 6, 8, 7]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = [1, 5, 2, 4, 3]);\n   pragma Assert (Candidate ([5, 6, 7, 8, 9, 1]) = [1, 9, 5, 8, 6, 7]);\n   pragma Assert (Candidate ([5, 5, 5, 5]) = [5, 5, 5, 5]);\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8]) = [1, 8, 2, 7, 3, 6, 4, 5]);\n   pragma Assert (Candidate ([0, 2, 2, 2, 5, 5, -5, -5]) = [-5, 5, -5, 5, 0, 2, 2, 2]);\n   pragma Assert (Candidate ([111111]) = [111111]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Triangle_Area (A : Integer; B : Integer; C : Integer) return Float;\n   -- Given the lengths of the three sides of a triangle. Return the area of\n   -- the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n   -- Otherwise return -1\n   -- Three sides make a valid triangle when the sum of any two sides is greater \n   -- than the third side.\n   -- Example:\n   -- >>> Triangle_Area (3, 4, 5)\n   -- 6.0\n   -- >>> Triangle_Area (1, 2, 10)\n   -- -1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Triangle_Area (A : Integer; B : Integer; C : Integer) return Float", "test": "\n   end Triangle_Area;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer; C : Integer) return Float renames Placeholder.Triangle_Area;\n\nbegin\n   pragma Assert (Candidate (3, 4, 5) = 6.0);\n   pragma Assert (Candidate (1, 2, 10) = -1);\n   pragma Assert (Candidate (4, 8, 5) = 8.18);\n   pragma Assert (Candidate (2, 2, 2) = 1.73);\n   pragma Assert (Candidate (1, 2, 3) = -1);\n   pragma Assert (Candidate (10, 5, 7) = 16.25);\n   pragma Assert (Candidate (2, 6, 3) = -1);\n   pragma Assert (Candidate (1, 1, 1) = 0.43);\n   pragma Assert (Candidate (2, 2, 10) = -1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Will_It_Fly (Q : Integer_Array; W : Integer) return Boolean;\n   -- Write a function that returns True if the object q will fly, and False otherwise.\n   -- The object q will fly if it's balanced (it is a palindromic Vector) and the sum of its elements is less than or equal the maximum possible weight w.\n   -- Example:\n   -- >>> Will_It_Fly ([1, 2], 5)\n   -- False\n   -- # 1+2 is less than the maximum possible weight, but it's unbalanced.\n   -- >>> Will_It_Fly ([3, 2, 3], 1)\n   -- False\n   -- # it's balanced, but 3+2+3 is more than the maximum possible weight.\n   -- >>> Will_It_Fly ([3, 2, 3], 9)\n   -- True\n   -- # 3+2+3 is less than the maximum possible weight, and it's balanced.\n   -- >>> Will_It_Fly ([3], 5)\n   -- True\n   -- # 3 is less than the maximum possible weight, and it's balanced.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Will_It_Fly (Q : Integer_Array; W : Integer) return Boolean", "test": "\n   end Will_It_Fly;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Q : Integer_Array; W : Integer) return Boolean renames Placeholder.Will_It_Fly;\n\nbegin\n   pragma Assert (Candidate ([3, 2, 3], 9) = True);\n   pragma Assert (Candidate ([1, 2], 5) = False);\n   pragma Assert (Candidate ([3], 5) = True);\n   pragma Assert (Candidate ([3, 2, 3], 1) = False);\n   pragma Assert (Candidate ([1, 2, 3], 6) = False);\n   pragma Assert (Candidate ([5], 5) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Smallest_Change (Arr : Integer_Array) return Integer;\n   -- Given an array arr of integers, find the minimum number of elements that\n   -- need to be changed to make the array palindromic. A palindromic array is an array that\n   -- is read the same backwards and forwards. In one change, you can change one element to any other element.\n   -- For example:\n   -- >>> Smallest_Change ([1, 2, 3, 5, 4, 7, 9, 6])\n   -- 4\n   -- >>> Smallest_Change ([1, 2, 3, 4, 3, 2, 2])\n   -- 1\n   -- >>> Smallest_Change ([1, 2, 3, 2, 1])\n   -- 0\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Smallest_Change (Arr : Integer_Array) return Integer", "test": "\n   end Smallest_Change;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Smallest_Change;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 5, 4, 7, 9, 6]) = 4);\n   pragma Assert (Candidate ([1, 2, 3, 4, 3, 2, 2]) = 1);\n   pragma Assert (Candidate ([1, 4, 2]) = 1);\n   pragma Assert (Candidate ([1, 4, 4, 2]) = 1);\n   pragma Assert (Candidate ([1, 2, 3, 2, 1]) = 0);\n   pragma Assert (Candidate ([3, 1, 1, 3]) = 0);\n   pragma Assert (Candidate ([1]) = 0);\n   pragma Assert (Candidate ([0, 1]) = 1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_74_total_match", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Total_Match (Lst1 : Unbounded_String_Array; Lst2 : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Write a function that accepts two Vectors of strings and returns the Vector that has \n   -- total number of chars in the all strings of the Vector less than the other Vector.\n   -- if the two Vectors have the same number of chars, return the first Vector.\n   -- Examples\n   -- >>> Total_Match ([], [])\n   -- []\n   -- >>> Total_Match ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"Hi\")])\n   -- [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"Hi\")]\n   -- >>> Total_Match ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\"), To_Unbounded_String (\"project\")])\n   -- [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")]\n   -- >>> Total_Match ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")])\n   -- [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")]\n   -- >>> Total_Match ([To_Unbounded_String (\"4\")], [To_Unbounded_String (\"1\"), To_Unbounded_String (\"2\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"4\"), To_Unbounded_String (\"5\")])\n   -- [To_Unbounded_String (\"4\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Total_Match (Lst1 : Unbounded_String_Array; Lst2 : Unbounded_String_Array) return Unbounded_String_Array", "test": "\n   end Total_Match;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst1 : Unbounded_String_Array; Lst2 : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Total_Match;\n\nbegin\n   pragma Assert (Candidate ([], []) = []);\n   pragma Assert (Candidate ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")]) = [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\"), To_Unbounded_String (\"project\")]) = [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"4\")], [To_Unbounded_String (\"1\"), To_Unbounded_String (\"2\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"4\"), To_Unbounded_String (\"5\")]) = [To_Unbounded_String (\"4\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"Hi\")]) = [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"Hi\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")]) = [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")], [To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hii\")]) = [To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")]);\n   pragma Assert (Candidate ([], [To_Unbounded_String (\"this\")]) = []);\n   pragma Assert (Candidate ([To_Unbounded_String (\"this\")], []) = []);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Multiply_Prime (A : Integer) return Boolean;\n   -- Write a function that returns true if the given number is the multiplication of 3 prime numbers\n   -- and false otherwise.\n   -- Knowing that (a) is less then 100. \n   -- Example:\n   -- >>> Is_Multiply_Prime (30)\n   -- True\n   -- 30 = 2 * 3 * 5\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Multiply_Prime (A : Integer) return Boolean", "test": "\n   end Is_Multiply_Prime;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer) return Boolean renames Placeholder.Is_Multiply_Prime;\n\nbegin\n   pragma Assert (Candidate (5) = False);\n   pragma Assert (Candidate (30) = True);\n   pragma Assert (Candidate (8) = True);\n   pragma Assert (Candidate (10) = False);\n   pragma Assert (Candidate (125) = True);\n   pragma Assert (Candidate (105) = True);\n   pragma Assert (Candidate (126) = False);\n   pragma Assert (Candidate (729) = False);\n   pragma Assert (Candidate (891) = False);\n   pragma Assert (Candidate (1001) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Simple_Power (X : Integer; N : Integer) return Boolean;\n   -- Your task is to write a function that returns true if a number x is a simple\n   -- power of n and false in other cases.\n   -- x is a simple power of n if n**int=x\n   -- For example:\n   -- >>> Is_Simple_Power (1, 4)\n   -- True\n   -- >>> Is_Simple_Power (2, 2)\n   -- True\n   -- >>> Is_Simple_Power (8, 2)\n   -- True\n   -- >>> Is_Simple_Power (3, 2)\n   -- False\n   -- >>> Is_Simple_Power (3, 1)\n   -- False\n   -- >>> Is_Simple_Power (5, 3)\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Simple_Power (X : Integer; N : Integer) return Boolean", "test": "\n   end Is_Simple_Power;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; N : Integer) return Boolean renames Placeholder.Is_Simple_Power;\n\nbegin\n   pragma Assert (Candidate (16, 2) = True);\n   pragma Assert (Candidate (143214, 16) = False);\n   pragma Assert (Candidate (4, 2) = True);\n   pragma Assert (Candidate (9, 3) = True);\n   pragma Assert (Candidate (16, 4) = True);\n   pragma Assert (Candidate (24, 2) = False);\n   pragma Assert (Candidate (128, 4) = False);\n   pragma Assert (Candidate (12, 6) = False);\n   pragma Assert (Candidate (1, 1) = True);\n   pragma Assert (Candidate (1, 12) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_77_iscube", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Iscube (A : Integer) return Boolean;\n   -- Write a function that takes an integer a and returns True \n   -- if this ingeger is a cube of some integer number.\n   -- Note: you may assume the input is always valid.\n   -- Examples:\n   -- >>> Iscube (1)\n   -- True\n   -- >>> Iscube (2)\n   -- False\n   -- >>> Iscube (-1)\n   -- True\n   -- >>> Iscube (64)\n   -- True\n   -- >>> Iscube (0)\n   -- True\n   -- >>> Iscube (180)\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Iscube (A : Integer) return Boolean", "test": "\n   end Iscube;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer) return Boolean renames Placeholder.Iscube;\n\nbegin\n   pragma Assert (Candidate (1) = True);\n   pragma Assert (Candidate (2) = False);\n   pragma Assert (Candidate (-1) = True);\n   pragma Assert (Candidate (64) = True);\n   pragma Assert (Candidate (180) = False);\n   pragma Assert (Candidate (1000) = True);\n   pragma Assert (Candidate (0) = True);\n   pragma Assert (Candidate (1729) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_78_hex_key", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Hex_Key (Num : String) return Integer;\n   -- You have been tasked to write a function that receives \n   -- a hexadecimal number as a string and counts the number of hexadecimal \n   -- digits that are primes (prime number, or a prime, is a natural number \n   -- greater than 1 that is not a product of two smaller natural numbers).\n   -- Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n   -- Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n   -- So you have to determine a number of the following digits: 2, 3, 5, 7, \n   -- B (=decimal 11), D (=decimal 13).\n   -- Note: you may assume the input is always correct or empty string, \n   -- and symbols A,B,C,D,E,F are always uppercase.\n   -- Examples:\n   -- >>> Hex_Key (\"AB\")\n   -- 1\n   -- >>> Hex_Key (\"1077E\")\n   -- 2\n   -- >>> Hex_Key (\"ABED1A33\")\n   -- 4\n   -- >>> Hex_Key (\"123456789ABCDEF0\")\n   -- 6\n   -- >>> Hex_Key (\"2020\")\n   -- 2\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Hex_Key (Num : String) return Integer", "test": "\n   end Hex_Key;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num : String) return Integer renames Placeholder.Hex_Key;\n\nbegin\n   pragma Assert (Candidate (\"AB\") = 1);\n   pragma Assert (Candidate (\"1077E\") = 2);\n   pragma Assert (Candidate (\"ABED1A33\") = 4);\n   pragma Assert (Candidate (\"2020\") = 2);\n   pragma Assert (Candidate (\"123456789ABCDEF0\") = 6);\n   pragma Assert (Candidate (\"112233445566778899AABBCCDDEEFF00\") = 12);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Decimal_To_Binary (Decimal : Integer) return String;\n   -- You will be given a number in decimal form and your task is to convert it to\n   -- binary format. The function should return a string, with each character representing a binary\n   -- number. Each character in the string will be '0' or '1'.\n   -- There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n   -- The extra characters are there to help with the format.\n   -- Examples:\n   -- >>> Decimal_To_Binary (15)\n   -- \"db1111db\"\n   -- >>> Decimal_To_Binary (32)\n   -- \"db100000db\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Decimal_To_Binary (Decimal : Integer) return String", "test": "\n   end Decimal_To_Binary;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Decimal : Integer) return String renames Placeholder.Decimal_To_Binary;\n\nbegin\n   pragma Assert (Candidate (0) = \"db0db\");\n   pragma Assert (Candidate (32) = \"db100000db\");\n   pragma Assert (Candidate (103) = \"db1100111db\");\n   pragma Assert (Candidate (15) = \"db1111db\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_80_is_happy", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Happy (S : String) return Boolean;\n   -- You are given a string s.\n   -- Your task is to check if the string is hapadb or not.\n   -- A string is hapadb if its length is at least 3 and every 3 consecutive letters are distinct\n   -- For example:\n   -- >>> Is_Happy (\"a\")\n   -- False\n   -- >>> Is_Happy (\"aa\")\n   -- False\n   -- >>> Is_Happy (\"abcd\")\n   -- True\n   -- >>> Is_Happy (\"aabb\")\n   -- False\n   -- >>> Is_Happy (\"adb\")\n   -- True\n   -- >>> Is_Happy (\"xyy\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Happy (S : String) return Boolean", "test": "\n   end Is_Happy;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Boolean renames Placeholder.Is_Happy;\n\nbegin\n   pragma Assert (Candidate (\"a\") = False);\n   pragma Assert (Candidate (\"aa\") = False);\n   pragma Assert (Candidate (\"abcd\") = True);\n   pragma Assert (Candidate (\"aabb\") = False);\n   pragma Assert (Candidate (\"adb\") = True);\n   pragma Assert (Candidate (\"xyy\") = False);\n   pragma Assert (Candidate (\"iopaxpoi\") = True);\n   pragma Assert (Candidate (\"iopaxioi\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Numerical_Letter_Grade (Grades : Float_Array) return Unbounded_String_Array;\n   -- It is the last week of the semester and the teacher has to give the grades\n   -- to students. The teacher has been making her own algorithm for grading.\n   -- The only problem is, she has lost the code she used for grading.\n   -- She has given you a Vector of GPAs for some students and you have to write \n   -- a function that can output a Vector of letter grades using the following table:\n   -- GPA       |    Letter grade\n   -- 4.0                A+\n   -- > 3.7                A \n   -- > 3.3                A- \n   -- > 3.0                B+\n   -- > 2.7                B \n   -- > 2.3                B-\n   -- > 2.0                C+\n   -- > 1.7                C\n   -- > 1.3                C-\n   -- > 1.0                D+ \n   -- > 0.7                D \n   -- > 0.0                D-\n   -- 0.0                E\n   -- Example:\n   -- >>> Grade_Equation ([4.0, 3, 1.7, 2, 3.5])\n   -- [To_Unbounded_String (\"A+\"), To_Unbounded_String (\"B\"), To_Unbounded_String (\"C-\"), To_Unbounded_String (\"C\"), To_Unbounded_String (\"A-\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Numerical_Letter_Grade (Grades : Float_Array) return Unbounded_String_Array", "test": "\n   end Numerical_Letter_Grade;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Grades : Float_Array) return Unbounded_String_Array renames Placeholder.Numerical_Letter_Grade;\n\nbegin\n   pragma Assert (Candidate ([4.0, 3, 1.7, 2, 3.5]) = [To_Unbounded_String (\"A+\"), To_Unbounded_String (\"B\"), To_Unbounded_String (\"C-\"), To_Unbounded_String (\"C\"), To_Unbounded_String (\"A-\")]);\n   pragma Assert (Candidate ([1.2]) = [To_Unbounded_String (\"D+\")]);\n   pragma Assert (Candidate ([0.5]) = [To_Unbounded_String (\"D-\")]);\n   pragma Assert (Candidate ([0.0]) = [To_Unbounded_String (\"E\")]);\n   pragma Assert (Candidate ([1.0, 0.3, 1.5, 2.8, 3.3]) = [To_Unbounded_String (\"D\"), To_Unbounded_String (\"D-\"), To_Unbounded_String (\"C-\"), To_Unbounded_String (\"B\"), To_Unbounded_String (\"B+\")]);\n   pragma Assert (Candidate ([0.0, 0.7]) = [To_Unbounded_String (\"E\"), To_Unbounded_String (\"D-\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_82_prime_length", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Prime_Length (My_String : String) return Boolean;\n   -- Write a function that takes a string and returns True if the string\n   -- length is a prime number or False otherwise\n   -- Examples\n   -- >>> Prime_Length (\"Hello\")\n   -- True\n   -- >>> Prime_Length (\"abcdcba\")\n   -- True\n   -- >>> Prime_Length (\"kittens\")\n   -- True\n   -- >>> Prime_Length (\"orange\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Prime_Length (My_String : String) return Boolean", "test": "\n   end Prime_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Boolean renames Placeholder.Prime_Length;\n\nbegin\n   pragma Assert (Candidate (\"Hello\") = True);\n   pragma Assert (Candidate (\"abcdcba\") = True);\n   pragma Assert (Candidate (\"kittens\") = True);\n   pragma Assert (Candidate (\"orange\") = False);\n   pragma Assert (Candidate (\"wow\") = True);\n   pragma Assert (Candidate (\"world\") = True);\n   pragma Assert (Candidate (\"MadaM\") = True);\n   pragma Assert (Candidate (\"Wow\") = True);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"HI\") = True);\n   pragma Assert (Candidate (\"go\") = True);\n   pragma Assert (Candidate (\"gogo\") = False);\n   pragma Assert (Candidate (\"aaaaaaaaaaaaaaa\") = False);\n   pragma Assert (Candidate (\"Madam\") = True);\n   pragma Assert (Candidate (\"M\") = False);\n   pragma Assert (Candidate (\"0\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Starts_One_Ends (N : Integer) return Integer;\n   -- Given a positive integer n, return the count of the numbers of n-digit\n   -- positive integers that start or end with 1.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Starts_One_Ends (N : Integer) return Integer", "test": "\n   end Starts_One_Ends;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Starts_One_Ends;\n\nbegin\n   pragma Assert (Candidate (1) = 1);\n   pragma Assert (Candidate (2) = 18);\n   pragma Assert (Candidate (3) = 180);\n   pragma Assert (Candidate (4) = 1800);\n   pragma Assert (Candidate (5) = 18000);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_84_solve", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Solve (N : Integer) return String;\n   -- Given a positive integer N, return the total sum of its digits in binary.\n   -- Example\n   -- >>> Solve (1000)\n   -- \"1\"\n   -- >>> Solve (150)\n   -- \"110\"\n   -- >>> Solve (147)\n   -- \"1100\"\n   -- Variables:\n   -- @N integer\n   -- Constraints: 0 \u2264 N \u2264 10000.\n   -- Output:\n   -- a string of binary number\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Solve (N : Integer) return String", "test": "\n   end Solve;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return String renames Placeholder.Solve;\n\nbegin\n   pragma Assert (Candidate (1000) = \"1\");\n   pragma Assert (Candidate (150) = \"110\");\n   pragma Assert (Candidate (147) = \"1100\");\n   pragma Assert (Candidate (333) = \"1001\");\n   pragma Assert (Candidate (963) = \"10010\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_85_add", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Add (Lst : Integer_Array) return Integer;\n   -- Given a non-empty Vector of integers lst. add the even elements that are at odd indices..\n   -- Examples:\n   -- >>> Add ([4, 2, 6, 7])\n   -- 2\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Add (Lst : Integer_Array) return Integer", "test": "\n   end Add;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Add;\n\nbegin\n   pragma Assert (Candidate ([4, 88]) = 88);\n   pragma Assert (Candidate ([4, 5, 6, 7, 2, 122]) = 122);\n   pragma Assert (Candidate ([4, 0, 6, 7]) = 0);\n   pragma Assert (Candidate ([4, 4, 6, 8]) = 12);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Anti_Shuffle (S : String) return String;\n   -- Write a function that takes a string and returns an ordered version of it.\n   -- Ordered version of string, is a string where all words (separated by space)\n   -- are replaced by a new word where all the characters arranged in\n   -- ascending order based on ascii value.\n   -- Note: You should keep the order of words and blank spaces in the sentence.\n   -- For example:\n   -- >>> Anti_Shuffle (\"Hi\")\n   -- \"Hi\"\n   -- >>> Anti_Shuffle (\"hello\")\n   -- \"ehllo\"\n   -- >>> Anti_Shuffle (\"Hello World!!!\")\n   -- \"Hello !!!Wdlor\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Anti_Shuffle (S : String) return String", "test": "\n   end Anti_Shuffle;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return String renames Placeholder.Anti_Shuffle;\n\nbegin\n   pragma Assert (Candidate (\"Hi\") = \"Hi\");\n   pragma Assert (Candidate (\"hello\") = \"ehllo\");\n   pragma Assert (Candidate (\"number\") = \"bemnru\");\n   pragma Assert (Candidate (\"abcd\") = \"abcd\");\n   pragma Assert (Candidate (\"Hello World!!!\") = \"Hello !!!Wdlor\");\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_87_get_row", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Get_Row (Lst : Integer_Vector_Vector_Array; X : Integer) return Integer_Integer_Tuple_Array;\n   -- You are given a 2 dimensional data, as a nested Vectors,\n   -- which is similar to matrix, however, unlike matrices,\n   -- each row may contain a different number of columns.\n   -- Given lst, and integer x, find integers x in the Vector,\n   -- and return Vector of records, [(x1, y1), (x2, y2) ...] such that\n   -- each record is a coordinate - (row, columns), starting with 0.\n   -- Sort coordinates initially by rows in ascending order.\n   -- Also, sort coordinates of the row by columns in descending order.\n   -- Examples:\n   -- >>> Get_Row ([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n   -- [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n   -- >>> Get_Row ([], 1)\n   -- []\n   -- >>> Get_Row ([[], [1], [1, 2, 3]], 3)\n   -- [(2, 2)]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Get_Row (Lst : Integer_Vector_Vector_Array; X : Integer) return Integer_Integer_Tuple_Array", "test": "\n   end Get_Row;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Lst : Integer_Vector_Vector_Array; X : Integer) return Integer_Integer_Tuple_Array renames Placeholder.Get_Row;\n\nbegin\n   pragma Assert (Candidate ([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) = [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n   pragma Assert (Candidate ([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) = [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]);\n   pragma Assert (Candidate ([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) = [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]);\n   pragma Assert (Candidate ([], 1) = []);\n   pragma Assert (Candidate ([[1]], 2) = []);\n   pragma Assert (Candidate ([[], [1], [1, 2, 3]], 3) = [(2, 2)]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_88_sort_array", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sort_Array (My_Array : Integer_Array) return Integer_Array;\n   -- Given an array of non-negative integers, return a coadb of the given array after sorting,\n   -- you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n   -- or sort it in descending order if the sum( first index value, last index value) is even.\n   -- Note:\n   -- * don't change the given array.\n   -- Examples:\n   -- >>> Sort_Array ([])\n   -- []\n   -- >>> Sort_Array ([5])\n   -- [5]\n   -- >>> Sort_Array ([2, 4, 3, 0, 1, 5])\n   -- [0, 1, 2, 3, 4, 5]\n   -- >>> Sort_Array ([2, 4, 3, 0, 1, 5, 6])\n   -- [6, 5, 4, 3, 2, 1, 0]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sort_Array (My_Array : Integer_Array) return Integer_Array", "test": "\n   end Sort_Array;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_Array : Integer_Array) return Integer_Array renames Placeholder.Sort_Array;\n\nbegin\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([5]) = [5]);\n   pragma Assert (Candidate ([2, 4, 3, 0, 1, 5]) = [0, 1, 2, 3, 4, 5]);\n   pragma Assert (Candidate ([2, 4, 3, 0, 1, 5, 6]) = [6, 5, 4, 3, 2, 1, 0]);\n   pragma Assert (Candidate ([2, 1]) = [1, 2]);\n   pragma Assert (Candidate ([15, 42, 87, 32, 11, 0]) = [0, 11, 15, 32, 42, 87]);\n   pragma Assert (Candidate ([21, 14, 23, 11]) = [23, 21, 14, 11]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_89_encrypt", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Encrypt (S : String) return String;\n   -- Create a function encrypt that takes a string as an argument and\n   -- returns a string encrypted with the alphabet being rotated. \n   -- The alphabet should be rotated in a manner such that the letters \n   -- shift down by two multiplied to two places.\n   -- For example:\n   -- >>> Encrypt (\"hi\")\n   -- \"lm\"\n   -- >>> Encrypt (\"asdfghjkl\")\n   -- \"ewhjklnop\"\n   -- >>> Encrypt (\"gf\")\n   -- \"kj\"\n   -- >>> Encrypt (\"et\")\n   -- \"ix\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Encrypt (S : String) return String", "test": "\n   end Encrypt;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return String renames Placeholder.Encrypt;\n\nbegin\n   pragma Assert (Candidate (\"hi\") = \"lm\");\n   pragma Assert (Candidate (\"asdfghjkl\") = \"ewhjklnop\");\n   pragma Assert (Candidate (\"gf\") = \"kj\");\n   pragma Assert (Candidate (\"et\") = \"ix\");\n   pragma Assert (Candidate (\"faewfawefaewg\") = \"jeiajeaijeiak\");\n   pragma Assert (Candidate (\"hellomyfriend\") = \"lippsqcjvmirh\");\n   pragma Assert (Candidate (\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n   pragma Assert (Candidate (\"a\") = \"e\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   function Next_Smallest (Lst : Integer_Array) return Integer_Option;\n   -- You are given a Vector of integers.\n   -- Write a function next_smallest() that returns the 2nd smallest element of the Vector.\n   -- Return null if there is no such element.\n   -- >>> Next_Smallest ([1, 2, 3, 4, 5])\n   -- (Valid => True, Value => 2)\n   -- >>> Next_Smallest ([5, 1, 4, 3, 2])\n   -- (Valid => True, Value => 2)\n   -- >>> Next_Smallest ([])\n   -- (Valid => False)\n   -- >>> Next_Smallest ([1, 1])\n   -- (Valid => False)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Next_Smallest (Lst : Integer_Array) return Integer_Option", "test": "\n   end Next_Smallest;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer_Option renames Placeholder.Next_Smallest;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = (Valid => True, Value => 2));\n   pragma Assert (Candidate ([5, 1, 4, 3, 2]) = (Valid => True, Value => 2));\n   pragma Assert (Candidate ([]) = (Valid => False));\n   pragma Assert (Candidate ([1, 1]) = (Valid => False));\n   pragma Assert (Candidate ([1, 1, 1, 1, 0]) = (Valid => True, Value => 1));\n   pragma Assert (Candidate ([1, 1]) = (Valid => False));\n   pragma Assert (Candidate ([-35, 34, 12, -45]) = (Valid => True, Value => -35));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_91_is_bored", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Bored (S : String) return Integer;\n   -- You'll be given a string of words, and your task is to count the number\n   -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n   -- Sentences are delimited by '.', '?' or '!'.\n   -- For example:\n   -- >>> Is_Bored (\"Hello world\")\n   -- 0\n   -- >>> Is_Bored (\"The sky is blue. The sun is shining. I love this weather\")\n   -- 1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Bored (S : String) return Integer", "test": "\n   end Is_Bored;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Integer renames Placeholder.Is_Bored;\n\nbegin\n   pragma Assert (Candidate (\"Hello world\") = 0);\n   pragma Assert (Candidate (\"Is the sky blue?\") = 0);\n   pragma Assert (Candidate (\"I love It !\") = 1);\n   pragma Assert (Candidate (\"bIt\") = 0);\n   pragma Assert (Candidate (\"I feel good today. I will be productive. will kill It\") = 2);\n   pragma Assert (Candidate (\"You and I are going for a walk\") = 0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_92_any_int", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Any_Int (X : Float; Y : Float; Z : Float) return Boolean;\n   -- Create a function that takes 3 numbers.\n   -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n   -- Returns false in any other cases.\n   -- Examples\n   -- >>> Any_Int (5, 2, 7)\n   -- True\n   -- >>> Any_Int (3, 2, 2)\n   -- False\n   -- >>> Any_Int (3, -2, 1)\n   -- True\n   -- >>> Any_Int (3.6, -2.2, 2)\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Any_Int (X : Float; Y : Float; Z : Float) return Boolean", "test": "\n   end Any_Int;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Float; Y : Float; Z : Float) return Boolean renames Placeholder.Any_Int;\n\nbegin\n   pragma Assert (Candidate (2, 3, 1) = True);\n   pragma Assert (Candidate (2.5, 2, 3) = False);\n   pragma Assert (Candidate (1.5, 5, 3.5) = False);\n   pragma Assert (Candidate (2, 6, 2) = False);\n   pragma Assert (Candidate (4, 2, 2) = True);\n   pragma Assert (Candidate (2.2, 2.2, 2.2) = False);\n   pragma Assert (Candidate (-4, 6, 2) = True);\n   pragma Assert (Candidate (2, 1, 1) = True);\n   pragma Assert (Candidate (3, 4, 7) = True);\n   pragma Assert (Candidate (3.0, 4, 7) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_93_encode", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Encode (Message : String) return String;\n   -- Write a function that takes a message, and encodes in such a \n   -- way that it swaps case of all letters, replaces all vowels in \n   -- the message with the letter that appears 2 places ahead of that \n   -- vowel in the english alphabet. \n   -- Assume only letters. \n   -- Examples:\n   -- >>> Encode (\"test\")\n   -- \"TGST\"\n   -- >>> Encode (\"This is a message\")\n   -- \"tHKS KS C MGSSCGG\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Encode (Message : String) return String", "test": "\n   end Encode;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Message : String) return String renames Placeholder.Encode;\n\nbegin\n   pragma Assert (Candidate (\"TEST\") = \"tgst\");\n   pragma Assert (Candidate (\"Mudasir\") = \"mWDCSKR\");\n   pragma Assert (Candidate (\"YES\") = \"ygs\");\n   pragma Assert (Candidate (\"This is a message\") = \"tHKS KS C MGSSCGG\");\n   pragma Assert (Candidate (\"I DoNt KnOw WhAt tO WrItE\") = \"k dQnT kNqW wHcT Tq wRkTg\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Skjkasdkd (Lst : Integer_Array) return Integer;\n   -- You are given a Vector of integers.\n   -- You need to find the largest prime value and return the sum of its digits.\n   -- Examples:\n   -- >>> Skjkasdkd ([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n   -- 10\n   -- >>> Skjkasdkd ([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n   -- 25\n   -- >>> Skjkasdkd ([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n   -- 13\n   -- >>> Skjkasdkd ([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n   -- 11\n   -- >>> Skjkasdkd ([0, 81, 12, 3, 1, 21])\n   -- 3\n   -- >>> Skjkasdkd ([0, 8, 1, 2, 1, 7])\n   -- 7\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Skjkasdkd (Lst : Integer_Array) return Integer", "test": "\n   end Skjkasdkd;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Skjkasdkd;\n\nbegin\n   pragma Assert (Candidate ([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) = 10);\n   pragma Assert (Candidate ([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) = 25);\n   pragma Assert (Candidate ([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) = 13);\n   pragma Assert (Candidate ([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) = 11);\n   pragma Assert (Candidate ([0, 81, 12, 3, 1, 21]) = 3);\n   pragma Assert (Candidate ([0, 8, 1, 2, 1, 7]) = 7);\n   pragma Assert (Candidate ([8191]) = 19);\n   pragma Assert (Candidate ([8191, 123456, 127, 7]) = 19);\n   pragma Assert (Candidate ([127, 97, 8192]) = 10);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_String_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => String);\n   use String_String_Dict;\n   function Check_Dict_Case (Dict : String_String_Dict.Map) return Boolean;\n   -- Given a Map, return True if all keys are strings in lower \n   -- case or all keys are strings in upper case, else return False.\n   -- The function should return False is the given Map is empty.\n   -- Examples:\n   -- >>> Check_Dict_Case ([\"a\" => \"apple\", \"b\" => \"banana\"])\n   -- True\n   -- >>> Check_Dict_Case ([\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"])\n   -- False\n   -- >>> Check_Dict_Case ([\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"])\n   -- False\n   -- >>> Check_Dict_Case ([\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"])\n   -- False\n   -- >>> Check_Dict_Case ([\"STATE\" => \"NC\", \"ZIP\" => \"12345\"])\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Check_Dict_Case (Dict : String_String_Dict.Map) return Boolean", "test": "\n   end Check_Dict_Case;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_String_Dict;\n\n   function Candidate (Dict : String_String_Dict.Map) return Boolean renames Placeholder.Check_Dict_Case;\n\nbegin\n   pragma Assert (Candidate ([\"p\" => \"pineapple\", \"b\" => \"banana\"]) = True);\n   pragma Assert (Candidate ([\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"]) = False);\n   pragma Assert (Candidate ([\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"]) = False);\n   pragma Assert (Candidate ([\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"]) = False);\n   pragma Assert (Candidate ([\"STATE\" => \"NC\", \"ZIP\" => \"12345\"]) = True);\n   pragma Assert (Candidate ([\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"]) = True);\n   pragma Assert (Candidate ([]) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_Up_To (N : Integer) return Integer_Array;\n   -- Implement a function that takes an non-negative integer and returns an array of the first n\n   -- integers that are prime numbers and less than n.\n   -- for example:\n   -- >>> Count_Up_To (5)\n   -- [2, 3]\n   -- >>> Count_Up_To (11)\n   -- [2, 3, 5, 7]\n   -- >>> Count_Up_To (0)\n   -- []\n   -- >>> Count_Up_To (20)\n   -- [2, 3, 5, 7, 11, 13, 17, 19]\n   -- >>> Count_Up_To (1)\n   -- []\n   -- >>> Count_Up_To (18)\n   -- [2, 3, 5, 7, 11, 13, 17]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Up_To (N : Integer) return Integer_Array", "test": "\n   end Count_Up_To;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Count_Up_To;\n\nbegin\n   pragma Assert (Candidate (5) = [2, 3]);\n   pragma Assert (Candidate (6) = [2, 3, 5]);\n   pragma Assert (Candidate (7) = [2, 3, 5]);\n   pragma Assert (Candidate (10) = [2, 3, 5, 7]);\n   pragma Assert (Candidate (0) = []);\n   pragma Assert (Candidate (22) = [2, 3, 5, 7, 11, 13, 17, 19]);\n   pragma Assert (Candidate (1) = []);\n   pragma Assert (Candidate (18) = [2, 3, 5, 7, 11, 13, 17]);\n   pragma Assert (Candidate (47) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n   pragma Assert (Candidate (101) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_97_multiply", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Multiply (A : Integer; B : Integer) return Integer;\n   -- Complete the function that takes two integers and returns \n   -- the product of their unit digits.\n   -- Assume the input is always valid.\n   -- Examples:\n   -- >>> Multiply (148, 412)\n   -- 16\n   -- >>> Multiply (19, 28)\n   -- 72\n   -- >>> Multiply (2020, 1851)\n   -- 0\n   -- >>> Multiply (14, -15)\n   -- 20\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Multiply (A : Integer; B : Integer) return Integer", "test": "\n   end Multiply;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Multiply;\n\nbegin\n   pragma Assert (Candidate (148, 412) = 16);\n   pragma Assert (Candidate (19, 28) = 72);\n   pragma Assert (Candidate (2020, 1851) = 0);\n   pragma Assert (Candidate (14, -15) = 20);\n   pragma Assert (Candidate (76, 67) = 42);\n   pragma Assert (Candidate (17, 27) = 49);\n   pragma Assert (Candidate (0, 1) = 0);\n   pragma Assert (Candidate (0, 0) = 0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_98_count_upper", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Upper (S : String) return Integer;\n   -- Given a string s, count the number of uppercase vowels in even indices.\n   -- For example:\n   -- >>> Count_Upper (\"aBCdEf\")\n   -- 1\n   -- >>> Count_Upper (\"abcdefg\")\n   -- 0\n   -- >>> Count_Upper (\"dBBE\")\n   -- 0\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Upper (S : String) return Integer", "test": "\n   end Count_Upper;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Integer renames Placeholder.Count_Upper;\n\nbegin\n   pragma Assert (Candidate (\"aBCdEf\") = 1);\n   pragma Assert (Candidate (\"abcdefg\") = 0);\n   pragma Assert (Candidate (\"dBBE\") = 0);\n   pragma Assert (Candidate (\"B\") = 0);\n   pragma Assert (Candidate (\"U\") = 1);\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"EEEE\") = 2);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Closest_Integer (Value : String) return Integer;\n   -- Create a function that takes a value (string) representing a number\n   -- and returns the closest integer to it. If the number is equidistant\n   -- from two integers, round it away from zero.\n   -- Examples\n   -- >>> Closest_Integer (\"10\")\n   -- 10\n   -- >>> Closest_Integer (\"15.3\")\n   -- 15\n   -- Note:\n   -- Rounding away from zero means that if the given number is equidistant\n   -- from two integers, the one you should return is the one that is the\n   -- farthest from zero. For example closest_integer(\"14.5\") should\n   -- return 15 and closest_integer(\"-14.5\") should return -15.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Closest_Integer (Value : String) return Integer", "test": "\n   end Closest_Integer;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Value : String) return Integer renames Placeholder.Closest_Integer;\n\nbegin\n   pragma Assert (Candidate (\"10\") = 10);\n   pragma Assert (Candidate (\"14.5\") = 15);\n   pragma Assert (Candidate (\"-15.5\") = -16);\n   pragma Assert (Candidate (\"15.3\") = 15);\n   pragma Assert (Candidate (\"0\") = 0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Make_A_Pile (N : Integer) return Integer_Array;\n   -- Given a positive integer n, you have to make a pile of n levels of stones.\n   -- The first level has n stones.\n   -- The number of stones in the next level is:\n   -- - the next odd number if n is odd.\n   -- - the next even number if n is even.\n   -- Return the number of stones in each level in a Vector, where element at index\n   -- i represents the number of stones in the level (i+1).\n   -- Examples:\n   -- >>> Make_A_Pile (3)\n   -- [3, 5, 7]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Make_A_Pile (N : Integer) return Integer_Array", "test": "\n   end Make_A_Pile;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Make_A_Pile;\n\nbegin\n   pragma Assert (Candidate (3) = [3, 5, 7]);\n   pragma Assert (Candidate (4) = [4, 6, 8, 10]);\n   pragma Assert (Candidate (5) = [5, 7, 9, 11, 13]);\n   pragma Assert (Candidate (6) = [6, 8, 10, 12, 14, 16]);\n   pragma Assert (Candidate (8) = [8, 10, 12, 14, 16, 18, 20, 22]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_101_words_string", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Words_String (S : String) return Unbounded_String_Array;\n   -- You will be given a string of words separated by commas or spaces. Your task is\n   -- to split the string into words and return an array of the words.\n   -- For example:\n   -- >>> Words_String (\"Hi, my name is John\")\n   -- [To_Unbounded_String (\"Hi\"), To_Unbounded_String (\"my\"), To_Unbounded_String (\"name\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"John\")]\n   -- >>> Words_String (\"One, two, three, four, five, six\")\n   -- [To_Unbounded_String (\"One\"), To_Unbounded_String (\"two\"), To_Unbounded_String (\"three\"), To_Unbounded_String (\"four\"), To_Unbounded_String (\"five\"), To_Unbounded_String (\"six\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Words_String (S : String) return Unbounded_String_Array", "test": "\n   end Words_String;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Unbounded_String_Array renames Placeholder.Words_String;\n\nbegin\n   pragma Assert (Candidate (\"Hi, my name is John\") = [To_Unbounded_String (\"Hi\"), To_Unbounded_String (\"my\"), To_Unbounded_String (\"name\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"John\")]);\n   pragma Assert (Candidate (\"One, two, three, four, five, six\") = [To_Unbounded_String (\"One\"), To_Unbounded_String (\"two\"), To_Unbounded_String (\"three\"), To_Unbounded_String (\"four\"), To_Unbounded_String (\"five\"), To_Unbounded_String (\"six\")]);\n   pragma Assert (Candidate (\"Hi, my name\") = [To_Unbounded_String (\"Hi\"), To_Unbounded_String (\"my\"), To_Unbounded_String (\"name\")]);\n   pragma Assert (Candidate (\"One,, two, three, four, five, six,\") = [To_Unbounded_String (\"One\"), To_Unbounded_String (\"two\"), To_Unbounded_String (\"three\"), To_Unbounded_String (\"four\"), To_Unbounded_String (\"five\"), To_Unbounded_String (\"six\")]);\n   pragma Assert (Candidate (\"\") = []);\n   pragma Assert (Candidate (\"ahmed     , gamal\") = [To_Unbounded_String (\"ahmed\"), To_Unbounded_String (\"gamal\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_102_choose_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Choose_Num (X : Integer; Y : Integer) return Integer;\n   -- This function takes two positive numbers x and y and returns the\n   -- biggest even integer number that is in the range [x, y] inclusive. If \n   -- there's no such number, then the function should return -1.\n   -- For example:\n   -- >>> Choose_Num (12, 15)\n   -- 14\n   -- >>> Choose_Num (13, 12)\n   -- -1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Choose_Num (X : Integer; Y : Integer) return Integer", "test": "\n   end Choose_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Y : Integer) return Integer renames Placeholder.Choose_Num;\n\nbegin\n   pragma Assert (Candidate (12, 15) = 14);\n   pragma Assert (Candidate (13, 12) = -1);\n   pragma Assert (Candidate (33, 12354) = 12354);\n   pragma Assert (Candidate (5234, 5233) = -1);\n   pragma Assert (Candidate (6, 29) = 28);\n   pragma Assert (Candidate (27, 10) = -1);\n   pragma Assert (Candidate (7, 7) = -1);\n   pragma Assert (Candidate (546, 546) = 546);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Unique_Digits (X : Integer_Array) return Integer_Array;\n   -- Given a Vector of positive integers x. return a sorted Vector of all \n   -- elements that hasn't any even digit.\n   -- Note: Returned Vector should be sorted in increasing order.\n   -- For example:\n   -- >>> Unique_Digits ([15, 33, 1422, 1])\n   -- [1, 15, 33]\n   -- >>> Unique_Digits ([152, 323, 1422, 10])\n   -- []\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Unique_Digits (X : Integer_Array) return Integer_Array", "test": "\n   end Unique_Digits;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer_Array) return Integer_Array renames Placeholder.Unique_Digits;\n\nbegin\n   pragma Assert (Candidate ([15, 33, 1422, 1]) = [1, 15, 33]);\n   pragma Assert (Candidate ([152, 323, 1422, 10]) = []);\n   pragma Assert (Candidate ([12345, 2033, 111, 151]) = [111, 151]);\n   pragma Assert (Candidate ([135, 103, 31]) = [31, 135]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_105_by_length", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function By_Length (Arr : Integer_Array) return Unbounded_String_Array;\n   -- Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n   -- reverse the resulting array, and then replace each digit by its corresponding name from\n   -- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n   -- For example:\n   -- >>> By_Length ([2, 1, 1, 4, 5, 8, 2, 3])\n   -- [To_Unbounded_String (\"Eight\"), To_Unbounded_String (\"Five\"), To_Unbounded_String (\"Four\"), To_Unbounded_String (\"Three\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"One\"), To_Unbounded_String (\"One\")]\n   -- If the array is empty, return an empty array:\n   -- >>> By_Length ([])\n   -- []\n   -- If the array has any strange number ignore it:\n   -- >>> By_Length ([1, -1, 55])\n   -- [To_Unbounded_String (\"One\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function By_Length (Arr : Integer_Array) return Unbounded_String_Array", "test": "\n   end By_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Unbounded_String_Array renames Placeholder.By_Length;\n\nbegin\n   pragma Assert (Candidate ([2, 1, 1, 4, 5, 8, 2, 3]) = [To_Unbounded_String (\"Eight\"), To_Unbounded_String (\"Five\"), To_Unbounded_String (\"Four\"), To_Unbounded_String (\"Three\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"One\"), To_Unbounded_String (\"One\")]);\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([1, -1, 55]) = [To_Unbounded_String (\"One\")]);\n   pragma Assert (Candidate ([1, -1, 3, 2]) = [To_Unbounded_String (\"Three\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"One\")]);\n   pragma Assert (Candidate ([9, 4, 8]) = [To_Unbounded_String (\"Nine\"), To_Unbounded_String (\"Eight\"), To_Unbounded_String (\"Four\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_106_f", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function F (N : Integer) return Integer_Array;\n   -- Implement the function f that takes n as a parameter,\n   -- and returns a Vector of size n, such that the value of the element at index i is the factorial of i if i is even\n   -- or the sum of numbers from 1 to i otherwise.\n   -- i starts from 1.\n   -- the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n   -- Example:\n   -- >>> F (5)\n   -- [1, 2, 6, 24, 15]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function F (N : Integer) return Integer_Array", "test": "\n   end F;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.F;\n\nbegin\n   pragma Assert (Candidate (5) = [1, 2, 6, 24, 15]);\n   pragma Assert (Candidate (7) = [1, 2, 6, 24, 15, 720, 28]);\n   pragma Assert (Candidate (1) = [1]);\n   pragma Assert (Candidate (3) = [1, 2, 6]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Even_Odd_Palindrome (N : Integer) return Integer_Integer_Tuple;\n   -- Given a positive integer n, return a record that has the number of even and odd\n   -- integer palindromes that fall within the range(1, n), inclusive.\n   -- Example 1:\n   -- >>> Even_Odd_Palindrome (3)\n   -- (1, 2)\n   -- Explanation:\n   -- Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n   -- Example 2:\n   -- >>> Even_Odd_Palindrome (12)\n   -- (4, 6)\n   -- Explanation:\n   -- Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n   -- Note:\n   -- 1. 1 <= n <= 10^3\n   -- 2. returned record has the number of even and odd integer palindromes respectively.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Even_Odd_Palindrome (N : Integer) return Integer_Integer_Tuple", "test": "\n   end Even_Odd_Palindrome;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Integer_Tuple renames Placeholder.Even_Odd_Palindrome;\n\nbegin\n   pragma Assert (Candidate (123) = (8, 13));\n   pragma Assert (Candidate (12) = (4, 6));\n   pragma Assert (Candidate (3) = (1, 2));\n   pragma Assert (Candidate (63) = (6, 8));\n   pragma Assert (Candidate (25) = (5, 6));\n   pragma Assert (Candidate (19) = (4, 6));\n   pragma Assert (Candidate (9) = (4, 5));\n   pragma Assert (Candidate (1) = (0, 1));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_108_count_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_Nums (Arr : Integer_Array) return Integer;\n   -- Write a function count_nums which takes an array of integers and returns\n   -- the number of elements which has a sum of digits > 0.\n   -- If a number is negative, then its first signed digit will be negative:\n   -- e.g. -123 has signed digits -1, 2, and 3.\n   -- >>> Count_Nums ([])\n   -- 0\n   -- >>> Count_Nums ([-1, 11, -11])\n   -- 1\n   -- >>> Count_Nums ([1, 1, 2])\n   -- 3\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Nums (Arr : Integer_Array) return Integer", "test": "\n   end Count_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Count_Nums;\n\nbegin\n   pragma Assert (Candidate ([]) = 0);\n   pragma Assert (Candidate ([-1, -2, 0]) = 0);\n   pragma Assert (Candidate ([1, 1, 2, -2, 3, 4, 5]) = 6);\n   pragma Assert (Candidate ([1, 6, 9, -6, 0, 1, 5]) = 5);\n   pragma Assert (Candidate ([1, 100, 98, -7, 1, -1]) = 4);\n   pragma Assert (Candidate ([12, 23, 34, -45, -56, 0]) = 5);\n   pragma Assert (Candidate ([0, 1]) = 1);\n   pragma Assert (Candidate ([1]) = 1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Move_One_Ball (Arr : Integer_Array) return Boolean;\n   -- We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n   -- numbers in the array will be randomly ordered. Your task is to determine if\n   -- it is possible to get an array sorted in non-decreasing order by performing \n   -- the following operation on the given array:\n   -- You are allowed to perform right shift operation any number of times.\n   -- One right shift operation means shifting all elements of the array by one\n   -- position in the right direction. The last element of the array will be moved to\n   -- the starting position in the array i.e. 0th index. \n   -- If it is possible to obtain the sorted array by performing the above operation\n   -- then return True else return False.\n   -- If the given array is empty then return True.\n   -- Note: The given Vector is guaranteed to have unique elements.\n   -- For Example:\n   -- >>> Move_One_Ball ([3, 4, 5, 1, 2])\n   -- True\n   -- Explanation: By performin 2 right shift operations, non-decreasing order can\n   -- be achieved for the given array.\n   -- >>> Move_One_Ball ([3, 5, 4, 1, 2])\n   -- False\n   -- Explanation:It is not possible to get non-decreasing order for the given\n   -- array by performing any number of right shift operations.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Move_One_Ball (Arr : Integer_Array) return Boolean", "test": "\n   end Move_One_Ball;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Boolean renames Placeholder.Move_One_Ball;\n\nbegin\n   pragma Assert (Candidate ([3, 4, 5, 1, 2]) = True);\n   pragma Assert (Candidate ([3, 5, 10, 1, 2]) = True);\n   pragma Assert (Candidate ([4, 3, 1, 2]) = False);\n   pragma Assert (Candidate ([3, 5, 4, 1, 2]) = False);\n   pragma Assert (Candidate ([]) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_110_exchange", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Exchange (Lst1 : Integer_Array; Lst2 : Integer_Array) return String;\n   -- In this problem, you will implement a function that takes two Vectors of numbers,\n   -- and determines whether it is possible to perform an exchange of elements\n   -- between them to make lst1 a Vector of only even numbers.\n   -- There is no limit on the number of exchanged elements between lst1 and lst2.\n   -- If it is possible to exchange elements between the lst1 and lst2 to make\n   -- all the elements of lst1 to be even, return \"YES\".\n   -- Otherwise, return \"NO\".\n   -- For example:\n   -- >>> Exchange ([1, 2, 3, 4], [1, 2, 3, 4])\n   -- \"YES\"\n   -- >>> Exchange ([1, 2, 3, 4], [1, 5, 3, 4])\n   -- \"NO\"\n   -- It is assumed that the input Vectors will be non-empty.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Exchange (Lst1 : Integer_Array; Lst2 : Integer_Array) return String", "test": "\n   end Exchange;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst1 : Integer_Array; Lst2 : Integer_Array) return String renames Placeholder.Exchange;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4], [1, 2, 3, 4]) = \"YES\");\n   pragma Assert (Candidate ([1, 2, 3, 4], [1, 5, 3, 4]) = \"NO\");\n   pragma Assert (Candidate ([1, 2, 3, 4], [2, 1, 4, 3]) = \"YES\");\n   pragma Assert (Candidate ([5, 7, 3], [2, 6, 4]) = \"YES\");\n   pragma Assert (Candidate ([5, 7, 3], [2, 6, 3]) = \"NO\");\n   pragma Assert (Candidate ([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) = \"NO\");\n   pragma Assert (Candidate ([100, 200], [200, 200]) = \"YES\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_111_histogram", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   function Histogram (Test : String) return String_Integer_Dict.Map;\n   -- Given a string representing a space separated lowercase letters, return a Map\n   -- of the letter with the most repetition and containing the corresponding count.\n   -- If several letters have the same occurrence, return all of them.\n   -- Example:\n   -- >>> Histogram (\"a b c\")\n   -- [\"a\" => 1, \"b\" => 1, \"c\" => 1]\n   -- >>> Histogram (\"a b b a\")\n   -- [\"a\" => 2, \"b\" => 2]\n   -- >>> Histogram (\"a b c a b\")\n   -- [\"a\" => 2, \"b\" => 2]\n   -- >>> Histogram (\"b b b b a\")\n   -- [\"b\" => 4]\n   -- >>> Histogram (\"\")\n   -- []\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Histogram (Test : String) return String_Integer_Dict.Map", "test": "\n   end Histogram;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Integer_Dict;\n\n   function Candidate (Test : String) return String_Integer_Dict.Map renames Placeholder.Histogram;\n\nbegin\n   pragma Assert (Candidate (\"a b b a\") = [\"a\" => 2, \"b\" => 2]);\n   pragma Assert (Candidate (\"a b c a b\") = [\"a\" => 2, \"b\" => 2]);\n   pragma Assert (Candidate (\"a b c d g\") = [\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1]);\n   pragma Assert (Candidate (\"r t g\") = [\"r\" => 1, \"t\" => 1, \"g\" => 1]);\n   pragma Assert (Candidate (\"b b b b a\") = [\"b\" => 4]);\n   pragma Assert (Candidate (\"r t g\") = [\"r\" => 1, \"t\" => 1, \"g\" => 1]);\n   pragma Assert (Candidate (\"\") = []);\n   pragma Assert (Candidate (\"a\") = [\"a\" => 1]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Boolean_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Boolean_2 : Boolean;\n   end record;\n\n   function Reverse_Delete (S : String; C : String) return Unbounded_String_Boolean_Tuple;\n   -- Task\n   -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n   -- then check if the result string is palindrome.\n   -- A string is called palindrome if it reads the same backward as forward.\n   -- You should return a record containing the result string and True/False for the check.\n   -- Example\n   -- >>> Reverse_Delete (\"abcde\", \"ae\")\n   -- (To_Unbounded_String (\"bcd\"), False)\n   -- >>> Reverse_Delete (\"abcdef\", \"b\")\n   -- (To_Unbounded_String (\"acdef\"), False)\n   -- >>> Reverse_Delete (\"abcdedcba\", \"ab\")\n   -- (To_Unbounded_String (\"cdedc\"), True)\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Reverse_Delete (S : String; C : String) return Unbounded_String_Boolean_Tuple", "test": "\n   end Reverse_Delete;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String; C : String) return Unbounded_String_Boolean_Tuple renames Placeholder.Reverse_Delete;\n\nbegin\n   pragma Assert (Candidate (\"abcde\", \"ae\") = (To_Unbounded_String (\"bcd\"), False));\n   pragma Assert (Candidate (\"abcdef\", \"b\") = (To_Unbounded_String (\"acdef\"), False));\n   pragma Assert (Candidate (\"abcdedcba\", \"ab\") = (To_Unbounded_String (\"cdedc\"), True));\n   pragma Assert (Candidate (\"dwik\", \"w\") = (To_Unbounded_String (\"dik\"), False));\n   pragma Assert (Candidate (\"a\", \"a\") = (\"\", True));\n   pragma Assert (Candidate (\"abcdedcba\", \"\") = (To_Unbounded_String (\"abcdedcba\"), True));\n   pragma Assert (Candidate (\"abcdedcba\", \"v\") = (To_Unbounded_String (\"abcdedcba\"), True));\n   pragma Assert (Candidate (\"vabba\", \"v\") = (To_Unbounded_String (\"abba\"), True));\n   pragma Assert (Candidate (\"mamma\", \"mia\") = (\"\", True));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_113_odd_count", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Odd_Count (Lst : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Given a Vector of strings, where each string consists of only digits, return a Vector.\n   -- Each element i of the output should be \"the number of odd elements in the\n   -- string i of the input.\" where all the i's should be replaced by the number\n   -- of odd digits in the i'th string of the input.\n   -- >>> Odd_Count ([To_Unbounded_String (\"1234567\")])\n   -- [To_Unbounded_String (\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]\n   -- >>> Odd_Count ([To_Unbounded_String (\"3\"), To_Unbounded_String (\"11111111\")])\n   -- [To_Unbounded_String (\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), To_Unbounded_String (\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Odd_Count (Lst : Unbounded_String_Array) return Unbounded_String_Array", "test": "\n   end Odd_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Odd_Count;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"1234567\")]) = [To_Unbounded_String (\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"3\"), To_Unbounded_String (\"11111111\")]) = [To_Unbounded_String (\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), To_Unbounded_String (\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"271\"), To_Unbounded_String (\"137\"), To_Unbounded_String (\"314\")]) = [To_Unbounded_String (\"the number of odd elements 2n the str2ng 2 of the 2nput.\"), To_Unbounded_String (\"the number of odd elements 3n the str3ng 3 of the 3nput.\"), To_Unbounded_String (\"the number of odd elements 2n the str2ng 2 of the 2nput.\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Min_Sub_Array_Sum (Nums : Integer_Array) return Integer;\n   -- Given an array of integers nums, find the minimum sum of any non-empty sub-array\n   -- of nums.\n   -- Example\n   -- >>> Minsubarraysum ([2, 3, 4, 1, 2, 4])\n   -- 1\n   -- >>> Minsubarraysum ([-1, -2, -3])\n   -- -6\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Min_Sub_Array_Sum (Nums : Integer_Array) return Integer", "test": "\n   end Min_Sub_Array_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Min_Sub_Array_Sum;\n\nbegin\n   pragma Assert (Candidate ([2, 3, 4, 1, 2, 4]) = 1);\n   pragma Assert (Candidate ([-1, -2, -3]) = -6);\n   pragma Assert (Candidate ([-1, -2, -3, 2, -10]) = -14);\n   pragma Assert (Candidate ([-9999999999999999]) = -9999999999999999);\n   pragma Assert (Candidate ([0, 10, 20, 1000000]) = 0);\n   pragma Assert (Candidate ([-1, -2, -3, 10, -5]) = -6);\n   pragma Assert (Candidate ([100, -1, -2, -3, 10, -5]) = -6);\n   pragma Assert (Candidate ([10, 11, 13, 8, 3, 4]) = 3);\n   pragma Assert (Candidate ([100, -33, 32, -1, 0, -2]) = -33);\n   pragma Assert (Candidate ([-10]) = -10);\n   pragma Assert (Candidate ([7]) = 7);\n   pragma Assert (Candidate ([1, -1]) = -1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_115_max_fill", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Max_Fill (Grid : Integer_Vector_Vector_Array; Capacity : Integer) return Integer;\n   -- You are given a rectangular grid of wells. Each row represents a single well,\n   -- and each 1 in a row represents a single unit of water.\n   -- Each well has a corresponding bucket that can be used to extract water from it, \n   -- and all buckets have the same capacity.\n   -- Your task is to use the buckets to empty the wells.\n   -- Output the number of times you need to lower the buckets.\n   -- Example 1:\n   -- >>> Max_Fill ([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n   -- 6\n   -- Example 2:\n   -- >>> Max_Fill ([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n   -- 5\n   -- Example 3:\n   -- >>> Max_Fill ([[0, 0, 0], [0, 0, 0]], 5)\n   -- 0\n   -- Constraints:\n   -- * all wells have the same length\n   -- * 1 <= grid.length <= 10^2\n   -- * 1 <= grid[:,1].length <= 10^2\n   -- * grid[i][j] -> 0 | 1\n   -- * 1 <= capacity <= 10\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Max_Fill (Grid : Integer_Vector_Vector_Array; Capacity : Integer) return Integer", "test": "\n   end Max_Fill;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Grid : Integer_Vector_Vector_Array; Capacity : Integer) return Integer renames Placeholder.Max_Fill;\n\nbegin\n   pragma Assert (Candidate ([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) = 6);\n   pragma Assert (Candidate ([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) = 5);\n   pragma Assert (Candidate ([[0, 0, 0], [0, 0, 0]], 5) = 0);\n   pragma Assert (Candidate ([[1, 1, 1, 1], [1, 1, 1, 1]], 2) = 4);\n   pragma Assert (Candidate ([[1, 1, 1, 1], [1, 1, 1, 1]], 9) = 2);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_116_sort_array", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sort_Array (Arr : Integer_Array) return Integer_Array;\n   -- In this Kata, you have to sort an array of non-negative integers according to\n   -- number of ones in their binary representation in ascending order.\n   -- For similar number of ones, sort based on decimal value.\n   -- It must be implemented like this:\n   -- >>> Sort_Array ([1, 5, 2, 3, 4])\n   -- [1, 2, 3, 4, 5]\n   -- >>> Sort_Array ([-2, -3, -4, -5, -6])\n   -- [-6, -5, -4, -3, -2]\n   -- >>> Sort_Array ([1, 0, 2, 3, 4])\n   -- [0, 1, 2, 3, 4]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sort_Array (Arr : Integer_Array) return Integer_Array", "test": "\n   end Sort_Array;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer_Array renames Placeholder.Sort_Array;\n\nbegin\n   pragma Assert (Candidate ([1, 5, 2, 3, 4]) = [1, 2, 4, 3, 5]);\n   pragma Assert (Candidate ([-2, -3, -4, -5, -6]) = [-4, -2, -6, -5, -3]);\n   pragma Assert (Candidate ([1, 0, 2, 3, 4]) = [0, 1, 2, 4, 3]);\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) = [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n   pragma Assert (Candidate ([3, 6, 44, 12, 32, 5]) = [32, 3, 5, 6, 12, 44]);\n   pragma Assert (Candidate ([2, 4, 8, 16, 32]) = [2, 4, 8, 16, 32]);\n   pragma Assert (Candidate ([2, 4, 8, 16, 32]) = [2, 4, 8, 16, 32]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_117_select_words", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Select_Words (S : String; N : Integer) return Unbounded_String_Array;\n   -- Given a string s and a natural number n, you have been tasked to implement \n   -- a function that returns a Vector of all words from string s that contain exactly \n   -- n consonants, in order these words appear in the string s.\n   -- If the string s is empty then the function should return an empty Vector.\n   -- Note: you may assume the input string contains only letters and spaces.\n   -- Examples:\n   -- >>> Select_Words (\"Mary had a little lamb\", 4)\n   -- [To_Unbounded_String (\"little\")]\n   -- >>> Select_Words (\"Mary had a little lamb\", 3)\n   -- [To_Unbounded_String (\"Mary\"), To_Unbounded_String (\"lamb\")]\n   -- >>> Select_Words (\"simple white space\", 2)\n   -- []\n   -- >>> Select_Words (\"Hello world\", 4)\n   -- [To_Unbounded_String (\"world\")]\n   -- >>> Select_Words (\"Uncle sam\", 3)\n   -- [To_Unbounded_String (\"Uncle\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Select_Words (S : String; N : Integer) return Unbounded_String_Array", "test": "\n   end Select_Words;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String; N : Integer) return Unbounded_String_Array renames Placeholder.Select_Words;\n\nbegin\n   pragma Assert (Candidate (\"Mary had a little lamb\", 4) = [To_Unbounded_String (\"little\")]);\n   pragma Assert (Candidate (\"Mary had a little lamb\", 3) = [To_Unbounded_String (\"Mary\"), To_Unbounded_String (\"lamb\")]);\n   pragma Assert (Candidate (\"simple white space\", 2) = []);\n   pragma Assert (Candidate (\"Hello world\", 4) = [To_Unbounded_String (\"world\")]);\n   pragma Assert (Candidate (\"Uncle sam\", 3) = [To_Unbounded_String (\"Uncle\")]);\n   pragma Assert (Candidate (\"\", 4) = []);\n   pragma Assert (Candidate (\"a b c d e f\", 1) = [To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"d\"), To_Unbounded_String (\"f\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Get_Closest_Vowel (Word : String) return String;\n   -- You are given a word. Your task is to find the closest vowel that stands between \n   -- two consonants from the right side of the word (case sensitive).\n   -- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n   -- find any vowel met the above condition. \n   -- You may assume that the given string contains English letter only.\n   -- Example:\n   -- >>> Get_Closest_Vowel (\"yogurt\")\n   -- \"u\"\n   -- >>> Get_Closest_Vowel (\"FULL\")\n   -- \"U\"\n   -- >>> Get_Closest_Vowel (\"quick\")\n   -- \"\"\n   -- >>> Get_Closest_Vowel (\"ab\")\n   -- \"\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Closest_Vowel (Word : String) return String", "test": "\n   end Get_Closest_Vowel;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Word : String) return String renames Placeholder.Get_Closest_Vowel;\n\nbegin\n   pragma Assert (Candidate (\"yogurt\") = \"u\");\n   pragma Assert (Candidate (\"full\") = \"u\");\n   pragma Assert (Candidate (\"easy\") = \"\");\n   pragma Assert (Candidate (\"eAsy\") = \"\");\n   pragma Assert (Candidate (\"ali\") = \"\");\n   pragma Assert (Candidate (\"bad\") = \"a\");\n   pragma Assert (Candidate (\"most\") = \"o\");\n   pragma Assert (Candidate (\"ab\") = \"\");\n   pragma Assert (Candidate (\"ba\") = \"\");\n   pragma Assert (Candidate (\"quick\") = \"\");\n   pragma Assert (Candidate (\"anime\") = \"i\");\n   pragma Assert (Candidate (\"Asia\") = \"\");\n   pragma Assert (Candidate (\"Above\") = \"o\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_119_match_parens", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Match_Parens (Lst : Unbounded_String_Array) return String;\n   -- You are given a Vector of two strings, both strings consist of open\n   -- parentheses '(' or close parentheses ')' only.\n   -- Your job is to check if it is possible to concatenate the two strings in\n   -- some order, that the resulting string will be good.\n   -- A string S is considered to be good if and only if all parentheses in S\n   -- are balanced. For example: the string '(())()' is good, while the string\n   -- '())' is not.\n   -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n   -- Examples:\n   -- >>> Match_Parens ([To_Unbounded_String (\"()(\"), To_Unbounded_String (\")\")])\n   -- \"Yes\"\n   -- >>> Match_Parens ([To_Unbounded_String (\")\"), To_Unbounded_String (\")\")])\n   -- \"No\"\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Match_Parens (Lst : Unbounded_String_Array) return String", "test": "\n   end Match_Parens;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Unbounded_String_Array) return String renames Placeholder.Match_Parens;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"()(\"), To_Unbounded_String (\")\")]) = \"Yes\");\n   pragma Assert (Candidate ([To_Unbounded_String (\")\"), To_Unbounded_String (\")\")]) = \"No\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"(()(())\"), To_Unbounded_String (\"())())\")]) = \"No\");\n   pragma Assert (Candidate ([To_Unbounded_String (\")())\"), To_Unbounded_String (\"(()()(\")]) = \"Yes\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"(())))\"), To_Unbounded_String (\"(()())((\")]) = \"Yes\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"()\"), To_Unbounded_String (\"())\")]) = \"No\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"(()(\"), To_Unbounded_String (\"()))()\")]) = \"Yes\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"((((\"), To_Unbounded_String (\"((())\")]) = \"No\");\n   pragma Assert (Candidate ([To_Unbounded_String (\")(()\"), To_Unbounded_String (\"(()(\")]) = \"No\");\n   pragma Assert (Candidate ([To_Unbounded_String (\")(\"), To_Unbounded_String (\")(\")]) = \"No\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"(\"), To_Unbounded_String (\")\")]) = \"Yes\");\n   pragma Assert (Candidate ([To_Unbounded_String (\")\"), To_Unbounded_String (\"(\")]) = \"Yes\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_120_maximum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Maximum (Arr : Integer_Array; K : Integer) return Integer_Array;\n   -- Given an array arr of integers and a positive integer k, return a sorted Vector \n   -- of length k with the maximum k numbers in arr.\n   -- Example 1:\n   -- >>> Maximum ([-3, -4, 5], 3)\n   -- [-4, -3, 5]\n   -- Example 2:\n   -- >>> Maximum ([4, -4, 4], 2)\n   -- [4, 4]\n   -- Example 3:\n   -- >>> Maximum ([-3, 2, 1, 2, -1, -2, 1], 1)\n   -- [2]\n   -- Note:\n   -- 1. The length of the array will be in the range of [1, 1000].\n   -- 2. The elements in the array will be in the range of [-1000, 1000].\n   -- 3. 0 <= k <= len(arr)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Maximum (Arr : Integer_Array; K : Integer) return Integer_Array", "test": "\n   end Maximum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; K : Integer) return Integer_Array renames Placeholder.Maximum;\n\nbegin\n   pragma Assert (Candidate ([-3, -4, 5], 3) = [-4, -3, 5]);\n   pragma Assert (Candidate ([4, -4, 4], 2) = [4, 4]);\n   pragma Assert (Candidate ([-3, 2, 1, 2, -1, -2, 1], 1) = [2]);\n   pragma Assert (Candidate ([123, -123, 20, 0, 1, 2, -3], 3) = [2, 20, 123]);\n   pragma Assert (Candidate ([-123, 20, 0, 1, 2, -3], 4) = [0, 1, 2, 20]);\n   pragma Assert (Candidate ([5, 15, 0, 3, -13, -8, 0], 7) = [-13, -8, 0, 0, 3, 5, 15]);\n   pragma Assert (Candidate ([-1, 0, 2, 5, 3, -10], 2) = [3, 5]);\n   pragma Assert (Candidate ([1, 0, 5, -7], 1) = [5]);\n   pragma Assert (Candidate ([4, -4], 2) = [-4, 4]);\n   pragma Assert (Candidate ([-10, 10], 2) = [-10, 10]);\n   pragma Assert (Candidate ([1, 2, 3, -23, 243, -400, 0], 0) = []);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_121_solution", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Solution (Lst : Integer_Array) return Integer;\n   -- Given a non-empty Vector of integers, return the sum of all of the odd elements that are in even positions.\n   -- Examples\n   -- >>> Solution ([5, 8, 7, 1])\n   -- 12\n   -- >>> Solution ([3, 3, 3, 3, 3])\n   -- 9\n   -- >>> Solution ([30, 13, 24, 321])\n   -- 0\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Solution (Lst : Integer_Array) return Integer", "test": "\n   end Solution;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Solution;\n\nbegin\n   pragma Assert (Candidate ([5, 8, 7, 1]) = 12);\n   pragma Assert (Candidate ([3, 3, 3, 3, 3]) = 9);\n   pragma Assert (Candidate ([30, 13, 24, 321]) = 0);\n   pragma Assert (Candidate ([5, 9]) = 5);\n   pragma Assert (Candidate ([2, 4, 8]) = 0);\n   pragma Assert (Candidate ([30, 13, 23, 32]) = 23);\n   pragma Assert (Candidate ([3, 13, 2, 9]) = 3);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_122_add_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Add_Elements (Arr : Integer_Array; K : Integer) return Integer;\n   -- Given a non-empty array of integers arr and an integer k, return\n   -- the sum of the elements with at most two digits from the first k elements of arr.\n   -- Example:\n   -- >>> Add_Elements ([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n   -- 24\n   -- Constraints:\n   -- 1. 1 <= len(arr) <= 100\n   -- 2. 1 <= k <= len(arr)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Add_Elements (Arr : Integer_Array; K : Integer) return Integer", "test": "\n   end Add_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; K : Integer) return Integer renames Placeholder.Add_Elements;\n\nbegin\n   pragma Assert (Candidate ([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) = -4);\n   pragma Assert (Candidate ([111, 121, 3, 4000, 5, 6], 2) = 0);\n   pragma Assert (Candidate ([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) = 125);\n   pragma Assert (Candidate ([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) = 24);\n   pragma Assert (Candidate ([1], 1) = 1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Get_Odd_Collatz (N : Integer) return Integer_Array;\n   -- Given a positive integer n, return a sorted Vector that has the odd numbers in collatz sequence.\n   -- The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n   -- as follows: start with any positive integer n. Then each term is obtained from the \n   -- previous term as follows: if the previous term is even, the next term is one half of \n   -- the previous term. If the previous term is odd, the next term is 3 times the previous\n   -- term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n   -- Note: \n   -- 1. Collatz(1) is [1].\n   -- 2. returned Vector sorted in increasing order.\n   -- For example:\n   -- get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n   -- >>> Get_Odd_Collatz (5)\n   -- [1, 5]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Odd_Collatz (N : Integer) return Integer_Array", "test": "\n   end Get_Odd_Collatz;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Get_Odd_Collatz;\n\nbegin\n   pragma Assert (Candidate (14) = [1, 5, 7, 11, 13, 17]);\n   pragma Assert (Candidate (5) = [1, 5]);\n   pragma Assert (Candidate (12) = [1, 3, 5]);\n   pragma Assert (Candidate (1) = [1]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_124_valid_date", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Valid_Date (Date : String) return Boolean;\n   -- You have to write a function which validates a given date string and\n   -- returns True if the date is valid otherwise False.\n   -- The date is valid if all of the following rules are satisfied:\n   -- 1. The date string is not empty.\n   -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n   -- 3. The months should not be less than 1 or higher than 12.\n   -- 4. The date should be in the format: mm-dd-yyyy\n   -- >>> Valid_Date (\"03-11-2000\")\n   -- True\n   -- >>> Valid_Date (\"15-01-2012\")\n   -- False\n   -- >>> Valid_Date (\"04-0-2040\")\n   -- False\n   -- >>> Valid_Date (\"06-04-2020\")\n   -- True\n   -- >>> Valid_Date (\"06/04/2020\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Valid_Date (Date : String) return Boolean", "test": "\n   end Valid_Date;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Date : String) return Boolean renames Placeholder.Valid_Date;\n\nbegin\n   pragma Assert (Candidate (\"03-11-2000\") = True);\n   pragma Assert (Candidate (\"15-01-2012\") = False);\n   pragma Assert (Candidate (\"04-0-2040\") = False);\n   pragma Assert (Candidate (\"06-04-2020\") = True);\n   pragma Assert (Candidate (\"01-01-2007\") = True);\n   pragma Assert (Candidate (\"03-32-2011\") = False);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"04-31-3000\") = False);\n   pragma Assert (Candidate (\"06-06-2005\") = True);\n   pragma Assert (Candidate (\"21-31-2000\") = False);\n   pragma Assert (Candidate (\"04-12-2003\") = True);\n   pragma Assert (Candidate (\"04122003\") = False);\n   pragma Assert (Candidate (\"20030412\") = False);\n   pragma Assert (Candidate (\"2003-04\") = False);\n   pragma Assert (Candidate (\"2003-04-12\") = False);\n   pragma Assert (Candidate (\"04-2003\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Is_Sorted (Lst : Integer_Array) return Boolean;\n   -- Given a Vector of numbers, return whether or not they are sorted\n   -- in ascending order. If Vector has more than 1 duplicate of the same\n   -- number, return False. Assume no negative numbers and only integers.\n   -- Examples\n   -- >>> Is_Sorted ([5])\n   -- True\n   -- >>> Is_Sorted ([1, 2, 3, 4, 5])\n   -- True\n   -- >>> Is_Sorted ([1, 3, 2, 4, 5])\n   -- False\n   -- >>> Is_Sorted ([1, 2, 3, 4, 5, 6])\n   -- True\n   -- >>> Is_Sorted ([1, 2, 3, 4, 5, 6, 7])\n   -- True\n   -- >>> Is_Sorted ([1, 3, 2, 4, 5, 6, 7])\n   -- False\n   -- >>> Is_Sorted ([1, 2, 2, 3, 3, 4])\n   -- True\n   -- >>> Is_Sorted ([1, 2, 2, 2, 3, 4])\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Sorted (Lst : Integer_Array) return Boolean", "test": "\n   end Is_Sorted;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Boolean renames Placeholder.Is_Sorted;\n\nbegin\n   pragma Assert (Candidate ([5]) = True);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = True);\n   pragma Assert (Candidate ([1, 3, 2, 4, 5]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6]) = True);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7]) = True);\n   pragma Assert (Candidate ([1, 3, 2, 4, 5, 6, 7]) = False);\n   pragma Assert (Candidate ([]) = True);\n   pragma Assert (Candidate ([1]) = True);\n   pragma Assert (Candidate ([3, 2, 1]) = False);\n   pragma Assert (Candidate ([1, 2, 2, 2, 3, 4]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 3, 3, 4]) = False);\n   pragma Assert (Candidate ([1, 2, 2, 3, 3, 4]) = True);\n   pragma Assert (Candidate ([1, 2, 3, 4]) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_127_intersection", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Intersection (Interval1 : Integer_Integer_Tuple; Interval2 : Integer_Integer_Tuple) return String;\n   -- You are given two intervals,\n   -- where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n   -- The given intervals are closed which means that the interval (start, end)\n   -- includes both start and end.\n   -- For each given interval, it is assumed that its start is less or equal its end.\n   -- Your task is to determine whether the length of intersection of these two \n   -- intervals is a prime number.\n   -- Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n   -- which its length is 1, which not a prime number.\n   -- If the length of the intersection is a prime number, return \"YES\",\n   -- otherwise, return \"NO\".\n   -- If the two intervals don't intersect, return \"NO\".\n   -- [input/output] samples:\n   -- >>> Intersection ((1, 2), (2, 3))\n   -- \"NO\"\n   -- >>> Intersection ((-1, 1), (0, 4))\n   -- \"NO\"\n   -- >>> Intersection ((-3, -1), (-5, 5))\n   -- \"YES\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Intersection (Interval1 : Integer_Integer_Tuple; Interval2 : Integer_Integer_Tuple) return String", "test": "\n   end Intersection;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Interval1 : Integer_Integer_Tuple; Interval2 : Integer_Integer_Tuple) return String renames Placeholder.Intersection;\n\nbegin\n   pragma Assert (Candidate ((1, 2), (2, 3)) = \"NO\");\n   pragma Assert (Candidate ((-1, 1), (0, 4)) = \"NO\");\n   pragma Assert (Candidate ((-3, -1), (-5, 5)) = \"YES\");\n   pragma Assert (Candidate ((-2, 2), (-4, 0)) = \"YES\");\n   pragma Assert (Candidate ((-11, 2), (-1, -1)) = \"NO\");\n   pragma Assert (Candidate ((1, 2), (3, 5)) = \"NO\");\n   pragma Assert (Candidate ((1, 2), (1, 2)) = \"NO\");\n   pragma Assert (Candidate ((-2, -2), (-3, -2)) = \"NO\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   function Prod_Signs (Arr : Integer_Array) return Integer_Option;\n   -- You are given an array arr of integers and you need to return\n   -- sum of magnitudes of integers multiplied by product of all signs\n   -- of each number in the array, represented by 1, -1 or 0.\n   -- Note: return null for empty arr.\n   -- Example:\n   -- >>> Prod_Signs ([1, 2, 2, -4])\n   -- (Valid => True, Value => 9)\n   -- >>> Prod_Signs ([0, 1])\n   -- (Valid => True, Value => 0)\n   -- >>> Prod_Signs ([])\n   -- (Valid => False)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Prod_Signs (Arr : Integer_Array) return Integer_Option", "test": "\n   end Prod_Signs;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer_Option renames Placeholder.Prod_Signs;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 2, -4]) = (Valid => True, Value => -9));\n   pragma Assert (Candidate ([0, 1]) = (Valid => True, Value => 0));\n   pragma Assert (Candidate ([1, 1, 1, 2, 3, -1, 1]) = (Valid => True, Value => -10));\n   pragma Assert (Candidate ([]) = (Valid => False));\n   pragma Assert (Candidate ([2, 4, 1, 2, -1, -1, 9]) = (Valid => True, Value => 20));\n   pragma Assert (Candidate ([-1, 1, -1, 1]) = (Valid => True, Value => 4));\n   pragma Assert (Candidate ([-1, 1, 1, 1]) = (Valid => True, Value => -4));\n   pragma Assert (Candidate ([-1, 1, 1, 0]) = (Valid => True, Value => 0));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_129_minPath", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Min_Path (Grid : Integer_Vector_Vector_Array; K : Integer) return Integer_Array;\n   -- Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n   -- each cell of the grid contains a value. Every integer in the range [1, N * N]\n   -- inclusive appears exactly once on the cells of the grid.\n   -- You have to find the minimum path of length k in the grid. You can start\n   -- from any cell, and in each step you can move to any of the neighbor cells,\n   -- in other words, you can go to cells which share an edge with you current\n   -- cell.\n   -- Please note that a path of length k means visiting exactly k cells (not\n   -- necessarily distinct).\n   -- You CANNOT go off the grid.\n   -- A path A (of length k) is considered less than a path B (of length k) if\n   -- after making the ordered Vectors of the values on the cells that A and B go\n   -- through (let's call them lst_A and lst_B), lst_A is lexicographically less\n   -- than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n   -- such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n   -- lst_A[j] = lst_B[j].\n   -- It is guaranteed that the answer is unique.\n   -- Return an ordered Vector of the values on the cells that the minimum path go through.\n   -- Examples:    \n   -- >>> Minpath ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n   -- [1, 2, 1]\n   -- >>> Minpath ([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n   -- [1]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Min_Path (Grid : Integer_Vector_Vector_Array; K : Integer) return Integer_Array", "test": "\n   end Min_Path;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Grid : Integer_Vector_Vector_Array; K : Integer) return Integer_Array renames Placeholder.Min_Path;\n\nbegin\n   pragma Assert (Candidate ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) = [1, 2, 1]);\n   pragma Assert (Candidate ([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) = [1]);\n   pragma Assert (Candidate ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) = [1, 2, 1, 2]);\n   pragma Assert (Candidate ([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) = [1, 10, 1, 10, 1, 10, 1]);\n   pragma Assert (Candidate ([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) = [1, 7, 1, 7, 1]);\n   pragma Assert (Candidate ([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) = [1, 6, 1, 6, 1, 6, 1, 6, 1]);\n   pragma Assert (Candidate ([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) = [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n   pragma Assert (Candidate ([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) = [1, 3, 1, 3, 1, 3, 1, 3]);\n   pragma Assert (Candidate ([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) = [1, 5, 1, 5, 1, 5, 1, 5]);\n   pragma Assert (Candidate ([[1, 2], [3, 4]], 10) = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n   pragma Assert (Candidate ([[1, 3], [3, 2]], 10) = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_130_tri", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Tri (N : Integer) return Integer_Array;\n   -- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n   -- the last couple centuries. However, what people don't know is Tribonacci sequence.\n   -- Tribonacci sequence is defined by the recurrence:\n   -- tri(1) = 3\n   -- tri(n) = 1 + n / 2, if n is even.\n   -- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n   -- For example:\n   -- tri(2) = 1 + (2 / 2) = 2\n   -- tri(4) = 3\n   -- tri(3) = tri(2) + tri(1) + tri(4)\n   -- = 2 + 3 + 3 = 8 \n   -- You are given a non-negative integer number n, you have to a return a Vector of the \n   -- first n + 1 numbers of the Tribonacci sequence.\n   -- Examples:\n   -- >>> Tri (3)\n   -- [1, 3, 2, 8]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Tri (N : Integer) return Integer_Array", "test": "\n   end Tri;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Tri;\n\nbegin\n   pragma Assert (Candidate (3) = [1, 3, 2, 8]);\n   pragma Assert (Candidate (4) = [1, 3, 2, 8, 3]);\n   pragma Assert (Candidate (5) = [1, 3, 2, 8, 3, 15]);\n   pragma Assert (Candidate (6) = [1, 3, 2, 8, 3, 15, 4]);\n   pragma Assert (Candidate (7) = [1, 3, 2, 8, 3, 15, 4, 24]);\n   pragma Assert (Candidate (8) = [1, 3, 2, 8, 3, 15, 4, 24, 5]);\n   pragma Assert (Candidate (9) = [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n   pragma Assert (Candidate (20) = [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n   pragma Assert (Candidate (0) = [1]);\n   pragma Assert (Candidate (1) = [1, 3]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_131_digits", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Digits (N : Integer) return Integer;\n   -- Given a positive integer n, return the product of the odd digits.\n   -- Return 0 if all digits are even.\n   -- For example:\n   -- >>> My_Digits (1)\n   -- 1\n   -- >>> My_Digits (4)\n   -- 0\n   -- >>> My_Digits (235)\n   -- 15\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Digits (N : Integer) return Integer", "test": "\n   end Digits;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Digits;\n\nbegin\n   pragma Assert (Candidate (5) = 5);\n   pragma Assert (Candidate (54) = 5);\n   pragma Assert (Candidate (120) = 1);\n   pragma Assert (Candidate (5014) = 5);\n   pragma Assert (Candidate (98765) = 315);\n   pragma Assert (Candidate (5576543) = 2625);\n   pragma Assert (Candidate (2468) = 0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_132_is_nested", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Nested (My_String : String) return Boolean;\n   -- Create a function that takes a string as input which contains only square brackets.\n   -- The function should return True if and only if there is a valid subsequence of brackets \n   -- where at least one bracket in the subsequence is nested.\n   -- >>> Is_Nested (\"[[]]\")\n   -- True\n   -- >>> Is_Nested (\"[]]]]]]][[[[[]\")\n   -- False\n   -- >>> Is_Nested (\"[][]\")\n   -- False\n   -- >>> Is_Nested (\"[]\")\n   -- False\n   -- >>> Is_Nested (\"[[][]]\")\n   -- True\n   -- >>> Is_Nested (\"[[]][[\")\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Nested (My_String : String) return Boolean", "test": "\n   end Is_Nested;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Boolean renames Placeholder.Is_Nested;\n\nbegin\n   pragma Assert (Candidate (\"[[]]\") = True);\n   pragma Assert (Candidate (\"[]]]]]]][[[[[]\") = False);\n   pragma Assert (Candidate (\"[][]\") = False);\n   pragma Assert (Candidate (\"[]\") = False);\n   pragma Assert (Candidate (\"[[[[]]]]\") = True);\n   pragma Assert (Candidate (\"[]]]]]]]]]]\") = False);\n   pragma Assert (Candidate (\"[][][[]]\") = True);\n   pragma Assert (Candidate (\"[[]\") = False);\n   pragma Assert (Candidate (\"[]]\") = False);\n   pragma Assert (Candidate (\"[[]][[\") = True);\n   pragma Assert (Candidate (\"[[][]]\") = True);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"[[[[[[[[\") = False);\n   pragma Assert (Candidate (\"]]]]]]]]\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   function Sum_Squares (Lst : Float_Array) return Integer;\n   -- You are given a Vector of numbers.\n   -- You need to return the sum of squared numbers in the given Vector,\n   -- round each element in the Vector to the upper int(Ceiling) first.\n   -- Examples:\n   -- >>> Lst ([1.0, 2.0, 3.0])\n   -- 14\n   -- >>> Lst ([1.0, 4.0, 9.0])\n   -- 98\n   -- >>> Lst ([1.0, 3.0, 5.0, 7.0])\n   -- 84\n   -- >>> Lst ([1.4, 4.2, 0.0])\n   -- 29\n   -- >>> Lst ([-2.4, 1.0, 1.0])\n   -- 6\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Squares (Lst : Float_Array) return Integer", "test": "\n   end Sum_Squares;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Float_Array) return Integer renames Placeholder.Sum_Squares;\n\nbegin\n   pragma Assert (Candidate ([1.0, 2.0, 3.0]) = 14);\n   pragma Assert (Candidate ([1.0, 2.0, 3.0]) = 14);\n   pragma Assert (Candidate ([1.0, 3.0, 5.0, 7.0]) = 84);\n   pragma Assert (Candidate ([1.4, 4.2, 0.0]) = 29);\n   pragma Assert (Candidate ([-2.4, 1.0, 1.0]) = 6);\n   pragma Assert (Candidate ([100.0, 1.0, 15.0, 2.0]) = 10230);\n   pragma Assert (Candidate ([10000.0, 10000.0]) = 200000000);\n   pragma Assert (Candidate ([-1.4, 4.6, 6.3]) = 75);\n   pragma Assert (Candidate ([-1.4, 17.9, 18.9, 19.9]) = 1086);\n   pragma Assert (Candidate ([0.0]) = 0);\n   pragma Assert (Candidate ([-1.0]) = 1);\n   pragma Assert (Candidate ([-1.0, 1.0, 0.0]) = 2);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_If_Last_Char_Is_A_Letter (Txt : String) return Boolean;\n   -- Create a function that returns True if the last character\n   -- of a given string is an alphabetical character and is not\n   -- a part of a word, and False otherwise.\n   -- Note: \"word\" is a group of characters separated by space.\n   -- Examples:\n   -- >>> Check_If_Last_Char_Is_A_Letter (\"apple pie\")\n   -- False\n   -- >>> Check_If_Last_Char_Is_A_Letter (\"apple pi e\")\n   -- True\n   -- >>> Check_If_Last_Char_Is_A_Letter (\"apple pi e \")\n   -- False\n   -- >>> Check_If_Last_Char_Is_A_Letter (\"\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_If_Last_Char_Is_A_Letter (Txt : String) return Boolean", "test": "\n   end Check_If_Last_Char_Is_A_Letter;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Txt : String) return Boolean renames Placeholder.Check_If_Last_Char_Is_A_Letter;\n\nbegin\n   pragma Assert (Candidate (\"apple\") = False);\n   pragma Assert (Candidate (\"apple pi e\") = True);\n   pragma Assert (Candidate (\"eeeee\") = False);\n   pragma Assert (Candidate (\"A\") = True);\n   pragma Assert (Candidate (\"Pumpkin pie \") = False);\n   pragma Assert (Candidate (\"Pumpkin pie 1\") = False);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"eeeee e \") = False);\n   pragma Assert (Candidate (\"apple pie\") = False);\n   pragma Assert (Candidate (\"apple pi e \") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Can_Arrange (Arr : Integer_Array) return Integer;\n   -- Create a function which returns the largest index of an element which\n   -- is not greater than or equal to the element immediately preceding it. If\n   -- no such element exists then return -1. The given array will not contain\n   -- duplicate values.\n   -- Examples:\n   -- >>> Can_Arrange ([1, 2, 4, 3, 5])\n   -- 3\n   -- >>> Can_Arrange ([1, 2, 3])\n   -- -1\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Can_Arrange (Arr : Integer_Array) return Integer", "test": "\n   end Can_Arrange;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Can_Arrange;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4, 3, 5]) = 3);\n   pragma Assert (Candidate ([1, 2, 4, 5]) = -1);\n   pragma Assert (Candidate ([1, 4, 2, 5, 6, 7, 8, 9, 10]) = 2);\n   pragma Assert (Candidate ([4, 8, 5, 7, 3]) = 4);\n   pragma Assert (Candidate ([]) = -1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   type Integer_Option_Integer_Option_Tuple is record\n      Integer_Option_1 : Integer_Option;\n      Integer_Option_2 : Integer_Option;\n   end record;\n\n   function Largest_Smallest_Integers (Lst : Integer_Array) return Integer_Option_Integer_Option_Tuple;\n   -- Create a function that returns a record (a, b), where 'a' is\n   -- the largest of negative integers, and 'b' is the smallest\n   -- of positive integers in a Vector.\n   -- If there is no negative or positive integers, return them as null.\n   -- Examples:\n   -- >>> Largest_Smallest_Integers ([2, 4, 1, 3, 5, 7])\n   -- ((Valid => False), (Valid => True, Value => 1))\n   -- >>> Largest_Smallest_Integers ([])\n   -- ((Valid => False), (Valid => False))\n   -- >>> Largest_Smallest_Integers ([0])\n   -- ((Valid => False), (Valid => False))\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Largest_Smallest_Integers (Lst : Integer_Array) return Integer_Option_Integer_Option_Tuple", "test": "\n   end Largest_Smallest_Integers;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer_Option_Integer_Option_Tuple renames Placeholder.Largest_Smallest_Integers;\n\nbegin\n   pragma Assert (Candidate ([2, 4, 1, 3, 5, 7]) = ((Valid => False), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ([2, 4, 1, 3, 5, 7, 0]) = ((Valid => False), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ([1, 3, 2, 4, 5, 6, -2]) = ((Valid => True, Value => -2), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ([4, 5, 3, 6, 2, 7, -7]) = ((Valid => True, Value => -7), (Valid => True, Value => 2)));\n   pragma Assert (Candidate ([7, 3, 8, 4, 9, 2, 5, -9]) = ((Valid => True, Value => -9), (Valid => True, Value => 2)));\n   pragma Assert (Candidate ([]) = ((Valid => False), (Valid => False)));\n   pragma Assert (Candidate ([0]) = ((Valid => False), (Valid => False)));\n   pragma Assert (Candidate ([-1, -3, -5, -6]) = ((Valid => True, Value => -1), (Valid => False)));\n   pragma Assert (Candidate ([-1, -3, -5, -6, 0]) = ((Valid => True, Value => -1), (Valid => False)));\n   pragma Assert (Candidate ([-6, -4, -4, -3, 1]) = ((Valid => True, Value => -3), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ([-6, -4, -4, -3, -100, 1]) = ((Valid => True, Value => -3), (Valid => True, Value => 1)));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Equal_To_Sum_Even (N : Integer) return Boolean;\n   -- Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n   -- Example\n   -- >>> Is_Equal_To_Sum_Even (4)\n   -- False\n   -- >>> Is_Equal_To_Sum_Even (6)\n   -- False\n   -- >>> Is_Equal_To_Sum_Even (8)\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Equal_To_Sum_Even (N : Integer) return Boolean", "test": "\n   end Is_Equal_To_Sum_Even;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Equal_To_Sum_Even;\n\nbegin\n   pragma Assert (Candidate (4) = False);\n   pragma Assert (Candidate (6) = False);\n   pragma Assert (Candidate (8) = True);\n   pragma Assert (Candidate (10) = True);\n   pragma Assert (Candidate (11) = False);\n   pragma Assert (Candidate (12) = True);\n   pragma Assert (Candidate (13) = False);\n   pragma Assert (Candidate (16) = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Special_Factorial (N : Integer) return Integer;\n   -- The Brazilian factorial is defined as:\n   -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n   -- where n > 0\n   -- For example:\n   -- >>> Special_Factorial (4)\n   -- 288\n   -- The function will receive an integer as input and should return the special\n   -- factorial of this integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Special_Factorial (N : Integer) return Integer", "test": "\n   end Special_Factorial;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Special_Factorial;\n\nbegin\n   pragma Assert (Candidate (4) = 288);\n   pragma Assert (Candidate (5) = 34560);\n   pragma Assert (Candidate (7) = 125411328000);\n   pragma Assert (Candidate (1) = 1);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Fix_Spaces (Text : String) return String;\n   -- Given a string text, replace all spaces in it with underscores, \n   -- and if a string has more than 2 consecutive spaces, \n   -- then replace all consecutive spaces with - \n   -- >>> Fix_Spaces (\" Example\")\n   -- \"Example\"\n   -- >>> Fix_Spaces (\" Example 1\")\n   -- \"Example_1\"\n   -- >>> Fix_Spaces (\" Example 2\")\n   -- \"_Example_2\"\n   -- >>> Fix_Spaces (\" Example 3\")\n   -- \"_Example-3\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Fix_Spaces (Text : String) return String", "test": "\n   end Fix_Spaces;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return String renames Placeholder.Fix_Spaces;\n\nbegin\n   pragma Assert (Candidate (\"Example\") = \"Example\");\n   pragma Assert (Candidate (\"Mudasir Hanif \") = \"Mudasir_Hanif_\");\n   pragma Assert (Candidate (\"Yellow Yellow  Dirty  Fellow\") = \"Yellow_Yellow__Dirty__Fellow\");\n   pragma Assert (Candidate (\"Exa   mple\") = \"Exa-mple\");\n   pragma Assert (Candidate (\"   Exa 1 2 2 mple\") = \"-Exa_1_2_2_mple\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function File_Name_Check (File_Name : String) return String;\n   -- Create a function which takes a string representing a file's name, and returns\n   -- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   -- A file's name is considered to be valid if and only if all the following conditions \n   -- are met:\n   -- - There should not be more than three digits ('0'-'9') in the file's name.\n   -- - The file's name contains exactly one dot '.'\n   -- - The substring before the dot should not be empty, and it starts with a letter from \n   -- the latin alphapet ('a'-'z' and 'A'-'Z').\n   -- - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n   -- Examples:\n   -- >>> File_Name_Check (\"example.txt\")\n   -- \"Yes\"\n   -- >>> File_Name_Check (\"1example.dll\")\n   -- \"No\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function File_Name_Check (File_Name : String) return String", "test": "\n   end File_Name_Check;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (File_Name : String) return String renames Placeholder.File_Name_Check;\n\nbegin\n   pragma Assert (Candidate (\"example.txt\") = \"Yes\");\n   pragma Assert (Candidate (\"1example.dll\") = \"No\");\n   pragma Assert (Candidate (\"s1sdf3.asd\") = \"No\");\n   pragma Assert (Candidate (\"K.dll\") = \"Yes\");\n   pragma Assert (Candidate (\"MY16FILE3.exe\") = \"Yes\");\n   pragma Assert (Candidate (\"His12FILE94.exe\") = \"No\");\n   pragma Assert (Candidate (\"_Y.txt\") = \"No\");\n   pragma Assert (Candidate (\"?aREYA.exe\") = \"No\");\n   pragma Assert (Candidate (\"/this_is_valid.dll\") = \"No\");\n   pragma Assert (Candidate (\"this_is_valid.wow\") = \"No\");\n   pragma Assert (Candidate (\"this_is_valid.txt\") = \"Yes\");\n   pragma Assert (Candidate (\"this_is_valid.txtexe\") = \"No\");\n   pragma Assert (Candidate (\"#this2_i4s_5valid.ten\") = \"No\");\n   pragma Assert (Candidate (\"@this1_is6_valid.exe\") = \"No\");\n   pragma Assert (Candidate (\"this_is_12valid.6exe4.txt\") = \"No\");\n   pragma Assert (Candidate (\"all.exe.txt\") = \"No\");\n   pragma Assert (Candidate (\"I563_No.exe\") = \"Yes\");\n   pragma Assert (Candidate (\"Is3youfault.txt\") = \"Yes\");\n   pragma Assert (Candidate (\"no_one#knows.dll\") = \"Yes\");\n   pragma Assert (Candidate (\"1I563_Yes3.exe\") = \"No\");\n   pragma Assert (Candidate (\"I563_Yes3.txtt\") = \"No\");\n   pragma Assert (Candidate (\"final..txt\") = \"No\");\n   pragma Assert (Candidate (\"final132\") = \"No\");\n   pragma Assert (Candidate (\"_f4indsartal132.\") = \"No\");\n   pragma Assert (Candidate (\".txt\") = \"No\");\n   pragma Assert (Candidate (\"s.\") = \"No\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sum_Squares (Lst : Integer_Array) return Integer;\n   -- \"\n   -- This function will take a Vector of integers. For all entries in the Vector, the function shall square the integer entry if its index is a\n   -- multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n   -- change the entries in the Vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n   -- Examples:\n   -- >>> Sum_Squares ([1, 2, 3])\n   -- 6\n   -- >>> Sum_Squares ([])\n   -- 0\n   -- >>> Sum_Squares ([-1, -5, 2, -1, -5])\n   -- -126\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Squares (Lst : Integer_Array) return Integer", "test": "\n   end Sum_Squares;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Sum_Squares;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = 6);\n   pragma Assert (Candidate ([1, 4, 9]) = 14);\n   pragma Assert (Candidate ([]) = 0);\n   pragma Assert (Candidate ([1, 1, 1, 1, 1, 1, 1, 1, 1]) = 9);\n   pragma Assert (Candidate ([-1, -1, -1, -1, -1, -1, -1, -1, -1]) = -3);\n   pragma Assert (Candidate ([0]) = 0);\n   pragma Assert (Candidate ([-1, -5, 2, -1, -5]) = -126);\n   pragma Assert (Candidate ([-56, -99, 1, 0, -2]) = 3030);\n   pragma Assert (Candidate ([-1, 0, 0, 0, 0, 0, 0, 0, -1]) = 0);\n   pragma Assert (Candidate ([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) = -14196);\n   pragma Assert (Candidate ([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) = -1448);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Words_In_Sentence (Sentence : String) return String;\n   -- You are given a string representing a sentence,\n   -- the sentence contains some words separated by a space,\n   -- and you have to return a string that contains the words from the original sentence,\n   -- whose lengths are prime numbers,\n   -- the order of the words in the new string should be the same as the original one.\n   -- Example 1:\n   -- >>> Words_In_Sentence (\"This is a test\")\n   -- \"is\"\n   -- Example 2:\n   -- >>> Words_In_Sentence (\"lets go for swimming\")\n   -- \"go for\"\n   -- Constraints:\n   -- * 1 <= len(sentence) <= 100\n   -- * sentence contains only letters\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Words_In_Sentence (Sentence : String) return String", "test": "\n   end Words_In_Sentence;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Sentence : String) return String renames Placeholder.Words_In_Sentence;\n\nbegin\n   pragma Assert (Candidate (\"This is a test\") = \"is\");\n   pragma Assert (Candidate (\"lets go for swimming\") = \"go for\");\n   pragma Assert (Candidate (\"there is no place available here\") = \"there is no place\");\n   pragma Assert (Candidate (\"Hi I am Hussein\") = \"Hi am Hussein\");\n   pragma Assert (Candidate (\"go for it\") = \"go for it\");\n   pragma Assert (Candidate (\"here\") = \"\");\n   pragma Assert (Candidate (\"here is\") = \"is\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_144_simplify", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Simplify (X : String; N : String) return Boolean;\n   -- Your task is to implement a function that will simplify the expression\n   -- x * n. The function returns True if x * n evaluates to a whole number and False\n   -- otherwise. Both x and n, are string representation of a fraction, and have the following format,\n   -- <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n   -- You can assume that x, and n are valid fractions, and do not have zero as denominator.\n   -- >>> Simplify (\"1/5\", \"5/1\")\n   -- True\n   -- >>> Simplify (\"1/6\", \"2/1\")\n   -- False\n   -- >>> Simplify (\"7/10\", \"10/2\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Simplify (X : String; N : String) return Boolean", "test": "\n   end Simplify;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : String; N : String) return Boolean renames Placeholder.Simplify;\n\nbegin\n   pragma Assert (Candidate (\"1/5\", \"5/1\") = True);\n   pragma Assert (Candidate (\"1/6\", \"2/1\") = False);\n   pragma Assert (Candidate (\"5/1\", \"3/1\") = True);\n   pragma Assert (Candidate (\"7/10\", \"10/2\") = False);\n   pragma Assert (Candidate (\"2/10\", \"50/10\") = True);\n   pragma Assert (Candidate (\"7/2\", \"4/2\") = True);\n   pragma Assert (Candidate (\"11/6\", \"6/1\") = True);\n   pragma Assert (Candidate (\"2/3\", \"5/2\") = False);\n   pragma Assert (Candidate (\"5/2\", \"3/5\") = False);\n   pragma Assert (Candidate (\"2/4\", \"8/4\") = True);\n   pragma Assert (Candidate (\"2/4\", \"4/2\") = True);\n   pragma Assert (Candidate (\"1/5\", \"5/1\") = True);\n   pragma Assert (Candidate (\"1/5\", \"1/5\") = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Order_By_Points (Nums : Integer_Array) return Integer_Array;\n   -- Write a function which sorts the given Vector of integers\n   -- in ascending order according to the sum of their digits.\n   -- Note: if there are several items with similar sum of their digits,\n   -- order them based on their index in original Vector.\n   -- For example:\n   -- >>> Order_By_Points ([1, 11, -1, -11, -12])\n   -- [-1, -11, 1, -12, 11]\n   -- >>> Order_By_Points ([])\n   -- []\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Order_By_Points (Nums : Integer_Array) return Integer_Array", "test": "\n   end Order_By_Points;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Order_By_Points;\n\nbegin\n   pragma Assert (Candidate ([1, 11, -1, -11, -12]) = [-1, -11, 1, -12, 11]);\n   pragma Assert (Candidate ([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) = [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n   pragma Assert (Candidate ([]) = []);\n   pragma Assert (Candidate ([1, -11, -32, 43, 54, -98, 2, -3]) = [-3, -32, -98, -11, 1, 2, 43, 54]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) = [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n   pragma Assert (Candidate ([0, 6, 6, -76, -21, 23, 4]) = [-76, -21, 0, 4, 23, 6, 6]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Special_Filter (Nums : Integer_Array) return Integer;\n   -- Write a function that takes an array of numbers as input and returns \n   -- the number of elements in the array that are greater than 10 and both \n   -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n   -- For example:\n   -- >>> Specialfilter ([15, -73, 14, -15])\n   -- 1\n   -- >>> Specialfilter ([33, -2, -3, 45, 21, 109])\n   -- 2\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Special_Filter (Nums : Integer_Array) return Integer", "test": "\n   end Special_Filter;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Special_Filter;\n\nbegin\n   pragma Assert (Candidate ([5, -2, 1, -5]) = 0);\n   pragma Assert (Candidate ([15, -73, 14, -15]) = 1);\n   pragma Assert (Candidate ([33, -2, -3, 45, 21, 109]) = 2);\n   pragma Assert (Candidate ([43, -12, 93, 125, 121, 109]) = 4);\n   pragma Assert (Candidate ([71, -2, -33, 75, 21, 19]) = 3);\n   pragma Assert (Candidate ([1]) = 0);\n   pragma Assert (Candidate ([]) = 0);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Get_Max_Triples (N : Integer) return Integer;\n   -- You are given a positive integer n. You have to create an integer array a of length n.\n   -- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n   -- Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n   -- and a[i] + a[j] + a[k] is a multiple of 3.\n   -- Example :\n   -- >>> Get_Max_Triples (5)\n   -- 1\n   -- Explanation: \n   -- a = [1, 3, 7, 13, 21]\n   -- The only valid triple is (1, 7, 13).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Max_Triples (N : Integer) return Integer", "test": "\n   end Get_Max_Triples;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Get_Max_Triples;\n\nbegin\n   pragma Assert (Candidate (5) = 1);\n   pragma Assert (Candidate (6) = 4);\n   pragma Assert (Candidate (10) = 36);\n   pragma Assert (Candidate (100) = 53361);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_148_bf", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Bf (Planet1 : String; Planet2 : String) return Unbounded_String_Array;\n   -- There are eight planets in our solar system: the closerst to the Sun \n   -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n   -- Uranus, Neptune.\n   -- Write a function that takes two planet names as strings planet1 and planet2. \n   -- The function should return a record containing all planets whose orbits are \n   -- located between the orbit of planet1 and the orbit of planet2, sorted by \n   -- the proximity to the sun. \n   -- The function should return an empty record if planet1 or planet2\n   -- are not correct planet names. \n   -- Examples\n   -- >>> Bf (\"Jupiter\", \"Neptune\")\n   -- (To_Unbounded_String (\"Saturn\"), To_Unbounded_String (\"Uranus\"))\n   -- >>> Bf (\"Earth\", \"Mercury\")\n   -- `VmVudXM=`\n   -- >>> Bf (\"Mercury\", \"Uranus\")\n   -- (To_Unbounded_String (\"Venus\"), To_Unbounded_String (\"Earth\"), To_Unbounded_String (\"Mars\"), To_Unbounded_String (\"Jupiter\"), To_Unbounded_String (\"Saturn\"))\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Bf (Planet1 : String; Planet2 : String) return Unbounded_String_Array", "test": "\n   end Bf;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Planet1 : String; Planet2 : String) return Unbounded_String_Array renames Placeholder.Bf;\n\nbegin\n   pragma Assert (Candidate (\"Jupiter\", \"Neptune\") = (To_Unbounded_String (\"Saturn\"), To_Unbounded_String (\"Uranus\")));\n   pragma Assert (Candidate (\"Earth\", \"Mercury\") = (To_Unbounded_String (\"Venus\")));\n   pragma Assert (Candidate (\"Mercury\", \"Uranus\") = (To_Unbounded_String (\"Venus\"), To_Unbounded_String (\"Earth\"), To_Unbounded_String (\"Mars\"), To_Unbounded_String (\"Jupiter\"), To_Unbounded_String (\"Saturn\")));\n   pragma Assert (Candidate (\"Neptune\", \"Venus\") = (To_Unbounded_String (\"Earth\"), To_Unbounded_String (\"Mars\"), To_Unbounded_String (\"Jupiter\"), To_Unbounded_String (\"Saturn\"), To_Unbounded_String (\"Uranus\")));\n   pragma Assert (Candidate (\"Earth\", \"Earth\") = ());\n   pragma Assert (Candidate (\"Mars\", \"Earth\") = ());\n   pragma Assert (Candidate (\"Jupiter\", \"Makemake\") = ());\nend Main;", "language": "adb"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Sorted_List_Sum (Lst : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Write a function that accepts a Vector of strings as a parameter,\n   -- deletes the strings that have odd lengths from it,\n   -- and returns the resulted Vector with a sorted order,\n   -- The Vector is always a Vector of strings and never an array of numbers,\n   -- and it may contain duplicates.\n   -- The order of the Vector should be ascending by length of each word, and you\n   -- should return the Vector sorted by that rule.\n   -- If two words have the same length, sort the Vector alphabetically.\n   -- The function should return a Vector of strings in sorted order.\n   -- You may assume that all words will have the same length.\n   -- For example:\n   -- >>> List_Sort ([To_Unbounded_String (\"aa\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"aaa\")])\n   -- [To_Unbounded_String (\"aa\")]\n   -- >>> List_Sort ([To_Unbounded_String (\"ab\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"aaa\"), To_Unbounded_String (\"cd\")])\n   -- [To_Unbounded_String (\"ab\"), To_Unbounded_String (\"cd\")]\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Sorted_List_Sum (Lst : Unbounded_String_Array) return Unbounded_String_Array", "test": "\n   end Sorted_List_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Sorted_List_Sum;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"aa\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"aaa\")]) = [To_Unbounded_String (\"aa\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"school\"), To_Unbounded_String (\"AI\"), To_Unbounded_String (\"asdf\"), To_Unbounded_String (\"b\")]) = [To_Unbounded_String (\"AI\"), To_Unbounded_String (\"asdf\"), To_Unbounded_String (\"school\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"d\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"a\")]) = []);\n   pragma Assert (Candidate ([To_Unbounded_String (\"d\"), To_Unbounded_String (\"dcba\"), To_Unbounded_String (\"abcd\"), To_Unbounded_String (\"a\")]) = [To_Unbounded_String (\"abcd\"), To_Unbounded_String (\"dcba\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"AI\"), To_Unbounded_String (\"ai\"), To_Unbounded_String (\"au\")]) = [To_Unbounded_String (\"AI\"), To_Unbounded_String (\"ai\"), To_Unbounded_String (\"au\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"a\")]) = []);\n   pragma Assert (Candidate ([To_Unbounded_String (\"aaaa\"), To_Unbounded_String (\"bbbb\"), To_Unbounded_String (\"dd\"), To_Unbounded_String (\"cc\")]) = [To_Unbounded_String (\"cc\"), To_Unbounded_String (\"dd\"), To_Unbounded_String (\"aaaa\"), To_Unbounded_String (\"bbbb\")]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function X_Or_Y (N : Integer; X : Integer; Y : Integer) return Integer;\n   -- A simple program which should return the value of x if n is \n   -- a prime number and should return the value of y otherwise.\n   -- Examples:\n   -- >>> X_Or_Y (7, 34, 12)\n   -- 34\n   -- >>> X_Or_Y (15, 8, 5)\n   -- 5\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function X_Or_Y (N : Integer; X : Integer; Y : Integer) return Integer", "test": "\n   end X_Or_Y;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; X : Integer; Y : Integer) return Integer renames Placeholder.X_Or_Y;\n\nbegin\n   pragma Assert (Candidate (7, 34, 12) = 34);\n   pragma Assert (Candidate (15, 8, 5) = 5);\n   pragma Assert (Candidate (3, 33, 5212) = 33);\n   pragma Assert (Candidate (1259, 3, 52) = 3);\n   pragma Assert (Candidate (7919, -1, 12) = -1);\n   pragma Assert (Candidate (3609, 1245, 583) = 583);\n   pragma Assert (Candidate (91, 56, 129) = 129);\n   pragma Assert (Candidate (6, 34, 1234) = 1234);\n   pragma Assert (Candidate (1, 2, 0) = 0);\n   pragma Assert (Candidate (2, 2, 0) = 2);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   function Double_The_Difference (Lst : Float_Array) return Integer;\n   -- Given a Vector of numbers, return the sum of squares of the numbers\n   -- in the Vector that are odd. Ignore numbers that are negative or not integers.\n   -- >>> Double_The_Difference ([1, 3, 2, 0])\n   -- 10\n   -- >>> Double_The_Difference ([-1, -2, 0])\n   -- 0\n   -- >>> Double_The_Difference ([9, -2])\n   -- 81\n   -- >>> Double_The_Difference ([0])\n   -- 0\n   -- If the input Vector is empty, return 0.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Double_The_Difference (Lst : Float_Array) return Integer", "test": "\n   end Double_The_Difference;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Float_Array) return Integer renames Placeholder.Double_The_Difference;\n\nbegin\n   pragma Assert (Candidate ([]) = 0);\n   pragma Assert (Candidate ([5.0, 4.0]) = 25);\n   pragma Assert (Candidate ([0.1, 0.2, 0.3]) = 0);\n   pragma Assert (Candidate ([-10.0, -20.0, -30.0]) = 0);\n   pragma Assert (Candidate ([-1.0, -2.0, 8.0]) = 0);\n   pragma Assert (Candidate ([0.2, 3.0, 5.0]) = 34);\n   pragma Assert (Candidate ([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) = 165);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_152_compare", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Compare (Game : Integer_Array; Guess : Integer_Array) return Integer_Array;\n   -- I think we all remember that feeling when the result of some long-awaited\n   -- event is finally known. The feelings and thoughts you have at that moment are\n   -- definitely worth noting down and comparing.\n   -- Your task is to determine if a person correctly guessed the results of a number of matches.\n   -- You are given two arrays of scores and guesses of equal length, where each index shows a match. \n   -- Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n   -- the value is 0, and if not, the value is the absolute difference between the guess and the score.\n   -- example:\n   -- >>> Compare ([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n   -- [0, 0, 0, 0, 3, 3]\n   -- >>> Compare ([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n   -- [4, 4, 1, 0, 0, 6]\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Compare (Game : Integer_Array; Guess : Integer_Array) return Integer_Array", "test": "\n   end Compare;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Game : Integer_Array; Guess : Integer_Array) return Integer_Array renames Placeholder.Compare;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) = [0, 0, 0, 0, 3, 3]);\n   pragma Assert (Candidate ([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) = [0, 0, 0, 0, 0, 0]);\n   pragma Assert (Candidate ([1, 2, 3], [-1, -2, -3]) = [2, 4, 6]);\n   pragma Assert (Candidate ([1, 2, 3, 5], [-1, 2, 3, 4]) = [2, 0, 0, 1]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Strongest_Extension (Class_Name : String; Extensions : Unbounded_String_Array) return String;\n   -- You will be given the name of a class (a string) and a Vector of extensions.\n   -- The extensions are to be used to load additional classes to the class. The\n   -- strength of the extension is as follows: Let CAP be the number of the uppercase\n   -- letters in the extension's name, and let SM be the number of lowercase letters \n   -- in the extension's name, the strength is given by the fraction CAP - SM. \n   -- You should find the strongest extension and return a string in this \n   -- format: ClassName.StrongestExtensionName.\n   -- If there are two or more extensions with the same strength, you should\n   -- choose the one that comes first in the Vector.\n   -- For example, if you are given \"Slices\" as the class and a Vector of the\n   -- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n   -- (its strength is -1).\n   -- Example:\n   -- >>> Strongest_Extension (\"my_class\", [To_Unbounded_String (\"AA\"), To_Unbounded_String (\"Be\"), To_Unbounded_String (\"CC\")])\n   -- \"my_class.AA\"\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Strongest_Extension (Class_Name : String; Extensions : Unbounded_String_Array) return String", "test": "\n   end Strongest_Extension;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Class_Name : String; Extensions : Unbounded_String_Array) return String renames Placeholder.Strongest_Extension;\n\nbegin\n   pragma Assert (Candidate (\"Watashi\", [To_Unbounded_String (\"tEN\"), To_Unbounded_String (\"niNE\"), To_Unbounded_String (\"eIGHt8OKe\")]) = \"Watashi.eIGHt8OKe\");\n   pragma Assert (Candidate (\"Boku123\", [To_Unbounded_String (\"nani\"), To_Unbounded_String (\"NazeDa\"), To_Unbounded_String (\"YEs.WeCaNe\"), To_Unbounded_String (\"32145tggg\")]) = \"Boku123.YEs.WeCaNe\");\n   pragma Assert (Candidate (\"__YESIMHERE\", [To_Unbounded_String (\"t\"), To_Unbounded_String (\"eMptY\"), To_Unbounded_String (\"nothing\"), To_Unbounded_String (\"zeR00\"), To_Unbounded_String (\"NuLl__\"), To_Unbounded_String (\"123NoooneB321\")]) = \"__YESIMHERE.NuLl__\");\n   pragma Assert (Candidate (\"K\", [To_Unbounded_String (\"Ta\"), To_Unbounded_String (\"TAR\"), To_Unbounded_String (\"t234An\"), To_Unbounded_String (\"cosSo\")]) = \"K.TAR\");\n   pragma Assert (Candidate (\"__HAHA\", [To_Unbounded_String (\"Tab\"), To_Unbounded_String (\"123\"), To_Unbounded_String (\"781345\"), To_Unbounded_String (\"-_-\")]) = \"__HAHA.123\");\n   pragma Assert (Candidate (\"YameRore\", [To_Unbounded_String (\"HhAas\"), To_Unbounded_String (\"okIWILL123\"), To_Unbounded_String (\"WorkOut\"), To_Unbounded_String (\"Fails\"), To_Unbounded_String (\"-_-\")]) = \"YameRore.okIWILL123\");\n   pragma Assert (Candidate (\"finNNalLLly\", [To_Unbounded_String (\"Die\"), To_Unbounded_String (\"NowW\"), To_Unbounded_String (\"Wow\"), To_Unbounded_String (\"WoW\")]) = \"finNNalLLly.WoW\");\n   pragma Assert (Candidate (\"_\", [To_Unbounded_String (\"Bb\"), To_Unbounded_String (\"91245\")]) = \"_.Bb\");\n   pragma Assert (Candidate (\"Sp\", [To_Unbounded_String (\"671235\"), To_Unbounded_String (\"Bb\")]) = \"Sp.671235\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Cycpattern_Check (A : String; B : String) return Boolean;\n   -- You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n   -- >>> Cycpattern_Check (\"abcd\", \"abd\")\n   -- False\n   -- >>> Cycpattern_Check (\"hello\", \"ell\")\n   -- True\n   -- >>> Cycpattern_Check (\"whassup\", \"psus\")\n   -- False\n   -- >>> Cycpattern_Check (\"abab\", \"baa\")\n   -- True\n   -- >>> Cycpattern_Check (\"efef\", \"eeff\")\n   -- False\n   -- >>> Cycpattern_Check (\"himenss\", \"simen\")\n   -- True\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Cycpattern_Check (A : String; B : String) return Boolean", "test": "\n   end Cycpattern_Check;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : String; B : String) return Boolean renames Placeholder.Cycpattern_Check;\n\nbegin\n   pragma Assert (Candidate (\"xyzw\", \"xyw\") = False);\n   pragma Assert (Candidate (\"yello\", \"ell\") = True);\n   pragma Assert (Candidate (\"whattup\", \"ptut\") = False);\n   pragma Assert (Candidate (\"efef\", \"fee\") = True);\n   pragma Assert (Candidate (\"abab\", \"aabb\") = False);\n   pragma Assert (Candidate (\"winemtt\", \"tinem\") = True);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Even_Odd_Count (Num : Integer) return Integer_Integer_Tuple;\n   -- Given an integer. return a record that has the number of even and odd digits respectively.\n   -- Example:\n   -- >>> Even_Odd_Count (-12)\n   -- (1, 1)\n   -- >>> Even_Odd_Count (123)\n   -- (1, 2)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Even_Odd_Count (Num : Integer) return Integer_Integer_Tuple", "test": "\n   end Even_Odd_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num : Integer) return Integer_Integer_Tuple renames Placeholder.Even_Odd_Count;\n\nbegin\n   pragma Assert (Candidate (7) = (0, 1));\n   pragma Assert (Candidate (-78) = (1, 1));\n   pragma Assert (Candidate (3452) = (2, 2));\n   pragma Assert (Candidate (346211) = (3, 3));\n   pragma Assert (Candidate (-345821) = (3, 3));\n   pragma Assert (Candidate (-2) = (1, 0));\n   pragma Assert (Candidate (-45347) = (2, 3));\n   pragma Assert (Candidate (0) = (1, 0));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Int_To_Mini_Roman (Number : Integer) return String;\n   -- Given a positive integer, obtain its roman numeral equivalent as a string,\n   -- and return it in lowercase.\n   -- Restrictions: 1 <= num <= 1000\n   -- Examples:\n   -- >>> Int_To_Mini_Roman (19)\n   -- \"xix\"\n   -- >>> Int_To_Mini_Roman (152)\n   -- \"clii\"\n   -- >>> Int_To_Mini_Roman (426)\n   -- \"cdxxvi\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Int_To_Mini_Roman (Number : Integer) return String", "test": "\n   end Int_To_Mini_Roman;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Number : Integer) return String renames Placeholder.Int_To_Mini_Roman;\n\nbegin\n   pragma Assert (Candidate (19) = \"xix\");\n   pragma Assert (Candidate (152) = \"clii\");\n   pragma Assert (Candidate (251) = \"ccli\");\n   pragma Assert (Candidate (426) = \"cdxxvi\");\n   pragma Assert (Candidate (500) = \"d\");\n   pragma Assert (Candidate (1) = \"i\");\n   pragma Assert (Candidate (4) = \"iv\");\n   pragma Assert (Candidate (43) = \"xliii\");\n   pragma Assert (Candidate (90) = \"xc\");\n   pragma Assert (Candidate (94) = \"xciv\");\n   pragma Assert (Candidate (532) = \"dxxxii\");\n   pragma Assert (Candidate (900) = \"cm\");\n   pragma Assert (Candidate (994) = \"cmxciv\");\n   pragma Assert (Candidate (1000) = \"m\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Right_Angle_Triangle (A : Integer; B : Integer; C : Integer) return Boolean;\n   -- Given the lengths of the three sides of a triangle. Return True if the three\n   -- sides form a right-angled triangle, False otherwise.\n   -- A right-angled triangle is a triangle in which one angle is right angle or \n   -- 90 degree.\n   -- Example:\n   -- >>> Right_Angle_Triangle (3, 4, 5)\n   -- True\n   -- >>> Right_Angle_Triangle (1, 2, 3)\n   -- False\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Right_Angle_Triangle (A : Integer; B : Integer; C : Integer) return Boolean", "test": "\n   end Right_Angle_Triangle;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer; C : Integer) return Boolean renames Placeholder.Right_Angle_Triangle;\n\nbegin\n   pragma Assert (Candidate (3, 4, 5) = True);\n   pragma Assert (Candidate (1, 2, 3) = False);\n   pragma Assert (Candidate (10, 6, 8) = True);\n   pragma Assert (Candidate (2, 2, 2) = False);\n   pragma Assert (Candidate (7, 24, 25) = True);\n   pragma Assert (Candidate (10, 5, 7) = False);\n   pragma Assert (Candidate (5, 12, 13) = True);\n   pragma Assert (Candidate (15, 8, 17) = True);\n   pragma Assert (Candidate (48, 55, 73) = True);\n   pragma Assert (Candidate (1, 1, 1) = False);\n   pragma Assert (Candidate (2, 2, 10) = False);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_158_find_max", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Find_Max (Words : Unbounded_String_Array) return String;\n   -- Write a function that accepts a Vector of strings.\n   -- The Vector contains different words. Return the word with maximum number\n   -- of unique characters. If multiple strings have maximum number of unique\n   -- characters, return the one which comes first in lexicographical order.\n   -- >>> Find_Max ([To_Unbounded_String (\"name\"), To_Unbounded_String (\"of\"), To_Unbounded_String (\"string\")])\n   -- \"string\"\n   -- >>> Find_Max ([To_Unbounded_String (\"name\"), To_Unbounded_String (\"enam\"), To_Unbounded_String (\"game\")])\n   -- \"enam\"\n   -- >>> Find_Max ([To_Unbounded_String (\"aaaaaaa\"), To_Unbounded_String (\"bb\"), To_Unbounded_String (\"cc\")])\n   -- \"aaaaaaa\"\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Find_Max (Words : Unbounded_String_Array) return String", "test": "\n   end Find_Max;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Words : Unbounded_String_Array) return String renames Placeholder.Find_Max;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"name\"), To_Unbounded_String (\"of\"), To_Unbounded_String (\"string\")]) = \"string\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"name\"), To_Unbounded_String (\"enam\"), To_Unbounded_String (\"game\")]) = \"enam\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"aaaaaaa\"), To_Unbounded_String (\"bb\"), To_Unbounded_String (\"cc\")]) = \"aaaaaaa\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"abc\"), To_Unbounded_String (\"cba\")]) = \"abc\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"play\"), To_Unbounded_String (\"this\"), To_Unbounded_String (\"game\"), To_Unbounded_String (\"of\"), To_Unbounded_String (\"footbott\")]) = \"footbott\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"we\"), To_Unbounded_String (\"are\"), To_Unbounded_String (\"gonna\"), To_Unbounded_String (\"rock\")]) = \"gonna\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"we\"), To_Unbounded_String (\"are\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"mad\"), To_Unbounded_String (\"nation\")]) = \"nation\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"this\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"prrk\")]) = \"this\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"b\")]) = \"b\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"play\"), To_Unbounded_String (\"play\"), To_Unbounded_String (\"play\")]) = \"play\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_159_eat", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Eat (Number : Integer; Need : Integer; Remaining : Integer) return Integer_Array;\n   -- You're a hungry rabbit, and you already have eaten a certain number of carrots,\n   -- but now you need to eat more carrots to complete the day's meals.\n   -- you should return an array of [ total number of eaten carrots after your meals,\n   -- the number of carrots left after your meals ]\n   -- if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n   -- Example:\n   -- >>> Eat (5, 6, 10)\n   -- [11, 4]\n   -- >>> Eat (4, 8, 9)\n   -- [12, 1]\n   -- >>> Eat (1, 10, 10)\n   -- [11, 0]\n   -- >>> Eat (2, 11, 5)\n   -- [7, 0]\n   -- Variables:\n   -- @number : integer\n   -- the number of carrots that you have eaten.\n   -- @need : integer\n   -- the number of carrots that you need to eat.\n   -- @remaining : integer\n   -- the number of remaining carrots thet exist in stock\n   -- Constrain:\n   -- * 0 <= number <= 1000\n   -- * 0 <= need <= 1000\n   -- * 0 <= remaining <= 1000\n   -- Have fun :)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Eat (Number : Integer; Need : Integer; Remaining : Integer) return Integer_Array", "test": "\n   end Eat;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Number : Integer; Need : Integer; Remaining : Integer) return Integer_Array renames Placeholder.Eat;\n\nbegin\n   pragma Assert (Candidate (5, 6, 10) = [11, 4]);\n   pragma Assert (Candidate (4, 8, 9) = [12, 1]);\n   pragma Assert (Candidate (1, 10, 10) = [11, 0]);\n   pragma Assert (Candidate (2, 11, 5) = [7, 0]);\n   pragma Assert (Candidate (4, 5, 7) = [9, 2]);\n   pragma Assert (Candidate (4, 5, 1) = [5, 0]);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Do_Algebra (Operator : Unbounded_String_Array; Operand : Integer_Array) return Integer;\n   -- Given two Vectors operator, and operand. The first Vector has basic algebra operations, and \n   -- the second Vector is a Vector of integers. Use the two given Vectors to build the algebric \n   -- expression and return the evaluation of this expression.\n   -- The basic algebra operations:\n   -- Addition ( + ) \n   -- Subtraction ( - ) \n   -- Multiplication ( * ) \n   -- Floor division ( // ) \n   -- Exponentiation ( ** ) \n   -- Example:\n   -- operator['+', '*', '-']\n   -- array = [2, 3, 4, 5]\n   -- result = 2 + 3 * 4 - 5\n   -- => result = 9\n   -- Note:\n   -- The length of operator Vector is equal to the length of operand Vector minus one.\n   -- Operand is a Vector of of non-negative integers.\n   -- Operator Vector has at least one operator, and operand Vector has at least two operands.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Do_Algebra (Operator : Unbounded_String_Array; Operand : Integer_Array) return Integer", "test": "\n   end Do_Algebra;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Operator : Unbounded_String_Array; Operand : Integer_Array) return Integer renames Placeholder.Do_Algebra;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"**\"), To_Unbounded_String (\"*\"), To_Unbounded_String (\"+\")], [2, 3, 4, 5]) = 37);\n   pragma Assert (Candidate ([To_Unbounded_String (\"+\"), To_Unbounded_String (\"*\"), To_Unbounded_String (\"-\")], [2, 3, 4, 5]) = 9);\n   pragma Assert (Candidate ([To_Unbounded_String (\"//\"), To_Unbounded_String (\"*\")], [7, 3, 4]) = 8);\nend Main;", "language": "adb"}, {"task_id": "HumanEval_161_solve", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Solve (S : String) return String;\n   -- You are given a string s.\n   -- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   -- otherwise keep it as it is.\n   -- If the string contains no letters, reverse the string.\n   -- The function should return the resulted string.\n   -- Examples\n   -- >>> Solve (\"1234\")\n   -- \"4321\"\n   -- >>> Solve (\"ab\")\n   -- \"AB\"\n   -- >>> Solve (\"#a@C\")\n   -- \"#A@c\"\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Solve (S : String) return String", "test": "\n   end Solve;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return String renames Placeholder.Solve;\n\nbegin\n   pragma Assert (Candidate (\"AsDf\") = \"aSdF\");\n   pragma Assert (Candidate (\"1234\") = \"4321\");\n   pragma Assert (Candidate (\"ab\") = \"AB\");\n   pragma Assert (Candidate (\"#a@C\") = \"#A@c\");\n   pragma Assert (Candidate (\"#AsdfW^45\") = \"#aSDFw^45\");\n   pragma Assert (Candidate (\"#6@2\") = \"2@6#\");\n   pragma Assert (Candidate (\"#$a^D\") = \"#$A^d\");\n   pragma Assert (Candidate (\"#ccc\") = \"#CCC\");\nend Main;", "language": "adb"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   function String_To_Md5 (Text : String) return Unbounded_String_Option;\n   -- Given a string 'text', return its md5 hash equivalent string.\n   -- If 'text' is an empty string, return null.\n   -- >>> String_To_Md5 (\"Hello world\")\n   -- (Valid => True, Value => To_Unbounded_String (\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function String_To_Md5 (Text : String) return Unbounded_String_Option", "test": "\n   end String_To_Md5;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Unbounded_String_Option renames Placeholder.String_To_Md5;\n\nbegin\n   pragma Assert (Candidate (\"Hello world\") = (Valid => True, Value => To_Unbounded_String (\"3e25960a79dbc69b674cd4ec67a72c62\")));\n   pragma Assert (Candidate (\"\") = (Valid => False));\n   pragma Assert (Candidate (\"A B C\") = (Valid => True, Value => To_Unbounded_String (\"0ef78513b0cb8cef12743f5aeb35f888\")));\n   pragma Assert (Candidate (\"password\") = (Valid => True, Value => To_Unbounded_String (\"5f4dcc3b5aa765d61d8327deb882cf99\")));\nend Main;", "language": "adb"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Generate_Integers (A : Integer; B : Integer) return Integer_Array;\n   -- Given two positive integers a and b, return the even digits between a\n   -- and b, in ascending order.\n   -- For example:\n   -- >>> Generate_Integers (2, 8)\n   -- [2, 4, 6, 8]\n   -- >>> Generate_Integers (8, 2)\n   -- [2, 4, 6, 8]\n   -- >>> Generate_Integers (10, 14)\n   -- []\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Generate_Integers (A : Integer; B : Integer) return Integer_Array", "test": "\n   end Generate_Integers;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer_Array renames Placeholder.Generate_Integers;\n\nbegin\n   pragma Assert (Candidate (2, 10) = [2, 4, 6, 8]);\n   pragma Assert (Candidate (10, 2) = [2, 4, 6, 8]);\n   pragma Assert (Candidate (132, 2) = [2, 4, 6, 8]);\n   pragma Assert (Candidate (17, 89) = []);\nend Main;", "language": "adb"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Not_Prime (N : Integer) return Boolean;\n   -- Write an adbthon function to identify non-prime numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Not_Prime (N : Integer) return Boolean", "test": "\n   end Is_Not_Prime;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Not_Prime;\n\nbegin\n   pragma Assert (Candidate (2) = False);\n   pragma Assert (Candidate (10) = True);\n   pragma Assert (Candidate (35) = True);\n   pragma Assert (Candidate (37) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Heap_Queue_Largest (Nums : Integer_Array; N : Integer) return Integer_Array;\n   -- Write a function to find the n largest integers from a given Vector of numbers, returned in descending order.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Heap_Queue_Largest (Nums : Integer_Array; N : Integer) return Integer_Array", "test": "\n   end Heap_Queue_Largest;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array; N : Integer) return Integer_Array renames Placeholder.Heap_Queue_Largest;\n\nbegin\n   pragma Assert (Candidate ([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) = [85, 75, 65]);\n   pragma Assert (Candidate ([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) = [85, 75]);\n   pragma Assert (Candidate ([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) = [85, 75, 65, 58, 35]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Differ_At_One_Bit_Pos (A : Integer; B : Integer) return Boolean;\n   -- Write an adbthon function to check whether the two numbers differ at one bit position only or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Differ_At_One_Bit_Pos (A : Integer; B : Integer) return Boolean", "test": "\n   end Differ_At_One_Bit_Pos;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Boolean renames Placeholder.Differ_At_One_Bit_Pos;\n\nbegin\n   pragma Assert (Candidate (13, 9) = True);\n   pragma Assert (Candidate (15, 8) = False);\n   pragma Assert (Candidate (2, 4) = False);\n   pragma Assert (Candidate (2, 3) = True);\n   pragma Assert (Candidate (5, 1) = True);\n   pragma Assert (Candidate (1, 5) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_8_square_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Square_Nums (Nums : Integer_Array) return Integer_Array;\n   -- Write a function to find squares of individual elements in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Square_Nums (Nums : Integer_Array) return Integer_Array", "test": "\n   end Square_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Square_Nums;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n   pragma Assert (Candidate ([10, 20, 30]) = [100, 400, 900]);\n   pragma Assert (Candidate ([12, 15]) = [144, 225]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Rotations (Str : String) return Integer;\n   -- Write an adbthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Rotations (Str : String) return Integer", "test": "\n   end Find_Rotations;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : String) return Integer renames Placeholder.Find_Rotations;\n\nbegin\n   pragma Assert (Candidate (\"aaaa\") = 1);\n   pragma Assert (Candidate (\"ab\") = 2);\n   pragma Assert (Candidate (\"abc\") = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Occ (S : String; Ch : String) return String;\n   -- Write an adbthon function to remove first and last occurrence of a given character from the string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Occ (S : String; Ch : String) return String", "test": "\n   end Remove_Occ;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String; Ch : String) return String renames Placeholder.Remove_Occ;\n\nbegin\n   pragma Assert (Candidate (\"hello\", \"l\") = \"heo\");\n   pragma Assert (Candidate (\"abcda\", \"a\") = \"bcd\");\n   pragma Assert (Candidate (\"PHP\", \"P\") = \"H\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Sort_Matrix (M : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array;\n   -- Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Sort_Matrix (M : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array", "test": "\n   end Sort_Matrix;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (M : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array renames Placeholder.Sort_Matrix;\n\nbegin\n   pragma Assert (Candidate ([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n   pragma Assert (Candidate ([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) = [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n   pragma Assert (Candidate ([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) = [[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_14_find_Volume", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Volume (L : Integer; B : Integer; H : Integer) return Integer;\n   -- Write an adbthon function to find the volume of a triangular prism.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Volume (L : Integer; B : Integer; H : Integer) return Integer", "test": "\n   end Find_Volume;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer; B : Integer; H : Integer) return Integer renames Placeholder.Find_Volume;\n\nbegin\n   pragma Assert (Candidate (10, 8, 6) = 240);\n   pragma Assert (Candidate (3, 2, 2) = 6);\n   pragma Assert (Candidate (1, 2, 1) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Lowercase_Underscore (Text : String) return Boolean;\n   -- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Lowercase_Underscore (Text : String) return Boolean", "test": "\n   end Text_Lowercase_Underscore;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Lowercase_Underscore;\n\nbegin\n   pragma Assert (Candidate (\"aab_cbbbc\") = True);\n   pragma Assert (Candidate (\"aab_Abbbc\") = False);\n   pragma Assert (Candidate (\"Aaab_abbbc\") = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Square_Perimeter (A : Integer) return Integer;\n   -- Write a function that returns the perimeter of a square given its side length as input.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Square_Perimeter (A : Integer) return Integer", "test": "\n   end Square_Perimeter;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer) return Integer renames Placeholder.Square_Perimeter;\n\nbegin\n   pragma Assert (Candidate (10) = 40);\n   pragma Assert (Candidate (5) = 20);\n   pragma Assert (Candidate (4) = 16);\nend Main;", "language": "adb"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Dirty_Chars (My_String : String; Second_String : String) return String;\n   -- Write a function to remove characters from the first string which are present in the second string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Dirty_Chars (My_String : String; Second_String : String) return String", "test": "\n   end Remove_Dirty_Chars;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String; Second_String : String) return String renames Placeholder.Remove_Dirty_Chars;\n\nbegin\n   pragma Assert (Candidate (\"probasscurve\", \"pros\") = \"bacuve\");\n   pragma Assert (Candidate (\"digitalindia\", \"talent\") = \"digiidi\");\n   pragma Assert (Candidate (\"exoticmiles\", \"toxic\") = \"emles\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Test_Duplicate (Arraynums : Integer_Array) return Boolean;\n   -- Write a function to find whether a given array of integers contains any duplicate element.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Test_Duplicate (Arraynums : Integer_Array) return Boolean", "test": "\n   end Test_Duplicate;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arraynums : Integer_Array) return Boolean renames Placeholder.Test_Duplicate;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 4, 4]) = True);\n   pragma Assert (Candidate ([1, 1, 2, 2, 3, 3, 4, 4, 5]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_20_is_woodall", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Woodall (X : Integer) return Boolean;\n   -- Write a function to check if the given number is woodball or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Woodall (X : Integer) return Boolean", "test": "\n   end Is_Woodall;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer) return Boolean renames Placeholder.Is_Woodall;\n\nbegin\n   pragma Assert (Candidate (383) = True);\n   pragma Assert (Candidate (254) = False);\n   pragma Assert (Candidate (200) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_56_checks", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Checks (N : Integer) return Boolean;\n   -- Write an adbthon function to check if a given number is one less than twice its reverse.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Checks (N : Integer) return Boolean", "test": "\n   end Checks;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Checks;\n\nbegin\n   pragma Assert (Candidate (70) = False);\n   pragma Assert (Candidate (23) = False);\n   pragma Assert (Candidate (73) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Max_Num (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the largest number that can be formed with the given Vector of digits.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Max_Num (Arr : Integer_Array) return Integer", "test": "\n   end Find_Max_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Find_Max_Num;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = 321);\n   pragma Assert (Candidate ([4, 5, 6, 1]) = 6541);\n   pragma Assert (Candidate ([1, 2, 3, 9]) = 9321);\nend Main;", "language": "adb"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Opposite_Signs (X : Integer; Y : Integer) return Boolean;\n   -- Write an adbthon function to check whether the given two integers have opposite sign or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Opposite_Signs (X : Integer; Y : Integer) return Boolean", "test": "\n   end Opposite_Signs;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Y : Integer) return Boolean renames Placeholder.Opposite_Signs;\n\nbegin\n   pragma Assert (Candidate (1, -2) = True);\n   pragma Assert (Candidate (3, 2) = False);\n   pragma Assert (Candidate (-10, -10) = False);\n   pragma Assert (Candidate (-2, 2) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Octagonal (N : Integer) return Integer;\n   -- Write a function to find the nth octagonal number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Octagonal (N : Integer) return Integer", "test": "\n   end Is_Octagonal;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Is_Octagonal;\n\nbegin\n   pragma Assert (Candidate (5) = 65);\n   pragma Assert (Candidate (10) = 280);\n   pragma Assert (Candidate (15) = 645);\nend Main;", "language": "adb"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Substrings (S : String) return Integer;\n   -- Write an adbthon function to count the number of substrings with the sum of digits equal to their length.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Substrings (S : String) return Integer", "test": "\n   end Count_Substrings;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Integer renames Placeholder.Count_Substrings;\n\nbegin\n   pragma Assert (Candidate (\"112112\") = 6);\n   pragma Assert (Candidate (\"111\") = 6);\n   pragma Assert (Candidate (\"1101112\") = 12);\nend Main;", "language": "adb"}, {"task_id": "mbpp_62_smallest_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Smallest_Num (Xs : Integer_Array) return Integer;\n   -- Write an adbthon function to find smallest number in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Smallest_Num (Xs : Integer_Array) return Integer", "test": "\n   end Smallest_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Xs : Integer_Array) return Integer renames Placeholder.Smallest_Num;\n\nbegin\n   pragma Assert (Candidate ([10, 20, 1, 45, 99]) = 1);\n   pragma Assert (Candidate ([1, 2, 3]) = 1);\n   pragma Assert (Candidate ([45, 46, 50, 60]) = 45);\nend Main;", "language": "adb"}, {"task_id": "mbpp_63_max_difference", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Max_Difference (Test_List : Integer_Integer_Tuple_Array) return Integer;\n   -- Write a function to find the maximum difference between available pairs in the given record Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Difference (Test_List : Integer_Integer_Tuple_Array) return Integer", "test": "\n   end Max_Difference;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Integer_Tuple_Array) return Integer renames Placeholder.Max_Difference;\n\nbegin\n   pragma Assert (Candidate ([(3, 5), (1, 7), (10, 3), (1, 2)]) = 7);\n   pragma Assert (Candidate ([(4, 6), (2, 17), (9, 13), (11, 12)]) = 15);\n   pragma Assert (Candidate ([(12, 35), (21, 27), (13, 23), (41, 22)]) = 23);\nend Main;", "language": "adb"}, {"task_id": "mbpp_64_subject_marks", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n   end record;\n\n   type Unbounded_String_Integer_Tuple_Array is array (Positive range <>) of Unbounded_String_Integer_Tuple;\n   function Subject_Marks (Subjectmarks : Unbounded_String_Integer_Tuple_Array) return Unbounded_String_Integer_Tuple_Array;\n   -- Write a function to sort a Vector of records using the second value of each record.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Subject_Marks (Subjectmarks : Unbounded_String_Integer_Tuple_Array) return Unbounded_String_Integer_Tuple_Array", "test": "\n   end Subject_Marks;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Subjectmarks : Unbounded_String_Integer_Tuple_Array) return Unbounded_String_Integer_Tuple_Array renames Placeholder.Subject_Marks;\n\nbegin\n   pragma Assert (Candidate ([(To_Unbounded_String (\"English\"), 88), (To_Unbounded_String (\"Science\"), 90), (To_Unbounded_String (\"Maths\"), 97), (To_Unbounded_String (\"Social sciences\"), 82)]) = [(To_Unbounded_String (\"Social sciences\"), 82), (To_Unbounded_String (\"English\"), 88), (To_Unbounded_String (\"Science\"), 90), (To_Unbounded_String (\"Maths\"), 97)]);\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Telugu\"), 49), (To_Unbounded_String (\"Hindhi\"), 54), (To_Unbounded_String (\"Social\"), 33)]) = [(To_Unbounded_String (\"Social\"), 33), (To_Unbounded_String (\"Telugu\"), 49), (To_Unbounded_String (\"Hindhi\"), 54)]);\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Physics\"), 96), (To_Unbounded_String (\"Chemistry\"), 97), (To_Unbounded_String (\"Biology\"), 45)]) = [(To_Unbounded_String (\"Biology\"), 45), (To_Unbounded_String (\"Physics\"), 96), (To_Unbounded_String (\"Chemistry\"), 97)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_66_pos_count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Pos_Count (List : Integer_Array) return Integer;\n   -- Write an adbthon function to count the number of positive numbers in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Pos_Count (List : Integer_Array) return Integer", "test": "\n   end Pos_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List : Integer_Array) return Integer renames Placeholder.Pos_Count;\n\nbegin\n   pragma Assert (Candidate ([1, -2, 3, -4]) = 2);\n   pragma Assert (Candidate ([3, 4, 5, -1]) = 3);\n   pragma Assert (Candidate ([1, 2, 3, 4]) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_67_bell_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Bell_Number (N : Integer) return Integer;\n   -- Write a function to find the number of ways to partition a set of Bell numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Bell_Number (N : Integer) return Integer", "test": "\n   end Bell_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Bell_Number;\n\nbegin\n   pragma Assert (Candidate (2) = 2);\n   pragma Assert (Candidate (10) = 115975);\n   pragma Assert (Candidate (56) = 6775685320645824322581483068371419745979053216268760300);\nend Main;", "language": "adb"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Is_Monotonic (A : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether the given array is monotonic or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Monotonic (A : Integer_Array) return Boolean", "test": "\n   end Is_Monotonic;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array) return Boolean renames Placeholder.Is_Monotonic;\n\nbegin\n   pragma Assert (Candidate ([6, 5, 4, 4]) = True);\n   pragma Assert (Candidate ([1, 2, 2, 3]) = True);\n   pragma Assert (Candidate ([1, 3, 2]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_69_is_sublist", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Is_Sublist (L : Integer_Array; S : Integer_Array) return Boolean;\n   -- Write a function to check whether a Vector contains the given subVector or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Sublist (L : Integer_Array; S : Integer_Array) return Boolean", "test": "\n   end Is_Sublist;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array; S : Integer_Array) return Boolean renames Placeholder.Is_Sublist;\n\nbegin\n   pragma Assert (Candidate ([2, 4, 3, 5, 7], [3, 7]) = False);\n   pragma Assert (Candidate ([2, 4, 3, 5, 7], [4, 3]) = True);\n   pragma Assert (Candidate ([2, 4, 3, 5, 7], [1, 6]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_70_get_equal", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Get_Equal (Input : Integer_Vector_Vector_Array) return Boolean;\n   -- Write a function to find whether all the given Vectors have equal length or not.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Get_Equal (Input : Integer_Vector_Vector_Array) return Boolean", "test": "\n   end Get_Equal;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Input : Integer_Vector_Vector_Array) return Boolean renames Placeholder.Get_Equal;\n\nbegin\n   pragma Assert (Candidate ([[11, 22, 33], [44, 55, 66]]) = True);\n   pragma Assert (Candidate ([[1, 2, 3], [4, 5, 6, 7]]) = False);\n   pragma Assert (Candidate ([[1, 2], [3, 4]]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_71_comb_sort", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Comb_Sort (Nums : Integer_Array) return Integer_Array;\n   -- Write a function to sort a Vector of elements.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Comb_Sort (Nums : Integer_Array) return Integer_Array", "test": "\n   end Comb_Sort;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Comb_Sort;\n\nbegin\n   pragma Assert (Candidate ([5, 15, 37, 25, 79]) = [5, 15, 25, 37, 79]);\n   pragma Assert (Candidate ([41, 32, 15, 19, 22]) = [15, 19, 22, 32, 41]);\n   pragma Assert (Candidate ([99, 15, 13, 47]) = [13, 15, 47, 99]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_72_dif_Square", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Dif_Square (N : Integer) return Boolean;\n   -- Write an adbthon function to check whether the given number can be represented as the difference of two squares or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Dif_Square (N : Integer) return Boolean", "test": "\n   end Dif_Square;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Dif_Square;\n\nbegin\n   pragma Assert (Candidate (5) = True);\n   pragma Assert (Candidate (10) = False);\n   pragma Assert (Candidate (15) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Is_Samepatterns (Colors : Unbounded_String_Array; Patterns : Unbounded_String_Array) return Boolean;\n   -- Write a function to check whether it follows the sequence given in the patterns array.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Is_Samepatterns (Colors : Unbounded_String_Array; Patterns : Unbounded_String_Array) return Boolean", "test": "\n   end Is_Samepatterns;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Colors : Unbounded_String_Array; Patterns : Unbounded_String_Array) return Boolean renames Placeholder.Is_Samepatterns;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"red\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"green\")], [To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"b\")]) = True);\n   pragma Assert (Candidate ([To_Unbounded_String (\"red\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"greenn\")], [To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"b\")]) = False);\n   pragma Assert (Candidate ([To_Unbounded_String (\"red\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"greenn\")], [To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\")]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_75_find_tuples", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   type Integer_Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Integer_Tuple;\n   function Find_Tuples (Test_List : Integer_Integer_Integer_Tuple_Array; K : Integer) return Integer_Integer_Integer_Tuple_Array;\n   -- Write a function to find records which have all elements divisible by k from the given Vector of records.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Tuples (Test_List : Integer_Integer_Integer_Tuple_Array; K : Integer) return Integer_Integer_Integer_Tuple_Array", "test": "\n   end Find_Tuples;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Integer_Integer_Tuple_Array; K : Integer) return Integer_Integer_Integer_Tuple_Array renames Placeholder.Find_Tuples;\n\nbegin\n   pragma Assert (Candidate ([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) = [(6, 24, 12)]);\n   pragma Assert (Candidate ([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) = [(5, 25, 30)]);\n   pragma Assert (Candidate ([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) = [(8, 16, 4)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_77_is_Diff", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Diff (N : Integer) return Boolean;\n   -- Write an adbthon function to find whether a number is divisible by 11.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Diff (N : Integer) return Boolean", "test": "\n   end Is_Diff;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Diff;\n\nbegin\n   pragma Assert (Candidate (12345) = False);\n   pragma Assert (Candidate (1212112) = True);\n   pragma Assert (Candidate (1212) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_79_word_len", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Word_Len (S : String) return Boolean;\n   -- Write an adbthon function to check whether the length of the word is odd or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Word_Len (S : String) return Boolean", "test": "\n   end Word_Len;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Boolean renames Placeholder.Word_Len;\n\nbegin\n   pragma Assert (Candidate (\"Hadoop\") = False);\n   pragma Assert (Candidate (\"great\") = True);\n   pragma Assert (Candidate (\"structure\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Tetrahedral_Number (N : Integer) return Integer;\n   -- Write a function to find the nth tetrahedral number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Tetrahedral_Number (N : Integer) return Integer", "test": "\n   end Tetrahedral_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Tetrahedral_Number;\n\nbegin\n   pragma Assert (Candidate (5) = 35);\n   pragma Assert (Candidate (6) = 56);\n   pragma Assert (Candidate (7) = 84);\nend Main;", "language": "adb"}, {"task_id": "mbpp_83_get_Char", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Get_Char (Strr : String) return String;\n   -- Write an adbthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Char (Strr : String) return String", "test": "\n   end Get_Char;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Strr : String) return String renames Placeholder.Get_Char;\n\nbegin\n   pragma Assert (Candidate (\"abc\") = \"f\");\n   pragma Assert (Candidate (\"gfg\") = \"t\");\n   pragma Assert (Candidate (\"ab\") = \"c\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_84_sequence", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sequence (N : Integer) return Integer;\n   -- Write a function to find the nth number in the newman conway sequence.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sequence (N : Integer) return Integer", "test": "\n   end Sequence;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Sequence;\n\nbegin\n   pragma Assert (Candidate (10) = 6);\n   pragma Assert (Candidate (2) = 1);\n   pragma Assert (Candidate (3) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Centered_Hexagonal_Number (N : Integer) return Integer;\n   -- Write a function to find nth centered hexagonal number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Centered_Hexagonal_Number (N : Integer) return Integer", "test": "\n   end Centered_Hexagonal_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Centered_Hexagonal_Number;\n\nbegin\n   pragma Assert (Candidate (10) = 271);\n   pragma Assert (Candidate (2) = 7);\n   pragma Assert (Candidate (9) = 217);\nend Main;", "language": "adb"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_String_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => String);\n   use String_String_Dict;\n   function Merge_Dictionaries_Three (Dict1 : String_String_Dict.Map; Dict2 : String_String_Dict.Map; Dict3 : String_String_Dict.Map) return String_String_Dict.Map;\n   -- Write a function to merge three dictionaries into a single Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Merge_Dictionaries_Three (Dict1 : String_String_Dict.Map; Dict2 : String_String_Dict.Map; Dict3 : String_String_Dict.Map) return String_String_Dict.Map", "test": "\n   end Merge_Dictionaries_Three;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_String_Dict;\n\n   function Candidate (Dict1 : String_String_Dict.Map; Dict2 : String_String_Dict.Map; Dict3 : String_String_Dict.Map) return String_String_Dict.Map renames Placeholder.Merge_Dictionaries_Three;\n\nbegin\n   pragma Assert (Candidate ([\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"], [\"G\" => \"Green\", \"W\" => \"White\"], [\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"]) = [\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"]);\n   pragma Assert (Candidate ([\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"], [\"G\" => \"Green\", \"W\" => \"White\"], [\"L\" => \"lavender\", \"B\" => \"Blue\"]) = [\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"]);\n   pragma Assert (Candidate ([\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"], [\"L\" => \"lavender\", \"B\" => \"Blue\"], [\"G\" => \"Green\", \"W\" => \"White\"]) = [\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_88_freq_count", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   package Integer_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => Integer, Element_Type => Integer);\n   use Integer_Integer_Dict;\n   function Freq_Count (List1 : Integer_Array) return Integer_Integer_Dict.Map;\n   -- Write a function to get the frequency of all the elements in a Vector, returned as a Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Freq_Count (List1 : Integer_Array) return Integer_Integer_Dict.Map", "test": "\n   end Freq_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Integer_Dict;\n\n   function Candidate (List1 : Integer_Array) return Integer_Integer_Dict.Map renames Placeholder.Freq_Count;\n\nbegin\n   pragma Assert (Candidate ([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) = [10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) = [1 => 3, 2 => 2, 3 => 3, 4 => 3]);\n   pragma Assert (Candidate ([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) = [10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_89_closest_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Closest_Num (N : Integer) return Integer;\n   -- Write a function to find the closest smaller number than n.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Closest_Num (N : Integer) return Integer", "test": "\n   end Closest_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Closest_Num;\n\nbegin\n   pragma Assert (Candidate (11) = 10);\n   pragma Assert (Candidate (7) = 6);\n   pragma Assert (Candidate (12) = 11);\nend Main;", "language": "adb"}, {"task_id": "mbpp_90_len_log", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Len_Log (List1 : Unbounded_String_Array) return Integer;\n   -- Write an adbthon function to find the length of the longest word.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Len_Log (List1 : Unbounded_String_Array) return Integer", "test": "\n   end Len_Log;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Unbounded_String_Array) return Integer renames Placeholder.Len_Log;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"python\"), To_Unbounded_String (\"PHP\"), To_Unbounded_String (\"bigdata\")]) = 7);\n   pragma Assert (Candidate ([To_Unbounded_String (\"a\"), To_Unbounded_String (\"ab\"), To_Unbounded_String (\"abc\")]) = 3);\n   pragma Assert (Candidate ([To_Unbounded_String (\"small\"), To_Unbounded_String (\"big\"), To_Unbounded_String (\"tall\")]) = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_91_find_substring", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Find_Substring (Str1 : Unbounded_String_Array; Sub_Str : String) return Boolean;\n   -- Write a function to check if a string is present as a substring in a given Vector of string values.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Find_Substring (Str1 : Unbounded_String_Array; Sub_Str : String) return Boolean", "test": "\n   end Find_Substring;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : Unbounded_String_Array; Sub_Str : String) return Boolean renames Placeholder.Find_Substring;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"red\"), To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], \"ack\") = True);\n   pragma Assert (Candidate ([To_Unbounded_String (\"red\"), To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], \"abc\") = False);\n   pragma Assert (Candidate ([To_Unbounded_String (\"red\"), To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], \"ange\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_92_is_undulating", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Undulating (N : Integer) return Boolean;\n   -- Write a function to check whether the given number is undulating or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Undulating (N : Integer) return Boolean", "test": "\n   end Is_Undulating;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Undulating;\n\nbegin\n   pragma Assert (Candidate (1212121) = True);\n   pragma Assert (Candidate (1991) = False);\n   pragma Assert (Candidate (121) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_93_power", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Power (A : Integer; B : Integer) return Integer;\n   -- Write a function to calculate the value of 'a' to the power 'b'.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Power (A : Integer; B : Integer) return Integer", "test": "\n   end Power;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Power;\n\nbegin\n   pragma Assert (Candidate (3, 4) = 81);\n   pragma Assert (Candidate (2, 3) = 8);\n   pragma Assert (Candidate (5, 5) = 3125);\nend Main;", "language": "adb"}, {"task_id": "mbpp_94_index_minimum", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n   end record;\n\n   type Unbounded_String_Integer_Tuple_Array is array (Positive range <>) of Unbounded_String_Integer_Tuple;\n   function Index_Minimum (Test_List : Unbounded_String_Integer_Tuple_Array) return String;\n   -- Given a Vector of records, write a function that returns the first value of the record with the smallest second value.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Index_Minimum (Test_List : Unbounded_String_Integer_Tuple_Array) return String", "test": "\n   end Index_Minimum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Unbounded_String_Integer_Tuple_Array) return String renames Placeholder.Index_Minimum;\n\nbegin\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Rash\"), 143), (To_Unbounded_String (\"Manjeet\"), 200), (To_Unbounded_String (\"Varsha\"), 100)]) = \"Varsha\");\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Yash\"), 185), (To_Unbounded_String (\"Dawood\"), 125), (To_Unbounded_String (\"Sanya\"), 175)]) = \"Dawood\");\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Sai\"), 345), (To_Unbounded_String (\"Salman\"), 145), (To_Unbounded_String (\"Ayesha\"), 96)]) = \"Ayesha\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Find_Min_Length (Lst : Integer_Vector_Vector_Array) return Integer;\n   -- Write an adbthon function to find the length of the smallest Vector in a Vector of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Find_Min_Length (Lst : Integer_Vector_Vector_Array) return Integer", "test": "\n   end Find_Min_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Lst : Integer_Vector_Vector_Array) return Integer renames Placeholder.Find_Min_Length;\n\nbegin\n   pragma Assert (Candidate ([[1], [1, 2]]) = 1);\n   pragma Assert (Candidate ([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) = 2);\n   pragma Assert (Candidate ([[3, 3, 3], [4, 4, 4, 4]]) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_96_divisor", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Divisor (N : Integer) return Integer;\n   -- Write an adbthon function to find the number of divisors of a given integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Divisor (N : Integer) return Integer", "test": "\n   end Divisor;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Divisor;\n\nbegin\n   pragma Assert (Candidate (15) = 4);\n   pragma Assert (Candidate (12) = 6);\n   pragma Assert (Candidate (9) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   package Integer_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => Integer, Element_Type => Integer);\n   use Integer_Integer_Dict;\n   function Frequency_Lists (List1 : Integer_Vector_Vector_Array) return Integer_Integer_Dict.Map;\n   -- Write a function to find frequency of each element in a flattened Vector of Vectors, returned in a Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Frequency_Lists (List1 : Integer_Vector_Vector_Array) return Integer_Integer_Dict.Map", "test": "\n   end Frequency_Lists;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n   use Integer_Integer_Dict;\n\n   function Candidate (List1 : Integer_Vector_Vector_Array) return Integer_Integer_Dict.Map renames Placeholder.Frequency_Lists;\n\nbegin\n   pragma Assert (Candidate ([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) = [1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1]);\n   pragma Assert (Candidate ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) = [1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1]);\n   pragma Assert (Candidate ([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) = [20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Decimal_To_Binary (N : Integer) return String;\n   -- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Decimal_To_Binary (N : Integer) return String", "test": "\n   end Decimal_To_Binary;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return String renames Placeholder.Decimal_To_Binary;\n\nbegin\n   pragma Assert (Candidate (8) = \"1000\");\n   pragma Assert (Candidate (18) = \"10010\");\n   pragma Assert (Candidate (7) = \"111\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Next_Smallest_Palindrome (Num : Integer) return Integer;\n   -- Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Next_Smallest_Palindrome (Num : Integer) return Integer", "test": "\n   end Next_Smallest_Palindrome;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num : Integer) return Integer renames Placeholder.Next_Smallest_Palindrome;\n\nbegin\n   pragma Assert (Candidate (99) = 101);\n   pragma Assert (Candidate (1221) = 1331);\n   pragma Assert (Candidate (120) = 121);\nend Main;", "language": "adb"}, {"task_id": "mbpp_101_kth_element", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Kth_Element (Arr : Integer_Array; K : Integer) return Integer;\n   -- Write a function to find the kth element in the given array using 1-based indexing.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Kth_Element (Arr : Integer_Array; K : Integer) return Integer", "test": "\n   end Kth_Element;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; K : Integer) return Integer renames Placeholder.Kth_Element;\n\nbegin\n   pragma Assert (Candidate ([12, 3, 5, 7, 19], 2) = 3);\n   pragma Assert (Candidate ([17, 24, 8, 23], 3) = 8);\n   pragma Assert (Candidate ([16, 21, 25, 36, 4], 4) = 36);\nend Main;", "language": "adb"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Snake_To_Camel (Word : String) return String;\n   -- Write a function to convert a snake case string to camel case string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Snake_To_Camel (Word : String) return String", "test": "\n   end Snake_To_Camel;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Word : String) return String renames Placeholder.Snake_To_Camel;\n\nbegin\n   pragma Assert (Candidate (\"python_program\") = \"PythonProgram\");\n   pragma Assert (Candidate (\"python_language\") = \"PythonLanguage\");\n   pragma Assert (Candidate (\"programming_language\") = \"ProgrammingLanguage\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Eulerian_Num (N : Integer; M : Integer) return Integer;\n   -- Write a function to find the Eulerian number a(n, m).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Eulerian_Num (N : Integer; M : Integer) return Integer", "test": "\n   end Eulerian_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; M : Integer) return Integer renames Placeholder.Eulerian_Num;\n\nbegin\n   pragma Assert (Candidate (3, 1) = 4);\n   pragma Assert (Candidate (4, 1) = 11);\n   pragma Assert (Candidate (5, 3) = 26);\nend Main;", "language": "adb"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   package Unbounded_String_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Unbounded_String);\n   use Unbounded_String_Vector;\n   type Unbounded_String_Vector_Vector_Array is array (Positive range <>) of Unbounded_String_Vector.Vector;\n   function Sort_Sublists (Input_List : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array;\n   -- Write a function to sort each subVector of strings in a given Vector of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Sort_Sublists (Input_List : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array", "test": "\n   end Sort_Sublists;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Unbounded_String_Vector;\n\n   function Candidate (Input_List : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array renames Placeholder.Sort_Sublists;\n\nbegin\n   pragma Assert (Candidate ([[To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\")], [To_Unbounded_String (\"white\"), To_Unbounded_String (\"black\"), To_Unbounded_String (\"orange\")]]) = [[To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\")], [To_Unbounded_String (\"black\"), To_Unbounded_String (\"orange\"), To_Unbounded_String (\"white\")]]);\n   pragma Assert (Candidate ([[To_Unbounded_String (\" red \"), To_Unbounded_String (\"green\")], [To_Unbounded_String (\"blue \"), To_Unbounded_String (\" black\")], [To_Unbounded_String (\" orange\"), To_Unbounded_String (\"brown\")]]) = [[To_Unbounded_String (\" red \"), To_Unbounded_String (\"green\")], [To_Unbounded_String (\" black\"), To_Unbounded_String (\"blue \")], [To_Unbounded_String (\" orange\"), To_Unbounded_String (\"brown\")]]);\n   pragma Assert (Candidate ([[To_Unbounded_String (\"zilver\"), To_Unbounded_String (\"gold\")], [To_Unbounded_String (\"magnesium\"), To_Unbounded_String (\"aluminium\")], [To_Unbounded_String (\"steel\"), To_Unbounded_String (\"bronze\")]]) = [[To_Unbounded_String (\"gold\"), To_Unbounded_String (\"zilver\")], [To_Unbounded_String (\"aluminium\"), To_Unbounded_String (\"magnesium\")], [To_Unbounded_String (\"bronze\"), To_Unbounded_String (\"steel\")]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_105_count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Boolean_Array is array (Positive range <>) of Boolean;\n   function Count (Lst : Boolean_Array) return Integer;\n   -- Write an adbthon function to count true booleans in the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count (Lst : Boolean_Array) return Integer", "test": "\n   end Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst : Boolean_Array) return Integer renames Placeholder.Count;\n\nbegin\n   pragma Assert (Candidate ([True, False, True]) = 2);\n   pragma Assert (Candidate ([False, False]) = 0);\n   pragma Assert (Candidate ([True, True, True]) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_106_add_lists", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n      Integer_5 : Integer;\n   end record;\n\n   function Add_Lists (Test_List : Integer_Array; Test_Tup : Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function to append the given Vector to the given records.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Add_Lists (Test_List : Integer_Array; Test_Tup : Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Integer_Tuple", "test": "\n   end Add_Lists;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Array; Test_Tup : Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Integer_Tuple renames Placeholder.Add_Lists;\n\nbegin\n   pragma Assert (Candidate ([5, 6, 7], (9, 10)) = (9, 10, 5, 6, 7));\n   pragma Assert (Candidate ([6, 7, 8], (10, 11)) = (10, 11, 6, 7, 8));\n   pragma Assert (Candidate ([7, 8, 9], (11, 12)) = (11, 12, 7, 8, 9));\nend Main;", "language": "adb"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Merge_Sorted_List (Num1 : Integer_Array; Num2 : Integer_Array; Num3 : Integer_Array) return Integer_Array;\n   -- Write a function to merge three Vectors into a single sorted Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Merge_Sorted_List (Num1 : Integer_Array; Num2 : Integer_Array; Num3 : Integer_Array) return Integer_Array", "test": "\n   end Merge_Sorted_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num1 : Integer_Array; Num2 : Integer_Array; Num3 : Integer_Array) return Integer_Array renames Placeholder.Merge_Sorted_List;\n\nbegin\n   pragma Assert (Candidate ([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) = [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);\n   pragma Assert (Candidate ([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) = [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);\n   pragma Assert (Candidate ([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) = [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Odd_Equivalent (S : String; N : Integer) return Integer;\n   -- Write an adbthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Odd_Equivalent (S : String; N : Integer) return Integer", "test": "\n   end Odd_Equivalent;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String; N : Integer) return Integer renames Placeholder.Odd_Equivalent;\n\nbegin\n   pragma Assert (Candidate (\"011001\", 6) = 3);\n   pragma Assert (Candidate (\"11011\", 5) = 4);\n   pragma Assert (Candidate (\"1010\", 4) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_113_check_integer", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_Integer (Text : String) return Boolean;\n   -- Write a function to check if a string represents an integer or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Integer (Text : String) return Boolean", "test": "\n   end Check_Integer;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Check_Integer;\n\nbegin\n   pragma Assert (Candidate (\"python\") = False);\n   pragma Assert (Candidate (\"1\") = True);\n   pragma Assert (Candidate (\"12345\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   function Tuple_To_Int (Nums : Integer_Integer_Integer_Tuple) return Integer;\n   -- Write a function to convert a given record of positive integers into a single integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Tuple_To_Int (Nums : Integer_Integer_Integer_Tuple) return Integer", "test": "\n   end Tuple_To_Int;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Integer_Integer_Tuple) return Integer renames Placeholder.Tuple_To_Int;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3)) = 123);\n   pragma Assert (Candidate ((4, 5, 6)) = 456);\n   pragma Assert (Candidate ((5, 6, 7)) = 567);\nend Main;", "language": "adb"}, {"task_id": "mbpp_117_list_to_float", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Unbounded_String_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Unbounded_String_2 : Unbounded_String;\n   end record;\n\n   type Unbounded_String_Unbounded_String_Tuple_Array is array (Positive range <>) of Unbounded_String_Unbounded_String_Tuple;\n   type Float_Float_Tuple is record\n      Float_1 : Float;\n      Float_2 : Float;\n   end record;\n\n   type Float_Float_Tuple_Array is array (Positive range <>) of Float_Float_Tuple;\n   function List_To_Float (Test_List : Unbounded_String_Unbounded_String_Tuple_Array) return Float_Float_Tuple_Array;\n   -- Write a function to convert all possible convertible elements in a Vector of Vectors to floats.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function List_To_Float (Test_List : Unbounded_String_Unbounded_String_Tuple_Array) return Float_Float_Tuple_Array", "test": "\n   end List_To_Float;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Unbounded_String_Unbounded_String_Tuple_Array) return Float_Float_Tuple_Array renames Placeholder.List_To_Float;\n\nbegin\n   pragma Assert (Candidate ([(To_Unbounded_String (\"3\"), To_Unbounded_String (\"4\")), (To_Unbounded_String (\"1\"), To_Unbounded_String (\"26.45\")), (To_Unbounded_String (\"7.32\"), To_Unbounded_String (\"8\")), (To_Unbounded_String (\"4\"), To_Unbounded_String (\"8\"))]) = [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]);\n   pragma Assert (Candidate ([(To_Unbounded_String (\"4\"), To_Unbounded_String (\"4\")), (To_Unbounded_String (\"2\"), To_Unbounded_String (\"27\")), (To_Unbounded_String (\"4.12\"), To_Unbounded_String (\"9\")), (To_Unbounded_String (\"7\"), To_Unbounded_String (\"11\"))]) = [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]);\n   pragma Assert (Candidate ([(To_Unbounded_String (\"6\"), To_Unbounded_String (\"78\")), (To_Unbounded_String (\"5\"), To_Unbounded_String (\"26.45\")), (To_Unbounded_String (\"1.33\"), To_Unbounded_String (\"4\")), (To_Unbounded_String (\"82\"), To_Unbounded_String (\"13\"))]) = [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_118_string_to_list", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function String_To_List (My_String : String) return Unbounded_String_Array;\n   -- Write a function to convert a string to a Vector of strings split on the space character.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function String_To_List (My_String : String) return Unbounded_String_Array", "test": "\n   end String_To_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Unbounded_String_Array renames Placeholder.String_To_List;\n\nbegin\n   pragma Assert (Candidate (\"python programming\") = [To_Unbounded_String (\"python\"), To_Unbounded_String (\"programming\")]);\n   pragma Assert (Candidate (\"lists tuples strings\") = [To_Unbounded_String (\"lists\"), To_Unbounded_String (\"tuples\"), To_Unbounded_String (\"strings\")]);\n   pragma Assert (Candidate (\"write a program\") = [To_Unbounded_String (\"write\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"program\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_119_search", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Search (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the element that appears only once in a sorted array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Search (Arr : Integer_Array) return Integer", "test": "\n   end Search;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Search;\n\nbegin\n   pragma Assert (Candidate ([1, 1, 2, 2, 3]) = 3);\n   pragma Assert (Candidate ([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) = 8);\n   pragma Assert (Candidate ([1, 2, 2, 3, 3, 4, 4]) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Max_Product_Tuple (List1 : Integer_Integer_Tuple_Array) return Integer;\n   -- Write a function to find the maximum absolute product between numbers in pairs of records within a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Product_Tuple (List1 : Integer_Integer_Tuple_Array) return Integer", "test": "\n   end Max_Product_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Integer_Tuple_Array) return Integer renames Placeholder.Max_Product_Tuple;\n\nbegin\n   pragma Assert (Candidate ([(2, 7), (2, 6), (1, 8), (4, 9)]) = 36);\n   pragma Assert (Candidate ([(10, 20), (15, 2), (5, 10)]) = 200);\n   pragma Assert (Candidate ([(11, 44), (10, 15), (20, 5), (12, 9)]) = 484);\nend Main;", "language": "adb"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Amicable_Numbers_Sum (Limit : Integer) return Integer;\n   -- Write a function to sum all amicable numbers from 1 to a specified number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Amicable_Numbers_Sum (Limit : Integer) return Integer", "test": "\n   end Amicable_Numbers_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Limit : Integer) return Integer renames Placeholder.Amicable_Numbers_Sum;\n\nbegin\n   pragma Assert (Candidate (999) = 504);\n   pragma Assert (Candidate (9999) = 31626);\n   pragma Assert (Candidate (99) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_125_find_length", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Length (My_String : String) return Integer;\n   -- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Length (My_String : String) return Integer", "test": "\n   end Find_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Integer renames Placeholder.Find_Length;\n\nbegin\n   pragma Assert (Candidate (\"11000010001\") = 6);\n   pragma Assert (Candidate (\"10111\") = 1);\n   pragma Assert (Candidate (\"11011101100101\") = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_126_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum (A : Integer; B : Integer) return Integer;\n   -- Write an adbthon function to find the sum of common divisors of two given numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum (A : Integer; B : Integer) return Integer", "test": "\n   end Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Sum;\n\nbegin\n   pragma Assert (Candidate (10, 15) = 6);\n   pragma Assert (Candidate (100, 150) = 93);\n   pragma Assert (Candidate (4, 6) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_127_multiply_int", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Multiply_Int (X : Integer; Y : Integer) return Integer;\n   -- Write a function to multiply two integers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Multiply_Int (X : Integer; Y : Integer) return Integer", "test": "\n   end Multiply_Int;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Y : Integer) return Integer renames Placeholder.Multiply_Int;\n\nbegin\n   pragma Assert (Candidate (10, 20) = 200);\n   pragma Assert (Candidate (5, 10) = 50);\n   pragma Assert (Candidate (4, 8) = 32);\nend Main;", "language": "adb"}, {"task_id": "mbpp_128_long_words", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Long_Words (N : Integer; Str : String) return Unbounded_String_Array;\n   -- Write a function to find words that are longer than n characters from a given Vector of words.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Long_Words (N : Integer; Str : String) return Unbounded_String_Array", "test": "\n   end Long_Words;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; Str : String) return Unbounded_String_Array renames Placeholder.Long_Words;\n\nbegin\n   pragma Assert (Candidate (3, \"python is a programming language\") = [To_Unbounded_String (\"python\"), To_Unbounded_String (\"programming\"), To_Unbounded_String (\"language\")]);\n   pragma Assert (Candidate (2, \"writing a program\") = [To_Unbounded_String (\"writing\"), To_Unbounded_String (\"program\")]);\n   pragma Assert (Candidate (5, \"sorting list\") = [To_Unbounded_String (\"sorting\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Magic_Square_Test (My_Matrix : Integer_Vector_Vector_Array) return Boolean;\n   -- Write a function to calculate whether the matrix is a magic square.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Magic_Square_Test (My_Matrix : Integer_Vector_Vector_Array) return Boolean", "test": "\n   end Magic_Square_Test;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (My_Matrix : Integer_Vector_Vector_Array) return Boolean renames Placeholder.Magic_Square_Test;\n\nbegin\n   pragma Assert (Candidate ([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) = True);\n   pragma Assert (Candidate ([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True);\n   pragma Assert (Candidate ([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Occurrences (Nums : Integer_Array) return Integer;\n   -- Write a function to find the item with maximum frequency in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Occurrences (Nums : Integer_Array) return Integer", "test": "\n   end Max_Occurrences;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Max_Occurrences;\n\nbegin\n   pragma Assert (Candidate ([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) = 2);\n   pragma Assert (Candidate ([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) = 8);\n   pragma Assert (Candidate ([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) = 20);\nend Main;", "language": "adb"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Reverse_Vowels (Str1 : String) return String;\n   -- Write an adbthon function to reverse only the vowels of a given string (where y is not a vowel).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Reverse_Vowels (Str1 : String) return String", "test": "\n   end Reverse_Vowels;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return String renames Placeholder.Reverse_Vowels;\n\nbegin\n   pragma Assert (Candidate (\"Python\") = \"Python\");\n   pragma Assert (Candidate (\"USA\") = \"ASU\");\n   pragma Assert (Candidate (\"ab\") = \"ab\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_132_tup_string", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Tup_String (Tup1 : Unbounded_String_Array) return String;\n   -- Write a function to convert a Vector to a string.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Tup_String (Tup1 : Unbounded_String_Array) return String", "test": "\n   end Tup_String;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Tup1 : Unbounded_String_Array) return String renames Placeholder.Tup_String;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"e\"), To_Unbounded_String (\"x\"), To_Unbounded_String (\"e\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"i\"), To_Unbounded_String (\"s\"), To_Unbounded_String (\"e\"), To_Unbounded_String (\"s\")]) = \"exercises\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"p\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"t\"), To_Unbounded_String (\"h\"), To_Unbounded_String (\"o\"), To_Unbounded_String (\"n\")]) = \"python\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"p\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"o\"), To_Unbounded_String (\"g\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"m\")]) = \"program\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sum_Negativenum (Nums : Integer_Array) return Integer;\n   -- Write a function to calculate the sum of the negative numbers of a given Vector of numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Negativenum (Nums : Integer_Array) return Integer", "test": "\n   end Sum_Negativenum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Sum_Negativenum;\n\nbegin\n   pragma Assert (Candidate ([2, 4, -6, -9, 11, -12, 14, -5, 17]) = -32);\n   pragma Assert (Candidate ([10, 15, -14, 13, -18, 12, -20]) = -52);\n   pragma Assert (Candidate ([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) = -894);\nend Main;", "language": "adb"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Hexagonal_Num (N : Integer) return Integer;\n   -- Write a function to find the nth hexagonal number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Hexagonal_Num (N : Integer) return Integer", "test": "\n   end Hexagonal_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Hexagonal_Num;\n\nbegin\n   pragma Assert (Candidate (10) = 190);\n   pragma Assert (Candidate (5) = 45);\n   pragma Assert (Candidate (7) = 91);\nend Main;", "language": "adb"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Sum_Of_Powers_Of_Two (N : Integer) return Boolean;\n   -- Write an adbthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Sum_Of_Powers_Of_Two (N : Integer) return Boolean", "test": "\n   end Is_Sum_Of_Powers_Of_Two;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Sum_Of_Powers_Of_Two;\n\nbegin\n   pragma Assert (Candidate (10) = True);\n   pragma Assert (Candidate (7) = False);\n   pragma Assert (Candidate (14) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Pancake_Sort (Nums : Integer_Array) return Integer_Array;\n   -- Write a function to sort a Vector of elements.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Pancake_Sort (Nums : Integer_Array) return Integer_Array", "test": "\n   end Pancake_Sort;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Pancake_Sort;\n\nbegin\n   pragma Assert (Candidate ([15, 79, 25, 38, 69]) = [15, 25, 38, 69, 79]);\n   pragma Assert (Candidate ([98, 12, 54, 36, 85]) = [12, 36, 54, 85, 98]);\n   pragma Assert (Candidate ([41, 42, 32, 12, 23]) = [12, 23, 32, 41, 42]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_142_count_samepair", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_Samepair (List1 : Integer_Array; List2 : Integer_Array; List3 : Integer_Array) return Integer;\n   -- Write a function to count number items that are identical in the same position of three given Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Samepair (List1 : Integer_Array; List2 : Integer_Array; List3 : Integer_Array) return Integer", "test": "\n   end Count_Samepair;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array; List2 : Integer_Array; List3 : Integer_Array) return Integer renames Placeholder.Count_Samepair;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) = 3);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) = 4);\n   pragma Assert (Candidate ([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Abs_Diff (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the maximum difference between any two elements in a given array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Abs_Diff (Arr : Integer_Array) return Integer", "test": "\n   end Max_Abs_Diff;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Max_Abs_Diff;\n\nbegin\n   pragma Assert (Candidate ([2, 1, 5, 3]) = 4);\n   pragma Assert (Candidate ([9, 3, 2, 5, 1]) = 8);\n   pragma Assert (Candidate ([3, 2, 1]) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_160_find_solution", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer_Integer_Tuple;\n      when False =>\n         null;\n   end case;\nend record;\n   function Find_Solution (A : Integer; B : Integer; N : Integer) return Integer_Integer_Tuple_Option;\n   -- Write a function that returns integers x and y that satisfy ax + by = n as a record, or return null if no solution exists.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Solution (A : Integer; B : Integer; N : Integer) return Integer_Integer_Tuple_Option", "test": "\n   end Find_Solution;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer; N : Integer) return Integer_Integer_Tuple_Option renames Placeholder.Find_Solution;\n\nbegin\n   pragma Assert (Candidate (2, 3, 7) = (Valid => True, Value => (2, 1)));\n   pragma Assert (Candidate (4, 2, 7) = (Valid => False));\n   pragma Assert (Candidate (1, 13, 17) = (Valid => True, Value => (4, 1)));\nend Main;", "language": "adb"}, {"task_id": "mbpp_161_remove_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Remove_Elements (List1 : Integer_Array; List2 : Integer_Array) return Integer_Array;\n   -- Write a function to remove all elements from a given Vector present in another Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Elements (List1 : Integer_Array; List2 : Integer_Array) return Integer_Array", "test": "\n   end Remove_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array; List2 : Integer_Array) return Integer_Array renames Placeholder.Remove_Elements;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) = [1, 3, 5, 7, 9, 10]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) = [2, 4, 6, 8, 9, 10]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) = [1, 2, 3, 4, 6, 8, 9, 10]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_162_sum_series", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum_Series (N : Integer) return Integer;\n   -- Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Series (N : Integer) return Integer", "test": "\n   end Sum_Series;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Sum_Series;\n\nbegin\n   pragma Assert (Candidate (6) = 12);\n   pragma Assert (Candidate (10) = 30);\n   pragma Assert (Candidate (9) = 25);\nend Main;", "language": "adb"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Are_Equivalent (Num1 : Integer; Num2 : Integer) return Boolean;\n   -- Write a function to determine if the sum of the divisors of two integers are the same.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Are_Equivalent (Num1 : Integer; Num2 : Integer) return Boolean", "test": "\n   end Are_Equivalent;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num1 : Integer; Num2 : Integer) return Boolean renames Placeholder.Are_Equivalent;\n\nbegin\n   pragma Assert (Candidate (36, 57) = False);\n   pragma Assert (Candidate (2, 4) = False);\n   pragma Assert (Candidate (23, 47) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_165_count_char_position", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Char_Position (Str1 : String) return Integer;\n   -- Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Char_Position (Str1 : String) return Integer", "test": "\n   end Count_Char_Position;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return Integer renames Placeholder.Count_Char_Position;\n\nbegin\n   pragma Assert (Candidate (\"xbcefg\") = 2);\n   pragma Assert (Candidate (\"ABcED\") = 3);\n   pragma Assert (Candidate (\"AbgdeF\") = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Even_Pair (A : Integer_Array) return Integer;\n   -- Write a function that counts the number of pairs of integers in a Vector that xor to an even number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Even_Pair (A : Integer_Array) return Integer", "test": "\n   end Find_Even_Pair;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array) return Integer renames Placeholder.Find_Even_Pair;\n\nbegin\n   pragma Assert (Candidate ([5, 4, 7, 2, 1]) = 4);\n   pragma Assert (Candidate ([7, 2, 8, 1, 0, 5, 11]) = 9);\n   pragma Assert (Candidate ([1, 2, 3]) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Next_Power_Of_2 (N : Integer) return Integer;\n   -- Write an adbthon function to find the smallest power of 2 greater than or equal to n.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Next_Power_Of_2 (N : Integer) return Integer", "test": "\n   end Next_Power_Of_2;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Next_Power_Of_2;\n\nbegin\n   pragma Assert (Candidate (0) = 1);\n   pragma Assert (Candidate (5) = 8);\n   pragma Assert (Candidate (17) = 32);\nend Main;", "language": "adb"}, {"task_id": "mbpp_168_frequency", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Frequency (A : Integer_Array; X : Integer) return Integer;\n   -- Write a function to count the number of occurrences of a number in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Frequency (A : Integer_Array; X : Integer) return Integer", "test": "\n   end Frequency;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; X : Integer) return Integer renames Placeholder.Frequency;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3], 4) = 0);\n   pragma Assert (Candidate ([1, 2, 2, 3, 3, 3, 4], 3) = 3);\n   pragma Assert (Candidate ([0, 1, 2, 3, 1, 2], 1) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sum_Range_List (List1 : Integer_Array; M : Integer; N : Integer) return Integer;\n   -- Write a function to find the sum of numbers in a Vector within a range specified by two indices.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Range_List (List1 : Integer_Array; M : Integer; N : Integer) return Integer", "test": "\n   end Sum_Range_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array; M : Integer; N : Integer) return Integer renames Placeholder.Sum_Range_List;\n\nbegin\n   pragma Assert (Candidate ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) = 29);\n   pragma Assert (Candidate ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) = 16);\n   pragma Assert (Candidate ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) = 38);\nend Main;", "language": "adb"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Perimeter_Pentagon (A : Integer) return Integer;\n   -- Write a function to find the perimeter of a regular pentagon from the length of its sides.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Perimeter_Pentagon (A : Integer) return Integer", "test": "\n   end Perimeter_Pentagon;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer) return Integer renames Placeholder.Perimeter_Pentagon;\n\nbegin\n   pragma Assert (Candidate (5) = 25);\n   pragma Assert (Candidate (10) = 50);\n   pragma Assert (Candidate (15) = 75);\nend Main;", "language": "adb"}, {"task_id": "mbpp_172_count_occurance", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Occurance (S : String) return Integer;\n   -- Write a function to count the number of occurence of the string 'std' in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Occurance (S : String) return Integer", "test": "\n   end Count_Occurance;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Integer renames Placeholder.Count_Occurance;\n\nbegin\n   pragma Assert (Candidate (\"letstdlenstdporstd\") = 3);\n   pragma Assert (Candidate (\"truststdsolensporsd\") = 1);\n   pragma Assert (Candidate (\"makestdsostdworthit\") = 2);\n   pragma Assert (Candidate (\"stds\") = 1);\n   pragma Assert (Candidate (\"\") = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_223_is_majority", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Is_Majority (Arr : Integer_Array; N : Integer; X : Integer) return Boolean;\n   -- Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Majority (Arr : Integer_Array; N : Integer; X : Integer) return Boolean", "test": "\n   end Is_Majority;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; N : Integer; X : Integer) return Boolean renames Placeholder.Is_Majority;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 3, 3, 3, 10], 7, 3) = True);\n   pragma Assert (Candidate ([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) = False);\n   pragma Assert (Candidate ([1, 1, 1, 2, 2], 5, 1) = True);\n   pragma Assert (Candidate ([1, 1, 2, 2], 5, 1) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Set_Bits (N : Integer) return Integer;\n   -- Write an adbthon function to count the number of set bits (binary digits with value 1) in a given number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Set_Bits (N : Integer) return Integer", "test": "\n   end Count_Set_Bits;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Count_Set_Bits;\n\nbegin\n   pragma Assert (Candidate (2) = 1);\n   pragma Assert (Candidate (4) = 1);\n   pragma Assert (Candidate (6) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Odd_Values_String (Str : String) return String;\n   -- Write an adbthon function to remove the characters which have odd index values of a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Odd_Values_String (Str : String) return String", "test": "\n   end Odd_Values_String;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : String) return String renames Placeholder.Odd_Values_String;\n\nbegin\n   pragma Assert (Candidate (\"abcdef\") = \"ace\");\n   pragma Assert (Candidate (\"python\") = \"pto\");\n   pragma Assert (Candidate (\"data\") = \"dt\");\n   pragma Assert (Candidate (\"lambs\") = \"lms\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_227_min_of_three", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Min_Of_Three (A : Integer; B : Integer; C : Integer) return Integer;\n   -- Write a function to find minimum of three numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Min_Of_Three (A : Integer; B : Integer; C : Integer) return Integer", "test": "\n   end Min_Of_Three;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer; C : Integer) return Integer renames Placeholder.Min_Of_Three;\n\nbegin\n   pragma Assert (Candidate (10, 20, 0) = 0);\n   pragma Assert (Candidate (19, 15, 18) = 15);\n   pragma Assert (Candidate (-10, -20, -30) = -30);\nend Main;", "language": "adb"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function All_Bits_Set_In_The_Given_Range (N : Integer; L : Integer; R : Integer) return Boolean;\n   -- Write an adbthon function to check whether all the bits are unset in the given range or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function All_Bits_Set_In_The_Given_Range (N : Integer; L : Integer; R : Integer) return Boolean", "test": "\n   end All_Bits_Set_In_The_Given_Range;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; L : Integer; R : Integer) return Boolean renames Placeholder.All_Bits_Set_In_The_Given_Range;\n\nbegin\n   pragma Assert (Candidate (4, 1, 2) = True);\n   pragma Assert (Candidate (17, 2, 4) = True);\n   pragma Assert (Candidate (39, 4, 6) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Re_Arrange_Array (Arr : Integer_Array; N : Integer) return Integer_Array;\n   -- Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Re_Arrange_Array (Arr : Integer_Array; N : Integer) return Integer_Array", "test": "\n   end Re_Arrange_Array;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; N : Integer) return Integer_Array renames Placeholder.Re_Arrange_Array;\n\nbegin\n   pragma Assert (Candidate ([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) = [-1, -3, -7, 4, 5, 6, 2, 8, 9]);\n   pragma Assert (Candidate ([12, -14, -26, 13, 15], 5) = [-14, -26, 12, 13, 15]);\n   pragma Assert (Candidate ([10, 24, 36, -42, -39, -78, 85], 7) = [-42, -39, -78, 10, 24, 36, 85]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_230_replace_blank", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Replace_Blank (Str1 : String; Char : String) return String;\n   -- Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Replace_Blank (Str1 : String; Char : String) return String", "test": "\n   end Replace_Blank;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String; Char : String) return String renames Placeholder.Replace_Blank;\n\nbegin\n   pragma Assert (Candidate (\"hello people\", \"@\") = \"hello@people\");\n   pragma Assert (Candidate (\"python program language\", \"$\") = \"python$program$language\");\n   pragma Assert (Candidate (\"blank space\", \"-\") = \"blank-space\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_234_volume_cube", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Volume_Cube (L : Integer) return Integer;\n   -- Write a function to find the volume of a cube given its side length.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Volume_Cube (L : Integer) return Integer", "test": "\n   end Volume_Cube;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer) return Integer renames Placeholder.Volume_Cube;\n\nbegin\n   pragma Assert (Candidate (3) = 27);\n   pragma Assert (Candidate (2) = 8);\n   pragma Assert (Candidate (5) = 125);\nend Main;", "language": "adb"}, {"task_id": "mbpp_237_check_occurences", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   package Integer_Integer_Tuple_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => Integer_Integer_Tuple, Element_Type => Integer);\n   use Integer_Integer_Tuple_Integer_Dict;\n   function Check_Occurences (Test_List : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Integer_Dict.Map;\n   -- Write a function that takes in a Vector of records and returns a Map mapping each unique record to the number of times it occurs in the Vector.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Check_Occurences (Test_List : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Integer_Dict.Map", "test": "\n   end Check_Occurences;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Integer_Tuple_Integer_Dict;\n\n   function Candidate (Test_List : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Integer_Dict.Map renames Placeholder.Check_Occurences;\n\nbegin\n   pragma Assert (Candidate ([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) = [(1, 3) => 2, (2, 5) => 2, (3, 6) => 1]);\n   pragma Assert (Candidate ([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) = [(2, 4) => 2, (3, 6) => 2, (4, 7) => 1]);\n   pragma Assert (Candidate ([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) = [(2, 13) => 1, (11, 23) => 1, (12, 25) => 2, (16, 23) => 1]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Number_Of_Substrings (Str : String) return Integer;\n   -- Write an adbthon function to count the number of non-empty substrings of a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Number_Of_Substrings (Str : String) return Integer", "test": "\n   end Number_Of_Substrings;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : String) return Integer renames Placeholder.Number_Of_Substrings;\n\nbegin\n   pragma Assert (Candidate (\"abc\") = 6);\n   pragma Assert (Candidate (\"abcd\") = 10);\n   pragma Assert (Candidate (\"abcde\") = 15);\nend Main;", "language": "adb"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Get_Total_Number_Of_Sequences (M : Integer; N : Integer) return Integer;\n   -- Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Total_Number_Of_Sequences (M : Integer; N : Integer) return Integer", "test": "\n   end Get_Total_Number_Of_Sequences;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (M : Integer; N : Integer) return Integer renames Placeholder.Get_Total_Number_Of_Sequences;\n\nbegin\n   pragma Assert (Candidate (10, 4) = 4);\n   pragma Assert (Candidate (5, 2) = 6);\n   pragma Assert (Candidate (16, 3) = 84);\nend Main;", "language": "adb"}, {"task_id": "mbpp_242_count_charac", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Charac (Str1 : String) return Integer;\n   -- Write a function to count the total number of characters in a string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Charac (Str1 : String) return Integer", "test": "\n   end Count_Charac;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return Integer renames Placeholder.Count_Charac;\n\nbegin\n   pragma Assert (Candidate (\"python programming\") = 18);\n   pragma Assert (Candidate (\"language\") = 8);\n   pragma Assert (Candidate (\"words\") = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Next_Perfect_Square (N : Integer) return Integer;\n   -- Write an adbthon function to find the next perfect square greater than a given number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Next_Perfect_Square (N : Integer) return Integer", "test": "\n   end Next_Perfect_Square;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Next_Perfect_Square;\n\nbegin\n   pragma Assert (Candidate (35) = 36);\n   pragma Assert (Candidate (6) = 9);\n   pragma Assert (Candidate (9) = 16);\nend Main;", "language": "adb"}, {"task_id": "mbpp_245_max_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Sum (Arr : Integer_Array) return Integer;\n   -- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Sum (Arr : Integer_Array) return Integer", "test": "\n   end Max_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Max_Sum;\n\nbegin\n   pragma Assert (Candidate ([1, 15, 51, 45, 33, 100, 12, 18, 9]) = 194);\n   pragma Assert (Candidate ([80, 60, 30, 40, 20, 10]) = 210);\n   pragma Assert (Candidate ([2, 3, 14, 16, 21, 23, 29, 30]) = 138);\nend Main;", "language": "adb"}, {"task_id": "mbpp_247_lps", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Lps (Str : String) return Integer;\n   -- Write a function to find the length of the longest palindromic subsequence in the given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Lps (Str : String) return Integer", "test": "\n   end Lps;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : String) return Integer renames Placeholder.Lps;\n\nbegin\n   pragma Assert (Candidate (\"TENS FOR TENS\") = 5);\n   pragma Assert (Candidate (\"CARDIO FOR CARDS\") = 7);\n   pragma Assert (Candidate (\"PART OF THE JOURNEY IS PART\") = 9);\nend Main;", "language": "adb"}, {"task_id": "mbpp_249_intersection_array", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Intersection_Array (Array_Nums1 : Integer_Array; Array_Nums2 : Integer_Array) return Integer_Array;\n   -- Write a function to find the intersection of two arrays.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Intersection_Array (Array_Nums1 : Integer_Array; Array_Nums2 : Integer_Array) return Integer_Array", "test": "\n   end Intersection_Array;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Array_Nums1 : Integer_Array; Array_Nums2 : Integer_Array) return Integer_Array renames Placeholder.Intersection_Array;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) = [1, 2, 8, 9]);\n   pragma Assert (Candidate ([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) = [3, 5, 7, 9]);\n   pragma Assert (Candidate ([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) = [10]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_250_count_X", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_X (Tup : Integer_Array; X : Integer) return Integer;\n   -- Write an adbthon function that takes in a record and an element and counts the occcurences of the element in the Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_X (Tup : Integer_Array; X : Integer) return Integer", "test": "\n   end Count_X;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Tup : Integer_Array; X : Integer) return Integer renames Placeholder.Count_X;\n\nbegin\n   pragma Assert (Candidate ([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) = 0);\n   pragma Assert (Candidate ([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) = 3);\n   pragma Assert (Candidate ([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_251_insert_element", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Insert_Element (List : Unbounded_String_Array; Element : String) return Unbounded_String_Array;\n   -- Write a function that takes in a Vector and an element and inserts the element before each element in the Vector, and returns the resulting Vector.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Insert_Element (List : Unbounded_String_Array; Element : String) return Unbounded_String_Array", "test": "\n   end Insert_Element;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List : Unbounded_String_Array; Element : String) return Unbounded_String_Array renames Placeholder.Insert_Element;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Black\")], \"c\") = [To_Unbounded_String (\"c\"), To_Unbounded_String (\"Red\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"Black\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"python\"), To_Unbounded_String (\"java\")], \"program\") = [To_Unbounded_String (\"program\"), To_Unbounded_String (\"python\"), To_Unbounded_String (\"program\"), To_Unbounded_String (\"java\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"happy\"), To_Unbounded_String (\"sad\")], \"laugh\") = [To_Unbounded_String (\"laugh\"), To_Unbounded_String (\"happy\"), To_Unbounded_String (\"laugh\"), To_Unbounded_String (\"sad\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_252_convert", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Float_Tuple is record\n      Float_1 : Float;\n      Float_2 : Float;\n   end record;\n\n   function Convert (Numbers : Integer) return Float_Float_Tuple;\n   -- Write an adbthon function to convert complex numbers to polar coordinates.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Convert (Numbers : Integer) return Float_Float_Tuple", "test": "\n   end Convert;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Numbers : Integer) return Float_Float_Tuple renames Placeholder.Convert;\n\nbegin\n   pragma Assert (Candidate (1) = (1.0, 0.0));\n   pragma Assert (Candidate (4) = (4.0, 0.0));\n   pragma Assert (Candidate (5) = (5.0, 0.0));\nend Main;", "language": "adb"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   package Unbounded_String_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Unbounded_String);\n   use Unbounded_String_Vector;\n   type Unbounded_String_Vector_Vector_Array is array (Positive range <>) of Unbounded_String_Vector.Vector;\n   function Combinations_Colors (L : Unbounded_String_Array; N : Integer) return Unbounded_String_Vector_Vector_Array;\n   -- Write a function that takes in a Vector and length n, and generates all combinations (with repetition) of the elements of the Vector and returns a Vector with a Vector for each combination.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Combinations_Colors (L : Unbounded_String_Array; N : Integer) return Unbounded_String_Vector_Vector_Array", "test": "\n   end Combinations_Colors;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Unbounded_String_Vector;\n\n   function Candidate (L : Unbounded_String_Array; N : Integer) return Unbounded_String_Vector_Vector_Array renames Placeholder.Combinations_Colors;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\")], 1) = [[To_Unbounded_String (\"Red\")], [To_Unbounded_String (\"Green\")], [To_Unbounded_String (\"Blue\")]]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\")], 2) = [[To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Red\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Green\")], [To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Blue\"), To_Unbounded_String (\"Blue\")]]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\")], 3) = [[To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Red\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Green\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Blue\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Green\")], [To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\"), To_Unbounded_String (\"Blue\")], [To_Unbounded_String (\"Blue\"), To_Unbounded_String (\"Blue\"), To_Unbounded_String (\"Blue\")]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Primes_Nums (N : Integer) return Integer;\n   -- Write an adbthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Primes_Nums (N : Integer) return Integer", "test": "\n   end Count_Primes_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Count_Primes_Nums;\n\nbegin\n   pragma Assert (Candidate (5) = 2);\n   pragma Assert (Candidate (10) = 4);\n   pragma Assert (Candidate (100) = 25);\nend Main;", "language": "adb"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Swap_Numbers (A : Integer; B : Integer) return Integer_Array;\n   -- Write a function that takes in two numbers and returns a Vector with the second number and then the first number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Swap_Numbers (A : Integer; B : Integer) return Integer_Array", "test": "\n   end Swap_Numbers;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer_Array renames Placeholder.Swap_Numbers;\n\nbegin\n   pragma Assert (Candidate (10, 20) = [20, 10]);\n   pragma Assert (Candidate (15, 17) = [17, 15]);\n   pragma Assert (Candidate (100, 200) = [200, 100]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Maximize_Elements (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array;\n   -- Write a function to maximize the given two Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Maximize_Elements (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array", "test": "\n   end Maximize_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array renames Placeholder.Maximize_Elements;\n\nbegin\n   pragma Assert (Candidate ([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) = [[6, 7], [4, 9], [2, 9], [7, 10]]);\n   pragma Assert (Candidate ([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) = [[7, 8], [5, 10], [3, 10], [8, 11]]);\n   pragma Assert (Candidate ([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) = [[8, 9], [6, 11], [4, 11], [9, 12]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_260_newman_prime", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Newman_Prime (N : Integer) return Integer;\n   -- Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Newman_Prime (N : Integer) return Integer", "test": "\n   end Newman_Prime;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Newman_Prime;\n\nbegin\n   pragma Assert (Candidate (3) = 7);\n   pragma Assert (Candidate (4) = 17);\n   pragma Assert (Candidate (5) = 41);\nend Main;", "language": "adb"}, {"task_id": "mbpp_261_division_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n   end record;\n\n   function Division_Elements (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function that takes in two records and performs mathematical division operation element-wise across the given records.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Division_Elements (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple", "test": "\n   end Division_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple renames Placeholder.Division_Elements;\n\nbegin\n   pragma Assert (Candidate ((10, 4, 6, 9), (5, 2, 3, 3)) = (2, 2, 2, 3));\n   pragma Assert (Candidate ((12, 6, 8, 16), (6, 3, 4, 4)) = (2, 2, 2, 4));\n   pragma Assert (Candidate ((20, 14, 36, 18), (5, 7, 6, 9)) = (4, 2, 6, 2));\nend Main;", "language": "adb"}, {"task_id": "mbpp_264_dog_age", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Dog_Age (H_Age : Integer) return Integer;\n   -- Write a function to calculate a dog's age in dog's years.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Dog_Age (H_Age : Integer) return Integer", "test": "\n   end Dog_Age;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (H_Age : Integer) return Integer renames Placeholder.Dog_Age;\n\nbegin\n   pragma Assert (Candidate (12) = 61);\n   pragma Assert (Candidate (15) = 73);\n   pragma Assert (Candidate (24) = 109);\nend Main;", "language": "adb"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Lateralsurface_Cube (L : Integer) return Integer;\n   -- Write a function to find the lateral surface area of a cube given its side length.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Lateralsurface_Cube (L : Integer) return Integer", "test": "\n   end Lateralsurface_Cube;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer) return Integer renames Placeholder.Lateralsurface_Cube;\n\nbegin\n   pragma Assert (Candidate (5) = 100);\n   pragma Assert (Candidate (9) = 324);\n   pragma Assert (Candidate (10) = 400);\nend Main;", "language": "adb"}, {"task_id": "mbpp_267_square_Sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Square_Sum (N : Integer) return Integer;\n   -- Write an adbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Square_Sum (N : Integer) return Integer", "test": "\n   end Square_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Square_Sum;\n\nbegin\n   pragma Assert (Candidate (2) = 10);\n   pragma Assert (Candidate (3) = 35);\n   pragma Assert (Candidate (4) = 84);\nend Main;", "language": "adb"}, {"task_id": "mbpp_268_find_star_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Star_Num (N : Integer) return Integer;\n   -- Write a function to find the n'th star number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Star_Num (N : Integer) return Integer", "test": "\n   end Find_Star_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Find_Star_Num;\n\nbegin\n   pragma Assert (Candidate (3) = 37);\n   pragma Assert (Candidate (4) = 73);\n   pragma Assert (Candidate (5) = 121);\nend Main;", "language": "adb"}, {"task_id": "mbpp_269_ascii_value", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Ascii_Value (K : String) return Integer;\n   -- Write a function to find the ascii value of a character.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Ascii_Value (K : String) return Integer", "test": "\n   end Ascii_Value;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (K : String) return Integer renames Placeholder.Ascii_Value;\n\nbegin\n   pragma Assert (Candidate (\"A\") = 65);\n   pragma Assert (Candidate (\"R\") = 82);\n   pragma Assert (Candidate (\"S\") = 83);\nend Main;", "language": "adb"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sum_Even_And_Even_Index (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the sum of even numbers at even positions of a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Even_And_Even_Index (Arr : Integer_Array) return Integer", "test": "\n   end Sum_Even_And_Even_Index;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Sum_Even_And_Even_Index;\n\nbegin\n   pragma Assert (Candidate ([5, 6, 12, 1, 18, 8]) = 30);\n   pragma Assert (Candidate ([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) = 26);\n   pragma Assert (Candidate ([5, 6, 12, 1]) = 12);\nend Main;", "language": "adb"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Even_Power_Sum (N : Integer) return Integer;\n   -- Write an adbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Even_Power_Sum (N : Integer) return Integer", "test": "\n   end Even_Power_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Even_Power_Sum;\n\nbegin\n   pragma Assert (Candidate (2) = 1056);\n   pragma Assert (Candidate (3) = 8832);\n   pragma Assert (Candidate (1) = 32);\nend Main;", "language": "adb"}, {"task_id": "mbpp_272_rear_extract", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Integer_Unbounded_String_Integer_Tuple is record\n      Integer_1 : Integer;\n      Unbounded_String_2 : Unbounded_String;\n      Integer_3 : Integer;\n   end record;\n\n   type Integer_Unbounded_String_Integer_Tuple_Array is array (Positive range <>) of Integer_Unbounded_String_Integer_Tuple;\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Rear_Extract (Test_List : Integer_Unbounded_String_Integer_Tuple_Array) return Integer_Array;\n   -- Write a function that takes in a Vector of records and returns a Vector containing the rear element of each record.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Rear_Extract (Test_List : Integer_Unbounded_String_Integer_Tuple_Array) return Integer_Array", "test": "\n   end Rear_Extract;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Unbounded_String_Integer_Tuple_Array) return Integer_Array renames Placeholder.Rear_Extract;\n\nbegin\n   pragma Assert (Candidate ([(1, To_Unbounded_String (\"Rash\"), 21), (2, To_Unbounded_String (\"Varsha\"), 20), (3, To_Unbounded_String (\"Kil\"), 19)]) = [21, 20, 19]);\n   pragma Assert (Candidate ([(1, To_Unbounded_String (\"Sai\"), 36), (2, To_Unbounded_String (\"Ayesha\"), 25), (3, To_Unbounded_String (\"Salman\"), 45)]) = [36, 25, 45]);\n   pragma Assert (Candidate ([(1, To_Unbounded_String (\"Sudeep\"), 14), (2, To_Unbounded_String (\"Vandana\"), 36), (3, To_Unbounded_String (\"Dawood\"), 56)]) = [14, 36, 56]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_273_substract_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   function Substract_Elements (Test_Tup1 : Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Tuple;\n   -- Write a function that takes in two records and subtracts the elements of the first record by the elements of the second record with the same index.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Substract_Elements (Test_Tup1 : Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Tuple", "test": "\n   end Substract_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Tuple renames Placeholder.Substract_Elements;\n\nbegin\n   pragma Assert (Candidate ((10, 4, 5), (2, 5, 18)) = (8, -1, -13));\n   pragma Assert (Candidate ((11, 2, 3), (24, 45, 16)) = (-13, -43, -13));\n   pragma Assert (Candidate ((7, 18, 9), (10, 11, 12)) = (-3, 7, -3));\nend Main;", "language": "adb"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Even_Binomial_Coeff_Sum (N : Integer) return Integer;\n   -- Write an adbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Even_Binomial_Coeff_Sum (N : Integer) return Integer", "test": "\n   end Even_Binomial_Coeff_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Even_Binomial_Coeff_Sum;\n\nbegin\n   pragma Assert (Candidate (4) = 8);\n   pragma Assert (Candidate (6) = 32);\n   pragma Assert (Candidate (2) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_277_dict_filter", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   function Dict_Filter (Dict : String_Integer_Dict.Map; N : Integer) return String_Integer_Dict.Map;\n   -- Write a function that takes in a Map and integer n and filters the Map to only include entries with values greater than or equal to n.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Dict_Filter (Dict : String_Integer_Dict.Map; N : Integer) return String_Integer_Dict.Map", "test": "\n   end Dict_Filter;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Integer_Dict;\n\n   function Candidate (Dict : String_Integer_Dict.Map; N : Integer) return String_Integer_Dict.Map renames Placeholder.Dict_Filter;\n\nbegin\n   pragma Assert (Candidate ([\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190], 170) = [\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190]);\n   pragma Assert (Candidate ([\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190], 180) = [\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190]);\n   pragma Assert (Candidate ([\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190], 190) = [\"Pierre Cox\" => 190]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Num_Decagonal (N : Integer) return Integer;\n   -- Write a function to find the nth decagonal number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Num_Decagonal (N : Integer) return Integer", "test": "\n   end Is_Num_Decagonal;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Is_Num_Decagonal;\n\nbegin\n   pragma Assert (Candidate (3) = 27);\n   pragma Assert (Candidate (7) = 175);\n   pragma Assert (Candidate (10) = 370);\nend Main;", "language": "adb"}, {"task_id": "mbpp_280_sequential_search", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Boolean_Integer_Tuple is record\n      Boolean_1 : Boolean;\n      Integer_2 : Integer;\n   end record;\n\n   function Sequential_Search (Dlist : Integer_Array; Item : Integer) return Boolean_Integer_Tuple;\n   -- Write a function that takes in an array and element and returns a record containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sequential_Search (Dlist : Integer_Array; Item : Integer) return Boolean_Integer_Tuple", "test": "\n   end Sequential_Search;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Dlist : Integer_Array; Item : Integer) return Boolean_Integer_Tuple renames Placeholder.Sequential_Search;\n\nbegin\n   pragma Assert (Candidate ([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) = (True, 3));\n   pragma Assert (Candidate ([12, 32, 45, 62, 35, 47, 44, 61], 61) = (True, 7));\n   pragma Assert (Candidate ([9, 10, 17, 19, 22, 39, 48, 56], 48) = (True, 6));\nend Main;", "language": "adb"}, {"task_id": "mbpp_281_all_unique", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function All_Unique (Test_List : Integer_Array) return Boolean;\n   -- Write an adbthon function to check if the elements of a given Vector are unique or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function All_Unique (Test_List : Integer_Array) return Boolean", "test": "\n   end All_Unique;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Array) return Boolean renames Placeholder.All_Unique;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = True);\n   pragma Assert (Candidate ([1, 2, 1, 2]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_282_sub_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sub_List (Nums1 : Integer_Array; Nums2 : Integer_Array) return Integer_Array;\n   -- Write a function to subtract two Vectors element-wise.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sub_List (Nums1 : Integer_Array; Nums2 : Integer_Array) return Integer_Array", "test": "\n   end Sub_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums1 : Integer_Array; Nums2 : Integer_Array) return Integer_Array renames Placeholder.Sub_List;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3], [4, 5, 6]) = [-3, -3, -3]);\n   pragma Assert (Candidate ([1, 2], [3, 4]) = [-2, -2]);\n   pragma Assert (Candidate ([90, 120], [50, 70]) = [40, 50]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_283_validate", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Validate (N : Integer) return Boolean;\n   -- Write an adbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Validate (N : Integer) return Boolean", "test": "\n   end Validate;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Validate;\n\nbegin\n   pragma Assert (Candidate (1234) = True);\n   pragma Assert (Candidate (51241) = False);\n   pragma Assert (Candidate (321) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Match_Two_Three (Text : String) return Boolean;\n   -- Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Match_Two_Three (Text : String) return Boolean", "test": "\n   end Text_Match_Two_Three;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Match_Two_Three;\n\nbegin\n   pragma Assert (Candidate (\"ac\") = False);\n   pragma Assert (Candidate (\"dc\") = False);\n   pragma Assert (Candidate (\"abbbba\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Sub_Array_Sum_Repeated (A : Integer_Array; N : Integer; K : Integer) return Integer;\n   -- Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Sub_Array_Sum_Repeated (A : Integer_Array; N : Integer; K : Integer) return Integer", "test": "\n   end Max_Sub_Array_Sum_Repeated;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; N : Integer; K : Integer) return Integer renames Placeholder.Max_Sub_Array_Sum_Repeated;\n\nbegin\n   pragma Assert (Candidate ([10, 20, -30, -1], 4, 3) = 30);\n   pragma Assert (Candidate ([-1, 10, 20], 3, 2) = 59);\n   pragma Assert (Candidate ([-1, -2, -3], 3, 3) = -1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_287_square_Sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Square_Sum (N : Integer) return Integer;\n   -- Write an adbthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Square_Sum (N : Integer) return Integer", "test": "\n   end Square_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Square_Sum;\n\nbegin\n   pragma Assert (Candidate (2) = 20);\n   pragma Assert (Candidate (3) = 56);\n   pragma Assert (Candidate (4) = 120);\nend Main;", "language": "adb"}, {"task_id": "mbpp_290_max_length", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Integer_Integer_Vector_Vector_Tuple is record\n      Integer_1 : Integer;\n      Integer_Vector_Vector_2 : Integer_Vector.Vector;\n   end record;\n\n   function Max_Length (List1 : Integer_Vector_Vector_Array) return Integer_Integer_Vector_Vector_Tuple;\n   -- Write a function to find the Vector of maximum length in a Vector of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Max_Length (List1 : Integer_Vector_Vector_Array) return Integer_Integer_Vector_Vector_Tuple", "test": "\n   end Max_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (List1 : Integer_Vector_Vector_Array) return Integer_Integer_Vector_Vector_Tuple renames Placeholder.Max_Length;\n\nbegin\n   pragma Assert (Candidate ([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) = (3, [13, 15, 17]));\n   pragma Assert (Candidate ([[1], [5, 7], [10, 12, 14, 15]]) = (4, [10, 12, 14, 15]));\n   pragma Assert (Candidate ([[5], [15, 20, 25]]) = (3, [15, 20, 25]));\nend Main;", "language": "adb"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_No_Of_Ways (N : Integer; K : Integer) return Integer;\n   -- Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_No_Of_Ways (N : Integer; K : Integer) return Integer", "test": "\n   end Count_No_Of_Ways;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; K : Integer) return Integer renames Placeholder.Count_No_Of_Ways;\n\nbegin\n   pragma Assert (Candidate (2, 4) = 16);\n   pragma Assert (Candidate (3, 2) = 6);\n   pragma Assert (Candidate (4, 4) = 228);\nend Main;", "language": "adb"}, {"task_id": "mbpp_292_find", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find (N : Integer; M : Integer) return Integer;\n   -- Write an adbthon function to find quotient of two numbers (rounded down to the nearest integer).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find (N : Integer; M : Integer) return Integer", "test": "\n   end Find;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; M : Integer) return Integer renames Placeholder.Find;\n\nbegin\n   pragma Assert (Candidate (10, 3) = 3);\n   pragma Assert (Candidate (4, 2) = 2);\n   pragma Assert (Candidate (20, 5) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Otherside_Rightangle (W : Integer; H : Integer) return Float;\n   -- Write a function to find the third side of a right angled triangle.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Otherside_Rightangle (W : Integer; H : Integer) return Float", "test": "\n   end Otherside_Rightangle;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (W : Integer; H : Integer) return Float renames Placeholder.Otherside_Rightangle;\n\nbegin\n   pragma Assert (Candidate (7, 8) = 10.63014581273465);\n   pragma Assert (Candidate (3, 4) = 5);\n   pragma Assert (Candidate (7, 15) = 16.55294535724685);\nend Main;", "language": "adb"}, {"task_id": "mbpp_295_sum_div", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum_Div (Number : Integer) return Integer;\n   -- Write a function to return the sum of all divisors of a number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Div (Number : Integer) return Integer", "test": "\n   end Sum_Div;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Number : Integer) return Integer renames Placeholder.Sum_Div;\n\nbegin\n   pragma Assert (Candidate (8) = 7);\n   pragma Assert (Candidate (12) = 16);\n   pragma Assert (Candidate (7) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Get_Inv_Count (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to count inversions in an array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Inv_Count (Arr : Integer_Array) return Integer", "test": "\n   end Get_Inv_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Get_Inv_Count;\n\nbegin\n   pragma Assert (Candidate ([1, 20, 6, 4, 5]) = 5);\n   pragma Assert (Candidate ([1, 2, 1]) = 1);\n   pragma Assert (Candidate ([1, 2, 5, 6, 1]) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n   end record;\n\n   type Unbounded_String_Integer_Tuple_Array is array (Positive range <>) of Unbounded_String_Integer_Tuple;\n   function Max_Aggregate (Stdata : Unbounded_String_Integer_Tuple_Array) return Unbounded_String_Integer_Tuple;\n   -- Write a function to calculate the maximum aggregate from the Vector of records.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Max_Aggregate (Stdata : Unbounded_String_Integer_Tuple_Array) return Unbounded_String_Integer_Tuple", "test": "\n   end Max_Aggregate;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Stdata : Unbounded_String_Integer_Tuple_Array) return Unbounded_String_Integer_Tuple renames Placeholder.Max_Aggregate;\n\nbegin\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Juan Whelan\"), 90), (To_Unbounded_String (\"Sabah Colley\"), 88), (To_Unbounded_String (\"Peter Nichols\"), 7), (To_Unbounded_String (\"Juan Whelan\"), 122), (To_Unbounded_String (\"Sabah Colley\"), 84)]) = (To_Unbounded_String (\"Juan Whelan\"), 212));\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Juan Whelan\"), 50), (To_Unbounded_String (\"Sabah Colley\"), 48), (To_Unbounded_String (\"Peter Nichols\"), 37), (To_Unbounded_String (\"Juan Whelan\"), 22), (To_Unbounded_String (\"Sabah Colley\"), 14)]) = (To_Unbounded_String (\"Juan Whelan\"), 72));\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Juan Whelan\"), 10), (To_Unbounded_String (\"Sabah Colley\"), 20), (To_Unbounded_String (\"Peter Nichols\"), 30), (To_Unbounded_String (\"Juan Whelan\"), 40), (To_Unbounded_String (\"Sabah Colley\"), 50)]) = (To_Unbounded_String (\"Sabah Colley\"), 70));\nend Main;", "language": "adb"}, {"task_id": "mbpp_304_find_Element", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Find_Element (Arr : Integer_Array; Ranges : Integer_Vector_Vector_Array; Rotations : Integer; Index : Integer) return Integer;\n   -- Write an adbthon function to find element at a given index after number of rotations.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Find_Element (Arr : Integer_Array; Ranges : Integer_Vector_Vector_Array; Rotations : Integer; Index : Integer) return Integer", "test": "\n   end Find_Element;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Arr : Integer_Array; Ranges : Integer_Vector_Vector_Array; Rotations : Integer; Index : Integer) return Integer renames Placeholder.Find_Element;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) = 3);\n   pragma Assert (Candidate ([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) = 3);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_305_start_withp", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   type Unbounded_String_Unbounded_String_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Unbounded_String_2 : Unbounded_String;\n   end record;\n\n   function Start_Withp (Words : Unbounded_String_Array) return Unbounded_String_Unbounded_String_Tuple;\n   -- Write a function to return two words from a Vector of words starting with letter 'p'.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Start_Withp (Words : Unbounded_String_Array) return Unbounded_String_Unbounded_String_Tuple", "test": "\n   end Start_Withp;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Words : Unbounded_String_Array) return Unbounded_String_Unbounded_String_Tuple renames Placeholder.Start_Withp;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"Python PHP\"), To_Unbounded_String (\"Java JavaScript\"), To_Unbounded_String (\"c c++\")]) = (To_Unbounded_String (\"Python\"), To_Unbounded_String (\"PHP\")));\n   pragma Assert (Candidate ([To_Unbounded_String (\"Python Programming\"), To_Unbounded_String (\"Java Programming\")]) = (To_Unbounded_String (\"Python\"), To_Unbounded_String (\"Programming\")));\n   pragma Assert (Candidate ([To_Unbounded_String (\"Pqrst Pqr\"), To_Unbounded_String (\"qrstuv\")]) = (To_Unbounded_String (\"Pqrst\"), To_Unbounded_String (\"Pqr\")));\nend Main;", "language": "adb"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Sum_Increasing_Subseq (A : Integer_Array; N : Integer; Index : Integer; K : Integer) return Integer;\n   -- Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Sum_Increasing_Subseq (A : Integer_Array; N : Integer; Index : Integer; K : Integer) return Integer", "test": "\n   end Max_Sum_Increasing_Subseq;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; N : Integer; Index : Integer; K : Integer) return Integer renames Placeholder.Max_Sum_Increasing_Subseq;\n\nbegin\n   pragma Assert (Candidate ([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) = 11);\n   pragma Assert (Candidate ([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) = 7);\n   pragma Assert (Candidate ([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) = 71);\nend Main;", "language": "adb"}, {"task_id": "mbpp_308_large_product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Large_Product (Nums1 : Integer_Array; Nums2 : Integer_Array; N : Integer) return Integer_Array;\n   -- Write a function to find the specified number of largest products from two given Vectors, selecting one factor from each Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Large_Product (Nums1 : Integer_Array; Nums2 : Integer_Array; N : Integer) return Integer_Array", "test": "\n   end Large_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums1 : Integer_Array; Nums2 : Integer_Array; N : Integer) return Integer_Array renames Placeholder.Large_Product;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) = [60, 54, 50]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) = [60, 54, 50, 48]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) = [60, 54, 50, 48, 45]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_309_maximum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Maximum (A : Integer; B : Integer) return Integer;\n   -- Write an adbthon function to find the maximum of two numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Maximum (A : Integer; B : Integer) return Integer", "test": "\n   end Maximum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Maximum;\n\nbegin\n   pragma Assert (Candidate (5, 10) = 10);\n   pragma Assert (Candidate (-1, -2) = -1);\n   pragma Assert (Candidate (9, 7) = 9);\nend Main;", "language": "adb"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function String_To_Tuple (Str1 : String) return Unbounded_String_Array;\n   -- Write a function to convert a given string to a Vector of characters.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function String_To_Tuple (Str1 : String) return Unbounded_String_Array", "test": "\n   end String_To_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return Unbounded_String_Array renames Placeholder.String_To_Tuple;\n\nbegin\n   pragma Assert (Candidate (\"python 3.0\") = [To_Unbounded_String (\"p\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"t\"), To_Unbounded_String (\"h\"), To_Unbounded_String (\"o\"), To_Unbounded_String (\"n\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\".\"), To_Unbounded_String (\"0\")]);\n   pragma Assert (Candidate (\"item1\") = [To_Unbounded_String (\"i\"), To_Unbounded_String (\"t\"), To_Unbounded_String (\"e\"), To_Unbounded_String (\"m\"), To_Unbounded_String (\"1\")]);\n   pragma Assert (Candidate (\"15.10\") = [To_Unbounded_String (\"1\"), To_Unbounded_String (\"5\"), To_Unbounded_String (\".\"), To_Unbounded_String (\"1\"), To_Unbounded_String (\"0\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Highest_Power_Of_2 (N : Integer) return Integer;\n   -- Write an adbthon function to find the highest power of 2 that is less than or equal to n.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Highest_Power_Of_2 (N : Integer) return Integer", "test": "\n   end Highest_Power_Of_2;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Highest_Power_Of_2;\n\nbegin\n   pragma Assert (Candidate (10) = 8);\n   pragma Assert (Candidate (19) = 16);\n   pragma Assert (Candidate (32) = 32);\nend Main;", "language": "adb"}, {"task_id": "mbpp_389_find_lucas", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Lucas (N : Integer) return Integer;\n   -- Write a function to find the n'th lucas number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Lucas (N : Integer) return Integer", "test": "\n   end Find_Lucas;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Find_Lucas;\n\nbegin\n   pragma Assert (Candidate (9) = 76);\n   pragma Assert (Candidate (4) = 7);\n   pragma Assert (Candidate (3) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_391_convert_list_dictionary", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   type Integer_Array is array (Positive range <>) of Integer;\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   package String_String_Integer_Dict_Map_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => String_Integer_Dict.Map);\n   use String_String_Integer_Dict_Map_Dict;\n   type String_String_Integer_Dict_Map_Dict_Map_Array is array (Positive range <>) of String_String_Integer_Dict_Map_Dict.Map;\n   function Convert_List_Dictionary (L1 : Unbounded_String_Array; L2 : Unbounded_String_Array; L3 : Integer_Array) return String_String_Integer_Dict_Map_Dict_Map_Array;\n   -- Write a function to convert more than one Vector to nested Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Convert_List_Dictionary (L1 : Unbounded_String_Array; L2 : Unbounded_String_Array; L3 : Integer_Array) return String_String_Integer_Dict_Map_Dict_Map_Array", "test": "\n   end Convert_List_Dictionary;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_String_Integer_Dict_Map_Dict;\n   use String_Integer_Dict;\n\n   function Candidate (L1 : Unbounded_String_Array; L2 : Unbounded_String_Array; L3 : Integer_Array) return String_String_Integer_Dict_Map_Dict_Map_Array renames Placeholder.Convert_List_Dictionary;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"S001\"), To_Unbounded_String (\"S002\"), To_Unbounded_String (\"S003\"), To_Unbounded_String (\"S004\")], [To_Unbounded_String (\"Adina Park\"), To_Unbounded_String (\"Leyton Marsh\"), To_Unbounded_String (\"Duncan Boyle\"), To_Unbounded_String (\"Saim Richards\")], [85, 98, 89, 92]) = [[\"S001\" => [\"Adina Park\" => 85]], [\"S002\" => [\"Leyton Marsh\" => 98]], [\"S003\" => [\"Duncan Boyle\" => 89]], [\"S004\" => [\"Saim Richards\" => 92]]]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"abc\"), To_Unbounded_String (\"def\"), To_Unbounded_String (\"ghi\"), To_Unbounded_String (\"jkl\")], [To_Unbounded_String (\"python\"), To_Unbounded_String (\"program\"), To_Unbounded_String (\"language\"), To_Unbounded_String (\"programs\")], [100, 200, 300, 400]) = [[\"abc\" => [\"python\" => 100]], [\"def\" => [\"program\" => 200]], [\"ghi\" => [\"language\" => 300]], [\"jkl\" => [\"programs\" => 400]]]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"A1\"), To_Unbounded_String (\"A2\"), To_Unbounded_String (\"A3\"), To_Unbounded_String (\"A4\")], [To_Unbounded_String (\"java\"), To_Unbounded_String (\"C\"), To_Unbounded_String (\"C++\"), To_Unbounded_String (\"DBMS\")], [10, 20, 30, 40]) = [[\"A1\" => [\"java\" => 10]], [\"A2\" => [\"C\" => 20]], [\"A3\" => [\"C++\" => 30]], [\"A4\" => [\"DBMS\" => 40]]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Get_Max_Sum (N : Integer) return Integer;\n   -- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Max_Sum (N : Integer) return Integer", "test": "\n   end Get_Max_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Get_Max_Sum;\n\nbegin\n   pragma Assert (Candidate (60) = 106);\n   pragma Assert (Candidate (10) = 12);\n   pragma Assert (Candidate (2) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_393_max_length_list", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Integer_Integer_Vector_Vector_Tuple is record\n      Integer_1 : Integer;\n      Integer_Vector_Vector_2 : Integer_Vector.Vector;\n   end record;\n\n   function Max_Length_List (Input_List : Integer_Vector_Vector_Array) return Integer_Integer_Vector_Vector_Tuple;\n   -- Write a function to find the Vector with maximum length.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Max_Length_List (Input_List : Integer_Vector_Vector_Array) return Integer_Integer_Vector_Vector_Tuple", "test": "\n   end Max_Length_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Input_List : Integer_Vector_Vector_Array) return Integer_Integer_Vector_Vector_Tuple renames Placeholder.Max_Length_List;\n\nbegin\n   pragma Assert (Candidate ([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) = (3, [13, 15, 17]));\n   pragma Assert (Candidate ([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) = (5, [1, 2, 3, 4, 5]));\n   pragma Assert (Candidate ([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) = (4, [6, 7, 8, 9]));\nend Main;", "language": "adb"}, {"task_id": "mbpp_394_check_distinct", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Check_Distinct (Test_Tup : Integer_Array) return Boolean;\n   -- Write a function to check if given Vector contains no duplicates.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Distinct (Test_Tup : Integer_Array) return Boolean", "test": "\n   end Check_Distinct;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup : Integer_Array) return Boolean renames Placeholder.Check_Distinct;\n\nbegin\n   pragma Assert (Candidate ([1, 4, 5, 6, 1, 4]) = False);\n   pragma Assert (Candidate ([1, 4, 5, 6]) = True);\n   pragma Assert (Candidate ([2, 3, 4, 5, 6]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   function First_Non_Repeating_Character (Str1 : String) return Unbounded_String_Option;\n   -- Write an adbthon function to find the first non-repeated character in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function First_Non_Repeating_Character (Str1 : String) return Unbounded_String_Option", "test": "\n   end First_Non_Repeating_Character;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return Unbounded_String_Option renames Placeholder.First_Non_Repeating_Character;\n\nbegin\n   pragma Assert (Candidate (\"abcabc\") = (Valid => False));\n   pragma Assert (Candidate (\"abc\") = (Valid => True, Value => To_Unbounded_String (\"a\")));\n   pragma Assert (Candidate (\"ababc\") = (Valid => True, Value => To_Unbounded_String (\"c\")));\nend Main;", "language": "adb"}, {"task_id": "mbpp_396_check_char", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_Char (My_String : String) return String;\n   -- Write a function to check whether the given string starts and ends with the same character or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Char (My_String : String) return String", "test": "\n   end Check_Char;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Check_Char;\n\nbegin\n   pragma Assert (Candidate (\"abba\") = \"Valid\");\n   pragma Assert (Candidate (\"a\") = \"Valid\");\n   pragma Assert (Candidate (\"abcd\") = \"Invalid\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_397_median_numbers", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Median_Numbers (A : Integer; B : Integer; C : Integer) return Float;\n   -- Write a function to find the median of three numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Median_Numbers (A : Integer; B : Integer; C : Integer) return Float", "test": "\n   end Median_Numbers;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer; C : Integer) return Float renames Placeholder.Median_Numbers;\n\nbegin\n   pragma Assert (Candidate (25, 55, 65) = 55.0);\n   pragma Assert (Candidate (20, 10, 30) = 20.0);\n   pragma Assert (Candidate (15, 45, 75) = 45.0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n   end record;\n\n   function Bitwise_Xor (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function to perform the mathematical bitwise xor operation across the given records.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Bitwise_Xor (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple", "test": "\n   end Bitwise_Xor;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple renames Placeholder.Bitwise_Xor;\n\nbegin\n   pragma Assert (Candidate ((10, 4, 6, 9), (5, 2, 3, 3)) = (15, 6, 5, 10));\n   pragma Assert (Candidate ((11, 5, 7, 10), (6, 3, 4, 4)) = (13, 6, 3, 14));\n   pragma Assert (Candidate ((12, 6, 8, 11), (7, 4, 5, 6)) = (11, 2, 13, 13));\nend Main;", "language": "adb"}, {"task_id": "mbpp_400_extract_freq", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Extract_Freq (Test_List : Integer_Integer_Tuple_Array) return Integer;\n   -- Write a function to extract the number of unique records in the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Extract_Freq (Test_List : Integer_Integer_Tuple_Array) return Integer", "test": "\n   end Extract_Freq;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Integer_Tuple_Array) return Integer renames Placeholder.Extract_Freq;\n\nbegin\n   pragma Assert (Candidate ([(3, 4), (1, 2), (4, 3), (5, 6)]) = 3);\n   pragma Assert (Candidate ([(4, 15), (2, 3), (5, 4), (6, 7)]) = 4);\n   pragma Assert (Candidate ([(5, 16), (2, 3), (6, 5), (6, 9)]) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Add_Nested_Tuples (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array;\n   -- Write a function to perform index wise addition of Vector elements in the given two nested Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Add_Nested_Tuples (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array", "test": "\n   end Add_Nested_Tuples;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array renames Placeholder.Add_Nested_Tuples;\n\nbegin\n   pragma Assert (Candidate ([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) = [[7, 10], [7, 14], [3, 10], [8, 13]]);\n   pragma Assert (Candidate ([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) = [[9, 12], [9, 16], [5, 12], [10, 15]]);\n   pragma Assert (Candidate ([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) = [[11, 14], [11, 18], [7, 14], [12, 17]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_404_minimum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Minimum (A : Integer; B : Integer) return Integer;\n   -- Write an adbthon function to find the minimum of two numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Minimum (A : Integer; B : Integer) return Integer", "test": "\n   end Minimum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Minimum;\n\nbegin\n   pragma Assert (Candidate (1, 2) = 1);\n   pragma Assert (Candidate (-5, -4) = -5);\n   pragma Assert (Candidate (0, 0) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_406_find_Parity", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Parity (X : Integer) return Boolean;\n   -- Write an adbthon function to find whether the parity of a given number is odd.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Parity (X : Integer) return Boolean", "test": "\n   end Find_Parity;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer) return Boolean renames Placeholder.Find_Parity;\n\nbegin\n   pragma Assert (Candidate (12) = False);\n   pragma Assert (Candidate (7) = True);\n   pragma Assert (Candidate (10) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function K_Smallest_Pairs (Nums1 : Integer_Array; Nums2 : Integer_Array; K : Integer) return Integer_Vector_Vector_Array;\n   -- Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function K_Smallest_Pairs (Nums1 : Integer_Array; Nums2 : Integer_Array; K : Integer) return Integer_Vector_Vector_Array", "test": "\n   end K_Smallest_Pairs;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Nums1 : Integer_Array; Nums2 : Integer_Array; K : Integer) return Integer_Vector_Vector_Array renames Placeholder.K_Smallest_Pairs;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 7], [2, 4, 6], 2) = [[1, 2], [1, 4]]);\n   pragma Assert (Candidate ([1, 3, 7], [2, 4, 6], 1) = [[1, 2]]);\n   pragma Assert (Candidate ([1, 3, 7], [2, 4, 6], 7) = [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Min_Product_Tuple (List1 : Integer_Integer_Tuple_Array) return Integer;\n   -- Write a function to find the minimum product from the pairs of records within a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Min_Product_Tuple (List1 : Integer_Integer_Tuple_Array) return Integer", "test": "\n   end Min_Product_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Integer_Tuple_Array) return Integer renames Placeholder.Min_Product_Tuple;\n\nbegin\n   pragma Assert (Candidate ([(2, 7), (2, 6), (1, 8), (4, 9)]) = 8);\n   pragma Assert (Candidate ([(10, 20), (15, 2), (5, 10)]) = 30);\n   pragma Assert (Candidate ([(11, 44), (10, 15), (20, 5), (12, 9)]) = 100);\nend Main;", "language": "adb"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Snake_To_Camel (Word : String) return String;\n   -- Write a function to convert the given snake case string to camel case string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Snake_To_Camel (Word : String) return String", "test": "\n   end Snake_To_Camel;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Word : String) return String renames Placeholder.Snake_To_Camel;\n\nbegin\n   pragma Assert (Candidate (\"android_tv\") = \"AndroidTv\");\n   pragma Assert (Candidate (\"google_pixel\") = \"GooglePixel\");\n   pragma Assert (Candidate (\"apple_watch\") = \"AppleWatch\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_412_remove_odd", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Remove_Odd (L : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to remove odd numbers from a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Odd (L : Integer_Array) return Integer_Array", "test": "\n   end Remove_Odd;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Remove_Odd;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = [2]);\n   pragma Assert (Candidate ([2, 4, 6]) = [2, 4, 6]);\n   pragma Assert (Candidate ([10, 20, 3]) = [10, 20]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_414_overlapping", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Overlapping (List1 : Integer_Array; List2 : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether any value in a sequence exists in a sequence or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Overlapping (List1 : Integer_Array; List2 : Integer_Array) return Boolean", "test": "\n   end Overlapping;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array; List2 : Integer_Array) return Boolean renames Placeholder.Overlapping;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5], [6, 7, 8, 9]) = False);\n   pragma Assert (Candidate ([1, 2, 3], [4, 5, 6]) = False);\n   pragma Assert (Candidate ([1, 4, 5], [1, 4, 5]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_415_max_Product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Max_Product (Arr : Integer_Array) return Integer_Integer_Tuple;\n   -- Write an adbthon function to find a pair with highest product from a given array of integers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Product (Arr : Integer_Array) return Integer_Integer_Tuple", "test": "\n   end Max_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer_Integer_Tuple renames Placeholder.Max_Product;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 7, 0, 8, 4]) = (7, 8));\n   pragma Assert (Candidate ([0, -1, -2, -4, 5, 0, -6]) = (-4, -6));\n   pragma Assert (Candidate ([1, 2, 3]) = (2, 3));\nend Main;", "language": "adb"}, {"task_id": "mbpp_417_group_tuples", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   package Unbounded_String_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Unbounded_String);\n   use Unbounded_String_Vector;\n   type Unbounded_String_Vector_Vector_Array is array (Positive range <>) of Unbounded_String_Vector.Vector;\n   function Group_Tuples (Input : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array;\n   -- Write a function to find common first element in given Vector of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Group_Tuples (Input : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array", "test": "\n   end Group_Tuples;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Unbounded_String_Vector;\n\n   function Candidate (Input : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array renames Placeholder.Group_Tuples;\n\nbegin\n   pragma Assert (Candidate ([[To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\")], [To_Unbounded_String (\"x\"), To_Unbounded_String (\"z\")], [To_Unbounded_String (\"w\"), To_Unbounded_String (\"t\")]]) = [[To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\")], [To_Unbounded_String (\"w\"), To_Unbounded_String (\"t\")]]);\n   pragma Assert (Candidate ([[To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\")], [To_Unbounded_String (\"a\"), To_Unbounded_String (\"c\")], [To_Unbounded_String (\"d\"), To_Unbounded_String (\"e\")]]) = [[To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\")], [To_Unbounded_String (\"d\"), To_Unbounded_String (\"e\")]]);\n   pragma Assert (Candidate ([[To_Unbounded_String (\"f\"), To_Unbounded_String (\"g\")], [To_Unbounded_String (\"f\"), To_Unbounded_String (\"g\")], [To_Unbounded_String (\"h\"), To_Unbounded_String (\"i\")]]) = [[To_Unbounded_String (\"f\"), To_Unbounded_String (\"g\"), To_Unbounded_String (\"g\")], [To_Unbounded_String (\"h\"), To_Unbounded_String (\"i\")]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Cube_Sum (N : Integer) return Integer;\n   -- Write an adbthon function to find the cube sum of first n even natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Cube_Sum (N : Integer) return Integer", "test": "\n   end Cube_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Cube_Sum;\n\nbegin\n   pragma Assert (Candidate (2) = 72);\n   pragma Assert (Candidate (3) = 288);\n   pragma Assert (Candidate (4) = 800);\nend Main;", "language": "adb"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Unbounded_String_Integer_Unbounded_String_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Unbounded_String_2 : Unbounded_String;\n      Integer_3 : Integer;\n      Unbounded_String_4 : Unbounded_String;\n   end record;\n\n   function Concatenate_Tuple (Test_Tup : Unbounded_String_Unbounded_String_Integer_Unbounded_String_Tuple) return String;\n   -- Write a function to concatenate each element of record by the delimiter.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Concatenate_Tuple (Test_Tup : Unbounded_String_Unbounded_String_Integer_Unbounded_String_Tuple) return String", "test": "\n   end Concatenate_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup : Unbounded_String_Unbounded_String_Integer_Unbounded_String_Tuple) return String renames Placeholder.Concatenate_Tuple;\n\nbegin\n   pragma Assert (Candidate ((To_Unbounded_String (\"ID\"), To_Unbounded_String (\"is\"), 4, To_Unbounded_String (\"UTS\"))) = \"ID-is-4-UTS\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"QWE\"), To_Unbounded_String (\"is\"), 4, To_Unbounded_String (\"RTY\"))) = \"QWE-is-4-RTY\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"ZEN\"), To_Unbounded_String (\"is\"), 4, To_Unbounded_String (\"OP\"))) = \"ZEN-is-4-OP\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Average_Of_Cube (N : Integer) return Float;\n   -- Write an adbthon function to find the average of cubes of first n natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Average_Of_Cube (N : Integer) return Float", "test": "\n   end Find_Average_Of_Cube;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Float renames Placeholder.Find_Average_Of_Cube;\n\nbegin\n   pragma Assert (Candidate (2) = 4.5);\n   pragma Assert (Candidate (3) = 12);\n   pragma Assert (Candidate (1) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_424_extract_rear", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Unbounded_String_Unbounded_String_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Unbounded_String_2 : Unbounded_String;\n      Unbounded_String_3 : Unbounded_String;\n   end record;\n\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Extract_Rear (Test_Tuple : Unbounded_String_Unbounded_String_Unbounded_String_Tuple) return Unbounded_String_Array;\n   -- Write a function to extract only the rear index element of each string in the given record.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Extract_Rear (Test_Tuple : Unbounded_String_Unbounded_String_Unbounded_String_Tuple) return Unbounded_String_Array", "test": "\n   end Extract_Rear;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tuple : Unbounded_String_Unbounded_String_Unbounded_String_Tuple) return Unbounded_String_Array renames Placeholder.Extract_Rear;\n\nbegin\n   pragma Assert (Candidate ((To_Unbounded_String (\"Mers\"), To_Unbounded_String (\"for\"), To_Unbounded_String (\"Vers\"))) = [To_Unbounded_String (\"s\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"s\")]);\n   pragma Assert (Candidate ((To_Unbounded_String (\"Avenge\"), To_Unbounded_String (\"for\"), To_Unbounded_String (\"People\"))) = [To_Unbounded_String (\"e\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"e\")]);\n   pragma Assert (Candidate ((To_Unbounded_String (\"Gotta\"), To_Unbounded_String (\"get\"), To_Unbounded_String (\"go\"))) = [To_Unbounded_String (\"a\"), To_Unbounded_String (\"t\"), To_Unbounded_String (\"o\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Filter_Oddnumbers (Nums : Integer_Array) return Integer_Array;\n   -- Write a function to filter odd numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Filter_Oddnumbers (Nums : Integer_Array) return Integer_Array", "test": "\n   end Filter_Oddnumbers;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Filter_Oddnumbers;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = [1, 3, 5, 7, 9]);\n   pragma Assert (Candidate ([10, 20, 45, 67, 84, 93]) = [45, 67, 93]);\n   pragma Assert (Candidate ([5, 7, 9, 8, 6, 4, 3]) = [5, 7, 9, 3]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_427_change_date_format", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Change_Date_Format (Dt : String) return String;\n   -- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Change_Date_Format (Dt : String) return String", "test": "\n   end Change_Date_Format;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Dt : String) return String renames Placeholder.Change_Date_Format;\n\nbegin\n   pragma Assert (Candidate (\"2026-01-02\") = \"02-01-2026\");\n   pragma Assert (Candidate (\"2020-11-13\") = \"13-11-2020\");\n   pragma Assert (Candidate (\"2021-04-26\") = \"26-04-2021\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_428_shell_sort", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Shell_Sort (My_List : Integer_Array) return Integer_Array;\n   -- Write a function to sort the given array by using shell sort.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Shell_Sort (My_List : Integer_Array) return Integer_Array", "test": "\n   end Shell_Sort;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_List : Integer_Array) return Integer_Array renames Placeholder.Shell_Sort;\n\nbegin\n   pragma Assert (Candidate ([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) = [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);\n   pragma Assert (Candidate ([24, 22, 39, 34, 87, 73, 68]) = [22, 24, 34, 39, 68, 73, 87]);\n   pragma Assert (Candidate ([32, 30, 16, 96, 82, 83, 74]) = [16, 30, 32, 74, 82, 83, 96]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_429_and_tuples", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n   end record;\n\n   function And_Tuples (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function to extract the elementwise and records from the given two records.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function And_Tuples (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple", "test": "\n   end And_Tuples;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple renames Placeholder.And_Tuples;\n\nbegin\n   pragma Assert (Candidate ((10, 4, 6, 9), (5, 2, 3, 3)) = (0, 0, 2, 1));\n   pragma Assert (Candidate ((1, 2, 3, 4), (5, 6, 7, 8)) = (1, 2, 3, 0));\n   pragma Assert (Candidate ((8, 9, 11, 12), (7, 13, 14, 17)) = (0, 9, 10, 0));\nend Main;", "language": "adb"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Parabola_Directrix (A : Integer; B : Integer; C : Integer) return Integer;\n   -- Write a function to find the directrix of a parabola.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Parabola_Directrix (A : Integer; B : Integer; C : Integer) return Integer", "test": "\n   end Parabola_Directrix;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer; C : Integer) return Integer renames Placeholder.Parabola_Directrix;\n\nbegin\n   pragma Assert (Candidate (5, 3, 2) = -198);\n   pragma Assert (Candidate (9, 8, 4) = -2336);\n   pragma Assert (Candidate (2, 4, 6) = -130);\nend Main;", "language": "adb"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Median_Trapezium (Base1 : Integer; Base2 : Integer; Height : Integer) return Float;\n   -- Write a function to find the median length of a trapezium.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Median_Trapezium (Base1 : Integer; Base2 : Integer; Height : Integer) return Float", "test": "\n   end Median_Trapezium;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Base1 : Integer; Base2 : Integer; Height : Integer) return Float renames Placeholder.Median_Trapezium;\n\nbegin\n   pragma Assert (Candidate (15, 25, 35) = 20);\n   pragma Assert (Candidate (10, 20, 30) = 15);\n   pragma Assert (Candidate (6, 9, 4) = 7.5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_433_check_greater", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Check_Greater (Arr : Integer_Array; Number : Integer) return Boolean;\n   -- Write a function to check whether the entered number is greater than the elements of the given array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Greater (Arr : Integer_Array; Number : Integer) return Boolean", "test": "\n   end Check_Greater;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; Number : Integer) return Boolean renames Placeholder.Check_Greater;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5], 4) = False);\n   pragma Assert (Candidate ([2, 3, 4, 5, 6], 8) = True);\n   pragma Assert (Candidate ([9, 7, 4, 8, 6, 1], 11) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_434_text_match_one", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Match_One (Text : String) return Boolean;\n   -- Write a function that matches a string that has an a followed by one or more b's.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Match_One (Text : String) return Boolean", "test": "\n   end Text_Match_One;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Match_One;\n\nbegin\n   pragma Assert (Candidate (\"ac\") = False);\n   pragma Assert (Candidate (\"dc\") = False);\n   pragma Assert (Candidate (\"abba\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_435_last_Digit", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Last_Digit (N : Integer) return Integer;\n   -- Write an adbthon function to find the last digit of a given number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Last_Digit (N : Integer) return Integer", "test": "\n   end Last_Digit;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Last_Digit;\n\nbegin\n   pragma Assert (Candidate (123) = 3);\n   pragma Assert (Candidate (25) = 5);\n   pragma Assert (Candidate (30) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_436_neg_nos", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Neg_Nos (List1 : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to return the negative numbers in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Neg_Nos (List1 : Integer_Array) return Integer_Array", "test": "\n   end Neg_Nos;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array) return Integer_Array renames Placeholder.Neg_Nos;\n\nbegin\n   pragma Assert (Candidate ([-1, 4, 5, -6]) = [-1, -6]);\n   pragma Assert (Candidate ([-1, -2, 3, 4]) = [-1, -2]);\n   pragma Assert (Candidate ([-7, -6, 8, 9]) = [-7, -6]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_437_remove_odd", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Odd (Str1 : String) return String;\n   -- Write a function to remove odd characters in a string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Odd (Str1 : String) return String", "test": "\n   end Remove_Odd;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return String renames Placeholder.Remove_Odd;\n\nbegin\n   pragma Assert (Candidate (\"python\") = \"yhn\");\n   pragma Assert (Candidate (\"program\") = \"rga\");\n   pragma Assert (Candidate (\"language\") = \"agae\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Count_Bidirectional (Test_List : Integer_Integer_Tuple_Array) return Integer;\n   -- Write a function to count bidirectional record pairs.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Bidirectional (Test_List : Integer_Integer_Tuple_Array) return Integer", "test": "\n   end Count_Bidirectional;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Integer_Tuple_Array) return Integer renames Placeholder.Count_Bidirectional;\n\nbegin\n   pragma Assert (Candidate ([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) = 3);\n   pragma Assert (Candidate ([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) = 2);\n   pragma Assert (Candidate ([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Multiple_To_Single (L : Integer_Array) return Integer;\n   -- Write a function to join a Vector of multiple integers into a single integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Multiple_To_Single (L : Integer_Array) return Integer", "test": "\n   end Multiple_To_Single;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Integer renames Placeholder.Multiple_To_Single;\n\nbegin\n   pragma Assert (Candidate ([11, 33, 50]) = 113350);\n   pragma Assert (Candidate ([-1, 2, 3, 4, 5, 6]) = -123456);\n   pragma Assert (Candidate ([10, 15, 20, 25]) = 10152025);\nend Main;", "language": "adb"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Integer_Integer_Unbounded_String_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Unbounded_String_3 : Unbounded_String;\n   end record;\n\n   function Find_Adverb_Position (Text : String) return Integer_Integer_Unbounded_String_Tuple;\n   -- Write a function to find the first adverb and their positions in a given sentence.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Find_Adverb_Position (Text : String) return Integer_Integer_Unbounded_String_Tuple", "test": "\n   end Find_Adverb_Position;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Integer_Integer_Unbounded_String_Tuple renames Placeholder.Find_Adverb_Position;\n\nbegin\n   pragma Assert (Candidate (\"clearly!! we can see the sky\") = (0, 7, To_Unbounded_String (\"clearly\")));\n   pragma Assert (Candidate (\"seriously!! there are many roses\") = (0, 9, To_Unbounded_String (\"seriously\")));\n   pragma Assert (Candidate (\"unfortunately!! sita is going to home\") = (0, 13, To_Unbounded_String (\"unfortunately\")));\nend Main;", "language": "adb"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Surfacearea_Cube (L : Integer) return Integer;\n   -- Write a function to find the surface area of a cube of a given size.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Surfacearea_Cube (L : Integer) return Integer", "test": "\n   end Surfacearea_Cube;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer) return Integer renames Placeholder.Surfacearea_Cube;\n\nbegin\n   pragma Assert (Candidate (5) = 150);\n   pragma Assert (Candidate (3) = 54);\n   pragma Assert (Candidate (10) = 600);\nend Main;", "language": "adb"}, {"task_id": "mbpp_442_positive_count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Positive_Count (Nums : Integer_Array) return Float;\n   -- Write a function to find the ration of positive numbers in an array of integers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Positive_Count (Nums : Integer_Array) return Float", "test": "\n   end Positive_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Float renames Placeholder.Positive_Count;\n\nbegin\n   pragma Assert (Candidate ([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) = 0.54);\n   pragma Assert (Candidate ([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) = 0.69);\n   pragma Assert (Candidate ([2, 4, -6, -9, 11, -12, 14, -5, 17]) = 0.56);\nend Main;", "language": "adb"}, {"task_id": "mbpp_443_largest_neg", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Largest_Neg (List1 : Integer_Array) return Integer;\n   -- Write an adbthon function to find the largest negative number from the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Largest_Neg (List1 : Integer_Array) return Integer", "test": "\n   end Largest_Neg;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array) return Integer renames Placeholder.Largest_Neg;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, -4, -6]) = -6);\n   pragma Assert (Candidate ([1, 2, 3, -8, -9]) = -9);\n   pragma Assert (Candidate ([1, 2, 3, 4, -1]) = -1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Trim_Tuple (Test_List : Integer_Vector_Vector_Array; K : Integer) return Integer_Vector_Vector_Array;\n   -- Write a function to trim each Vector by k in the given Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Trim_Tuple (Test_List : Integer_Vector_Vector_Array; K : Integer) return Integer_Vector_Vector_Array", "test": "\n   end Trim_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_List : Integer_Vector_Vector_Array; K : Integer) return Integer_Vector_Vector_Array renames Placeholder.Trim_Tuple;\n\nbegin\n   pragma Assert (Candidate ([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) = [[2], [9], [2], [2]]);\n   pragma Assert (Candidate ([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) = [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]);\n   pragma Assert (Candidate ([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) = [[8, 4], [8, 12], [1, 7], [6, 9]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Index_Multiplication (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array;\n   -- Write a function to perform index wise multiplication of Vector elements in the given two Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Index_Multiplication (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array", "test": "\n   end Index_Multiplication;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_Tup1 : Integer_Vector_Vector_Array; Test_Tup2 : Integer_Vector_Vector_Array) return Integer_Vector_Vector_Array renames Placeholder.Index_Multiplication;\n\nbegin\n   pragma Assert (Candidate ([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) = [[6, 21], [12, 45], [2, 9], [7, 30]]);\n   pragma Assert (Candidate ([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) = [[14, 32], [20, 60], [6, 20], [16, 44]]);\n   pragma Assert (Candidate ([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) = [[24, 45], [30, 77], [12, 33], [27, 60]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_447_cube_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Cube_Nums (Nums : Integer_Array) return Integer_Array;\n   -- Write a function to find cubes of individual elements in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Cube_Nums (Nums : Integer_Array) return Integer_Array", "test": "\n   end Cube_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Cube_Nums;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n   pragma Assert (Candidate ([10, 20, 30]) = [1000, 8000, 27000]);\n   pragma Assert (Candidate ([12, 15]) = [1728, 3375]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_448_cal_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Cal_Sum (N : Integer) return Integer;\n   -- Write a function to calculate the sum of perrin numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Cal_Sum (N : Integer) return Integer", "test": "\n   end Cal_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Cal_Sum;\n\nbegin\n   pragma Assert (Candidate (9) = 49);\n   pragma Assert (Candidate (10) = 66);\n   pragma Assert (Candidate (11) = 88);\nend Main;", "language": "adb"}, {"task_id": "mbpp_450_extract_string", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Extract_String (Str : Unbounded_String_Array; L : Integer) return Unbounded_String_Array;\n   -- Write a function to extract specified size of strings from a given Vector of string values.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Extract_String (Str : Unbounded_String_Array; L : Integer) return Unbounded_String_Array", "test": "\n   end Extract_String;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : Unbounded_String_Array; L : Integer) return Unbounded_String_Array renames Placeholder.Extract_String;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"Python\"), To_Unbounded_String (\"list\"), To_Unbounded_String (\"exercises\"), To_Unbounded_String (\"practice\"), To_Unbounded_String (\"solution\")], 8) = [To_Unbounded_String (\"practice\"), To_Unbounded_String (\"solution\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"Python\"), To_Unbounded_String (\"list\"), To_Unbounded_String (\"exercises\"), To_Unbounded_String (\"practice\"), To_Unbounded_String (\"solution\")], 6) = [To_Unbounded_String (\"Python\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"Python\"), To_Unbounded_String (\"list\"), To_Unbounded_String (\"exercises\"), To_Unbounded_String (\"practice\"), To_Unbounded_String (\"solution\")], 9) = [To_Unbounded_String (\"exercises\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Whitespaces (Text1 : String) return String;\n   -- Write a function to remove all whitespaces from the given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Whitespaces (Text1 : String) return String", "test": "\n   end Remove_Whitespaces;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text1 : String) return String renames Placeholder.Remove_Whitespaces;\n\nbegin\n   pragma Assert (Candidate (\" Google    Flutter \") = \"GoogleFlutter\");\n   pragma Assert (Candidate (\" Google    Dart \") = \"GoogleDart\");\n   pragma Assert (Candidate (\" iOS    Swift \") = \"iOSSwift\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_452_loss_amount", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Loss_Amount (Actual_Cost : Integer; Sale_Amount : Integer) return Integer;\n   -- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Loss_Amount (Actual_Cost : Integer; Sale_Amount : Integer) return Integer", "test": "\n   end Loss_Amount;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Actual_Cost : Integer; Sale_Amount : Integer) return Integer renames Placeholder.Loss_Amount;\n\nbegin\n   pragma Assert (Candidate (1500, 1200) = 0);\n   pragma Assert (Candidate (100, 200) = 100);\n   pragma Assert (Candidate (2000, 5000) = 3000);\nend Main;", "language": "adb"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sumof_Factors (N : Integer) return Integer;\n   -- Write an adbthon function to find the sum of even factors of a number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sumof_Factors (N : Integer) return Integer", "test": "\n   end Sumof_Factors;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Sumof_Factors;\n\nbegin\n   pragma Assert (Candidate (18) = 26);\n   pragma Assert (Candidate (30) = 48);\n   pragma Assert (Candidate (6) = 8);\nend Main;", "language": "adb"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Match_Wordz (Text : String) return Boolean;\n   -- Write a function that matches a word containing 'z'.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Match_Wordz (Text : String) return Boolean", "test": "\n   end Text_Match_Wordz;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Match_Wordz;\n\nbegin\n   pragma Assert (Candidate (\"pythonz.\") = True);\n   pragma Assert (Candidate (\"xyz.\") = True);\n   pragma Assert (Candidate (\"  lang  .\") = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_Monthnumb_Number (Monthnum2 : Integer) return Boolean;\n   -- Write a function to check whether the given month number contains 31 days or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Monthnumb_Number (Monthnum2 : Integer) return Boolean", "test": "\n   end Check_Monthnumb_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Monthnum2 : Integer) return Boolean renames Placeholder.Check_Monthnumb_Number;\n\nbegin\n   pragma Assert (Candidate (5) = True);\n   pragma Assert (Candidate (2) = False);\n   pragma Assert (Candidate (6) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Reverse_String_List (Stringlist : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Write a function to reverse each string in a given Vector of string values.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Reverse_String_List (Stringlist : Unbounded_String_Array) return Unbounded_String_Array", "test": "\n   end Reverse_String_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Stringlist : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Reverse_String_List;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"Red\"), To_Unbounded_String (\"Green\"), To_Unbounded_String (\"Blue\"), To_Unbounded_String (\"White\"), To_Unbounded_String (\"Black\")]) = [To_Unbounded_String (\"deR\"), To_Unbounded_String (\"neerG\"), To_Unbounded_String (\"eulB\"), To_Unbounded_String (\"etihW\"), To_Unbounded_String (\"kcalB\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"john\"), To_Unbounded_String (\"amal\"), To_Unbounded_String (\"joel\"), To_Unbounded_String (\"george\")]) = [To_Unbounded_String (\"nhoj\"), To_Unbounded_String (\"lama\"), To_Unbounded_String (\"leoj\"), To_Unbounded_String (\"egroeg\")]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"jack\"), To_Unbounded_String (\"john\"), To_Unbounded_String (\"mary\")]) = [To_Unbounded_String (\"kcaj\"), To_Unbounded_String (\"nhoj\"), To_Unbounded_String (\"yram\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Rectangle_Area (L : Integer; B : Integer) return Integer;\n   -- Write a function to find the area of a rectangle.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Rectangle_Area (L : Integer; B : Integer) return Integer", "test": "\n   end Rectangle_Area;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer; B : Integer) return Integer renames Placeholder.Rectangle_Area;\n\nbegin\n   pragma Assert (Candidate (10, 20) = 200);\n   pragma Assert (Candidate (10, 5) = 50);\n   pragma Assert (Candidate (4, 2) = 8);\nend Main;", "language": "adb"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Uppercase (Str1 : String) return String;\n   -- Write a function to remove uppercase substrings from a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Uppercase (Str1 : String) return String", "test": "\n   end Remove_Uppercase;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return String renames Placeholder.Remove_Uppercase;\n\nbegin\n   pragma Assert (Candidate (\"cAstyoUrFavoRitETVshoWs\") = \"cstyoravoitshos\");\n   pragma Assert (Candidate (\"wAtchTheinTernEtrAdIo\") = \"wtchheinerntrdo\");\n   pragma Assert (Candidate (\"VoicESeaRchAndreComMendaTionS\") = \"oiceachndreomendaion\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_460_Extract", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Extract (Lst : Integer_Vector_Vector_Array) return Integer_Array;\n   -- Write an adbthon function to get the first element of each subVector.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Extract (Lst : Integer_Vector_Vector_Array) return Integer_Array", "test": "\n   end Extract;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Lst : Integer_Vector_Vector_Array) return Integer_Array renames Placeholder.Extract;\n\nbegin\n   pragma Assert (Candidate ([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) = [1, 3, 6]);\n   pragma Assert (Candidate ([[1, 2, 3], [4, 5]]) = [1, 4]);\n   pragma Assert (Candidate ([[9, 8, 1], [1, 2]]) = [9, 1]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Upper_Ctr (Str : String) return Integer;\n   -- Write an adbthon function to count the upper case characters in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Upper_Ctr (Str : String) return Integer", "test": "\n   end Upper_Ctr;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : String) return Integer renames Placeholder.Upper_Ctr;\n\nbegin\n   pragma Assert (Candidate (\"PYthon\") = 1);\n   pragma Assert (Candidate (\"BigData\") = 1);\n   pragma Assert (Candidate (\"program\") = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Subarray_Product (Arr : Integer_Array) return Integer;\n   -- Write a function to find the maximum product subarray of the given array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Subarray_Product (Arr : Integer_Array) return Integer", "test": "\n   end Max_Subarray_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Max_Subarray_Product;\n\nbegin\n   pragma Assert (Candidate ([1, -2, -3, 0, 7, -8, -2]) = 112);\n   pragma Assert (Candidate ([6, -3, -10, 0, 2]) = 180);\n   pragma Assert (Candidate ([-2, -40, 0, -2, -3]) = 80);\nend Main;", "language": "adb"}, {"task_id": "mbpp_464_check_value", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   function Check_Value (Dict : String_Integer_Dict.Map; N : Integer) return Boolean;\n   -- Write a function to check if all values are same in a Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Check_Value (Dict : String_Integer_Dict.Map; N : Integer) return Boolean", "test": "\n   end Check_Value;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Integer_Dict;\n\n   function Candidate (Dict : String_Integer_Dict.Map; N : Integer) return Boolean renames Placeholder.Check_Value;\n\nbegin\n   pragma Assert (Candidate ([\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12], 10) = False);\n   pragma Assert (Candidate ([\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12], 12) = True);\n   pragma Assert (Candidate ([\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12], 5) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_465_drop_empty", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   package String_Unbounded_String_Option_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Unbounded_String_Option);\n   use String_Unbounded_String_Option_Dict;\n   package String_String_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => String);\n   use String_String_Dict;\n   function Drop_Empty (Dict1 : String_Unbounded_String_Option_Dict.Map) return String_String_Dict.Map;\n   -- Write a function to drop empty items from a given Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Drop_Empty (Dict1 : String_Unbounded_String_Option_Dict.Map) return String_String_Dict.Map", "test": "\n   end Drop_Empty;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_String_Dict;\n   use String_Unbounded_String_Option_Dict;\n\n   function Candidate (Dict1 : String_Unbounded_String_Option_Dict.Map) return String_String_Dict.Map renames Placeholder.Drop_Empty;\n\nbegin\n   pragma Assert (Candidate ([\"c1\" => (Valid => True, Value => \"Red\"), \"c2\" => (Valid => True, Value => \"Green\"), \"c3\" => (Valid => False)]) = [\"c1\" => \"Red\", \"c2\" => \"Green\"]);\n   pragma Assert (Candidate ([\"c1\" => (Valid => True, Value => \"Red\"), \"c2\" => (Valid => False), \"c3\" => (Valid => False)]) = [\"c1\" => \"Red\"]);\n   pragma Assert (Candidate ([\"c1\" => (Valid => False), \"c2\" => (Valid => True, Value => \"Green\"), \"c3\" => (Valid => False)]) = [\"c2\" => \"Green\"]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_468_max_product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Product (Arr : Integer_Array) return Integer;\n   -- Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Product (Arr : Integer_Array) return Integer", "test": "\n   end Max_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Max_Product;\n\nbegin\n   pragma Assert (Candidate ([3, 100, 4, 5, 150, 6]) = 3000);\n   pragma Assert (Candidate ([4, 42, 55, 68, 80]) = 50265600);\n   pragma Assert (Candidate ([10, 22, 9, 33, 21, 50, 41, 60]) = 2460);\nend Main;", "language": "adb"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n      Integer_5 : Integer;\n   end record;\n\n   type Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n   end record;\n\n   function Add_Pairwise (Test_Tup : Integer_Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function to find the pairwise addition of the neighboring elements of the given record.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Add_Pairwise (Test_Tup : Integer_Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple", "test": "\n   end Add_Pairwise;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup : Integer_Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple renames Placeholder.Add_Pairwise;\n\nbegin\n   pragma Assert (Candidate ((1, 5, 7, 8, 10)) = (6, 12, 15, 18));\n   pragma Assert (Candidate ((2, 6, 8, 9, 11)) = (8, 14, 17, 20));\n   pragma Assert (Candidate ((3, 7, 9, 10, 12)) = (10, 16, 19, 22));\nend Main;", "language": "adb"}, {"task_id": "mbpp_471_find_remainder", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Remainder (Arr : Integer_Array; N : Integer) return Integer;\n   -- Write an adbthon function to find the product of the array multiplication modulo n.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Remainder (Arr : Integer_Array; N : Integer) return Integer", "test": "\n   end Find_Remainder;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; N : Integer) return Integer renames Placeholder.Find_Remainder;\n\nbegin\n   pragma Assert (Candidate ([100, 10, 5, 25, 35, 14], 11) = 9);\n   pragma Assert (Candidate ([1, 1, 1], 1) = 0);\n   pragma Assert (Candidate ([1, 2, 1], 2) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Check_Consecutive (L : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether the given Vector contains consecutive numbers or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Consecutive (L : Integer_Array) return Boolean", "test": "\n   end Check_Consecutive;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Check_Consecutive;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = True);\n   pragma Assert (Candidate ([1, 2, 3, 5, 6]) = False);\n   pragma Assert (Candidate ([1, 2, 1]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_473_tuple_intersection", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Sets;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function \"<\" (Left, Right : Integer_Integer_Tuple) return Boolean is\n    (Left.Integer_1 < Right.Integer_1 or else (Left.Integer_1 = Right.Integer_1 and then Left.Integer_2 < Right.Integer_2));\n   package Integer_Integer_Tuple_Sets is new Ada.Containers.Indefinite_Ordered_Sets (Element_Type => Integer_Integer_Tuple);\n   use Integer_Integer_Tuple_Sets;\n   function Tuple_Intersection (Test_List1 : Integer_Integer_Tuple_Array; Test_List2 : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Sets.Set;\n   -- Write a function to find the record intersection of elements in the given record Vector irrespective of their order.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Sets;\n\npackage body Placeholder is\n   function Tuple_Intersection (Test_List1 : Integer_Integer_Tuple_Array; Test_List2 : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Sets.Set", "test": "\n   end Tuple_Intersection;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Sets;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Integer_Tuple_Sets;\n\n   function Candidate (Test_List1 : Integer_Integer_Tuple_Array; Test_List2 : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Sets.Set renames Placeholder.Tuple_Intersection;\n\nbegin\n   pragma Assert (Candidate ([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) = [(4, 5), (3, 4), (5, 6)]);\n   pragma Assert (Candidate ([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) = [(4, 7), (1, 4)]);\n   pragma Assert (Candidate ([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) = [(1, 3), (2, 3)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_474_replace_char", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Replace_Char (Str1 : String; Ch : String; Newch : String) return String;\n   -- Write a function to replace characters in a string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Replace_Char (Str1 : String; Ch : String; Newch : String) return String", "test": "\n   end Replace_Char;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String; Ch : String; Newch : String) return String renames Placeholder.Replace_Char;\n\nbegin\n   pragma Assert (Candidate (\"polygon\", \"y\", \"l\") = \"pollgon\");\n   pragma Assert (Candidate (\"character\", \"c\", \"a\") = \"aharaater\");\n   pragma Assert (Candidate (\"python\", \"l\", \"a\") = \"python\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_475_sort_counter", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   type Unbounded_String_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n   end record;\n\n   type Unbounded_String_Integer_Tuple_Array is array (Positive range <>) of Unbounded_String_Integer_Tuple;\n   function Sort_Counter (Dict1 : String_Integer_Dict.Map) return Unbounded_String_Integer_Tuple_Array;\n   -- Write a function to sort a Map by value.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Sort_Counter (Dict1 : String_Integer_Dict.Map) return Unbounded_String_Integer_Tuple_Array", "test": "\n   end Sort_Counter;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Integer_Dict;\n\n   function Candidate (Dict1 : String_Integer_Dict.Map) return Unbounded_String_Integer_Tuple_Array renames Placeholder.Sort_Counter;\n\nbegin\n   pragma Assert (Candidate ([\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87]) = [(To_Unbounded_String (\"Chemistry\"), 87), (To_Unbounded_String (\"Physics\"), 83), (To_Unbounded_String (\"Math\"), 81)]);\n   pragma Assert (Candidate ([\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250]) = [(To_Unbounded_String (\"Math\"), 400), (To_Unbounded_String (\"Physics\"), 300), (To_Unbounded_String (\"Chemistry\"), 250)]);\n   pragma Assert (Candidate ([\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250]) = [(To_Unbounded_String (\"Chemistry\"), 1250), (To_Unbounded_String (\"Physics\"), 1000), (To_Unbounded_String (\"Math\"), 900)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_476_big_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Big_Sum (Nums : Integer_Array) return Integer;\n   -- Write an adbthon function to find the sum of the largest and smallest value in a given array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Big_Sum (Nums : Integer_Array) return Integer", "test": "\n   end Big_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Big_Sum;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = 4);\n   pragma Assert (Candidate ([-1, 2, 3, 4]) = 3);\n   pragma Assert (Candidate ([2, 3, 6]) = 8);\nend Main;", "language": "adb"}, {"task_id": "mbpp_477_is_lower", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Lower (My_String : String) return String;\n   -- Write an adbthon function to convert the given string to lower case.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Lower (My_String : String) return String", "test": "\n   end Is_Lower;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Is_Lower;\n\nbegin\n   pragma Assert (Candidate (\"InValid\") = \"invalid\");\n   pragma Assert (Candidate (\"TruE\") = \"true\");\n   pragma Assert (Candidate (\"SenTenCE\") = \"sentence\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Lowercase (Str1 : String) return String;\n   -- Write a function to remove lowercase substrings from a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Lowercase (Str1 : String) return String", "test": "\n   end Remove_Lowercase;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return String renames Placeholder.Remove_Lowercase;\n\nbegin\n   pragma Assert (Candidate (\"PYTHon\") = \"PYTH\");\n   pragma Assert (Candidate (\"FInD\") = \"FID\");\n   pragma Assert (Candidate (\"STRinG\") = \"STRG\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_479_first_Digit", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function First_Digit (N : Integer) return Integer;\n   -- Write an adbthon function to find the first digit of a given number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function First_Digit (N : Integer) return Integer", "test": "\n   end First_Digit;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.First_Digit;\n\nbegin\n   pragma Assert (Candidate (123) = 1);\n   pragma Assert (Candidate (456) = 4);\n   pragma Assert (Candidate (12) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_554_Split", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Split (List : Integer_Array) return Integer_Array;\n   -- Write an adbthon function which takes a Vector of integers and only returns the odd ones.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Split (List : Integer_Array) return Integer_Array", "test": "\n   end Split;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List : Integer_Array) return Integer_Array renames Placeholder.Split;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6]) = [1, 3, 5]);\n   pragma Assert (Candidate ([10, 11, 12, 13]) = [11, 13]);\n   pragma Assert (Candidate ([7, 8, 9, 1]) = [7, 9, 1]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_555_difference", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Difference (N : Integer) return Integer;\n   -- Write an adbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Difference (N : Integer) return Integer", "test": "\n   end Difference;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Difference;\n\nbegin\n   pragma Assert (Candidate (3) = 30);\n   pragma Assert (Candidate (5) = 210);\n   pragma Assert (Candidate (2) = 6);\nend Main;", "language": "adb"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Odd_Pair (A : Integer_Array; N : Integer) return Integer;\n   -- Write an adbthon function to count the number of pairs whose xor value is odd.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Odd_Pair (A : Integer_Array; N : Integer) return Integer", "test": "\n   end Find_Odd_Pair;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; N : Integer) return Integer renames Placeholder.Find_Odd_Pair;\n\nbegin\n   pragma Assert (Candidate ([5, 4, 7, 2, 1], 5) = 6);\n   pragma Assert (Candidate ([7, 2, 8, 1, 0, 5, 11], 7) = 12);\n   pragma Assert (Candidate ([1, 2, 3], 3) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_557_toggle_string", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Toggle_String (My_String : String) return String;\n   -- Write a function to toggle the case of all characters in a string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Toggle_String (My_String : String) return String", "test": "\n   end Toggle_String;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Toggle_String;\n\nbegin\n   pragma Assert (Candidate (\"Python\") = \"pYTHON\");\n   pragma Assert (Candidate (\"Pangram\") = \"pANGRAM\");\n   pragma Assert (Candidate (\"LIttLE\") = \"liTTle\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Digit_Distance_Nums (N1 : Integer; N2 : Integer) return Integer;\n   -- Write an adbthon function to find the sum of the per-digit difference between two integers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Digit_Distance_Nums (N1 : Integer; N2 : Integer) return Integer", "test": "\n   end Digit_Distance_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N1 : Integer; N2 : Integer) return Integer renames Placeholder.Digit_Distance_Nums;\n\nbegin\n   pragma Assert (Candidate (1, 2) = 1);\n   pragma Assert (Candidate (23, 56) = 6);\n   pragma Assert (Candidate (123, 256) = 7);\nend Main;", "language": "adb"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Sub_Array_Sum (A : Integer_Array; Size : Integer) return Integer;\n   -- Write a function to find the sum of the largest contiguous subVector in the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Sub_Array_Sum (A : Integer_Array; Size : Integer) return Integer", "test": "\n   end Max_Sub_Array_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; Size : Integer) return Integer renames Placeholder.Max_Sub_Array_Sum;\n\nbegin\n   pragma Assert (Candidate ([-2, -3, 4, -1, -2, 1, 5, -3], 8) = 7);\n   pragma Assert (Candidate ([-3, -4, 5, -2, -3, 2, 6, -4], 8) = 8);\n   pragma Assert (Candidate ([-4, -5, 6, -3, -4, 3, 7, -5], 8) = 10);\nend Main;", "language": "adb"}, {"task_id": "mbpp_560_union_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Union_Elements (Test_Tup1 : Integer_Array; Test_Tup2 : Integer_Array) return Integer_Array;\n   -- Write a function to find the union of the elements of two given Vectors and output them in sorted order.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Union_Elements (Test_Tup1 : Integer_Array; Test_Tup2 : Integer_Array) return Integer_Array", "test": "\n   end Union_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Array; Test_Tup2 : Integer_Array) return Integer_Array renames Placeholder.Union_Elements;\n\nbegin\n   pragma Assert (Candidate ([3, 4, 5, 6], [5, 7, 4, 10]) = [3, 4, 5, 6, 7, 10]);\n   pragma Assert (Candidate ([1, 2, 3, 4], [3, 4, 5, 6]) = [1, 2, 3, 4, 5, 6]);\n   pragma Assert (Candidate ([11, 12, 13, 14], [13, 15, 16, 17]) = [11, 12, 13, 14, 15, 16, 17]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Find_Max_Length (Lst : Integer_Vector_Vector_Array) return Integer;\n   -- Write an adbthon function to find the length of the longest subVectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Find_Max_Length (Lst : Integer_Vector_Vector_Array) return Integer", "test": "\n   end Find_Max_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Lst : Integer_Vector_Vector_Array) return Integer renames Placeholder.Find_Max_Length;\n\nbegin\n   pragma Assert (Candidate ([[1], [1, 4], [5, 6, 7, 8]]) = 4);\n   pragma Assert (Candidate ([[0, 1], [2, 2], [3, 2, 1]]) = 3);\n   pragma Assert (Candidate ([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_563_extract_values", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Extract_Values (Text : String) return Unbounded_String_Array;\n   -- Write a function to extract values between quotation marks from a string.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Extract_Values (Text : String) return Unbounded_String_Array", "test": "\n   end Extract_Values;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Unbounded_String_Array renames Placeholder.Extract_Values;\n\nbegin\n   pragma Assert (Candidate (\"\"\"Python\"\", \"\"PHP\"\", \"\"Java\"\"\") = [To_Unbounded_String (\"Python\"), To_Unbounded_String (\"PHP\"), To_Unbounded_String (\"Java\")]);\n   pragma Assert (Candidate (\"\"\"python\"\",\"\"program\"\",\"\"language\"\"\") = [To_Unbounded_String (\"python\"), To_Unbounded_String (\"program\"), To_Unbounded_String (\"language\")]);\n   pragma Assert (Candidate (\"\"\"red\"\",\"\"blue\"\",\"\"green\"\",\"\"yellow\"\"\") = [To_Unbounded_String (\"red\"), To_Unbounded_String (\"blue\"), To_Unbounded_String (\"green\"), To_Unbounded_String (\"yellow\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_Pairs (Arr : Integer_Array; N : Integer) return Integer;\n   -- Write an adbthon function which takes a Vector of integers and counts the number of possible unordered pairs where both elements are unequal.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Pairs (Arr : Integer_Array; N : Integer) return Integer", "test": "\n   end Count_Pairs;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; N : Integer) return Integer renames Placeholder.Count_Pairs;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 1], 3) = 2);\n   pragma Assert (Candidate ([1, 1, 1, 1], 4) = 0);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5], 5) = 10);\nend Main;", "language": "adb"}, {"task_id": "mbpp_565_split", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Split (Word : String) return Unbounded_String_Array;\n   -- Write an adbthon function to split a string into characters.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Split (Word : String) return Unbounded_String_Array", "test": "\n   end Split;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Word : String) return Unbounded_String_Array renames Placeholder.Split;\n\nbegin\n   pragma Assert (Candidate (\"python\") = [To_Unbounded_String (\"p\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"t\"), To_Unbounded_String (\"h\"), To_Unbounded_String (\"o\"), To_Unbounded_String (\"n\")]);\n   pragma Assert (Candidate (\"Name\") = [To_Unbounded_String (\"N\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"m\"), To_Unbounded_String (\"e\")]);\n   pragma Assert (Candidate (\"program\") = [To_Unbounded_String (\"p\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"o\"), To_Unbounded_String (\"g\"), To_Unbounded_String (\"r\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"m\")]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_566_sum_digits", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum_Digits (N : Integer) return Integer;\n   -- Write a function to get the sum of the digits of a non-negative integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Digits (N : Integer) return Integer", "test": "\n   end Sum_Digits;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Sum_Digits;\n\nbegin\n   pragma Assert (Candidate (345) = 12);\n   pragma Assert (Candidate (12) = 3);\n   pragma Assert (Candidate (97) = 16);\nend Main;", "language": "adb"}, {"task_id": "mbpp_567_issort_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Issort_List (List1 : Integer_Array) return Boolean;\n   -- Write a function to check whether a specified Vector is sorted or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Issort_List (List1 : Integer_Array) return Boolean", "test": "\n   end Issort_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array) return Boolean renames Placeholder.Issort_List;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) = True);\n   pragma Assert (Candidate ([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) = False);\n   pragma Assert (Candidate ([1, 2, 4, 6, 8, 10, 15, 14, 20]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   package Unbounded_String_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Unbounded_String);\n   use Unbounded_String_Vector;\n   type Unbounded_String_Vector_Vector_Array is array (Positive range <>) of Unbounded_String_Vector.Vector;\n   function Sort_Sublists (List1 : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array;\n   -- Write a function to sort each subVector of strings in a given Vector of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Sort_Sublists (List1 : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array", "test": "\n   end Sort_Sublists;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Unbounded_String_Vector;\n\n   function Candidate (List1 : Unbounded_String_Vector_Vector_Array) return Unbounded_String_Vector_Vector_Array renames Placeholder.Sort_Sublists;\n\nbegin\n   pragma Assert (Candidate ([[To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\")], [To_Unbounded_String (\"white\"), To_Unbounded_String (\"black\"), To_Unbounded_String (\"orange\")]]) = [[To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"black\"), To_Unbounded_String (\"white\")], [To_Unbounded_String (\"black\"), To_Unbounded_String (\"orange\"), To_Unbounded_String (\"white\")]]);\n   pragma Assert (Candidate ([[To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"black\")], [To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"white\")]]) = [[To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"black\")], [To_Unbounded_String (\"green\"), To_Unbounded_String (\"orange\")], [To_Unbounded_String (\"white\")]]);\n   pragma Assert (Candidate ([[To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\")], [To_Unbounded_String (\"d\"), To_Unbounded_String (\"c\")], [To_Unbounded_String (\"g\"), To_Unbounded_String (\"h\")], [To_Unbounded_String (\"f\"), To_Unbounded_String (\"e\")]]) = [[To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\")], [To_Unbounded_String (\"c\"), To_Unbounded_String (\"d\")], [To_Unbounded_String (\"g\"), To_Unbounded_String (\"h\")], [To_Unbounded_String (\"e\"), To_Unbounded_String (\"f\")]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Two_Unique_Nums (Nums : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to remove duplicate numbers from a given number of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Two_Unique_Nums (Nums : Integer_Array) return Integer_Array", "test": "\n   end Two_Unique_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Two_Unique_Nums;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 2, 3, 4, 5]) = [1, 4, 5]);\n   pragma Assert (Candidate ([1, 2, 3, 2, 4, 5]) = [1, 3, 4, 5]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_573_unique_product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Unique_Product (List_Data : Integer_Array) return Integer;\n   -- Write an adbthon function to calculate the product of the unique numbers in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Unique_Product (List_Data : Integer_Array) return Integer", "test": "\n   end Unique_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List_Data : Integer_Array) return Integer renames Placeholder.Unique_Product;\n\nbegin\n   pragma Assert (Candidate ([10, 20, 30, 40, 20, 50, 60, 40]) = 720000000);\n   pragma Assert (Candidate ([1, 2, 3, 1]) = 6);\n   pragma Assert (Candidate ([7, 8, 9, 0, 1, 1]) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Surfacearea_Cylinder (R : Integer; H : Integer) return Float;\n   -- Write a function to find the surface area of a cylinder.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Surfacearea_Cylinder (R : Integer; H : Integer) return Float", "test": "\n   end Surfacearea_Cylinder;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (R : Integer; H : Integer) return Float renames Placeholder.Surfacearea_Cylinder;\n\nbegin\n   pragma Assert (Candidate (10, 5) = 942.45);\n   pragma Assert (Candidate (4, 5) = 226.18800000000002);\n   pragma Assert (Candidate (4, 10) = 351.848);\nend Main;", "language": "adb"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Is_Sub_Array (A : Integer_Array; B : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether a Vector is subVector of another or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Sub_Array (A : Integer_Array; B : Integer_Array) return Boolean", "test": "\n   end Is_Sub_Array;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; B : Integer_Array) return Boolean renames Placeholder.Is_Sub_Array;\n\nbegin\n   pragma Assert (Candidate ([1, 4, 3, 5], [1, 2]) = False);\n   pragma Assert (Candidate ([1, 2, 1], [1, 2, 1]) = True);\n   pragma Assert (Candidate ([1, 0, 2, 2], [2, 2, 0]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Last_Digit_Factorial (N : Integer) return Integer;\n   -- Write an adbthon function to find the last digit in factorial of a given number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Last_Digit_Factorial (N : Integer) return Integer", "test": "\n   end Last_Digit_Factorial;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Last_Digit_Factorial;\n\nbegin\n   pragma Assert (Candidate (4) = 4);\n   pragma Assert (Candidate (21) = 0);\n   pragma Assert (Candidate (30) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Interleave_Lists (List1 : Integer_Array; List2 : Integer_Array; List3 : Integer_Array) return Integer_Array;\n   -- Write a function to interleave 3 Vectors of the same length into a single flat Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Interleave_Lists (List1 : Integer_Array; List2 : Integer_Array; List3 : Integer_Array) return Integer_Array", "test": "\n   end Interleave_Lists;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array; List2 : Integer_Array; List3 : Integer_Array) return Integer_Array renames Placeholder.Interleave_Lists;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) = [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n   pragma Assert (Candidate ([10, 20], [15, 2], [5, 10]) = [10, 15, 5, 20, 2, 10]);\n   pragma Assert (Candidate ([11, 44], [10, 15], [20, 5]) = [11, 10, 20, 44, 15, 5]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n   end record;\n\n   function Find_Dissimilar (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function to find the dissimilar elements in the given two records.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Dissimilar (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple", "test": "\n   end Find_Dissimilar;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple renames Placeholder.Find_Dissimilar;\n\nbegin\n   pragma Assert (Candidate ((3, 4, 5, 6), (5, 7, 4, 10)) = (3, 6, 7, 10));\n   pragma Assert (Candidate ((1, 2, 3, 4), (7, 2, 3, 9)) = (1, 4, 7, 9));\n   pragma Assert (Candidate ((21, 11, 25, 26), (26, 34, 21, 36)) = (34, 36, 11, 25));\nend Main;", "language": "adb"}, {"task_id": "mbpp_581_surface_Area", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Surface_Area (B : Integer; S : Integer) return Integer;\n   -- Write an adbthon function to find the surface area of a square adbramid with a given base edge and height.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Surface_Area (B : Integer; S : Integer) return Integer", "test": "\n   end Surface_Area;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (B : Integer; S : Integer) return Integer renames Placeholder.Surface_Area;\n\nbegin\n   pragma Assert (Candidate (3, 4) = 33);\n   pragma Assert (Candidate (4, 5) = 56);\n   pragma Assert (Candidate (1, 2) = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_582_my_dict", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Sets;\n\npackage Placeholder is\n   package Integer_Sets is new Ada.Containers.Indefinite_Ordered_Sets (Element_Type => Integer);\n   use Integer_Sets;\n   function My_Dict (Dict1 : Integer_Sets.Set) return Boolean;\n   -- Write a function to check if a Map is empty\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Sets;\n\npackage body Placeholder is\n   function My_Dict (Dict1 : Integer_Sets.Set) return Boolean", "test": "\n   end My_Dict;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Sets;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Sets;\n\n   function Candidate (Dict1 : Integer_Sets.Set) return Boolean renames Placeholder.My_Dict;\n\nbegin\n   pragma Assert (Candidate ([10]) = False);\n   pragma Assert (Candidate ([11]) = False);\n   pragma Assert (Candidate ([]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_583_catalan_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Catalan_Number (Num : Integer) return Integer;\n   -- Write a function which returns nth catalan number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Catalan_Number (Num : Integer) return Integer", "test": "\n   end Catalan_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num : Integer) return Integer renames Placeholder.Catalan_Number;\n\nbegin\n   pragma Assert (Candidate (10) = 16796);\n   pragma Assert (Candidate (9) = 4862);\n   pragma Assert (Candidate (7) = 429);\nend Main;", "language": "adb"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Adverbs (Text : String) return String;\n   -- Write a function to find the first adverb ending with ly and its positions in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Adverbs (Text : String) return String", "test": "\n   end Find_Adverbs;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return String renames Placeholder.Find_Adverbs;\n\nbegin\n   pragma Assert (Candidate (\"Clearly, he has no excuse for such behavior.\") = \"0-7: Clearly\");\n   pragma Assert (Candidate (\"Please handle the situation carefuly\") = \"28-36: carefuly\");\n   pragma Assert (Candidate (\"Complete the task quickly\") = \"18-25: quickly\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_586_split_Arr", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Split_Arr (L : Integer_Array; N : Integer) return Integer_Array;\n   -- Write an adbthon function to split a Vector at the nth eelment and add the first part to the end.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Split_Arr (L : Integer_Array; N : Integer) return Integer_Array", "test": "\n   end Split_Arr;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer_Array; N : Integer) return Integer_Array renames Placeholder.Split_Arr;\n\nbegin\n   pragma Assert (Candidate ([12, 10, 5, 6, 52, 36], 2) = [5, 6, 52, 36, 12, 10]);\n   pragma Assert (Candidate ([1, 2, 3, 4], 1) = [2, 3, 4, 1]);\n   pragma Assert (Candidate ([0, 1, 2, 3, 4, 5, 6, 7], 3) = [3, 4, 5, 6, 7, 0, 1, 2]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_587_list_tuple", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function List_Tuple (Listx : Integer_Array) return Integer_Array;\n   -- Write a function to convert a Vector to a record.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function List_Tuple (Listx : Integer_Array) return Integer_Array", "test": "\n   end List_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Listx : Integer_Array) return Integer_Array renames Placeholder.List_Tuple;\n\nbegin\n   pragma Assert (Candidate ([5, 10, 7, 4, 15, 3]) = (5, 10, 7, 4, 15, 3));\n   pragma Assert (Candidate ([2, 4, 5, 6, 2, 3, 4, 4, 7]) = (2, 4, 5, 6, 2, 3, 4, 4, 7));\n   pragma Assert (Candidate ([58, 44, 56]) = (58, 44, 56));\nend Main;", "language": "adb"}, {"task_id": "mbpp_588_big_diff", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Big_Diff (Nums : Integer_Array) return Integer;\n   -- Write an adbthon function to find the difference between largest and smallest value in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Big_Diff (Nums : Integer_Array) return Integer", "test": "\n   end Big_Diff;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Big_Diff;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4]) = 3);\n   pragma Assert (Candidate ([4, 5, 12]) = 8);\n   pragma Assert (Candidate ([9, 2, 3]) = 7);\nend Main;", "language": "adb"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Perfect_Squares (A : Integer; B : Integer) return Integer_Array;\n   -- Write a function to find perfect squares between two given numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Perfect_Squares (A : Integer; B : Integer) return Integer_Array", "test": "\n   end Perfect_Squares;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer; B : Integer) return Integer_Array renames Placeholder.Perfect_Squares;\n\nbegin\n   pragma Assert (Candidate (1, 30) = [1, 4, 9, 16, 25]);\n   pragma Assert (Candidate (50, 100) = [64, 81, 100]);\n   pragma Assert (Candidate (100, 200) = [100, 121, 144, 169, 196]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_591_swap_List", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Swap_List (Newlist : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to interchange the first and last elements in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Swap_List (Newlist : Integer_Array) return Integer_Array", "test": "\n   end Swap_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Newlist : Integer_Array) return Integer_Array renames Placeholder.Swap_List;\n\nbegin\n   pragma Assert (Candidate ([12, 35, 9, 56, 24]) = [24, 35, 9, 56, 12]);\n   pragma Assert (Candidate ([1, 2, 3]) = [3, 2, 1]);\n   pragma Assert (Candidate ([4, 5, 6]) = [6, 5, 4]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum_Of_Product (N : Integer) return Integer;\n   -- Write an adbthon function to find the sum of the product of consecutive binomial co-efficients.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Of_Product (N : Integer) return Integer", "test": "\n   end Sum_Of_Product;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Sum_Of_Product;\n\nbegin\n   pragma Assert (Candidate (3) = 15);\n   pragma Assert (Candidate (4) = 56);\n   pragma Assert (Candidate (1) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Removezero_Ip (Ip : String) return String;\n   -- Write a function to remove leading zeroes from an ip address.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Removezero_Ip (Ip : String) return String", "test": "\n   end Removezero_Ip;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Ip : String) return String renames Placeholder.Removezero_Ip;\n\nbegin\n   pragma Assert (Candidate (\"216.08.094.196\") = \"216.8.94.196\");\n   pragma Assert (Candidate (\"12.01.024\") = \"12.1.24\");\n   pragma Assert (Candidate (\"216.08.094.0196\") = \"216.8.94.196\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Diff_Even_Odd (List1 : Integer_Array) return Integer;\n   -- Write a function to find the difference of the first even and first odd number of a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Diff_Even_Odd (List1 : Integer_Array) return Integer", "test": "\n   end Diff_Even_Odd;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array) return Integer renames Placeholder.Diff_Even_Odd;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 5, 7, 4, 1, 6, 8]) = 3);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 1);\n   pragma Assert (Candidate ([1, 5, 7, 9, 10]) = 9);\nend Main;", "language": "adb"}, {"task_id": "mbpp_597_find_kth", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Kth (Arr1 : Integer_Array; Arr2 : Integer_Array; K : Integer) return Integer;\n   -- Write a function to find kth element from the given two sorted arrays.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Kth (Arr1 : Integer_Array; Arr2 : Integer_Array; K : Integer) return Integer", "test": "\n   end Find_Kth;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr1 : Integer_Array; Arr2 : Integer_Array; K : Integer) return Integer renames Placeholder.Find_Kth;\n\nbegin\n   pragma Assert (Candidate ([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) = 6);\n   pragma Assert (Candidate ([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) = 256);\n   pragma Assert (Candidate ([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) = 8);\nend Main;", "language": "adb"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Armstrong_Number (Number : Integer) return Boolean;\n   -- Write a function to check whether the given number is armstrong or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Armstrong_Number (Number : Integer) return Boolean", "test": "\n   end Armstrong_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Number : Integer) return Boolean renames Placeholder.Armstrong_Number;\n\nbegin\n   pragma Assert (Candidate (153) = True);\n   pragma Assert (Candidate (259) = False);\n   pragma Assert (Candidate (4458) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_599_sum_average", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Float_Tuple is record\n      Integer_1 : Integer;\n      Float_2 : Float;\n   end record;\n\n   function Sum_Average (Number : Integer) return Integer_Float_Tuple;\n   -- Write a function to find sum and average of first n natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Average (Number : Integer) return Integer_Float_Tuple", "test": "\n   end Sum_Average;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Number : Integer) return Integer_Float_Tuple renames Placeholder.Sum_Average;\n\nbegin\n   pragma Assert (Candidate (10) = (55, 5.5));\n   pragma Assert (Candidate (15) = (120, 8.0));\n   pragma Assert (Candidate (20) = (210, 10.5));\nend Main;", "language": "adb"}, {"task_id": "mbpp_600_is_Even", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Even (N : Integer) return Boolean;\n   -- Write an adbthon function to check whether the given number is even or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Even (N : Integer) return Boolean", "test": "\n   end Is_Even;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Even;\n\nbegin\n   pragma Assert (Candidate (1) = False);\n   pragma Assert (Candidate (2) = True);\n   pragma Assert (Candidate (3) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   function First_Repeated_Char (Str1 : String) return Unbounded_String_Option;\n   -- Write an adbthon function to find the first repeated character in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function First_Repeated_Char (Str1 : String) return Unbounded_String_Option", "test": "\n   end First_Repeated_Char;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return Unbounded_String_Option renames Placeholder.First_Repeated_Char;\n\nbegin\n   pragma Assert (Candidate (\"abcabc\") = (Valid => True, Value => To_Unbounded_String (\"a\")));\n   pragma Assert (Candidate (\"abc\") = (Valid => False));\n   pragma Assert (Candidate (\"123123\") = (Valid => True, Value => To_Unbounded_String (\"1\")));\nend Main;", "language": "adb"}, {"task_id": "mbpp_603_get_ludic", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Get_Ludic (N : Integer) return Integer_Array;\n   -- Write a function to get all lucid numbers smaller than or equal to a given integer.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Ludic (N : Integer) return Integer_Array", "test": "\n   end Get_Ludic;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Get_Ludic;\n\nbegin\n   pragma Assert (Candidate (10) = [1, 2, 3, 5, 7]);\n   pragma Assert (Candidate (25) = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);\n   pragma Assert (Candidate (45) = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_604_reverse_words", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Reverse_Words (S : String) return String;\n   -- Write a function to reverse words seperated by spaces in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Reverse_Words (S : String) return String", "test": "\n   end Reverse_Words;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return String renames Placeholder.Reverse_Words;\n\nbegin\n   pragma Assert (Candidate (\"python program\") = \"program python\");\n   pragma Assert (Candidate (\"java language\") = \"language java\");\n   pragma Assert (Candidate (\"indian man\") = \"man indian\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_605_prime_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Prime_Num (Num : Integer) return Boolean;\n   -- Write a function to check if the given integer is a prime number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Prime_Num (Num : Integer) return Boolean", "test": "\n   end Prime_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num : Integer) return Boolean renames Placeholder.Prime_Num;\n\nbegin\n   pragma Assert (Candidate (13) = True);\n   pragma Assert (Candidate (7) = True);\n   pragma Assert (Candidate (-1010) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_606_radian_degree", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Radian_Degree (Degree : Integer) return Float;\n   -- Write a function to convert degrees to radians.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Radian_Degree (Degree : Integer) return Float", "test": "\n   end Radian_Degree;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Degree : Integer) return Float renames Placeholder.Radian_Degree;\n\nbegin\n   pragma Assert (Candidate (90) = 1.5707963267948966);\n   pragma Assert (Candidate (60) = 1.0471975511965976);\n   pragma Assert (Candidate (120) = 2.0943951023931953);\nend Main;", "language": "adb"}, {"task_id": "mbpp_607_find_literals", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Integer_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   function Find_Literals (Text : String; Pattern : String) return Unbounded_String_Integer_Integer_Tuple;\n   -- Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Find_Literals (Text : String; Pattern : String) return Unbounded_String_Integer_Integer_Tuple", "test": "\n   end Find_Literals;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String; Pattern : String) return Unbounded_String_Integer_Integer_Tuple renames Placeholder.Find_Literals;\n\nbegin\n   pragma Assert (Candidate (\"The quick brown fox jumps over the lazy dog.\", \"fox\") = (To_Unbounded_String (\"fox\"), 16, 19));\n   pragma Assert (Candidate (\"Its been a very crazy procedure right\", \"crazy\") = (To_Unbounded_String (\"crazy\"), 16, 21));\n   pragma Assert (Candidate (\"Hardest choices required strongest will\", \"will\") = (To_Unbounded_String (\"will\"), 35, 39));\nend Main;", "language": "adb"}, {"task_id": "mbpp_608_bell_Number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Bell_Number (N : Integer) return Integer;\n   -- Write an adbthon function to find nth bell number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Bell_Number (N : Integer) return Integer", "test": "\n   end Bell_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Bell_Number;\n\nbegin\n   pragma Assert (Candidate (2) = 2);\n   pragma Assert (Candidate (3) = 5);\n   pragma Assert (Candidate (4) = 15);\nend Main;", "language": "adb"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Remove_Kth_Element (List1 : Integer_Array; L : Integer) return Integer_Array;\n   -- Write an adbthon function which takes a Vector and returns a Vector with the same elements, but the k'th element removed.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Kth_Element (List1 : Integer_Array; L : Integer) return Integer_Array", "test": "\n   end Remove_Kth_Element;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array; L : Integer) return Integer_Array renames Placeholder.Remove_Kth_Element;\n\nbegin\n   pragma Assert (Candidate ([1, 1, 2, 3, 4, 4, 5, 1], 3) = [1, 1, 3, 4, 4, 5, 1]);\n   pragma Assert (Candidate ([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) = [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);\n   pragma Assert (Candidate ([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) = [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Max_Of_Nth (Test_List : Integer_Vector_Vector_Array; N : Integer) return Integer;\n   -- Write a function which given a matrix represented as a Vector of Vectors returns the max of the n'th column.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Max_Of_Nth (Test_List : Integer_Vector_Vector_Array; N : Integer) return Integer", "test": "\n   end Max_Of_Nth;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_List : Integer_Vector_Vector_Array; N : Integer) return Integer renames Placeholder.Max_Of_Nth;\n\nbegin\n   pragma Assert (Candidate ([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) = 19);\n   pragma Assert (Candidate ([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) = 10);\n   pragma Assert (Candidate ([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) = 11);\nend Main;", "language": "adb"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Cummulative_Sum (Test_List : Integer_Vector_Vector_Array) return Integer;\n   -- Write a function to find the cumulative sum of all the values that are present in the given Vector of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Cummulative_Sum (Test_List : Integer_Vector_Vector_Array) return Integer", "test": "\n   end Cummulative_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_List : Integer_Vector_Vector_Array) return Integer renames Placeholder.Cummulative_Sum;\n\nbegin\n   pragma Assert (Candidate ([[1, 3], [5, 6, 7], [2, 6]]) = 30);\n   pragma Assert (Candidate ([[2, 4], [6, 7, 8], [3, 7]]) = 37);\n   pragma Assert (Candidate ([[3, 5], [7, 8, 9], [4, 8]]) = 44);\nend Main;", "language": "adb"}, {"task_id": "mbpp_615_average_tuple", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Float_Array is array (Positive range <>) of Float;\n   function Average_Tuple (Nums : Integer_Vector_Vector_Array) return Float_Array;\n   -- Write a function which takes a Vectors of Vectors and returns the average value for each subVector as a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Average_Tuple (Nums : Integer_Vector_Vector_Array) return Float_Array", "test": "\n   end Average_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Nums : Integer_Vector_Vector_Array) return Float_Array renames Placeholder.Average_Tuple;\n\nbegin\n   pragma Assert (Candidate ([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) = [30.5, 34.25, 27.0, 23.25]);\n   pragma Assert (Candidate ([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) = [25.5, -18.0, 3.75]);\n   pragma Assert (Candidate ([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) = [305.0, 342.5, 270.0, 232.5]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n   end record;\n\n   function Tuple_Modulo (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple;\n   -- Write a function which takes two records of the same length and performs the element wise modulo.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Tuple_Modulo (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple", "test": "\n   end Tuple_Modulo;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Integer_Integer_Tuple renames Placeholder.Tuple_Modulo;\n\nbegin\n   pragma Assert (Candidate ((10, 4, 5, 6), (5, 6, 7, 5)) = (0, 4, 5, 1));\n   pragma Assert (Candidate ((11, 5, 6, 7), (6, 7, 8, 6)) = (5, 5, 6, 1));\n   pragma Assert (Candidate ((12, 6, 7, 8), (7, 8, 9, 7)) = (5, 6, 7, 1));\nend Main;", "language": "adb"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Min_Jumps (Steps : Integer_Integer_Tuple; D : Integer) return Float;\n   -- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Min_Jumps (Steps : Integer_Integer_Tuple; D : Integer) return Float", "test": "\n   end Min_Jumps;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Steps : Integer_Integer_Tuple; D : Integer) return Float renames Placeholder.Min_Jumps;\n\nbegin\n   pragma Assert (Candidate ((3, 4), 11) = 3.5);\n   pragma Assert (Candidate ((3, 4), 0) = 0);\n   pragma Assert (Candidate ((11, 14), 11) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_618_div_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Float_Array is array (Positive range <>) of Float;\n   function Div_List (Nums1 : Integer_Array; Nums2 : Integer_Array) return Float_Array;\n   -- Write a function to divide two Vectors element wise.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Div_List (Nums1 : Integer_Array; Nums2 : Integer_Array) return Float_Array", "test": "\n   end Div_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums1 : Integer_Array; Nums2 : Integer_Array) return Float_Array renames Placeholder.Div_List;\n\nbegin\n   pragma Assert (Candidate ([4, 5, 6], [1, 2, 3]) = [4.0, 2.5, 2.0]);\n   pragma Assert (Candidate ([3, 2], [1, 4]) = [3.0, 0.5]);\n   pragma Assert (Candidate ([90, 120], [50, 70]) = [1.8, 1.7142857142857142]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_619_move_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Move_Num (Test_Str : String) return String;\n   -- Write a function to move all the numbers to the end of the given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Move_Num (Test_Str : String) return String", "test": "\n   end Move_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Str : String) return String renames Placeholder.Move_Num;\n\nbegin\n   pragma Assert (Candidate (\"I1love143you55three3000thousand\") = \"Iloveyouthreethousand1143553000\");\n   pragma Assert (Candidate (\"Avengers124Assemble\") = \"AvengersAssemble124\");\n   pragma Assert (Candidate (\"Its11our12path13to14see15things16do17things\") = \"Itsourpathtoseethingsdothings11121314151617\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_622_get_median", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Get_Median (Arr1 : Integer_Array; Arr2 : Integer_Array; N : Integer) return Float;\n   -- Write a function to find the median of two sorted Vectors of same size.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Median (Arr1 : Integer_Array; Arr2 : Integer_Array; N : Integer) return Float", "test": "\n   end Get_Median;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr1 : Integer_Array; Arr2 : Integer_Array; N : Integer) return Float renames Placeholder.Get_Median;\n\nbegin\n   pragma Assert (Candidate ([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) = 16.0);\n   pragma Assert (Candidate ([2, 4, 8, 9], [7, 13, 19, 28], 4) = 8.5);\n   pragma Assert (Candidate ([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) = 25.0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_623_nth_nums", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Nth_Nums (Nums : Integer_Array; N : Integer) return Integer_Array;\n   -- Write a function to compute the n-th power of each number in a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Nth_Nums (Nums : Integer_Array; N : Integer) return Integer_Array", "test": "\n   end Nth_Nums;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array; N : Integer) return Integer_Array renames Placeholder.Nth_Nums;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n   pragma Assert (Candidate ([10, 20, 30], 3) = [1000, 8000, 27000]);\n   pragma Assert (Candidate ([12, 15], 5) = [248832, 759375]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_624_is_upper", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Upper (My_String : String) return String;\n   -- Write an adbthon function to convert a given string to uppercase.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Upper (My_String : String) return String", "test": "\n   end Is_Upper;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Is_Upper;\n\nbegin\n   pragma Assert (Candidate (\"person\") = \"PERSON\");\n   pragma Assert (Candidate (\"final\") = \"FINAL\");\n   pragma Assert (Candidate (\"Valid\") = \"VALID\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_625_swap_List", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Swap_List (Newlist : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to interchange the first and last element in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Swap_List (Newlist : Integer_Array) return Integer_Array", "test": "\n   end Swap_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Newlist : Integer_Array) return Integer_Array renames Placeholder.Swap_List;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = [3, 2, 1]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 4]) = [4, 2, 3, 4, 1]);\n   pragma Assert (Candidate ([4, 5, 6]) = [6, 5, 4]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_626_triangle_area", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   function Triangle_Area (R : Integer) return Integer_Option;\n   -- Write an adbthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Triangle_Area (R : Integer) return Integer_Option", "test": "\n   end Triangle_Area;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (R : Integer) return Integer_Option renames Placeholder.Triangle_Area;\n\nbegin\n   pragma Assert (Candidate (-1) = (Valid => False));\n   pragma Assert (Candidate (0) = (Valid => True, Value => 0));\n   pragma Assert (Candidate (2) = (Valid => True, Value => 4));\nend Main;", "language": "adb"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_First_Missing (My_Array : Integer_Array) return Integer;\n   -- Write an adbthon function to find the smallest missing number from a sorted Vector of natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_First_Missing (My_Array : Integer_Array) return Integer", "test": "\n   end Find_First_Missing;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_Array : Integer_Array) return Integer renames Placeholder.Find_First_Missing;\n\nbegin\n   pragma Assert (Candidate ([0, 1, 2, 3]) = 4);\n   pragma Assert (Candidate ([0, 1, 2, 6, 9]) = 3);\n   pragma Assert (Candidate ([2, 3, 5, 8, 9]) = 0);\nend Main;", "language": "adb"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Replace_Spaces (My_String : String) return String;\n   -- Write a function to replace all spaces in the given string with '%20'.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Replace_Spaces (My_String : String) return String", "test": "\n   end Replace_Spaces;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return String renames Placeholder.Replace_Spaces;\n\nbegin\n   pragma Assert (Candidate (\"My Name is Dawood\") = \"My%20Name%20is%20Dawood\");\n   pragma Assert (Candidate (\"I am a Programmer\") = \"I%20am%20a%20Programmer\");\n   pragma Assert (Candidate (\"I love Coding\") = \"I%20love%20Coding\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_629_Split", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Split (List : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to find even numbers from a Vector of numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Split (List : Integer_Array) return Integer_Array", "test": "\n   end Split;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List : Integer_Array) return Integer_Array renames Placeholder.Split;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = [2, 4]);\n   pragma Assert (Candidate ([4, 5, 6, 7, 8, 0, 1]) = [4, 6, 8, 0]);\n   pragma Assert (Candidate ([8, 12, 15, 19]) = [8, 12]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Get_Coordinates (Test_Tup : Integer_Integer_Tuple) return Integer_Vector_Vector_Array;\n   -- Write a function to extract all the adjacent coordinates of the given coordinate record.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Get_Coordinates (Test_Tup : Integer_Integer_Tuple) return Integer_Vector_Vector_Array", "test": "\n   end Get_Coordinates;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Test_Tup : Integer_Integer_Tuple) return Integer_Vector_Vector_Array renames Placeholder.Get_Coordinates;\n\nbegin\n   pragma Assert (Candidate ((3, 4)) = [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]);\n   pragma Assert (Candidate ((4, 5)) = [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]);\n   pragma Assert (Candidate ((5, 6)) = [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Replace_Spaces (Text : String) return String;\n   -- Write a function to replace whitespaces with an underscore and vice versa in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Replace_Spaces (Text : String) return String", "test": "\n   end Replace_Spaces;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return String renames Placeholder.Replace_Spaces;\n\nbegin\n   pragma Assert (Candidate (\"Jumanji The Jungle\") = \"Jumanji_The_Jungle\");\n   pragma Assert (Candidate (\"The_Avengers\") = \"The Avengers\");\n   pragma Assert (Candidate (\"Fast and Furious\") = \"Fast_and_Furious\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_632_move_zero", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Move_Zero (Num_List : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to move all zeroes to the end of the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Move_Zero (Num_List : Integer_Array) return Integer_Array", "test": "\n   end Move_Zero;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num_List : Integer_Array) return Integer_Array renames Placeholder.Move_Zero;\n\nbegin\n   pragma Assert (Candidate ([1, 0, 2, 0, 3, 4]) = [1, 2, 3, 4, 0, 0]);\n   pragma Assert (Candidate ([2, 3, 2, 0, 0, 4, 0, 5, 0]) = [2, 3, 2, 4, 5, 0, 0, 0, 0]);\n   pragma Assert (Candidate ([0, 1, 0, 1, 1]) = [1, 1, 1, 0, 0]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Pair_Xor_Sum (Arr : Integer_Array; N : Integer) return Integer;\n   -- Write an adbthon function to find the sum of xor of all pairs of numbers in the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Pair_Xor_Sum (Arr : Integer_Array; N : Integer) return Integer", "test": "\n   end Pair_Xor_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; N : Integer) return Integer renames Placeholder.Pair_Xor_Sum;\n\nbegin\n   pragma Assert (Candidate ([5, 9, 7, 6], 4) = 47);\n   pragma Assert (Candidate ([7, 3, 5], 3) = 12);\n   pragma Assert (Candidate ([7, 3], 2) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_635_heap_sort", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Heap_Sort (Iterable : Integer_Array) return Integer_Array;\n   -- Write a function to sort the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Heap_Sort (Iterable : Integer_Array) return Integer_Array", "test": "\n   end Heap_Sort;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Iterable : Integer_Array) return Integer_Array renames Placeholder.Heap_Sort;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   pragma Assert (Candidate ([25, 35, 22, 85, 14, 65, 75, 25, 58]) = [14, 22, 25, 25, 35, 58, 65, 75, 85]);\n   pragma Assert (Candidate ([7, 1, 9, 5]) = [1, 5, 7, 9]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Noprofit_Noloss (Actual_Cost : Integer; Sale_Amount : Integer) return Boolean;\n   -- Write a function to check whether the given amount has no profit and no loss\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Noprofit_Noloss (Actual_Cost : Integer; Sale_Amount : Integer) return Boolean", "test": "\n   end Noprofit_Noloss;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Actual_Cost : Integer; Sale_Amount : Integer) return Boolean renames Placeholder.Noprofit_Noloss;\n\nbegin\n   pragma Assert (Candidate (1500, 1200) = False);\n   pragma Assert (Candidate (100, 100) = True);\n   pragma Assert (Candidate (2000, 5000) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_638_wind_chill", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Wind_Chill (V : Integer; T : Integer) return Integer;\n   -- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Wind_Chill (V : Integer; T : Integer) return Integer", "test": "\n   end Wind_Chill;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (V : Integer; T : Integer) return Integer renames Placeholder.Wind_Chill;\n\nbegin\n   pragma Assert (Candidate (120, 35) = 40);\n   pragma Assert (Candidate (40, 20) = 19);\n   pragma Assert (Candidate (10, 8) = 6);\nend Main;", "language": "adb"}, {"task_id": "mbpp_639_sample_nam", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Sample_Nam (Sample_Names : Unbounded_String_Array) return Integer;\n   -- Write a function to sum the length of the names of a given Vector of names after removing the names that start with a lowercase letter.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Sample_Nam (Sample_Names : Unbounded_String_Array) return Integer", "test": "\n   end Sample_Nam;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Sample_Names : Unbounded_String_Array) return Integer renames Placeholder.Sample_Nam;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"sally\"), To_Unbounded_String (\"Dylan\"), To_Unbounded_String (\"rebecca\"), To_Unbounded_String (\"Diana\"), To_Unbounded_String (\"Joanne\"), To_Unbounded_String (\"keith\")]) = 16);\n   pragma Assert (Candidate ([To_Unbounded_String (\"php\"), To_Unbounded_String (\"res\"), To_Unbounded_String (\"Python\"), To_Unbounded_String (\"abcd\"), To_Unbounded_String (\"Java\"), To_Unbounded_String (\"aaa\")]) = 10);\n   pragma Assert (Candidate ([To_Unbounded_String (\"abcd\"), To_Unbounded_String (\"Python\"), To_Unbounded_String (\"abba\"), To_Unbounded_String (\"aba\")]) = 6);\nend Main;", "language": "adb"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Remove_Parenthesis (Items : Unbounded_String_Array) return String;\n   -- Write a function to remove the parenthesis and what is inbetween them from a string.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Remove_Parenthesis (Items : Unbounded_String_Array) return String", "test": "\n   end Remove_Parenthesis;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Items : Unbounded_String_Array) return String renames Placeholder.Remove_Parenthesis;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"python (chrome)\")]) = \"python\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"string(.abc)\")]) = \"string\");\n   pragma Assert (Candidate ([To_Unbounded_String (\"alpha(num)\")]) = \"alpha\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Nonagonal (N : Integer) return Integer;\n   -- Write a function to find the nth nonagonal number.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Nonagonal (N : Integer) return Integer", "test": "\n   end Is_Nonagonal;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Is_Nonagonal;\n\nbegin\n   pragma Assert (Candidate (10) = 325);\n   pragma Assert (Candidate (15) = 750);\n   pragma Assert (Candidate (18) = 1089);\nend Main;", "language": "adb"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Match_Wordz_Middle (Text : String) return Boolean;\n   -- Write a function that checks if a strings contains 'z', except at the start and end of the word.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Match_Wordz_Middle (Text : String) return Boolean", "test": "\n   end Text_Match_Wordz_Middle;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Match_Wordz_Middle;\n\nbegin\n   pragma Assert (Candidate (\"pythonzabc.\") = True);\n   pragma Assert (Candidate (\"zxyabc.\") = False);\n   pragma Assert (Candidate (\"  lang  .\") = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Reverse_Array_Upto_K (Input : Integer_Array; K : Integer) return Integer_Array;\n   -- Write an adbthon function to reverse an array upto a given position.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Reverse_Array_Upto_K (Input : Integer_Array; K : Integer) return Integer_Array", "test": "\n   end Reverse_Array_Upto_K;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Input : Integer_Array; K : Integer) return Integer_Array renames Placeholder.Reverse_Array_Upto_K;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6], 4) = [4, 3, 2, 1, 5, 6]);\n   pragma Assert (Candidate ([4, 5, 6, 7], 2) = [5, 4, 6, 7]);\n   pragma Assert (Candidate ([9, 8, 7, 6, 5], 3) = [7, 8, 9, 6, 5]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   type Integer_Integer_Integer_String_Integer_Dict_Map_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      String_Integer_Dict_Map_4 : String_Integer_Dict.Map;\n   end record;\n\n   function Add_Dict_To_Tuple (Test_Tup : Integer_Integer_Integer_Tuple; Test_Dict : String_Integer_Dict.Map) return Integer_Integer_Integer_String_Integer_Dict_Map_Tuple;\n   -- Write a function to add a Map to the record. The output should be a record.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Add_Dict_To_Tuple (Test_Tup : Integer_Integer_Integer_Tuple; Test_Dict : String_Integer_Dict.Map) return Integer_Integer_Integer_String_Integer_Dict_Map_Tuple", "test": "\n   end Add_Dict_To_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Integer_Dict;\n\n   function Candidate (Test_Tup : Integer_Integer_Integer_Tuple; Test_Dict : String_Integer_Dict.Map) return Integer_Integer_Integer_String_Integer_Dict_Map_Tuple renames Placeholder.Add_Dict_To_Tuple;\n\nbegin\n   pragma Assert (Candidate ((4, 5, 6), [\"MSAM\" => 1, \"is\" => 2, \"best\" => 3]) = (4, 5, 6, [\"MSAM\" => 1, \"is\" => 2, \"best\" => 3]));\n   pragma Assert (Candidate ((1, 2, 3), [\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4]) = (1, 2, 3, [\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4]));\n   pragma Assert (Candidate ((8, 9, 10), [\"POS\" => 3, \"is\" => 4, \"Okay\" => 5]) = (8, 9, 10, [\"POS\" => 3, \"is\" => 4, \"Okay\" => 5]));\nend Main;", "language": "adb"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Max_Average_Of_Path (Cost : Integer_Vector_Vector_Array) return Float;\n   -- Given a square matrix of size N*N given as a Vector of Vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Max_Average_Of_Path (Cost : Integer_Vector_Vector_Array) return Float", "test": "\n   end Max_Average_Of_Path;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Cost : Integer_Vector_Vector_Array) return Float renames Placeholder.Max_Average_Of_Path;\n\nbegin\n   pragma Assert (Candidate ([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) = 5.2);\n   pragma Assert (Candidate ([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) = 6.2);\n   pragma Assert (Candidate ([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) = 7.2);\n   pragma Assert (Candidate ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) = 5.8);\nend Main;", "language": "adb"}, {"task_id": "mbpp_722_filter_data", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Float_Integer_Tuple is record\n      Float_1 : Float;\n      Integer_2 : Integer;\n   end record;\n\n   package String_Float_Integer_Tuple_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Float_Integer_Tuple);\n   use String_Float_Integer_Tuple_Dict;\n   function Filter_Data (Students : String_Float_Integer_Tuple_Dict.Map; H : Float; W : Integer) return String_Float_Integer_Tuple_Dict.Map;\n   -- The input is given as - a Map with a student name as a key and a record of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Filter_Data (Students : String_Float_Integer_Tuple_Dict.Map; H : Float; W : Integer) return String_Float_Integer_Tuple_Dict.Map", "test": "\n   end Filter_Data;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Float_Integer_Tuple_Dict;\n\n   function Candidate (Students : String_Float_Integer_Tuple_Dict.Map; H : Float; W : Integer) return String_Float_Integer_Tuple_Dict.Map renames Placeholder.Filter_Data;\n\nbegin\n   pragma Assert (Candidate ([\"Cierra Vega\" => (6.2, 70), \"Alden Cantrell\" => (5.9, 65), \"Kierra Gentry\" => (6.0, 68), \"Pierre Cox\" => (5.8, 66)], 6.0, 70) = [\"Cierra Vega\" => (6.2, 70)]);\n   pragma Assert (Candidate ([\"Cierra Vega\" => (6.2, 70), \"Alden Cantrell\" => (5.9, 65), \"Kierra Gentry\" => (6.0, 68), \"Pierre Cox\" => (5.8, 66)], 5.9, 67) = [\"Cierra Vega\" => (6.2, 70), \"Kierra Gentry\" => (6.0, 68)]);\n   pragma Assert (Candidate ([\"Cierra Vega\" => (6.2, 70), \"Alden Cantrell\" => (5.9, 65), \"Kierra Gentry\" => (6.0, 68), \"Pierre Cox\" => (5.8, 66)], 5.7, 64) = [\"Cierra Vega\" => (6.2, 70), \"Alden Cantrell\" => (5.9, 65), \"Kierra Gentry\" => (6.0, 68), \"Pierre Cox\" => (5.8, 66)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_Same_Pair (Nums1 : Integer_Array; Nums2 : Integer_Array) return Integer;\n   -- The input is defined as two Vectors of the same length. Write a function to count indices where the Vectors have the same values.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Same_Pair (Nums1 : Integer_Array; Nums2 : Integer_Array) return Integer", "test": "\n   end Count_Same_Pair;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums1 : Integer_Array; Nums2 : Integer_Array) return Integer renames Placeholder.Count_Same_Pair;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) = 4);\n   pragma Assert (Candidate ([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) = 11);\n   pragma Assert (Candidate ([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) = 1);\n   pragma Assert (Candidate ([0, 1, 1, 2], [0, 1, 2, 2]) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Power_Base_Sum (Base : Integer; Power : Integer) return Integer;\n   -- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Power_Base_Sum (Base : Integer; Power : Integer) return Integer", "test": "\n   end Power_Base_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Base : Integer; Power : Integer) return Integer renames Placeholder.Power_Base_Sum;\n\nbegin\n   pragma Assert (Candidate (2, 100) = 115);\n   pragma Assert (Candidate (8, 10) = 37);\n   pragma Assert (Candidate (8, 15) = 62);\n   pragma Assert (Candidate (3, 3) = 9);\nend Main;", "language": "adb"}, {"task_id": "mbpp_725_extract_quotation", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Extract_Quotation (Text1 : String) return Unbounded_String_Array;\n   -- Write a function to extract values between quotation marks \" \" of the given string.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Extract_Quotation (Text1 : String) return Unbounded_String_Array", "test": "\n   end Extract_Quotation;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text1 : String) return Unbounded_String_Array renames Placeholder.Extract_Quotation;\n\nbegin\n   pragma Assert (Candidate (\"Cortex \"\"A53\"\" Based \"\"multi\"\" tasking \"\"Processor\"\"\") = [To_Unbounded_String (\"A53\"), To_Unbounded_String (\"multi\"), To_Unbounded_String (\"Processor\")]);\n   pragma Assert (Candidate (\"Cast your \"\"favorite\"\" entertainment \"\"apps\"\"\") = [To_Unbounded_String (\"favorite\"), To_Unbounded_String (\"apps\")]);\n   pragma Assert (Candidate (\"Watch content \"\"4k Ultra HD\"\" resolution with \"\"HDR 10\"\" Support\") = [To_Unbounded_String (\"4k Ultra HD\"), To_Unbounded_String (\"HDR 10\")]);\n   pragma Assert (Candidate (\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") = []);\nend Main;", "language": "adb"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Multiply_Elements (Test_Tup : Integer_Array) return Integer_Array;\n   -- Write a function that takes as input a Vector of numbers (t_1,...,t_{N+1}) and returns a Vector of length N where the i-th element of the record is equal to t_i * t_{i+1}.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Multiply_Elements (Test_Tup : Integer_Array) return Integer_Array", "test": "\n   end Multiply_Elements;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup : Integer_Array) return Integer_Array renames Placeholder.Multiply_Elements;\n\nbegin\n   pragma Assert (Candidate ([1, 5, 7, 8, 10]) = [5, 35, 56, 80]);\n   pragma Assert (Candidate ([2, 4, 5, 6, 7]) = [8, 20, 30, 42]);\n   pragma Assert (Candidate ([12, 13, 14, 9, 15]) = [156, 182, 126, 135]);\n   pragma Assert (Candidate ([12]) = []);\nend Main;", "language": "adb"}, {"task_id": "mbpp_728_sum_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sum_List (Lst1 : Integer_Array; Lst2 : Integer_Array) return Integer_Array;\n   -- Write a function takes as input two Vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_List (Lst1 : Integer_Array; Lst2 : Integer_Array) return Integer_Array", "test": "\n   end Sum_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Lst1 : Integer_Array; Lst2 : Integer_Array) return Integer_Array renames Placeholder.Sum_List;\n\nbegin\n   pragma Assert (Candidate ([10, 20, 30], [15, 25, 35]) = [25, 45, 65]);\n   pragma Assert (Candidate ([1, 2, 3], [5, 6, 7]) = [6, 8, 10]);\n   pragma Assert (Candidate ([15, 20, 30], [15, 45, 75]) = [30, 65, 105]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Lateralsurface_Cone (R : Integer; H : Integer) return Float;\n   -- Write a function to find the lateral surface area of a cone given radius r and the height h.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Lateralsurface_Cone (R : Integer; H : Integer) return Float", "test": "\n   end Lateralsurface_Cone;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (R : Integer; H : Integer) return Float renames Placeholder.Lateralsurface_Cone;\n\nbegin\n   pragma Assert (Candidate (5, 12) = 204.20352248333654);\n   pragma Assert (Candidate (10, 15) = 566.3586699569488);\n   pragma Assert (Candidate (19, 17) = 1521.8090132193388);\nend Main;", "language": "adb"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Replace_Specialchar (Text : String) return String;\n   -- Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Replace_Specialchar (Text : String) return String", "test": "\n   end Replace_Specialchar;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return String renames Placeholder.Replace_Specialchar;\n\nbegin\n   pragma Assert (Candidate (\"Python language, Programming language.\") = \"Python:language::Programming:language:\");\n   pragma Assert (Candidate (\"a b c,d e f\") = \"a:b:c:d:e:f\");\n   pragma Assert (Candidate (\"ram reshma,ram rahim\") = \"ram:reshma:ram:rahim\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_First_Occurrence (A : Integer_Array; X : Integer) return Integer;\n   -- Write a function to find the index of the first occurrence of a given number in a sorted array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_First_Occurrence (A : Integer_Array; X : Integer) return Integer", "test": "\n   end Find_First_Occurrence;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; X : Integer) return Integer renames Placeholder.Find_First_Occurrence;\n\nbegin\n   pragma Assert (Candidate ([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) = 1);\n   pragma Assert (Candidate ([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) = 2);\n   pragma Assert (Candidate ([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sum_Of_Subarray_Prod (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find sum of products of all possible subVectors of a given Vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_Of_Subarray_Prod (Arr : Integer_Array) return Integer", "test": "\n   end Sum_Of_Subarray_Prod;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Sum_Of_Subarray_Prod;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = 20);\n   pragma Assert (Candidate ([1, 2]) = 5);\n   pragma Assert (Candidate ([1, 2, 3, 4]) = 84);\nend Main;", "language": "adb"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Toggle_Middle_Bits (N : Integer) return Integer;\n   -- Write an adbthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Toggle_Middle_Bits (N : Integer) return Integer", "test": "\n   end Toggle_Middle_Bits;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Toggle_Middle_Bits;\n\nbegin\n   pragma Assert (Candidate (9) = 15);\n   pragma Assert (Candidate (10) = 12);\n   pragma Assert (Candidate (11) = 13);\n   pragma Assert (Candidate (65) = 127);\n   pragma Assert (Candidate (77) = 115);\nend Main;", "language": "adb"}, {"task_id": "mbpp_736_left_insertion", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Left_Insertion (A : Integer_Array; X : Integer) return Integer;\n   -- Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/adbthon-exercises/data-structures-and-algorithms/adbthon-data-structure-exercise-24.php\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Left_Insertion (A : Integer_Array; X : Integer) return Integer", "test": "\n   end Left_Insertion;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; X : Integer) return Integer renames Placeholder.Left_Insertion;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4, 5], 6) = 4);\n   pragma Assert (Candidate ([1, 2, 4, 5], 3) = 2);\n   pragma Assert (Candidate ([1, 2, 4, 5], 7) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_737_check_str", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_Str (My_String : String) return Boolean;\n   -- Write a function to check whether the given string is starting with a vowel or not using regex.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Str (My_String : String) return Boolean", "test": "\n   end Check_Str;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (My_String : String) return Boolean renames Placeholder.Check_Str;\n\nbegin\n   pragma Assert (Candidate (\"annie\") = True);\n   pragma Assert (Candidate (\"dawood\") = False);\n   pragma Assert (Candidate (\"Else\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Geometric_Sum (N : Integer) return Float;\n   -- Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/adbthon-exercises/data-structures-and-algorithms/adbthon-recursion-exercise-9.php\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Geometric_Sum (N : Integer) return Float", "test": "\n   end Geometric_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Float renames Placeholder.Geometric_Sum;\n\nbegin\n   pragma Assert (Candidate (7) = 1.9921875);\n   pragma Assert (Candidate (4) = 1.9375);\n   pragma Assert (Candidate (8) = 1.99609375);\nend Main;", "language": "adb"}, {"task_id": "mbpp_739_find_Index", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Find_Index (N : Integer) return Integer;\n   -- Write an adbthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Index (N : Integer) return Integer", "test": "\n   end Find_Index;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Find_Index;\n\nbegin\n   pragma Assert (Candidate (2) = 4);\n   pragma Assert (Candidate (3) = 14);\n   pragma Assert (Candidate (4) = 45);\nend Main;", "language": "adb"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n      Integer_4 : Integer;\n      Integer_5 : Integer;\n      Integer_6 : Integer;\n   end record;\n\n   package Integer_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => Integer, Element_Type => Integer);\n   use Integer_Integer_Dict;\n   function Tuple_To_Dict (Test_Tup : Integer_Integer_Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Dict.Map;\n   -- Write a function to convert the given record to a key-value Map using adjacent elements. https://www.geeksforgeeks.org/adbthon-convert-record-to-adjacent-pair-Map/\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Tuple_To_Dict (Test_Tup : Integer_Integer_Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Dict.Map", "test": "\n   end Tuple_To_Dict;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Integer_Dict;\n\n   function Candidate (Test_Tup : Integer_Integer_Integer_Integer_Integer_Integer_Tuple) return Integer_Integer_Dict.Map renames Placeholder.Tuple_To_Dict;\n\nbegin\n   pragma Assert (Candidate ((1, 5, 7, 10, 13, 5)) = [1 => 5, 7 => 10, 13 => 5]);\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 6)) = [1 => 2, 3 => 4, 5 => 6]);\n   pragma Assert (Candidate ((7, 8, 9, 10, 11, 12)) = [7 => 8, 9 => 10, 11 => 12]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function All_Characters_Same (S : String) return Boolean;\n   -- Write an adbthon function to check whether all the characters are same or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function All_Characters_Same (S : String) return Boolean", "test": "\n   end All_Characters_Same;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (S : String) return Boolean renames Placeholder.All_Characters_Same;\n\nbegin\n   pragma Assert (Candidate (\"python\") = False);\n   pragma Assert (Candidate (\"aaa\") = True);\n   pragma Assert (Candidate (\"data\") = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Area_Tetrahedron (Side : Integer) return Float;\n   -- Write a function to caluclate the area of a tetrahedron.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Area_Tetrahedron (Side : Integer) return Float", "test": "\n   end Area_Tetrahedron;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Side : Integer) return Float renames Placeholder.Area_Tetrahedron;\n\nbegin\n   pragma Assert (Candidate (3) = 15.588457268119894);\n   pragma Assert (Candidate (20) = 692.8203230275509);\n   pragma Assert (Candidate (10) = 173.20508075688772);\nend Main;", "language": "adb"}, {"task_id": "mbpp_743_rotate_right", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Rotate_Right (List : Integer_Array; M : Integer) return Integer_Array;\n   -- Write a function to rotate a given Vector by specified number of items to the right direction. https://www.geeksforgeeks.org/adbthon-program-right-rotate-Vector-n/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Rotate_Right (List : Integer_Array; M : Integer) return Integer_Array", "test": "\n   end Rotate_Right;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List : Integer_Array; M : Integer) return Integer_Array renames Placeholder.Rotate_Right;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Divisible_By_Digits (Startnum : Integer; Endnum : Integer) return Integer_Array;\n   -- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/adbthon-exercises/lambda/adbthon-lambda-exercise-24.php\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Divisible_By_Digits (Startnum : Integer; Endnum : Integer) return Integer_Array", "test": "\n   end Divisible_By_Digits;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Startnum : Integer; Endnum : Integer) return Integer_Array renames Placeholder.Divisible_By_Digits;\n\nbegin\n   pragma Assert (Candidate (1, 22) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n   pragma Assert (Candidate (1, 15) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n   pragma Assert (Candidate (20, 25) = [22, 24]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_746_sector_area", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Float;\n      when False =>\n         null;\n   end case;\nend record;\n   function Sector_Area (R : Integer; A : Integer) return Float_Option;\n   -- Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sector_Area (R : Integer; A : Integer) return Float_Option", "test": "\n   end Sector_Area;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (R : Integer; A : Integer) return Float_Option renames Placeholder.Sector_Area;\n\nbegin\n   pragma Assert (Candidate (4, 45) = (Valid => True, Value => 6.283185307179586));\n   pragma Assert (Candidate (9, 45) = (Valid => True, Value => 31.808625617596654));\n   pragma Assert (Candidate (9, 361) = (Valid => False));\nend Main;", "language": "adb"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Lcs_Of_Three (X : String; Y : String; Z : String) return Integer;\n   -- Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Lcs_Of_Three (X : String; Y : String; Z : String) return Integer", "test": "\n   end Lcs_Of_Three;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : String; Y : String; Z : String) return Integer renames Placeholder.Lcs_Of_Three;\n\nbegin\n   pragma Assert (Candidate (\"AGGT12\", \"12TXAYB\", \"12XBA\") = 2);\n   pragma Assert (Candidate (\"Reels\", \"Reelsfor\", \"ReelsforReels\") = 5);\n   pragma Assert (Candidate (\"abcd1e2\", \"bc12ea\", \"bd1ea\") = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Capital_Words_Spaces (Str1 : String) return String;\n   -- Write a function to put spaces between words starting with capital letters in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Capital_Words_Spaces (Str1 : String) return String", "test": "\n   end Capital_Words_Spaces;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str1 : String) return String renames Placeholder.Capital_Words_Spaces;\n\nbegin\n   pragma Assert (Candidate (\"Python\") = \"Python\");\n   pragma Assert (Candidate (\"PythonProgrammingExamples\") = \"Python Programming Examples\");\n   pragma Assert (Candidate (\"GetReadyToBeCodingFreak\") = \"Get Ready To Be Coding Freak\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Sort_Numeric_Strings (Nums_Str : Unbounded_String_Array) return Integer_Array;\n   -- Write a function to sort a given Vector of strings of numbers numerically. https://www.geeksforgeeks.org/adbthon-sort-numeric-strings-in-a-Vector/\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Sort_Numeric_Strings (Nums_Str : Unbounded_String_Array) return Integer_Array", "test": "\n   end Sort_Numeric_Strings;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums_Str : Unbounded_String_Array) return Integer_Array renames Placeholder.Sort_Numeric_Strings;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"4\"), To_Unbounded_String (\"12\"), To_Unbounded_String (\"45\"), To_Unbounded_String (\"7\"), To_Unbounded_String (\"0\"), To_Unbounded_String (\"100\"), To_Unbounded_String (\"200\"), To_Unbounded_String (\"-12\"), To_Unbounded_String (\"-500\")]) = [-500, -12, 0, 4, 7, 12, 45, 100, 200]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"2\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"8\"), To_Unbounded_String (\"4\"), To_Unbounded_String (\"7\"), To_Unbounded_String (\"9\"), To_Unbounded_String (\"8\"), To_Unbounded_String (\"2\"), To_Unbounded_String (\"6\"), To_Unbounded_String (\"5\"), To_Unbounded_String (\"1\"), To_Unbounded_String (\"6\"), To_Unbounded_String (\"1\"), To_Unbounded_String (\"2\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"4\"), To_Unbounded_String (\"6\"), To_Unbounded_String (\"9\"), To_Unbounded_String (\"1\"), To_Unbounded_String (\"2\")]) = [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);\n   pragma Assert (Candidate ([To_Unbounded_String (\"1\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"5\"), To_Unbounded_String (\"7\"), To_Unbounded_String (\"1\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"13\"), To_Unbounded_String (\"15\"), To_Unbounded_String (\"17\"), To_Unbounded_String (\"5\"), To_Unbounded_String (\"7 \"), To_Unbounded_String (\"9\"), To_Unbounded_String (\"1\"), To_Unbounded_String (\"11\")]) = [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_750_add_tuple", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   function Add_Tuple (Test_List : Integer_Array; Test_Tup : Integer_Integer_Tuple) return Integer_Array;\n   -- Write a function to add the given record to the given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Add_Tuple (Test_List : Integer_Array; Test_Tup : Integer_Integer_Tuple) return Integer_Array", "test": "\n   end Add_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Array; Test_Tup : Integer_Integer_Tuple) return Integer_Array renames Placeholder.Add_Tuple;\n\nbegin\n   pragma Assert (Candidate ([5, 6, 7], (9, 10)) = [5, 6, 7, 9, 10]);\n   pragma Assert (Candidate ([6, 7, 8], (10, 11)) = [6, 7, 8, 10, 11]);\n   pragma Assert (Candidate ([7, 8, 9], (11, 12)) = [7, 8, 9, 11, 12]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Check_Min_Heap (Arr : Integer_Array) return Boolean;\n   -- Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Min_Heap (Arr : Integer_Array) return Boolean", "test": "\n   end Check_Min_Heap;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Boolean renames Placeholder.Check_Min_Heap;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6]) = True);\n   pragma Assert (Candidate ([2, 3, 4, 5, 10, 15]) = True);\n   pragma Assert (Candidate ([2, 10, 4, 5, 3, 15]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Jacobsthal_Num (N : Integer) return Integer;\n   -- Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Jacobsthal_Num (N : Integer) return Integer", "test": "\n   end Jacobsthal_Num;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Jacobsthal_Num;\n\nbegin\n   pragma Assert (Candidate (5) = 11);\n   pragma Assert (Candidate (2) = 1);\n   pragma Assert (Candidate (4) = 5);\n   pragma Assert (Candidate (13) = 2731);\nend Main;", "language": "adb"}, {"task_id": "mbpp_753_min_k", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n   end record;\n\n   type Unbounded_String_Integer_Tuple_Array is array (Positive range <>) of Unbounded_String_Integer_Tuple;\n   function Min_K (Test_List : Unbounded_String_Integer_Tuple_Array; K : Integer) return Unbounded_String_Integer_Tuple_Array;\n   -- Write a function to find minimum k records from record Vector. https://www.geeksforgeeks.org/adbthon-find-minimum-k-records-from-record-Vector/ - in this case a verbatim coadb of test cases\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Min_K (Test_List : Unbounded_String_Integer_Tuple_Array; K : Integer) return Unbounded_String_Integer_Tuple_Array", "test": "\n   end Min_K;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Unbounded_String_Integer_Tuple_Array; K : Integer) return Unbounded_String_Integer_Tuple_Array renames Placeholder.Min_K;\n\nbegin\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Manjeet\"), 10), (To_Unbounded_String (\"Akshat\"), 4), (To_Unbounded_String (\"Akash\"), 2), (To_Unbounded_String (\"Nikhil\"), 8)], 2) = [(To_Unbounded_String (\"Akash\"), 2), (To_Unbounded_String (\"Akshat\"), 4)]);\n   pragma Assert (Candidate ([(To_Unbounded_String (\"Sanjeev\"), 11), (To_Unbounded_String (\"Angat\"), 5), (To_Unbounded_String (\"Akash\"), 3), (To_Unbounded_String (\"Nepin\"), 9)], 3) = [(To_Unbounded_String (\"Akash\"), 3), (To_Unbounded_String (\"Angat\"), 5), (To_Unbounded_String (\"Nepin\"), 9)]);\n   pragma Assert (Candidate ([(To_Unbounded_String (\"tanmay\"), 14), (To_Unbounded_String (\"Amer\"), 11), (To_Unbounded_String (\"Ayesha\"), 9), (To_Unbounded_String (\"SKD\"), 16)], 1) = [(To_Unbounded_String (\"Ayesha\"), 9)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Extract_Index_List (L1 : Integer_Array; L2 : Integer_Array; L3 : Integer_Array) return Integer_Array;\n   -- We say that an element is common for Vectors l1, l2, l3 if it appears in all three Vectors under the same index. Write a function to find common elements from three Vectors. The function should return a Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Extract_Index_List (L1 : Integer_Array; L2 : Integer_Array; L3 : Integer_Array) return Integer_Array", "test": "\n   end Extract_Index_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L1 : Integer_Array; L2 : Integer_Array; L3 : Integer_Array) return Integer_Array renames Placeholder.Extract_Index_List;\n\nbegin\n   pragma Assert (Candidate ([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) = [1, 7]);\n   pragma Assert (Candidate ([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) = [1, 6]);\n   pragma Assert (Candidate ([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) = [1, 5]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) = []);\nend Main;", "language": "adb"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Match_Zero_One (Text : String) return Boolean;\n   -- Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/adbthon-exercises/re/adbthon-re-exercise-3.php\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Match_Zero_One (Text : String) return Boolean", "test": "\n   end Text_Match_Zero_One;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Match_Zero_One;\n\nbegin\n   pragma Assert (Candidate (\"ac\") = False);\n   pragma Assert (Candidate (\"dc\") = False);\n   pragma Assert (Candidate (\"abbbba\") = True);\n   pragma Assert (Candidate (\"dsabbbba\") = True);\n   pragma Assert (Candidate (\"asbbbba\") = False);\n   pragma Assert (Candidate (\"abaaa\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   function Count_Reverse_Pairs (Test_List : Unbounded_String_Array) return Integer;\n   -- Write a function to count the pairs of reverse strings in the given string Vector. https://www.geeksforgeeks.org/adbthon-program-to-count-the-pairs-of-reverse-strings/\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Count_Reverse_Pairs (Test_List : Unbounded_String_Array) return Integer", "test": "\n   end Count_Reverse_Pairs;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Unbounded_String_Array) return Integer renames Placeholder.Count_Reverse_Pairs;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"julia\"), To_Unbounded_String (\"best\"), To_Unbounded_String (\"tseb\"), To_Unbounded_String (\"for\"), To_Unbounded_String (\"ailuj\")]) = 2);\n   pragma Assert (Candidate ([To_Unbounded_String (\"geeks\"), To_Unbounded_String (\"best\"), To_Unbounded_String (\"for\"), To_Unbounded_String (\"skeeg\")]) = 1);\n   pragma Assert (Candidate ([To_Unbounded_String (\"makes\"), To_Unbounded_String (\"best\"), To_Unbounded_String (\"sekam\"), To_Unbounded_String (\"for\"), To_Unbounded_String (\"rof\")]) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_759_is_decimal", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Decimal (Num : String) return Boolean;\n   -- Write a function to check whether a given string is a decimal number with a precision of 2.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Decimal (Num : String) return Boolean", "test": "\n   end Is_Decimal;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Num : String) return Boolean renames Placeholder.Is_Decimal;\n\nbegin\n   pragma Assert (Candidate (\"123.11\") = True);\n   pragma Assert (Candidate (\"e666.86\") = False);\n   pragma Assert (Candidate (\"3.124587\") = False);\n   pragma Assert (Candidate (\"1.11\") = True);\n   pragma Assert (Candidate (\"1.1.11\") = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_760_unique_Element", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Unique_Element (Arr : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether a Vector of numbers contains only one distinct element or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Unique_Element (Arr : Integer_Array) return Boolean", "test": "\n   end Unique_Element;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Boolean renames Placeholder.Unique_Element;\n\nbegin\n   pragma Assert (Candidate ([1, 1, 1]) = True);\n   pragma Assert (Candidate ([1, 2, 1, 2]) = False);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_Monthnumber_Number (Monthnum3 : Integer) return Boolean;\n   -- Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Monthnumber_Number (Monthnum3 : Integer) return Boolean", "test": "\n   end Check_Monthnumber_Number;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Monthnum3 : Integer) return Boolean renames Placeholder.Check_Monthnumber_Number;\n\nbegin\n   pragma Assert (Candidate (6) = True);\n   pragma Assert (Candidate (2) = False);\n   pragma Assert (Candidate (12) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Min_Diff (Arr : Integer_Array; N : Integer) return Integer;\n   -- Write an adbthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Min_Diff (Arr : Integer_Array; N : Integer) return Integer", "test": "\n   end Find_Min_Diff;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; N : Integer) return Integer renames Placeholder.Find_Min_Diff;\n\nbegin\n   pragma Assert (Candidate ([1, 5, 3, 19, 18, 25], 6) = 1);\n   pragma Assert (Candidate ([4, 3, 2, 6], 4) = 1);\n   pragma Assert (Candidate ([30, 5, 20, 9], 4) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_764_number_ctr", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Number_Ctr (Str : String) return Integer;\n   -- Write an adbthon function to count number of digits in a given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Number_Ctr (Str : String) return Integer", "test": "\n   end Number_Ctr;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Str : String) return Integer renames Placeholder.Number_Ctr;\n\nbegin\n   pragma Assert (Candidate (\"program2bedone\") = 1);\n   pragma Assert (Candidate (\"3wonders\") = 1);\n   pragma Assert (Candidate (\"123\") = 3);\n   pragma Assert (Candidate (\"3wond-1ers2\") = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_765_is_polite", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Polite (N : Integer) return Integer;\n   -- Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Polite (N : Integer) return Integer", "test": "\n   end Is_Polite;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Is_Polite;\n\nbegin\n   pragma Assert (Candidate (7) = 11);\n   pragma Assert (Candidate (4) = 7);\n   pragma Assert (Candidate (9) = 13);\nend Main;", "language": "adb"}, {"task_id": "mbpp_766_pair_wise", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Pair_Wise (L1 : Integer_Array) return Integer_Integer_Tuple_Array;\n   -- Write a function to return a Vector of all pairs of consecutive items in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Pair_Wise (L1 : Integer_Array) return Integer_Integer_Tuple_Array", "test": "\n   end Pair_Wise;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L1 : Integer_Array) return Integer_Integer_Tuple_Array renames Placeholder.Pair_Wise;\n\nbegin\n   pragma Assert (Candidate ([1, 1, 2, 3, 3, 4, 4, 5]) = [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]);\n   pragma Assert (Candidate ([1, 5, 7, 9, 10]) = [(1, 5), (5, 7), (7, 9), (9, 10)]);\n   pragma Assert (Candidate ([5, 1, 9, 7, 10]) = [(5, 1), (1, 9), (9, 7), (7, 10)]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Get_Pairs_Count (Arr : Integer_Array; Sum : Integer) return Integer;\n   -- Write an adbthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a Vector of numbers and the sum,\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Get_Pairs_Count (Arr : Integer_Array; Sum : Integer) return Integer", "test": "\n   end Get_Pairs_Count;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; Sum : Integer) return Integer renames Placeholder.Get_Pairs_Count;\n\nbegin\n   pragma Assert (Candidate ([1, 1, 1, 1], 2) = 6);\n   pragma Assert (Candidate ([1, 5, 7, -1, 5], 6) = 3);\n   pragma Assert (Candidate ([1, -2, 3], 1) = 1);\n   pragma Assert (Candidate ([-1, -2, 3], -3) = 1);\nend Main;", "language": "adb"}, {"task_id": "mbpp_769_Diff", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Diff (Li1 : Integer_Array; Li2 : Integer_Array) return Integer_Array;\n   -- Write an adbthon function to get the difference between two Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Diff (Li1 : Integer_Array; Li2 : Integer_Array) return Integer_Array", "test": "\n   end Diff;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Li1 : Integer_Array; Li2 : Integer_Array) return Integer_Array renames Placeholder.Diff;\n\nbegin\n   pragma Assert (Candidate ([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) = [10, 20, 30, 15]);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5], [6, 7, 1]) = [2, 3, 4, 5, 6, 7]);\n   pragma Assert (Candidate ([1, 2, 3], [6, 7, 1]) = [2, 3, 6, 7]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Odd_Num_Sum (N : Integer) return Integer;\n   -- Write an adbthon function to find the sum of fourth power of first n odd natural numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Odd_Num_Sum (N : Integer) return Integer", "test": "\n   end Odd_Num_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Integer renames Placeholder.Odd_Num_Sum;\n\nbegin\n   pragma Assert (Candidate (2) = 82);\n   pragma Assert (Candidate (3) = 707);\n   pragma Assert (Candidate (4) = 3108);\nend Main;", "language": "adb"}, {"task_id": "mbpp_771_check_expression", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Check_Expression (Exp : String) return Boolean;\n   -- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Expression (Exp : String) return Boolean", "test": "\n   end Check_Expression;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Exp : String) return Boolean renames Placeholder.Check_Expression;\n\nbegin\n   pragma Assert (Candidate (\"{()}[{}]\") = True);\n   pragma Assert (Candidate (\"{()}[{]\") = False);\n   pragma Assert (Candidate (\"{()}[{}][]({})\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_772_remove_length", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_Length (Test_Str : String; K : Integer) return String;\n   -- Write a function to remove all the words with k length in the given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_Length (Test_Str : String; K : Integer) return String", "test": "\n   end Remove_Length;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Str : String; K : Integer) return String renames Placeholder.Remove_Length;\n\nbegin\n   pragma Assert (Candidate (\"The person is most value tet\", 3) = \"person is most value\");\n   pragma Assert (Candidate (\"If you told me about this ok\", 4) = \"If you me about ok\");\n   pragma Assert (Candidate (\"Forces of darkeness is come into the play\", 4) = \"Forces of darkeness is the\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Integer_Integer_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   type Unbounded_String_Integer_Integer_Tuple_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String_Integer_Integer_Tuple;\n      when False =>\n         null;\n   end case;\nend record;\n   function Occurance_Substring (Text : String; Pattern : String) return Unbounded_String_Integer_Integer_Tuple_Option;\n   -- Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Occurance_Substring (Text : String; Pattern : String) return Unbounded_String_Integer_Integer_Tuple_Option", "test": "\n   end Occurance_Substring;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String; Pattern : String) return Unbounded_String_Integer_Integer_Tuple_Option renames Placeholder.Occurance_Substring;\n\nbegin\n   pragma Assert (Candidate (\"python programming, python language\", \"python\") = (Valid => True, Value => (To_Unbounded_String (\"python\"), 0, 6)));\n   pragma Assert (Candidate (\"python programming,programming language\", \"programming\") = (Valid => True, Value => (To_Unbounded_String (\"programming\"), 7, 18)));\n   pragma Assert (Candidate (\"python programming,programming language\", \"language\") = (Valid => True, Value => (To_Unbounded_String (\"language\"), 31, 39)));\n   pragma Assert (Candidate (\"c++ programming, c++ language\", \"python\") = (Valid => False));\nend Main;", "language": "adb"}, {"task_id": "mbpp_775_odd_position", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Odd_Position (Nums : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether every odd index contains odd numbers of a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Odd_Position (Nums : Integer_Array) return Boolean", "test": "\n   end Odd_Position;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Boolean renames Placeholder.Odd_Position;\n\nbegin\n   pragma Assert (Candidate ([2, 1, 4, 3, 6, 7, 6, 3]) = True);\n   pragma Assert (Candidate ([4, 1, 2]) = True);\n   pragma Assert (Candidate ([1, 2, 3]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_776_count_vowels", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Vowels (Test_Str : String) return Integer;\n   -- Write a function to count those characters which have vowels as their neighbors in the given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Vowels (Test_Str : String) return Integer", "test": "\n   end Count_Vowels;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Str : String) return Integer renames Placeholder.Count_Vowels;\n\nbegin\n   pragma Assert (Candidate (\"bestinstareels\") = 7);\n   pragma Assert (Candidate (\"partofthejourneyistheend\") = 12);\n   pragma Assert (Candidate (\"amazonprime\") = 5);\nend Main;", "language": "adb"}, {"task_id": "mbpp_777_find_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Find_Sum (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the sum of non-repeated elements in a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Sum (Arr : Integer_Array) return Integer", "test": "\n   end Find_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Find_Sum;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3, 1, 1, 4, 5, 6]) = 21);\n   pragma Assert (Candidate ([1, 10, 9, 4, 2, 10, 10, 45, 4]) = 71);\n   pragma Assert (Candidate ([12, 10, 9, 45, 2, 10, 10, 45, 10]) = 78);\nend Main;", "language": "adb"}, {"task_id": "mbpp_780_find_combinations", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n   end record;\n\n   type Integer_Integer_Tuple_Array is array (Positive range <>) of Integer_Integer_Tuple;\n   function Find_Combinations (Test_List : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Array;\n   -- Write a function to find the combinations of sums with records in the given record Vector. https://www.geeksforgeeks.org/adbthon-combinations-of-sum-with-records-in-record-Vector/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Find_Combinations (Test_List : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Array", "test": "\n   end Find_Combinations;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Integer_Integer_Tuple_Array) return Integer_Integer_Tuple_Array renames Placeholder.Find_Combinations;\n\nbegin\n   pragma Assert (Candidate ([(2, 4), (6, 7), (5, 1), (6, 10)]) = [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]);\n   pragma Assert (Candidate ([(3, 5), (7, 8), (6, 2), (7, 11)]) = [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]);\n   pragma Assert (Candidate ([(4, 6), (8, 9), (7, 3), (8, 12)]) = [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_781_count_divisors", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Count_Divisors (N : Integer) return Boolean;\n   -- Write an adbthon function to check whether the count of divisors is even. https://www.w3resource.com/adbthon-exercises/basic/adbthon-basic-1-exercise-24.php\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Divisors (N : Integer) return Boolean", "test": "\n   end Count_Divisors;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Count_Divisors;\n\nbegin\n   pragma Assert (Candidate (10) = True);\n   pragma Assert (Candidate (100) = False);\n   pragma Assert (Candidate (125) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Odd_Length_Sum (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Odd_Length_Sum (Arr : Integer_Array) return Integer", "test": "\n   end Odd_Length_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Odd_Length_Sum;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4]) = 14);\n   pragma Assert (Candidate ([1, 2, 1, 2]) = 15);\n   pragma Assert (Candidate ([1, 7]) = 8);\nend Main;", "language": "adb"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Float_Array is array (Positive range <>) of Float;\n   function Rgb_To_Hsv (R : Integer; G : Integer; B : Integer) return Float_Array;\n   -- Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Rgb_To_Hsv (R : Integer; G : Integer; B : Integer) return Float_Array", "test": "\n   end Rgb_To_Hsv;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (R : Integer; G : Integer; B : Integer) return Float_Array renames Placeholder.Rgb_To_Hsv;\n\nbegin\n   pragma Assert (Candidate (255, 255, 255) = [0.0, 0.0, 100.0]);\n   pragma Assert (Candidate (0, 215, 0) = [120.0, 100.0, 84.31372549019608]);\n   pragma Assert (Candidate (10, 215, 110) = [149.26829268292684, 95.34883720930233, 84.31372549019608]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Mul_Even_Odd (List1 : Integer_Array) return Integer;\n   -- Write a function to find the product of first even and odd number of a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Mul_Even_Odd (List1 : Integer_Array) return Integer", "test": "\n   end Mul_Even_Odd;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (List1 : Integer_Array) return Integer renames Placeholder.Mul_Even_Odd;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 5, 7, 4, 1, 6, 8]) = 4);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) = 2);\n   pragma Assert (Candidate ([1, 5, 7, 9, 10]) = 10);\nend Main;", "language": "adb"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   function Tuple_Str_Int (Test_Str : String) return Integer_Integer_Integer_Tuple;\n   -- Write a function to convert record string to integer record.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Tuple_Str_Int (Test_Str : String) return Integer_Integer_Integer_Tuple", "test": "\n   end Tuple_Str_Int;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Str : String) return Integer_Integer_Integer_Tuple renames Placeholder.Tuple_Str_Int;\n\nbegin\n   pragma Assert (Candidate (\"(7, 8, 9)\") = (7, 8, 9));\n   pragma Assert (Candidate (\"(1, 2, 3)\") = (1, 2, 3));\n   pragma Assert (Candidate (\"(4, 5, 6)\") = (4, 5, 6));\n   pragma Assert (Candidate (\"(7, 81, 19)\") = (7, 81, 19));\nend Main;", "language": "adb"}, {"task_id": "mbpp_786_right_insertion", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Right_Insertion (A : Integer_Array; X : Integer) return Integer;\n   -- Write a function to locate the right insertion point for a specified value in sorted order.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Right_Insertion (A : Integer_Array; X : Integer) return Integer", "test": "\n   end Right_Insertion;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (A : Integer_Array; X : Integer) return Integer renames Placeholder.Right_Insertion;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 4, 5], 6) = 4);\n   pragma Assert (Candidate ([1, 2, 4, 5], 3) = 2);\n   pragma Assert (Candidate ([1, 2, 4, 5], 7) = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_787_text_match_three", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Match_Three (Text : String) return Boolean;\n   -- Write a function that matches a string that has an a followed by three 'b'.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Match_Three (Text : String) return Boolean", "test": "\n   end Text_Match_Three;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Match_Three;\n\nbegin\n   pragma Assert (Candidate (\"ac\") = False);\n   pragma Assert (Candidate (\"dc\") = False);\n   pragma Assert (Candidate (\"abbbba\") = True);\n   pragma Assert (Candidate (\"caacabbbba\") = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_788_new_tuple", "prompt": "pragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Positive range <>) of Unbounded_String;\n   type Unbounded_String_Unbounded_String_Unbounded_String_Tuple is record\n      Unbounded_String_1 : Unbounded_String;\n      Unbounded_String_2 : Unbounded_String;\n      Unbounded_String_3 : Unbounded_String;\n   end record;\n\n   function New_Tuple (Test_List : Unbounded_String_Array; Test_Str : String) return Unbounded_String_Unbounded_String_Unbounded_String_Tuple;\n   -- Write a function to create a new record from the given string and Vector.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function New_Tuple (Test_List : Unbounded_String_Array; Test_Str : String) return Unbounded_String_Unbounded_String_Unbounded_String_Tuple", "test": "\n   end New_Tuple;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_List : Unbounded_String_Array; Test_Str : String) return Unbounded_String_Unbounded_String_Unbounded_String_Tuple renames Placeholder.New_Tuple;\n\nbegin\n   pragma Assert (Candidate ([To_Unbounded_String (\"WEB\"), To_Unbounded_String (\"is\")], \"best\") = (To_Unbounded_String (\"WEB\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"best\")));\n   pragma Assert (Candidate ([To_Unbounded_String (\"We\"), To_Unbounded_String (\"are\")], \"Developers\") = (To_Unbounded_String (\"We\"), To_Unbounded_String (\"are\"), To_Unbounded_String (\"Developers\")));\n   pragma Assert (Candidate ([To_Unbounded_String (\"Part\"), To_Unbounded_String (\"is\")], \"Wrong\") = (To_Unbounded_String (\"Part\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"Wrong\")));\nend Main;", "language": "adb"}, {"task_id": "mbpp_790_even_position", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Even_Position (Nums : Integer_Array) return Boolean;\n   -- Write an adbthon function to check whether every even index contains even numbers of a given Vector.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Even_Position (Nums : Integer_Array) return Boolean", "test": "\n   end Even_Position;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Boolean renames Placeholder.Even_Position;\n\nbegin\n   pragma Assert (Candidate ([3, 2, 1]) = False);\n   pragma Assert (Candidate ([1, 2, 3]) = False);\n   pragma Assert (Candidate ([2, 1, 4]) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_792_count_list", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   function Count_List (Input_List : Integer_Vector_Vector_Array) return Integer;\n   -- Write an adbthon function to count the number of Vectors in a given number of Vectors.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Count_List (Input_List : Integer_Vector_Vector_Array) return Integer", "test": "\n   end Count_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Input_List : Integer_Vector_Vector_Array) return Integer renames Placeholder.Count_List;\n\nbegin\n   pragma Assert (Candidate ([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) = 4);\n   pragma Assert (Candidate ([[1, 2], [2, 3], [4, 5]]) = 3);\n   pragma Assert (Candidate ([[1, 0], [2, 0]]) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_793_last", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Last (Arr : Integer_Array; X : Integer) return Integer;\n   -- Write an adbthon function to find the last position of an element in a sorted array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Last (Arr : Integer_Array; X : Integer) return Integer", "test": "\n   end Last;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array; X : Integer) return Integer renames Placeholder.Last;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3], 1) = 0);\n   pragma Assert (Candidate ([1, 1, 1, 2, 3, 4], 1) = 2);\n   pragma Assert (Candidate ([2, 3, 2, 3, 6, 8, 9], 3) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Text_Starta_Endb (Text : String) return Boolean;\n   -- Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Text_Starta_Endb (Text : String) return Boolean", "test": "\n   end Text_Starta_Endb;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return Boolean renames Placeholder.Text_Starta_Endb;\n\nbegin\n   pragma Assert (Candidate (\"aabbbb\") = True);\n   pragma Assert (Candidate (\"aabAbbbc\") = False);\n   pragma Assert (Candidate (\"accddbbjjj\") = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_796_return_sum", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage Placeholder is\n   package String_Integer_Dict is new Ada.Containers.Indefinite_Ordered_Maps (Key_Type => String, Element_Type => Integer);\n   use String_Integer_Dict;\n   function Return_Sum (Dict : String_Integer_Dict.Map) return Integer;\n   -- Write function to find the sum of all items in the given Map.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\n\npackage body Placeholder is\n   function Return_Sum (Dict : String_Integer_Dict.Map) return Integer", "test": "\n   end Return_Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Indefinite_Ordered_Maps;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use String_Integer_Dict;\n\n   function Candidate (Dict : String_Integer_Dict.Map) return Integer renames Placeholder.Return_Sum;\n\nbegin\n   pragma Assert (Candidate ([\"a\" => 100, \"b\" => 200, \"c\" => 300]) = 600);\n   pragma Assert (Candidate ([\"a\" => 25, \"b\" => 18, \"c\" => 45]) = 88);\n   pragma Assert (Candidate ([\"a\" => 36, \"b\" => 39, \"c\" => 49]) = 124);\nend Main;", "language": "adb"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Sum_In_Range (L : Integer; R : Integer) return Integer;\n   -- Write an adbthon function to find the sum of all odd natural numbers within the range l and r.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Sum_In_Range (L : Integer; R : Integer) return Integer", "test": "\n   end Sum_In_Range;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (L : Integer; R : Integer) return Integer renames Placeholder.Sum_In_Range;\n\nbegin\n   pragma Assert (Candidate (2, 5) = 8);\n   pragma Assert (Candidate (5, 7) = 12);\n   pragma Assert (Candidate (7, 13) = 40);\nend Main;", "language": "adb"}, {"task_id": "mbpp_798__sum", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function _Sum (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to find the sum of an array.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function _Sum (Arr : Integer_Array) return Integer", "test": "\n   end _Sum;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder._Sum;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = 6);\n   pragma Assert (Candidate ([15, 12, 13, 10]) = 50);\n   pragma Assert (Candidate ([0, 1, 2]) = 3);\nend Main;", "language": "adb"}, {"task_id": "mbpp_799_left_rotate", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Left_Rotate (N : Integer; D : Integer) return Integer;\n   -- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Left_Rotate (N : Integer; D : Integer) return Integer", "test": "\n   end Left_Rotate;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer; D : Integer) return Integer renames Placeholder.Left_Rotate;\n\nbegin\n   pragma Assert (Candidate (16, 2) = 64);\n   pragma Assert (Candidate (10, 2) = 40);\n   pragma Assert (Candidate (99, 3) = 792);\n   pragma Assert (Candidate (99, 3) = 792);\n   pragma Assert (Candidate (1, 3) = 8);\n   pragma Assert (Candidate (5, 3) = 40);\n   pragma Assert (Candidate (29, 3) = 232);\nend Main;", "language": "adb"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Remove_All_Spaces (Text : String) return String;\n   -- Write a function to remove all whitespaces from a string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Remove_All_Spaces (Text : String) return String", "test": "\n   end Remove_All_Spaces;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Text : String) return String renames Placeholder.Remove_All_Spaces;\n\nbegin\n   pragma Assert (Candidate (\"python  program\") = \"pythonprogram\");\n   pragma Assert (Candidate (\"python   programming    language\") = \"pythonprogramminglanguage\");\n   pragma Assert (Candidate (\"python                     program\") = \"pythonprogram\");\n   pragma Assert (Candidate (\"   python                     program\") = \"pythonprogram\");\nend Main;", "language": "adb"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Test_Three_Equal (X : Integer; Y : Integer; Z : Integer) return Integer;\n   -- Write an adbthon function to count the number of equal numbers from three given integers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Test_Three_Equal (X : Integer; Y : Integer; Z : Integer) return Integer", "test": "\n   end Test_Three_Equal;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (X : Integer; Y : Integer; Z : Integer) return Integer renames Placeholder.Test_Three_Equal;\n\nbegin\n   pragma Assert (Candidate (1, 1, 1) = 3);\n   pragma Assert (Candidate (-1, -2, -3) = 0);\n   pragma Assert (Candidate (1, 2, 2) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_802_count_rotation", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Count_Rotation (Arr : Integer_Array) return Integer;\n   -- Write an adbthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Count_Rotation (Arr : Integer_Array) return Integer", "test": "\n   end Count_Rotation;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Count_Rotation;\n\nbegin\n   pragma Assert (Candidate ([3, 2, 1]) = 1);\n   pragma Assert (Candidate ([4, 5, 1, 2, 3]) = 2);\n   pragma Assert (Candidate ([7, 8, 9, 1, 2, 3]) = 3);\n   pragma Assert (Candidate ([1, 2, 3]) = 0);\n   pragma Assert (Candidate ([1, 3, 2]) = 2);\nend Main;", "language": "adb"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Is_Perfect_Square (N : Integer) return Boolean;\n   -- Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Perfect_Square (N : Integer) return Boolean", "test": "\n   end Is_Perfect_Square;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Perfect_Square;\n\nbegin\n   pragma Assert (Candidate (10) = False);\n   pragma Assert (Candidate (36) = True);\n   pragma Assert (Candidate (14) = False);\n   pragma Assert (Candidate (196) = True);\n   pragma Assert (Candidate (125) = False);\n   pragma Assert (Candidate (15625) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_804_is_product_even", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Is_Product_Even (Arr : Integer_Array) return Boolean;\n   -- Write a function to check whether the product of numbers in a Vector is even or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Is_Product_Even (Arr : Integer_Array) return Boolean", "test": "\n   end Is_Product_Even;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Arr : Integer_Array) return Boolean renames Placeholder.Is_Product_Even;\n\nbegin\n   pragma Assert (Candidate ([1, 2, 3]) = True);\n   pragma Assert (Candidate ([1, 2, 1, 4]) = True);\n   pragma Assert (Candidate ([1, 1]) = False);\nend Main;", "language": "adb"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "pragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage Placeholder is\n   package Integer_Vector is new Ada.Containers.Vectors (Index_Type => Positive, Element_Type => Integer);\n   use Integer_Vector;\n   type Integer_Vector_Vector_Array is array (Positive range <>) of Integer_Vector.Vector;\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Max_Sum_List (Lists : Integer_Vector_Vector_Array) return Integer_Array;\n   -- Write a function that returns the Vector in a Vector of Vectors whose sum of elements is the highest.\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\n\npackage body Placeholder is\n   function Max_Sum_List (Lists : Integer_Vector_Vector_Array) return Integer_Array", "test": "\n   end Max_Sum_List;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Ada.Containers.Vectors;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n   use Integer_Vector;\n\n   function Candidate (Lists : Integer_Vector_Vector_Array) return Integer_Array renames Placeholder.Max_Sum_List;\n\nbegin\n   pragma Assert (Candidate ([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) = [10, 11, 12]);\n   pragma Assert (Candidate ([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) = [12, 11, 10]);\n   pragma Assert (Candidate ([[2, 3, 1]]) = [2, 3, 1]);\nend Main;", "language": "adb"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   function Max_Run_Uppercase (Test_Str : String) return Integer;\n   -- Write a function to find maximum run of uppercase characters in the given string.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Max_Run_Uppercase (Test_Str : String) return Integer", "test": "\n   end Max_Run_Uppercase;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Str : String) return Integer renames Placeholder.Max_Run_Uppercase;\n\nbegin\n   pragma Assert (Candidate (\"GeMKSForGERksISBESt\") = 5);\n   pragma Assert (Candidate (\"PrECIOusMOVemENTSYT\") = 6);\n   pragma Assert (Candidate (\"GooGLEFluTTER\") = 4);\nend Main;", "language": "adb"}, {"task_id": "mbpp_807_first_odd", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function First_Odd (Nums : Integer_Array) return Integer;\n   -- Write an adbthon function to find the first odd number in a given Vector of numbers.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function First_Odd (Nums : Integer_Array) return Integer", "test": "\n   end First_Odd;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.First_Odd;\n\nbegin\n   pragma Assert (Candidate ([1, 3, 5]) = 1);\n   pragma Assert (Candidate ([2, 4, 1, 3]) = 1);\n   pragma Assert (Candidate ([8, 9, 1]) = 9);\nend Main;", "language": "adb"}, {"task_id": "mbpp_808_check_K", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Array is array (Positive range <>) of Integer;\n   function Check_K (Test_Tup : Integer_Array; K : Integer) return Boolean;\n   -- Write a function to check if the given records contain the k or not.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_K (Test_Tup : Integer_Array; K : Integer) return Boolean", "test": "\n   end Check_K;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup : Integer_Array; K : Integer) return Boolean renames Placeholder.Check_K;\n\nbegin\n   pragma Assert (Candidate ([10, 4, 5, 6, 8], 6) = True);\n   pragma Assert (Candidate ([1, 2, 3, 4, 5, 6], 7) = False);\n   pragma Assert (Candidate ([7, 8, 9, 44, 11, 12], 11) = True);\nend Main;", "language": "adb"}, {"task_id": "mbpp_809_check_smaller", "prompt": "pragma Ada_2022;\n\npackage Placeholder is\n   type Integer_Integer_Integer_Tuple is record\n      Integer_1 : Integer;\n      Integer_2 : Integer;\n      Integer_3 : Integer;\n   end record;\n\n   function Check_Smaller (Test_Tup1 : Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Tuple) return Boolean;\n   -- Write a function to check if each element of second record is smaller than its corresponding element in the first record.\n\nend Placeholder;\n\npragma Ada_2022;\n\npackage body Placeholder is\n   function Check_Smaller (Test_Tup1 : Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Tuple) return Boolean", "test": "\n   end Check_Smaller;\n\nend Placeholder;\n\npragma Ada_2022;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n\n\n   function Candidate (Test_Tup1 : Integer_Integer_Integer_Tuple; Test_Tup2 : Integer_Integer_Integer_Tuple) return Boolean renames Placeholder.Check_Smaller;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3), (2, 3, 4)) = False);\n   pragma Assert (Candidate ((4, 5, 6), (3, 4, 5)) = True);\n   pragma Assert (Candidate ((11, 12, 13), (10, 11, 12)) = True);\nend Main;", "language": "adb"}]