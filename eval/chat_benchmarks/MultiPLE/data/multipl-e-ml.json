[{"task_id": "HumanEval_0_has_close_elements", "prompt": "(**Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> has_close_elements [1.0; 2.0; 3.0] 0.5\n * false\n * >>> has_close_elements [1.0; 2.8; 3.0; 4.0; 5.0; 2.0] 0.3\n * true\n*)\nlet has_close_elements (numbers : float list) (threshold : float) : bool =", "test": "\nlet assertions =\n let candidate = has_close_elements in\n  (assert ((candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2] 0.3) = true));\n  (assert ((candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2] 0.05) = false));\n  (assert ((candidate [1.0; 2.0; 5.9; 4.0; 5.0] 0.95) = true));\n  (assert ((candidate [1.0; 2.0; 5.9; 4.0; 5.0] 0.8) = false));\n  (assert ((candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.0] 0.1) = true));\n  (assert ((candidate [1.1; 2.2; 3.1; 4.1; 5.1] 1.0) = true));\n  (assert ((candidate [1.1; 2.2; 3.1; 4.1; 5.1] 0.5) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "(**Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n * separate those group into separate strings and return the list of those.\n * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n * Ignore any spaces in the input string.\n * >>> separate_paren_groups \"( ) (( )) (( )( ))\"\n * [\"()\"; \"(())\"; \"(()())\"]\n*)\nlet separate_paren_groups (paren_string : string) : string list =", "test": "\nlet assertions =\n let candidate = separate_paren_groups in\n  (assert ((candidate \"(()()) ((())) () ((())()())\") = [\"(()())\"; \"((()))\"; \"()\"; \"((())()())\"]));\n  (assert ((candidate \"() (()) ((())) (((())))\") = [\"()\"; \"(())\"; \"((()))\"; \"(((())))\"]));\n  (assert ((candidate \"(()(())((())))\") = [\"(()(())((())))\"]));\n  (assert ((candidate \"( ) (( )) (( )( ))\") = [\"()\"; \"(())\"; \"(()())\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "(**Given a positive floating point number, it can be decomposed into\n * and integer part (largest integer smaller than given number) and decimals\n * (leftover part always smaller than 1).\n * Return the decimal part of the number.\n * >>> truncate_number 3.5\n * 0.5\n*)\nlet truncate_number (number : float) : float =", "test": "\nlet assertions =\n let candidate = truncate_number in\n  (assert ((candidate 3.5) = 0.5));\n  (assert ((candidate 1.25) = 0.25));\n  (assert ((candidate 123.0) = 0.0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_3_below_zero", "prompt": "(**You're given a list of deposit and withdrawal operations on a bank account that starts with\n * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n * at that point function should return true. Otherwise it should return false.\n * >>> below_zero [1; 2; 3]\n * false\n * >>> below_zero [1; 2; (~4); 5]\n * true\n*)\nlet below_zero (operations : int list) : bool =", "test": "\nlet assertions =\n let candidate = below_zero in\n  (assert ((candidate []) = false));\n  (assert ((candidate [1; 2; (~3); 1; 2; (~3)]) = false));\n  (assert ((candidate [1; 2; (~4); 5; 6]) = true));\n  (assert ((candidate [1; (~1); 2; (~2); 5; (~5); 4; (~4)]) = false));\n  (assert ((candidate [1; (~1); 2; (~2); 5; (~5); 4; (~5)]) = true));\n  (assert ((candidate [1; (~2); 2; (~2); 5; (~5); 4; (~4)]) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "(**For a given list of input numbers, calculate Mean Absolute Deviation\n * around the mean of this dataset.\n * Mean Absolute Deviation is the average absolute difference between each\n * element and a centerpoint (mean in this case):\n * MAD = average | x - x_mean |\n * >>> mean_absolute_deviation [1.0; 2.0; 3.0; 4.0]\n * 1.0\n*)\nlet mean_absolute_deviation (numbers : float list) : float =", "test": "\nlet assertions =\n let candidate = mean_absolute_deviation in\n  (assert ((candidate [1.0; 2.0]) = 0.5));\n  (assert ((candidate [1.0; 2.0; 3.0; 4.0]) = 1.0));\n  (assert ((candidate [1.0; 2.0; 3.0; 4.0; 5.0]) = 1.2));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_5_intersperse", "prompt": "(**Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n * >>> intersperse [] 4\n * []\n * >>> intersperse [1; 2; 3] 4\n * [1; 4; 2; 4; 3]\n*)\nlet intersperse (numbers : int list) (delimeter : int) : int list =", "test": "\nlet assertions =\n let candidate = intersperse in\n  (assert ((candidate [] 7) = []));\n  (assert ((candidate [5; 6; 3; 2] 8) = [5; 8; 6; 8; 3; 8; 2]));\n  (assert ((candidate [2; 2; 2] 2) = [2; 2; 2; 2; 2]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "(**Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n * For each of the group, output the deepest level of nesting of parentheses.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n * >>> parse_nested_parens \"(()()) ((())) () ((())()())\"\n * [2; 3; 1; 3]\n*)\nlet parse_nested_parens (paren_string : string) : int list =", "test": "\nlet assertions =\n let candidate = parse_nested_parens in\n  (assert ((candidate \"(()()) ((())) () ((())()())\") = [2; 3; 1; 3]));\n  (assert ((candidate \"() (()) ((())) (((())))\") = [1; 2; 3; 4]));\n  (assert ((candidate \"(()(())((())))\") = [4]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "(**Filter an input list of strings only for ones that contain given substring\n * >>> filter_by_substring [] \"a\"\n * []\n * >>> filter_by_substring [\"abc\"; \"bacd\"; \"cde\"; \"array\"] \"a\"\n * [\"abc\"; \"bacd\"; \"array\"]\n*)\nlet filter_by_substring (strings : string list) (substring : string) : string list =", "test": "\nlet assertions =\n let candidate = filter_by_substring in\n  (assert ((candidate [] \"john\") = []));\n  (assert ((candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\") = [\"xxx\"; \"xxxAAA\"; \"xxx\"]));\n  (assert ((candidate [\"xxx\"; \"asd\"; \"aaaxxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xx\") = [\"xxx\"; \"aaaxxy\"; \"xxxAAA\"; \"xxx\"]));\n  (assert ((candidate [\"grunt\"; \"trumpet\"; \"prune\"; \"gruesome\"] \"run\") = [\"grunt\"; \"prune\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_8_sum_product", "prompt": "(**For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n * Empty sum should be equal to 0 and empty product should be equal to 1.\n * >>> sum_product []\n * (0, 1)\n * >>> sum_product [1; 2; 3; 4]\n * (10, 24)\n*)\nlet sum_product (numbers : int list) :  int * int =", "test": "\nlet assertions =\n let candidate = sum_product in\n  (assert ((candidate []) = (0, 1)));\n  (assert ((candidate [1; 1; 1]) = (3, 1)));\n  (assert ((candidate [100; 0]) = (100, 0)));\n  (assert ((candidate [3; 5; 7]) = (15, 105)));\n  (assert ((candidate [10]) = (10, 10)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "(**From a given list of integers, generate a list of rolling maximum element found until given moment\n * in the sequence.\n * >>> rolling_max [1; 2; 3; 2; 3; 4; 2]\n * [1; 2; 3; 3; 3; 4; 4]\n*)\nlet rolling_max (numbers : int list) : int list =", "test": "\nlet assertions =\n let candidate = rolling_max in\n  (assert ((candidate []) = []));\n  (assert ((candidate [1; 2; 3; 4]) = [1; 2; 3; 4]));\n  (assert ((candidate [4; 3; 2; 1]) = [4; 4; 4; 4]));\n  (assert ((candidate [3; 2; 3; 100; 3]) = [3; 3; 3; 100; 100]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "(**Find the shortest palindrome that begins with a supplied string.\n * Algorithm idea is simple:\n * - Find the longest postfix of supplied string that is a palindrome.\n * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n * >>> make_palindrome \"\"\n * \"\"\n * >>> make_palindrome \"cat\"\n * \"catac\"\n * >>> make_palindrome \"cata\"\n * \"catac\"\n*)\nlet make_palindrome (string : string) : string =", "test": "\nlet assertions =\n let candidate = make_palindrome in\n  (assert ((candidate \"\") = \"\"));\n  (assert ((candidate \"x\") = \"x\"));\n  (assert ((candidate \"xyz\") = \"xyzyx\"));\n  (assert ((candidate \"xyx\") = \"xyx\"));\n  (assert ((candidate \"jerry\") = \"jerryrrej\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_11_string_xor", "prompt": "(**Input are two strings a and b consisting only of 1s and 0s.\n * Perform binary XOR on these inputs and return result also as a string.\n * >>> string_xor \"010\" \"110\"\n * \"100\"\n*)\nlet string_xor (a : string) (b : string) : string =", "test": "\nlet assertions =\n let candidate = string_xor in\n  (assert ((candidate \"111000\" \"101010\") = \"010010\"));\n  (assert ((candidate \"1\" \"1\") = \"0\"));\n  (assert ((candidate \"0101\" \"0000\") = \"0101\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_12_longest", "prompt": "(**Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return None in case the input list is empty.\n * >>> longest []\n * Some(None)\n * >>> longest [\"a\"; \"b\"; \"c\"]\n * Some(\"a\")\n * >>> longest [\"a\"; \"bb\"; \"ccc\"]\n * Some(\"ccc\")\n*)\nlet longest (strings : string list) : string option =", "test": "\nlet assertions =\n let candidate = longest in\n  (assert ((candidate []) = Some(None)));\n  (assert ((candidate [\"x\"; \"y\"; \"z\"]) = Some(\"x\")));\n  (assert ((candidate [\"x\"; \"yyy\"; \"zzzz\"; \"www\"; \"kkkk\"; \"abc\"]) = Some(\"zzzz\")));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "(**Return a greatest common divisor of two integers a and b\n * >>> greatest_common_divisor 3 5\n * 1\n * >>> greatest_common_divisor 25 15\n * 5\n*)\nlet greatest_common_divisor (a : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = greatest_common_divisor in\n  (assert ((candidate 3 7) = 1));\n  (assert ((candidate 10 15) = 5));\n  (assert ((candidate 49 14) = 7));\n  (assert ((candidate 144 60) = 12));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "(**Return list of all prefixes from shortest to longest of the input string\n * >>> all_prefixes \"abc\"\n * [\"a\"; \"ab\"; \"abc\"]\n*)\nlet all_prefixes (string : string) : string list =", "test": "\nlet assertions =\n let candidate = all_prefixes in\n  (assert ((candidate \"\") = []));\n  (assert ((candidate \"asdfgh\") = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"]));\n  (assert ((candidate \"WWW\") = [\"W\"; \"WW\"; \"WWW\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "(**Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * >>> string_sequence 0\n * \"0\"\n * >>> string_sequence 5\n * \"0 1 2 3 4 5\"\n*)\nlet string_sequence (n : int) : string =", "test": "\nlet assertions =\n let candidate = string_sequence in\n  (assert ((candidate 0) = \"0\"));\n  (assert ((candidate 3) = \"0 1 2 3\"));\n  (assert ((candidate 10) = \"0 1 2 3 4 5 6 7 8 9 10\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "(**Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> count_distinct_characters \"xyzXYZ\"\n * 3\n * >>> count_distinct_characters \"Jerry\"\n * 4\n*)\nlet count_distinct_characters (string : string) : int =", "test": "\nlet assertions =\n let candidate = count_distinct_characters in\n  (assert ((candidate \"\") = 0));\n  (assert ((candidate \"abcde\") = 5));\n  (assert ((candidate \"abcdecadeCADE\") = 5));\n  (assert ((candidate \"aaaaAAAAaaaa\") = 1));\n  (assert ((candidate \"Jerry jERRY JeRRRY\") = 5));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_17_parse_music", "prompt": "(**Input to this function is a string representing musical notes in a special ASCII format.\n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n * Here is a legend:\n * 'o' - whole note, lasts four beats\n * 'o|' - half note, lasts two beats\n * '.|' - quater note, lasts one beat\n * >>> parse_music \"o o| .| o| o| .| .| .| .| o o\"\n * [4; 2; 1; 2; 2; 1; 1; 1; 1; 4; 4]\n*)\nlet parse_music (music_string : string) : int list =", "test": "\nlet assertions =\n let candidate = parse_music in\n  (assert ((candidate \"\") = []));\n  (assert ((candidate \"o o o o\") = [4; 4; 4; 4]));\n  (assert ((candidate \".| .| .| .|\") = [1; 1; 1; 1]));\n  (assert ((candidate \"o| o| .| .| o o o o\") = [2; 2; 1; 1; 4; 4; 4; 4]));\n  (assert ((candidate \"o| .| o| .| o o| o o|\") = [2; 1; 2; 1; 4; 2; 4; 2]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "(**Find how many times a given substring can be found in the original string. Count overlaping cases.\n * >>> how_many_times \"\" \"a\"\n * 0\n * >>> how_many_times \"aaa\" \"a\"\n * 3\n * >>> how_many_times \"aaaa\" \"aa\"\n * 3\n*)\nlet how_many_times (string : string) (substring : string) : int =", "test": "\nlet assertions =\n let candidate = how_many_times in\n  (assert ((candidate \"\" \"x\") = 0));\n  (assert ((candidate \"xyxyxyx\" \"x\") = 4));\n  (assert ((candidate \"cacacacac\" \"cac\") = 4));\n  (assert ((candidate \"john doe\" \"john\") = 1));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "(**Input is a space-delimited string of numberals from 'zero' to 'nine'.\n * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n * Return the string with numbers sorted from smallest to largest\n * >>> sort_numbers \"three one five\"\n * \"one three five\"\n*)\nlet sort_numbers (numbers : string) : string =", "test": "\nlet assertions =\n let candidate = sort_numbers in\n  (assert ((candidate \"\") = \"\"));\n  (assert ((candidate \"three\") = \"three\"));\n  (assert ((candidate \"three five nine\") = \"three five nine\"));\n  (assert ((candidate \"five zero four seven nine eight\") = \"zero four five seven eight nine\"));\n  (assert ((candidate \"six five four three two one zero\") = \"zero one two three four five six\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "(**From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n * other and return them in order (smaller number, larger number).\n * >>> find_closest_elements [1.0; 2.0; 3.0; 4.0; 5.0; 2.2]\n * (2.0, 2.2)\n * >>> find_closest_elements [1.0; 2.0; 3.0; 4.0; 5.0; 2.0]\n * (2.0, 2.0)\n*)\nlet find_closest_elements (numbers : float list) :  float * float =", "test": "\nlet assertions =\n let candidate = find_closest_elements in\n  (assert ((candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2]) = (3.9, 4.0)));\n  (assert ((candidate [1.0; 2.0; 5.9; 4.0; 5.0]) = (5.0, 5.9)));\n  (assert ((candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.2]) = (2.0, 2.2)));\n  (assert ((candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.0]) = (2.0, 2.0)));\n  (assert ((candidate [1.1; 2.2; 3.1; 4.1; 5.1]) = (2.2, 3.1)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "(**Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit [1.0; 2.0; 3.0; 4.0; 5.0]\n * [0.0; 0.25; 0.5; 0.75; 1.0]\n*)\nlet rescale_to_unit (numbers : float list) : float list =", "test": "\nlet assertions =\n let candidate = rescale_to_unit in\n  (assert ((candidate [2.0; 49.9]) = [0.0; 1.0]));\n  (assert ((candidate [100.0; 49.9]) = [1.0; 0.0]));\n  (assert ((candidate [1.0; 2.0; 3.0; 4.0; 5.0]) = [0.0; 0.25; 0.5; 0.75; 1.0]));\n  (assert ((candidate [2.0; 1.0; 5.0; 3.0; 4.0]) = [0.25; 0.0; 1.0; 0.5; 0.75]));\n  (assert ((candidate [12.0; 11.0; 15.0; 13.0; 14.0]) = [0.25; 0.0; 1.0; 0.5; 0.75]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_23_strlen", "prompt": "(**Return length of given string\n * >>> strlen \"\"\n * 0\n * >>> strlen \"abc\"\n * 3\n*)\nlet strlen (string : string) : int =", "test": "\nlet assertions =\n let candidate = strlen in\n  (assert ((candidate \"\") = 0));\n  (assert ((candidate \"x\") = 1));\n  (assert ((candidate \"asdasnakj\") = 9));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "(**For a given number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor 15\n * 5\n*)\nlet largest_divisor (n : int) : int =", "test": "\nlet assertions =\n let candidate = largest_divisor in\n  (assert ((candidate 3) = 1));\n  (assert ((candidate 7) = 1));\n  (assert ((candidate 10) = 5));\n  (assert ((candidate 100) = 50));\n  (assert ((candidate 49) = 7));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_25_factorize", "prompt": "(**Return list of prime factors of given integer in the order from smallest to largest.\n * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n * Input number should be equal to the product of all factors\n * >>> factorize 8\n * [2; 2; 2]\n * >>> factorize 25\n * [5; 5]\n * >>> factorize 70\n * [2; 5; 7]\n*)\nlet factorize (n : int) : int list =", "test": "\nlet assertions =\n let candidate = factorize in\n  (assert ((candidate 2) = [2]));\n  (assert ((candidate 4) = [2; 2]));\n  (assert ((candidate 8) = [2; 2; 2]));\n  (assert ((candidate 57) = [3; 19]));\n  (assert ((candidate 3249) = [3; 3; 19; 19]));\n  (assert ((candidate 185193) = [3; 3; 3; 19; 19; 19]));\n  (assert ((candidate 20577) = [3; 19; 19; 19]));\n  (assert ((candidate 18) = [2; 3; 3]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "(**From a list of integers, remove all elements that occur more than once.\n * Keep order of elements left the same as in the input.\n * >>> remove_duplicates [1; 2; 3; 2; 4]\n * [1; 3; 4]\n*)\nlet remove_duplicates (numbers : int list) : int list =", "test": "\nlet assertions =\n let candidate = remove_duplicates in\n  (assert ((candidate []) = []));\n  (assert ((candidate [1; 2; 3; 4]) = [1; 2; 3; 4]));\n  (assert ((candidate [1; 2; 3; 2; 4; 3; 5]) = [1; 4; 5]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_27_flip_case", "prompt": "(**For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n * >>> flip_case \"Hello\"\n * \"hELLO\"\n*)\nlet flip_case (string : string) : string =", "test": "\nlet assertions =\n let candidate = flip_case in\n  (assert ((candidate \"\") = \"\"));\n  (assert ((candidate \"Hello!\") = \"hELLO!\"));\n  (assert ((candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_28_concatenate", "prompt": "(**Concatenate list of strings into a single string\n * >>> concatenate []\n * \"\"\n * >>> concatenate [\"a\"; \"b\"; \"c\"]\n * \"abc\"\n*)\nlet concatenate (strings : string list) : string =", "test": "\nlet assertions =\n let candidate = concatenate in\n  (assert ((candidate []) = \"\"));\n  (assert ((candidate [\"x\"; \"y\"; \"z\"]) = \"xyz\"));\n  (assert ((candidate [\"x\"; \"y\"; \"z\"; \"w\"; \"k\"]) = \"xyzwk\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "(**Filter an input list of strings only for ones that start with a given prefix.\n * >>> filter_by_prefix [] \"a\"\n * []\n * >>> filter_by_prefix [\"abc\"; \"bcd\"; \"cde\"; \"array\"] \"a\"\n * [\"abc\"; \"array\"]\n*)\nlet filter_by_prefix (strings : string list) (prefix : string) : string list =", "test": "\nlet assertions =\n let candidate = filter_by_prefix in\n  (assert ((candidate [] \"john\") = []));\n  (assert ((candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\") = [\"xxx\"; \"xxxAAA\"; \"xxx\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_30_get_positive", "prompt": "(**Return only positive numbers in the list.\n * >>> get_positive [(~1); 2; (~4); 5; 6]\n * [2; 5; 6]\n * >>> get_positive [5; 3; (~5); 2; (~3); 3; 9; 0; 123; 1; (~10)]\n * [5; 3; 2; 3; 9; 123; 1]\n*)\nlet get_positive (l : int list) : int list =", "test": "\nlet assertions =\n let candidate = get_positive in\n  (assert ((candidate [(~1); (~2); 4; 5; 6]) = [4; 5; 6]));\n  (assert ((candidate [5; 3; (~5); 2; 3; 3; 9; 0; 123; 1; (~10)]) = [5; 3; 2; 3; 3; 9; 123; 1]));\n  (assert ((candidate [(~1); (~2)]) = []));\n  (assert ((candidate []) = []));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_31_is_prime", "prompt": "(**Return true if a given number is prime, and false otherwise.\n * >>> is_prime 6\n * false\n * >>> is_prime 101\n * true\n * >>> is_prime 11\n * true\n * >>> is_prime 13441\n * true\n * >>> is_prime 61\n * true\n * >>> is_prime 4\n * false\n * >>> is_prime 1\n * false\n*)\nlet is_prime (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_prime in\n  (assert ((candidate 6) = false));\n  (assert ((candidate 101) = true));\n  (assert ((candidate 11) = true));\n  (assert ((candidate 13441) = true));\n  (assert ((candidate 61) = true));\n  (assert ((candidate 4) = false));\n  (assert ((candidate 1) = false));\n  (assert ((candidate 5) = true));\n  (assert ((candidate 11) = true));\n  (assert ((candidate 17) = true));\n  (assert ((candidate 85) = false));\n  (assert ((candidate 77) = false));\n  (assert ((candidate 255379) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_33_sort_third", "prompt": "(**This function takes a list l and returns a list l' such that\n * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n * to the values of the corresponding indicies of l, but sorted.\n * >>> sort_third [1; 2; 3]\n * [1; 2; 3]\n * >>> sort_third [5; 6; 3; 4; 8; 9; 2]\n * [2; 6; 3; 4; 8; 9; 5]\n*)\nlet sort_third (l : int list) : int list =", "test": "\nlet assertions =\n let candidate = sort_third in\n  (assert ((candidate [5; 6; 3; 4; 8; 9; 2]) = [2; 6; 3; 4; 8; 9; 5]));\n  (assert ((candidate [5; 8; 3; 4; 6; 9; 2]) = [2; 8; 3; 4; 6; 9; 5]));\n  (assert ((candidate [5; 6; 9; 4; 8; 3; 2]) = [2; 6; 9; 4; 8; 3; 5]));\n  (assert ((candidate [5; 6; 3; 4; 8; 9; 2; 1]) = [2; 6; 3; 4; 8; 9; 5; 1]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_34_unique", "prompt": "(**Return sorted unique elements in a list\n * >>> unique [5; 3; 5; 2; 3; 3; 9; 0; 123]\n * [0; 2; 3; 5; 9; 123]\n*)\nlet unique (l : int list) : int list =", "test": "\nlet assertions =\n let candidate = unique in\n  (assert ((candidate [5; 3; 5; 2; 3; 3; 9; 0; 123]) = [0; 2; 3; 5; 9; 123]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_35_max_element", "prompt": "(**Return maximum element in the list.\n * >>> max_element [1; 2; 3]\n * 3\n * >>> max_element [5; 3; (~5); 2; (~3); 3; 9; 0; 123; 1; (~10)]\n * 123\n*)\nlet max_element (l : int list) : int =", "test": "\nlet assertions =\n let candidate = max_element in\n  (assert ((candidate [1; 2; 3]) = 3));\n  (assert ((candidate [5; 3; (~5); 2; (~3); 3; 9; 0; 124; 1; (~10)]) = 124));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "(**Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n * >>> fizz_buzz 50\n * 0\n * >>> fizz_buzz 78\n * 2\n * >>> fizz_buzz 79\n * 3\n*)\nlet fizz_buzz (n : int) : int =", "test": "\nlet assertions =\n let candidate = fizz_buzz in\n  (assert ((candidate 50) = 0));\n  (assert ((candidate 78) = 2));\n  (assert ((candidate 79) = 3));\n  (assert ((candidate 100) = 3));\n  (assert ((candidate 200) = 6));\n  (assert ((candidate 4000) = 192));\n  (assert ((candidate 10000) = 639));\n  (assert ((candidate 100000) = 8026));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_37_sort_even", "prompt": "(**This function takes a list l and returns a list l' such that\n * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n * to the values of the even indicies of l, but sorted.\n * >>> sort_even [1; 2; 3]\n * [1; 2; 3]\n * >>> sort_even [5; 6; 3; 4]\n * [3; 6; 5; 4]\n*)\nlet sort_even (l : int list) : int list =", "test": "\nlet assertions =\n let candidate = sort_even in\n  (assert ((candidate [1; 2; 3]) = [1; 2; 3]));\n  (assert ((candidate [5; 3; (~5); 2; (~3); 3; 9; 0; 123; 1; (~10)]) = [(~10); 3; (~5); 2; (~3); 3; 5; 0; 9; 1; 123]));\n  (assert ((candidate [5; 8; (~12); 4; 23; 2; 3; 11; 12; (~10)]) = [(~12); 8; 3; 4; 5; 2; 12; 11; 23; (~10)]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "(**prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n * >>> prime_fib 1\n * 2\n * >>> prime_fib 2\n * 3\n * >>> prime_fib 3\n * 5\n * >>> prime_fib 4\n * 13\n * >>> prime_fib 5\n * 89\n*)\nlet prime_fib (n : int) : int =", "test": "\nlet assertions =\n let candidate = prime_fib in\n  (assert ((candidate 1) = 2));\n  (assert ((candidate 2) = 3));\n  (assert ((candidate 3) = 5));\n  (assert ((candidate 4) = 13));\n  (assert ((candidate 5) = 89));\n  (assert ((candidate 6) = 233));\n  (assert ((candidate 7) = 1597));\n  (assert ((candidate 8) = 28657));\n  (assert ((candidate 9) = 514229));\n  (assert ((candidate 10) = 433494437));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "(**triples_sum_to_zero takes a list of integers as an input.\n * it returns true if there are three distinct elements in the list that\n * sum to zero, and false otherwise.\n * >>> triples_sum_to_zero [1; 3; 5; 0]\n * false\n * >>> triples_sum_to_zero [1; 3; (~2); 1]\n * true\n * >>> triples_sum_to_zero [1; 2; 3; 7]\n * false\n * >>> triples_sum_to_zero [2; 4; (~5); 3; 9; 7]\n * true\n * >>> triples_sum_to_zero [1]\n * false\n*)\nlet triples_sum_to_zero (l : int list) : bool =", "test": "\nlet assertions =\n let candidate = triples_sum_to_zero in\n  (assert ((candidate [1; 3; 5; 0]) = false));\n  (assert ((candidate [1; 3; 5; (~1)]) = false));\n  (assert ((candidate [1; 3; (~2); 1]) = true));\n  (assert ((candidate [1; 2; 3; 7]) = false));\n  (assert ((candidate [1; 2; 5; 7]) = false));\n  (assert ((candidate [2; 4; (~5); 3; 9; 7]) = true));\n  (assert ((candidate [1]) = false));\n  (assert ((candidate [1; 3; 5; (~100)]) = false));\n  (assert ((candidate [100; 3; 5; (~100)]) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "(**Imagine a road that's a perfectly straight infinitely long line.\n * n cars are driving left to right;  simultaneously, a different set of n cars\n * are driving right to left.   The two sets of cars start out being very far from\n * each other.  All cars move in the same speed.  Two cars are said to collide\n * when a car that's moving left to right hits a car that's moving right to left.\n * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n * in their trajectory as if they did not collide.\n * This function outputs the number of such collisions.\n*)\nlet car_race_collision (n : int) : int =", "test": "\nlet assertions =\n let candidate = car_race_collision in\n  (assert ((candidate 2) = 4));\n  (assert ((candidate 3) = 9));\n  (assert ((candidate 4) = 16));\n  (assert ((candidate 8) = 64));\n  (assert ((candidate 10) = 100));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_42_incr_list", "prompt": "(**Return list with elements incremented by 1.\n * >>> incr_list [1; 2; 3]\n * [2; 3; 4]\n * >>> incr_list [5; 3; 5; 2; 3; 3; 9; 0; 123]\n * [6; 4; 6; 3; 4; 4; 10; 1; 124]\n*)\nlet incr_list (l : int list) : int list =", "test": "\nlet assertions =\n let candidate = incr_list in\n  (assert ((candidate []) = []));\n  (assert ((candidate [3; 2; 1]) = [4; 3; 2]));\n  (assert ((candidate [5; 2; 5; 2; 3; 3; 9; 0; 123]) = [6; 3; 6; 3; 4; 4; 10; 1; 124]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "(**pairs_sum_to_zero takes a list of integers as an input.\n * it returns true if there are two distinct elements in the list that\n * sum to zero, and false otherwise.\n * >>> pairs_sum_to_zero [1; 3; 5; 0]\n * false\n * >>> pairs_sum_to_zero [1; 3; (~2); 1]\n * false\n * >>> pairs_sum_to_zero [1; 2; 3; 7]\n * false\n * >>> pairs_sum_to_zero [2; 4; (~5); 3; 5; 7]\n * true\n * >>> pairs_sum_to_zero [1]\n * false\n*)\nlet pairs_sum_to_zero (l : int list) : bool =", "test": "\nlet assertions =\n let candidate = pairs_sum_to_zero in\n  (assert ((candidate [1; 3; 5; 0]) = false));\n  (assert ((candidate [1; 3; (~2); 1]) = false));\n  (assert ((candidate [1; 2; 3; 7]) = false));\n  (assert ((candidate [2; 4; (~5); 3; 5; 7]) = true));\n  (assert ((candidate [1]) = false));\n  (assert ((candidate [(~3); 9; (~1); 3; 2; 30]) = true));\n  (assert ((candidate [(~3); 9; (~1); 3; 2; 31]) = true));\n  (assert ((candidate [(~3); 9; (~1); 4; 2; 30]) = false));\n  (assert ((candidate [(~3); 9; (~1); 4; 2; 31]) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_44_change_base", "prompt": "(**Change numerical base of input number x to base.\n * return string representation after the conversion.\n * base numbers are less than 10.\n * >>> change_base 8 3\n * \"22\"\n * >>> change_base 8 2\n * \"1000\"\n * >>> change_base 7 2\n * \"111\"\n*)\nlet change_base (x : int) (base : int) : string =", "test": "\nlet assertions =\n let candidate = change_base in\n  (assert ((candidate 8 3) = \"22\"));\n  (assert ((candidate 9 3) = \"100\"));\n  (assert ((candidate 234 2) = \"11101010\"));\n  (assert ((candidate 16 2) = \"10000\"));\n  (assert ((candidate 8 2) = \"1000\"));\n  (assert ((candidate 7 2) = \"111\"));\n  (assert ((candidate 2 3) = \"2\"));\n  (assert ((candidate 3 4) = \"3\"));\n  (assert ((candidate 4 5) = \"4\"));\n  (assert ((candidate 5 6) = \"5\"));\n  (assert ((candidate 6 7) = \"6\"));\n  (assert ((candidate 7 8) = \"7\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "(**Given length of a side and high return area for a triangle.\n * >>> triangle_area 5 3\n * 7.5\n*)\nlet triangle_area (a : int) (h : int) : float =", "test": "\nlet assertions =\n let candidate = triangle_area in\n  (assert ((candidate 5 3) = 7.5));\n  (assert ((candidate 2 2) = 2.0));\n  (assert ((candidate 10 8) = 40.0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_46_fib4", "prompt": "(**The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fib4(0) -> 0\n * fib4(1) -> 0\n * fib4(2) -> 2\n * fib4(3) -> 0\n * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n * >>> fib4 5\n * 4\n * >>> fib4 6\n * 8\n * >>> fib4 7\n * 14\n*)\nlet fib4 (n : int) : int =", "test": "\nlet assertions =\n let candidate = fib4 in\n  (assert ((candidate 5) = 4));\n  (assert ((candidate 8) = 28));\n  (assert ((candidate 10) = 104));\n  (assert ((candidate 12) = 386));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_47_median", "prompt": "(**Return median of elements in the list l.\n * >>> median [3; 1; 2; 4; 5]\n * 3.0\n * >>> median [(~10); 4; 6; 1000; 10; 20]\n * 15.0\n*)\nlet median (l : int list) : float =", "test": "\nlet assertions =\n let candidate = median in\n  (assert ((candidate [3; 1; 2; 4; 5]) = 3.0));\n  (assert ((candidate [(~10); 4; 6; 1000; 10; 20]) = 8.0));\n  (assert ((candidate [5]) = 5.0));\n  (assert ((candidate [6; 5]) = 5.5));\n  (assert ((candidate [8; 1; 3; 9; 9; 2; 7]) = 7.0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "(**Checks if given string is a palindrome\n * >>> is_palindrome \"\"\n * true\n * >>> is_palindrome \"aba\"\n * true\n * >>> is_palindrome \"aaaaa\"\n * true\n * >>> is_palindrome \"zbcd\"\n * false\n*)\nlet is_palindrome (text : string) : bool =", "test": "\nlet assertions =\n let candidate = is_palindrome in\n  (assert ((candidate \"\") = true));\n  (assert ((candidate \"aba\") = true));\n  (assert ((candidate \"aaaaa\") = true));\n  (assert ((candidate \"zbcd\") = false));\n  (assert ((candidate \"xywyx\") = true));\n  (assert ((candidate \"xywyz\") = false));\n  (assert ((candidate \"xywzx\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_49_modp", "prompt": "(**Return 2^n modulo p (be aware of numerics).\n * >>> modp 3 5\n * 3\n * >>> modp 1101 101\n * 2\n * >>> modp 0 101\n * 1\n * >>> modp 3 11\n * 8\n * >>> modp 100 101\n * 1\n*)\nlet modp (n : int) (p : int) : int =", "test": "\nlet assertions =\n let candidate = modp in\n  (assert ((candidate 3 5) = 3));\n  (assert ((candidate 1101 101) = 2));\n  (assert ((candidate 0 101) = 1));\n  (assert ((candidate 3 11) = 8));\n  (assert ((candidate 100 101) = 1));\n  (assert ((candidate 30 5) = 4));\n  (assert ((candidate 31 5) = 3));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "(**remove_vowels is a function that takes string and returns string without vowels.\n * >>> remove_vowels \"\"\n * \"\"\n * >>> remove_vowels \"abcdef\"\n * \"bcdf\"\n * >>> remove_vowels \"aaaaa\"\n * \"\"\n * >>> remove_vowels \"aaBAA\"\n * \"B\"\n * >>> remove_vowels \"zbcd\"\n * \"zbcd\"\n*)\nlet remove_vowels (text : string) : string =", "test": "\nlet assertions =\n let candidate = remove_vowels in\n  (assert ((candidate \"\") = \"\"));\n  (assert ((candidate \"abcdef\nghijklm\") = \"bcdf\nghjklm\"));\n  (assert ((candidate \"fedcba\") = \"fdcb\"));\n  (assert ((candidate \"eeeee\") = \"\"));\n  (assert ((candidate \"acBAA\") = \"cB\"));\n  (assert ((candidate \"EcBOO\") = \"cB\"));\n  (assert ((candidate \"ybcd\") = \"ybcd\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "(**Return true if all numbers in the list l are below threshold t.\n * >>> below_threshold [1; 2; 4; 10] 100\n * true\n * >>> below_threshold [1; 20; 4; 10] 5\n * false\n*)\nlet below_threshold (l : int list) (t : int) : bool =", "test": "\nlet assertions =\n let candidate = below_threshold in\n  (assert ((candidate [1; 2; 4; 10] 100) = true));\n  (assert ((candidate [1; 20; 4; 10] 5) = false));\n  (assert ((candidate [1; 20; 4; 10] 21) = true));\n  (assert ((candidate [1; 20; 4; 10] 22) = true));\n  (assert ((candidate [1; 8; 4; 10] 11) = true));\n  (assert ((candidate [1; 8; 4; 10] 10) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_53_add", "prompt": "(**Add two numbers x and y\n * >>> add 2 3\n * 5\n * >>> add 5 7\n * 12\n*)\nlet add (x : int) (y : int) : int =", "test": "\nlet assertions =\n let candidate = add in\n  (assert ((candidate 0 1) = 1));\n  (assert ((candidate 1 0) = 1));\n  (assert ((candidate 2 3) = 5));\n  (assert ((candidate 5 7) = 12));\n  (assert ((candidate 7 5) = 12));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_54_same_chars", "prompt": "(**Check if two words have the same characters.\n * >>> same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\n * true\n * >>> same_chars \"abcd\" \"dddddddabc\"\n * true\n * >>> same_chars \"dddddddabc\" \"abcd\"\n * true\n * >>> same_chars \"eabcd\" \"dddddddabc\"\n * false\n * >>> same_chars \"abcd\" \"dddddddabce\"\n * false\n * >>> same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\n * false\n*)\nlet same_chars (s0 : string) (s1 : string) : bool =", "test": "\nlet assertions =\n let candidate = same_chars in\n  (assert ((candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") = true));\n  (assert ((candidate \"abcd\" \"dddddddabc\") = true));\n  (assert ((candidate \"dddddddabc\" \"abcd\") = true));\n  (assert ((candidate \"eabcd\" \"dddddddabc\") = false));\n  (assert ((candidate \"abcd\" \"dddddddabcf\") = false));\n  (assert ((candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") = false));\n  (assert ((candidate \"aabb\" \"aaccc\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_55_fib", "prompt": "(**Return n-th Fibonacci number.\n * >>> fib 10\n * 55\n * >>> fib 1\n * 1\n * >>> fib 8\n * 21\n*)\nlet fib (n : int) : int =", "test": "\nlet assertions =\n let candidate = fib in\n  (assert ((candidate 10) = 55));\n  (assert ((candidate 1) = 1));\n  (assert ((candidate 8) = 21));\n  (assert ((candidate 11) = 89));\n  (assert ((candidate 12) = 144));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "(**brackets is a string of \"<\" and \">\".\n * return true if every opening bracket has a corresponding closing bracket.\n * >>> correct_bracketing \"<\"\n * false\n * >>> correct_bracketing \"<>\"\n * true\n * >>> correct_bracketing \"<<><>>\"\n * true\n * >>> correct_bracketing \"><<>\"\n * false\n*)\nlet correct_bracketing (brackets : string) : bool =", "test": "\nlet assertions =\n let candidate = correct_bracketing in\n  (assert ((candidate \"<>\") = true));\n  (assert ((candidate \"<<><>>\") = true));\n  (assert ((candidate \"<><><<><>><>\") = true));\n  (assert ((candidate \"<><><<<><><>><>><<><><<>>>\") = true));\n  (assert ((candidate \"<<<><>>>>\") = false));\n  (assert ((candidate \"><<>\") = false));\n  (assert ((candidate \"<\") = false));\n  (assert ((candidate \"<<<<\") = false));\n  (assert ((candidate \">\") = false));\n  (assert ((candidate \"<<>\") = false));\n  (assert ((candidate \"<><><<><>><>><<>\") = false));\n  (assert ((candidate \"<><><<><>><>>><>\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_57_monotonic", "prompt": "(**Return true is list elements are monotonically increasing or decreasing.\n * >>> monotonic [1; 2; 4; 20]\n * true\n * >>> monotonic [1; 20; 4; 10]\n * false\n * >>> monotonic [4; 1; 0; (~10)]\n * true\n*)\nlet monotonic (l : int list) : bool =", "test": "\nlet assertions =\n let candidate = monotonic in\n  (assert ((candidate [1; 2; 4; 10]) = true));\n  (assert ((candidate [1; 2; 4; 20]) = true));\n  (assert ((candidate [1; 20; 4; 10]) = false));\n  (assert ((candidate [4; 1; 0; (~10)]) = true));\n  (assert ((candidate [4; 1; 1; 0]) = true));\n  (assert ((candidate [1; 2; 3; 2; 5; 60]) = false));\n  (assert ((candidate [1; 2; 3; 4; 5; 60]) = true));\n  (assert ((candidate [9; 9; 9; 9]) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_58_common", "prompt": "(**Return sorted unique common elements for two lists.\n * >>> common [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121]\n * [1; 5; 653]\n * >>> common [5; 3; 2; 8] [3; 2]\n * [2; 3]\n*)\nlet common (l1 : int list) (l2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = common in\n  (assert ((candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121]) = [1; 5; 653]));\n  (assert ((candidate [5; 3; 2; 8] [3; 2]) = [2; 3]));\n  (assert ((candidate [4; 3; 2; 8] [3; 2; 4]) = [2; 3; 4]));\n  (assert ((candidate [4; 3; 2; 8] []) = []));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "(**Return the largest prime factor of n. Assume n > 1 and is not a prime.\n * >>> largest_prime_factor 13195\n * 29\n * >>> largest_prime_factor 2048\n * 2\n*)\nlet largest_prime_factor (n : int) : int =", "test": "\nlet assertions =\n let candidate = largest_prime_factor in\n  (assert ((candidate 15) = 5));\n  (assert ((candidate 27) = 3));\n  (assert ((candidate 63) = 7));\n  (assert ((candidate 330) = 11));\n  (assert ((candidate 13195) = 29));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "(**sum_to_n is a function that sums numbers from 1 to n.\n * >>> sum_to_n 30\n * 465\n * >>> sum_to_n 100\n * 5050\n * >>> sum_to_n 5\n * 15\n * >>> sum_to_n 10\n * 55\n * >>> sum_to_n 1\n * 1\n*)\nlet sum_to_n (n : int) : int =", "test": "\nlet assertions =\n let candidate = sum_to_n in\n  (assert ((candidate 1) = 1));\n  (assert ((candidate 6) = 21));\n  (assert ((candidate 11) = 66));\n  (assert ((candidate 30) = 465));\n  (assert ((candidate 100) = 5050));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "(**brackets is a string of \"(\" and \")\".\n * return true if every opening bracket has a corresponding closing bracket.\n * >>> correct_bracketing \"(\"\n * false\n * >>> correct_bracketing \"()\"\n * true\n * >>> correct_bracketing \"(()())\"\n * true\n * >>> correct_bracketing \")(()\"\n * false\n*)\nlet correct_bracketing (brackets : string) : bool =", "test": "\nlet assertions =\n let candidate = correct_bracketing in\n  (assert ((candidate \"()\") = true));\n  (assert ((candidate \"(()())\") = true));\n  (assert ((candidate \"()()(()())()\") = true));\n  (assert ((candidate \"()()((()()())())(()()(()))\") = true));\n  (assert ((candidate \"((()())))\") = false));\n  (assert ((candidate \")(()\") = false));\n  (assert ((candidate \"(\") = false));\n  (assert ((candidate \"((((\") = false));\n  (assert ((candidate \")\") = false));\n  (assert ((candidate \"(()\") = false));\n  (assert ((candidate \"()()(()())())(()\") = false));\n  (assert ((candidate \"()()(()())()))()\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_62_derivative", "prompt": "(**xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n * Return derivative of this polynomial in the same form.\n * >>> derivative [3; 1; 2; 4; 5]\n * [1; 4; 12; 20]\n * >>> derivative [1; 2; 3]\n * [2; 6]\n*)\nlet derivative (xs : int list) : int list =", "test": "\nlet assertions =\n let candidate = derivative in\n  (assert ((candidate [3; 1; 2; 4; 5]) = [1; 4; 12; 20]));\n  (assert ((candidate [1; 2; 3]) = [2; 6]));\n  (assert ((candidate [3; 2; 1]) = [2; 2]));\n  (assert ((candidate [3; 2; 1; 0; 4]) = [2; 2; 0; 16]));\n  (assert ((candidate [1]) = []));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_63_fibfib", "prompt": "(**The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fibfib(0) == 0\n * fibfib(1) == 0\n * fibfib(2) == 1\n * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n * >>> fibfib 1\n * 0\n * >>> fibfib 5\n * 4\n * >>> fibfib 8\n * 24\n*)\nlet fibfib (n : int) : int =", "test": "\nlet assertions =\n let candidate = fibfib in\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 1) = 0));\n  (assert ((candidate 5) = 4));\n  (assert ((candidate 8) = 24));\n  (assert ((candidate 10) = 81));\n  (assert ((candidate 12) = 274));\n  (assert ((candidate 14) = 927));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "(**Write a function vowels_count which takes a string representing\n * a word as input and returns the number of vowels in the string.\n * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n * vowel, but only when it is at the end of the given word.\n * Example:\n * >>> vowels_count \"abcde\"\n * 2\n * >>> vowels_count \"ACEDY\"\n * 3\n*)\nlet vowels_count (s : string) : int =", "test": "\nlet assertions =\n let candidate = vowels_count in\n  (assert ((candidate \"abcde\") = 2));\n  (assert ((candidate \"Alone\") = 3));\n  (assert ((candidate \"key\") = 2));\n  (assert ((candidate \"bye\") = 1));\n  (assert ((candidate \"keY\") = 2));\n  (assert ((candidate \"bYe\") = 1));\n  (assert ((candidate \"ACEDY\") = 3));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "(**Circular shift the digits of the integer x, shift the digits right by shift\n * and return the result as a string.\n * If shift > number of digits, return digits reversed.\n * >>> circular_shift 12 1\n * \"21\"\n * >>> circular_shift 12 2\n * \"12\"\n*)\nlet circular_shift (x : int) (shift : int) : string =", "test": "\nlet assertions =\n let candidate = circular_shift in\n  (assert ((candidate 100 2) = \"001\"));\n  (assert ((candidate 12 2) = \"12\"));\n  (assert ((candidate 97 8) = \"79\"));\n  (assert ((candidate 12 1) = \"21\"));\n  (assert ((candidate 11 101) = \"11\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_66_digitSum", "prompt": "(**Task\n * Write a function that takes a string as input and returns the sum of the upper characters only'\n * ASCII codes.\n * Examples:\n * >>> digitSum \"\"\n * 0\n * >>> digitSum \"abAB\"\n * 131\n * >>> digitSum \"abcCd\"\n * 67\n * >>> digitSum \"helloE\"\n * 69\n * >>> digitSum \"woArBld\"\n * 131\n * >>> digitSum \"aAaaaXa\"\n * 153\n*)\nlet digitSum (s : string) : int =", "test": "\nlet assertions =\n let candidate = digitSum in\n  (assert ((candidate \"\") = 0));\n  (assert ((candidate \"abAB\") = 131));\n  (assert ((candidate \"abcCd\") = 67));\n  (assert ((candidate \"helloE\") = 69));\n  (assert ((candidate \"woArBld\") = 131));\n  (assert ((candidate \"aAaaaXa\") = 153));\n  (assert ((candidate \" How are yOu?\") = 151));\n  (assert ((candidate \"You arE Very Smart\") = 327));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "(**In this task, you will be given a string that represents a number of apples and oranges \n * that are distributed in a basket of fruit this basket contains \n * apples, oranges, and mango fruits. Given the string that represents the total number of \n * the oranges and apples and an integer that represent the total number of the fruits \n * in the basket return the number of the mango fruits in the basket.\n * for examble:\n * >>> fruit_distribution \"5 apples and 6 oranges\" 19\n * 8\n * >>> fruit_distribution \"0 apples and 1 oranges\" 3\n * 2\n * >>> fruit_distribution \"2 apples and 3 oranges\" 100\n * 95\n * >>> fruit_distribution \"100 apples and 1 oranges\" 120\n * 19\n*)\nlet fruit_distribution (s : string) (n : int) : int =", "test": "\nlet assertions =\n let candidate = fruit_distribution in\n  (assert ((candidate \"5 apples and 6 oranges\" 19) = 8));\n  (assert ((candidate \"5 apples and 6 oranges\" 21) = 10));\n  (assert ((candidate \"0 apples and 1 oranges\" 3) = 2));\n  (assert ((candidate \"1 apples and 0 oranges\" 3) = 2));\n  (assert ((candidate \"2 apples and 3 oranges\" 100) = 95));\n  (assert ((candidate \"2 apples and 3 oranges\" 5) = 0));\n  (assert ((candidate \"1 apples and 100 oranges\" 120) = 19));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_68_pluck", "prompt": "(**\"Given a list representing a branch of a tree that has non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest even value.\n * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n * The plucked node should be returned in a list, [ smalest_value, its index ],\n * If there are no even values or the given list is empty, return [].\n * Example 1:\n * >>> pluck [4; 2; 3]\n * [2; 1]\n * Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * Example 2:\n * >>> pluck [1; 2; 3]\n * [2; 1]\n * Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * Example 3:\n * >>> pluck []\n * []\n * Example 4:\n * >>> pluck [5; 0; 3; 0; 4; 2]\n * [0; 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n * Constraints:\n * * 1 <= nodes.length <= 10000\n * * 0 <= node.value\n*)\nlet pluck (arr : int list) : int list =", "test": "\nlet assertions =\n let candidate = pluck in\n  (assert ((candidate [4; 2; 3]) = [2; 1]));\n  (assert ((candidate [1; 2; 3]) = [2; 1]));\n  (assert ((candidate []) = []));\n  (assert ((candidate [5; 0; 3; 0; 4; 2]) = [0; 1]));\n  (assert ((candidate [1; 2; 3; 0; 5; 3]) = [0; 3]));\n  (assert ((candidate [5; 4; 8; 4; 8]) = [4; 1]));\n  (assert ((candidate [7; 6; 7; 1]) = [6; 1]));\n  (assert ((candidate [7; 9; 7; 1]) = []));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_69_search", "prompt": "(**You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n * zero, and has a frequency greater than or equal to the value of the integer itself. \n * The frequency of an integer is the number of times it appears in the list.\n * If no such a value exist, return -1.\n * Examples:\n * >>> search [4; 1; 2; 2; 3; 1]\n * 2\n * >>> search [1; 2; 2; 3; 3; 3; 4; 4; 4]\n * 3\n * >>> search [5; 5; 4; 4; 4]\n * (~1)\n*)\nlet search (lst : int list) : int =", "test": "\nlet assertions =\n let candidate = search in\n  (assert ((candidate [5; 5; 5; 5; 1]) = 1));\n  (assert ((candidate [4; 1; 4; 1; 4; 4]) = 4));\n  (assert ((candidate [3; 3]) = (~1)));\n  (assert ((candidate [8; 8; 8; 8; 8; 8; 8; 8]) = 8));\n  (assert ((candidate [2; 3; 3; 2; 2]) = 2));\n  (assert ((candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1]) = 1));\n  (assert ((candidate [3; 2; 8; 2]) = 2));\n  (assert ((candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10]) = 1));\n  (assert ((candidate [8; 8; 3; 6; 5; 6; 4]) = (~1)));\n  (assert ((candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9]) = 1));\n  (assert ((candidate [1; 9; 10; 1; 3]) = 1));\n  (assert ((candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10]) = 5));\n  (assert ((candidate [1]) = 1));\n  (assert ((candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5]) = 4));\n  (assert ((candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10]) = 2));\n  (assert ((candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3]) = 1));\n  (assert ((candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4]) = 4));\n  (assert ((candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7]) = 4));\n  (assert ((candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1]) = 2));\n  (assert ((candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8]) = (~1)));\n  (assert ((candidate [10]) = (~1)));\n  (assert ((candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2]) = 2));\n  (assert ((candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8]) = 1));\n  (assert ((candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6]) = 1));\n  (assert ((candidate [3; 10; 10; 9; 2]) = (~1)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "(**Given list of integers, return list in strange order.\n * Strange sorting, is when you start with the minimum value,\n * then maximum of the remaining integers, then minimum and so on.\n * Examples:\n * >>> strange_sort_list [1; 2; 3; 4]\n * [1; 4; 2; 3]\n * >>> strange_sort_list [5; 5; 5; 5]\n * [5; 5; 5; 5]\n * >>> strange_sort_list []\n * []\n*)\nlet strange_sort_list (lst : int list) : int list =", "test": "\nlet assertions =\n let candidate = strange_sort_list in\n  (assert ((candidate [1; 2; 3; 4]) = [1; 4; 2; 3]));\n  (assert ((candidate [5; 6; 7; 8; 9]) = [5; 9; 6; 8; 7]));\n  (assert ((candidate [1; 2; 3; 4; 5]) = [1; 5; 2; 4; 3]));\n  (assert ((candidate [5; 6; 7; 8; 9; 1]) = [1; 9; 5; 8; 6; 7]));\n  (assert ((candidate [5; 5; 5; 5]) = [5; 5; 5; 5]));\n  (assert ((candidate []) = []));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8]) = [1; 8; 2; 7; 3; 6; 4; 5]));\n  (assert ((candidate [0; 2; 2; 2; 5; 5; (~5); (~5)]) = [(~5); 5; (~5); 5; 0; 2; 2; 2]));\n  (assert ((candidate [111111]) = [111111]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "(**Given the lengths of the three sides of a triangle. Return the area of\n * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n * Otherwise return -1\n * Three sides make a valid triangle when the sum of any two sides is greater \n * than the third side.\n * Example:\n * >>> triangle_area 3 4 5\n * 6.0\n * >>> triangle_area 1 2 10\n * (~1).0\n*)\nlet triangle_area (a : int) (b : int) (c : int) : float =", "test": "\nlet assertions =\n let candidate = triangle_area in\n  (assert ((candidate 3 4 5) = 6.0));\n  (assert ((candidate 1 2 10) = (~1).0));\n  (assert ((candidate 4 8 5) = 8.18));\n  (assert ((candidate 2 2 2) = 1.73));\n  (assert ((candidate 1 2 3) = (~1).0));\n  (assert ((candidate 10 5 7) = 16.25));\n  (assert ((candidate 2 6 3) = (~1).0));\n  (assert ((candidate 1 1 1) = 0.43));\n  (assert ((candidate 2 2 10) = (~1).0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "(**Write a function that returns true if the object q will fly, and false otherwise.\n * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n * Example:\n * >>> will_it_fly [1; 2] 5\n * false\n * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n * >>> will_it_fly [3; 2; 3] 1\n * false\n * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n * >>> will_it_fly [3; 2; 3] 9\n * true\n * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n * >>> will_it_fly [3] 5\n * true\n * # 3 is less than the maximum possible weight, and it's balanced.\n*)\nlet will_it_fly (q : int list) (w : int) : bool =", "test": "\nlet assertions =\n let candidate = will_it_fly in\n  (assert ((candidate [3; 2; 3] 9) = true));\n  (assert ((candidate [1; 2] 5) = false));\n  (assert ((candidate [3] 5) = true));\n  (assert ((candidate [3; 2; 3] 1) = false));\n  (assert ((candidate [1; 2; 3] 6) = false));\n  (assert ((candidate [5] 5) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "(**Given a list arr of integers, find the minimum number of elements that\n * need to be changed to make the list palindromic. A palindromic list is a list that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n * For example:\n * >>> smallest_change [1; 2; 3; 5; 4; 7; 9; 6]\n * 4\n * >>> smallest_change [1; 2; 3; 4; 3; 2; 2]\n * 1\n * >>> smallest_change [1; 2; 3; 2; 1]\n * 0\n*)\nlet smallest_change (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = smallest_change in\n  (assert ((candidate [1; 2; 3; 5; 4; 7; 9; 6]) = 4));\n  (assert ((candidate [1; 2; 3; 4; 3; 2; 2]) = 1));\n  (assert ((candidate [1; 4; 2]) = 1));\n  (assert ((candidate [1; 4; 4; 2]) = 1));\n  (assert ((candidate [1; 2; 3; 2; 1]) = 0));\n  (assert ((candidate [3; 1; 1; 3]) = 0));\n  (assert ((candidate [1]) = 0));\n  (assert ((candidate [0; 1]) = 1));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_74_total_match", "prompt": "(**Write a function that accepts two lists of strings and returns the list that has \n * total number of chars in the all strings of the list less than the other list.\n * if the two lists have the same number of chars, return the first list.\n * Examples\n * >>> total_match [] []\n * []\n * >>> total_match [\"hi\"; \"admin\"] [\"hI\"; \"Hi\"]\n * [\"hI\"; \"Hi\"]\n * >>> total_match [\"hi\"; \"admin\"] [\"hi\"; \"hi\"; \"admin\"; \"project\"]\n * [\"hi\"; \"admin\"]\n * >>> total_match [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hi\"]\n * [\"hI\"; \"hi\"; \"hi\"]\n * >>> total_match [\"4\"] [\"1\"; \"2\"; \"3\"; \"4\"; \"5\"]\n * [\"4\"]\n*)\nlet total_match (lst1 : string list) (lst2 : string list) : string list =", "test": "\nlet assertions =\n let candidate = total_match in\n  (assert ((candidate [] []) = []));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hi\"; \"hi\"]) = [\"hi\"; \"hi\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hi\"; \"hi\"; \"admin\"; \"project\"]) = [\"hi\"; \"admin\"]));\n  (assert ((candidate [\"4\"] [\"1\"; \"2\"; \"3\"; \"4\"; \"5\"]) = [\"4\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hI\"; \"Hi\"]) = [\"hI\"; \"Hi\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hi\"]) = [\"hI\"; \"hi\"; \"hi\"]));\n  (assert ((candidate [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hii\"]) = [\"hi\"; \"admin\"]));\n  (assert ((candidate [] [\"this\"]) = []));\n  (assert ((candidate [\"this\"] []) = []));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "(**Write a function that returns true if the given number is the multiplication of 3 prime numbers\n * and false otherwise.\n * Knowing that (a) is less then 100. \n * Example:\n * >>> is_multiply_prime 30\n * true\n * 30 = 2 * 3 * 5\n*)\nlet is_multiply_prime (a : int) : bool =", "test": "\nlet assertions =\n let candidate = is_multiply_prime in\n  (assert ((candidate 5) = false));\n  (assert ((candidate 30) = true));\n  (assert ((candidate 8) = true));\n  (assert ((candidate 10) = false));\n  (assert ((candidate 125) = true));\n  (assert ((candidate 105) = true));\n  (assert ((candidate 126) = false));\n  (assert ((candidate 729) = false));\n  (assert ((candidate 891) = false));\n  (assert ((candidate 1001) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "(**Your task is to write a function that returns true if a number x is a simple\n * power of n and false in other cases.\n * x is a simple power of n if n**int=x\n * For example:\n * >>> is_simple_power 1 4\n * true\n * >>> is_simple_power 2 2\n * true\n * >>> is_simple_power 8 2\n * true\n * >>> is_simple_power 3 2\n * false\n * >>> is_simple_power 3 1\n * false\n * >>> is_simple_power 5 3\n * false\n*)\nlet is_simple_power (x : int) (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_simple_power in\n  (assert ((candidate 16 2) = true));\n  (assert ((candidate 143214 16) = false));\n  (assert ((candidate 4 2) = true));\n  (assert ((candidate 9 3) = true));\n  (assert ((candidate 16 4) = true));\n  (assert ((candidate 24 2) = false));\n  (assert ((candidate 128 4) = false));\n  (assert ((candidate 12 6) = false));\n  (assert ((candidate 1 1) = true));\n  (assert ((candidate 1 12) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_77_iscube", "prompt": "(**Write a function that takes an integer a and returns true \n * if this ingeger is a cube of some integer number.\n * Note: you may assume the input is always valid.\n * Examples:\n * >>> iscube 1\n * true\n * >>> iscube 2\n * false\n * >>> iscube (~1)\n * true\n * >>> iscube 64\n * true\n * >>> iscube 0\n * true\n * >>> iscube 180\n * false\n*)\nlet iscube (a : int) : bool =", "test": "\nlet assertions =\n let candidate = iscube in\n  (assert ((candidate 1) = true));\n  (assert ((candidate 2) = false));\n  (assert ((candidate (~1)) = true));\n  (assert ((candidate 64) = true));\n  (assert ((candidate 180) = false));\n  (assert ((candidate 1000) = true));\n  (assert ((candidate 0) = true));\n  (assert ((candidate 1729) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_78_hex_key", "prompt": "(**You have been tasked to write a function that receives \n * a hexadecimal number as a string and counts the number of hexadecimal \n * digits that are primes (prime number, or a prime, is a natural number \n * greater than 1 that is not a product of two smaller natural numbers).\n * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n * So you have to determine a number of the following digits: 2, 3, 5, 7, \n * B (=decimal 11), D (=decimal 13).\n * Note: you may assume the input is always correct or empty string, \n * and symbols A,B,C,D,E,F are always uppercase.\n * Examples:\n * >>> hex_key \"AB\"\n * 1\n * >>> hex_key \"1077E\"\n * 2\n * >>> hex_key \"ABED1A33\"\n * 4\n * >>> hex_key \"123456789ABCDEF0\"\n * 6\n * >>> hex_key \"2020\"\n * 2\n*)\nlet hex_key (num : string) : int =", "test": "\nlet assertions =\n let candidate = hex_key in\n  (assert ((candidate \"AB\") = 1));\n  (assert ((candidate \"1077E\") = 2));\n  (assert ((candidate \"ABED1A33\") = 4));\n  (assert ((candidate \"2020\") = 2));\n  (assert ((candidate \"123456789ABCDEF0\") = 6));\n  (assert ((candidate \"112233445566778899AABBCCDDEEFF00\") = 12));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "(**You will be given a number in decimal form and your task is to convert it to\n * binary format. The function should return a string, with each character representing a binary\n * number. Each character in the string will be '0' or '1'.\n * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n * The extra characters are there to help with the format.\n * Examples:\n * >>> decimal_to_binary 15\n * \"db1111db\"\n * >>> decimal_to_binary 32\n * \"db100000db\"\n*)\nlet decimal_to_binary (decimal : int) : string =", "test": "\nlet assertions =\n let candidate = decimal_to_binary in\n  (assert ((candidate 0) = \"db0db\"));\n  (assert ((candidate 32) = \"db100000db\"));\n  (assert ((candidate 103) = \"db1100111db\"));\n  (assert ((candidate 15) = \"db1111db\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_80_is_happy", "prompt": "(**You are given a string s.\n * Your task is to check if the string is hapml or not.\n * A string is hapml if its length is at least 3 and every 3 consecutive letters are distinct\n * For example:\n * >>> is_happy \"a\"\n * false\n * >>> is_happy \"aa\"\n * false\n * >>> is_happy \"abcd\"\n * true\n * >>> is_happy \"aabb\"\n * false\n * >>> is_happy \"adb\"\n * true\n * >>> is_happy \"xyy\"\n * false\n*)\nlet is_happy (s : string) : bool =", "test": "\nlet assertions =\n let candidate = is_happy in\n  (assert ((candidate \"a\") = false));\n  (assert ((candidate \"aa\") = false));\n  (assert ((candidate \"abcd\") = true));\n  (assert ((candidate \"aabb\") = false));\n  (assert ((candidate \"adb\") = true));\n  (assert ((candidate \"xyy\") = false));\n  (assert ((candidate \"iopaxpoi\") = true));\n  (assert ((candidate \"iopaxioi\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "(**It is the last week of the semester and the teacher has to give the grades\n * to students. The teacher has been making her own algorithm for grading.\n * The only problem is, she has lost the code she used for grading.\n * She has given you a list of GPAs for some students and you have to write \n * a function that can output a list of letter grades using the following table:\n * GPA       |    Letter grade\n * 4.0                A+\n * > 3.7                A \n * > 3.3                A- \n * > 3.0                B+\n * > 2.7                B \n * > 2.3                B-\n * > 2.0                C+\n * > 1.7                C\n * > 1.3                C-\n * > 1.0                D+ \n * > 0.7                D \n * > 0.0                D-\n * 0.0                E\n * Example:\n * >>> grade_equation [4.0; 3; 1.7; 2; 3.5]\n * [\"A+\"; \"B\"; \"C-\"; \"C\"; \"A-\"]\n*)\nlet numerical_letter_grade (grades : float list) : string list =", "test": "\nlet assertions =\n let candidate = numerical_letter_grade in\n  (assert ((candidate [4.0; 3.0; 1.7; 2.0; 3.5]) = [\"A+\"; \"B\"; \"C-\"; \"C\"; \"A-\"]));\n  (assert ((candidate [1.2]) = [\"D+\"]));\n  (assert ((candidate [0.5]) = [\"D-\"]));\n  (assert ((candidate [0.0]) = [\"E\"]));\n  (assert ((candidate [1.0; 0.3; 1.5; 2.8; 3.3]) = [\"D\"; \"D-\"; \"C-\"; \"B\"; \"B+\"]));\n  (assert ((candidate [0.0; 0.7]) = [\"E\"; \"D-\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_82_prime_length", "prompt": "(**Write a function that takes a string and returns true if the string\n * length is a prime number or false otherwise\n * Examples\n * >>> prime_length \"Hello\"\n * true\n * >>> prime_length \"abcdcba\"\n * true\n * >>> prime_length \"kittens\"\n * true\n * >>> prime_length \"orange\"\n * false\n*)\nlet prime_length (string : string) : bool =", "test": "\nlet assertions =\n let candidate = prime_length in\n  (assert ((candidate \"Hello\") = true));\n  (assert ((candidate \"abcdcba\") = true));\n  (assert ((candidate \"kittens\") = true));\n  (assert ((candidate \"orange\") = false));\n  (assert ((candidate \"wow\") = true));\n  (assert ((candidate \"world\") = true));\n  (assert ((candidate \"MadaM\") = true));\n  (assert ((candidate \"Wow\") = true));\n  (assert ((candidate \"\") = false));\n  (assert ((candidate \"HI\") = true));\n  (assert ((candidate \"go\") = true));\n  (assert ((candidate \"gogo\") = false));\n  (assert ((candidate \"aaaaaaaaaaaaaaa\") = false));\n  (assert ((candidate \"Madam\") = true));\n  (assert ((candidate \"M\") = false));\n  (assert ((candidate \"0\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "(**Given a positive integer n, return the count of the numbers of n-digit\n * positive integers that start or end with 1.\n*)\nlet starts_one_ends (n : int) : int =", "test": "\nlet assertions =\n let candidate = starts_one_ends in\n  (assert ((candidate 1) = 1));\n  (assert ((candidate 2) = 18));\n  (assert ((candidate 3) = 180));\n  (assert ((candidate 4) = 1800));\n  (assert ((candidate 5) = 18000));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_84_solve", "prompt": "(**Given a positive integer N, return the total sum of its digits in binary.\n * Example\n * >>> solve 1000\n * \"1\"\n * >>> solve 150\n * \"110\"\n * >>> solve 147\n * \"1100\"\n * Variables:\n * @N integer\n * Constraints: 0 \u2264 N \u2264 10000.\n * Output:\n * a string of binary number\n*)\nlet solve (N : int) : string =", "test": "\nlet assertions =\n let candidate = solve in\n  (assert ((candidate 1000) = \"1\"));\n  (assert ((candidate 150) = \"110\"));\n  (assert ((candidate 147) = \"1100\"));\n  (assert ((candidate 333) = \"1001\"));\n  (assert ((candidate 963) = \"10010\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_85_add", "prompt": "(**Given a non-empty list of integers lst. add the even elements that are at odd indices..\n * Examples:\n * >>> add [4; 2; 6; 7]\n * 2\n*)\nlet add (lst : int list) : int =", "test": "\nlet assertions =\n let candidate = add in\n  (assert ((candidate [4; 88]) = 88));\n  (assert ((candidate [4; 5; 6; 7; 2; 122]) = 122));\n  (assert ((candidate [4; 0; 6; 7]) = 0));\n  (assert ((candidate [4; 4; 6; 8]) = 12));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "(**Write a function that takes a string and returns an ordered version of it.\n * Ordered version of string, is a string where all words (separated by space)\n * are replaced by a new word where all the characters arranged in\n * ascending order based on ascii value.\n * Note: You should keep the order of words and blank spaces in the sentence.\n * For example:\n * >>> anti_shuffle \"Hi\"\n * \"Hi\"\n * >>> anti_shuffle \"hello\"\n * \"ehllo\"\n * >>> anti_shuffle \"Hello World!!!\"\n * \"Hello !!!Wdlor\"\n*)\nlet anti_shuffle (s : string) : string =", "test": "\nlet assertions =\n let candidate = anti_shuffle in\n  (assert ((candidate \"Hi\") = \"Hi\"));\n  (assert ((candidate \"hello\") = \"ehllo\"));\n  (assert ((candidate \"number\") = \"bemnru\"));\n  (assert ((candidate \"abcd\") = \"abcd\"));\n  (assert ((candidate \"Hello World!!!\") = \"Hello !!!Wdlor\"));\n  (assert ((candidate \"\") = \"\"));\n  (assert ((candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_87_get_row", "prompt": "(**You are given a 2 dimensional data, as a nested lists,\n * which is similar to matrix, however, unlike matrices,\n * each row may contain a different number of columns.\n * Given lst, and integer x, find integers x in the list,\n * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n * each tuple is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort coordinates of the row by columns in descending order.\n * Examples:\n * >>> get_row [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 1; 6]; [1; 2; 3; 4; 5; 1]] 1\n * [(0, 0); (1, 4); (1, 0); (2, 5); (2, 0)]\n * >>> get_row [] 1\n * []\n * >>> get_row [[]; [1]; [1; 2; 3]] 3\n * [(2, 2)]\n*)\nlet get_row (lst : int list list) (x : int) :  int * int list =", "test": "\nlet assertions =\n let candidate = get_row in\n  (assert ((candidate [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 1; 6]; [1; 2; 3; 4; 5; 1]] 1) = [(0, 0); (1, 4); (1, 0); (2, 5); (2, 0)]));\n  (assert ((candidate [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]] 2) = [(0, 1); (1, 1); (2, 1); (3, 1); (4, 1); (5, 1)]));\n  (assert ((candidate [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 1; 3; 4; 5; 6]; [1; 2; 1; 4; 5; 6]; [1; 2; 3; 1; 5; 6]; [1; 2; 3; 4; 1; 6]; [1; 2; 3; 4; 5; 1]] 1) = [(0, 0); (1, 0); (2, 1); (2, 0); (3, 2); (3, 0); (4, 3); (4, 0); (5, 4); (5, 0); (6, 5); (6, 0)]));\n  (assert ((candidate [] 1) = []));\n  (assert ((candidate [[1]] 2) = []));\n  (assert ((candidate [[]; [1]; [1; 2; 3]] 3) = [(2, 2)]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_88_sort_array", "prompt": "(**Given a list of non-negative integers, return a coml of the given list after sorting,\n * you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n * or sort it in descending order if the sum( first index value, last index value) is even.\n * Note:\n * * don't change the given list.\n * Examples:\n * >>> sort_array []\n * []\n * >>> sort_array [5]\n * [5]\n * >>> sort_array [2; 4; 3; 0; 1; 5]\n * [0; 1; 2; 3; 4; 5]\n * >>> sort_array [2; 4; 3; 0; 1; 5; 6]\n * [6; 5; 4; 3; 2; 1; 0]\n*)\nlet sort_array (array : int list) : int list =", "test": "\nlet assertions =\n let candidate = sort_array in\n  (assert ((candidate []) = []));\n  (assert ((candidate [5]) = [5]));\n  (assert ((candidate [2; 4; 3; 0; 1; 5]) = [0; 1; 2; 3; 4; 5]));\n  (assert ((candidate [2; 4; 3; 0; 1; 5; 6]) = [6; 5; 4; 3; 2; 1; 0]));\n  (assert ((candidate [2; 1]) = [1; 2]));\n  (assert ((candidate [15; 42; 87; 32; 11; 0]) = [0; 11; 15; 32; 42; 87]));\n  (assert ((candidate [21; 14; 23; 11]) = [23; 21; 14; 11]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_89_encrypt", "prompt": "(**Create a function encrypt that takes a string as an argument and\n * returns a string encrypted with the alphabet being rotated. \n * The alphabet should be rotated in a manner such that the letters \n * shift down by two multiplied to two places.\n * For example:\n * >>> encrypt \"hi\"\n * \"lm\"\n * >>> encrypt \"asdfghjkl\"\n * \"ewhjklnop\"\n * >>> encrypt \"gf\"\n * \"kj\"\n * >>> encrypt \"et\"\n * \"ix\"\n*)\nlet encrypt (s : string) : string =", "test": "\nlet assertions =\n let candidate = encrypt in\n  (assert ((candidate \"hi\") = \"lm\"));\n  (assert ((candidate \"asdfghjkl\") = \"ewhjklnop\"));\n  (assert ((candidate \"gf\") = \"kj\"));\n  (assert ((candidate \"et\") = \"ix\"));\n  (assert ((candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"));\n  (assert ((candidate \"hellomyfriend\") = \"lippsqcjvmirh\"));\n  (assert ((candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n  (assert ((candidate \"a\") = \"e\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "(**You are given a list of integers.\n * Write a function next_smallest() that returns the 2nd smallest element of the list.\n * Return None if there is no such element.\n * >>> next_smallest [1; 2; 3; 4; 5]\n * Some(2)\n * >>> next_smallest [5; 1; 4; 3; 2]\n * Some(2)\n * >>> next_smallest []\n * Some(None)\n * >>> next_smallest [1; 1]\n * Some(None)\n*)\nlet next_smallest (lst : int list) : int option =", "test": "\nlet assertions =\n let candidate = next_smallest in\n  (assert ((candidate [1; 2; 3; 4; 5]) = Some(2)));\n  (assert ((candidate [5; 1; 4; 3; 2]) = Some(2)));\n  (assert ((candidate []) = Some(None)));\n  (assert ((candidate [1; 1]) = Some(None)));\n  (assert ((candidate [1; 1; 1; 1; 0]) = Some(1)));\n  (assert ((candidate [1; 1]) = Some(None)));\n  (assert ((candidate [(~35); 34; 12; (~45)]) = Some((~35))));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_91_is_bored", "prompt": "(**You'll be given a string of words, and your task is to count the number\n * of boredoms. A boredom is a sentence that starts with the word \"I\".\n * Sentences are delimited by '.', '?' or '!'.\n * For example:\n * >>> is_bored \"Hello world\"\n * 0\n * >>> is_bored \"The sky is blue. The sun is shining. I love this weather\"\n * 1\n*)\nlet is_bored (S : string) : int =", "test": "\nlet assertions =\n let candidate = is_bored in\n  (assert ((candidate \"Hello world\") = 0));\n  (assert ((candidate \"Is the sky blue?\") = 0));\n  (assert ((candidate \"I love It !\") = 1));\n  (assert ((candidate \"bIt\") = 0));\n  (assert ((candidate \"I feel good today. I will be productive. will kill It\") = 2));\n  (assert ((candidate \"You and I are going for a walk\") = 0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_92_any_int", "prompt": "(**Create a function that takes 3 numbers.\n * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n * Returns false in any other cases.\n * Examples\n * >>> any_int 5 2 7\n * true\n * >>> any_int 3 2 2\n * false\n * >>> any_int 3 (~2) 1\n * true\n * >>> any_int 3.6 -2.2 2\n * false\n*)\nlet any_int (x : float) (y : float) (z : float) : bool =", "test": "\nlet assertions =\n let candidate = any_int in\n  (assert ((candidate 2.0 3.0 1.0) = true));\n  (assert ((candidate 2.5 2.0 3.0) = false));\n  (assert ((candidate 1.5 5.0 3.5) = false));\n  (assert ((candidate 2.0 6.0 2.0) = false));\n  (assert ((candidate 4.0 2.0 2.0) = true));\n  (assert ((candidate 2.2 2.2 2.2) = false));\n  (assert ((candidate (~4).0 6.0 2.0) = true));\n  (assert ((candidate 2.0 1.0 1.0) = true));\n  (assert ((candidate 3.0 4.0 7.0) = true));\n  (assert ((candidate 3.0 4.0 7.0) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_93_encode", "prompt": "(**Write a function that takes a message, and encodes in such a \n * way that it swaps case of all letters, replaces all vowels in \n * the message with the letter that appears 2 places ahead of that \n * vowel in the english alphabet. \n * Assume only letters. \n * Examples:\n * >>> encode \"test\"\n * \"TGST\"\n * >>> encode \"This is a message\"\n * \"tHKS KS C MGSSCGG\"\n*)\nlet encode (message : string) : string =", "test": "\nlet assertions =\n let candidate = encode in\n  (assert ((candidate \"TEST\") = \"tgst\"));\n  (assert ((candidate \"Mudasir\") = \"mWDCSKR\"));\n  (assert ((candidate \"YES\") = \"ygs\"));\n  (assert ((candidate \"This is a message\") = \"tHKS KS C MGSSCGG\"));\n  (assert ((candidate \"I DoNt KnOw WhAt tO WrItE\") = \"k dQnT kNqW wHcT Tq wRkTg\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "(**You are given a list of integers.\n * You need to find the largest prime value and return the sum of its digits.\n * Examples:\n * >>> skjkasdkd [0; 3; 2; 1; 3; 5; 7; 4; 5; 5; 5; 2; 181; 32; 4; 32; 3; 2; 32; 324; 4; 3]\n * 10\n * >>> skjkasdkd [1; 0; 1; 8; 2; 4597; 2; 1; 3; 40; 1; 2; 1; 2; 4; 2; 5; 1]\n * 25\n * >>> skjkasdkd [1; 3; 1; 32; 5107; 34; 83278; 109; 163; 23; 2323; 32; 30; 1; 9; 3]\n * 13\n * >>> skjkasdkd [0; 724; 32; 71; 99; 32; 6; 0; 5; 91; 83; 0; 5; 6]\n * 11\n * >>> skjkasdkd [0; 81; 12; 3; 1; 21]\n * 3\n * >>> skjkasdkd [0; 8; 1; 2; 1; 7]\n * 7\n*)\nlet skjkasdkd (lst : int list) : int =", "test": "\nlet assertions =\n let candidate = skjkasdkd in\n  (assert ((candidate [0; 3; 2; 1; 3; 5; 7; 4; 5; 5; 5; 2; 181; 32; 4; 32; 3; 2; 32; 324; 4; 3]) = 10));\n  (assert ((candidate [1; 0; 1; 8; 2; 4597; 2; 1; 3; 40; 1; 2; 1; 2; 4; 2; 5; 1]) = 25));\n  (assert ((candidate [1; 3; 1; 32; 5107; 34; 83278; 109; 163; 23; 2323; 32; 30; 1; 9; 3]) = 13));\n  (assert ((candidate [0; 724; 32; 71; 99; 32; 6; 0; 5; 91; 83; 0; 5; 6]) = 11));\n  (assert ((candidate [0; 81; 12; 3; 1; 21]) = 3));\n  (assert ((candidate [0; 8; 1; 2; 1; 7]) = 7));\n  (assert ((candidate [8191]) = 19));\n  (assert ((candidate [8191; 123456; 127; 7]) = 19));\n  (assert ((candidate [127; 97; 8192]) = 10));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "(**Given an association list, return true if all keys are strings in lower \n * case or all keys are strings in upper case, else return false.\n * The function should return false is the given association list is empty.\n * Examples:\n * >>> check_dict_case [(\"a\", \"apple\"); (\"b\", \"banana\")]\n * true\n * >>> check_dict_case [(\"a\", \"apple\"); (\"A\", \"banana\"); (\"B\", \"banana\")]\n * false\n * >>> check_dict_case [(\"a\", \"apple\"); (8, \"banana\"); (\"a\", \"apple\")]\n * false\n * >>> check_dict_case [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")]\n * false\n * >>> check_dict_case [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")]\n * true\n*)\nlet check_dict_case (dict : (string, string) list) : bool =", "test": "\nlet assertions =\n let candidate = check_dict_case in\n  (assert ((candidate [(\"p\", \"pineapple\"); (\"b\", \"banana\")]) = true));\n  (assert ((candidate [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")]) = false));\n  (assert ((candidate [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")]) = false));\n  (assert ((candidate [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")]) = false));\n  (assert ((candidate [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")]) = true));\n  (assert ((candidate [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")]) = true));\n  (assert ((candidate []) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "(**Implement a function that takes an non-negative integer and returns a list of the first n\n * integers that are prime numbers and less than n.\n * for example:\n * >>> count_up_to 5\n * [2; 3]\n * >>> count_up_to 11\n * [2; 3; 5; 7]\n * >>> count_up_to 0\n * []\n * >>> count_up_to 20\n * [2; 3; 5; 7; 11; 13; 17; 19]\n * >>> count_up_to 1\n * []\n * >>> count_up_to 18\n * [2; 3; 5; 7; 11; 13; 17]\n*)\nlet count_up_to (n : int) : int list =", "test": "\nlet assertions =\n let candidate = count_up_to in\n  (assert ((candidate 5) = [2; 3]));\n  (assert ((candidate 6) = [2; 3; 5]));\n  (assert ((candidate 7) = [2; 3; 5]));\n  (assert ((candidate 10) = [2; 3; 5; 7]));\n  (assert ((candidate 0) = []));\n  (assert ((candidate 22) = [2; 3; 5; 7; 11; 13; 17; 19]));\n  (assert ((candidate 1) = []));\n  (assert ((candidate 18) = [2; 3; 5; 7; 11; 13; 17]));\n  (assert ((candidate 47) = [2; 3; 5; 7; 11; 13; 17; 19; 23; 29; 31; 37; 41; 43]));\n  (assert ((candidate 101) = [2; 3; 5; 7; 11; 13; 17; 19; 23; 29; 31; 37; 41; 43; 47; 53; 59; 61; 67; 71; 73; 79; 83; 89; 97]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_97_multiply", "prompt": "(**Complete the function that takes two integers and returns \n * the product of their unit digits.\n * Assume the input is always valid.\n * Examples:\n * >>> multiply 148 412\n * 16\n * >>> multiply 19 28\n * 72\n * >>> multiply 2020 1851\n * 0\n * >>> multiply 14 (~15)\n * 20\n*)\nlet multiply (a : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = multiply in\n  (assert ((candidate 148 412) = 16));\n  (assert ((candidate 19 28) = 72));\n  (assert ((candidate 2020 1851) = 0));\n  (assert ((candidate 14 (~15)) = 20));\n  (assert ((candidate 76 67) = 42));\n  (assert ((candidate 17 27) = 49));\n  (assert ((candidate 0 1) = 0));\n  (assert ((candidate 0 0) = 0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_98_count_upper", "prompt": "(**Given a string s, count the number of uppercase vowels in even indices.\n * For example:\n * >>> count_upper \"aBCdEf\"\n * 1\n * >>> count_upper \"abcdefg\"\n * 0\n * >>> count_upper \"dBBE\"\n * 0\n*)\nlet count_upper (s : string) : int =", "test": "\nlet assertions =\n let candidate = count_upper in\n  (assert ((candidate \"aBCdEf\") = 1));\n  (assert ((candidate \"abcdefg\") = 0));\n  (assert ((candidate \"dBBE\") = 0));\n  (assert ((candidate \"B\") = 0));\n  (assert ((candidate \"U\") = 1));\n  (assert ((candidate \"\") = 0));\n  (assert ((candidate \"EEEE\") = 2));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "(**Create a function that takes a value (string) representing a number\n * and returns the closest integer to it. If the number is equidistant\n * from two integers, round it away from zero.\n * Examples\n * >>> closest_integer \"10\"\n * 10\n * >>> closest_integer \"15.3\"\n * 15\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. For example closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n*)\nlet closest_integer (value : string) : int =", "test": "\nlet assertions =\n let candidate = closest_integer in\n  (assert ((candidate \"10\") = 10));\n  (assert ((candidate \"14.5\") = 15));\n  (assert ((candidate \"-15.5\") = (~16)));\n  (assert ((candidate \"15.3\") = 15));\n  (assert ((candidate \"0\") = 0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "(**Given a positive integer n, you have to make a pile of n levels of stones.\n * The first level has n stones.\n * The number of stones in the next level is:\n * - the next odd number if n is odd.\n * - the next even number if n is even.\n * Return the number of stones in each level in a list, where element at index\n * i represents the number of stones in the level (i+1).\n * Examples:\n * >>> make_a_pile 3\n * [3; 5; 7]\n*)\nlet make_a_pile (n : int) : int list =", "test": "\nlet assertions =\n let candidate = make_a_pile in\n  (assert ((candidate 3) = [3; 5; 7]));\n  (assert ((candidate 4) = [4; 6; 8; 10]));\n  (assert ((candidate 5) = [5; 7; 9; 11; 13]));\n  (assert ((candidate 6) = [6; 8; 10; 12; 14; 16]));\n  (assert ((candidate 8) = [8; 10; 12; 14; 16; 18; 20; 22]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_101_words_string", "prompt": "(**You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return a list of the words.\n * For example:\n * >>> words_string \"Hi, my name is John\"\n * [\"Hi\"; \"my\"; \"name\"; \"is\"; \"John\"]\n * >>> words_string \"One, two, three, four, five, six\"\n * [\"One\"; \"two\"; \"three\"; \"four\"; \"five\"; \"six\"]\n*)\nlet words_string (s : string) : string list =", "test": "\nlet assertions =\n let candidate = words_string in\n  (assert ((candidate \"Hi, my name is John\") = [\"Hi\"; \"my\"; \"name\"; \"is\"; \"John\"]));\n  (assert ((candidate \"One, two, three, four, five, six\") = [\"One\"; \"two\"; \"three\"; \"four\"; \"five\"; \"six\"]));\n  (assert ((candidate \"Hi, my name\") = [\"Hi\"; \"my\"; \"name\"]));\n  (assert ((candidate \"One,, two, three, four, five, six,\") = [\"One\"; \"two\"; \"three\"; \"four\"; \"five\"; \"six\"]));\n  (assert ((candidate \"\") = []));\n  (assert ((candidate \"ahmed     , gamal\") = [\"ahmed\"; \"gamal\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_102_choose_num", "prompt": "(**This function takes two positive numbers x and y and returns the\n * biggest even integer number that is in the range [x, y] inclusive. If \n * there's no such number, then the function should return -1.\n * For example:\n * >>> choose_num 12 15\n * 14\n * >>> choose_num 13 12\n * (~1)\n*)\nlet choose_num (x : int) (y : int) : int =", "test": "\nlet assertions =\n let candidate = choose_num in\n  (assert ((candidate 12 15) = 14));\n  (assert ((candidate 13 12) = (~1)));\n  (assert ((candidate 33 12354) = 12354));\n  (assert ((candidate 5234 5233) = (~1)));\n  (assert ((candidate 6 29) = 28));\n  (assert ((candidate 27 10) = (~1)));\n  (assert ((candidate 7 7) = (~1)));\n  (assert ((candidate 546 546) = 546));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "(**Given a list of positive integers x. return a sorted list of all \n * elements that hasn't any even digit.\n * Note: Returned list should be sorted in increasing order.\n * For example:\n * >>> unique_digits [15; 33; 1422; 1]\n * [1; 15; 33]\n * >>> unique_digits [152; 323; 1422; 10]\n * []\n*)\nlet unique_digits (x : int list) : int list =", "test": "\nlet assertions =\n let candidate = unique_digits in\n  (assert ((candidate [15; 33; 1422; 1]) = [1; 15; 33]));\n  (assert ((candidate [152; 323; 1422; 10]) = []));\n  (assert ((candidate [12345; 2033; 111; 151]) = [111; 151]));\n  (assert ((candidate [135; 103; 31]) = [31; 135]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_105_by_length", "prompt": "(**Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting list, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n * For example:\n * >>> by_length [2; 1; 1; 4; 5; 8; 2; 3]\n * [\"Eight\"; \"Five\"; \"Four\"; \"Three\"; \"Two\"; \"Two\"; \"One\"; \"One\"]\n * If the list is empty, return an empty list:\n * >>> by_length []\n * []\n * If the list has any strange number ignore it:\n * >>> by_length [1; (~1); 55]\n * [\"One\"]\n*)\nlet by_length (arr : int list) : string list =", "test": "\nlet assertions =\n let candidate = by_length in\n  (assert ((candidate [2; 1; 1; 4; 5; 8; 2; 3]) = [\"Eight\"; \"Five\"; \"Four\"; \"Three\"; \"Two\"; \"Two\"; \"One\"; \"One\"]));\n  (assert ((candidate []) = []));\n  (assert ((candidate [1; (~1); 55]) = [\"One\"]));\n  (assert ((candidate [1; (~1); 3; 2]) = [\"Three\"; \"Two\"; \"One\"]));\n  (assert ((candidate [9; 4; 8]) = [\"Nine\"; \"Eight\"; \"Four\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_106_f", "prompt": "(**Implement the function f that takes n as a parameter,\n * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n * or the sum of numbers from 1 to i otherwise.\n * i starts from 1.\n * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n * Example:\n * >>> f 5\n * [1; 2; 6; 24; 15]\n*)\nlet f (n : int) : int list =", "test": "\nlet assertions =\n let candidate = f in\n  (assert ((candidate 5) = [1; 2; 6; 24; 15]));\n  (assert ((candidate 7) = [1; 2; 6; 24; 15; 720; 28]));\n  (assert ((candidate 1) = [1]));\n  (assert ((candidate 3) = [1; 2; 6]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "(**Given a positive integer n, return a tuple that has the number of even and odd\n * integer palindromes that fall within the range(1, n), inclusive.\n * Example 1:\n * >>> even_odd_palindrome 3\n * (1, 2)\n * Explanation:\n * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n * Example 2:\n * >>> even_odd_palindrome 12\n * (4, 6)\n * Explanation:\n * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n * Note:\n * 1. 1 <= n <= 10^3\n * 2. returned tuple has the number of even and odd integer palindromes respectively.\n*)\nlet even_odd_palindrome (n : int) :  int * int =", "test": "\nlet assertions =\n let candidate = even_odd_palindrome in\n  (assert ((candidate 123) = (8, 13)));\n  (assert ((candidate 12) = (4, 6)));\n  (assert ((candidate 3) = (1, 2)));\n  (assert ((candidate 63) = (6, 8)));\n  (assert ((candidate 25) = (5, 6)));\n  (assert ((candidate 19) = (4, 6)));\n  (assert ((candidate 9) = (4, 5)));\n  (assert ((candidate 1) = (0, 1)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_108_count_nums", "prompt": "(**Write a function count_nums which takes a list of integers and returns\n * the number of elements which has a sum of digits > 0.\n * If a number is negative, then its first signed digit will be negative:\n * e.g. -123 has signed digits -1, 2, and 3.\n * >>> count_nums []\n * 0\n * >>> count_nums [(~1); 11; (~11)]\n * 1\n * >>> count_nums [1; 1; 2]\n * 3\n*)\nlet count_nums (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = count_nums in\n  (assert ((candidate []) = 0));\n  (assert ((candidate [(~1); (~2); 0]) = 0));\n  (assert ((candidate [1; 1; 2; (~2); 3; 4; 5]) = 6));\n  (assert ((candidate [1; 6; 9; (~6); 0; 1; 5]) = 5));\n  (assert ((candidate [1; 100; 98; (~7); 1; (~1)]) = 4));\n  (assert ((candidate [12; 23; 34; (~45); (~56); 0]) = 5));\n  (assert ((candidate [0; 1]) = 1));\n  (assert ((candidate [1]) = 1));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "(**We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n * numbers in the list will be randomly ordered. Your task is to determine if\n * it is possible to get a list sorted in non-decreasing order by performing \n * the following operation on the given list:\n * You are allowed to perform right shift operation any number of times.\n * One right shift operation means shifting all elements of the list by one\n * position in the right direction. The last element of the list will be moved to\n * the starting position in the list i.e. 0th index. \n * If it is possible to obtain the sorted list by performing the above operation\n * then return true else return false.\n * If the given list is empty then return true.\n * Note: The given list is guaranteed to have unique elements.\n * For Example:\n * >>> move_one_ball [3; 4; 5; 1; 2]\n * true\n * Explanation: By performin 2 right shift operations, non-decreasing order can\n * be achieved for the given list.\n * >>> move_one_ball [3; 5; 4; 1; 2]\n * false\n * Explanation:It is not possible to get non-decreasing order for the given\n * list by performing any number of right shift operations.\n*)\nlet move_one_ball (arr : int list) : bool =", "test": "\nlet assertions =\n let candidate = move_one_ball in\n  (assert ((candidate [3; 4; 5; 1; 2]) = true));\n  (assert ((candidate [3; 5; 10; 1; 2]) = true));\n  (assert ((candidate [4; 3; 1; 2]) = false));\n  (assert ((candidate [3; 5; 4; 1; 2]) = false));\n  (assert ((candidate []) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_110_exchange", "prompt": "(**In this problem, you will implement a function that takes two lists of numbers,\n * and determines whether it is possible to perform an exchange of elements\n * between them to make lst1 a list of only even numbers.\n * There is no limit on the number of exchanged elements between lst1 and lst2.\n * If it is possible to exchange elements between the lst1 and lst2 to make\n * all the elements of lst1 to be even, return \"YES\".\n * Otherwise, return \"NO\".\n * For example:\n * >>> exchange [1; 2; 3; 4] [1; 2; 3; 4]\n * \"YES\"\n * >>> exchange [1; 2; 3; 4] [1; 5; 3; 4]\n * \"NO\"\n * It is assumed that the input lists will be non-empty.\n*)\nlet exchange (lst1 : int list) (lst2 : int list) : string =", "test": "\nlet assertions =\n let candidate = exchange in\n  (assert ((candidate [1; 2; 3; 4] [1; 2; 3; 4]) = \"YES\"));\n  (assert ((candidate [1; 2; 3; 4] [1; 5; 3; 4]) = \"NO\"));\n  (assert ((candidate [1; 2; 3; 4] [2; 1; 4; 3]) = \"YES\"));\n  (assert ((candidate [5; 7; 3] [2; 6; 4]) = \"YES\"));\n  (assert ((candidate [5; 7; 3] [2; 6; 3]) = \"NO\"));\n  (assert ((candidate [3; 2; 6; 1; 8; 9] [3; 5; 5; 1; 1; 1]) = \"NO\"));\n  (assert ((candidate [100; 200] [200; 200]) = \"YES\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_111_histogram", "prompt": "(**Given a string representing a space separated lowercase letters, return an association list\n * of the letter with the most repetition and containing the corresponding count.\n * If several letters have the same occurrence, return all of them.\n * Example:\n * >>> histogram \"a b c\"\n * [(\"a\", 1); (\"b\", 1); (\"c\", 1)]\n * >>> histogram \"a b b a\"\n * [(\"a\", 2); (\"b\", 2)]\n * >>> histogram \"a b c a b\"\n * [(\"a\", 2); (\"b\", 2)]\n * >>> histogram \"b b b b a\"\n * [(\"b\", 4)]\n * >>> histogram \"\"\n * []\n*)\nlet histogram (test : string) : (string, int) list =", "test": "\nlet assertions =\n let candidate = histogram in\n  (assert ((candidate \"a b b a\") = [(\"a\", 2); (\"b\", 2)]));\n  (assert ((candidate \"a b c a b\") = [(\"a\", 2); (\"b\", 2)]));\n  (assert ((candidate \"a b c d g\") = [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)]));\n  (assert ((candidate \"r t g\") = [(\"r\", 1); (\"t\", 1); (\"g\", 1)]));\n  (assert ((candidate \"b b b b a\") = [(\"b\", 4)]));\n  (assert ((candidate \"r t g\") = [(\"r\", 1); (\"t\", 1); (\"g\", 1)]));\n  (assert ((candidate \"\") = []));\n  (assert ((candidate \"a\") = [(\"a\", 1)]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "(**Task\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n * then check if the result string is palindrome.\n * A string is called palindrome if it reads the same backward as forward.\n * You should return a tuple containing the result string and true/false for the check.\n * Example\n * >>> reverse_delete \"abcde\" \"ae\"\n * (\"bcd\", false)\n * >>> reverse_delete \"abcdef\" \"b\"\n * (\"acdef\", false)\n * >>> reverse_delete \"abcdedcba\" \"ab\"\n * (\"cdedc\", true)\n*)\nlet reverse_delete (s : string) (c : string) :  string * bool =", "test": "\nlet assertions =\n let candidate = reverse_delete in\n  (assert ((candidate \"abcde\" \"ae\") = (\"bcd\", false)));\n  (assert ((candidate \"abcdef\" \"b\") = (\"acdef\", false)));\n  (assert ((candidate \"abcdedcba\" \"ab\") = (\"cdedc\", true)));\n  (assert ((candidate \"dwik\" \"w\") = (\"dik\", false)));\n  (assert ((candidate \"a\" \"a\") = (\"\", true)));\n  (assert ((candidate \"abcdedcba\" \"\") = (\"abcdedcba\", true)));\n  (assert ((candidate \"abcdedcba\" \"v\") = (\"abcdedcba\", true)));\n  (assert ((candidate \"vabba\" \"v\") = (\"abba\", true)));\n  (assert ((candidate \"mamma\" \"mia\") = (\"\", true)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_113_odd_count", "prompt": "(**Given a list of strings, where each string consists of only digits, return a list.\n * Each element i of the output should be \"the number of odd elements in the\n * string i of the input.\" where all the i's should be replaced by the number\n * of odd digits in the i'th string of the input.\n * >>> odd_count [\"1234567\"]\n * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n * >>> odd_count [\"3\"; \"11111111\"]\n * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"; \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n*)\nlet odd_count (lst : string list) : string list =", "test": "\nlet assertions =\n let candidate = odd_count in\n  (assert ((candidate [\"1234567\"]) = [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]));\n  (assert ((candidate [\"3\"; \"11111111\"]) = [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"; \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]));\n  (assert ((candidate [\"271\"; \"137\"; \"314\"]) = [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"; \"the number of odd elements 3n the str3ng 3 of the 3nput.\"; \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "(**Given a list of integers nums, find the minimum sum of any non-empty sub-list\n * of nums.\n * Example\n * >>> minSubArraySum [2; 3; 4; 1; 2; 4]\n * 1\n * >>> minSubArraySum [(~1); (~2); (~3)]\n * (~6)\n*)\nlet minSubArraySum (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = minSubArraySum in\n  (assert ((candidate [2; 3; 4; 1; 2; 4]) = 1));\n  (assert ((candidate [(~1); (~2); (~3)]) = (~6)));\n  (assert ((candidate [(~1); (~2); (~3); 2; (~10)]) = (~14)));\n  (assert ((candidate [(~9999999999999999)]) = (~9999999999999999)));\n  (assert ((candidate [0; 10; 20; 1000000]) = 0));\n  (assert ((candidate [(~1); (~2); (~3); 10; (~5)]) = (~6)));\n  (assert ((candidate [100; (~1); (~2); (~3); 10; (~5)]) = (~6)));\n  (assert ((candidate [10; 11; 13; 8; 3; 4]) = 3));\n  (assert ((candidate [100; (~33); 32; (~1); 0; (~2)]) = (~33)));\n  (assert ((candidate [(~10)]) = (~10)));\n  (assert ((candidate [7]) = 7));\n  (assert ((candidate [1; (~1)]) = (~1)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_115_max_fill", "prompt": "(**You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n * Example 1:\n * >>> max_fill [[0; 0; 1; 0]; [0; 1; 0; 0]; [1; 1; 1; 1]] 1\n * 6\n * Example 2:\n * >>> max_fill [[0; 0; 1; 1]; [0; 0; 0; 0]; [1; 1; 1; 1]; [0; 1; 1; 1]] 2\n * 5\n * Example 3:\n * >>> max_fill [[0; 0; 0]; [0; 0; 0]] 5\n * 0\n * Constraints:\n * * all wells have the same length\n * * 1 <= grid.length <= 10^2\n * * 1 <= grid[:,1].length <= 10^2\n * * grid[i][j] -> 0 | 1\n * * 1 <= capacity <= 10\n*)\nlet max_fill (grid : int list list) (capacity : int) : int =", "test": "\nlet assertions =\n let candidate = max_fill in\n  (assert ((candidate [[0; 0; 1; 0]; [0; 1; 0; 0]; [1; 1; 1; 1]] 1) = 6));\n  (assert ((candidate [[0; 0; 1; 1]; [0; 0; 0; 0]; [1; 1; 1; 1]; [0; 1; 1; 1]] 2) = 5));\n  (assert ((candidate [[0; 0; 0]; [0; 0; 0]] 5) = 0));\n  (assert ((candidate [[1; 1; 1; 1]; [1; 1; 1; 1]] 2) = 4));\n  (assert ((candidate [[1; 1; 1; 1]; [1; 1; 1; 1]] 9) = 2));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_116_sort_array", "prompt": "(**In this Kata, you have to sort a list of non-negative integers according to\n * number of ones in their binary representation in ascending order.\n * For similar number of ones, sort based on decimal value.\n * It must be implemented like this:\n * >>> sort_array [1; 5; 2; 3; 4]\n * [1; 2; 3; 4; 5]\n * >>> sort_array [(~2); (~3); (~4); (~5); (~6)]\n * [(~6); (~5); (~4); (~3); (~2)]\n * >>> sort_array [1; 0; 2; 3; 4]\n * [0; 1; 2; 3; 4]\n*)\nlet sort_array (arr : int list) : int list =", "test": "\nlet assertions =\n let candidate = sort_array in\n  (assert ((candidate [1; 5; 2; 3; 4]) = [1; 2; 4; 3; 5]));\n  (assert ((candidate [(~2); (~3); (~4); (~5); (~6)]) = [(~4); (~2); (~6); (~5); (~3)]));\n  (assert ((candidate [1; 0; 2; 3; 4]) = [0; 1; 2; 4; 3]));\n  (assert ((candidate []) = []));\n  (assert ((candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4]) = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77]));\n  (assert ((candidate [3; 6; 44; 12; 32; 5]) = [32; 3; 5; 6; 12; 44]));\n  (assert ((candidate [2; 4; 8; 16; 32]) = [2; 4; 8; 16; 32]));\n  (assert ((candidate [2; 4; 8; 16; 32]) = [2; 4; 8; 16; 32]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_117_select_words", "prompt": "(**Given a string s and a natural number n, you have been tasked to implement \n * a function that returns a list of all words from string s that contain exactly \n * n consonants, in order these words appear in the string s.\n * If the string s is empty then the function should return an empty list.\n * Note: you may assume the input string contains only letters and spaces.\n * Examples:\n * >>> select_words \"Mary had a little lamb\" 4\n * [\"little\"]\n * >>> select_words \"Mary had a little lamb\" 3\n * [\"Mary\"; \"lamb\"]\n * >>> select_words \"simple white space\" 2\n * []\n * >>> select_words \"Hello world\" 4\n * [\"world\"]\n * >>> select_words \"Uncle sam\" 3\n * [\"Uncle\"]\n*)\nlet select_words (s : string) (n : int) : string list =", "test": "\nlet assertions =\n let candidate = select_words in\n  (assert ((candidate \"Mary had a little lamb\" 4) = [\"little\"]));\n  (assert ((candidate \"Mary had a little lamb\" 3) = [\"Mary\"; \"lamb\"]));\n  (assert ((candidate \"simple white space\" 2) = []));\n  (assert ((candidate \"Hello world\" 4) = [\"world\"]));\n  (assert ((candidate \"Uncle sam\" 3) = [\"Uncle\"]));\n  (assert ((candidate \"\" 4) = []));\n  (assert ((candidate \"a b c d e f\" 1) = [\"b\"; \"c\"; \"d\"; \"f\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "(**You are given a word. Your task is to find the closest vowel that stands between \n * two consonants from the right side of the word (case sensitive).\n * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n * find any vowel met the above condition. \n * You may assume that the given string contains English letter only.\n * Example:\n * >>> get_closest_vowel \"yogurt\"\n * \"u\"\n * >>> get_closest_vowel \"FULL\"\n * \"U\"\n * >>> get_closest_vowel \"quick\"\n * \"\"\n * >>> get_closest_vowel \"ab\"\n * \"\"\n*)\nlet get_closest_vowel (word : string) : string =", "test": "\nlet assertions =\n let candidate = get_closest_vowel in\n  (assert ((candidate \"yogurt\") = \"u\"));\n  (assert ((candidate \"full\") = \"u\"));\n  (assert ((candidate \"easy\") = \"\"));\n  (assert ((candidate \"eAsy\") = \"\"));\n  (assert ((candidate \"ali\") = \"\"));\n  (assert ((candidate \"bad\") = \"a\"));\n  (assert ((candidate \"most\") = \"o\"));\n  (assert ((candidate \"ab\") = \"\"));\n  (assert ((candidate \"ba\") = \"\"));\n  (assert ((candidate \"quick\") = \"\"));\n  (assert ((candidate \"anime\") = \"i\"));\n  (assert ((candidate \"Asia\") = \"\"));\n  (assert ((candidate \"Above\") = \"o\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_119_match_parens", "prompt": "(**You are given a list of two strings, both strings consist of open\n * parentheses '(' or close parentheses ')' only.\n * Your job is to check if it is possible to concatenate the two strings in\n * some order, that the resulting string will be good.\n * A string S is considered to be good if and only if all parentheses in S\n * are balanced. For example: the string '(())()' is good, while the string\n * '())' is not.\n * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n * Examples:\n * >>> match_parens [\"()(\"; \")\"]\n * \"Yes\"\n * >>> match_parens [\")\"; \")\"]\n * \"No\"\n*)\nlet match_parens (lst : string list) : string =", "test": "\nlet assertions =\n let candidate = match_parens in\n  (assert ((candidate [\"()(\"; \")\"]) = \"Yes\"));\n  (assert ((candidate [\")\"; \")\"]) = \"No\"));\n  (assert ((candidate [\"(()(())\"; \"())())\"]) = \"No\"));\n  (assert ((candidate [\")())\"; \"(()()(\"]) = \"Yes\"));\n  (assert ((candidate [\"(())))\"; \"(()())((\"]) = \"Yes\"));\n  (assert ((candidate [\"()\"; \"())\"]) = \"No\"));\n  (assert ((candidate [\"(()(\"; \"()))()\"]) = \"Yes\"));\n  (assert ((candidate [\"((((\"; \"((())\"]) = \"No\"));\n  (assert ((candidate [\")(()\"; \"(()(\"]) = \"No\"));\n  (assert ((candidate [\")(\"; \")(\"]) = \"No\"));\n  (assert ((candidate [\"(\"; \")\"]) = \"Yes\"));\n  (assert ((candidate [\")\"; \"(\"]) = \"Yes\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_120_maximum", "prompt": "(**Given a list arr of integers and a positive integer k, return a sorted list \n * of length k with the maximum k numbers in arr.\n * Example 1:\n * >>> maximum [(~3); (~4); 5] 3\n * [(~4); (~3); 5]\n * Example 2:\n * >>> maximum [4; (~4); 4] 2\n * [4; 4]\n * Example 3:\n * >>> maximum [(~3); 2; 1; 2; (~1); (~2); 1] 1\n * [2]\n * Note:\n * 1. The length of the list will be in the range of [1, 1000].\n * 2. The elements in the list will be in the range of [-1000, 1000].\n * 3. 0 <= k <= len(arr)\n*)\nlet maximum (arr : int list) (k : int) : int list =", "test": "\nlet assertions =\n let candidate = maximum in\n  (assert ((candidate [(~3); (~4); 5] 3) = [(~4); (~3); 5]));\n  (assert ((candidate [4; (~4); 4] 2) = [4; 4]));\n  (assert ((candidate [(~3); 2; 1; 2; (~1); (~2); 1] 1) = [2]));\n  (assert ((candidate [123; (~123); 20; 0; 1; 2; (~3)] 3) = [2; 20; 123]));\n  (assert ((candidate [(~123); 20; 0; 1; 2; (~3)] 4) = [0; 1; 2; 20]));\n  (assert ((candidate [5; 15; 0; 3; (~13); (~8); 0] 7) = [(~13); (~8); 0; 0; 3; 5; 15]));\n  (assert ((candidate [(~1); 0; 2; 5; 3; (~10)] 2) = [3; 5]));\n  (assert ((candidate [1; 0; 5; (~7)] 1) = [5]));\n  (assert ((candidate [4; (~4)] 2) = [(~4); 4]));\n  (assert ((candidate [(~10); 10] 2) = [(~10); 10]));\n  (assert ((candidate [1; 2; 3; (~23); 243; (~400); 0] 0) = []));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_121_solution", "prompt": "(**Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n * Examples\n * >>> solution [5; 8; 7; 1]\n * 12\n * >>> solution [3; 3; 3; 3; 3]\n * 9\n * >>> solution [30; 13; 24; 321]\n * 0\n*)\nlet solution (lst : int list) : int =", "test": "\nlet assertions =\n let candidate = solution in\n  (assert ((candidate [5; 8; 7; 1]) = 12));\n  (assert ((candidate [3; 3; 3; 3; 3]) = 9));\n  (assert ((candidate [30; 13; 24; 321]) = 0));\n  (assert ((candidate [5; 9]) = 5));\n  (assert ((candidate [2; 4; 8]) = 0));\n  (assert ((candidate [30; 13; 23; 32]) = 23));\n  (assert ((candidate [3; 13; 2; 9]) = 3));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_122_add_elements", "prompt": "(**Given a non-empty list of integers arr and an integer k, return\n * the sum of the elements with at most two digits from the first k elements of arr.\n * Example:\n * >>> add_elements [111; 21; 3; 4000; 5; 6; 7; 8; 9] 4\n * 24\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n*)\nlet add_elements (arr : int list) (k : int) : int =", "test": "\nlet assertions =\n let candidate = add_elements in\n  (assert ((candidate [1; (~2); (~3); 41; 57; 76; 87; 88; 99] 3) = (~4)));\n  (assert ((candidate [111; 121; 3; 4000; 5; 6] 2) = 0));\n  (assert ((candidate [11; 21; 3; 90; 5; 6; 7; 8; 9] 4) = 125));\n  (assert ((candidate [111; 21; 3; 4000; 5; 6; 7; 8; 9] 4) = 24));\n  (assert ((candidate [1] 1) = 1));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "(**Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n * as follows: start with any positive integer n. Then each term is obtained from the \n * previous term as follows: if the previous term is even, the next term is one half of \n * the previous term. If the previous term is odd, the next term is 3 times the previous\n * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n * Note: \n * 1. Collatz(1) is [1].\n * 2. returned list sorted in increasing order.\n * For example:\n * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n * >>> get_odd_collatz 5\n * [1; 5]\n*)\nlet get_odd_collatz (n : int) : int list =", "test": "\nlet assertions =\n let candidate = get_odd_collatz in\n  (assert ((candidate 14) = [1; 5; 7; 11; 13; 17]));\n  (assert ((candidate 5) = [1; 5]));\n  (assert ((candidate 12) = [1; 3; 5]));\n  (assert ((candidate 1) = [1]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_124_valid_date", "prompt": "(**You have to write a function which validates a given date string and\n * returns true if the date is valid otherwise false.\n * The date is valid if all of the following rules are satisfied:\n * 1. The date string is not empty.\n * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n * 3. The months should not be less than 1 or higher than 12.\n * 4. The date should be in the format: mm-dd-yyyy\n * >>> valid_date \"03-11-2000\"\n * true\n * >>> valid_date \"15-01-2012\"\n * false\n * >>> valid_date \"04-0-2040\"\n * false\n * >>> valid_date \"06-04-2020\"\n * true\n * >>> valid_date \"06/04/2020\"\n * false\n*)\nlet valid_date (date : string) : bool =", "test": "\nlet assertions =\n let candidate = valid_date in\n  (assert ((candidate \"03-11-2000\") = true));\n  (assert ((candidate \"15-01-2012\") = false));\n  (assert ((candidate \"04-0-2040\") = false));\n  (assert ((candidate \"06-04-2020\") = true));\n  (assert ((candidate \"01-01-2007\") = true));\n  (assert ((candidate \"03-32-2011\") = false));\n  (assert ((candidate \"\") = false));\n  (assert ((candidate \"04-31-3000\") = false));\n  (assert ((candidate \"06-06-2005\") = true));\n  (assert ((candidate \"21-31-2000\") = false));\n  (assert ((candidate \"04-12-2003\") = true));\n  (assert ((candidate \"04122003\") = false));\n  (assert ((candidate \"20030412\") = false));\n  (assert ((candidate \"2003-04\") = false));\n  (assert ((candidate \"2003-04-12\") = false));\n  (assert ((candidate \"04-2003\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "(**Given a list of numbers, return whether or not they are sorted\n * in ascending order. If list has more than 1 duplicate of the same\n * number, return false. Assume no negative numbers and only integers.\n * Examples\n * >>> is_sorted [5]\n * true\n * >>> is_sorted [1; 2; 3; 4; 5]\n * true\n * >>> is_sorted [1; 3; 2; 4; 5]\n * false\n * >>> is_sorted [1; 2; 3; 4; 5; 6]\n * true\n * >>> is_sorted [1; 2; 3; 4; 5; 6; 7]\n * true\n * >>> is_sorted [1; 3; 2; 4; 5; 6; 7]\n * false\n * >>> is_sorted [1; 2; 2; 3; 3; 4]\n * true\n * >>> is_sorted [1; 2; 2; 2; 3; 4]\n * false\n*)\nlet is_sorted (lst : int list) : bool =", "test": "\nlet assertions =\n let candidate = is_sorted in\n  (assert ((candidate [5]) = true));\n  (assert ((candidate [1; 2; 3; 4; 5]) = true));\n  (assert ((candidate [1; 3; 2; 4; 5]) = false));\n  (assert ((candidate [1; 2; 3; 4; 5; 6]) = true));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7]) = true));\n  (assert ((candidate [1; 3; 2; 4; 5; 6; 7]) = false));\n  (assert ((candidate []) = true));\n  (assert ((candidate [1]) = true));\n  (assert ((candidate [3; 2; 1]) = false));\n  (assert ((candidate [1; 2; 2; 2; 3; 4]) = false));\n  (assert ((candidate [1; 2; 3; 3; 3; 4]) = false));\n  (assert ((candidate [1; 2; 2; 3; 3; 4]) = true));\n  (assert ((candidate [1; 2; 3; 4]) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_127_intersection", "prompt": "(**You are given two intervals,\n * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n * The given intervals are closed which means that the interval (start, end)\n * includes both start and end.\n * For each given interval, it is assumed that its start is less or equal its end.\n * Your task is to determine whether the length of intersection of these two \n * intervals is a prime number.\n * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n * which its length is 1, which not a prime number.\n * If the length of the intersection is a prime number, return \"YES\",\n * otherwise, return \"NO\".\n * If the two intervals don't intersect, return \"NO\".\n * [input/output] samples:\n * >>> intersection (1, 2) (2, 3)\n * \"NO\"\n * >>> intersection ((~1), 1) (0, 4)\n * \"NO\"\n * >>> intersection ((~3), (~1)) ((~5), 5)\n * \"YES\"\n*)\nlet intersection (interval1 :  int * int) (interval2 :  int * int) : string =", "test": "\nlet assertions =\n let candidate = intersection in\n  (assert ((candidate (1, 2) (2, 3)) = \"NO\"));\n  (assert ((candidate ((~1), 1) (0, 4)) = \"NO\"));\n  (assert ((candidate ((~3), (~1)) ((~5), 5)) = \"YES\"));\n  (assert ((candidate ((~2), 2) ((~4), 0)) = \"YES\"));\n  (assert ((candidate ((~11), 2) ((~1), (~1))) = \"NO\"));\n  (assert ((candidate (1, 2) (3, 5)) = \"NO\"));\n  (assert ((candidate (1, 2) (1, 2)) = \"NO\"));\n  (assert ((candidate ((~2), (~2)) ((~3), (~2))) = \"NO\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "(**You are given a list arr of integers and you need to return\n * sum of magnitudes of integers multiplied by product of all signs\n * of each number in the list, represented by 1, -1 or 0.\n * Note: return None for empty arr.\n * Example:\n * >>> prod_signs [1; 2; 2; (~4)]\n * Some(9)\n * >>> prod_signs [0; 1]\n * Some(0)\n * >>> prod_signs []\n * Some(None)\n*)\nlet prod_signs (arr : int list) : int option =", "test": "\nlet assertions =\n let candidate = prod_signs in\n  (assert ((candidate [1; 2; 2; (~4)]) = Some((~9))));\n  (assert ((candidate [0; 1]) = Some(0)));\n  (assert ((candidate [1; 1; 1; 2; 3; (~1); 1]) = Some((~10))));\n  (assert ((candidate []) = Some(None)));\n  (assert ((candidate [2; 4; 1; 2; (~1); (~1); 9]) = Some(20)));\n  (assert ((candidate [(~1); 1; (~1); 1]) = Some(4)));\n  (assert ((candidate [(~1); 1; 1; 1]) = Some((~4))));\n  (assert ((candidate [(~1); 1; 1; 0]) = Some(0)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_129_minPath", "prompt": "(**Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n * You have to find the minimum path of length k in the grid. You can start\n * from any cell, and in each step you can move to any of the neighbor cells,\n * in other words, you can go to cells which share an edge with you current\n * cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n * Examples:    \n * >>> minPath [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]] 3\n * [1; 2; 1]\n * >>> minPath [[5; 9; 3]; [4; 1; 6]; [7; 8; 2]] 1\n * [1]\n*)\nlet minPath (grid : int list list) (k : int) : int list =", "test": "\nlet assertions =\n let candidate = minPath in\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]] 3) = [1; 2; 1]));\n  (assert ((candidate [[5; 9; 3]; [4; 1; 6]; [7; 8; 2]] 1) = [1]));\n  (assert ((candidate [[1; 2; 3; 4]; [5; 6; 7; 8]; [9; 10; 11; 12]; [13; 14; 15; 16]] 4) = [1; 2; 1; 2]));\n  (assert ((candidate [[6; 4; 13; 10]; [5; 7; 12; 1]; [3; 16; 11; 15]; [8; 14; 9; 2]] 7) = [1; 10; 1; 10; 1; 10; 1]));\n  (assert ((candidate [[8; 14; 9; 2]; [6; 4; 13; 15]; [5; 7; 1; 12]; [3; 10; 11; 16]] 5) = [1; 7; 1; 7; 1]));\n  (assert ((candidate [[11; 8; 7; 2]; [5; 16; 14; 4]; [9; 3; 15; 6]; [12; 13; 10; 1]] 9) = [1; 6; 1; 6; 1; 6; 1; 6; 1]));\n  (assert ((candidate [[12; 13; 10; 1]; [9; 3; 15; 6]; [5; 16; 14; 4]; [11; 8; 7; 2]] 12) = [1; 6; 1; 6; 1; 6; 1; 6; 1; 6; 1; 6]));\n  (assert ((candidate [[2; 7; 4]; [3; 1; 5]; [6; 8; 9]] 8) = [1; 3; 1; 3; 1; 3; 1; 3]));\n  (assert ((candidate [[6; 1; 5]; [3; 8; 9]; [2; 7; 4]] 8) = [1; 5; 1; 5; 1; 5; 1; 5]));\n  (assert ((candidate [[1; 2]; [3; 4]] 10) = [1; 2; 1; 2; 1; 2; 1; 2; 1; 2]));\n  (assert ((candidate [[1; 3]; [3; 2]] 10) = [1; 3; 1; 3; 1; 3; 1; 3; 1; 3]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_130_tri", "prompt": "(**Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n * the last couple centuries. However, what people don't know is Tribonacci sequence.\n * Tribonacci sequence is defined by the recurrence:\n * tri(1) = 3\n * tri(n) = 1 + n / 2, if n is even.\n * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n * For example:\n * tri(2) = 1 + (2 / 2) = 2\n * tri(4) = 3\n * tri(3) = tri(2) + tri(1) + tri(4)\n * = 2 + 3 + 3 = 8 \n * You are given a non-negative integer number n, you have to a return a list of the \n * first n + 1 numbers of the Tribonacci sequence.\n * Examples:\n * >>> tri 3\n * [1; 3; 2; 8]\n*)\nlet tri (n : int) : int list =", "test": "\nlet assertions =\n let candidate = tri in\n  (assert ((candidate 3) = [1; 3; 2; 8]));\n  (assert ((candidate 4) = [1; 3; 2; 8; 3]));\n  (assert ((candidate 5) = [1; 3; 2; 8; 3; 15]));\n  (assert ((candidate 6) = [1; 3; 2; 8; 3; 15; 4]));\n  (assert ((candidate 7) = [1; 3; 2; 8; 3; 15; 4; 24]));\n  (assert ((candidate 8) = [1; 3; 2; 8; 3; 15; 4; 24; 5]));\n  (assert ((candidate 9) = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35]));\n  (assert ((candidate 20) = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11]));\n  (assert ((candidate 0) = [1]));\n  (assert ((candidate 1) = [1; 3]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_131_digits", "prompt": "(**Given a positive integer n, return the product of the odd digits.\n * Return 0 if all digits are even.\n * For example:\n * >>> digits 1\n * 1\n * >>> digits 4\n * 0\n * >>> digits 235\n * 15\n*)\nlet digits (n : int) : int =", "test": "\nlet assertions =\n let candidate = digits in\n  (assert ((candidate 5) = 5));\n  (assert ((candidate 54) = 5));\n  (assert ((candidate 120) = 1));\n  (assert ((candidate 5014) = 5));\n  (assert ((candidate 98765) = 315));\n  (assert ((candidate 5576543) = 2625));\n  (assert ((candidate 2468) = 0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_132_is_nested", "prompt": "(**Create a function that takes a string as input which contains only square brackets.\n * The function should return true if and only if there is a valid subsequence of brackets \n * where at least one bracket in the subsequence is nested.\n * >>> is_nested \"[[]]\"\n * true\n * >>> is_nested \"[]]]]]]][[[[[]\"\n * false\n * >>> is_nested \"[][]\"\n * false\n * >>> is_nested \"[]\"\n * false\n * >>> is_nested \"[[][]]\"\n * true\n * >>> is_nested \"[[]][[\"\n * true\n*)\nlet is_nested (string : string) : bool =", "test": "\nlet assertions =\n let candidate = is_nested in\n  (assert ((candidate \"[[]]\") = true));\n  (assert ((candidate \"[]]]]]]][[[[[]\") = false));\n  (assert ((candidate \"[][]\") = false));\n  (assert ((candidate \"[]\") = false));\n  (assert ((candidate \"[[[[]]]]\") = true));\n  (assert ((candidate \"[]]]]]]]]]]\") = false));\n  (assert ((candidate \"[][][[]]\") = true));\n  (assert ((candidate \"[[]\") = false));\n  (assert ((candidate \"[]]\") = false));\n  (assert ((candidate \"[[]][[\") = true));\n  (assert ((candidate \"[[][]]\") = true));\n  (assert ((candidate \"\") = false));\n  (assert ((candidate \"[[[[[[[[\") = false));\n  (assert ((candidate \"]]]]]]]]\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "(**You are given a list of numbers.\n * You need to return the sum of squared numbers in the given list,\n * round each element in the list to the upper int(Ceiling) first.\n * Examples:\n * >>> lst [1.0; 2.0; 3.0]\n * 14\n * >>> lst [1.0; 4.0; 9.0]\n * 98\n * >>> lst [1.0; 3.0; 5.0; 7.0]\n * 84\n * >>> lst [1.4; 4.2; 0.0]\n * 29\n * >>> lst [-2.4; 1.0; 1.0]\n * 6\n*)\nlet sum_squares (lst : float list) : int =", "test": "\nlet assertions =\n let candidate = sum_squares in\n  (assert ((candidate [1.0; 2.0; 3.0]) = 14));\n  (assert ((candidate [1.0; 2.0; 3.0]) = 14));\n  (assert ((candidate [1.0; 3.0; 5.0; 7.0]) = 84));\n  (assert ((candidate [1.4; 4.2; 0.0]) = 29));\n  (assert ((candidate [-2.4; 1.0; 1.0]) = 6));\n  (assert ((candidate [100.0; 1.0; 15.0; 2.0]) = 10230));\n  (assert ((candidate [10000.0; 10000.0]) = 200000000));\n  (assert ((candidate [-1.4; 4.6; 6.3]) = 75));\n  (assert ((candidate [-1.4; 17.9; 18.9; 19.9]) = 1086));\n  (assert ((candidate [0.0]) = 0));\n  (assert ((candidate [-1.0]) = 1));\n  (assert ((candidate [-1.0; 1.0; 0.0]) = 2));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "(**Create a function that returns true if the last character\n * of a given string is an alphabetical character and is not\n * a part of a word, and false otherwise.\n * Note: \"word\" is a group of characters separated by space.\n * Examples:\n * >>> check_if_last_char_is_a_letter \"apple pie\"\n * false\n * >>> check_if_last_char_is_a_letter \"apple pi e\"\n * true\n * >>> check_if_last_char_is_a_letter \"apple pi e \"\n * false\n * >>> check_if_last_char_is_a_letter \"\"\n * false\n*)\nlet check_if_last_char_is_a_letter (txt : string) : bool =", "test": "\nlet assertions =\n let candidate = check_if_last_char_is_a_letter in\n  (assert ((candidate \"apple\") = false));\n  (assert ((candidate \"apple pi e\") = true));\n  (assert ((candidate \"eeeee\") = false));\n  (assert ((candidate \"A\") = true));\n  (assert ((candidate \"Pumpkin pie \") = false));\n  (assert ((candidate \"Pumpkin pie 1\") = false));\n  (assert ((candidate \"\") = false));\n  (assert ((candidate \"eeeee e \") = false));\n  (assert ((candidate \"apple pie\") = false));\n  (assert ((candidate \"apple pi e \") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "(**Create a function which returns the largest index of an element which\n * is not greater than or equal to the element immediately preceding it. If\n * no such element exists then return -1. The given list will not contain\n * duplicate values.\n * Examples:\n * >>> can_arrange [1; 2; 4; 3; 5]\n * 3\n * >>> can_arrange [1; 2; 3]\n * (~1)\n*)\nlet can_arrange (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = can_arrange in\n  (assert ((candidate [1; 2; 4; 3; 5]) = 3));\n  (assert ((candidate [1; 2; 4; 5]) = (~1)));\n  (assert ((candidate [1; 4; 2; 5; 6; 7; 8; 9; 10]) = 2));\n  (assert ((candidate [4; 8; 5; 7; 3]) = 4));\n  (assert ((candidate []) = (~1)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "(**Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n * Example\n * >>> is_equal_to_sum_even 4\n * false\n * >>> is_equal_to_sum_even 6\n * false\n * >>> is_equal_to_sum_even 8\n * true\n*)\nlet is_equal_to_sum_even (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_equal_to_sum_even in\n  (assert ((candidate 4) = false));\n  (assert ((candidate 6) = false));\n  (assert ((candidate 8) = true));\n  (assert ((candidate 10) = true));\n  (assert ((candidate 11) = false));\n  (assert ((candidate 12) = true));\n  (assert ((candidate 13) = false));\n  (assert ((candidate 16) = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "(**The Brazilian factorial is defined as:\n * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n * where n > 0\n * For example:\n * >>> special_factorial 4\n * 288\n * The function will receive an integer as input and should return the special\n * factorial of this integer.\n*)\nlet special_factorial (n : int) : int =", "test": "\nlet assertions =\n let candidate = special_factorial in\n  (assert ((candidate 4) = 288));\n  (assert ((candidate 5) = 34560));\n  (assert ((candidate 7) = 125411328000));\n  (assert ((candidate 1) = 1));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "(**Given a string text, replace all spaces in it with underscores, \n * and if a string has more than 2 consecutive spaces, \n * then replace all consecutive spaces with - \n * >>> fix_spaces \" Example\"\n * \"Example\"\n * >>> fix_spaces \" Example 1\"\n * \"Example_1\"\n * >>> fix_spaces \" Example 2\"\n * \"_Example_2\"\n * >>> fix_spaces \" Example 3\"\n * \"_Example-3\"\n*)\nlet fix_spaces (text : string) : string =", "test": "\nlet assertions =\n let candidate = fix_spaces in\n  (assert ((candidate \"Example\") = \"Example\"));\n  (assert ((candidate \"Mudasir Hanif \") = \"Mudasir_Hanif_\"));\n  (assert ((candidate \"Yellow Yellow  Dirty  Fellow\") = \"Yellow_Yellow__Dirty__Fellow\"));\n  (assert ((candidate \"Exa   mple\") = \"Exa-mple\"));\n  (assert ((candidate \"   Exa 1 2 2 mple\") = \"-Exa_1_2_2_mple\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "(**Create a function which takes a string representing a file's name, and returns\n * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n * A file's name is considered to be valid if and only if all the following conditions \n * are met:\n * - There should not be more than three digits ('0'-'9') in the file's name.\n * - The file's name contains exactly one dot '.'\n * - The substring before the dot should not be empty, and it starts with a letter from \n * the latin alphapet ('a'-'z' and 'A'-'Z').\n * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n * Examples:\n * >>> file_name_check \"example.txt\"\n * \"Yes\"\n * >>> file_name_check \"1example.dll\"\n * \"No\"\n*)\nlet file_name_check (file_name : string) : string =", "test": "\nlet assertions =\n let candidate = file_name_check in\n  (assert ((candidate \"example.txt\") = \"Yes\"));\n  (assert ((candidate \"1example.dll\") = \"No\"));\n  (assert ((candidate \"s1sdf3.asd\") = \"No\"));\n  (assert ((candidate \"K.dll\") = \"Yes\"));\n  (assert ((candidate \"MY16FILE3.exe\") = \"Yes\"));\n  (assert ((candidate \"His12FILE94.exe\") = \"No\"));\n  (assert ((candidate \"_Y.txt\") = \"No\"));\n  (assert ((candidate \"?aREYA.exe\") = \"No\"));\n  (assert ((candidate \"/this_is_valid.dll\") = \"No\"));\n  (assert ((candidate \"this_is_valid.wow\") = \"No\"));\n  (assert ((candidate \"this_is_valid.txt\") = \"Yes\"));\n  (assert ((candidate \"this_is_valid.txtexe\") = \"No\"));\n  (assert ((candidate \"#this2_i4s_5valid.ten\") = \"No\"));\n  (assert ((candidate \"@this1_is6_valid.exe\") = \"No\"));\n  (assert ((candidate \"this_is_12valid.6exe4.txt\") = \"No\"));\n  (assert ((candidate \"all.exe.txt\") = \"No\"));\n  (assert ((candidate \"I563_No.exe\") = \"Yes\"));\n  (assert ((candidate \"Is3youfault.txt\") = \"Yes\"));\n  (assert ((candidate \"no_one#knows.dll\") = \"Yes\"));\n  (assert ((candidate \"1I563_Yes3.exe\") = \"No\"));\n  (assert ((candidate \"I563_Yes3.txtt\") = \"No\"));\n  (assert ((candidate \"final..txt\") = \"No\"));\n  (assert ((candidate \"final132\") = \"No\"));\n  (assert ((candidate \"_f4indsartal132.\") = \"No\"));\n  (assert ((candidate \".txt\") = \"No\"));\n  (assert ((candidate \"s.\") = \"No\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "(**\"\n * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n * Examples:\n * >>> lst\n * [1; 2; 3]\n * >>> lst\n * []\n * >>> lst\n * [(~1); (~5); 2; (~1); (~5)]\n*)\nlet sum_squares (lst : int list) : int =", "test": "\nlet assertions =\n let candidate = sum_squares in\n  (assert ((candidate [1; 2; 3]) = 6));\n  (assert ((candidate [1; 4; 9]) = 14));\n  (assert ((candidate []) = 0));\n  (assert ((candidate [1; 1; 1; 1; 1; 1; 1; 1; 1]) = 9));\n  (assert ((candidate [(~1); (~1); (~1); (~1); (~1); (~1); (~1); (~1); (~1)]) = (~3)));\n  (assert ((candidate [0]) = 0));\n  (assert ((candidate [(~1); (~5); 2; (~1); (~5)]) = (~126)));\n  (assert ((candidate [(~56); (~99); 1; 0; (~2)]) = 3030));\n  (assert ((candidate [(~1); 0; 0; 0; 0; 0; 0; 0; (~1)]) = 0));\n  (assert ((candidate [(~16); (~9); (~2); 36; 36; 26; (~20); 25; (~40); 20; (~4); 12; (~26); 35; 37]) = (~14196)));\n  (assert ((candidate [(~1); (~3); 17; (~1); (~15); 13; (~1); 14; (~14); (~12); (~5); 14; (~14); 6; 13; 11; 16; 16; 4; 10]) = (~1448)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "(**You are given a string representing a sentence,\n * the sentence contains some words separated by a space,\n * and you have to return a string that contains the words from the original sentence,\n * whose lengths are prime numbers,\n * the order of the words in the new string should be the same as the original one.\n * Example 1:\n * >>> words_in_sentence \"This is a test\"\n * \"is\"\n * Example 2:\n * >>> words_in_sentence \"lets go for swimming\"\n * \"go for\"\n * Constraints:\n * * 1 <= len(sentence) <= 100\n * * sentence contains only letters\n*)\nlet words_in_sentence (sentence : string) : string =", "test": "\nlet assertions =\n let candidate = words_in_sentence in\n  (assert ((candidate \"This is a test\") = \"is\"));\n  (assert ((candidate \"lets go for swimming\") = \"go for\"));\n  (assert ((candidate \"there is no place available here\") = \"there is no place\"));\n  (assert ((candidate \"Hi I am Hussein\") = \"Hi am Hussein\"));\n  (assert ((candidate \"go for it\") = \"go for it\"));\n  (assert ((candidate \"here\") = \"\"));\n  (assert ((candidate \"here is\") = \"is\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_144_simplify", "prompt": "(**Your task is to implement a function that will simplify the expression\n * x * n. The function returns true if x * n evaluates to a whole number and false\n * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n * >>> simplify \"1/5\" \"5/1\"\n * true\n * >>> simplify \"1/6\" \"2/1\"\n * false\n * >>> simplify \"7/10\" \"10/2\"\n * false\n*)\nlet simplify (x : string) (n : string) : bool =", "test": "\nlet assertions =\n let candidate = simplify in\n  (assert ((candidate \"1/5\" \"5/1\") = true));\n  (assert ((candidate \"1/6\" \"2/1\") = false));\n  (assert ((candidate \"5/1\" \"3/1\") = true));\n  (assert ((candidate \"7/10\" \"10/2\") = false));\n  (assert ((candidate \"2/10\" \"50/10\") = true));\n  (assert ((candidate \"7/2\" \"4/2\") = true));\n  (assert ((candidate \"11/6\" \"6/1\") = true));\n  (assert ((candidate \"2/3\" \"5/2\") = false));\n  (assert ((candidate \"5/2\" \"3/5\") = false));\n  (assert ((candidate \"2/4\" \"8/4\") = true));\n  (assert ((candidate \"2/4\" \"4/2\") = true));\n  (assert ((candidate \"1/5\" \"5/1\") = true));\n  (assert ((candidate \"1/5\" \"1/5\") = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "(**Write a function which sorts the given list of integers\n * in ascending order according to the sum of their digits.\n * Note: if there are several items with similar sum of their digits,\n * order them based on their index in original list.\n * For example:\n * >>> order_by_points [1; 11; (~1); (~11); (~12)]\n * [(~1); (~11); 1; (~12); 11]\n * >>> order_by_points []\n * []\n*)\nlet order_by_points (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = order_by_points in\n  (assert ((candidate [1; 11; (~1); (~11); (~12)]) = [(~1); (~11); 1; (~12); 11]));\n  (assert ((candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46]) = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457]));\n  (assert ((candidate []) = []));\n  (assert ((candidate [1; (~11); (~32); 43; 54; (~98); 2; (~3)]) = [(~3); (~32); (~98); (~11); 1; 2; 43; 54]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]) = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9]));\n  (assert ((candidate [0; 6; 6; (~76); (~21); 23; 4]) = [(~76); (~21); 0; 4; 23; 6; 6]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "(**Write a function that takes a list of numbers as input and returns \n * the number of elements in the list that are greater than 10 and both \n * first and last digits of a number are odd (1, 3, 5, 7, 9).\n * For example:\n * >>> specialFilter [15; (~73); 14; (~15)]\n * 1\n * >>> specialFilter [33; (~2); (~3); 45; 21; 109]\n * 2\n*)\nlet specialFilter (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = specialFilter in\n  (assert ((candidate [5; (~2); 1; (~5)]) = 0));\n  (assert ((candidate [15; (~73); 14; (~15)]) = 1));\n  (assert ((candidate [33; (~2); (~3); 45; 21; 109]) = 2));\n  (assert ((candidate [43; (~12); 93; 125; 121; 109]) = 4));\n  (assert ((candidate [71; (~2); (~33); 75; 21; 19]) = 3));\n  (assert ((candidate [1]) = 0));\n  (assert ((candidate []) = 0));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "(**You are given a positive integer n. You have to create an integer list a of length n.\n * For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n * and a[i] + a[j] + a[k] is a multiple of 3.\n * Example :\n * >>> get_max_triples 5\n * 1\n * Explanation: \n * a = [1, 3, 7, 13, 21]\n * The only valid triple is (1, 7, 13).\n*)\nlet get_max_triples (n : int) : int =", "test": "\nlet assertions =\n let candidate = get_max_triples in\n  (assert ((candidate 5) = 1));\n  (assert ((candidate 6) = 4));\n  (assert ((candidate 10) = 36));\n  (assert ((candidate 100) = 53361));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "(**Write a function that accepts a list of strings as a parameter,\n * deletes the strings that have odd lengths from it,\n * and returns the resulted list with a sorted order,\n * The list is always a list of strings and never a list of numbers,\n * and it may contain duplicates.\n * The order of the list should be ascending by length of each word, and you\n * should return the list sorted by that rule.\n * If two words have the same length, sort the list alphabetically.\n * The function should return a list of strings in sorted order.\n * You may assume that all words will have the same length.\n * For example:\n * >>> list_sort [\"aa\"; \"a\"; \"aaa\"]\n * [\"aa\"]\n * >>> list_sort [\"ab\"; \"a\"; \"aaa\"; \"cd\"]\n * [\"ab\"; \"cd\"]\n*)\nlet sorted_list_sum (lst : string list) : string list =", "test": "\nlet assertions =\n let candidate = sorted_list_sum in\n  (assert ((candidate [\"aa\"; \"a\"; \"aaa\"]) = [\"aa\"]));\n  (assert ((candidate [\"school\"; \"AI\"; \"asdf\"; \"b\"]) = [\"AI\"; \"asdf\"; \"school\"]));\n  (assert ((candidate [\"d\"; \"b\"; \"c\"; \"a\"]) = []));\n  (assert ((candidate [\"d\"; \"dcba\"; \"abcd\"; \"a\"]) = [\"abcd\"; \"dcba\"]));\n  (assert ((candidate [\"AI\"; \"ai\"; \"au\"]) = [\"AI\"; \"ai\"; \"au\"]));\n  (assert ((candidate [\"a\"; \"b\"; \"b\"; \"c\"; \"c\"; \"a\"]) = []));\n  (assert ((candidate [\"aaaa\"; \"bbbb\"; \"dd\"; \"cc\"]) = [\"cc\"; \"dd\"; \"aaaa\"; \"bbbb\"]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "(**A simple program which should return the value of x if n is \n * a prime number and should return the value of y otherwise.\n * Examples:\n * >>> x_or_y 7 34 12\n * 34\n * >>> x_or_y 15 8 5\n * 5\n*)\nlet x_or_y (n : int) (x : int) (y : int) : int =", "test": "\nlet assertions =\n let candidate = x_or_y in\n  (assert ((candidate 7 34 12) = 34));\n  (assert ((candidate 15 8 5) = 5));\n  (assert ((candidate 3 33 5212) = 33));\n  (assert ((candidate 1259 3 52) = 3));\n  (assert ((candidate 7919 (~1) 12) = (~1)));\n  (assert ((candidate 3609 1245 583) = 583));\n  (assert ((candidate 91 56 129) = 129));\n  (assert ((candidate 6 34 1234) = 1234));\n  (assert ((candidate 1 2 0) = 0));\n  (assert ((candidate 2 2 0) = 2));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "(**Given a list of numbers, return the sum of squares of the numbers\n * in the list that are odd. Ignore numbers that are negative or not integers.\n * >>> double_the_difference [1; 3; 2; 0]\n * 10\n * >>> double_the_difference [(~1); (~2); 0]\n * 0\n * >>> double_the_difference [9; (~2)]\n * 81\n * >>> double_the_difference [0]\n * 0\n * If the input list is empty, return 0.\n*)\nlet double_the_difference (lst : float list) : int =", "test": "\nlet assertions =\n let candidate = double_the_difference in\n  (assert ((candidate [.0]) = 0));\n  (assert ((candidate [5.0; 4.0]) = 25));\n  (assert ((candidate [0.1; 0.2; 0.3]) = 0));\n  (assert ((candidate [-10.0; -20.0; -30.0]) = 0));\n  (assert ((candidate [-1.0; -2.0; 8.0]) = 0));\n  (assert ((candidate [0.2; 3.0; 5.0]) = 34));\n  (assert ((candidate [-9.0; -7.0; -5.0; -3.0; -1.0; 1.0; 3.0; 5.0; 7.0; 9.0]) = 165));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_152_compare", "prompt": "(**I think we all remember that feeling when the result of some long-awaited\n * event is finally known. The feelings and thoughts you have at that moment are\n * definitely worth noting down and comparing.\n * Your task is to determine if a person correctly guessed the results of a number of matches.\n * You are given two lists of scores and guesses of equal length, where each index shows a match. \n * Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n * example:\n * >>> compare [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; (~2)]\n * [0; 0; 0; 0; 3; 3]\n * >>> compare [0; 5; 0; 0; 0; 4] [4; 1; 1; 0; 0; (~2)]\n * [4; 4; 1; 0; 0; 6]\n*)\nlet compare (game : int list) (guess : int list) : int list =", "test": "\nlet assertions =\n let candidate = compare in\n  (assert ((candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; (~2)]) = [0; 0; 0; 0; 3; 3]));\n  (assert ((candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0]) = [0; 0; 0; 0; 0; 0]));\n  (assert ((candidate [1; 2; 3] [(~1); (~2); (~3)]) = [2; 4; 6]));\n  (assert ((candidate [1; 2; 3; 5] [(~1); 2; 3; 4]) = [2; 0; 0; 1]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "(**You will be given the name of a class (a string) and a list of extensions.\n * The extensions are to be used to load additional classes to the class. The\n * strength of the extension is as follows: Let CAP be the number of the uppercase\n * letters in the extension's name, and let SM be the number of lowercase letters \n * in the extension's name, the strength is given by the fraction CAP - SM. \n * You should find the strongest extension and return a string in this \n * format: ClassName.StrongestExtensionName.\n * If there are two or more extensions with the same strength, you should\n * choose the one that comes first in the list.\n * For example, if you are given \"Slices\" as the class and a list of the\n * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n * (its strength is -1).\n * Example:\n * >>> Strongest_Extension \"my_class\" [\"AA\"; \"Be\"; \"CC\"]\n * \"my_class.AA\"\n*)\nlet Strongest_Extension (class_name : string) (extensions : string list) : string =", "test": "\nlet assertions =\n let candidate = Strongest_Extension in\n  (assert ((candidate \"Watashi\" [\"tEN\"; \"niNE\"; \"eIGHt8OKe\"]) = \"Watashi.eIGHt8OKe\"));\n  (assert ((candidate \"Boku123\" [\"nani\"; \"NazeDa\"; \"YEs.WeCaNe\"; \"32145tggg\"]) = \"Boku123.YEs.WeCaNe\"));\n  (assert ((candidate \"__YESIMHERE\" [\"t\"; \"eMptY\"; \"nothing\"; \"zeR00\"; \"NuLl__\"; \"123NoooneB321\"]) = \"__YESIMHERE.NuLl__\"));\n  (assert ((candidate \"K\" [\"Ta\"; \"TAR\"; \"t234An\"; \"cosSo\"]) = \"K.TAR\"));\n  (assert ((candidate \"__HAHA\" [\"Tab\"; \"123\"; \"781345\"; \"-_-\"]) = \"__HAHA.123\"));\n  (assert ((candidate \"YameRore\" [\"HhAas\"; \"okIWILL123\"; \"WorkOut\"; \"Fails\"; \"-_-\"]) = \"YameRore.okIWILL123\"));\n  (assert ((candidate \"finNNalLLly\" [\"Die\"; \"NowW\"; \"Wow\"; \"WoW\"]) = \"finNNalLLly.WoW\"));\n  (assert ((candidate \"_\" [\"Bb\"; \"91245\"]) = \"_.Bb\"));\n  (assert ((candidate \"Sp\" [\"671235\"; \"Bb\"]) = \"Sp.671235\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "(**You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n * >>> cycpattern_check \"abcd\" \"abd\"\n * false\n * >>> cycpattern_check \"hello\" \"ell\"\n * true\n * >>> cycpattern_check \"whassup\" \"psus\"\n * false\n * >>> cycpattern_check \"abab\" \"baa\"\n * true\n * >>> cycpattern_check \"efef\" \"eeff\"\n * false\n * >>> cycpattern_check \"himenss\" \"simen\"\n * true\n*)\nlet cycpattern_check (a : string) (b : string) : bool =", "test": "\nlet assertions =\n let candidate = cycpattern_check in\n  (assert ((candidate \"xyzw\" \"xyw\") = false));\n  (assert ((candidate \"yello\" \"ell\") = true));\n  (assert ((candidate \"whattup\" \"ptut\") = false));\n  (assert ((candidate \"efef\" \"fee\") = true));\n  (assert ((candidate \"abab\" \"aabb\") = false));\n  (assert ((candidate \"winemtt\" \"tinem\") = true));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "(**Given an integer. return a tuple that has the number of even and odd digits respectively.\n * Example:\n * >>> even_odd_count (~12)\n * (1, 1)\n * >>> even_odd_count 123\n * (1, 2)\n*)\nlet even_odd_count (num : int) :  int * int =", "test": "\nlet assertions =\n let candidate = even_odd_count in\n  (assert ((candidate 7) = (0, 1)));\n  (assert ((candidate (~78)) = (1, 1)));\n  (assert ((candidate 3452) = (2, 2)));\n  (assert ((candidate 346211) = (3, 3)));\n  (assert ((candidate (~345821)) = (3, 3)));\n  (assert ((candidate (~2)) = (1, 0)));\n  (assert ((candidate (~45347)) = (2, 3)));\n  (assert ((candidate 0) = (1, 0)));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "(**Given a positive integer, obtain its roman numeral equivalent as a string,\n * and return it in lowercase.\n * Restrictions: 1 <= num <= 1000\n * Examples:\n * >>> int_to_mini_roman 19\n * \"xix\"\n * >>> int_to_mini_roman 152\n * \"clii\"\n * >>> int_to_mini_roman 426\n * \"cdxxvi\"\n*)\nlet int_to_mini_roman (number : int) : string =", "test": "\nlet assertions =\n let candidate = int_to_mini_roman in\n  (assert ((candidate 19) = \"xix\"));\n  (assert ((candidate 152) = \"clii\"));\n  (assert ((candidate 251) = \"ccli\"));\n  (assert ((candidate 426) = \"cdxxvi\"));\n  (assert ((candidate 500) = \"d\"));\n  (assert ((candidate 1) = \"i\"));\n  (assert ((candidate 4) = \"iv\"));\n  (assert ((candidate 43) = \"xliii\"));\n  (assert ((candidate 90) = \"xc\"));\n  (assert ((candidate 94) = \"xciv\"));\n  (assert ((candidate 532) = \"dxxxii\"));\n  (assert ((candidate 900) = \"cm\"));\n  (assert ((candidate 994) = \"cmxciv\"));\n  (assert ((candidate 1000) = \"m\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "(**Given the lengths of the three sides of a triangle. Return true if the three\n * sides form a right-angled triangle, false otherwise.\n * A right-angled triangle is a triangle in which one angle is right angle or \n * 90 degree.\n * Example:\n * >>> right_angle_triangle 3 4 5\n * true\n * >>> right_angle_triangle 1 2 3\n * false\n*)\nlet right_angle_triangle (a : int) (b : int) (c : int) : bool =", "test": "\nlet assertions =\n let candidate = right_angle_triangle in\n  (assert ((candidate 3 4 5) = true));\n  (assert ((candidate 1 2 3) = false));\n  (assert ((candidate 10 6 8) = true));\n  (assert ((candidate 2 2 2) = false));\n  (assert ((candidate 7 24 25) = true));\n  (assert ((candidate 10 5 7) = false));\n  (assert ((candidate 5 12 13) = true));\n  (assert ((candidate 15 8 17) = true));\n  (assert ((candidate 48 55 73) = true));\n  (assert ((candidate 1 1 1) = false));\n  (assert ((candidate 2 2 10) = false));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_158_find_max", "prompt": "(**Write a function that accepts a list of strings.\n * The list contains different words. Return the word with maximum number\n * of unique characters. If multiple strings have maximum number of unique\n * characters, return the one which comes first in lexicographical order.\n * >>> find_max [\"name\"; \"of\"; \"string\"]\n * \"string\"\n * >>> find_max [\"name\"; \"enam\"; \"game\"]\n * \"enam\"\n * >>> find_max [\"aaaaaaa\"; \"bb\"; \"cc\"]\n * \"aaaaaaa\"\n*)\nlet find_max (words : string list) : string =", "test": "\nlet assertions =\n let candidate = find_max in\n  (assert ((candidate [\"name\"; \"of\"; \"string\"]) = \"string\"));\n  (assert ((candidate [\"name\"; \"enam\"; \"game\"]) = \"enam\"));\n  (assert ((candidate [\"aaaaaaa\"; \"bb\"; \"cc\"]) = \"aaaaaaa\"));\n  (assert ((candidate [\"abc\"; \"cba\"]) = \"abc\"));\n  (assert ((candidate [\"play\"; \"this\"; \"game\"; \"of\"; \"footbott\"]) = \"footbott\"));\n  (assert ((candidate [\"we\"; \"are\"; \"gonna\"; \"rock\"]) = \"gonna\"));\n  (assert ((candidate [\"we\"; \"are\"; \"a\"; \"mad\"; \"nation\"]) = \"nation\"));\n  (assert ((candidate [\"this\"; \"is\"; \"a\"; \"prrk\"]) = \"this\"));\n  (assert ((candidate [\"b\"]) = \"b\"));\n  (assert ((candidate [\"play\"; \"play\"; \"play\"]) = \"play\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_159_eat", "prompt": "(**You're a hungry rabbit, and you already have eaten a certain number of carrots,\n * but now you need to eat more carrots to complete the day's meals.\n * you should return a list of [ total number of eaten carrots after your meals,\n * the number of carrots left after your meals ]\n * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n * Example:\n * >>> eat 5 6 10\n * [11; 4]\n * >>> eat 4 8 9\n * [12; 1]\n * >>> eat 1 10 10\n * [11; 0]\n * >>> eat 2 11 5\n * [7; 0]\n * Variables:\n * @number : integer\n * the number of carrots that you have eaten.\n * @need : integer\n * the number of carrots that you need to eat.\n * @remaining : integer\n * the number of remaining carrots thet exist in stock\n * Constrain:\n * * 0 <= number <= 1000\n * * 0 <= need <= 1000\n * * 0 <= remaining <= 1000\n * Have fun :)\n*)\nlet eat (number : int) (need : int) (remaining : int) : int list =", "test": "\nlet assertions =\n let candidate = eat in\n  (assert ((candidate 5 6 10) = [11; 4]));\n  (assert ((candidate 4 8 9) = [12; 1]));\n  (assert ((candidate 1 10 10) = [11; 0]));\n  (assert ((candidate 2 11 5) = [7; 0]));\n  (assert ((candidate 4 5 7) = [9; 2]));\n  (assert ((candidate 4 5 1) = [5; 0]));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "(**Given two lists operator, and operand. The first list has basic algebra operations, and \n * the second list is a list of integers. Use the two given lists to build the algebric \n * expression and return the evaluation of this expression.\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multiplication ( * ) \n * Floor division ( // ) \n * Exponentiation ( ** ) \n * Example:\n * operator['+', '*', '-']\n * list = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n * Note:\n * The length of operator list is equal to the length of operand list minus one.\n * Operand is a list of of non-negative integers.\n * Operator list has at least one operator, and operand list has at least two operands.\n*)\nlet do_algebra (operator : string list) (operand : int list) : int =", "test": "\nlet assertions =\n let candidate = do_algebra in\n  (assert ((candidate [\"**\"; \"*\"; \"+\"] [2; 3; 4; 5]) = 37));\n  (assert ((candidate [\"+\"; \"*\"; \"-\"] [2; 3; 4; 5]) = 9));\n  (assert ((candidate [\"//\"; \"*\"] [7; 3; 4]) = 8));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_161_solve", "prompt": "(**You are given a string s.\n * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n * otherwise keep it as it is.\n * If the string contains no letters, reverse the string.\n * The function should return the resulted string.\n * Examples\n * >>> solve \"1234\"\n * \"4321\"\n * >>> solve \"ab\"\n * \"AB\"\n * >>> solve \"#a@C\"\n * \"#A@c\"\n*)\nlet solve (s : string) : string =", "test": "\nlet assertions =\n let candidate = solve in\n  (assert ((candidate \"AsDf\") = \"aSdF\"));\n  (assert ((candidate \"1234\") = \"4321\"));\n  (assert ((candidate \"ab\") = \"AB\"));\n  (assert ((candidate \"#a@C\") = \"#A@c\"));\n  (assert ((candidate \"#AsdfW^45\") = \"#aSDFw^45\"));\n  (assert ((candidate \"#6@2\") = \"2@6#\"));\n  (assert ((candidate \"#$a^D\") = \"#$A^d\"));\n  (assert ((candidate \"#ccc\") = \"#CCC\"));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "(**Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return None.\n * >>> string_to_md5 \"Hello world\"\n * Some(\"3e25960a79dbc69b674cd4ec67a72c62\")\n*)\nlet string_to_md5 (text : string) : string option =", "test": "\nlet assertions =\n let candidate = string_to_md5 in\n  (assert ((candidate \"Hello world\") = Some(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  (assert ((candidate \"\") = Some(None)));\n  (assert ((candidate \"A B C\") = Some(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n  (assert ((candidate \"password\") = Some(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n  ()\n", "language": "ml"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "(**Given two positive integers a and b, return the even digits between a\n * and b, in ascending order.\n * For example:\n * >>> generate_integers 2 8\n * [2; 4; 6; 8]\n * >>> generate_integers 8 2\n * [2; 4; 6; 8]\n * >>> generate_integers 10 14\n * []\n*)\nlet generate_integers (a : int) (b : int) : int list =", "test": "\nlet assertions =\n let candidate = generate_integers in\n  (assert ((candidate 2 10) = [2; 4; 6; 8]));\n  (assert ((candidate 10 2) = [2; 4; 6; 8]));\n  (assert ((candidate 132 2) = [2; 4; 6; 8]));\n  (assert ((candidate 17 89) = []));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "(**Write a mlthon function to identify non-prime numbers.\n*)\nlet is_not_prime (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_not_prime in\n  (assert ((candidate 2) = false));\n  (assert ((candidate 10) = true));\n  (assert ((candidate 35) = true));\n  (assert ((candidate 37) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "(**Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n*)\nlet heap_queue_largest (nums : int list) (n : int) : int list =", "test": "\nlet assertions =\n let candidate = heap_queue_largest in\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 22; 58] 3) = [85; 75; 65]));\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 22; 58] 2) = [85; 75]));\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 22; 58] 5) = [85; 75; 65; 58; 35]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "(**Write a mlthon function to check whether the two numbers differ at one bit position only or not.\n*)\nlet differ_At_One_Bit_Pos (a : int) (b : int) : bool =", "test": "\nlet assertions =\n let candidate = differ_At_One_Bit_Pos in\n  (assert ((candidate 13 9) = true));\n  (assert ((candidate 15 8) = false));\n  (assert ((candidate 2 4) = false));\n  (assert ((candidate 2 3) = true));\n  (assert ((candidate 5 1) = true));\n  (assert ((candidate 1 5) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_8_square_nums", "prompt": "(**Write a function to find squares of individual elements in a list.\n*)\nlet square_nums (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = square_nums in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]));\n  (assert ((candidate [10; 20; 30]) = [100; 400; 900]));\n  (assert ((candidate [12; 15]) = [144; 225]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "(**Write a mlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n*)\nlet find_Rotations (str : string) : int =", "test": "\nlet assertions =\n let candidate = find_Rotations in\n  (assert ((candidate \"aaaa\") = 1));\n  (assert ((candidate \"ab\") = 2));\n  (assert ((candidate \"abc\") = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "(**Write a mlthon function to remove first and last occurrence of a given character from the string.\n*)\nlet remove_Occ (s : string) (ch : string) : string =", "test": "\nlet assertions =\n let candidate = remove_Occ in\n  (assert ((candidate \"hello\" \"l\") = \"heo\"));\n  (assert ((candidate \"abcda\" \"a\") = \"bcd\"));\n  (assert ((candidate \"PHP\" \"P\") = \"H\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "(**Write a function to sort a given matrix in ascending order according to the sum of its rows.\n*)\nlet sort_matrix (M : int list list) : int list list =", "test": "\nlet assertions =\n let candidate = sort_matrix in\n  (assert ((candidate [[1; 2; 3]; [2; 4; 5]; [1; 1; 1]]) = [[1; 1; 1]; [1; 2; 3]; [2; 4; 5]]));\n  (assert ((candidate [[1; 2; 3]; [(~2); 4; (~5)]; [1; (~1); 1]]) = [[(~2); 4; (~5)]; [1; (~1); 1]; [1; 2; 3]]));\n  (assert ((candidate [[5; 8; 9]; [6; 4; 3]; [2; 1; 4]]) = [[2; 1; 4]; [6; 4; 3]; [5; 8; 9]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_14_find_Volume", "prompt": "(**Write a mlthon function to find the volume of a triangular prism.\n*)\nlet find_Volume (l : int) (b : int) (h : int) : int =", "test": "\nlet assertions =\n let candidate = find_Volume in\n  (assert ((candidate 10 8 6) = 240));\n  (assert ((candidate 3 2 2) = 6));\n  (assert ((candidate 1 2 1) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "(**Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n*)\nlet text_lowercase_underscore (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_lowercase_underscore in\n  (assert ((candidate \"aab_cbbbc\") = true));\n  (assert ((candidate \"aab_Abbbc\") = false));\n  (assert ((candidate \"Aaab_abbbc\") = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "(**Write a function that returns the perimeter of a square given its side length as input.\n*)\nlet square_perimeter (a : int) : int =", "test": "\nlet assertions =\n let candidate = square_perimeter in\n  (assert ((candidate 10) = 40));\n  (assert ((candidate 5) = 20));\n  (assert ((candidate 4) = 16));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "(**Write a function to remove characters from the first string which are present in the second string.\n*)\nlet remove_dirty_chars (string : string) (second_string : string) : string =", "test": "\nlet assertions =\n let candidate = remove_dirty_chars in\n  (assert ((candidate \"probasscurve\" \"pros\") = \"bacuve\"));\n  (assert ((candidate \"digitalindia\" \"talent\") = \"digiidi\"));\n  (assert ((candidate \"exoticmiles\" \"toxic\") = \"emles\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "(**Write a function to find whether a given list of integers contains any duplicate element.\n*)\nlet test_duplicate (arraynums : int list) : bool =", "test": "\nlet assertions =\n let candidate = test_duplicate in\n  (assert ((candidate [1; 2; 3; 4; 5]) = false));\n  (assert ((candidate [1; 2; 3; 4; 4]) = true));\n  (assert ((candidate [1; 1; 2; 2; 3; 3; 4; 4; 5]) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_20_is_woodall", "prompt": "(**Write a function to check if the given number is woodball or not.\n*)\nlet is_woodall (x : int) : bool =", "test": "\nlet assertions =\n let candidate = is_woodall in\n  (assert ((candidate 383) = true));\n  (assert ((candidate 254) = false));\n  (assert ((candidate 200) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_56_checks", "prompt": "(**Write a mlthon function to check if a given number is one less than twice its reverse.\n*)\nlet checks (n : int) : bool =", "test": "\nlet assertions =\n let candidate = checks in\n  (assert ((candidate 70) = false));\n  (assert ((candidate 23) = false));\n  (assert ((candidate 73) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "(**Write a mlthon function to find the largest number that can be formed with the given list of digits.\n*)\nlet find_Max_Num (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = find_Max_Num in\n  (assert ((candidate [1; 2; 3]) = 321));\n  (assert ((candidate [4; 5; 6; 1]) = 6541));\n  (assert ((candidate [1; 2; 3; 9]) = 9321));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "(**Write a mlthon function to check whether the given two integers have opposite sign or not.\n*)\nlet opposite_Signs (x : int) (y : int) : bool =", "test": "\nlet assertions =\n let candidate = opposite_Signs in\n  (assert ((candidate 1 (~2)) = true));\n  (assert ((candidate 3 2) = false));\n  (assert ((candidate (~10) (~10)) = false));\n  (assert ((candidate (~2) 2) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "(**Write a function to find the nth octagonal number.\n*)\nlet is_octagonal (n : int) : int =", "test": "\nlet assertions =\n let candidate = is_octagonal in\n  (assert ((candidate 5) = 65));\n  (assert ((candidate 10) = 280));\n  (assert ((candidate 15) = 645));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "(**Write a mlthon function to count the number of substrings with the sum of digits equal to their length.\n*)\nlet count_Substrings (s : string) : int =", "test": "\nlet assertions =\n let candidate = count_Substrings in\n  (assert ((candidate \"112112\") = 6));\n  (assert ((candidate \"111\") = 6));\n  (assert ((candidate \"1101112\") = 12));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_62_smallest_num", "prompt": "(**Write a mlthon function to find smallest number in a list.\n*)\nlet smallest_num (xs : int list) : int =", "test": "\nlet assertions =\n let candidate = smallest_num in\n  (assert ((candidate [10; 20; 1; 45; 99]) = 1));\n  (assert ((candidate [1; 2; 3]) = 1));\n  (assert ((candidate [45; 46; 50; 60]) = 45));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_63_max_difference", "prompt": "(**Write a function to find the maximum difference between available pairs in the given tuple list.\n*)\nlet max_difference (test_list :  int * int list) : int =", "test": "\nlet assertions =\n let candidate = max_difference in\n  (assert ((candidate [(3, 5); (1, 7); (10, 3); (1, 2)]) = 7));\n  (assert ((candidate [(4, 6); (2, 17); (9, 13); (11, 12)]) = 15));\n  (assert ((candidate [(12, 35); (21, 27); (13, 23); (41, 22)]) = 23));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_64_subject_marks", "prompt": "(**Write a function to sort a list of tuples using the second value of each tuple.\n*)\nlet subject_marks (subjectmarks :  string * int list) :  string * int list =", "test": "\nlet assertions =\n let candidate = subject_marks in\n  (assert ((candidate [(\"English\", 88); (\"Science\", 90); (\"Maths\", 97); (\"Social sciences\", 82)]) = [(\"Social sciences\", 82); (\"English\", 88); (\"Science\", 90); (\"Maths\", 97)]));\n  (assert ((candidate [(\"Telugu\", 49); (\"Hindhi\", 54); (\"Social\", 33)]) = [(\"Social\", 33); (\"Telugu\", 49); (\"Hindhi\", 54)]));\n  (assert ((candidate [(\"Physics\", 96); (\"Chemistry\", 97); (\"Biology\", 45)]) = [(\"Biology\", 45); (\"Physics\", 96); (\"Chemistry\", 97)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_66_pos_count", "prompt": "(**Write a mlthon function to count the number of positive numbers in a list.\n*)\nlet pos_count (list : int list) : int =", "test": "\nlet assertions =\n let candidate = pos_count in\n  (assert ((candidate [1; (~2); 3; (~4)]) = 2));\n  (assert ((candidate [3; 4; 5; (~1)]) = 3));\n  (assert ((candidate [1; 2; 3; 4]) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_67_bell_number", "prompt": "(**Write a function to find the number of ways to partition a set of Bell numbers.\n*)\nlet bell_number (n : int) : int =", "test": "\nlet assertions =\n let candidate = bell_number in\n  (assert ((candidate 2) = 2));\n  (assert ((candidate 10) = 115975));\n  (assert ((candidate 56) = 6775685320645824322581483068371419745979053216268760300));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "(**Write a mlthon function to check whether the given list is monotonic or not.\n*)\nlet is_Monotonic (A : int list) : bool =", "test": "\nlet assertions =\n let candidate = is_Monotonic in\n  (assert ((candidate [6; 5; 4; 4]) = true));\n  (assert ((candidate [1; 2; 2; 3]) = true));\n  (assert ((candidate [1; 3; 2]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_69_is_sublist", "prompt": "(**Write a function to check whether a list contains the given sublist or not.\n*)\nlet is_sublist (l : int list) (s : int list) : bool =", "test": "\nlet assertions =\n let candidate = is_sublist in\n  (assert ((candidate [2; 4; 3; 5; 7] [3; 7]) = false));\n  (assert ((candidate [2; 4; 3; 5; 7] [4; 3]) = true));\n  (assert ((candidate [2; 4; 3; 5; 7] [1; 6]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_70_get_equal", "prompt": "(**Write a function to find whether all the given lists have equal length or not.\n*)\nlet get_equal (Input : int list list) : bool =", "test": "\nlet assertions =\n let candidate = get_equal in\n  (assert ((candidate [[11; 22; 33]; [44; 55; 66]]) = true));\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6; 7]]) = false));\n  (assert ((candidate [[1; 2]; [3; 4]]) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_71_comb_sort", "prompt": "(**Write a function to sort a list of elements.\n*)\nlet comb_sort (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = comb_sort in\n  (assert ((candidate [5; 15; 37; 25; 79]) = [5; 15; 25; 37; 79]));\n  (assert ((candidate [41; 32; 15; 19; 22]) = [15; 19; 22; 32; 41]));\n  (assert ((candidate [99; 15; 13; 47]) = [13; 15; 47; 99]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_72_dif_Square", "prompt": "(**Write a mlthon function to check whether the given number can be represented as the difference of two squares or not.\n*)\nlet dif_Square (n : int) : bool =", "test": "\nlet assertions =\n let candidate = dif_Square in\n  (assert ((candidate 5) = true));\n  (assert ((candidate 10) = false));\n  (assert ((candidate 15) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "(**Write a function to check whether it follows the sequence given in the patterns list.\n*)\nlet is_samepatterns (colors : string list) (patterns : string list) : bool =", "test": "\nlet assertions =\n let candidate = is_samepatterns in\n  (assert ((candidate [\"red\"; \"green\"; \"green\"] [\"a\"; \"b\"; \"b\"]) = true));\n  (assert ((candidate [\"red\"; \"green\"; \"greenn\"] [\"a\"; \"b\"; \"b\"]) = false));\n  (assert ((candidate [\"red\"; \"green\"; \"greenn\"] [\"a\"; \"b\"]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_75_find_tuples", "prompt": "(**Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n*)\nlet find_tuples (test_list :  int * int * int list) (K : int) :  int * int * int list =", "test": "\nlet assertions =\n let candidate = find_tuples in\n  (assert ((candidate [(6, 24, 12); (7, 9, 6); (12, 18, 21)] 6) = [(6, 24, 12)]));\n  (assert ((candidate [(5, 25, 30); (4, 2, 3); (7, 8, 9)] 5) = [(5, 25, 30)]));\n  (assert ((candidate [(7, 9, 16); (8, 16, 4); (19, 17, 18)] 4) = [(8, 16, 4)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_77_is_Diff", "prompt": "(**Write a mlthon function to find whether a number is divisible by 11.\n*)\nlet is_Diff (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_Diff in\n  (assert ((candidate 12345) = false));\n  (assert ((candidate 1212112) = true));\n  (assert ((candidate 1212) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_79_word_len", "prompt": "(**Write a mlthon function to check whether the length of the word is odd or not.\n*)\nlet word_len (s : string) : bool =", "test": "\nlet assertions =\n let candidate = word_len in\n  (assert ((candidate \"Hadoop\") = false));\n  (assert ((candidate \"great\") = true));\n  (assert ((candidate \"structure\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "(**Write a function to find the nth tetrahedral number.\n*)\nlet tetrahedral_number (n : int) : int =", "test": "\nlet assertions =\n let candidate = tetrahedral_number in\n  (assert ((candidate 5) = 35));\n  (assert ((candidate 6) = 56));\n  (assert ((candidate 7) = 84));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_83_get_Char", "prompt": "(**Write a mlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n*)\nlet get_Char (strr : string) : string =", "test": "\nlet assertions =\n let candidate = get_Char in\n  (assert ((candidate \"abc\") = \"f\"));\n  (assert ((candidate \"gfg\") = \"t\"));\n  (assert ((candidate \"ab\") = \"c\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_84_sequence", "prompt": "(**Write a function to find the nth number in the newman conway sequence.\n*)\nlet sequence (n : int) : int =", "test": "\nlet assertions =\n let candidate = sequence in\n  (assert ((candidate 10) = 6));\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 3) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "(**Write a function to find nth centered hexagonal number.\n*)\nlet centered_hexagonal_number (n : int) : int =", "test": "\nlet assertions =\n let candidate = centered_hexagonal_number in\n  (assert ((candidate 10) = 271));\n  (assert ((candidate 2) = 7));\n  (assert ((candidate 9) = 217));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "(**Write a function to merge three dictionaries into a single association list.\n*)\nlet merge_dictionaries_three (dict1 : (string, string) list) (dict2 : (string, string) list) (dict3 : (string, string) list) : (string, string) list =", "test": "\nlet assertions =\n let candidate = merge_dictionaries_three in\n  (assert ((candidate [(\"R\", \"Red\"); (\"B\", \"Black\"); (\"P\", \"Pink\")] [(\"G\", \"Green\"); (\"W\", \"White\")] [(\"O\", \"Orange\"); (\"W\", \"White\"); (\"B\", \"Black\")]) = [(\"B\", \"Black\"); (\"R\", \"Red\"); (\"P\", \"Pink\"); (\"G\", \"Green\"); (\"W\", \"White\"); (\"O\", \"Orange\")]));\n  (assert ((candidate [(\"R\", \"Red\"); (\"B\", \"Black\"); (\"P\", \"Pink\")] [(\"G\", \"Green\"); (\"W\", \"White\")] [(\"L\", \"lavender\"); (\"B\", \"Blue\")]) = [(\"W\", \"White\"); (\"P\", \"Pink\"); (\"B\", \"Black\"); (\"R\", \"Red\"); (\"G\", \"Green\"); (\"L\", \"lavender\")]));\n  (assert ((candidate [(\"R\", \"Red\"); (\"B\", \"Black\"); (\"P\", \"Pink\")] [(\"L\", \"lavender\"); (\"B\", \"Blue\")] [(\"G\", \"Green\"); (\"W\", \"White\")]) = [(\"B\", \"Black\"); (\"P\", \"Pink\"); (\"R\", \"Red\"); (\"G\", \"Green\"); (\"L\", \"lavender\"); (\"W\", \"White\")]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_88_freq_count", "prompt": "(**Write a function to get the frequency of all the elements in a list, returned as an association list.\n*)\nlet freq_count (list1 : int list) : (int, int) list =", "test": "\nlet assertions =\n let candidate = freq_count in\n  (assert ((candidate [10; 10; 10; 10; 20; 20; 20; 20; 40; 40; 50; 50; 30]) = [(10, 4); (20, 4); (40, 2); (50, 2); (30, 1)]));\n  (assert ((candidate [1; 2; 3; 4; 3; 2; 4; 1; 3; 1; 4]) = [(1, 3); (2, 2); (3, 3); (4, 3)]));\n  (assert ((candidate [5; 6; 7; 4; 9; 10; 4; 5; 6; 7; 9; 5]) = [(10, 1); (5, 3); (6, 2); (7, 2); (4, 2); (9, 2)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_89_closest_num", "prompt": "(**Write a function to find the closest smaller number than n.\n*)\nlet closest_num (N : int) : int =", "test": "\nlet assertions =\n let candidate = closest_num in\n  (assert ((candidate 11) = 10));\n  (assert ((candidate 7) = 6));\n  (assert ((candidate 12) = 11));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_90_len_log", "prompt": "(**Write a mlthon function to find the length of the longest word.\n*)\nlet len_log (list1 : string list) : int =", "test": "\nlet assertions =\n let candidate = len_log in\n  (assert ((candidate [\"python\"; \"PHP\"; \"bigdata\"]) = 7));\n  (assert ((candidate [\"a\"; \"ab\"; \"abc\"]) = 3));\n  (assert ((candidate [\"small\"; \"big\"; \"tall\"]) = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_91_find_substring", "prompt": "(**Write a function to check if a string is present as a substring in a given list of string values.\n*)\nlet find_substring (str1 : string list) (sub_str : string) : bool =", "test": "\nlet assertions =\n let candidate = find_substring in\n  (assert ((candidate [\"red\"; \"black\"; \"white\"; \"green\"; \"orange\"] \"ack\") = true));\n  (assert ((candidate [\"red\"; \"black\"; \"white\"; \"green\"; \"orange\"] \"abc\") = false));\n  (assert ((candidate [\"red\"; \"black\"; \"white\"; \"green\"; \"orange\"] \"ange\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_92_is_undulating", "prompt": "(**Write a function to check whether the given number is undulating or not.\n*)\nlet is_undulating (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_undulating in\n  (assert ((candidate 1212121) = true));\n  (assert ((candidate 1991) = false));\n  (assert ((candidate 121) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_93_power", "prompt": "(**Write a function to calculate the value of 'a' to the power 'b'.\n*)\nlet power (a : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = power in\n  (assert ((candidate 3 4) = 81));\n  (assert ((candidate 2 3) = 8));\n  (assert ((candidate 5 5) = 3125));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_94_index_minimum", "prompt": "(**Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n*)\nlet index_minimum (test_list :  string * int list) : string =", "test": "\nlet assertions =\n let candidate = index_minimum in\n  (assert ((candidate [(\"Rash\", 143); (\"Manjeet\", 200); (\"Varsha\", 100)]) = \"Varsha\"));\n  (assert ((candidate [(\"Yash\", 185); (\"Dawood\", 125); (\"Sanya\", 175)]) = \"Dawood\"));\n  (assert ((candidate [(\"Sai\", 345); (\"Salman\", 145); (\"Ayesha\", 96)]) = \"Ayesha\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "(**Write a mlthon function to find the length of the smallest list in a list of lists.\n*)\nlet Find_Min_Length (lst : int list list) : int =", "test": "\nlet assertions =\n let candidate = Find_Min_Length in\n  (assert ((candidate [[1]; [1; 2]]) = 1));\n  (assert ((candidate [[1; 2]; [1; 2; 3]; [1; 2; 3; 4]]) = 2));\n  (assert ((candidate [[3; 3; 3]; [4; 4; 4; 4]]) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_96_divisor", "prompt": "(**Write a mlthon function to find the number of divisors of a given integer.\n*)\nlet divisor (n : int) : int =", "test": "\nlet assertions =\n let candidate = divisor in\n  (assert ((candidate 15) = 4));\n  (assert ((candidate 12) = 6));\n  (assert ((candidate 9) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "(**Write a function to find frequency of each element in a flattened list of lists, returned in an association list.\n*)\nlet frequency_lists (list1 : int list list) : (int, int) list =", "test": "\nlet assertions =\n let candidate = frequency_lists in\n  (assert ((candidate [[1; 2; 3; 2]; [4; 5; 6; 2]; [7; 8; 9; 5]]) = [(1, 1); (2, 3); (3, 1); (4, 1); (5, 2); (6, 1); (7, 1); (8, 1); (9, 1)]));\n  (assert ((candidate [[1; 2; 3; 4]; [5; 6; 7; 8]; [9; 10; 11; 12]]) = [(1, 1); (2, 1); (3, 1); (4, 1); (5, 1); (6, 1); (7, 1); (8, 1); (9, 1); (10, 1); (11, 1); (12, 1)]));\n  (assert ((candidate [[20; 30; 40; 17]; [18; 16; 14; 13]; [10; 20; 30; 40]]) = [(20, 2); (30, 2); (40, 2); (17, 1); (18, 1); (16, 1); (14, 1); (13, 1); (10, 1)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "(**Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n*)\nlet decimal_to_binary (n : int) : string =", "test": "\nlet assertions =\n let candidate = decimal_to_binary in\n  (assert ((candidate 8) = \"1000\"));\n  (assert ((candidate 18) = \"10010\"));\n  (assert ((candidate 7) = \"111\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "(**Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n*)\nlet next_smallest_palindrome (num : int) : int =", "test": "\nlet assertions =\n let candidate = next_smallest_palindrome in\n  (assert ((candidate 99) = 101));\n  (assert ((candidate 1221) = 1331));\n  (assert ((candidate 120) = 121));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_101_kth_element", "prompt": "(**Write a function to find the kth element in the given list using 1-based indexing.\n*)\nlet kth_element (arr : int list) (k : int) : int =", "test": "\nlet assertions =\n let candidate = kth_element in\n  (assert ((candidate [12; 3; 5; 7; 19] 2) = 3));\n  (assert ((candidate [17; 24; 8; 23] 3) = 8));\n  (assert ((candidate [16; 21; 25; 36; 4] 4) = 36));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "(**Write a function to convert a snake case string to camel case string.\n*)\nlet snake_to_camel (word : string) : string =", "test": "\nlet assertions =\n let candidate = snake_to_camel in\n  (assert ((candidate \"python_program\") = \"PythonProgram\"));\n  (assert ((candidate \"python_language\") = \"PythonLanguage\"));\n  (assert ((candidate \"programming_language\") = \"ProgrammingLanguage\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "(**Write a function to find the Eulerian number a(n, m).\n*)\nlet eulerian_num (n : int) (m : int) : int =", "test": "\nlet assertions =\n let candidate = eulerian_num in\n  (assert ((candidate 3 1) = 4));\n  (assert ((candidate 4 1) = 11));\n  (assert ((candidate 5 3) = 26));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "(**Write a function to sort each sublist of strings in a given list of lists.\n*)\nlet sort_sublists (input_list : string list list) : string list list =", "test": "\nlet assertions =\n let candidate = sort_sublists in\n  (assert ((candidate [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"white\"; \"black\"; \"orange\"]]) = [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"black\"; \"orange\"; \"white\"]]));\n  (assert ((candidate [[\" red \"; \"green\"]; [\"blue \"; \" black\"]; [\" orange\"; \"brown\"]]) = [[\" red \"; \"green\"]; [\" black\"; \"blue \"]; [\" orange\"; \"brown\"]]));\n  (assert ((candidate [[\"zilver\"; \"gold\"]; [\"magnesium\"; \"aluminium\"]; [\"steel\"; \"bronze\"]]) = [[\"gold\"; \"zilver\"]; [\"aluminium\"; \"magnesium\"]; [\"bronze\"; \"steel\"]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_105_count", "prompt": "(**Write a mlthon function to count true booleans in the given list.\n*)\nlet count (lst : bool list) : int =", "test": "\nlet assertions =\n let candidate = count in\n  (assert ((candidate [true; false; true]) = 2));\n  (assert ((candidate [false; false]) = 0));\n  (assert ((candidate [true; true; true]) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_106_add_lists", "prompt": "(**Write a function to append the given list to the given tuples.\n*)\nlet add_lists (test_list : int list) (test_tup :  int * int) :  int * int * int * int * int =", "test": "\nlet assertions =\n let candidate = add_lists in\n  (assert ((candidate [5; 6; 7] (9, 10)) = (9, 10, 5, 6, 7)));\n  (assert ((candidate [6; 7; 8] (10, 11)) = (10, 11, 6, 7, 8)));\n  (assert ((candidate [7; 8; 9] (11, 12)) = (11, 12, 7, 8, 9)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "(**Write a function to merge three lists into a single sorted list.\n*)\nlet merge_sorted_list (num1 : int list) (num2 : int list) (num3 : int list) : int list =", "test": "\nlet assertions =\n let candidate = merge_sorted_list in\n  (assert ((candidate [25; 24; 15; 4; 5; 29; 110] [19; 20; 11; 56; 25; 233; 154] [24; 26; 54; 48]) = [4; 5; 11; 15; 19; 20; 24; 24; 25; 25; 26; 29; 48; 54; 56; 110; 154; 233]));\n  (assert ((candidate [1; 3; 5; 6; 8; 9] [2; 5; 7; 11] [1; 4; 7; 8; 12]) = [1; 1; 2; 3; 4; 5; 5; 6; 7; 7; 8; 8; 9; 11; 12]));\n  (assert ((candidate [18; 14; 10; 9; 8; 7; 9; 3; 2; 4; 1] [25; 35; 22; 85; 14; 65; 75; 25; 58] [12; 74; 9; 50; 61; 41]) = [1; 2; 3; 4; 7; 8; 9; 9; 9; 10; 12; 14; 14; 18; 22; 25; 25; 35; 41; 50; 58; 61; 65; 74; 75; 85]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "(**Write a mlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n*)\nlet odd_Equivalent (s : string) (n : int) : int =", "test": "\nlet assertions =\n let candidate = odd_Equivalent in\n  (assert ((candidate \"011001\" 6) = 3));\n  (assert ((candidate \"11011\" 5) = 4));\n  (assert ((candidate \"1010\" 4) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_113_check_integer", "prompt": "(**Write a function to check if a string represents an integer or not.\n*)\nlet check_integer (text : string) : bool =", "test": "\nlet assertions =\n let candidate = check_integer in\n  (assert ((candidate \"python\") = false));\n  (assert ((candidate \"1\") = true));\n  (assert ((candidate \"12345\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "(**Write a function to convert a given tuple of positive integers into a single integer.\n*)\nlet tuple_to_int (nums :  int * int * int) : int =", "test": "\nlet assertions =\n let candidate = tuple_to_int in\n  (assert ((candidate (1, 2, 3)) = 123));\n  (assert ((candidate (4, 5, 6)) = 456));\n  (assert ((candidate (5, 6, 7)) = 567));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_117_list_to_float", "prompt": "(**Write a function to convert all possible convertible elements in a list of lists to floats.\n*)\nlet list_to_float (test_list :  string * string list) :  float * float list =", "test": "\nlet assertions =\n let candidate = list_to_float in\n  (assert ((candidate [(\"3\", \"4\"); (\"1\", \"26.45\"); (\"7.32\", \"8\"); (\"4\", \"8\")]) = [(3.0, 4.0); (1.0, 26.45); (7.32, 8.0); (4.0, 8.0)]));\n  (assert ((candidate [(\"4\", \"4\"); (\"2\", \"27\"); (\"4.12\", \"9\"); (\"7\", \"11\")]) = [(4.0, 4.0); (2.0, 27.0); (4.12, 9.0); (7.0, 11.0)]));\n  (assert ((candidate [(\"6\", \"78\"); (\"5\", \"26.45\"); (\"1.33\", \"4\"); (\"82\", \"13\")]) = [(6.0, 78.0); (5.0, 26.45); (1.33, 4.0); (82.0, 13.0)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_118_string_to_list", "prompt": "(**Write a function to convert a string to a list of strings split on the space character.\n*)\nlet string_to_list (string : string) : string list =", "test": "\nlet assertions =\n let candidate = string_to_list in\n  (assert ((candidate \"python programming\") = [\"python\"; \"programming\"]));\n  (assert ((candidate \"lists tuples strings\") = [\"lists\"; \"tuples\"; \"strings\"]));\n  (assert ((candidate \"write a program\") = [\"write\"; \"a\"; \"program\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_119_search", "prompt": "(**Write a mlthon function to find the element that appears only once in a sorted list.\n*)\nlet search (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = search in\n  (assert ((candidate [1; 1; 2; 2; 3]) = 3));\n  (assert ((candidate [1; 1; 3; 3; 4; 4; 5; 5; 7; 7; 8]) = 8));\n  (assert ((candidate [1; 2; 2; 3; 3; 4; 4]) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "(**Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n*)\nlet max_product_tuple (list1 :  int * int list) : int =", "test": "\nlet assertions =\n let candidate = max_product_tuple in\n  (assert ((candidate [(2, 7); (2, 6); (1, 8); (4, 9)]) = 36));\n  (assert ((candidate [(10, 20); (15, 2); (5, 10)]) = 200));\n  (assert ((candidate [(11, 44); (10, 15); (20, 5); (12, 9)]) = 484));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "(**Write a function to sum all amicable numbers from 1 to a specified number.\n*)\nlet amicable_numbers_sum (limit : int) : int =", "test": "\nlet assertions =\n let candidate = amicable_numbers_sum in\n  (assert ((candidate 999) = 504));\n  (assert ((candidate 9999) = 31626));\n  (assert ((candidate 99) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_125_find_length", "prompt": "(**Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n*)\nlet find_length (string : string) : int =", "test": "\nlet assertions =\n let candidate = find_length in\n  (assert ((candidate \"11000010001\") = 6));\n  (assert ((candidate \"10111\") = 1));\n  (assert ((candidate \"11011101100101\") = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_126_sum", "prompt": "(**Write a mlthon function to find the sum of common divisors of two given numbers.\n*)\nlet sum (a : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = sum in\n  (assert ((candidate 10 15) = 6));\n  (assert ((candidate 100 150) = 93));\n  (assert ((candidate 4 6) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_127_multiply_int", "prompt": "(**Write a function to multiply two integers.\n*)\nlet multiply_int (x : int) (y : int) : int =", "test": "\nlet assertions =\n let candidate = multiply_int in\n  (assert ((candidate 10 20) = 200));\n  (assert ((candidate 5 10) = 50));\n  (assert ((candidate 4 8) = 32));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_128_long_words", "prompt": "(**Write a function to find words that are longer than n characters from a given list of words.\n*)\nlet long_words (n : int) (str : string) : string list =", "test": "\nlet assertions =\n let candidate = long_words in\n  (assert ((candidate 3 \"python is a programming language\") = [\"python\"; \"programming\"; \"language\"]));\n  (assert ((candidate 2 \"writing a program\") = [\"writing\"; \"program\"]));\n  (assert ((candidate 5 \"sorting list\") = [\"sorting\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "(**Write a function to calculate whether the matrix is a magic square.\n*)\nlet magic_square_test (my_matrix : int list list) : bool =", "test": "\nlet assertions =\n let candidate = magic_square_test in\n  (assert ((candidate [[7; 12; 1; 14]; [2; 13; 8; 11]; [16; 3; 10; 5]; [9; 6; 15; 4]]) = true));\n  (assert ((candidate [[2; 7; 6]; [9; 5; 1]; [4; 3; 8]]) = true));\n  (assert ((candidate [[2; 7; 6]; [9; 5; 1]; [4; 3; 7]]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "(**Write a function to find the item with maximum frequency in a given list.\n*)\nlet max_occurrences (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = max_occurrences in\n  (assert ((candidate [2; 3; 8; 4; 7; 9; 8; 2; 6; 5; 1; 6; 1; 2; 3; 2; 4; 6; 9; 1; 2]) = 2));\n  (assert ((candidate [2; 3; 8; 4; 7; 9; 8; 7; 9; 15; 14; 10; 12; 13; 16; 18]) = 8));\n  (assert ((candidate [10; 20; 20; 30; 40; 90; 80; 50; 30; 20; 50; 10]) = 20));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "(**Write a mlthon function to reverse only the vowels of a given string (where y is not a vowel).\n*)\nlet reverse_vowels (str1 : string) : string =", "test": "\nlet assertions =\n let candidate = reverse_vowels in\n  (assert ((candidate \"Python\") = \"Python\"));\n  (assert ((candidate \"USA\") = \"ASU\"));\n  (assert ((candidate \"ab\") = \"ab\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_132_tup_string", "prompt": "(**Write a function to convert a list to a string.\n*)\nlet tup_string (tup1 : string list) : string =", "test": "\nlet assertions =\n let candidate = tup_string in\n  (assert ((candidate [\"e\"; \"x\"; \"e\"; \"r\"; \"c\"; \"i\"; \"s\"; \"e\"; \"s\"]) = \"exercises\"));\n  (assert ((candidate [\"p\"; \"y\"; \"t\"; \"h\"; \"o\"; \"n\"]) = \"python\"));\n  (assert ((candidate [\"p\"; \"r\"; \"o\"; \"g\"; \"r\"; \"a\"; \"m\"]) = \"program\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "(**Write a function to calculate the sum of the negative numbers of a given list of numbers.\n*)\nlet sum_negativenum (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = sum_negativenum in\n  (assert ((candidate [2; 4; (~6); (~9); 11; (~12); 14; (~5); 17]) = (~32)));\n  (assert ((candidate [10; 15; (~14); 13; (~18); 12; (~20)]) = (~52)));\n  (assert ((candidate [19; (~65); 57; 39; 152; (~639); 121; 44; 90; (~190)]) = (~894)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "(**Write a function to find the nth hexagonal number.\n*)\nlet hexagonal_num (n : int) : int =", "test": "\nlet assertions =\n let candidate = hexagonal_num in\n  (assert ((candidate 10) = 190));\n  (assert ((candidate 5) = 45));\n  (assert ((candidate 7) = 91));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "(**Write a mlthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n*)\nlet is_Sum_Of_Powers_Of_Two (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_Sum_Of_Powers_Of_Two in\n  (assert ((candidate 10) = true));\n  (assert ((candidate 7) = false));\n  (assert ((candidate 14) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "(**Write a function to sort a list of elements.\n*)\nlet pancake_sort (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = pancake_sort in\n  (assert ((candidate [15; 79; 25; 38; 69]) = [15; 25; 38; 69; 79]));\n  (assert ((candidate [98; 12; 54; 36; 85]) = [12; 36; 54; 85; 98]));\n  (assert ((candidate [41; 42; 32; 12; 23]) = [12; 23; 32; 41; 42]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_142_count_samepair", "prompt": "(**Write a function to count number items that are identical in the same position of three given lists.\n*)\nlet count_samepair (list1 : int list) (list2 : int list) (list3 : int list) : int =", "test": "\nlet assertions =\n let candidate = count_samepair in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 9] [2; 1; 3; 1; 2; 6; 7; 9]) = 3));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 8] [2; 1; 3; 1; 2; 6; 7; 8]) = 4));\n  (assert ((candidate [1; 2; 3; 4; 2; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 8] [2; 1; 3; 1; 2; 6; 7; 8]) = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "(**Write a mlthon function to find the maximum difference between any two elements in a given list.\n*)\nlet max_Abs_Diff (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = max_Abs_Diff in\n  (assert ((candidate [2; 1; 5; 3]) = 4));\n  (assert ((candidate [9; 3; 2; 5; 1]) = 8));\n  (assert ((candidate [3; 2; 1]) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_160_find_solution", "prompt": "(**Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n*)\nlet find_solution (a : int) (b : int) (n : int) :  int * int option =", "test": "\nlet assertions =\n let candidate = find_solution in\n  (assert ((candidate 2 3 7) = Some((2, 1))));\n  (assert ((candidate 4 2 7) = Some(None)));\n  (assert ((candidate 1 13 17) = Some((4, 1))));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_161_remove_elements", "prompt": "(**Write a function to remove all elements from a given list present in another list.\n*)\nlet remove_elements (list1 : int list) (list2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = remove_elements in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] [2; 4; 6; 8]) = [1; 3; 5; 7; 9; 10]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] [1; 3; 5; 7]) = [2; 4; 6; 8; 9; 10]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] [5; 7]) = [1; 2; 3; 4; 6; 8; 9; 10]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_162_sum_series", "prompt": "(**Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n*)\nlet sum_series (n : int) : int =", "test": "\nlet assertions =\n let candidate = sum_series in\n  (assert ((candidate 6) = 12));\n  (assert ((candidate 10) = 30));\n  (assert ((candidate 9) = 25));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "(**Write a function to determine if the sum of the divisors of two integers are the same.\n*)\nlet are_equivalent (num1 : int) (num2 : int) : bool =", "test": "\nlet assertions =\n let candidate = are_equivalent in\n  (assert ((candidate 36 57) = false));\n  (assert ((candidate 2 4) = false));\n  (assert ((candidate 23 47) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_165_count_char_position", "prompt": "(**Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n*)\nlet count_char_position (str1 : string) : int =", "test": "\nlet assertions =\n let candidate = count_char_position in\n  (assert ((candidate \"xbcefg\") = 2));\n  (assert ((candidate \"ABcED\") = 3));\n  (assert ((candidate \"AbgdeF\") = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "(**Write a function that counts the number of pairs of integers in a list that xor to an even number.\n*)\nlet find_even_pair (A : int list) : int =", "test": "\nlet assertions =\n let candidate = find_even_pair in\n  (assert ((candidate [5; 4; 7; 2; 1]) = 4));\n  (assert ((candidate [7; 2; 8; 1; 0; 5; 11]) = 9));\n  (assert ((candidate [1; 2; 3]) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "(**Write a mlthon function to find the smallest power of 2 greater than or equal to n.\n*)\nlet next_power_of_2 (n : int) : int =", "test": "\nlet assertions =\n let candidate = next_power_of_2 in\n  (assert ((candidate 0) = 1));\n  (assert ((candidate 5) = 8));\n  (assert ((candidate 17) = 32));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_168_frequency", "prompt": "(**Write a function to count the number of occurrences of a number in a given list.\n*)\nlet frequency (a : int list) (x : int) : int =", "test": "\nlet assertions =\n let candidate = frequency in\n  (assert ((candidate [1; 2; 3] 4) = 0));\n  (assert ((candidate [1; 2; 2; 3; 3; 3; 4] 3) = 3));\n  (assert ((candidate [0; 1; 2; 3; 1; 2] 1) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "(**Write a function to find the sum of numbers in a list within a range specified by two indices.\n*)\nlet sum_range_list (list1 : int list) (m : int) (n : int) : int =", "test": "\nlet assertions =\n let candidate = sum_range_list in\n  (assert ((candidate [2; 1; 5; 6; 8; 3; 4; 9; 10; 11; 8; 12] 8 10) = 29));\n  (assert ((candidate [2; 1; 5; 6; 8; 3; 4; 9; 10; 11; 8; 12] 5 7) = 16));\n  (assert ((candidate [2; 1; 5; 6; 8; 3; 4; 9; 10; 11; 8; 12] 7 10) = 38));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "(**Write a function to find the perimeter of a regular pentagon from the length of its sides.\n*)\nlet perimeter_pentagon (a : int) : int =", "test": "\nlet assertions =\n let candidate = perimeter_pentagon in\n  (assert ((candidate 5) = 25));\n  (assert ((candidate 10) = 50));\n  (assert ((candidate 15) = 75));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_172_count_occurance", "prompt": "(**Write a function to count the number of occurence of the string 'std' in a given string.\n*)\nlet count_occurance (s : string) : int =", "test": "\nlet assertions =\n let candidate = count_occurance in\n  (assert ((candidate \"letstdlenstdporstd\") = 3));\n  (assert ((candidate \"truststdsolensporsd\") = 1));\n  (assert ((candidate \"makestdsostdworthit\") = 2));\n  (assert ((candidate \"stds\") = 1));\n  (assert ((candidate \"\") = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_223_is_majority", "prompt": "(**Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n*)\nlet is_majority (arr : int list) (n : int) (x : int) : bool =", "test": "\nlet assertions =\n let candidate = is_majority in\n  (assert ((candidate [1; 2; 3; 3; 3; 3; 10] 7 3) = true));\n  (assert ((candidate [1; 1; 2; 4; 4; 4; 6; 6] 8 4) = false));\n  (assert ((candidate [1; 1; 1; 2; 2] 5 1) = true));\n  (assert ((candidate [1; 1; 2; 2] 5 1) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "(**Write a mlthon function to count the number of set bits (binary digits with value 1) in a given number.\n*)\nlet count_Set_Bits (n : int) : int =", "test": "\nlet assertions =\n let candidate = count_Set_Bits in\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 4) = 1));\n  (assert ((candidate 6) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "(**Write a mlthon function to remove the characters which have odd index values of a given string.\n*)\nlet odd_values_string (str : string) : string =", "test": "\nlet assertions =\n let candidate = odd_values_string in\n  (assert ((candidate \"abcdef\") = \"ace\"));\n  (assert ((candidate \"python\") = \"pto\"));\n  (assert ((candidate \"data\") = \"dt\"));\n  (assert ((candidate \"lambs\") = \"lms\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_227_min_of_three", "prompt": "(**Write a function to find minimum of three numbers.\n*)\nlet min_of_three (a : int) (b : int) (c : int) : int =", "test": "\nlet assertions =\n let candidate = min_of_three in\n  (assert ((candidate 10 20 0) = 0));\n  (assert ((candidate 19 15 18) = 15));\n  (assert ((candidate (~10) (~20) (~30)) = (~30)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "(**Write a mlthon function to check whether all the bits are unset in the given range or not.\n*)\nlet all_Bits_Set_In_The_Given_Range (n : int) (l : int) (r : int) : bool =", "test": "\nlet assertions =\n let candidate = all_Bits_Set_In_The_Given_Range in\n  (assert ((candidate 4 1 2) = true));\n  (assert ((candidate 17 2 4) = true));\n  (assert ((candidate 39 4 6) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "(**Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n*)\nlet re_arrange_array (arr : int list) (n : int) : int list =", "test": "\nlet assertions =\n let candidate = re_arrange_array in\n  (assert ((candidate [(~1); 2; (~3); 4; 5; 6; (~7); 8; 9] 9) = [(~1); (~3); (~7); 4; 5; 6; 2; 8; 9]));\n  (assert ((candidate [12; (~14); (~26); 13; 15] 5) = [(~14); (~26); 12; 13; 15]));\n  (assert ((candidate [10; 24; 36; (~42); (~39); (~78); 85] 7) = [(~42); (~39); (~78); 10; 24; 36; 85]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_230_replace_blank", "prompt": "(**Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n*)\nlet replace_blank (str1 : string) (char : string) : string =", "test": "\nlet assertions =\n let candidate = replace_blank in\n  (assert ((candidate \"hello people\" \"@\") = \"hello@people\"));\n  (assert ((candidate \"python program language\" \"$\") = \"python$program$language\"));\n  (assert ((candidate \"blank space\" \"-\") = \"blank-space\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_234_volume_cube", "prompt": "(**Write a function to find the volume of a cube given its side length.\n*)\nlet volume_cube (l : int) : int =", "test": "\nlet assertions =\n let candidate = volume_cube in\n  (assert ((candidate 3) = 27));\n  (assert ((candidate 2) = 8));\n  (assert ((candidate 5) = 125));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "(**Write a mlthon function to count the number of non-empty substrings of a given string.\n*)\nlet number_of_substrings (str : string) : int =", "test": "\nlet assertions =\n let candidate = number_of_substrings in\n  (assert ((candidate \"abc\") = 6));\n  (assert ((candidate \"abcd\") = 10));\n  (assert ((candidate \"abcde\") = 15));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "(**Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n*)\nlet get_total_number_of_sequences (m : int) (n : int) : int =", "test": "\nlet assertions =\n let candidate = get_total_number_of_sequences in\n  (assert ((candidate 10 4) = 4));\n  (assert ((candidate 5 2) = 6));\n  (assert ((candidate 16 3) = 84));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_242_count_charac", "prompt": "(**Write a function to count the total number of characters in a string.\n*)\nlet count_charac (str1 : string) : int =", "test": "\nlet assertions =\n let candidate = count_charac in\n  (assert ((candidate \"python programming\") = 18));\n  (assert ((candidate \"language\") = 8));\n  (assert ((candidate \"words\") = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "(**Write a mlthon function to find the next perfect square greater than a given number.\n*)\nlet next_Perfect_Square (N : int) : int =", "test": "\nlet assertions =\n let candidate = next_Perfect_Square in\n  (assert ((candidate 35) = 36));\n  (assert ((candidate 6) = 9));\n  (assert ((candidate 9) = 16));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_245_max_sum", "prompt": "(**Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n*)\nlet max_sum (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = max_sum in\n  (assert ((candidate [1; 15; 51; 45; 33; 100; 12; 18; 9]) = 194));\n  (assert ((candidate [80; 60; 30; 40; 20; 10]) = 210));\n  (assert ((candidate [2; 3; 14; 16; 21; 23; 29; 30]) = 138));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_247_lps", "prompt": "(**Write a function to find the length of the longest palindromic subsequence in the given string.\n*)\nlet lps (str : string) : int =", "test": "\nlet assertions =\n let candidate = lps in\n  (assert ((candidate \"TENS FOR TENS\") = 5));\n  (assert ((candidate \"CARDIO FOR CARDS\") = 7));\n  (assert ((candidate \"PART OF THE JOURNEY IS PART\") = 9));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_249_intersection_array", "prompt": "(**Write a function to find the intersection of two lists.\n*)\nlet intersection_array (array_nums1 : int list) (array_nums2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = intersection_array in\n  (assert ((candidate [1; 2; 3; 5; 7; 8; 9; 10] [1; 2; 4; 8; 9]) = [1; 2; 8; 9]));\n  (assert ((candidate [1; 2; 3; 5; 7; 8; 9; 10] [3; 5; 7; 9]) = [3; 5; 7; 9]));\n  (assert ((candidate [1; 2; 3; 5; 7; 8; 9; 10] [10; 20; 30; 40]) = [10]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_250_count_X", "prompt": "(**Write a mlthon function that takes in a tuple and an element and counts the occcurences of the element in the list.\n*)\nlet count_X (tup : int list) (x : int) : int =", "test": "\nlet assertions =\n let candidate = count_X in\n  (assert ((candidate [10; 8; 5; 2; 10; 15; 10; 8; 5; 8; 8; 2] 4) = 0));\n  (assert ((candidate [10; 8; 5; 2; 10; 15; 10; 8; 5; 8; 8; 2] 10) = 3));\n  (assert ((candidate [10; 8; 5; 2; 10; 15; 10; 8; 5; 8; 8; 2] 8) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_251_insert_element", "prompt": "(**Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n*)\nlet insert_element (list : string list) (element : string) : string list =", "test": "\nlet assertions =\n let candidate = insert_element in\n  (assert ((candidate [\"Red\"; \"Green\"; \"Black\"] \"c\") = [\"c\"; \"Red\"; \"c\"; \"Green\"; \"c\"; \"Black\"]));\n  (assert ((candidate [\"python\"; \"java\"] \"program\") = [\"program\"; \"python\"; \"program\"; \"java\"]));\n  (assert ((candidate [\"happy\"; \"sad\"] \"laugh\") = [\"laugh\"; \"happy\"; \"laugh\"; \"sad\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_252_convert", "prompt": "(**Write a mlthon function to convert complex numbers to polar coordinates.\n*)\nlet convert (numbers : int) :  float * float =", "test": "\nlet assertions =\n let candidate = convert in\n  (assert ((candidate 1) = (1.0, 0.0)));\n  (assert ((candidate 4) = (4.0, 0.0)));\n  (assert ((candidate 5) = (5.0, 0.0)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "(**Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n*)\nlet combinations_colors (l : string list) (n : int) : string list list =", "test": "\nlet assertions =\n let candidate = combinations_colors in\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"] 1) = [[\"Red\"]; [\"Green\"]; [\"Blue\"]]));\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"] 2) = [[\"Red\"; \"Red\"]; [\"Red\"; \"Green\"]; [\"Red\"; \"Blue\"]; [\"Green\"; \"Green\"]; [\"Green\"; \"Blue\"]; [\"Blue\"; \"Blue\"]]));\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"] 3) = [[\"Red\"; \"Red\"; \"Red\"]; [\"Red\"; \"Red\"; \"Green\"]; [\"Red\"; \"Red\"; \"Blue\"]; [\"Red\"; \"Green\"; \"Green\"]; [\"Red\"; \"Green\"; \"Blue\"]; [\"Red\"; \"Blue\"; \"Blue\"]; [\"Green\"; \"Green\"; \"Green\"]; [\"Green\"; \"Green\"; \"Blue\"]; [\"Green\"; \"Blue\"; \"Blue\"]; [\"Blue\"; \"Blue\"; \"Blue\"]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "(**Write a mlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n*)\nlet count_Primes_nums (n : int) : int =", "test": "\nlet assertions =\n let candidate = count_Primes_nums in\n  (assert ((candidate 5) = 2));\n  (assert ((candidate 10) = 4));\n  (assert ((candidate 100) = 25));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "(**Write a function that takes in two numbers and returns a list with the second number and then the first number.\n*)\nlet swap_numbers (a : int) (b : int) : int list =", "test": "\nlet assertions =\n let candidate = swap_numbers in\n  (assert ((candidate 10 20) = [20; 10]));\n  (assert ((candidate 15 17) = [17; 15]));\n  (assert ((candidate 100 200) = [200; 100]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "(**Write a function to maximize the given two lists.\n*)\nlet maximize_elements (test_tup1 : int list list) (test_tup2 : int list list) : int list list =", "test": "\nlet assertions =\n let candidate = maximize_elements in\n  (assert ((candidate [[1; 3]; [4; 5]; [2; 9]; [1; 10]] [[6; 7]; [3; 9]; [1; 1]; [7; 3]]) = [[6; 7]; [4; 9]; [2; 9]; [7; 10]]));\n  (assert ((candidate [[2; 4]; [5; 6]; [3; 10]; [2; 11]] [[7; 8]; [4; 10]; [2; 2]; [8; 4]]) = [[7; 8]; [5; 10]; [3; 10]; [8; 11]]));\n  (assert ((candidate [[3; 5]; [6; 7]; [4; 11]; [3; 12]] [[8; 9]; [5; 11]; [3; 3]; [9; 5]]) = [[8; 9]; [6; 11]; [4; 11]; [9; 12]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_260_newman_prime", "prompt": "(**Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n*)\nlet newman_prime (n : int) : int =", "test": "\nlet assertions =\n let candidate = newman_prime in\n  (assert ((candidate 3) = 7));\n  (assert ((candidate 4) = 17));\n  (assert ((candidate 5) = 41));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_261_division_elements", "prompt": "(**Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n*)\nlet division_elements (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "test": "\nlet assertions =\n let candidate = division_elements in\n  (assert ((candidate (10, 4, 6, 9) (5, 2, 3, 3)) = (2, 2, 2, 3)));\n  (assert ((candidate (12, 6, 8, 16) (6, 3, 4, 4)) = (2, 2, 2, 4)));\n  (assert ((candidate (20, 14, 36, 18) (5, 7, 6, 9)) = (4, 2, 6, 2)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_264_dog_age", "prompt": "(**Write a function to calculate a dog's age in dog's years.\n*)\nlet dog_age (h_age : int) : int =", "test": "\nlet assertions =\n let candidate = dog_age in\n  (assert ((candidate 12) = 61));\n  (assert ((candidate 15) = 73));\n  (assert ((candidate 24) = 109));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "(**Write a function to find the lateral surface area of a cube given its side length.\n*)\nlet lateralsurface_cube (l : int) : int =", "test": "\nlet assertions =\n let candidate = lateralsurface_cube in\n  (assert ((candidate 5) = 100));\n  (assert ((candidate 9) = 324));\n  (assert ((candidate 10) = 400));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_267_square_Sum", "prompt": "(**Write a mlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n*)\nlet square_Sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = square_Sum in\n  (assert ((candidate 2) = 10));\n  (assert ((candidate 3) = 35));\n  (assert ((candidate 4) = 84));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_268_find_star_num", "prompt": "(**Write a function to find the n'th star number.\n*)\nlet find_star_num (n : int) : int =", "test": "\nlet assertions =\n let candidate = find_star_num in\n  (assert ((candidate 3) = 37));\n  (assert ((candidate 4) = 73));\n  (assert ((candidate 5) = 121));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_269_ascii_value", "prompt": "(**Write a function to find the ascii value of a character.\n*)\nlet ascii_value (k : string) : int =", "test": "\nlet assertions =\n let candidate = ascii_value in\n  (assert ((candidate \"A\") = 65));\n  (assert ((candidate \"R\") = 82));\n  (assert ((candidate \"S\") = 83));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "(**Write a mlthon function to find the sum of even numbers at even positions of a list.\n*)\nlet sum_even_and_even_index (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = sum_even_and_even_index in\n  (assert ((candidate [5; 6; 12; 1; 18; 8]) = 30));\n  (assert ((candidate [3; 20; 17; 9; 2; 10; 18; 13; 6; 18]) = 26));\n  (assert ((candidate [5; 6; 12; 1]) = 12));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "(**Write a mlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n*)\nlet even_Power_Sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = even_Power_Sum in\n  (assert ((candidate 2) = 1056));\n  (assert ((candidate 3) = 8832));\n  (assert ((candidate 1) = 32));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_272_rear_extract", "prompt": "(**Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n*)\nlet rear_extract (test_list :  int * string * int list) : int list =", "test": "\nlet assertions =\n let candidate = rear_extract in\n  (assert ((candidate [(1, \"Rash\", 21); (2, \"Varsha\", 20); (3, \"Kil\", 19)]) = [21; 20; 19]));\n  (assert ((candidate [(1, \"Sai\", 36); (2, \"Ayesha\", 25); (3, \"Salman\", 45)]) = [36; 25; 45]));\n  (assert ((candidate [(1, \"Sudeep\", 14); (2, \"Vandana\", 36); (3, \"Dawood\", 56)]) = [14; 36; 56]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_273_substract_elements", "prompt": "(**Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n*)\nlet substract_elements (test_tup1 :  int * int * int) (test_tup2 :  int * int * int) :  int * int * int =", "test": "\nlet assertions =\n let candidate = substract_elements in\n  (assert ((candidate (10, 4, 5) (2, 5, 18)) = (8, (~1), (~13))));\n  (assert ((candidate (11, 2, 3) (24, 45, 16)) = ((~13), (~43), (~13))));\n  (assert ((candidate (7, 18, 9) (10, 11, 12)) = ((~3), 7, (~3))));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "(**Write a mlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n*)\nlet even_binomial_Coeff_Sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = even_binomial_Coeff_Sum in\n  (assert ((candidate 4) = 8));\n  (assert ((candidate 6) = 32));\n  (assert ((candidate 2) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_277_dict_filter", "prompt": "(**Write a function that takes in an association list and integer n and filters the association list to only include entries with values greater than or equal to n.\n*)\nlet dict_filter (dict : (string, int) list) (n : int) : (string, int) list =", "test": "\nlet assertions =\n let candidate = dict_filter in\n  (assert ((candidate [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Kierra Gentry\", 165); (\"Pierre Cox\", 190)] 170) = [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Pierre Cox\", 190)]));\n  (assert ((candidate [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Kierra Gentry\", 165); (\"Pierre Cox\", 190)] 180) = [(\"Alden Cantrell\", 180); (\"Pierre Cox\", 190)]));\n  (assert ((candidate [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Kierra Gentry\", 165); (\"Pierre Cox\", 190)] 190) = [(\"Pierre Cox\", 190)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "(**Write a function to find the nth decagonal number.\n*)\nlet is_num_decagonal (n : int) : int =", "test": "\nlet assertions =\n let candidate = is_num_decagonal in\n  (assert ((candidate 3) = 27));\n  (assert ((candidate 7) = 175));\n  (assert ((candidate 10) = 370));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_280_sequential_search", "prompt": "(**Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n*)\nlet sequential_search (dlist : int list) (item : int) :  bool * int =", "test": "\nlet assertions =\n let candidate = sequential_search in\n  (assert ((candidate [11; 23; 58; 31; 56; 77; 43; 12; 65; 19] 31) = (true, 3)));\n  (assert ((candidate [12; 32; 45; 62; 35; 47; 44; 61] 61) = (true, 7)));\n  (assert ((candidate [9; 10; 17; 19; 22; 39; 48; 56] 48) = (true, 6)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_281_all_unique", "prompt": "(**Write a mlthon function to check if the elements of a given list are unique or not.\n*)\nlet all_unique (test_list : int list) : bool =", "test": "\nlet assertions =\n let candidate = all_unique in\n  (assert ((candidate [1; 2; 3]) = true));\n  (assert ((candidate [1; 2; 1; 2]) = false));\n  (assert ((candidate [1; 2; 3; 4; 5]) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_282_sub_list", "prompt": "(**Write a function to subtract two lists element-wise.\n*)\nlet sub_list (nums1 : int list) (nums2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = sub_list in\n  (assert ((candidate [1; 2; 3] [4; 5; 6]) = [(~3); (~3); (~3)]));\n  (assert ((candidate [1; 2] [3; 4]) = [(~2); (~2)]));\n  (assert ((candidate [90; 120] [50; 70]) = [40; 50]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_283_validate", "prompt": "(**Write a mlthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n*)\nlet validate (n : int) : bool =", "test": "\nlet assertions =\n let candidate = validate in\n  (assert ((candidate 1234) = true));\n  (assert ((candidate 51241) = false));\n  (assert ((candidate 321) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "(**Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n*)\nlet text_match_two_three (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_match_two_three in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abbbba\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "(**Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n*)\nlet max_sub_array_sum_repeated (a : int list) (n : int) (k : int) : int =", "test": "\nlet assertions =\n let candidate = max_sub_array_sum_repeated in\n  (assert ((candidate [10; 20; (~30); (~1)] 4 3) = 30));\n  (assert ((candidate [(~1); 10; 20] 3 2) = 59));\n  (assert ((candidate [(~1); (~2); (~3)] 3 3) = (~1)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_287_square_Sum", "prompt": "(**Write a mlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n*)\nlet square_Sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = square_Sum in\n  (assert ((candidate 2) = 20));\n  (assert ((candidate 3) = 56));\n  (assert ((candidate 4) = 120));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_290_max_length", "prompt": "(**Write a function to find the list of maximum length in a list of lists.\n*)\nlet max_length (list1 : int list list) :  int * int list =", "test": "\nlet assertions =\n let candidate = max_length in\n  (assert ((candidate [[0]; [1; 3]; [5; 7]; [9; 11]; [13; 15; 17]]) = (3, [13; 15; 17])));\n  (assert ((candidate [[1]; [5; 7]; [10; 12; 14; 15]]) = (4, [10; 12; 14; 15])));\n  (assert ((candidate [[5]; [15; 20; 25]]) = (3, [15; 20; 25])));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "(**Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n*)\nlet count_no_of_ways (n : int) (k : int) : int =", "test": "\nlet assertions =\n let candidate = count_no_of_ways in\n  (assert ((candidate 2 4) = 16));\n  (assert ((candidate 3 2) = 6));\n  (assert ((candidate 4 4) = 228));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_292_find", "prompt": "(**Write a mlthon function to find quotient of two numbers (rounded down to the nearest integer).\n*)\nlet find (n : int) (m : int) : int =", "test": "\nlet assertions =\n let candidate = find in\n  (assert ((candidate 10 3) = 3));\n  (assert ((candidate 4 2) = 2));\n  (assert ((candidate 20 5) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "(**Write a function to find the third side of a right angled triangle.\n*)\nlet otherside_rightangle (w : int) (h : int) : float =", "test": "\nlet assertions =\n let candidate = otherside_rightangle in\n  (assert ((candidate 7 8) = 10.63014581273465));\n  (assert ((candidate 3 4) = 5.0));\n  (assert ((candidate 7 15) = 16.55294535724685));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_295_sum_div", "prompt": "(**Write a function to return the sum of all divisors of a number.\n*)\nlet sum_div (number : int) : int =", "test": "\nlet assertions =\n let candidate = sum_div in\n  (assert ((candidate 8) = 7));\n  (assert ((candidate 12) = 16));\n  (assert ((candidate 7) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "(**Write a mlthon function to count inversions in a list.\n*)\nlet get_Inv_Count (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = get_Inv_Count in\n  (assert ((candidate [1; 20; 6; 4; 5]) = 5));\n  (assert ((candidate [1; 2; 1]) = 1));\n  (assert ((candidate [1; 2; 5; 6; 1]) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "(**Write a function to calculate the maximum aggregate from the list of tuples.\n*)\nlet max_aggregate (stdata :  string * int list) :  string * int =", "test": "\nlet assertions =\n let candidate = max_aggregate in\n  (assert ((candidate [(\"Juan Whelan\", 90); (\"Sabah Colley\", 88); (\"Peter Nichols\", 7); (\"Juan Whelan\", 122); (\"Sabah Colley\", 84)]) = (\"Juan Whelan\", 212)));\n  (assert ((candidate [(\"Juan Whelan\", 50); (\"Sabah Colley\", 48); (\"Peter Nichols\", 37); (\"Juan Whelan\", 22); (\"Sabah Colley\", 14)]) = (\"Juan Whelan\", 72)));\n  (assert ((candidate [(\"Juan Whelan\", 10); (\"Sabah Colley\", 20); (\"Peter Nichols\", 30); (\"Juan Whelan\", 40); (\"Sabah Colley\", 50)]) = (\"Sabah Colley\", 70)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_304_find_Element", "prompt": "(**Write a mlthon function to find element at a given index after number of rotations.\n*)\nlet find_Element (arr : int list) (ranges : int list list) (rotations : int) (index : int) : int =", "test": "\nlet assertions =\n let candidate = find_Element in\n  (assert ((candidate [1; 2; 3; 4; 5] [[0; 2]; [0; 3]] 2 1) = 3));\n  (assert ((candidate [1; 2; 3; 4] [[0; 1]; [0; 2]] 1 2) = 3));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [[0; 1]; [0; 2]] 1 1) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_305_start_withp", "prompt": "(**Write a function to return two words from a list of words starting with letter 'p'.\n*)\nlet start_withp (words : string list) :  string * string =", "test": "\nlet assertions =\n let candidate = start_withp in\n  (assert ((candidate [\"Python PHP\"; \"Java JavaScript\"; \"c c++\"]) = (\"Python\", \"PHP\")));\n  (assert ((candidate [\"Python Programming\"; \"Java Programming\"]) = (\"Python\", \"Programming\")));\n  (assert ((candidate [\"Pqrst Pqr\"; \"qrstuv\"]) = (\"Pqrst\", \"Pqr\")));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "(**Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n*)\nlet max_sum_increasing_subseq (a : int list) (n : int) (index : int) (k : int) : int =", "test": "\nlet assertions =\n let candidate = max_sum_increasing_subseq in\n  (assert ((candidate [1; 101; 2; 3; 100; 4; 5] 7 4 6) = 11));\n  (assert ((candidate [1; 101; 2; 3; 100; 4; 5] 7 2 5) = 7));\n  (assert ((candidate [11; 15; 19; 21; 26; 28; 31] 7 2 4) = 71));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_308_large_product", "prompt": "(**Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n*)\nlet large_product (nums1 : int list) (nums2 : int list) (N : int) : int list =", "test": "\nlet assertions =\n let candidate = large_product in\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [3; 6; 8; 9; 10; 6] 3) = [60; 54; 50]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [3; 6; 8; 9; 10; 6] 4) = [60; 54; 50; 48]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [3; 6; 8; 9; 10; 6] 5) = [60; 54; 50; 48; 45]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_309_maximum", "prompt": "(**Write a mlthon function to find the maximum of two numbers.\n*)\nlet maximum (a : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = maximum in\n  (assert ((candidate 5 10) = 10));\n  (assert ((candidate (~1) (~2)) = (~1)));\n  (assert ((candidate 9 7) = 9));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "(**Write a function to convert a given string to a list of characters.\n*)\nlet string_to_tuple (str1 : string) : string list =", "test": "\nlet assertions =\n let candidate = string_to_tuple in\n  (assert ((candidate \"python 3.0\") = [\"p\"; \"y\"; \"t\"; \"h\"; \"o\"; \"n\"; \"3\"; \".\"; \"0\"]));\n  (assert ((candidate \"item1\") = [\"i\"; \"t\"; \"e\"; \"m\"; \"1\"]));\n  (assert ((candidate \"15.10\") = [\"1\"; \"5\"; \".\"; \"1\"; \"0\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "(**Write a mlthon function to find the highest power of 2 that is less than or equal to n.\n*)\nlet highest_Power_of_2 (n : int) : int =", "test": "\nlet assertions =\n let candidate = highest_Power_of_2 in\n  (assert ((candidate 10) = 8));\n  (assert ((candidate 19) = 16));\n  (assert ((candidate 32) = 32));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_389_find_lucas", "prompt": "(**Write a function to find the n'th lucas number.\n*)\nlet find_lucas (n : int) : int =", "test": "\nlet assertions =\n let candidate = find_lucas in\n  (assert ((candidate 9) = 76));\n  (assert ((candidate 4) = 7));\n  (assert ((candidate 3) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "(**Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n*)\nlet get_max_sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = get_max_sum in\n  (assert ((candidate 60) = 106));\n  (assert ((candidate 10) = 12));\n  (assert ((candidate 2) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_393_max_length_list", "prompt": "(**Write a function to find the list with maximum length.\n*)\nlet max_length_list (input_list : int list list) :  int * int list =", "test": "\nlet assertions =\n let candidate = max_length_list in\n  (assert ((candidate [[0]; [1; 3]; [5; 7]; [9; 11]; [13; 15; 17]]) = (3, [13; 15; 17])));\n  (assert ((candidate [[1; 2; 3; 4; 5]; [1; 2; 3; 4]; [1; 2; 3]; [1; 2]; [1]]) = (5, [1; 2; 3; 4; 5])));\n  (assert ((candidate [[3; 4; 5]; [6; 7; 8; 9]; [10; 11; 12]]) = (4, [6; 7; 8; 9])));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_394_check_distinct", "prompt": "(**Write a function to check if given list contains no duplicates.\n*)\nlet check_distinct (test_tup : int list) : bool =", "test": "\nlet assertions =\n let candidate = check_distinct in\n  (assert ((candidate [1; 4; 5; 6; 1; 4]) = false));\n  (assert ((candidate [1; 4; 5; 6]) = true));\n  (assert ((candidate [2; 3; 4; 5; 6]) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "(**Write a mlthon function to find the first non-repeated character in a given string.\n*)\nlet first_non_repeating_character (str1 : string) : string option =", "test": "\nlet assertions =\n let candidate = first_non_repeating_character in\n  (assert ((candidate \"abcabc\") = Some(None)));\n  (assert ((candidate \"abc\") = Some(\"a\")));\n  (assert ((candidate \"ababc\") = Some(\"c\")));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_396_check_char", "prompt": "(**Write a function to check whether the given string starts and ends with the same character or not.\n*)\nlet check_char (string : string) : string =", "test": "\nlet assertions =\n let candidate = check_char in\n  (assert ((candidate \"abba\") = \"Valid\"));\n  (assert ((candidate \"a\") = \"Valid\"));\n  (assert ((candidate \"abcd\") = \"Invalid\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_397_median_numbers", "prompt": "(**Write a function to find the median of three numbers.\n*)\nlet median_numbers (a : int) (b : int) (c : int) : float =", "test": "\nlet assertions =\n let candidate = median_numbers in\n  (assert ((candidate 25 55 65) = 55.0));\n  (assert ((candidate 20 10 30) = 20.0));\n  (assert ((candidate 15 45 75) = 45.0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "(**Write a function to perform the mathematical bitwise xor operation across the given tuples.\n*)\nlet bitwise_xor (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "test": "\nlet assertions =\n let candidate = bitwise_xor in\n  (assert ((candidate (10, 4, 6, 9) (5, 2, 3, 3)) = (15, 6, 5, 10)));\n  (assert ((candidate (11, 5, 7, 10) (6, 3, 4, 4)) = (13, 6, 3, 14)));\n  (assert ((candidate (12, 6, 8, 11) (7, 4, 5, 6)) = (11, 2, 13, 13)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_400_extract_freq", "prompt": "(**Write a function to extract the number of unique tuples in the given list.\n*)\nlet extract_freq (test_list :  int * int list) : int =", "test": "\nlet assertions =\n let candidate = extract_freq in\n  (assert ((candidate [(3, 4); (1, 2); (4, 3); (5, 6)]) = 3));\n  (assert ((candidate [(4, 15); (2, 3); (5, 4); (6, 7)]) = 4));\n  (assert ((candidate [(5, 16); (2, 3); (6, 5); (6, 9)]) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "(**Write a function to perform index wise addition of list elements in the given two nested lists.\n*)\nlet add_nested_tuples (test_tup1 : int list list) (test_tup2 : int list list) : int list list =", "test": "\nlet assertions =\n let candidate = add_nested_tuples in\n  (assert ((candidate [[1; 3]; [4; 5]; [2; 9]; [1; 10]] [[6; 7]; [3; 9]; [1; 1]; [7; 3]]) = [[7; 10]; [7; 14]; [3; 10]; [8; 13]]));\n  (assert ((candidate [[2; 4]; [5; 6]; [3; 10]; [2; 11]] [[7; 8]; [4; 10]; [2; 2]; [8; 4]]) = [[9; 12]; [9; 16]; [5; 12]; [10; 15]]));\n  (assert ((candidate [[3; 5]; [6; 7]; [4; 11]; [3; 12]] [[8; 9]; [5; 11]; [3; 3]; [9; 5]]) = [[11; 14]; [11; 18]; [7; 14]; [12; 17]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_404_minimum", "prompt": "(**Write a mlthon function to find the minimum of two numbers.\n*)\nlet minimum (a : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = minimum in\n  (assert ((candidate 1 2) = 1));\n  (assert ((candidate (~5) (~4)) = (~5)));\n  (assert ((candidate 0 0) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_406_find_Parity", "prompt": "(**Write a mlthon function to find whether the parity of a given number is odd.\n*)\nlet find_Parity (x : int) : bool =", "test": "\nlet assertions =\n let candidate = find_Parity in\n  (assert ((candidate 12) = false));\n  (assert ((candidate 7) = true));\n  (assert ((candidate 10) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "(**Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n*)\nlet k_smallest_pairs (nums1 : int list) (nums2 : int list) (k : int) : int list list =", "test": "\nlet assertions =\n let candidate = k_smallest_pairs in\n  (assert ((candidate [1; 3; 7] [2; 4; 6] 2) = [[1; 2]; [1; 4]]));\n  (assert ((candidate [1; 3; 7] [2; 4; 6] 1) = [[1; 2]]));\n  (assert ((candidate [1; 3; 7] [2; 4; 6] 7) = [[1; 2]; [1; 4]; [3; 2]; [1; 6]; [3; 4]; [3; 6]; [7; 2]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "(**Write a function to find the minimum product from the pairs of tuples within a given list.\n*)\nlet min_product_tuple (list1 :  int * int list) : int =", "test": "\nlet assertions =\n let candidate = min_product_tuple in\n  (assert ((candidate [(2, 7); (2, 6); (1, 8); (4, 9)]) = 8));\n  (assert ((candidate [(10, 20); (15, 2); (5, 10)]) = 30));\n  (assert ((candidate [(11, 44); (10, 15); (20, 5); (12, 9)]) = 100));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "(**Write a function to convert the given snake case string to camel case string.\n*)\nlet snake_to_camel (word : string) : string =", "test": "\nlet assertions =\n let candidate = snake_to_camel in\n  (assert ((candidate \"android_tv\") = \"AndroidTv\"));\n  (assert ((candidate \"google_pixel\") = \"GooglePixel\"));\n  (assert ((candidate \"apple_watch\") = \"AppleWatch\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_412_remove_odd", "prompt": "(**Write a mlthon function to remove odd numbers from a given list.\n*)\nlet remove_odd (l : int list) : int list =", "test": "\nlet assertions =\n let candidate = remove_odd in\n  (assert ((candidate [1; 2; 3]) = [2]));\n  (assert ((candidate [2; 4; 6]) = [2; 4; 6]));\n  (assert ((candidate [10; 20; 3]) = [10; 20]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_414_overlapping", "prompt": "(**Write a mlthon function to check whether any value in a sequence exists in a sequence or not.\n*)\nlet overlapping (list1 : int list) (list2 : int list) : bool =", "test": "\nlet assertions =\n let candidate = overlapping in\n  (assert ((candidate [1; 2; 3; 4; 5] [6; 7; 8; 9]) = false));\n  (assert ((candidate [1; 2; 3] [4; 5; 6]) = false));\n  (assert ((candidate [1; 4; 5] [1; 4; 5]) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_415_max_Product", "prompt": "(**Write a mlthon function to find a pair with highest product from a given list of integers.\n*)\nlet max_Product (arr : int list) :  int * int =", "test": "\nlet assertions =\n let candidate = max_Product in\n  (assert ((candidate [1; 2; 3; 4; 7; 0; 8; 4]) = (7, 8)));\n  (assert ((candidate [0; (~1); (~2); (~4); 5; 0; (~6)]) = ((~4), (~6))));\n  (assert ((candidate [1; 2; 3]) = (2, 3)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_417_group_tuples", "prompt": "(**Write a function to find common first element in given list of lists.\n*)\nlet group_tuples (Input : string list list) : string list list =", "test": "\nlet assertions =\n let candidate = group_tuples in\n  (assert ((candidate [[\"x\"; \"y\"]; [\"x\"; \"z\"]; [\"w\"; \"t\"]]) = [[\"x\"; \"y\"; \"z\"]; [\"w\"; \"t\"]]));\n  (assert ((candidate [[\"a\"; \"b\"]; [\"a\"; \"c\"]; [\"d\"; \"e\"]]) = [[\"a\"; \"b\"; \"c\"]; [\"d\"; \"e\"]]));\n  (assert ((candidate [[\"f\"; \"g\"]; [\"f\"; \"g\"]; [\"h\"; \"i\"]]) = [[\"f\"; \"g\"; \"g\"]; [\"h\"; \"i\"]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "(**Write a mlthon function to find the cube sum of first n even natural numbers.\n*)\nlet cube_Sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = cube_Sum in\n  (assert ((candidate 2) = 72));\n  (assert ((candidate 3) = 288));\n  (assert ((candidate 4) = 800));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "(**Write a function to concatenate each element of tuple by the delimiter.\n*)\nlet concatenate_tuple (test_tup :  string * string * int * string) : string =", "test": "\nlet assertions =\n let candidate = concatenate_tuple in\n  (assert ((candidate (\"ID\", \"is\", 4, \"UTS\")) = \"ID-is-4-UTS\"));\n  (assert ((candidate (\"QWE\", \"is\", 4, \"RTY\")) = \"QWE-is-4-RTY\"));\n  (assert ((candidate (\"ZEN\", \"is\", 4, \"OP\")) = \"ZEN-is-4-OP\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "(**Write a mlthon function to find the average of cubes of first n natural numbers.\n*)\nlet find_Average_Of_Cube (n : int) : float =", "test": "\nlet assertions =\n let candidate = find_Average_Of_Cube in\n  (assert ((candidate 2) = 4.5));\n  (assert ((candidate 3) = 12.0));\n  (assert ((candidate 1) = 1.0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_424_extract_rear", "prompt": "(**Write a function to extract only the rear index element of each string in the given tuple.\n*)\nlet extract_rear (test_tuple :  string * string * string) : string list =", "test": "\nlet assertions =\n let candidate = extract_rear in\n  (assert ((candidate (\"Mers\", \"for\", \"Vers\")) = [\"s\"; \"r\"; \"s\"]));\n  (assert ((candidate (\"Avenge\", \"for\", \"People\")) = [\"e\"; \"r\"; \"e\"]));\n  (assert ((candidate (\"Gotta\", \"get\", \"go\")) = [\"a\"; \"t\"; \"o\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "(**Write a function to filter odd numbers.\n*)\nlet filter_oddnumbers (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = filter_oddnumbers in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [1; 3; 5; 7; 9]));\n  (assert ((candidate [10; 20; 45; 67; 84; 93]) = [45; 67; 93]));\n  (assert ((candidate [5; 7; 9; 8; 6; 4; 3]) = [5; 7; 9; 3]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_427_change_date_format", "prompt": "(**Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n*)\nlet change_date_format (dt : string) : string =", "test": "\nlet assertions =\n let candidate = change_date_format in\n  (assert ((candidate \"2026-01-02\") = \"02-01-2026\"));\n  (assert ((candidate \"2020-11-13\") = \"13-11-2020\"));\n  (assert ((candidate \"2021-04-26\") = \"26-04-2021\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_428_shell_sort", "prompt": "(**Write a function to sort the given list by using shell sort.\n*)\nlet shell_sort (my_list : int list) : int list =", "test": "\nlet assertions =\n let candidate = shell_sort in\n  (assert ((candidate [12; 23; 4; 5; 3; 2; 12; 81; 56; 95]) = [2; 3; 4; 5; 12; 12; 23; 56; 81; 95]));\n  (assert ((candidate [24; 22; 39; 34; 87; 73; 68]) = [22; 24; 34; 39; 68; 73; 87]));\n  (assert ((candidate [32; 30; 16; 96; 82; 83; 74]) = [16; 30; 32; 74; 82; 83; 96]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_429_and_tuples", "prompt": "(**Write a function to extract the elementwise and tuples from the given two tuples.\n*)\nlet and_tuples (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "test": "\nlet assertions =\n let candidate = and_tuples in\n  (assert ((candidate (10, 4, 6, 9) (5, 2, 3, 3)) = (0, 0, 2, 1)));\n  (assert ((candidate (1, 2, 3, 4) (5, 6, 7, 8)) = (1, 2, 3, 0)));\n  (assert ((candidate (8, 9, 11, 12) (7, 13, 14, 17)) = (0, 9, 10, 0)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "(**Write a function to find the directrix of a parabola.\n*)\nlet parabola_directrix (a : int) (b : int) (c : int) : int =", "test": "\nlet assertions =\n let candidate = parabola_directrix in\n  (assert ((candidate 5 3 2) = (~198)));\n  (assert ((candidate 9 8 4) = (~2336)));\n  (assert ((candidate 2 4 6) = (~130)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "(**Write a function to find the median length of a trapezium.\n*)\nlet median_trapezium (base1 : int) (base2 : int) (height : int) : float =", "test": "\nlet assertions =\n let candidate = median_trapezium in\n  (assert ((candidate 15 25 35) = 20.0));\n  (assert ((candidate 10 20 30) = 15.0));\n  (assert ((candidate 6 9 4) = 7.5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_433_check_greater", "prompt": "(**Write a function to check whether the entered number is greater than the elements of the given list.\n*)\nlet check_greater (arr : int list) (number : int) : bool =", "test": "\nlet assertions =\n let candidate = check_greater in\n  (assert ((candidate [1; 2; 3; 4; 5] 4) = false));\n  (assert ((candidate [2; 3; 4; 5; 6] 8) = true));\n  (assert ((candidate [9; 7; 4; 8; 6; 1] 11) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_434_text_match_one", "prompt": "(**Write a function that matches a string that has an a followed by one or more b's.\n*)\nlet text_match_one (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_match_one in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abba\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_435_last_Digit", "prompt": "(**Write a mlthon function to find the last digit of a given number.\n*)\nlet last_Digit (n : int) : int =", "test": "\nlet assertions =\n let candidate = last_Digit in\n  (assert ((candidate 123) = 3));\n  (assert ((candidate 25) = 5));\n  (assert ((candidate 30) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_436_neg_nos", "prompt": "(**Write a mlthon function to return the negative numbers in a list.\n*)\nlet neg_nos (list1 : int list) : int list =", "test": "\nlet assertions =\n let candidate = neg_nos in\n  (assert ((candidate [(~1); 4; 5; (~6)]) = [(~1); (~6)]));\n  (assert ((candidate [(~1); (~2); 3; 4]) = [(~1); (~2)]));\n  (assert ((candidate [(~7); (~6); 8; 9]) = [(~7); (~6)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_437_remove_odd", "prompt": "(**Write a function to remove odd characters in a string.\n*)\nlet remove_odd (str1 : string) : string =", "test": "\nlet assertions =\n let candidate = remove_odd in\n  (assert ((candidate \"python\") = \"yhn\"));\n  (assert ((candidate \"program\") = \"rga\"));\n  (assert ((candidate \"language\") = \"agae\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "(**Write a function to count bidirectional tuple pairs.\n*)\nlet count_bidirectional (test_list :  int * int list) : int =", "test": "\nlet assertions =\n let candidate = count_bidirectional in\n  (assert ((candidate [(5, 6); (1, 2); (6, 5); (9, 1); (6, 5); (2, 1)]) = 3));\n  (assert ((candidate [(5, 6); (1, 3); (6, 5); (9, 1); (6, 5); (2, 1)]) = 2));\n  (assert ((candidate [(5, 6); (1, 2); (6, 5); (9, 2); (6, 5); (2, 1)]) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "(**Write a function to join a list of multiple integers into a single integer.\n*)\nlet multiple_to_single (L : int list) : int =", "test": "\nlet assertions =\n let candidate = multiple_to_single in\n  (assert ((candidate [11; 33; 50]) = 113350));\n  (assert ((candidate [(~1); 2; 3; 4; 5; 6]) = (~123456)));\n  (assert ((candidate [10; 15; 20; 25]) = 10152025));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "(**Write a function to find the first adverb and their positions in a given sentence.\n*)\nlet find_adverb_position (text : string) :  int * int * string =", "test": "\nlet assertions =\n let candidate = find_adverb_position in\n  (assert ((candidate \"clearly!! we can see the sky\") = (0, 7, \"clearly\")));\n  (assert ((candidate \"seriously!! there are many roses\") = (0, 9, \"seriously\")));\n  (assert ((candidate \"unfortunately!! sita is going to home\") = (0, 13, \"unfortunately\")));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "(**Write a function to find the surface area of a cube of a given size.\n*)\nlet surfacearea_cube (l : int) : int =", "test": "\nlet assertions =\n let candidate = surfacearea_cube in\n  (assert ((candidate 5) = 150));\n  (assert ((candidate 3) = 54));\n  (assert ((candidate 10) = 600));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_442_positive_count", "prompt": "(**Write a function to find the ration of positive numbers in a list of integers.\n*)\nlet positive_count (nums : int list) : float =", "test": "\nlet assertions =\n let candidate = positive_count in\n  (assert ((candidate [0; 1; 2; (~1); (~5); 6; 0; (~3); (~2); 3; 4; 6; 8]) = 0.54));\n  (assert ((candidate [2; 1; 2; (~1); (~5); 6; 4; (~3); (~2); 3; 4; 6; 8]) = 0.69));\n  (assert ((candidate [2; 4; (~6); (~9); 11; (~12); 14; (~5); 17]) = 0.56));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_443_largest_neg", "prompt": "(**Write a mlthon function to find the largest negative number from the given list.\n*)\nlet largest_neg (list1 : int list) : int =", "test": "\nlet assertions =\n let candidate = largest_neg in\n  (assert ((candidate [1; 2; 3; (~4); (~6)]) = (~6)));\n  (assert ((candidate [1; 2; 3; (~8); (~9)]) = (~9)));\n  (assert ((candidate [1; 2; 3; 4; (~1)]) = (~1)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "(**Write a function to trim each list by k in the given lists.\n*)\nlet trim_tuple (test_list : int list list) (K : int) : int list list =", "test": "\nlet assertions =\n let candidate = trim_tuple in\n  (assert ((candidate [[5; 3; 2; 1; 4]; [3; 4; 9; 2; 1]; [9; 1; 2; 3; 5]; [4; 8; 2; 1; 7]] 2) = [[2]; [9]; [2]; [2]]));\n  (assert ((candidate [[5; 3; 2; 1; 4]; [3; 4; 9; 2; 1]; [9; 1; 2; 3; 5]; [4; 8; 2; 1; 7]] 1) = [[3; 2; 1]; [4; 9; 2]; [1; 2; 3]; [8; 2; 1]]));\n  (assert ((candidate [[7; 8; 4; 9]; [11; 8; 12; 4]; [4; 1; 7; 8]; [3; 6; 9; 7]] 1) = [[8; 4]; [8; 12]; [1; 7]; [6; 9]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "(**Write a function to perform index wise multiplication of list elements in the given two lists.\n*)\nlet index_multiplication (test_tup1 : int list list) (test_tup2 : int list list) : int list list =", "test": "\nlet assertions =\n let candidate = index_multiplication in\n  (assert ((candidate [[1; 3]; [4; 5]; [2; 9]; [1; 10]] [[6; 7]; [3; 9]; [1; 1]; [7; 3]]) = [[6; 21]; [12; 45]; [2; 9]; [7; 30]]));\n  (assert ((candidate [[2; 4]; [5; 6]; [3; 10]; [2; 11]] [[7; 8]; [4; 10]; [2; 2]; [8; 4]]) = [[14; 32]; [20; 60]; [6; 20]; [16; 44]]));\n  (assert ((candidate [[3; 5]; [6; 7]; [4; 11]; [3; 12]] [[8; 9]; [5; 11]; [3; 3]; [9; 5]]) = [[24; 45]; [30; 77]; [12; 33]; [27; 60]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_447_cube_nums", "prompt": "(**Write a function to find cubes of individual elements in a list.\n*)\nlet cube_nums (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = cube_nums in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [1; 8; 27; 64; 125; 216; 343; 512; 729; 1000]));\n  (assert ((candidate [10; 20; 30]) = [1000; 8000; 27000]));\n  (assert ((candidate [12; 15]) = [1728; 3375]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_448_cal_sum", "prompt": "(**Write a function to calculate the sum of perrin numbers.\n*)\nlet cal_sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = cal_sum in\n  (assert ((candidate 9) = 49));\n  (assert ((candidate 10) = 66));\n  (assert ((candidate 11) = 88));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_450_extract_string", "prompt": "(**Write a function to extract specified size of strings from a given list of string values.\n*)\nlet extract_string (str : string list) (l : int) : string list =", "test": "\nlet assertions =\n let candidate = extract_string in\n  (assert ((candidate [\"Python\"; \"list\"; \"exercises\"; \"practice\"; \"solution\"] 8) = [\"practice\"; \"solution\"]));\n  (assert ((candidate [\"Python\"; \"list\"; \"exercises\"; \"practice\"; \"solution\"] 6) = [\"Python\"]));\n  (assert ((candidate [\"Python\"; \"list\"; \"exercises\"; \"practice\"; \"solution\"] 9) = [\"exercises\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "(**Write a function to remove all whitespaces from the given string.\n*)\nlet remove_whitespaces (text1 : string) : string =", "test": "\nlet assertions =\n let candidate = remove_whitespaces in\n  (assert ((candidate \" Google    Flutter \") = \"GoogleFlutter\"));\n  (assert ((candidate \" Google    Dart \") = \"GoogleDart\"));\n  (assert ((candidate \" iOS    Swift \") = \"iOSSwift\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_452_loss_amount", "prompt": "(**Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n*)\nlet loss_amount (actual_cost : int) (sale_amount : int) : int =", "test": "\nlet assertions =\n let candidate = loss_amount in\n  (assert ((candidate 1500 1200) = 0));\n  (assert ((candidate 100 200) = 100));\n  (assert ((candidate 2000 5000) = 3000));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "(**Write a mlthon function to find the sum of even factors of a number.\n*)\nlet sumofFactors (n : int) : int =", "test": "\nlet assertions =\n let candidate = sumofFactors in\n  (assert ((candidate 18) = 26));\n  (assert ((candidate 30) = 48));\n  (assert ((candidate 6) = 8));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "(**Write a function that matches a word containing 'z'.\n*)\nlet text_match_wordz (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_match_wordz in\n  (assert ((candidate \"pythonz.\") = true));\n  (assert ((candidate \"xyz.\") = true));\n  (assert ((candidate \"  lang  .\") = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "(**Write a function to check whether the given month number contains 31 days or not.\n*)\nlet check_monthnumb_number (monthnum2 : int) : bool =", "test": "\nlet assertions =\n let candidate = check_monthnumb_number in\n  (assert ((candidate 5) = true));\n  (assert ((candidate 2) = false));\n  (assert ((candidate 6) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "(**Write a function to reverse each string in a given list of string values.\n*)\nlet reverse_string_list (stringlist : string list) : string list =", "test": "\nlet assertions =\n let candidate = reverse_string_list in\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"; \"White\"; \"Black\"]) = [\"deR\"; \"neerG\"; \"eulB\"; \"etihW\"; \"kcalB\"]));\n  (assert ((candidate [\"john\"; \"amal\"; \"joel\"; \"george\"]) = [\"nhoj\"; \"lama\"; \"leoj\"; \"egroeg\"]));\n  (assert ((candidate [\"jack\"; \"john\"; \"mary\"]) = [\"kcaj\"; \"nhoj\"; \"yram\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "(**Write a function to find the area of a rectangle.\n*)\nlet rectangle_area (l : int) (b : int) : int =", "test": "\nlet assertions =\n let candidate = rectangle_area in\n  (assert ((candidate 10 20) = 200));\n  (assert ((candidate 10 5) = 50));\n  (assert ((candidate 4 2) = 8));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "(**Write a function to remove uppercase substrings from a given string.\n*)\nlet remove_uppercase (str1 : string) : string =", "test": "\nlet assertions =\n let candidate = remove_uppercase in\n  (assert ((candidate \"cAstyoUrFavoRitETVshoWs\") = \"cstyoravoitshos\"));\n  (assert ((candidate \"wAtchTheinTernEtrAdIo\") = \"wtchheinerntrdo\"));\n  (assert ((candidate \"VoicESeaRchAndreComMendaTionS\") = \"oiceachndreomendaion\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_460_Extract", "prompt": "(**Write a mlthon function to get the first element of each sublist.\n*)\nlet Extract (lst : int list list) : int list =", "test": "\nlet assertions =\n let candidate = Extract in\n  (assert ((candidate [[1; 2]; [3; 4; 5]; [6; 7; 8; 9]]) = [1; 3; 6]));\n  (assert ((candidate [[1; 2; 3]; [4; 5]]) = [1; 4]));\n  (assert ((candidate [[9; 8; 1]; [1; 2]]) = [9; 1]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "(**Write a mlthon function to count the upper case characters in a given string.\n*)\nlet upper_ctr (str : string) : int =", "test": "\nlet assertions =\n let candidate = upper_ctr in\n  (assert ((candidate \"PYthon\") = 1));\n  (assert ((candidate \"BigData\") = 1));\n  (assert ((candidate \"program\") = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "(**Write a function to find the maximum product sublist of the given list.\n*)\nlet max_subarray_product (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = max_subarray_product in\n  (assert ((candidate [1; (~2); (~3); 0; 7; (~8); (~2)]) = 112));\n  (assert ((candidate [6; (~3); (~10); 0; 2]) = 180));\n  (assert ((candidate [(~2); (~40); 0; (~2); (~3)]) = 80));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_464_check_value", "prompt": "(**Write a function to check if all values are same in an association list.\n*)\nlet check_value (dict : (string, int) list) (n : int) : bool =", "test": "\nlet assertions =\n let candidate = check_value in\n  (assert ((candidate [(\"Cierra Vega\", 12); (\"Alden Cantrell\", 12); (\"Kierra Gentry\", 12); (\"Pierre Cox\", 12)] 10) = false));\n  (assert ((candidate [(\"Cierra Vega\", 12); (\"Alden Cantrell\", 12); (\"Kierra Gentry\", 12); (\"Pierre Cox\", 12)] 12) = true));\n  (assert ((candidate [(\"Cierra Vega\", 12); (\"Alden Cantrell\", 12); (\"Kierra Gentry\", 12); (\"Pierre Cox\", 12)] 5) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_468_max_product", "prompt": "(**Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n*)\nlet max_product (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = max_product in\n  (assert ((candidate [3; 100; 4; 5; 150; 6]) = 3000));\n  (assert ((candidate [4; 42; 55; 68; 80]) = 50265600));\n  (assert ((candidate [10; 22; 9; 33; 21; 50; 41; 60]) = 2460));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "(**Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n*)\nlet add_pairwise (test_tup :  int * int * int * int * int) :  int * int * int * int =", "test": "\nlet assertions =\n let candidate = add_pairwise in\n  (assert ((candidate (1, 5, 7, 8, 10)) = (6, 12, 15, 18)));\n  (assert ((candidate (2, 6, 8, 9, 11)) = (8, 14, 17, 20)));\n  (assert ((candidate (3, 7, 9, 10, 12)) = (10, 16, 19, 22)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_471_find_remainder", "prompt": "(**Write a mlthon function to find the product of the list multiplication modulo n.\n*)\nlet find_remainder (arr : int list) (n : int) : int =", "test": "\nlet assertions =\n let candidate = find_remainder in\n  (assert ((candidate [100; 10; 5; 25; 35; 14] 11) = 9));\n  (assert ((candidate [1; 1; 1] 1) = 0));\n  (assert ((candidate [1; 2; 1] 2) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "(**Write a mlthon function to check whether the given list contains consecutive numbers or not.\n*)\nlet check_Consecutive (l : int list) : bool =", "test": "\nlet assertions =\n let candidate = check_Consecutive in\n  (assert ((candidate [1; 2; 3; 4; 5]) = true));\n  (assert ((candidate [1; 2; 3; 5; 6]) = false));\n  (assert ((candidate [1; 2; 1]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_474_replace_char", "prompt": "(**Write a function to replace characters in a string.\n*)\nlet replace_char (str1 : string) (ch : string) (newch : string) : string =", "test": "\nlet assertions =\n let candidate = replace_char in\n  (assert ((candidate \"polygon\" \"y\" \"l\") = \"pollgon\"));\n  (assert ((candidate \"character\" \"c\" \"a\") = \"aharaater\"));\n  (assert ((candidate \"python\" \"l\" \"a\") = \"python\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_475_sort_counter", "prompt": "(**Write a function to sort an association list by value.\n*)\nlet sort_counter (dict1 : (string, int) list) :  string * int list =", "test": "\nlet assertions =\n let candidate = sort_counter in\n  (assert ((candidate [(\"Math\", 81); (\"Physics\", 83); (\"Chemistry\", 87)]) = [(\"Chemistry\", 87); (\"Physics\", 83); (\"Math\", 81)]));\n  (assert ((candidate [(\"Math\", 400); (\"Physics\", 300); (\"Chemistry\", 250)]) = [(\"Math\", 400); (\"Physics\", 300); (\"Chemistry\", 250)]));\n  (assert ((candidate [(\"Math\", 900); (\"Physics\", 1000); (\"Chemistry\", 1250)]) = [(\"Chemistry\", 1250); (\"Physics\", 1000); (\"Math\", 900)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_476_big_sum", "prompt": "(**Write a mlthon function to find the sum of the largest and smallest value in a given list.\n*)\nlet big_sum (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = big_sum in\n  (assert ((candidate [1; 2; 3]) = 4));\n  (assert ((candidate [(~1); 2; 3; 4]) = 3));\n  (assert ((candidate [2; 3; 6]) = 8));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_477_is_lower", "prompt": "(**Write a mlthon function to convert the given string to lower case.\n*)\nlet is_lower (string : string) : string =", "test": "\nlet assertions =\n let candidate = is_lower in\n  (assert ((candidate \"InValid\") = \"invalid\"));\n  (assert ((candidate \"TruE\") = \"true\"));\n  (assert ((candidate \"SenTenCE\") = \"sentence\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "(**Write a function to remove lowercase substrings from a given string.\n*)\nlet remove_lowercase (str1 : string) : string =", "test": "\nlet assertions =\n let candidate = remove_lowercase in\n  (assert ((candidate \"PYTHon\") = \"PYTH\"));\n  (assert ((candidate \"FInD\") = \"FID\"));\n  (assert ((candidate \"STRinG\") = \"STRG\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_479_first_Digit", "prompt": "(**Write a mlthon function to find the first digit of a given number.\n*)\nlet first_Digit (n : int) : int =", "test": "\nlet assertions =\n let candidate = first_Digit in\n  (assert ((candidate 123) = 1));\n  (assert ((candidate 456) = 4));\n  (assert ((candidate 12) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_554_Split", "prompt": "(**Write a mlthon function which takes a list of integers and only returns the odd ones.\n*)\nlet Split (list : int list) : int list =", "test": "\nlet assertions =\n let candidate = Split in\n  (assert ((candidate [1; 2; 3; 4; 5; 6]) = [1; 3; 5]));\n  (assert ((candidate [10; 11; 12; 13]) = [11; 13]));\n  (assert ((candidate [7; 8; 9; 1]) = [7; 9; 1]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_555_difference", "prompt": "(**Write a mlthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n*)\nlet difference (n : int) : int =", "test": "\nlet assertions =\n let candidate = difference in\n  (assert ((candidate 3) = 30));\n  (assert ((candidate 5) = 210));\n  (assert ((candidate 2) = 6));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "(**Write a mlthon function to count the number of pairs whose xor value is odd.\n*)\nlet find_Odd_Pair (A : int list) (N : int) : int =", "test": "\nlet assertions =\n let candidate = find_Odd_Pair in\n  (assert ((candidate [5; 4; 7; 2; 1] 5) = 6));\n  (assert ((candidate [7; 2; 8; 1; 0; 5; 11] 7) = 12));\n  (assert ((candidate [1; 2; 3] 3) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_557_toggle_string", "prompt": "(**Write a function to toggle the case of all characters in a string.\n*)\nlet toggle_string (string : string) : string =", "test": "\nlet assertions =\n let candidate = toggle_string in\n  (assert ((candidate \"Python\") = \"pYTHON\"));\n  (assert ((candidate \"Pangram\") = \"pANGRAM\"));\n  (assert ((candidate \"LIttLE\") = \"liTTle\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "(**Write a mlthon function to find the sum of the per-digit difference between two integers.\n*)\nlet digit_distance_nums (n1 : int) (n2 : int) : int =", "test": "\nlet assertions =\n let candidate = digit_distance_nums in\n  (assert ((candidate 1 2) = 1));\n  (assert ((candidate 23 56) = 6));\n  (assert ((candidate 123 256) = 7));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "(**Write a function to find the sum of the largest contiguous sublist in the given list.\n*)\nlet max_sub_array_sum (a : int list) (size : int) : int =", "test": "\nlet assertions =\n let candidate = max_sub_array_sum in\n  (assert ((candidate [(~2); (~3); 4; (~1); (~2); 1; 5; (~3)] 8) = 7));\n  (assert ((candidate [(~3); (~4); 5; (~2); (~3); 2; 6; (~4)] 8) = 8));\n  (assert ((candidate [(~4); (~5); 6; (~3); (~4); 3; 7; (~5)] 8) = 10));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_560_union_elements", "prompt": "(**Write a function to find the union of the elements of two given lists and output them in sorted order.\n*)\nlet union_elements (test_tup1 : int list) (test_tup2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = union_elements in\n  (assert ((candidate [3; 4; 5; 6] [5; 7; 4; 10]) = [3; 4; 5; 6; 7; 10]));\n  (assert ((candidate [1; 2; 3; 4] [3; 4; 5; 6]) = [1; 2; 3; 4; 5; 6]));\n  (assert ((candidate [11; 12; 13; 14] [13; 15; 16; 17]) = [11; 12; 13; 14; 15; 16; 17]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "(**Write a mlthon function to find the length of the longest sublists.\n*)\nlet Find_Max_Length (lst : int list list) : int =", "test": "\nlet assertions =\n let candidate = Find_Max_Length in\n  (assert ((candidate [[1]; [1; 4]; [5; 6; 7; 8]]) = 4));\n  (assert ((candidate [[0; 1]; [2; 2]; [3; 2; 1]]) = 3));\n  (assert ((candidate [[7]; [22; 23]; [13; 14; 15]; [10; 20; 30; 40; 50]]) = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_563_extract_values", "prompt": "(**Write a function to extract values between quotation marks from a string.\n*)\nlet extract_values (text : string) : string list =", "test": "\nlet assertions =\n let candidate = extract_values in\n  (assert ((candidate \"\"Python\", \"PHP\", \"Java\"\") = [\"Python\"; \"PHP\"; \"Java\"]));\n  (assert ((candidate \"\"python\",\"program\",\"language\"\") = [\"python\"; \"program\"; \"language\"]));\n  (assert ((candidate \"\"red\",\"blue\",\"green\",\"yellow\"\") = [\"red\"; \"blue\"; \"green\"; \"yellow\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "(**Write a mlthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n*)\nlet count_Pairs (arr : int list) (n : int) : int =", "test": "\nlet assertions =\n let candidate = count_Pairs in\n  (assert ((candidate [1; 2; 1] 3) = 2));\n  (assert ((candidate [1; 1; 1; 1] 4) = 0));\n  (assert ((candidate [1; 2; 3; 4; 5] 5) = 10));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_565_split", "prompt": "(**Write a mlthon function to split a string into characters.\n*)\nlet split (word : string) : string list =", "test": "\nlet assertions =\n let candidate = split in\n  (assert ((candidate \"python\") = [\"p\"; \"y\"; \"t\"; \"h\"; \"o\"; \"n\"]));\n  (assert ((candidate \"Name\") = [\"N\"; \"a\"; \"m\"; \"e\"]));\n  (assert ((candidate \"program\") = [\"p\"; \"r\"; \"o\"; \"g\"; \"r\"; \"a\"; \"m\"]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_566_sum_digits", "prompt": "(**Write a function to get the sum of the digits of a non-negative integer.\n*)\nlet sum_digits (n : int) : int =", "test": "\nlet assertions =\n let candidate = sum_digits in\n  (assert ((candidate 345) = 12));\n  (assert ((candidate 12) = 3));\n  (assert ((candidate 97) = 16));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_567_issort_list", "prompt": "(**Write a function to check whether a specified list is sorted or not.\n*)\nlet issort_list (list1 : int list) : bool =", "test": "\nlet assertions =\n let candidate = issort_list in\n  (assert ((candidate [1; 2; 4; 6; 8; 10; 12; 14; 16; 17]) = true));\n  (assert ((candidate [1; 2; 4; 6; 8; 10; 12; 14; 20; 17]) = false));\n  (assert ((candidate [1; 2; 4; 6; 8; 10; 15; 14; 20]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "(**Write a function to sort each sublist of strings in a given list of lists.\n*)\nlet sort_sublists (list1 : string list list) : string list list =", "test": "\nlet assertions =\n let candidate = sort_sublists in\n  (assert ((candidate [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"white\"; \"black\"; \"orange\"]]) = [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"black\"; \"orange\"; \"white\"]]));\n  (assert ((candidate [[\"green\"; \"orange\"]; [\"black\"]; [\"green\"; \"orange\"]; [\"white\"]]) = [[\"green\"; \"orange\"]; [\"black\"]; [\"green\"; \"orange\"]; [\"white\"]]));\n  (assert ((candidate [[\"a\"; \"b\"]; [\"d\"; \"c\"]; [\"g\"; \"h\"]; [\"f\"; \"e\"]]) = [[\"a\"; \"b\"]; [\"c\"; \"d\"]; [\"g\"; \"h\"]; [\"e\"; \"f\"]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "(**Write a mlthon function to remove duplicate numbers from a given number of lists.\n*)\nlet two_unique_nums (nums : int list) : int list =", "test": "\nlet assertions =\n let candidate = two_unique_nums in\n  (assert ((candidate [1; 2; 3; 2; 3; 4; 5]) = [1; 4; 5]));\n  (assert ((candidate [1; 2; 3; 2; 4; 5]) = [1; 3; 4; 5]));\n  (assert ((candidate [1; 2; 3; 4; 5]) = [1; 2; 3; 4; 5]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_573_unique_product", "prompt": "(**Write a mlthon function to calculate the product of the unique numbers in a given list.\n*)\nlet unique_product (list_data : int list) : int =", "test": "\nlet assertions =\n let candidate = unique_product in\n  (assert ((candidate [10; 20; 30; 40; 20; 50; 60; 40]) = 720000000));\n  (assert ((candidate [1; 2; 3; 1]) = 6));\n  (assert ((candidate [7; 8; 9; 0; 1; 1]) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "(**Write a function to find the surface area of a cylinder.\n*)\nlet surfacearea_cylinder (r : int) (h : int) : float =", "test": "\nlet assertions =\n let candidate = surfacearea_cylinder in\n  (assert ((candidate 10 5) = 942.45));\n  (assert ((candidate 4 5) = 226.18800000000002));\n  (assert ((candidate 4 10) = 351.848));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "(**Write a mlthon function to check whether a list is sublist of another or not.\n*)\nlet is_Sub_Array (A : int list) (B : int list) : bool =", "test": "\nlet assertions =\n let candidate = is_Sub_Array in\n  (assert ((candidate [1; 4; 3; 5] [1; 2]) = false));\n  (assert ((candidate [1; 2; 1] [1; 2; 1]) = true));\n  (assert ((candidate [1; 0; 2; 2] [2; 2; 0]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "(**Write a mlthon function to find the last digit in factorial of a given number.\n*)\nlet last_Digit_Factorial (n : int) : int =", "test": "\nlet assertions =\n let candidate = last_Digit_Factorial in\n  (assert ((candidate 4) = 4));\n  (assert ((candidate 21) = 0));\n  (assert ((candidate 30) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "(**Write a function to interleave 3 lists of the same length into a single flat list.\n*)\nlet interleave_lists (list1 : int list) (list2 : int list) (list3 : int list) : int list =", "test": "\nlet assertions =\n let candidate = interleave_lists in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7] [10; 20; 30; 40; 50; 60; 70] [100; 200; 300; 400; 500; 600; 700]) = [1; 10; 100; 2; 20; 200; 3; 30; 300; 4; 40; 400; 5; 50; 500; 6; 60; 600; 7; 70; 700]));\n  (assert ((candidate [10; 20] [15; 2] [5; 10]) = [10; 15; 5; 20; 2; 10]));\n  (assert ((candidate [11; 44] [10; 15] [20; 5]) = [11; 10; 20; 44; 15; 5]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "(**Write a function to find the dissimilar elements in the given two tuples.\n*)\nlet find_dissimilar (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "test": "\nlet assertions =\n let candidate = find_dissimilar in\n  (assert ((candidate (3, 4, 5, 6) (5, 7, 4, 10)) = (3, 6, 7, 10)));\n  (assert ((candidate (1, 2, 3, 4) (7, 2, 3, 9)) = (1, 4, 7, 9)));\n  (assert ((candidate (21, 11, 25, 26) (26, 34, 21, 36)) = (34, 36, 11, 25)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_581_surface_Area", "prompt": "(**Write a mlthon function to find the surface area of a square mlramid with a given base edge and height.\n*)\nlet surface_Area (b : int) (s : int) : int =", "test": "\nlet assertions =\n let candidate = surface_Area in\n  (assert ((candidate 3 4) = 33));\n  (assert ((candidate 4 5) = 56));\n  (assert ((candidate 1 2) = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_583_catalan_number", "prompt": "(**Write a function which returns nth catalan number.\n*)\nlet catalan_number (num : int) : int =", "test": "\nlet assertions =\n let candidate = catalan_number in\n  (assert ((candidate 10) = 16796));\n  (assert ((candidate 9) = 4862));\n  (assert ((candidate 7) = 429));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "(**Write a function to find the first adverb ending with ly and its positions in a given string.\n*)\nlet find_adverbs (text : string) : string =", "test": "\nlet assertions =\n let candidate = find_adverbs in\n  (assert ((candidate \"Clearly, he has no excuse for such behavior.\") = \"0-7: Clearly\"));\n  (assert ((candidate \"Please handle the situation carefuly\") = \"28-36: carefuly\"));\n  (assert ((candidate \"Complete the task quickly\") = \"18-25: quickly\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_586_split_Arr", "prompt": "(**Write a mlthon function to split a list at the nth eelment and add the first part to the end.\n*)\nlet split_Arr (l : int list) (n : int) : int list =", "test": "\nlet assertions =\n let candidate = split_Arr in\n  (assert ((candidate [12; 10; 5; 6; 52; 36] 2) = [5; 6; 52; 36; 12; 10]));\n  (assert ((candidate [1; 2; 3; 4] 1) = [2; 3; 4; 1]));\n  (assert ((candidate [0; 1; 2; 3; 4; 5; 6; 7] 3) = [3; 4; 5; 6; 7; 0; 1; 2]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_588_big_diff", "prompt": "(**Write a mlthon function to find the difference between largest and smallest value in a given list.\n*)\nlet big_diff (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = big_diff in\n  (assert ((candidate [1; 2; 3; 4]) = 3));\n  (assert ((candidate [4; 5; 12]) = 8));\n  (assert ((candidate [9; 2; 3]) = 7));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "(**Write a function to find perfect squares between two given numbers.\n*)\nlet perfect_squares (a : int) (b : int) : int list =", "test": "\nlet assertions =\n let candidate = perfect_squares in\n  (assert ((candidate 1 30) = [1; 4; 9; 16; 25]));\n  (assert ((candidate 50 100) = [64; 81; 100]));\n  (assert ((candidate 100 200) = [100; 121; 144; 169; 196]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_591_swap_List", "prompt": "(**Write a mlthon function to interchange the first and last elements in a list.\n*)\nlet swap_List (newList : int list) : int list =", "test": "\nlet assertions =\n let candidate = swap_List in\n  (assert ((candidate [12; 35; 9; 56; 24]) = [24; 35; 9; 56; 12]));\n  (assert ((candidate [1; 2; 3]) = [3; 2; 1]));\n  (assert ((candidate [4; 5; 6]) = [6; 5; 4]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "(**Write a mlthon function to find the sum of the product of consecutive binomial co-efficients.\n*)\nlet sum_Of_product (n : int) : int =", "test": "\nlet assertions =\n let candidate = sum_Of_product in\n  (assert ((candidate 3) = 15));\n  (assert ((candidate 4) = 56));\n  (assert ((candidate 1) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "(**Write a function to remove leading zeroes from an ip address.\n*)\nlet removezero_ip (ip : string) : string =", "test": "\nlet assertions =\n let candidate = removezero_ip in\n  (assert ((candidate \"216.08.094.196\") = \"216.8.94.196\"));\n  (assert ((candidate \"12.01.024\") = \"12.1.24\"));\n  (assert ((candidate \"216.08.094.0196\") = \"216.8.94.196\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "(**Write a function to find the difference of the first even and first odd number of a given list.\n*)\nlet diff_even_odd (list1 : int list) : int =", "test": "\nlet assertions =\n let candidate = diff_even_odd in\n  (assert ((candidate [1; 3; 5; 7; 4; 1; 6; 8]) = 3));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = 1));\n  (assert ((candidate [1; 5; 7; 9; 10]) = 9));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_597_find_kth", "prompt": "(**Write a function to find kth element from the given two sorted lists.\n*)\nlet find_kth (arr1 : int list) (arr2 : int list) (k : int) : int =", "test": "\nlet assertions =\n let candidate = find_kth in\n  (assert ((candidate [2; 3; 6; 7; 9] [1; 4; 8; 10] 5) = 6));\n  (assert ((candidate [100; 112; 256; 349; 770] [72; 86; 113; 119; 265; 445; 892] 7) = 256));\n  (assert ((candidate [3; 4; 7; 8; 10] [2; 5; 9; 11] 6) = 8));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "(**Write a function to check whether the given number is armstrong or not.\n*)\nlet armstrong_number (number : int) : bool =", "test": "\nlet assertions =\n let candidate = armstrong_number in\n  (assert ((candidate 153) = true));\n  (assert ((candidate 259) = false));\n  (assert ((candidate 4458) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_599_sum_average", "prompt": "(**Write a function to find sum and average of first n natural numbers.\n*)\nlet sum_average (number : int) :  int * float =", "test": "\nlet assertions =\n let candidate = sum_average in\n  (assert ((candidate 10) = (55, 5.5)));\n  (assert ((candidate 15) = (120, 8.0)));\n  (assert ((candidate 20) = (210, 10.5)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_600_is_Even", "prompt": "(**Write a mlthon function to check whether the given number is even or not.\n*)\nlet is_Even (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_Even in\n  (assert ((candidate 1) = false));\n  (assert ((candidate 2) = true));\n  (assert ((candidate 3) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "(**Write a mlthon function to find the first repeated character in a given string.\n*)\nlet first_repeated_char (str1 : string) : string option =", "test": "\nlet assertions =\n let candidate = first_repeated_char in\n  (assert ((candidate \"abcabc\") = Some(\"a\")));\n  (assert ((candidate \"abc\") = Some(None)));\n  (assert ((candidate \"123123\") = Some(\"1\")));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_603_get_ludic", "prompt": "(**Write a function to get all lucid numbers smaller than or equal to a given integer.\n*)\nlet get_ludic (n : int) : int list =", "test": "\nlet assertions =\n let candidate = get_ludic in\n  (assert ((candidate 10) = [1; 2; 3; 5; 7]));\n  (assert ((candidate 25) = [1; 2; 3; 5; 7; 11; 13; 17; 23; 25]));\n  (assert ((candidate 45) = [1; 2; 3; 5; 7; 11; 13; 17; 23; 25; 29; 37; 41; 43]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_604_reverse_words", "prompt": "(**Write a function to reverse words seperated by spaces in a given string.\n*)\nlet reverse_words (s : string) : string =", "test": "\nlet assertions =\n let candidate = reverse_words in\n  (assert ((candidate \"python program\") = \"program python\"));\n  (assert ((candidate \"java language\") = \"language java\"));\n  (assert ((candidate \"indian man\") = \"man indian\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_605_prime_num", "prompt": "(**Write a function to check if the given integer is a prime number.\n*)\nlet prime_num (num : int) : bool =", "test": "\nlet assertions =\n let candidate = prime_num in\n  (assert ((candidate 13) = true));\n  (assert ((candidate 7) = true));\n  (assert ((candidate (~1010)) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_606_radian_degree", "prompt": "(**Write a function to convert degrees to radians.\n*)\nlet radian_degree (degree : int) : float =", "test": "\nlet assertions =\n let candidate = radian_degree in\n  (assert ((candidate 90) = 1.5707963267948966));\n  (assert ((candidate 60) = 1.0471975511965976));\n  (assert ((candidate 120) = 2.0943951023931953));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_607_find_literals", "prompt": "(**Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n*)\nlet find_literals (text : string) (pattern : string) :  string * int * int =", "test": "\nlet assertions =\n let candidate = find_literals in\n  (assert ((candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") = (\"fox\", 16, 19)));\n  (assert ((candidate \"Its been a very crazy procedure right\" \"crazy\") = (\"crazy\", 16, 21)));\n  (assert ((candidate \"Hardest choices required strongest will\" \"will\") = (\"will\", 35, 39)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_608_bell_Number", "prompt": "(**Write a mlthon function to find nth bell number.\n*)\nlet bell_Number (n : int) : int =", "test": "\nlet assertions =\n let candidate = bell_Number in\n  (assert ((candidate 2) = 2));\n  (assert ((candidate 3) = 5));\n  (assert ((candidate 4) = 15));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "(**Write a mlthon function which takes a list and returns a list with the same elements, but the k'th element removed.\n*)\nlet remove_kth_element (list1 : int list) (L : int) : int list =", "test": "\nlet assertions =\n let candidate = remove_kth_element in\n  (assert ((candidate [1; 1; 2; 3; 4; 4; 5; 1] 3) = [1; 1; 3; 4; 4; 5; 1]));\n  (assert ((candidate [0; 0; 1; 2; 3; 4; 4; 5; 6; 6; 6; 7; 8; 9; 4; 4] 4) = [0; 0; 1; 3; 4; 4; 5; 6; 6; 6; 7; 8; 9; 4; 4]));\n  (assert ((candidate [10; 10; 15; 19; 18; 18; 17; 26; 26; 17; 18; 10] 5) = [10; 10; 15; 19; 18; 17; 26; 26; 17; 18; 10]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "(**Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n*)\nlet max_of_nth (test_list : int list list) (N : int) : int =", "test": "\nlet assertions =\n let candidate = max_of_nth in\n  (assert ((candidate [[5; 6; 7]; [1; 3; 5]; [8; 9; 19]] 2) = 19));\n  (assert ((candidate [[6; 7; 8]; [2; 4; 6]; [9; 10; 20]] 1) = 10));\n  (assert ((candidate [[7; 8; 9]; [3; 5; 7]; [10; 11; 21]] 1) = 11));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "(**Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n*)\nlet cummulative_sum (test_list : int list list) : int =", "test": "\nlet assertions =\n let candidate = cummulative_sum in\n  (assert ((candidate [[1; 3]; [5; 6; 7]; [2; 6]]) = 30));\n  (assert ((candidate [[2; 4]; [6; 7; 8]; [3; 7]]) = 37));\n  (assert ((candidate [[3; 5]; [7; 8; 9]; [4; 8]]) = 44));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_615_average_tuple", "prompt": "(**Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n*)\nlet average_tuple (nums : int list list) : float list =", "test": "\nlet assertions =\n let candidate = average_tuple in\n  (assert ((candidate [[10; 10; 10; 12]; [30; 45; 56; 45]; [81; 80; 39; 32]; [1; 2; 3; 4]]) = [30.5; 34.25; 27.0; 23.25]));\n  (assert ((candidate [[1; 1; (~5)]; [30; (~15); 56]; [81; (~60); (~39)]; [(~10); 2; 3]]) = [25.5; -18.0; 3.75]));\n  (assert ((candidate [[100; 100; 100; 120]; [300; 450; 560; 450]; [810; 800; 390; 320]; [10; 20; 30; 40]]) = [305.0; 342.5; 270.0; 232.5]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "(**Write a function which takes two tuples of the same length and performs the element wise modulo.\n*)\nlet tuple_modulo (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "test": "\nlet assertions =\n let candidate = tuple_modulo in\n  (assert ((candidate (10, 4, 5, 6) (5, 6, 7, 5)) = (0, 4, 5, 1)));\n  (assert ((candidate (11, 5, 6, 7) (6, 7, 8, 6)) = (5, 5, 6, 1)));\n  (assert ((candidate (12, 6, 7, 8) (7, 8, 9, 7)) = (5, 6, 7, 1)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "(**Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n*)\nlet min_Jumps (steps :  int * int) (d : int) : float =", "test": "\nlet assertions =\n let candidate = min_Jumps in\n  (assert ((candidate (3, 4) 11) = 3.5));\n  (assert ((candidate (3, 4) 0) = 0.0));\n  (assert ((candidate (11, 14) 11) = 1.0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_618_div_list", "prompt": "(**Write a function to divide two lists element wise.\n*)\nlet div_list (nums1 : int list) (nums2 : int list) : float list =", "test": "\nlet assertions =\n let candidate = div_list in\n  (assert ((candidate [4; 5; 6] [1; 2; 3]) = [4.0; 2.5; 2.0]));\n  (assert ((candidate [3; 2] [1; 4]) = [3.0; 0.5]));\n  (assert ((candidate [90; 120] [50; 70]) = [1.8; 1.7142857142857142]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_619_move_num", "prompt": "(**Write a function to move all the numbers to the end of the given string.\n*)\nlet move_num (test_str : string) : string =", "test": "\nlet assertions =\n let candidate = move_num in\n  (assert ((candidate \"I1love143you55three3000thousand\") = \"Iloveyouthreethousand1143553000\"));\n  (assert ((candidate \"Avengers124Assemble\") = \"AvengersAssemble124\"));\n  (assert ((candidate \"Its11our12path13to14see15things16do17things\") = \"Itsourpathtoseethingsdothings11121314151617\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_622_get_median", "prompt": "(**Write a function to find the median of two sorted lists of same size.\n*)\nlet get_median (arr1 : int list) (arr2 : int list) (n : int) : float =", "test": "\nlet assertions =\n let candidate = get_median in\n  (assert ((candidate [1; 12; 15; 26; 38] [2; 13; 17; 30; 45] 5) = 16.0));\n  (assert ((candidate [2; 4; 8; 9] [7; 13; 19; 28] 4) = 8.5));\n  (assert ((candidate [3; 6; 14; 23; 36; 42] [2; 18; 27; 39; 49; 55] 6) = 25.0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_623_nth_nums", "prompt": "(**Write a function to compute the n-th power of each number in a list.\n*)\nlet nth_nums (nums : int list) (n : int) : int list =", "test": "\nlet assertions =\n let candidate = nth_nums in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 2) = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]));\n  (assert ((candidate [10; 20; 30] 3) = [1000; 8000; 27000]));\n  (assert ((candidate [12; 15] 5) = [248832; 759375]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_624_is_upper", "prompt": "(**Write a mlthon function to convert a given string to uppercase.\n*)\nlet is_upper (string : string) : string =", "test": "\nlet assertions =\n let candidate = is_upper in\n  (assert ((candidate \"person\") = \"PERSON\"));\n  (assert ((candidate \"final\") = \"FINAL\"));\n  (assert ((candidate \"Valid\") = \"VALID\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_625_swap_List", "prompt": "(**Write a mlthon function to interchange the first and last element in a given list.\n*)\nlet swap_List (newList : int list) : int list =", "test": "\nlet assertions =\n let candidate = swap_List in\n  (assert ((candidate [1; 2; 3]) = [3; 2; 1]));\n  (assert ((candidate [1; 2; 3; 4; 4]) = [4; 2; 3; 4; 1]));\n  (assert ((candidate [4; 5; 6]) = [6; 5; 4]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_626_triangle_area", "prompt": "(**Write a mlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n*)\nlet triangle_area (r : int) : int option =", "test": "\nlet assertions =\n let candidate = triangle_area in\n  (assert ((candidate (~1)) = Some(None)));\n  (assert ((candidate 0) = Some(0)));\n  (assert ((candidate 2) = Some(4)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "(**Write a mlthon function to find the smallest missing number from a sorted list of natural numbers.\n*)\nlet find_First_Missing (array : int list) : int =", "test": "\nlet assertions =\n let candidate = find_First_Missing in\n  (assert ((candidate [0; 1; 2; 3]) = 4));\n  (assert ((candidate [0; 1; 2; 6; 9]) = 3));\n  (assert ((candidate [2; 3; 5; 8; 9]) = 0));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "(**Write a function to replace all spaces in the given string with '%20'.\n*)\nlet replace_spaces (string : string) : string =", "test": "\nlet assertions =\n let candidate = replace_spaces in\n  (assert ((candidate \"My Name is Dawood\") = \"My%20Name%20is%20Dawood\"));\n  (assert ((candidate \"I am a Programmer\") = \"I%20am%20a%20Programmer\"));\n  (assert ((candidate \"I love Coding\") = \"I%20love%20Coding\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_629_Split", "prompt": "(**Write a mlthon function to find even numbers from a list of numbers.\n*)\nlet Split (list : int list) : int list =", "test": "\nlet assertions =\n let candidate = Split in\n  (assert ((candidate [1; 2; 3; 4; 5]) = [2; 4]));\n  (assert ((candidate [4; 5; 6; 7; 8; 0; 1]) = [4; 6; 8; 0]));\n  (assert ((candidate [8; 12; 15; 19]) = [8; 12]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "(**Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n*)\nlet get_coordinates (test_tup :  int * int) : int list list =", "test": "\nlet assertions =\n let candidate = get_coordinates in\n  (assert ((candidate (3, 4)) = [[2; 3]; [2; 4]; [2; 5]; [3; 3]; [3; 4]; [3; 5]; [4; 3]; [4; 4]; [4; 5]]));\n  (assert ((candidate (4, 5)) = [[3; 4]; [3; 5]; [3; 6]; [4; 4]; [4; 5]; [4; 6]; [5; 4]; [5; 5]; [5; 6]]));\n  (assert ((candidate (5, 6)) = [[4; 5]; [4; 6]; [4; 7]; [5; 5]; [5; 6]; [5; 7]; [6; 5]; [6; 6]; [6; 7]]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "(**Write a function to replace whitespaces with an underscore and vice versa in a given string.\n*)\nlet replace_spaces (text : string) : string =", "test": "\nlet assertions =\n let candidate = replace_spaces in\n  (assert ((candidate \"Jumanji The Jungle\") = \"Jumanji_The_Jungle\"));\n  (assert ((candidate \"The_Avengers\") = \"The Avengers\"));\n  (assert ((candidate \"Fast and Furious\") = \"Fast_and_Furious\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_632_move_zero", "prompt": "(**Write a mlthon function to move all zeroes to the end of the given list.\n*)\nlet move_zero (num_list : int list) : int list =", "test": "\nlet assertions =\n let candidate = move_zero in\n  (assert ((candidate [1; 0; 2; 0; 3; 4]) = [1; 2; 3; 4; 0; 0]));\n  (assert ((candidate [2; 3; 2; 0; 0; 4; 0; 5; 0]) = [2; 3; 2; 4; 5; 0; 0; 0; 0]));\n  (assert ((candidate [0; 1; 0; 1; 1]) = [1; 1; 1; 0; 0]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "(**Write a mlthon function to find the sum of xor of all pairs of numbers in the given list.\n*)\nlet pair_xor_Sum (arr : int list) (n : int) : int =", "test": "\nlet assertions =\n let candidate = pair_xor_Sum in\n  (assert ((candidate [5; 9; 7; 6] 4) = 47));\n  (assert ((candidate [7; 3; 5] 3) = 12));\n  (assert ((candidate [7; 3] 2) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_635_heap_sort", "prompt": "(**Write a function to sort the given list.\n*)\nlet heap_sort (iterable : int list) : int list =", "test": "\nlet assertions =\n let candidate = heap_sort in\n  (assert ((candidate [1; 3; 5; 7; 9; 2; 4; 6; 8; 0]) = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]));\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 25; 58]) = [14; 22; 25; 25; 35; 58; 65; 75; 85]));\n  (assert ((candidate [7; 1; 9; 5]) = [1; 5; 7; 9]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "(**Write a function to check whether the given amount has no profit and no loss\n*)\nlet noprofit_noloss (actual_cost : int) (sale_amount : int) : bool =", "test": "\nlet assertions =\n let candidate = noprofit_noloss in\n  (assert ((candidate 1500 1200) = false));\n  (assert ((candidate 100 100) = true));\n  (assert ((candidate 2000 5000) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_638_wind_chill", "prompt": "(**Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n*)\nlet wind_chill (v : int) (t : int) : int =", "test": "\nlet assertions =\n let candidate = wind_chill in\n  (assert ((candidate 120 35) = 40));\n  (assert ((candidate 40 20) = 19));\n  (assert ((candidate 10 8) = 6));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_639_sample_nam", "prompt": "(**Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n*)\nlet sample_nam (sample_names : string list) : int =", "test": "\nlet assertions =\n let candidate = sample_nam in\n  (assert ((candidate [\"sally\"; \"Dylan\"; \"rebecca\"; \"Diana\"; \"Joanne\"; \"keith\"]) = 16));\n  (assert ((candidate [\"php\"; \"res\"; \"Python\"; \"abcd\"; \"Java\"; \"aaa\"]) = 10));\n  (assert ((candidate [\"abcd\"; \"Python\"; \"abba\"; \"aba\"]) = 6));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "(**Write a function to remove the parenthesis and what is inbetween them from a string.\n*)\nlet remove_parenthesis (items : string list) : string =", "test": "\nlet assertions =\n let candidate = remove_parenthesis in\n  (assert ((candidate [\"python (chrome)\"]) = \"python\"));\n  (assert ((candidate [\"string(.abc)\"]) = \"string\"));\n  (assert ((candidate [\"alpha(num)\"]) = \"alpha\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "(**Write a function to find the nth nonagonal number.\n*)\nlet is_nonagonal (n : int) : int =", "test": "\nlet assertions =\n let candidate = is_nonagonal in\n  (assert ((candidate 10) = 325));\n  (assert ((candidate 15) = 750));\n  (assert ((candidate 18) = 1089));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "(**Write a function that checks if a strings contains 'z', except at the start and end of the word.\n*)\nlet text_match_wordz_middle (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_match_wordz_middle in\n  (assert ((candidate \"pythonzabc.\") = true));\n  (assert ((candidate \"zxyabc.\") = false));\n  (assert ((candidate \"  lang  .\") = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "(**Write a mlthon function to reverse a list upto a given position.\n*)\nlet reverse_Array_Upto_K (input : int list) (k : int) : int list =", "test": "\nlet assertions =\n let candidate = reverse_Array_Upto_K in\n  (assert ((candidate [1; 2; 3; 4; 5; 6] 4) = [4; 3; 2; 1; 5; 6]));\n  (assert ((candidate [4; 5; 6; 7] 2) = [5; 4; 6; 7]));\n  (assert ((candidate [9; 8; 7; 6; 5] 3) = [7; 8; 9; 6; 5]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "(**Write a function to add an association list to the tuple. The output should be a tuple.\n*)\nlet add_dict_to_tuple (test_tup :  int * int * int) (test_dict : (string, int) list) :  int * int * int * (string, int) list =", "test": "\nlet assertions =\n let candidate = add_dict_to_tuple in\n  (assert ((candidate (4, 5, 6) [(\"MSAM\", 1); (\"is\", 2); (\"best\", 3)]) = (4, 5, 6, [(\"MSAM\", 1); (\"is\", 2); (\"best\", 3)])));\n  (assert ((candidate (1, 2, 3) [(\"UTS\", 2); (\"is\", 3); (\"Worst\", 4)]) = (1, 2, 3, [(\"UTS\", 2); (\"is\", 3); (\"Worst\", 4)])));\n  (assert ((candidate (8, 9, 10) [(\"POS\", 3); (\"is\", 4); (\"Okay\", 5)]) = (8, 9, 10, [(\"POS\", 3); (\"is\", 4); (\"Okay\", 5)])));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "(**Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n*)\nlet maxAverageOfPath (cost : int list list) : float =", "test": "\nlet assertions =\n let candidate = maxAverageOfPath in\n  (assert ((candidate [[1; 2; 3]; [6; 5; 4]; [7; 3; 9]]) = 5.2));\n  (assert ((candidate [[2; 3; 4]; [7; 6; 5]; [8; 4; 10]]) = 6.2));\n  (assert ((candidate [[3; 4; 5]; [8; 7; 6]; [9; 5; 11]]) = 7.2));\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]]) = 5.8));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "(**The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n*)\nlet count_same_pair (nums1 : int list) (nums2 : int list) : int =", "test": "\nlet assertions =\n let candidate = count_same_pair in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 9]) = 4));\n  (assert ((candidate [0; 1; 2; (~1); (~5); 6; 0; (~3); (~2); 3; 4; 6; 8] [2; 1; 2; (~1); (~5); 6; 4; (~3); (~2); 3; 4; 6; 8]) = 11));\n  (assert ((candidate [2; 4; (~6); (~9); 11; (~12); 14; (~5); 17] [2; 1; 2; (~1); (~5); 6; 4; (~3); (~2); 3; 4; 6; 8]) = 1));\n  (assert ((candidate [0; 1; 1; 2] [0; 1; 2; 2]) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "(**Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n*)\nlet power_base_sum (base : int) (power : int) : int =", "test": "\nlet assertions =\n let candidate = power_base_sum in\n  (assert ((candidate 2 100) = 115));\n  (assert ((candidate 8 10) = 37));\n  (assert ((candidate 8 15) = 62));\n  (assert ((candidate 3 3) = 9));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_728_sum_list", "prompt": "(**Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n*)\nlet sum_list (lst1 : int list) (lst2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = sum_list in\n  (assert ((candidate [10; 20; 30] [15; 25; 35]) = [25; 45; 65]));\n  (assert ((candidate [1; 2; 3] [5; 6; 7]) = [6; 8; 10]));\n  (assert ((candidate [15; 20; 30] [15; 45; 75]) = [30; 65; 105]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "(**Write a function to find the lateral surface area of a cone given radius r and the height h.\n*)\nlet lateralsurface_cone (r : int) (h : int) : float =", "test": "\nlet assertions =\n let candidate = lateralsurface_cone in\n  (assert ((candidate 5 12) = 204.20352248333654));\n  (assert ((candidate 10 15) = 566.3586699569488));\n  (assert ((candidate 19 17) = 1521.8090132193388));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "(**Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n*)\nlet replace_specialchar (text : string) : string =", "test": "\nlet assertions =\n let candidate = replace_specialchar in\n  (assert ((candidate \"Python language, Programming language.\") = \"Python:language::Programming:language:\"));\n  (assert ((candidate \"a b c,d e f\") = \"a:b:c:d:e:f\"));\n  (assert ((candidate \"ram reshma,ram rahim\") = \"ram:reshma:ram:rahim\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "(**Write a function to find the index of the first occurrence of a given number in a sorted list.\n*)\nlet find_first_occurrence (A : int list) (x : int) : int =", "test": "\nlet assertions =\n let candidate = find_first_occurrence in\n  (assert ((candidate [2; 5; 5; 5; 6; 6; 8; 9; 9; 9] 5) = 1));\n  (assert ((candidate [2; 3; 5; 5; 6; 6; 8; 9; 9; 9] 5) = 2));\n  (assert ((candidate [2; 4; 1; 5; 6; 6; 8; 9; 9; 9] 6) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "(**Write a mlthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n*)\nlet sum_Of_Subarray_Prod (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = sum_Of_Subarray_Prod in\n  (assert ((candidate [1; 2; 3]) = 20));\n  (assert ((candidate [1; 2]) = 5));\n  (assert ((candidate [1; 2; 3; 4]) = 84));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "(**Write a mlthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n*)\nlet toggle_middle_bits (n : int) : int =", "test": "\nlet assertions =\n let candidate = toggle_middle_bits in\n  (assert ((candidate 9) = 15));\n  (assert ((candidate 10) = 12));\n  (assert ((candidate 11) = 13));\n  (assert ((candidate 65) = 127));\n  (assert ((candidate 77) = 115));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_736_left_insertion", "prompt": "(**Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/mlthon-exercises/data-structures-and-algorithms/mlthon-data-structure-exercise-24.php\n*)\nlet left_insertion (a : int list) (x : int) : int =", "test": "\nlet assertions =\n let candidate = left_insertion in\n  (assert ((candidate [1; 2; 4; 5] 6) = 4));\n  (assert ((candidate [1; 2; 4; 5] 3) = 2));\n  (assert ((candidate [1; 2; 4; 5] 7) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_737_check_str", "prompt": "(**Write a function to check whether the given string is starting with a vowel or not using regex.\n*)\nlet check_str (string : string) : bool =", "test": "\nlet assertions =\n let candidate = check_str in\n  (assert ((candidate \"annie\") = true));\n  (assert ((candidate \"dawood\") = false));\n  (assert ((candidate \"Else\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "(**Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/mlthon-exercises/data-structures-and-algorithms/mlthon-recursion-exercise-9.php\n*)\nlet geometric_sum (n : int) : float =", "test": "\nlet assertions =\n let candidate = geometric_sum in\n  (assert ((candidate 7) = 1.9921875));\n  (assert ((candidate 4) = 1.9375));\n  (assert ((candidate 8) = 1.99609375));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_739_find_Index", "prompt": "(**Write a mlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n*)\nlet find_Index (n : int) : int =", "test": "\nlet assertions =\n let candidate = find_Index in\n  (assert ((candidate 2) = 4));\n  (assert ((candidate 3) = 14));\n  (assert ((candidate 4) = 45));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "(**Write a function to convert the given tuple to a key-value association list using adjacent elements. https://www.geeksforgeeks.org/mlthon-convert-tuple-to-adjacent-pair-association list/\n*)\nlet tuple_to_dict (test_tup :  int * int * int * int * int * int) : (int, int) list =", "test": "\nlet assertions =\n let candidate = tuple_to_dict in\n  (assert ((candidate (1, 5, 7, 10, 13, 5)) = [(1, 5); (7, 10); (13, 5)]));\n  (assert ((candidate (1, 2, 3, 4, 5, 6)) = [(1, 2); (3, 4); (5, 6)]));\n  (assert ((candidate (7, 8, 9, 10, 11, 12)) = [(7, 8); (9, 10); (11, 12)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "(**Write a mlthon function to check whether all the characters are same or not.\n*)\nlet all_Characters_Same (s : string) : bool =", "test": "\nlet assertions =\n let candidate = all_Characters_Same in\n  (assert ((candidate \"python\") = false));\n  (assert ((candidate \"aaa\") = true));\n  (assert ((candidate \"data\") = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "(**Write a function to caluclate the area of a tetrahedron.\n*)\nlet area_tetrahedron (side : int) : float =", "test": "\nlet assertions =\n let candidate = area_tetrahedron in\n  (assert ((candidate 3) = 15.588457268119894));\n  (assert ((candidate 20) = 692.8203230275509));\n  (assert ((candidate 10) = 173.20508075688772));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_743_rotate_right", "prompt": "(**Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/mlthon-program-right-rotate-list-n/\n*)\nlet rotate_right (list : int list) (m : int) : int list =", "test": "\nlet assertions =\n let candidate = rotate_right in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 3) = [8; 9; 10; 1; 2; 3; 4; 5; 6; 7]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 2) = [9; 10; 1; 2; 3; 4; 5; 6; 7; 8]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 5) = [6; 7; 8; 9; 10; 1; 2; 3; 4; 5]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "(**Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/mlthon-exercises/lambda/mlthon-lambda-exercise-24.php\n*)\nlet divisible_by_digits (startnum : int) (endnum : int) : int list =", "test": "\nlet assertions =\n let candidate = divisible_by_digits in\n  (assert ((candidate 1 22) = [1; 2; 3; 4; 5; 6; 7; 8; 9; 11; 12; 15; 22]));\n  (assert ((candidate 1 15) = [1; 2; 3; 4; 5; 6; 7; 8; 9; 11; 12; 15]));\n  (assert ((candidate 20 25) = [22; 24]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_746_sector_area", "prompt": "(**Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n*)\nlet sector_area (r : int) (a : int) : float option =", "test": "\nlet assertions =\n let candidate = sector_area in\n  (assert ((candidate 4 45) = Some(6.283185307179586)));\n  (assert ((candidate 9 45) = Some(31.808625617596654)));\n  (assert ((candidate 9 361) = Some(None)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "(**Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n*)\nlet lcs_of_three (X : string) (Y : string) (Z : string) : int =", "test": "\nlet assertions =\n let candidate = lcs_of_three in\n  (assert ((candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") = 2));\n  (assert ((candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") = 5));\n  (assert ((candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "(**Write a function to put spaces between words starting with capital letters in a given string.\n*)\nlet capital_words_spaces (str1 : string) : string =", "test": "\nlet assertions =\n let candidate = capital_words_spaces in\n  (assert ((candidate \"Python\") = \"Python\"));\n  (assert ((candidate \"PythonProgrammingExamples\") = \"Python Programming Examples\"));\n  (assert ((candidate \"GetReadyToBeCodingFreak\") = \"Get Ready To Be Coding Freak\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "(**Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/mlthon-sort-numeric-strings-in-a-list/\n*)\nlet sort_numeric_strings (nums_str : string list) : int list =", "test": "\nlet assertions =\n let candidate = sort_numeric_strings in\n  (assert ((candidate [\"4\"; \"12\"; \"45\"; \"7\"; \"0\"; \"100\"; \"200\"; \"-12\"; \"-500\"]) = [(~500); (~12); 0; 4; 7; 12; 45; 100; 200]));\n  (assert ((candidate [\"2\"; \"3\"; \"8\"; \"4\"; \"7\"; \"9\"; \"8\"; \"2\"; \"6\"; \"5\"; \"1\"; \"6\"; \"1\"; \"2\"; \"3\"; \"4\"; \"6\"; \"9\"; \"1\"; \"2\"]) = [1; 1; 1; 2; 2; 2; 2; 3; 3; 4; 4; 5; 6; 6; 6; 7; 8; 8; 9; 9]));\n  (assert ((candidate [\"1\"; \"3\"; \"5\"; \"7\"; \"1\"; \"3\"; \"13\"; \"15\"; \"17\"; \"5\"; \"7 \"; \"9\"; \"1\"; \"11\"]) = [1; 1; 1; 3; 3; 5; 5; 7; 7; 9; 11; 13; 15; 17]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_750_add_tuple", "prompt": "(**Write a function to add the given tuple to the given list.\n*)\nlet add_tuple (test_list : int list) (test_tup :  int * int) : int list =", "test": "\nlet assertions =\n let candidate = add_tuple in\n  (assert ((candidate [5; 6; 7] (9, 10)) = [5; 6; 7; 9; 10]));\n  (assert ((candidate [6; 7; 8] (10, 11)) = [6; 7; 8; 10; 11]));\n  (assert ((candidate [7; 8; 9] (11, 12)) = [7; 8; 9; 11; 12]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "(**Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n*)\nlet check_min_heap (arr : int list) : bool =", "test": "\nlet assertions =\n let candidate = check_min_heap in\n  (assert ((candidate [1; 2; 3; 4; 5; 6]) = true));\n  (assert ((candidate [2; 3; 4; 5; 10; 15]) = true));\n  (assert ((candidate [2; 10; 4; 5; 3; 15]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "(**Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n*)\nlet jacobsthal_num (n : int) : int =", "test": "\nlet assertions =\n let candidate = jacobsthal_num in\n  (assert ((candidate 5) = 11));\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 4) = 5));\n  (assert ((candidate 13) = 2731));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_753_min_k", "prompt": "(**Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/mlthon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coml of test cases\n*)\nlet min_k (test_list :  string * int list) (K : int) :  string * int list =", "test": "\nlet assertions =\n let candidate = min_k in\n  (assert ((candidate [(\"Manjeet\", 10); (\"Akshat\", 4); (\"Akash\", 2); (\"Nikhil\", 8)] 2) = [(\"Akash\", 2); (\"Akshat\", 4)]));\n  (assert ((candidate [(\"Sanjeev\", 11); (\"Angat\", 5); (\"Akash\", 3); (\"Nepin\", 9)] 3) = [(\"Akash\", 3); (\"Angat\", 5); (\"Nepin\", 9)]));\n  (assert ((candidate [(\"tanmay\", 14); (\"Amer\", 11); (\"Ayesha\", 9); (\"SKD\", 16)] 1) = [(\"Ayesha\", 9)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "(**Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/mlthon-exercises/re/mlthon-re-exercise-3.php\n*)\nlet text_match_zero_one (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_match_zero_one in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abbbba\") = true));\n  (assert ((candidate \"dsabbbba\") = true));\n  (assert ((candidate \"asbbbba\") = false));\n  (assert ((candidate \"abaaa\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "(**Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/mlthon-program-to-count-the-pairs-of-reverse-strings/\n*)\nlet count_reverse_pairs (test_list : string list) : int =", "test": "\nlet assertions =\n let candidate = count_reverse_pairs in\n  (assert ((candidate [\"julia\"; \"best\"; \"tseb\"; \"for\"; \"ailuj\"]) = 2));\n  (assert ((candidate [\"geeks\"; \"best\"; \"for\"; \"skeeg\"]) = 1));\n  (assert ((candidate [\"makes\"; \"best\"; \"sekam\"; \"for\"; \"rof\"]) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_759_is_decimal", "prompt": "(**Write a function to check whether a given string is a decimal number with a precision of 2.\n*)\nlet is_decimal (num : string) : bool =", "test": "\nlet assertions =\n let candidate = is_decimal in\n  (assert ((candidate \"123.11\") = true));\n  (assert ((candidate \"e666.86\") = false));\n  (assert ((candidate \"3.124587\") = false));\n  (assert ((candidate \"1.11\") = true));\n  (assert ((candidate \"1.1.11\") = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_760_unique_Element", "prompt": "(**Write a mlthon function to check whether a list of numbers contains only one distinct element or not.\n*)\nlet unique_Element (arr : int list) : bool =", "test": "\nlet assertions =\n let candidate = unique_Element in\n  (assert ((candidate [1; 1; 1]) = true));\n  (assert ((candidate [1; 2; 1; 2]) = false));\n  (assert ((candidate [1; 2; 3; 4; 5]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "(**Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n*)\nlet check_monthnumber_number (monthnum3 : int) : bool =", "test": "\nlet assertions =\n let candidate = check_monthnumber_number in\n  (assert ((candidate 6) = true));\n  (assert ((candidate 2) = false));\n  (assert ((candidate 12) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "(**Write a mlthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n*)\nlet find_min_diff (arr : int list) (n : int) : int =", "test": "\nlet assertions =\n let candidate = find_min_diff in\n  (assert ((candidate [1; 5; 3; 19; 18; 25] 6) = 1));\n  (assert ((candidate [4; 3; 2; 6] 4) = 1));\n  (assert ((candidate [30; 5; 20; 9] 4) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_764_number_ctr", "prompt": "(**Write a mlthon function to count number of digits in a given string.\n*)\nlet number_ctr (str : string) : int =", "test": "\nlet assertions =\n let candidate = number_ctr in\n  (assert ((candidate \"program2bedone\") = 1));\n  (assert ((candidate \"3wonders\") = 1));\n  (assert ((candidate \"123\") = 3));\n  (assert ((candidate \"3wond-1ers2\") = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_765_is_polite", "prompt": "(**Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n*)\nlet is_polite (n : int) : int =", "test": "\nlet assertions =\n let candidate = is_polite in\n  (assert ((candidate 7) = 11));\n  (assert ((candidate 4) = 7));\n  (assert ((candidate 9) = 13));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_766_pair_wise", "prompt": "(**Write a function to return a list of all pairs of consecutive items in a given list.\n*)\nlet pair_wise (l1 : int list) :  int * int list =", "test": "\nlet assertions =\n let candidate = pair_wise in\n  (assert ((candidate [1; 1; 2; 3; 3; 4; 4; 5]) = [(1, 1); (1, 2); (2, 3); (3, 3); (3, 4); (4, 4); (4, 5)]));\n  (assert ((candidate [1; 5; 7; 9; 10]) = [(1, 5); (5, 7); (7, 9); (9, 10)]));\n  (assert ((candidate [5; 1; 9; 7; 10]) = [(5, 1); (1, 9); (9, 7); (7, 10)]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [(1, 2); (2, 3); (3, 4); (4, 5); (5, 6); (6, 7); (7, 8); (8, 9); (9, 10)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "(**Write a mlthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n*)\nlet get_pairs_count (arr : int list) (sum : int) : int =", "test": "\nlet assertions =\n let candidate = get_pairs_count in\n  (assert ((candidate [1; 1; 1; 1] 2) = 6));\n  (assert ((candidate [1; 5; 7; (~1); 5] 6) = 3));\n  (assert ((candidate [1; (~2); 3] 1) = 1));\n  (assert ((candidate [(~1); (~2); 3] (~3)) = 1));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_769_Diff", "prompt": "(**Write a mlthon function to get the difference between two lists.\n*)\nlet Diff (li1 : int list) (li2 : int list) : int list =", "test": "\nlet assertions =\n let candidate = Diff in\n  (assert ((candidate [10; 15; 20; 25; 30; 35; 40] [25; 40; 35]) = [10; 20; 30; 15]));\n  (assert ((candidate [1; 2; 3; 4; 5] [6; 7; 1]) = [2; 3; 4; 5; 6; 7]));\n  (assert ((candidate [1; 2; 3] [6; 7; 1]) = [2; 3; 6; 7]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "(**Write a mlthon function to find the sum of fourth power of first n odd natural numbers.\n*)\nlet odd_num_sum (n : int) : int =", "test": "\nlet assertions =\n let candidate = odd_num_sum in\n  (assert ((candidate 2) = 82));\n  (assert ((candidate 3) = 707));\n  (assert ((candidate 4) = 3108));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_771_check_expression", "prompt": "(**Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n*)\nlet check_expression (exp : string) : bool =", "test": "\nlet assertions =\n let candidate = check_expression in\n  (assert ((candidate \"{()}[{}]\") = true));\n  (assert ((candidate \"{()}[{]\") = false));\n  (assert ((candidate \"{()}[{}][]({})\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_772_remove_length", "prompt": "(**Write a function to remove all the words with k length in the given string.\n*)\nlet remove_length (test_str : string) (K : int) : string =", "test": "\nlet assertions =\n let candidate = remove_length in\n  (assert ((candidate \"The person is most value tet\" 3) = \"person is most value\"));\n  (assert ((candidate \"If you told me about this ok\" 4) = \"If you me about ok\"));\n  (assert ((candidate \"Forces of darkeness is come into the play\" 4) = \"Forces of darkeness is the\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "(**Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n*)\nlet occurance_substring (text : string) (pattern : string) :  string * int * int option =", "test": "\nlet assertions =\n let candidate = occurance_substring in\n  (assert ((candidate \"python programming, python language\" \"python\") = Some((\"python\", 0, 6))));\n  (assert ((candidate \"python programming,programming language\" \"programming\") = Some((\"programming\", 7, 18))));\n  (assert ((candidate \"python programming,programming language\" \"language\") = Some((\"language\", 31, 39))));\n  (assert ((candidate \"c++ programming, c++ language\" \"python\") = Some(None)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_775_odd_position", "prompt": "(**Write a mlthon function to check whether every odd index contains odd numbers of a given list.\n*)\nlet odd_position (nums : int list) : bool =", "test": "\nlet assertions =\n let candidate = odd_position in\n  (assert ((candidate [2; 1; 4; 3; 6; 7; 6; 3]) = true));\n  (assert ((candidate [4; 1; 2]) = true));\n  (assert ((candidate [1; 2; 3]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_776_count_vowels", "prompt": "(**Write a function to count those characters which have vowels as their neighbors in the given string.\n*)\nlet count_vowels (test_str : string) : int =", "test": "\nlet assertions =\n let candidate = count_vowels in\n  (assert ((candidate \"bestinstareels\") = 7));\n  (assert ((candidate \"partofthejourneyistheend\") = 12));\n  (assert ((candidate \"amazonprime\") = 5));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_777_find_sum", "prompt": "(**Write a mlthon function to find the sum of non-repeated elements in a given list.\n*)\nlet find_sum (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = find_sum in\n  (assert ((candidate [1; 2; 3; 1; 1; 4; 5; 6]) = 21));\n  (assert ((candidate [1; 10; 9; 4; 2; 10; 10; 45; 4]) = 71));\n  (assert ((candidate [12; 10; 9; 45; 2; 10; 10; 45; 10]) = 78));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_780_find_combinations", "prompt": "(**Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/mlthon-combinations-of-sum-with-tuples-in-tuple-list/\n*)\nlet find_combinations (test_list :  int * int list) :  int * int list =", "test": "\nlet assertions =\n let candidate = find_combinations in\n  (assert ((candidate [(2, 4); (6, 7); (5, 1); (6, 10)]) = [(8, 11); (7, 5); (8, 14); (11, 8); (12, 17); (11, 11)]));\n  (assert ((candidate [(3, 5); (7, 8); (6, 2); (7, 11)]) = [(10, 13); (9, 7); (10, 16); (13, 10); (14, 19); (13, 13)]));\n  (assert ((candidate [(4, 6); (8, 9); (7, 3); (8, 12)]) = [(12, 15); (11, 9); (12, 18); (15, 12); (16, 21); (15, 15)]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_781_count_divisors", "prompt": "(**Write a mlthon function to check whether the count of divisors is even. https://www.w3resource.com/mlthon-exercises/basic/mlthon-basic-1-exercise-24.php\n*)\nlet count_divisors (n : int) : bool =", "test": "\nlet assertions =\n let candidate = count_divisors in\n  (assert ((candidate 10) = true));\n  (assert ((candidate 100) = false));\n  (assert ((candidate 125) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "(**Write a mlthon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n*)\nlet odd_length_sum (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = odd_length_sum in\n  (assert ((candidate [1; 2; 4]) = 14));\n  (assert ((candidate [1; 2; 1; 2]) = 15));\n  (assert ((candidate [1; 7]) = 8));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "(**Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n*)\nlet rgb_to_hsv (r : int) (g : int) (b : int) : float list =", "test": "\nlet assertions =\n let candidate = rgb_to_hsv in\n  (assert ((candidate 255 255 255) = [0.0; 0.0; 100.0]));\n  (assert ((candidate 0 215 0) = [120.0; 100.0; 84.31372549019608]));\n  (assert ((candidate 10 215 110) = [149.26829268292684; 95.34883720930233; 84.31372549019608]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "(**Write a function to find the product of first even and odd number of a given list.\n*)\nlet mul_even_odd (list1 : int list) : int =", "test": "\nlet assertions =\n let candidate = mul_even_odd in\n  (assert ((candidate [1; 3; 5; 7; 4; 1; 6; 8]) = 4));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = 2));\n  (assert ((candidate [1; 5; 7; 9; 10]) = 10));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "(**Write a function to convert tuple string to integer tuple.\n*)\nlet tuple_str_int (test_str : string) :  int * int * int =", "test": "\nlet assertions =\n let candidate = tuple_str_int in\n  (assert ((candidate \"(7, 8, 9)\") = (7, 8, 9)));\n  (assert ((candidate \"(1, 2, 3)\") = (1, 2, 3)));\n  (assert ((candidate \"(4, 5, 6)\") = (4, 5, 6)));\n  (assert ((candidate \"(7, 81, 19)\") = (7, 81, 19)));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_786_right_insertion", "prompt": "(**Write a function to locate the right insertion point for a specified value in sorted order.\n*)\nlet right_insertion (a : int list) (x : int) : int =", "test": "\nlet assertions =\n let candidate = right_insertion in\n  (assert ((candidate [1; 2; 4; 5] 6) = 4));\n  (assert ((candidate [1; 2; 4; 5] 3) = 2));\n  (assert ((candidate [1; 2; 4; 5] 7) = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_787_text_match_three", "prompt": "(**Write a function that matches a string that has an a followed by three 'b'.\n*)\nlet text_match_three (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_match_three in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abbbba\") = true));\n  (assert ((candidate \"caacabbbba\") = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_788_new_tuple", "prompt": "(**Write a function to create a new tuple from the given string and list.\n*)\nlet new_tuple (test_list : string list) (test_str : string) :  string * string * string =", "test": "\nlet assertions =\n let candidate = new_tuple in\n  (assert ((candidate [\"WEB\"; \"is\"] \"best\") = (\"WEB\", \"is\", \"best\")));\n  (assert ((candidate [\"We\"; \"are\"] \"Developers\") = (\"We\", \"are\", \"Developers\")));\n  (assert ((candidate [\"Part\"; \"is\"] \"Wrong\") = (\"Part\", \"is\", \"Wrong\")));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_790_even_position", "prompt": "(**Write a mlthon function to check whether every even index contains even numbers of a given list.\n*)\nlet even_position (nums : int list) : bool =", "test": "\nlet assertions =\n let candidate = even_position in\n  (assert ((candidate [3; 2; 1]) = false));\n  (assert ((candidate [1; 2; 3]) = false));\n  (assert ((candidate [2; 1; 4]) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_792_count_list", "prompt": "(**Write a mlthon function to count the number of lists in a given number of lists.\n*)\nlet count_list (input_list : int list list) : int =", "test": "\nlet assertions =\n let candidate = count_list in\n  (assert ((candidate [[1; 3]; [5; 7]; [9; 11]; [13; 15; 17]]) = 4));\n  (assert ((candidate [[1; 2]; [2; 3]; [4; 5]]) = 3));\n  (assert ((candidate [[1; 0]; [2; 0]]) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_793_last", "prompt": "(**Write a mlthon function to find the last position of an element in a sorted list.\n*)\nlet last (arr : int list) (x : int) : int =", "test": "\nlet assertions =\n let candidate = last in\n  (assert ((candidate [1; 2; 3] 1) = 0));\n  (assert ((candidate [1; 1; 1; 2; 3; 4] 1) = 2));\n  (assert ((candidate [2; 3; 2; 3; 6; 8; 9] 3) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "(**Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n*)\nlet text_starta_endb (text : string) : bool =", "test": "\nlet assertions =\n let candidate = text_starta_endb in\n  (assert ((candidate \"aabbbb\") = true));\n  (assert ((candidate \"aabAbbbc\") = false));\n  (assert ((candidate \"accddbbjjj\") = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_796_return_sum", "prompt": "(**Write function to find the sum of all items in the given association list.\n*)\nlet return_sum (dict : (string, int) list) : int =", "test": "\nlet assertions =\n let candidate = return_sum in\n  (assert ((candidate [(\"a\", 100); (\"b\", 200); (\"c\", 300)]) = 600));\n  (assert ((candidate [(\"a\", 25); (\"b\", 18); (\"c\", 45)]) = 88));\n  (assert ((candidate [(\"a\", 36); (\"b\", 39); (\"c\", 49)]) = 124));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "(**Write a mlthon function to find the sum of all odd natural numbers within the range l and r.\n*)\nlet sum_in_range (l : int) (r : int) : int =", "test": "\nlet assertions =\n let candidate = sum_in_range in\n  (assert ((candidate 2 5) = 8));\n  (assert ((candidate 5 7) = 12));\n  (assert ((candidate 7 13) = 40));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_798__sum", "prompt": "(**Write a mlthon function to find the sum of a list.\n*)\nlet _sum (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = _sum in\n  (assert ((candidate [1; 2; 3]) = 6));\n  (assert ((candidate [15; 12; 13; 10]) = 50));\n  (assert ((candidate [0; 1; 2]) = 3));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_799_left_rotate", "prompt": "(**Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n*)\nlet left_rotate (n : int) (d : int) : int =", "test": "\nlet assertions =\n let candidate = left_rotate in\n  (assert ((candidate 16 2) = 64));\n  (assert ((candidate 10 2) = 40));\n  (assert ((candidate 99 3) = 792));\n  (assert ((candidate 99 3) = 792));\n  (assert ((candidate 1 3) = 8));\n  (assert ((candidate 5 3) = 40));\n  (assert ((candidate 29 3) = 232));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "(**Write a function to remove all whitespaces from a string.\n*)\nlet remove_all_spaces (text : string) : string =", "test": "\nlet assertions =\n let candidate = remove_all_spaces in\n  (assert ((candidate \"python  program\") = \"pythonprogram\"));\n  (assert ((candidate \"python   programming    language\") = \"pythonprogramminglanguage\"));\n  (assert ((candidate \"python                     program\") = \"pythonprogram\"));\n  (assert ((candidate \"   python                     program\") = \"pythonprogram\"));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "(**Write a mlthon function to count the number of equal numbers from three given integers.\n*)\nlet test_three_equal (x : int) (y : int) (z : int) : int =", "test": "\nlet assertions =\n let candidate = test_three_equal in\n  (assert ((candidate 1 1 1) = 3));\n  (assert ((candidate (~1) (~2) (~3)) = 0));\n  (assert ((candidate 1 2 2) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_802_count_rotation", "prompt": "(**Write a mlthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n*)\nlet count_rotation (arr : int list) : int =", "test": "\nlet assertions =\n let candidate = count_rotation in\n  (assert ((candidate [3; 2; 1]) = 1));\n  (assert ((candidate [4; 5; 1; 2; 3]) = 2));\n  (assert ((candidate [7; 8; 9; 1; 2; 3]) = 3));\n  (assert ((candidate [1; 2; 3]) = 0));\n  (assert ((candidate [1; 3; 2]) = 2));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "(**Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n*)\nlet is_perfect_square (n : int) : bool =", "test": "\nlet assertions =\n let candidate = is_perfect_square in\n  (assert ((candidate 10) = false));\n  (assert ((candidate 36) = true));\n  (assert ((candidate 14) = false));\n  (assert ((candidate 196) = true));\n  (assert ((candidate 125) = false));\n  (assert ((candidate 15625) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_804_is_product_even", "prompt": "(**Write a function to check whether the product of numbers in a list is even or not.\n*)\nlet is_product_even (arr : int list) : bool =", "test": "\nlet assertions =\n let candidate = is_product_even in\n  (assert ((candidate [1; 2; 3]) = true));\n  (assert ((candidate [1; 2; 1; 4]) = true));\n  (assert ((candidate [1; 1]) = false));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "(**Write a function that returns the list in a list of lists whose sum of elements is the highest.\n*)\nlet max_sum_list (lists : int list list) : int list =", "test": "\nlet assertions =\n let candidate = max_sum_list in\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6]; [10; 11; 12]; [7; 8; 9]]) = [10; 11; 12]));\n  (assert ((candidate [[3; 2; 1]; [6; 5; 4]; [12; 11; 10]]) = [12; 11; 10]));\n  (assert ((candidate [[2; 3; 1]]) = [2; 3; 1]));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "(**Write a function to find maximum run of uppercase characters in the given string.\n*)\nlet max_run_uppercase (test_str : string) : int =", "test": "\nlet assertions =\n let candidate = max_run_uppercase in\n  (assert ((candidate \"GeMKSForGERksISBESt\") = 5));\n  (assert ((candidate \"PrECIOusMOVemENTSYT\") = 6));\n  (assert ((candidate \"GooGLEFluTTER\") = 4));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_807_first_odd", "prompt": "(**Write a mlthon function to find the first odd number in a given list of numbers.\n*)\nlet first_odd (nums : int list) : int =", "test": "\nlet assertions =\n let candidate = first_odd in\n  (assert ((candidate [1; 3; 5]) = 1));\n  (assert ((candidate [2; 4; 1; 3]) = 1));\n  (assert ((candidate [8; 9; 1]) = 9));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_808_check_K", "prompt": "(**Write a function to check if the given tuples contain the k or not.\n*)\nlet check_K (test_tup : int list) (K : int) : bool =", "test": "\nlet assertions =\n let candidate = check_K in\n  (assert ((candidate [10; 4; 5; 6; 8] 6) = true));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] 7) = false));\n  (assert ((candidate [7; 8; 9; 44; 11; 12] 11) = true));\n  ()\n", "language": "ml"}, {"task_id": "mbpp_809_check_smaller", "prompt": "(**Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n*)\nlet check_smaller (test_tup1 :  int * int * int) (test_tup2 :  int * int * int) : bool =", "test": "\nlet assertions =\n let candidate = check_smaller in\n  (assert ((candidate (1, 2, 3) (2, 3, 4)) = false));\n  (assert ((candidate (4, 5, 6) (3, 4, 5)) = true));\n  (assert ((candidate (11, 12, 13) (10, 11, 12)) = true));\n  ()\n", "language": "ml"}]