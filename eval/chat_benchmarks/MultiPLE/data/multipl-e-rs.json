[{"task_id": "HumanEval_0_has_close_elements", "prompt": "/// Check if in given vector of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0, 3.0], 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0], 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "/// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n/// separate those group into separate strings and return the vector of those.\n/// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n/// Ignore any spaces in the input string.\n/// >>> separate_paren_groups(String::from(\"( ) (( )) (( )( ))\"))\n/// vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]\nfn separate_paren_groups(paren_string: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = separate_paren_groups;\n    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![String::from(\"(()())\"), String::from(\"((()))\"), String::from(\"()\"), String::from(\"((())()())\")]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"((()))\"), String::from(\"(((())))\")]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![String::from(\"(()(())((())))\")]);\n    assert_eq!(candidate(String::from(\"( ) (( )) (( )( ))\")), vec![String::from(\"()\"), String::from(\"(())\"), String::from(\"(()())\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_3_below_zero", "prompt": "/// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n/// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n/// at that point function should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1, 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n", "language": "rs"}, {"task_id": "HumanEval_5_intersperse", "prompt": "/// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n/// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "/// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n/// For each of the group, output the deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n/// >>> parse_nested_parens(String::from(\"(()()) ((())) () ((())()())\"))\n/// vec![2, 3, 1, 3]\nfn parse_nested_parens(paren_string: String) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = parse_nested_parens;\n    assert_eq!(candidate(String::from(\"(()()) ((())) () ((())()())\")), vec![2, 3, 1, 3]);\n    assert_eq!(candidate(String::from(\"() (()) ((())) (((())))\")), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(String::from(\"(()(())((())))\")), vec![4]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_7_filter_by_substring", "prompt": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_8_sum_product", "prompt": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n", "language": "rs"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "/// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1, 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "/// Find the shortest palindrome that begins with a supplied string.\n/// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string that is a palindrome.\n/// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n/// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n/// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"x\")), String::from(\"x\"));\n    assert_eq!(candidate(String::from(\"xyz\")), String::from(\"xyzyx\"));\n    assert_eq!(candidate(String::from(\"xyx\")), String::from(\"xyx\"));\n    assert_eq!(candidate(String::from(\"jerry\")), String::from(\"jerryrrej\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_11_string_xor", "prompt": "/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(String::from(\"010\"), String::from(\"110\"))\n/// String::from(\"100\")\nfn string_xor(a: String, b: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = string_xor;\n    assert_eq!(candidate(String::from(\"111000\"), String::from(\"101010\")), String::from(\"010010\"));\n    assert_eq!(candidate(String::from(\"1\"), String::from(\"1\")), String::from(\"0\"));\n    assert_eq!(candidate(String::from(\"0101\"), String::from(\"0000\")), String::from(\"0101\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_12_longest", "prompt": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n", "test": "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n", "language": "rs"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n", "language": "rs"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n", "language": "rs"}, {"task_id": "HumanEval_17_parse_music", "prompt": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "/// Find how many times a given substring can be found in the original string. Count overlaping cases.\n/// >>> how_many_times(String::from(\"\"), String::from(\"a\"))\n/// 0\n/// >>> how_many_times(String::from(\"aaa\"), String::from(\"a\"))\n/// 3\n/// >>> how_many_times(String::from(\"aaaa\"), String::from(\"aa\"))\n/// 3\nfn how_many_times(string: String, substring: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"john\")), 1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "/// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n/// other and return them in order (smaller number, larger number).\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) -> (f64, f64) {\n", "test": "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0]), (5.0, 5.9));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.2]), (2.0, 2.2));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0]), (2.0, 2.0));\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]), (2.2, 3.1));\n}\n", "language": "rs"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "/// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\n/// vec![0.0, 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n", "test": "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_23_strlen", "prompt": "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n/// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n", "language": "rs"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3), 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n    assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n", "language": "rs"}, {"task_id": "HumanEval_25_factorize", "prompt": "/// Return vector of prime factors of given integer in the order from smallest to largest.\n/// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n/// Input number should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2, 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2, 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_27_flip_case", "prompt": "/// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"hELLO\")\nfn flip_case(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_28_concatenate", "prompt": "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n/// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings: Vec<String>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_29_filter_by_prefix", "prompt": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_30_get_positive", "prompt": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n", "language": "rs"}, {"task_id": "HumanEval_31_is_prime", "prompt": "/// Return true if a given number is prime, and false otherwise.\n/// >>> is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n/// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n/// >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_33_sort_third", "prompt": "/// This function takes a vector l and returns a vector l' such that\n/// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n/// to the values of the corresponding indicies of l, but sorted.\n/// >>> sort_third(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_third(vec![5, 6, 3, 4, 8, 9, 2])\n/// vec![2, 6, 3, 4, 8, 9, 5]\nfn sort_third(l: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_third;\n    assert_eq!(candidate(vec![5, 6, 3, 4, 8, 9, 2]), vec![2, 6, 3, 4, 8, 9, 5]);\n    assert_eq!(candidate(vec![5, 8, 3, 4, 6, 9, 2]), vec![2, 8, 3, 4, 6, 9, 5]);\n    assert_eq!(candidate(vec![5, 6, 9, 4, 8, 3, 2]), vec![2, 6, 9, 4, 8, 3, 5]);\n    assert_eq!(candidate(vec![5, 6, 3, 4, 8, 9, 2, 1]), vec![2, 6, 3, 4, 8, 9, 5, 1]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_34_unique", "prompt": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_35_max_element", "prompt": "/// Return maximum element in the vector.\n/// >>> max_element(vec![1, 2, 3])\n/// 3\n/// >>> max_element(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfn max_element(l: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1, 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]), 124);\n}\n", "language": "rs"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n", "language": "rs"}, {"task_id": "HumanEval_37_sort_even", "prompt": "/// This function takes a vector l and returns a vector l' such that\n/// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>> sort_even(vec![1, 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3, 4])\n/// vec![3, 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "/// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n/// >>> prime_fib(1)\n/// 2\n/// >>> prime_fib(2)\n/// 3\n/// >>> prime_fib(3)\n/// 5\n/// >>> prime_fib(4)\n/// 13\n/// >>> prime_fib(5)\n/// 89\nfn prime_fib(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = prime_fib;\n    assert_eq!(candidate(1), 2);\n    assert_eq!(candidate(2), 3);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4), 13);\n    assert_eq!(candidate(5), 89);\n    assert_eq!(candidate(6), 233);\n    assert_eq!(candidate(7), 1597);\n    assert_eq!(candidate(8), 28657);\n    assert_eq!(candidate(9), 514229);\n    assert_eq!(candidate(10), 433494437);\n}\n", "language": "rs"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it returns true if there are three distinct elements in the vector that\n/// sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n/// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "/// Imagine a road that's a perfectly straight infinitely long line.\n/// n cars are driving left to right;  simultaneously, a different set of n cars\n/// are driving right to left.   The two sets of cars start out being very far from\n/// each other.  All cars move in the same speed.  Two cars are said to collide\n/// when a car that's moving left to right hits a car that's moving right to left.\n/// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n/// in their trajectory as if they did not collide.\n/// This function outputs the number of such collisions.\nfn car_race_collision(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 9);\n    assert_eq!(candidate(4), 16);\n    assert_eq!(candidate(8), 64);\n    assert_eq!(candidate(10), 100);\n}\n", "language": "rs"}, {"task_id": "HumanEval_42_incr_list", "prompt": "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1, 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it returns true if there are two distinct elements in the vector that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_44_change_base", "prompt": "/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n/// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\")\nfn change_base(x: isize, base: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "/// Given length of a side and high return area for a triangle.\n/// >>> triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(5, 3), 7.5);\n    assert_eq!(candidate(2, 2), 2.0);\n    assert_eq!(candidate(10, 8), 40.0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_46_fib4", "prompt": "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n", "language": "rs"}, {"task_id": "HumanEval_47_median", "prompt": "/// Return median of elements in the vector l.\n/// >>> median(vec![3, 1, 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l: Vec<isize>) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_49_modp", "prompt": "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n/// 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3, 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5), 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101), 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101), 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n}\n", "language": "rs"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "/// Return true if all numbers in the vector l are below threshold t.\n/// >>> below_threshold(vec![1, 2, 4, 10], 100)\n/// true\n/// >>> below_threshold(vec![1, 20, 4, 10], 5)\n/// false\nfn below_threshold(l: Vec<isize>, t: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_53_add", "prompt": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n", "language": "rs"}, {"task_id": "HumanEval_54_same_chars", "prompt": "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0: String, s1: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"aabb\"), String::from(\"aaccc\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_55_fib", "prompt": "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n/// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n", "language": "rs"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_57_monotonic", "prompt": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_58_common", "prompt": "/// Return sorted unique common elements for two vectors.\n/// >>> common(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121])\n/// vec![1, 5, 653]\n/// >>> common(vec![5, 3, 2, 8], vec![3, 2])\n/// vec![2, 3]\nfn common(l1: Vec<isize>, l2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = common;\n    assert_eq!(candidate(vec![1, 4, 3, 34, 653, 2, 5], vec![5, 7, 1, 5, 9, 653, 121]), vec![1, 5, 653]);\n    assert_eq!(candidate(vec![5, 3, 2, 8], vec![3, 2]), vec![2, 3]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], vec![3, 2, 4]), vec![2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 8], Vec::<isize>::new()), Vec::<isize>::new());\n}\n", "language": "rs"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n", "language": "rs"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n/// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>> sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfn sum_to_n(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_to_n;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(6), 21);\n    assert_eq!(candidate(11), 66);\n    assert_eq!(candidate(30), 465);\n    assert_eq!(candidate(100), 5050);\n}\n", "language": "rs"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_62_derivative", "prompt": "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n/// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1, 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n", "language": "rs"}, {"task_id": "HumanEval_63_fibfib", "prompt": "/// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n/// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n/// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>> fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n", "language": "rs"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "/// Write a function vowels_count which takes a string representing\n/// a word as input and returns the number of vowels in the string.\n/// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n", "language": "rs"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "/// Circular shift the digits of the integer x, shift the digits right by shift\n/// and return the result as a string.\n/// If shift > number of digits, return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x: isize, shift: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_66_digitSum", "prompt": "/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n}\n", "language": "rs"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "/// In this task, you will be given a string that represents a number of apples and oranges \n/// that are distributed in a basket of fruit this basket contains \n/// apples, oranges, and mango fruits. Given the string that represents the total number of \n/// the oranges and apples and an integer that represent the total number of the fruits \n/// in the basket return the number of the mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n}\n", "language": "rs"}, {"task_id": "HumanEval_68_pluck", "prompt": "/// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in a vector, [ smalest_value, its index ],\n/// If there are no even values or the given vector is empty, return [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n/// Vec::<isize>::new()\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n/// vec![0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]), vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n    assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7, 9, 7, 1]), Vec::<isize>::new());\n}\n", "language": "rs"}, {"task_id": "HumanEval_69_search", "prompt": "/// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n/// zero, and has a frequency greater than or equal to the value of the integer itself. \n/// The frequency of an integer is the number of times it appears in the vector.\n/// If no such a value exist, return -1.\n/// Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\nfn search(lst: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5, 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n    assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8, 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n    assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3, 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1, 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]), 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]), -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]), 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "/// Given vector of integers, return vector in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1, 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n/// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\nfn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "/// Given the lengths of the three sides of a triangle. Return the area of\n/// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n/// -1.0\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "/// Write a function that returns true if the object q will fly, and false otherwise.\n/// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n/// Example:\n/// >>> will_it_fly(vec![1, 2], 5)\n/// false\n/// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>> will_it_fly(vec![3, 2, 3], 1)\n/// false\n/// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n/// >>> will_it_fly(vec![3, 2, 3], 9)\n/// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n/// >>> will_it_fly(vec![3], 5)\n/// true\n/// # 3 is less than the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "/// Given a vector arr of integers, find the minimum number of elements that\n/// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n/// is read the same backwards and forwards. In one change, you can change one element to any other element.\n/// For example:\n/// >>> smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1, 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n/// 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_74_total_match", "prompt": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n", "language": "rs"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "/// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "/// Your task is to write a function that returns true if a number x is a simple\n/// power of n and false in other cases.\n/// x is a simple power of n if n**int=x\n/// For example:\n/// >>> is_simple_power(1, 4)\n/// true\n/// >>> is_simple_power(2, 2)\n/// true\n/// >>> is_simple_power(8, 2)\n/// true\n/// >>> is_simple_power(3, 2)\n/// false\n/// >>> is_simple_power(3, 1)\n/// false\n/// >>> is_simple_power(5, 3)\n/// false\nfn is_simple_power(x: isize, n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_77_iscube", "prompt": "/// Write a function that takes an integer a and returns true \n/// if this ingeger is a cube of some integer number.\n/// Note: you may assume the input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>> iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n/// true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_78_hex_key", "prompt": "/// You have been tasked to write a function that receives \n/// a hexadecimal number as a string and counts the number of hexadecimal \n/// digits that are primes (prime number, or a prime, is a natural number \n/// greater than 1 that is not a product of two smaller natural numbers).\n/// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are always uppercase.\n/// Examples:\n/// >>> hex_key(String::from(\"AB\"))\n/// 1\n/// >>> hex_key(String::from(\"1077E\"))\n/// 2\n/// >>> hex_key(String::from(\"ABED1A33\"))\n/// 4\n/// >>> hex_key(String::from(\"123456789ABCDEF0\"))\n/// 6\n/// >>> hex_key(String::from(\"2020\"))\n/// 2\nfn hex_key(num: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = hex_key;\n    assert_eq!(candidate(String::from(\"AB\")), 1);\n    assert_eq!(candidate(String::from(\"1077E\")), 2);\n    assert_eq!(candidate(String::from(\"ABED1A33\")), 4);\n    assert_eq!(candidate(String::from(\"2020\")), 2);\n    assert_eq!(candidate(String::from(\"123456789ABCDEF0\")), 6);\n    assert_eq!(candidate(String::from(\"112233445566778899AABBCCDDEEFF00\")), 12);\n}\n", "language": "rs"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "/// You will be given a number in decimal form and your task is to convert it to\n/// binary format. The function should return a string, with each character representing a binary\n/// number. Each character in the string will be '0' or '1'.\n/// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n/// The extra characters are there to help with the format.\n/// Examples:\n/// >>> decimal_to_binary(15)\n/// String::from(\"db1111db\")\n/// >>> decimal_to_binary(32)\n/// String::from(\"db100000db\")\nfn decimal_to_binary(decimal: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_80_is_happy", "prompt": "/// You are given a string s.\n/// Your task is to check if the string is haprs or not.\n/// A string is haprs if its length is at least 3 and every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(String::from(\"a\"))\n/// false\n/// >>> is_happy(String::from(\"aa\"))\n/// false\n/// >>> is_happy(String::from(\"abcd\"))\n/// true\n/// >>> is_happy(String::from(\"aabb\"))\n/// false\n/// >>> is_happy(String::from(\"adb\"))\n/// true\n/// >>> is_happy(String::from(\"xyy\"))\n/// false\nfn is_happy(s: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_82_prime_length", "prompt": "/// Write a function that takes a string and returns true if the string\n/// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(String::from(\"Hello\"))\n/// true\n/// >>> prime_length(String::from(\"abcdcba\"))\n/// true\n/// >>> prime_length(String::from(\"kittens\"))\n/// true\n/// >>> prime_length(String::from(\"orange\"))\n/// false\nfn prime_length(string: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n    assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")), false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n", "language": "rs"}, {"task_id": "HumanEval_84_solve", "prompt": "/// Given a positive integer N, return the total sum of its digits in binary.\n/// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>> solve(150)\n/// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"1100\")\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_85_add", "prompt": "/// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\nfn add(lst: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n", "language": "rs"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_87_get_row", "prompt": "/// You are given a 2 dimensional data, as a nested vectors,\n/// which is similar to matrix, however, unlike matrices,\n/// each row may contain a different number of columns.\n/// Given lst, and integer x, find integers x in the vector,\n/// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially by rows in ascending order.\n/// Also, sort coordinates of the row by columns in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize, isize)>::new()\n/// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5, 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1), Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]], 3), vec![(2, 2)]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_88_sort_array", "prompt": "/// Given a vector of non-negative integers, return a cors of the given vector after sorting,\n/// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n/// or sort it in descending order if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n/// Vec::<isize>::new()\n/// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5, 6])\n/// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4, 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2, 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0, 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23, 21, 14, 11]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_89_encrypt", "prompt": "/// Create a function encrypt that takes a string as an argument and\n/// returns a string encrypted with the alphabet being rotated. \n/// The alphabet should be rotated in a manner such that the letters \n/// shift down by two multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n/// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n", "language": "rs"}, {"task_id": "HumanEval_91_is_bored", "prompt": "/// You'll be given a string of words, and your task is to count the number\n/// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are going for a walk\")), 0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_92_any_int", "prompt": "/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n/// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n/// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0, 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5, 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0, 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0, 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_93_encode", "prompt": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "/// You are given a vector of integers.\n/// You need to find the largest prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n/// 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn skjkasdkd(lst: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191, 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n}\n", "language": "rs"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "use std::collections::HashMap;\n\n/// Given a HashMap, return true if all keys are strings in lower \n/// case or all keys are strings in upper case, else return false.\n/// The function should return false is the given HashMap is empty.\n/// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n/// true\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\")), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")), (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"), String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])), true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "/// Implement a function that takes an non-negative integer and returns a vector of the first n\n/// integers that are prime numbers and less than n.\n/// for example:\n/// >>> count_up_to(5)\n/// vec![2, 3]\n/// >>> count_up_to(11)\n/// vec![2, 3, 5, 7]\n/// >>> count_up_to(0)\n/// Vec::<isize>::new()\n/// >>> count_up_to(20)\n/// vec![2, 3, 5, 7, 11, 13, 17, 19]\n/// >>> count_up_to(1)\n/// Vec::<isize>::new()\n/// >>> count_up_to(18)\n/// vec![2, 3, 5, 7, 11, 13, 17]\nfn count_up_to(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = count_up_to;\n    assert_eq!(candidate(5), vec![2, 3]);\n    assert_eq!(candidate(6), vec![2, 3, 5]);\n    assert_eq!(candidate(7), vec![2, 3, 5]);\n    assert_eq!(candidate(10), vec![2, 3, 5, 7]);\n    assert_eq!(candidate(0), Vec::<isize>::new());\n    assert_eq!(candidate(22), vec![2, 3, 5, 7, 11, 13, 17, 19]);\n    assert_eq!(candidate(1), Vec::<isize>::new());\n    assert_eq!(candidate(18), vec![2, 3, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(47), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n    assert_eq!(candidate(101), vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_97_multiply", "prompt": "/// Complete the function that takes two integers and returns \n/// the product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n/// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>> multiply(2020, 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_98_count_upper", "prompt": "/// Given a string s, count the number of uppercase vowels in even indices.\n/// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>> count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n", "language": "rs"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "/// Create a function that takes a value (string) representing a number\n/// and returns the closest integer to it. If the number is equidistant\n/// from two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(String::from(\"10\"))\n/// 10\n/// >>> closest_integer(String::from(\"15.3\"))\n/// 15\n/// Note:\n/// Rounding away from zero means that if the given number is equidistant\n/// from two integers, the one you should return is the one that is the\n/// farthest from zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"-14.5\") should return -15.\nfn closest_integer(value: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = closest_integer;\n    assert_eq!(candidate(String::from(\"10\")), 10);\n    assert_eq!(candidate(String::from(\"14.5\")), 15);\n    assert_eq!(candidate(String::from(\"-15.5\")), -16);\n    assert_eq!(candidate(String::from(\"15.3\")), 15);\n    assert_eq!(candidate(String::from(\"0\")), 0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_101_words_string", "prompt": "/// You will be given a string of words separated by commas or spaces. Your task is\n/// to split the string into words and return a vector of the words.\n/// For example:\n/// >>> words_string(String::from(\"Hi, my name is John\"))\n/// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"One, two, three, four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]\nfn words_string(s: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")), vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"ahmed     , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_102_choose_num", "prompt": "/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x: isize, y: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n", "language": "rs"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_105_by_length", "prompt": "/// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n/// reverse the resulting vector, and then replace each digit by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2, 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty, return an empty vector:\n/// >>> by_length(vec![])\n/// Vec::<String>::new()\n/// If the vector has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_106_f", "prompt": "/// Implement the function f that takes n as a parameter,\n/// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts from 1.\n/// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(5)\n/// vec![1, 2, 6, 24, 15]\nfn f(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "/// Given a positive integer n, return a tuple that has the number of even and odd\n/// integer palindromes that fall within the range(1, n), inclusive.\n/// Example 1:\n/// >>> even_odd_palindrome(3)\n/// (1, 2)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n/// Example 2:\n/// >>> even_odd_palindrome(12)\n/// (4, 6)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n/// Note:\n/// 1. 1 <= n <= 10^3\n/// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfn even_odd_palindrome(n: isize) -> (isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = even_odd_palindrome;\n    assert_eq!(candidate(123), (8, 13));\n    assert_eq!(candidate(12), (4, 6));\n    assert_eq!(candidate(3), (1, 2));\n    assert_eq!(candidate(63), (6, 8));\n    assert_eq!(candidate(25), (5, 6));\n    assert_eq!(candidate(19), (4, 6));\n    assert_eq!(candidate(9), (4, 5));\n    assert_eq!(candidate(1), (0, 1));\n}\n", "language": "rs"}, {"task_id": "HumanEval_108_count_nums", "prompt": "/// Write a function count_nums which takes a vector of integers and returns\n/// the number of elements which has a sum of digits > 0.\n/// If a number is negative, then its first signed digit will be negative:\n/// e.g. -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(vec![])\n/// 0\n/// >>> count_nums(vec![-1, 11, -11])\n/// 1\n/// >>> count_nums(vec![1, 1, 2])\n/// 3\nfn count_nums(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]), 1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "/// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n/// numbers in the vector will be randomly ordered. Your task is to determine if\n/// it is possible to get a vector sorted in non-decreasing order by performing \n/// the following operation on the given vector:\n/// You are allowed to perform right shift operation any number of times.\n/// One right shift operation means shifting all elements of the vector by one\n/// position in the right direction. The last element of the vector will be moved to\n/// the starting position in the vector i.e. 0th index. \n/// If it is possible to obtain the sorted vector by performing the above operation\n/// then return true else return false.\n/// If the given vector is empty then return true.\n/// Note: The given vector is guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(vec![3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations, non-decreasing order can\n/// be achieved for the given vector.\n/// >>> move_one_ball(vec![3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing order for the given\n/// vector by performing any number of right shift operations.\nfn move_one_ball(arr: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = move_one_ball;\n    assert_eq!(candidate(vec![3, 4, 5, 1, 2]), true);\n    assert_eq!(candidate(vec![3, 5, 10, 1, 2]), true);\n    assert_eq!(candidate(vec![4, 3, 1, 2]), false);\n    assert_eq!(candidate(vec![3, 5, 4, 1, 2]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_110_exchange", "prompt": "/// In this problem, you will implement a function that takes two vectors of numbers,\n/// and determines whether it is possible to perform an exchange of elements\n/// between them to make lst1 a vector of only even numbers.\n/// There is no limit on the number of exchanged elements between lst1 and lst2.\n/// If it is possible to exchange elements between the lst1 and lst2 to make\n/// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\".\n/// For example:\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 2, 3, 4])\n/// String::from(\"YES\")\n/// >>> exchange(vec![1, 2, 3, 4], vec![1, 5, 3, 4])\n/// String::from(\"NO\")\n/// It is assumed that the input vectors will be non-empty.\nfn exchange(lst1: Vec<isize>, lst2: Vec<isize>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = exchange;\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 2, 3, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![1, 5, 3, 4]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![2, 1, 4, 3]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 4]), String::from(\"YES\"));\n    assert_eq!(candidate(vec![5, 7, 3], vec![2, 6, 3]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![3, 2, 6, 1, 8, 9], vec![3, 5, 5, 1, 1, 1]), String::from(\"NO\"));\n    assert_eq!(candidate(vec![100, 200], vec![200, 200]), String::from(\"YES\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_111_histogram", "prompt": "use std::collections::HashMap;\n\n/// Given a string representing a space separated lowercase letters, return a HashMap\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(String::from(\"a b c\"))\n/// HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1)])\n/// >>> histogram(String::from(\"a b b a\"))\n/// HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n/// >>> histogram(String::from(\"a b c a b\"))\n/// HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)])\n/// >>> histogram(String::from(\"b b b b a\"))\n/// HashMap::from([(String::from(\"b\"), 4)])\n/// >>> histogram(String::from(\"\"))\n/// HashMap::from([])\nfn histogram(test: String) -> HashMap<String, isize> {\n", "test": "}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")), HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"a\"), 1)]));\n}\n", "language": "rs"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "/// Task\n/// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n/// then check if the result string is palindrome.\n/// A string is called palindrome if it reads the same backward as forward.\n/// You should return a tuple containing the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(String::from(\"abcde\"), String::from(\"ae\"))\n/// (String::from(\"bcd\"), false)\n/// >>> reverse_delete(String::from(\"abcdef\"), String::from(\"b\"))\n/// (String::from(\"acdef\"), false)\n/// >>> reverse_delete(String::from(\"abcdedcba\"), String::from(\"ab\"))\n/// (String::from(\"cdedc\"), true)\nfn reverse_delete(s: String, c: String) -> (String, bool) {\n", "test": "}\n\nfn main() {\n    let candidate = reverse_delete;\n    assert_eq!(candidate(String::from(\"abcde\"), String::from(\"ae\")), (String::from(\"bcd\"), false));\n    assert_eq!(candidate(String::from(\"abcdef\"), String::from(\"b\")), (String::from(\"acdef\"), false));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"ab\")), (String::from(\"cdedc\"), true));\n    assert_eq!(candidate(String::from(\"dwik\"), String::from(\"w\")), (String::from(\"dik\"), false));\n    assert_eq!(candidate(String::from(\"a\"), String::from(\"a\")), (String::from(\"\"), true));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"\")), (String::from(\"abcdedcba\"), true));\n    assert_eq!(candidate(String::from(\"abcdedcba\"), String::from(\"v\")), (String::from(\"abcdedcba\"), true));\n    assert_eq!(candidate(String::from(\"vabba\"), String::from(\"v\")), (String::from(\"abba\"), true));\n    assert_eq!(candidate(String::from(\"mamma\"), String::from(\"mia\")), (String::from(\"\"), true));\n}\n", "language": "rs"}, {"task_id": "HumanEval_113_odd_count", "prompt": "/// Given a vector of strings, where each string consists of only digits, return a vector.\n/// Each element i of the output should be \"the number of odd elements in the\n/// string i of the input.\" where all the i's should be replaced by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!(candidate(vec![String::from(\"1234567\")]), vec![String::from(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"3\"), String::from(\"11111111\")]), vec![String::from(\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")]);\n    assert_eq!(candidate(vec![String::from(\"271\"), String::from(\"137\"), String::from(\"314\")]), vec![String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\"), String::from(\"the number of odd elements 3n the str3ng 3 of the 3nput.\"), String::from(\"the number of odd elements 2n the str2ng 2 of the 2nput.\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_115_max_fill", "prompt": "/// You are given a rectangular grid of wells. Each row represents a single well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well has a corresponding bucket that can be used to extract water from it, \n/// and all buckets have the same capacity.\n/// Your task is to use the buckets to empty the wells.\n/// Output the number of times you need to lower the buckets.\n/// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n", "language": "rs"}, {"task_id": "HumanEval_116_sort_array", "prompt": "/// In this Kata, you have to sort a vector of non-negative integers according to\n/// number of ones in their binary representation in ascending order.\n/// For similar number of ones, sort based on decimal value.\n/// It must be implemented like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n/// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n/// >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_117_select_words", "prompt": "/// Given a string s and a natural number n, you have been tasked to implement \n/// a function that returns a vector of all words from string s that contain exactly \n/// n consonants, in order these words appear in the string s.\n/// If the string s is empty then the function should return an empty vector.\n/// Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n/// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"simple white space\"), 2)\n/// Vec::<String>::new()\n/// >>> select_words(String::from(\"Hello world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String, n: isize) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\")]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "/// You are given a word. Your task is to find the closest vowel that stands between \n/// two consonants from the right side of the word (case sensitive).\n/// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n/// find any vowel met the above condition. \n/// You may assume that the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n/// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\")\nfn get_closest_vowel(word: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")), String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"o\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_119_match_parens", "prompt": "/// You are given a vector of two strings, both strings consist of open\n/// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if it is possible to concatenate the two strings in\n/// some order, that the resulting string will be good.\n/// A string S is considered to be good if and only if all parentheses in S\n/// are balanced. For example: the string '(())()' is good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\")\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"(())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\")(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_120_maximum", "prompt": "/// Given a vector arr of integers and a positive integer k, return a sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n/// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3, 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector will be in the range of [1, 1000].\n/// 2. The elements in the vector will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n", "language": "rs"}, {"task_id": "HumanEval_121_solution", "prompt": "/// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5, 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30, 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3, 13, 2, 9]), 3);\n}\n", "language": "rs"}, {"task_id": "HumanEval_122_add_elements", "prompt": "/// Given a non-empty vector of integers arr and an integer k, return\n/// the sum of the elements with at most two digits from the first k elements of arr.\n/// Example:\n/// >>> add_elements(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\nfn add_elements(arr: Vec<isize>, k: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = add_elements;\n    assert_eq!(candidate(vec![1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4);\n    assert_eq!(candidate(vec![111, 121, 3, 4000, 5, 6], 2), 0);\n    assert_eq!(candidate(vec![11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125);\n    assert_eq!(candidate(vec![111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\n    assert_eq!(candidate(vec![1], 1), 1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "/// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n/// as follows: start with any positive integer n. Then each term is obtained from the \n/// previous term as follows: if the previous term is even, the next term is one half of \n/// the previous term. If the previous term is odd, the next term is 3 times the previous\n/// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n/// 2. returned vector sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n/// >>> get_odd_collatz(5)\n/// vec![1, 5]\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_124_valid_date", "prompt": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_127_intersection", "prompt": "/// You are given two intervals,\n/// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed which means that the interval (start, end)\n/// includes both start and end.\n/// For each given interval, it is assumed that its start is less or equal its end.\n/// Your task is to determine whether the length of intersection of these two \n/// intervals is a prime number.\n/// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n/// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n/// [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>> intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1: (isize, isize), interval2: (isize, isize)) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1, 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)), String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)), String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"NO\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "/// You are given a vector arr of integers and you need to return\n/// sum of magnitudes of integers multiplied by product of all signs\n/// of each number in the vector, represented by 1, -1 or 0.\n/// Note: return None for empty arr.\n/// Example:\n/// >>> prod_signs(vec![1, 2, 2, -4])\n/// Some(9)\n/// >>> prod_signs(vec![0, 1])\n/// Some(0)\n/// >>> prod_signs(vec![])\n/// None\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n}\n", "language": "rs"}, {"task_id": "HumanEval_129_minPath", "prompt": "/// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n/// each cell of the grid contains a value. Every integer in the range [1, N * N]\n/// inclusive appears exactly once on the cells of the grid.\n/// You have to find the minimum path of length k in the grid. You can start\n/// from any cell, and in each step you can move to any of the neighbor cells,\n/// in other words, you can go to cells which share an edge with you current\n/// cell.\n/// Please note that a path of length k means visiting exactly k cells (not\n/// necessarily distinct).\n/// You CANNOT go off the grid.\n/// A path A (of length k) is considered less than a path B (of length k) if\n/// after making the ordered vectors of the values on the cells that A and B go\n/// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n/// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n/// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n/// lst_A[j] = lst_B[j].\n/// It is guaranteed that the answer is unique.\n/// Return an ordered vector of the values on the cells that the minimum path go through.\n/// Examples:    \n/// >>> minPath(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3)\n/// vec![1, 2, 1]\n/// >>> minPath(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1)\n/// vec![1]\nfn minPath(grid: Vec<Vec<isize>>, k: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = minPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]], 3), vec![1, 2, 1]);\n    assert_eq!(candidate(vec![vec![5, 9, 3], vec![4, 1, 6], vec![7, 8, 2]], 1), vec![1]);\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12], vec![13, 14, 15, 16]], 4), vec![1, 2, 1, 2]);\n    assert_eq!(candidate(vec![vec![6, 4, 13, 10], vec![5, 7, 12, 1], vec![3, 16, 11, 15], vec![8, 14, 9, 2]], 7), vec![1, 10, 1, 10, 1, 10, 1]);\n    assert_eq!(candidate(vec![vec![8, 14, 9, 2], vec![6, 4, 13, 15], vec![5, 7, 1, 12], vec![3, 10, 11, 16]], 5), vec![1, 7, 1, 7, 1]);\n    assert_eq!(candidate(vec![vec![11, 8, 7, 2], vec![5, 16, 14, 4], vec![9, 3, 15, 6], vec![12, 13, 10, 1]], 9), vec![1, 6, 1, 6, 1, 6, 1, 6, 1]);\n    assert_eq!(candidate(vec![vec![12, 13, 10, 1], vec![9, 3, 15, 6], vec![5, 16, 14, 4], vec![11, 8, 7, 2]], 12), vec![1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n    assert_eq!(candidate(vec![vec![2, 7, 4], vec![3, 1, 5], vec![6, 8, 9]], 8), vec![1, 3, 1, 3, 1, 3, 1, 3]);\n    assert_eq!(candidate(vec![vec![6, 1, 5], vec![3, 8, 9], vec![2, 7, 4]], 8), vec![1, 5, 1, 5, 1, 5, 1, 5]);\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]], 10), vec![1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n    assert_eq!(candidate(vec![vec![1, 3], vec![3, 2]], 10), vec![1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_130_tri", "prompt": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_131_digits", "prompt": "/// Given a positive integer n, return the product of the odd digits.\n/// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n/// 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_132_is_nested", "prompt": "/// Create a function that takes a string as input which contains only square brackets.\n/// The function should return true if and only if there is a valid subsequence of brackets \n/// where at least one bracket in the subsequence is nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"[]]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n/// false\n/// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"[[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\nfn is_nested(string: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"[[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"[]\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"[][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"[[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"[[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "/// You are given a vector of numbers.\n/// You need to return the sum of squared numbers in the given vector,\n/// round each element in the vector to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0, 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4, 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]), 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n", "language": "rs"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "/// Create a function that returns true if the last character\n/// of a given string is an alphabetical character and is not\n/// a part of a word, and false otherwise.\n/// Note: \"word\" is a group of characters separated by space.\n/// Examples:\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pie\"))\n/// false\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pi e\"))\n/// true\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pi e \"))\n/// false\n/// >>> check_if_last_char_is_a_letter(String::from(\"\"))\n/// false\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "/// Create a function which returns the largest index of an element which\n/// is not greater than or equal to the element immediately preceding it. If\n/// no such element exists then return -1. The given vector will not contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the largest of negative integers, and 'b' is the smallest\n/// of positive integers in a vector.\n/// If there is no negative or positive integers, return them as None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n/// (None, Some(1))\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n/// >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>, Option<isize>) {\n", "test": "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3, 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]), (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]), (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6, 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3), Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3), Some(1)));\n}\n", "language": "rs"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "/// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n/// Example\n/// >>> is_equal_to_sum_even(4)\n/// false\n/// >>> is_equal_to_sum_even(6)\n/// false\n/// >>> is_equal_to_sum_even(8)\n/// true\nfn is_equal_to_sum_even(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n", "language": "rs"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "/// Create a function which takes a string representing a file's name, and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n/// A file's name is considered to be valid if and only if all the following conditions \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The substring before the dot should not be empty, and it starts with a letter from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "/// \"\n/// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n/// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n/// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1, 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn sum_squares(lst: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n", "language": "rs"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "/// You are given a string representing a sentence,\n/// the sentence contains some words separated by a space,\n/// and you have to return a string that contains the words from the original sentence,\n/// whose lengths are prime numbers,\n/// the order of the words in the new string should be the same as the original one.\n/// Example 1:\n/// >>> words_in_sentence(String::from(\"This is a test\"))\n/// String::from(\"is\")\n/// Example 2:\n/// >>> words_in_sentence(String::from(\"lets go for swimming\"))\n/// String::from(\"go for\")\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfn words_in_sentence(sentence: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = words_in_sentence;\n    assert_eq!(candidate(String::from(\"This is a test\")), String::from(\"is\"));\n    assert_eq!(candidate(String::from(\"lets go for swimming\")), String::from(\"go for\"));\n    assert_eq!(candidate(String::from(\"there is no place available here\")), String::from(\"there is no place\"));\n    assert_eq!(candidate(String::from(\"Hi I am Hussein\")), String::from(\"Hi am Hussein\"));\n    assert_eq!(candidate(String::from(\"go for it\")), String::from(\"go for it\"));\n    assert_eq!(candidate(String::from(\"here\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"here is\")), String::from(\"is\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_144_simplify", "prompt": "/// Your task is to implement a function that will simplify the expression\n/// x * n. The function returns true if x * n evaluates to a whole number and false\n/// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n/// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n/// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n/// >>> simplify(String::from(\"1/5\"), String::from(\"5/1\"))\n/// true\n/// >>> simplify(String::from(\"1/6\"), String::from(\"2/1\"))\n/// false\n/// >>> simplify(String::from(\"7/10\"), String::from(\"10/2\"))\n/// false\nfn simplify(x: String, n: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = simplify;\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"1/6\"), String::from(\"2/1\")), false);\n    assert_eq!(candidate(String::from(\"5/1\"), String::from(\"3/1\")), true);\n    assert_eq!(candidate(String::from(\"7/10\"), String::from(\"10/2\")), false);\n    assert_eq!(candidate(String::from(\"2/10\"), String::from(\"50/10\")), true);\n    assert_eq!(candidate(String::from(\"7/2\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"11/6\"), String::from(\"6/1\")), true);\n    assert_eq!(candidate(String::from(\"2/3\"), String::from(\"5/2\")), false);\n    assert_eq!(candidate(String::from(\"5/2\"), String::from(\"3/5\")), false);\n    assert_eq!(candidate(String::from(\"2/4\"), String::from(\"8/4\")), true);\n    assert_eq!(candidate(String::from(\"2/4\"), String::from(\"4/2\")), true);\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"5/1\")), true);\n    assert_eq!(candidate(String::from(\"1/5\"), String::from(\"1/5\")), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "/// Write a function that takes a vector of numbers as input and returns \n/// the number of elements in the vector that are greater than 10 and both \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n/// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33, -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n}\n", "language": "rs"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "/// You are given a positive integer n. You have to create an integer vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n}\n", "language": "rs"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "/// Write a function that accepts a vector of strings as a parameter,\n/// deletes the strings that have odd lengths from it,\n/// and returns the resulted vector with a sorted order,\n/// The vector is always a vector of strings and never a vector of numbers,\n/// and it may contain duplicates.\n/// The order of the vector should be ascending by length of each word, and you\n/// should return the vector sorted by that rule.\n/// If two words have the same length, sort the vector alphabetically.\n/// The function should return a vector of strings in sorted order.\n/// You may assume that all words will have the same length.\n/// For example:\n/// >>> list_sort(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")])\n/// vec![String::from(\"aa\")]\n/// >>> list_sort(vec![String::from(\"ab\"), String::from(\"a\"), String::from(\"aaa\"), String::from(\"cd\")])\n/// vec![String::from(\"ab\"), String::from(\"cd\")]\nfn sorted_list_sum(lst: Vec<String>) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = sorted_list_sum;\n    assert_eq!(candidate(vec![String::from(\"aa\"), String::from(\"a\"), String::from(\"aaa\")]), vec![String::from(\"aa\")]);\n    assert_eq!(candidate(vec![String::from(\"school\"), String::from(\"AI\"), String::from(\"asdf\"), String::from(\"b\")]), vec![String::from(\"AI\"), String::from(\"asdf\"), String::from(\"school\")]);\n    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"b\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"d\"), String::from(\"dcba\"), String::from(\"abcd\"), String::from(\"a\")]), vec![String::from(\"abcd\"), String::from(\"dcba\")]);\n    assert_eq!(candidate(vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]), vec![String::from(\"AI\"), String::from(\"ai\"), String::from(\"au\")]);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\"), String::from(\"c\"), String::from(\"c\"), String::from(\"a\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"aaaa\"), String::from(\"bbbb\"), String::from(\"dd\"), String::from(\"cc\")]), vec![String::from(\"cc\"), String::from(\"dd\"), String::from(\"aaaa\"), String::from(\"bbbb\")]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "/// A simple program which should return the value of x if n is \n/// a prime number and should return the value of y otherwise.\n/// Examples:\n/// >>> x_or_y(7, 34, 12)\n/// 34\n/// >>> x_or_y(15, 8, 5)\n/// 5\nfn x_or_y(n: isize, x: isize, y: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = x_or_y;\n    assert_eq!(candidate(7, 34, 12), 34);\n    assert_eq!(candidate(15, 8, 5), 5);\n    assert_eq!(candidate(3, 33, 5212), 33);\n    assert_eq!(candidate(1259, 3, 52), 3);\n    assert_eq!(candidate(7919, -1, 12), -1);\n    assert_eq!(candidate(3609, 1245, 583), 583);\n    assert_eq!(candidate(91, 56, 129), 129);\n    assert_eq!(candidate(6, 34, 1234), 1234);\n    assert_eq!(candidate(1, 2, 0), 0);\n    assert_eq!(candidate(2, 2, 0), 2);\n}\n", "language": "rs"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n", "language": "rs"}, {"task_id": "HumanEval_152_compare", "prompt": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "/// You will be given the name of a class (a string) and a vector of extensions.\n/// The extensions are to be used to load additional classes to the class. The\n/// strength of the extension is as follows: Let CAP be the number of the uppercase\n/// letters in the extension's name, and let SM be the number of lowercase letters \n/// in the extension's name, the strength is given by the fraction CAP - SM. \n/// You should find the strongest extension and return a string in this \n/// format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions with the same strength, you should\n/// choose the one that comes first in the vector.\n/// For example, if you are given \"Slices\" as the class and a vector of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(String::from(\"my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\")])\n/// String::from(\"my_class.AA\")\nfn Strongest_Extension(class_name: String, extensions: Vec<String>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"__YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]), String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"), vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"-_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]), String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"_\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "/// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(String::from(\"abcd\"), String::from(\"abd\"))\n/// false\n/// >>> cycpattern_check(String::from(\"hello\"), String::from(\"ell\"))\n/// true\n/// >>> cycpattern_check(String::from(\"whassup\"), String::from(\"psus\"))\n/// false\n/// >>> cycpattern_check(String::from(\"abab\"), String::from(\"baa\"))\n/// true\n/// >>> cycpattern_check(String::from(\"efef\"), String::from(\"eeff\"))\n/// false\n/// >>> cycpattern_check(String::from(\"himenss\"), String::from(\"simen\"))\n/// true\nfn cycpattern_check(a: String, b: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = cycpattern_check;\n    assert_eq!(candidate(String::from(\"xyzw\"), String::from(\"xyw\")), false);\n    assert_eq!(candidate(String::from(\"yello\"), String::from(\"ell\")), true);\n    assert_eq!(candidate(String::from(\"whattup\"), String::from(\"ptut\")), false);\n    assert_eq!(candidate(String::from(\"efef\"), String::from(\"fee\")), true);\n    assert_eq!(candidate(String::from(\"abab\"), String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"winemtt\"), String::from(\"tinem\")), true);\n}\n", "language": "rs"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n", "language": "rs"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "/// Given a positive integer, obtain its roman numeral equivalent as a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n/// >>> int_to_mini_roman(19)\n/// String::from(\"xix\")\n/// >>> int_to_mini_roman(152)\n/// String::from(\"clii\")\n/// >>> int_to_mini_roman(426)\n/// String::from(\"cdxxvi\")\nfn int_to_mini_roman(number: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1, 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n", "language": "rs"}, {"task_id": "HumanEval_158_find_max", "prompt": "/// Write a function that accepts a vector of strings.\n/// The vector contains different words. Return the word with maximum number\n/// of unique characters. If multiple strings have maximum number of unique\n/// characters, return the one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\")\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\nfn find_max(words: Vec<String>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]), String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]), String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"), String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"), String::from(\"play\")]), String::from(\"play\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_159_eat", "prompt": "/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return a vector of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(5, 6, 10)\n/// vec![11, 4]\n/// >>> eat(4, 8, 9)\n/// vec![12, 1]\n/// >>> eat(1, 10, 10)\n/// vec![11, 0]\n/// >>> eat(2, 11, 5)\n/// vec![7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n", "language": "rs"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n", "language": "rs"}, {"task_id": "HumanEval_161_solve", "prompt": "/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(String::from(\"1234\"))\n/// String::from(\"4321\")\n/// >>> solve(String::from(\"ab\"))\n/// String::from(\"AB\")\n/// >>> solve(String::from(\"#a@C\"))\n/// String::from(\"#A@c\")\nfn solve(s: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\")), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n", "language": "rs"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n", "test": "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n", "language": "rs"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "/// Given two positive integers a and b, return the even digits between a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(2, 8)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(8, 2)\n/// vec![2, 4, 6, 8]\n/// >>> generate_integers(10, 14)\n/// Vec::<isize>::new()\nfn generate_integers(a: isize, b: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = generate_integers;\n    assert_eq!(candidate(2, 10), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(10, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(132, 2), vec![2, 4, 6, 8]);\n    assert_eq!(candidate(17, 89), Vec::<isize>::new());\n}\n", "language": "rs"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "/// Write a rsthon function to identify non-prime numbers.\nfn is_not_prime(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_not_prime;\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(35), true);\n    assert_eq!(candidate(37), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "/// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfn heap_queue_largest(nums: Vec<isize>, n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = heap_queue_largest;\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 3), vec![85, 75, 65]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 2), vec![85, 75]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 5), vec![85, 75, 65, 58, 35]);\n}\n", "language": "rs"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "/// Write a rsthon function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_8_square_nums", "prompt": "/// Write a function to find squares of individual elements in a vector.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n", "language": "rs"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "/// Write a rsthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfn find_Rotations(str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_Rotations;\n    assert_eq!(candidate(String::from(\"aaaa\")), 1);\n    assert_eq!(candidate(String::from(\"ab\")), 2);\n    assert_eq!(candidate(String::from(\"abc\")), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "/// Write a rsthon function to remove first and last occurrence of a given character from the string.\nfn remove_Occ(s: String, ch: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_Occ;\n    assert_eq!(candidate(String::from(\"hello\"), String::from(\"l\")), String::from(\"heo\"));\n    assert_eq!(candidate(String::from(\"abcda\"), String::from(\"a\")), String::from(\"bcd\"));\n    assert_eq!(candidate(String::from(\"PHP\"), String::from(\"P\")), String::from(\"H\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_14_find_Volume", "prompt": "/// Write a rsthon function to find the volume of a triangular prism.\nfn find_Volume(l: isize, b: isize, h: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_Volume;\n    assert_eq!(candidate(10, 8, 6), 240);\n    assert_eq!(candidate(3, 2, 2), 6);\n    assert_eq!(candidate(1, 2, 1), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "/// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfn text_lowercase_underscore(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_lowercase_underscore;\n    assert_eq!(candidate(String::from(\"aab_cbbbc\")), true);\n    assert_eq!(candidate(String::from(\"aab_Abbbc\")), false);\n    assert_eq!(candidate(String::from(\"Aaab_abbbc\")), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n", "language": "rs"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "/// Write a function to find whether a given vector of integers contains any duplicate element.\nfn test_duplicate(arraynums: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = test_duplicate;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3, 3, 4, 4, 5]), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_20_is_woodall", "prompt": "/// Write a function to check if the given number is woodball or not.\nfn is_woodall(x: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_woodall;\n    assert_eq!(candidate(383), true);\n    assert_eq!(candidate(254), false);\n    assert_eq!(candidate(200), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_56_checks", "prompt": "/// Write a rsthon function to check if a given number is one less than twice its reverse.\nfn checks(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = checks;\n    assert_eq!(candidate(70), false);\n    assert_eq!(candidate(23), false);\n    assert_eq!(candidate(73), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "/// Write a rsthon function to find the largest number that can be formed with the given vector of digits.\nfn find_Max_Num(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_Max_Num;\n    assert_eq!(candidate(vec![1, 2, 3]), 321);\n    assert_eq!(candidate(vec![4, 5, 6, 1]), 6541);\n    assert_eq!(candidate(vec![1, 2, 3, 9]), 9321);\n}\n", "language": "rs"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "/// Write a rsthon function to check whether the given two integers have opposite sign or not.\nfn opposite_Signs(x: isize, y: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = opposite_Signs;\n    assert_eq!(candidate(1, -2), true);\n    assert_eq!(candidate(3, 2), false);\n    assert_eq!(candidate(-10, -10), false);\n    assert_eq!(candidate(-2, 2), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "/// Write a function to find the nth octagonal number.\nfn is_octagonal(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = is_octagonal;\n    assert_eq!(candidate(5), 65);\n    assert_eq!(candidate(10), 280);\n    assert_eq!(candidate(15), 645);\n}\n", "language": "rs"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "/// Write a rsthon function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n", "language": "rs"}, {"task_id": "mbpp_62_smallest_num", "prompt": "/// Write a rsthon function to find smallest number in a vector.\nfn smallest_num(xs: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = smallest_num;\n    assert_eq!(candidate(vec![10, 20, 1, 45, 99]), 1);\n    assert_eq!(candidate(vec![1, 2, 3]), 1);\n    assert_eq!(candidate(vec![45, 46, 50, 60]), 45);\n}\n", "language": "rs"}, {"task_id": "mbpp_63_max_difference", "prompt": "/// Write a function to find the maximum difference between available pairs in the given tuple vector.\nfn max_difference(test_list: Vec<(isize, isize)>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_difference;\n    assert_eq!(candidate(vec![(3, 5), (1, 7), (10, 3), (1, 2)]), 7);\n    assert_eq!(candidate(vec![(4, 6), (2, 17), (9, 13), (11, 12)]), 15);\n    assert_eq!(candidate(vec![(12, 35), (21, 27), (13, 23), (41, 22)]), 23);\n}\n", "language": "rs"}, {"task_id": "mbpp_64_subject_marks", "prompt": "/// Write a function to sort a vector of tuples using the second value of each tuple.\nfn subject_marks(subjectmarks: Vec<(String, isize)>) -> Vec<(String, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = subject_marks;\n    assert_eq!(candidate(vec![(String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97), (String::from(\"Social sciences\"), 82)]), vec![(String::from(\"Social sciences\"), 82), (String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97)]);\n    assert_eq!(candidate(vec![(String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54), (String::from(\"Social\"), 33)]), vec![(String::from(\"Social\"), 33), (String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54)]);\n    assert_eq!(candidate(vec![(String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97), (String::from(\"Biology\"), 45)]), vec![(String::from(\"Biology\"), 45), (String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_66_pos_count", "prompt": "/// Write a rsthon function to count the number of positive numbers in a vector.\nfn pos_count(list: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = pos_count;\n    assert_eq!(candidate(vec![1, -2, 3, -4]), 2);\n    assert_eq!(candidate(vec![3, 4, 5, -1]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_67_bell_number", "prompt": "/// Write a function to find the number of ways to partition a set of Bell numbers.\nfn bell_number(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = bell_number;\n    assert_eq!(candidate(2), 2);\n    assert_eq!(candidate(10), 115975);\n    assert_eq!(candidate(56), 6775685320645824322581483068371419745979053216268760300);\n}\n", "language": "rs"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "/// Write a rsthon function to check whether the given vector is monotonic or not.\nfn is_Monotonic(A: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_Monotonic;\n    assert_eq!(candidate(vec![6, 5, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 3, 2]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_69_is_sublist", "prompt": "/// Write a function to check whether a vector contains the given subvector or not.\nfn is_sublist(l: Vec<isize>, s: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_sublist;\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![4, 3]), true);\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![1, 6]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_70_get_equal", "prompt": "/// Write a function to find whether all the given vectors have equal length or not.\nfn get_equal(Input: Vec<Vec<isize>>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = get_equal;\n    assert_eq!(candidate(vec![vec![11, 22, 33], vec![44, 55, 66]]), true);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6, 7]]), false);\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]]), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_71_comb_sort", "prompt": "/// Write a function to sort a vector of elements.\nfn comb_sort(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = comb_sort;\n    assert_eq!(candidate(vec![5, 15, 37, 25, 79]), vec![5, 15, 25, 37, 79]);\n    assert_eq!(candidate(vec![41, 32, 15, 19, 22]), vec![15, 19, 22, 32, 41]);\n    assert_eq!(candidate(vec![99, 15, 13, 47]), vec![13, 15, 47, 99]);\n}\n", "language": "rs"}, {"task_id": "mbpp_72_dif_Square", "prompt": "/// Write a rsthon function to check whether the given number can be represented as the difference of two squares or not.\nfn dif_Square(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = dif_Square;\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(15), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "/// Write a function to check whether it follows the sequence given in the patterns vector.\nfn is_samepatterns(colors: Vec<String>, patterns: Vec<String>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_samepatterns;\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"green\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), true);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), false);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\")]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_75_find_tuples", "prompt": "/// Write a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfn find_tuples(test_list: Vec<(isize, isize, isize)>, K: isize) -> Vec<(isize, isize, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = find_tuples;\n    assert_eq!(candidate(vec![(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6), vec![(6, 24, 12)]);\n    assert_eq!(candidate(vec![(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5), vec![(5, 25, 30)]);\n    assert_eq!(candidate(vec![(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4), vec![(8, 16, 4)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_77_is_Diff", "prompt": "/// Write a rsthon function to find whether a number is divisible by 11.\nfn is_Diff(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_Diff;\n    assert_eq!(candidate(12345), false);\n    assert_eq!(candidate(1212112), true);\n    assert_eq!(candidate(1212), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_79_word_len", "prompt": "/// Write a rsthon function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "/// Write a function to find the nth tetrahedral number.\nfn tetrahedral_number(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = tetrahedral_number;\n    assert_eq!(candidate(5), 35);\n    assert_eq!(candidate(6), 56);\n    assert_eq!(candidate(7), 84);\n}\n", "language": "rs"}, {"task_id": "mbpp_83_get_Char", "prompt": "/// Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_84_sequence", "prompt": "/// Write a function to find the nth number in the newman conway sequence.\nfn sequence(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sequence;\n    assert_eq!(candidate(10), 6);\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(3), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "/// Write a function to find nth centered hexagonal number.\nfn centered_hexagonal_number(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = centered_hexagonal_number;\n    assert_eq!(candidate(10), 271);\n    assert_eq!(candidate(2), 7);\n    assert_eq!(candidate(9), 217);\n}\n", "language": "rs"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "use std::collections::HashMap;\n\n/// Write a function to merge three dictionaries into a single HashMap.\nfn merge_dictionaries_three(dict1: HashMap<String, String>, dict2: HashMap<String, String>, dict3: HashMap<String, String>) -> HashMap<String, String> {\n", "test": "}\n\nfn main() {\n    let candidate = merge_dictionaries_three;\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"O\"), String::from(\"Orange\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"B\"), String::from(\"Black\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"O\"), String::from(\"Orange\"))]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))])), HashMap::from([(String::from(\"W\"), String::from(\"White\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\"))]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\")), (String::from(\"W\"), String::from(\"White\"))]));\n}\n", "language": "rs"}, {"task_id": "mbpp_88_freq_count", "prompt": "use std::collections::HashMap;\n\n/// Write a function to get the frequency of all the elements in a vector, returned as a HashMap.\nfn freq_count(list1: Vec<isize>) -> HashMap<isize, isize> {\n", "test": "}\n\nfn main() {\n    let candidate = freq_count;\n    assert_eq!(candidate(vec![10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]), HashMap::from([(10, 4), (20, 4), (40, 2), (50, 2), (30, 1)]));\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]), HashMap::from([(1, 3), (2, 2), (3, 3), (4, 3)]));\n    assert_eq!(candidate(vec![5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]), HashMap::from([(10, 1), (5, 3), (6, 2), (7, 2), (4, 2), (9, 2)]));\n}\n", "language": "rs"}, {"task_id": "mbpp_89_closest_num", "prompt": "/// Write a function to find the closest smaller number than n.\nfn closest_num(N: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = closest_num;\n    assert_eq!(candidate(11), 10);\n    assert_eq!(candidate(7), 6);\n    assert_eq!(candidate(12), 11);\n}\n", "language": "rs"}, {"task_id": "mbpp_90_len_log", "prompt": "/// Write a rsthon function to find the length of the longest word.\nfn len_log(list1: Vec<String>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = len_log;\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"PHP\"), String::from(\"bigdata\")]), 7);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]), 3);\n    assert_eq!(candidate(vec![String::from(\"small\"), String::from(\"big\"), String::from(\"tall\")]), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_91_find_substring", "prompt": "/// Write a function to check if a string is present as a substring in a given vector of string values.\nfn find_substring(str1: Vec<String>, sub_str: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = find_substring;\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ack\")), true);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"abc\")), false);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ange\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_92_is_undulating", "prompt": "/// Write a function to check whether the given number is undulating or not.\nfn is_undulating(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_undulating;\n    assert_eq!(candidate(1212121), true);\n    assert_eq!(candidate(1991), false);\n    assert_eq!(candidate(121), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_93_power", "prompt": "/// Write a function to calculate the value of 'a' to the power 'b'.\nfn power(a: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = power;\n    assert_eq!(candidate(3, 4), 81);\n    assert_eq!(candidate(2, 3), 8);\n    assert_eq!(candidate(5, 5), 3125);\n}\n", "language": "rs"}, {"task_id": "mbpp_94_index_minimum", "prompt": "/// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfn index_minimum(test_list: Vec<(String, isize)>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = index_minimum;\n    assert_eq!(candidate(vec![(String::from(\"Rash\"), 143), (String::from(\"Manjeet\"), 200), (String::from(\"Varsha\"), 100)]), String::from(\"Varsha\"));\n    assert_eq!(candidate(vec![(String::from(\"Yash\"), 185), (String::from(\"Dawood\"), 125), (String::from(\"Sanya\"), 175)]), String::from(\"Dawood\"));\n    assert_eq!(candidate(vec![(String::from(\"Sai\"), 345), (String::from(\"Salman\"), 145), (String::from(\"Ayesha\"), 96)]), String::from(\"Ayesha\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "/// Write a rsthon function to find the length of the smallest vector in a vector of vectors.\nfn Find_Min_Length(lst: Vec<Vec<isize>>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = Find_Min_Length;\n    assert_eq!(candidate(vec![vec![1], vec![1, 2]]), 1);\n    assert_eq!(candidate(vec![vec![1, 2], vec![1, 2, 3], vec![1, 2, 3, 4]]), 2);\n    assert_eq!(candidate(vec![vec![3, 3, 3], vec![4, 4, 4, 4]]), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_96_divisor", "prompt": "/// Write a rsthon function to find the number of divisors of a given integer.\nfn divisor(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = divisor;\n    assert_eq!(candidate(15), 4);\n    assert_eq!(candidate(12), 6);\n    assert_eq!(candidate(9), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "use std::collections::HashMap;\n\n/// Write a function to find frequency of each element in a flattened vector of vectors, returned in a HashMap.\nfn frequency_lists(list1: Vec<Vec<isize>>) -> HashMap<isize, isize> {\n", "test": "}\n\nfn main() {\n    let candidate = frequency_lists;\n    assert_eq!(candidate(vec![vec![1, 2, 3, 2], vec![4, 5, 6, 2], vec![7, 8, 9, 5]]), HashMap::from([(1, 1), (2, 3), (3, 1), (4, 1), (5, 2), (6, 1), (7, 1), (8, 1), (9, 1)]));\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12]]), HashMap::from([(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]));\n    assert_eq!(candidate(vec![vec![20, 30, 40, 17], vec![18, 16, 14, 13], vec![10, 20, 30, 40]]), HashMap::from([(20, 2), (30, 2), (40, 2), (17, 1), (18, 1), (16, 1), (14, 1), (13, 1), (10, 1)]));\n}\n", "language": "rs"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfn decimal_to_binary(n: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(8), String::from(\"1000\"));\n    assert_eq!(candidate(18), String::from(\"10010\"));\n    assert_eq!(candidate(7), String::from(\"111\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "/// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfn next_smallest_palindrome(num: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = next_smallest_palindrome;\n    assert_eq!(candidate(99), 101);\n    assert_eq!(candidate(1221), 1331);\n    assert_eq!(candidate(120), 121);\n}\n", "language": "rs"}, {"task_id": "mbpp_101_kth_element", "prompt": "/// Write a function to find the kth element in the given vector using 1-based indexing.\nfn kth_element(arr: Vec<isize>, k: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = kth_element;\n    assert_eq!(candidate(vec![12, 3, 5, 7, 19], 2), 3);\n    assert_eq!(candidate(vec![17, 24, 8, 23], 3), 8);\n    assert_eq!(candidate(vec![16, 21, 25, 36, 4], 4), 36);\n}\n", "language": "rs"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "/// Write a function to convert a snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"python_program\")), String::from(\"PythonProgram\"));\n    assert_eq!(candidate(String::from(\"python_language\")), String::from(\"PythonLanguage\"));\n    assert_eq!(candidate(String::from(\"programming_language\")), String::from(\"ProgrammingLanguage\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "/// Write a function to find the Eulerian number a(n, m).\nfn eulerian_num(n: isize, m: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = eulerian_num;\n    assert_eq!(candidate(3, 1), 4);\n    assert_eq!(candidate(4, 1), 11);\n    assert_eq!(candidate(5, 3), 26);\n}\n", "language": "rs"}, {"task_id": "mbpp_104_sort_sublists", "prompt": "/// Write a function to sort each subvector of strings in a given vector of vectors.\nfn sort_sublists(input_list: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_sublists;\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\"blue \"), String::from(\" black\")], vec![String::from(\" orange\"), String::from(\"brown\")]]), vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\" black\"), String::from(\"blue \")], vec![String::from(\" orange\"), String::from(\"brown\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"zilver\"), String::from(\"gold\")], vec![String::from(\"magnesium\"), String::from(\"aluminium\")], vec![String::from(\"steel\"), String::from(\"bronze\")]]), vec![vec![String::from(\"gold\"), String::from(\"zilver\")], vec![String::from(\"aluminium\"), String::from(\"magnesium\")], vec![String::from(\"bronze\"), String::from(\"steel\")]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_105_count", "prompt": "/// Write a rsthon function to count true booleans in the given vector.\nfn count(lst: Vec<bool>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_106_add_lists", "prompt": "/// Write a function to append the given vector to the given tuples.\nfn add_lists(test_list: Vec<isize>, test_tup: (isize, isize)) -> (isize, isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = add_lists;\n    assert_eq!(candidate(vec![5, 6, 7], (9, 10)), (9, 10, 5, 6, 7));\n    assert_eq!(candidate(vec![6, 7, 8], (10, 11)), (10, 11, 6, 7, 8));\n    assert_eq!(candidate(vec![7, 8, 9], (11, 12)), (11, 12, 7, 8, 9));\n}\n", "language": "rs"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "/// Write a function to merge three vectors into a single sorted vector.\nfn merge_sorted_list(num1: Vec<isize>, num2: Vec<isize>, num3: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = merge_sorted_list;\n    assert_eq!(candidate(vec![25, 24, 15, 4, 5, 29, 110], vec![19, 20, 11, 56, 25, 233, 154], vec![24, 26, 54, 48]), vec![4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);\n    assert_eq!(candidate(vec![1, 3, 5, 6, 8, 9], vec![2, 5, 7, 11], vec![1, 4, 7, 8, 12]), vec![1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);\n    assert_eq!(candidate(vec![18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], vec![25, 35, 22, 85, 14, 65, 75, 25, 58], vec![12, 74, 9, 50, 61, 41]), vec![1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);\n}\n", "language": "rs"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "/// Write a rsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfn odd_Equivalent(s: String, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = odd_Equivalent;\n    assert_eq!(candidate(String::from(\"011001\"), 6), 3);\n    assert_eq!(candidate(String::from(\"11011\"), 5), 4);\n    assert_eq!(candidate(String::from(\"1010\"), 4), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_113_check_integer", "prompt": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "/// Write a function to convert a given tuple of positive integers into a single integer.\nfn tuple_to_int(nums: (isize, isize, isize)) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = tuple_to_int;\n    assert_eq!(candidate((1, 2, 3)), 123);\n    assert_eq!(candidate((4, 5, 6)), 456);\n    assert_eq!(candidate((5, 6, 7)), 567);\n}\n", "language": "rs"}, {"task_id": "mbpp_117_list_to_float", "prompt": "/// Write a function to convert all possible convertible elements in a vector of vectors to floats.\nfn list_to_float(test_list: Vec<(String, String)>) -> Vec<(f64, f64)> {\n", "test": "}\n\nfn main() {\n    let candidate = list_to_float;\n    assert_eq!(candidate(vec![(String::from(\"3\"), String::from(\"4\")), (String::from(\"1\"), String::from(\"26.45\")), (String::from(\"7.32\"), String::from(\"8\")), (String::from(\"4\"), String::from(\"8\"))]), vec![(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]);\n    assert_eq!(candidate(vec![(String::from(\"4\"), String::from(\"4\")), (String::from(\"2\"), String::from(\"27\")), (String::from(\"4.12\"), String::from(\"9\")), (String::from(\"7\"), String::from(\"11\"))]), vec![(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]);\n    assert_eq!(candidate(vec![(String::from(\"6\"), String::from(\"78\")), (String::from(\"5\"), String::from(\"26.45\")), (String::from(\"1.33\"), String::from(\"4\")), (String::from(\"82\"), String::from(\"13\"))]), vec![(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_118_string_to_list", "prompt": "/// Write a function to convert a string to a vector of strings split on the space character.\nfn string_to_list(string: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = string_to_list;\n    assert_eq!(candidate(String::from(\"python programming\")), vec![String::from(\"python\"), String::from(\"programming\")]);\n    assert_eq!(candidate(String::from(\"lists tuples strings\")), vec![String::from(\"lists\"), String::from(\"tuples\"), String::from(\"strings\")]);\n    assert_eq!(candidate(String::from(\"write a program\")), vec![String::from(\"write\"), String::from(\"a\"), String::from(\"program\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_119_search", "prompt": "/// Write a rsthon function to find the element that appears only once in a sorted vector.\nfn search(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]), 8);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4, 4]), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "/// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfn max_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_product_tuple;\n    assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 36);\n    assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 200);\n    assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 484);\n}\n", "language": "rs"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "/// Write a function to sum all amicable numbers from 1 to a specified number.\nfn amicable_numbers_sum(limit: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = amicable_numbers_sum;\n    assert_eq!(candidate(999), 504);\n    assert_eq!(candidate(9999), 31626);\n    assert_eq!(candidate(99), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_125_find_length", "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_126_sum", "prompt": "/// Write a rsthon function to find the sum of common divisors of two given numbers.\nfn sum(a: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum;\n    assert_eq!(candidate(10, 15), 6);\n    assert_eq!(candidate(100, 150), 93);\n    assert_eq!(candidate(4, 6), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_127_multiply_int", "prompt": "/// Write a function to multiply two integers.\nfn multiply_int(x: isize, y: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = multiply_int;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(5, 10), 50);\n    assert_eq!(candidate(4, 8), 32);\n}\n", "language": "rs"}, {"task_id": "mbpp_128_long_words", "prompt": "/// Write a function to find words that are longer than n characters from a given vector of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "/// Write a function to calculate whether the matrix is a magic square.\nfn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = magic_square_test;\n    assert_eq!(candidate(vec![vec![7, 12, 1, 14], vec![2, 13, 8, 11], vec![16, 3, 10, 5], vec![9, 6, 15, 4]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 8]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 7]]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "/// Write a function to find the item with maximum frequency in a given vector.\nfn max_occurrences(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_occurrences;\n    assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]), 2);\n    assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]), 8);\n    assert_eq!(candidate(vec![10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]), 20);\n}\n", "language": "rs"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "/// Write a rsthon function to reverse only the vowels of a given string (where y is not a vowel).\nfn reverse_vowels(str1: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = reverse_vowels;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"USA\")), String::from(\"ASU\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"ab\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_132_tup_string", "prompt": "/// Write a function to convert a vector to a string.\nfn tup_string(tup1: Vec<String>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = tup_string;\n    assert_eq!(candidate(vec![String::from(\"e\"), String::from(\"x\"), String::from(\"e\"), String::from(\"r\"), String::from(\"c\"), String::from(\"i\"), String::from(\"s\"), String::from(\"e\"), String::from(\"s\")]), String::from(\"exercises\"));\n    assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]), String::from(\"program\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "/// Write a function to calculate the sum of the negative numbers of a given vector of numbers.\nfn sum_negativenum(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_negativenum;\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), -32);\n    assert_eq!(candidate(vec![10, 15, -14, 13, -18, 12, -20]), -52);\n    assert_eq!(candidate(vec![19, -65, 57, 39, 152, -639, 121, 44, 90, -190]), -894);\n}\n", "language": "rs"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "/// Write a function to find the nth hexagonal number.\nfn hexagonal_num(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = hexagonal_num;\n    assert_eq!(candidate(10), 190);\n    assert_eq!(candidate(5), 45);\n    assert_eq!(candidate(7), 91);\n}\n", "language": "rs"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "/// Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "/// Write a function to sort a vector of elements.\nfn pancake_sort(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = pancake_sort;\n    assert_eq!(candidate(vec![15, 79, 25, 38, 69]), vec![15, 25, 38, 69, 79]);\n    assert_eq!(candidate(vec![98, 12, 54, 36, 85]), vec![12, 36, 54, 85, 98]);\n    assert_eq!(candidate(vec![41, 42, 32, 12, 23]), vec![12, 23, 32, 41, 42]);\n}\n", "language": "rs"}, {"task_id": "mbpp_142_count_samepair", "prompt": "/// Write a function to count number items that are identical in the same position of three given vectors.\nfn count_samepair(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_samepair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9], vec![2, 1, 3, 1, 2, 6, 7, 9]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 2, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "/// Write a rsthon function to find the maximum difference between any two elements in a given vector.\nfn max_Abs_Diff(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_Abs_Diff;\n    assert_eq!(candidate(vec![2, 1, 5, 3]), 4);\n    assert_eq!(candidate(vec![9, 3, 2, 5, 1]), 8);\n    assert_eq!(candidate(vec![3, 2, 1]), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_160_find_solution", "prompt": "/// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfn find_solution(a: isize, b: isize, n: isize) -> Option<(isize, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = find_solution;\n    assert_eq!(candidate(2, 3, 7), Some((2, 1)));\n    assert_eq!(candidate(4, 2, 7), None);\n    assert_eq!(candidate(1, 13, 17), Some((4, 1)));\n}\n", "language": "rs"}, {"task_id": "mbpp_161_remove_elements", "prompt": "/// Write a function to remove all elements from a given vector present in another vector.\nfn remove_elements(list1: Vec<isize>, list2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = remove_elements;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![2, 4, 6, 8]), vec![1, 3, 5, 7, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![1, 3, 5, 7]), vec![2, 4, 6, 8, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![5, 7]), vec![1, 2, 3, 4, 6, 8, 9, 10]);\n}\n", "language": "rs"}, {"task_id": "mbpp_162_sum_series", "prompt": "/// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfn sum_series(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_series;\n    assert_eq!(candidate(6), 12);\n    assert_eq!(candidate(10), 30);\n    assert_eq!(candidate(9), 25);\n}\n", "language": "rs"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "/// Write a function to determine if the sum of the divisors of two integers are the same.\nfn are_equivalent(num1: isize, num2: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = are_equivalent;\n    assert_eq!(candidate(36, 57), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(23, 47), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_165_count_char_position", "prompt": "/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfn count_char_position(str1: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_char_position;\n    assert_eq!(candidate(String::from(\"xbcefg\")), 2);\n    assert_eq!(candidate(String::from(\"ABcED\")), 3);\n    assert_eq!(candidate(String::from(\"AbgdeF\")), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "/// Write a function that counts the number of pairs of integers in a vector that xor to an even number.\nfn find_even_pair(A: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_even_pair;\n    assert_eq!(candidate(vec![5, 4, 7, 2, 1]), 4);\n    assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11]), 9);\n    assert_eq!(candidate(vec![1, 2, 3]), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "/// Write a rsthon function to find the smallest power of 2 greater than or equal to n.\nfn next_power_of_2(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = next_power_of_2;\n    assert_eq!(candidate(0), 1);\n    assert_eq!(candidate(5), 8);\n    assert_eq!(candidate(17), 32);\n}\n", "language": "rs"}, {"task_id": "mbpp_168_frequency", "prompt": "/// Write a function to count the number of occurrences of a number in a given vector.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "/// Write a function to find the sum of numbers in a vector within a range specified by two indices.\nfn sum_range_list(list1: Vec<isize>, m: isize, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_range_list;\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10), 29);\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7), 16);\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10), 38);\n}\n", "language": "rs"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "/// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfn perimeter_pentagon(a: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = perimeter_pentagon;\n    assert_eq!(candidate(5), 25);\n    assert_eq!(candidate(10), 50);\n    assert_eq!(candidate(15), 75);\n}\n", "language": "rs"}, {"task_id": "mbpp_172_count_occurance", "prompt": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_223_is_majority", "prompt": "/// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "/// Write a rsthon function to count the number of set bits (binary digits with value 1) in a given number.\nfn count_Set_Bits(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_Set_Bits;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(4), 1);\n    assert_eq!(candidate(6), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "/// Write a rsthon function to remove the characters which have odd index values of a given string.\nfn odd_values_string(str: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = odd_values_string;\n    assert_eq!(candidate(String::from(\"abcdef\")), String::from(\"ace\"));\n    assert_eq!(candidate(String::from(\"python\")), String::from(\"pto\"));\n    assert_eq!(candidate(String::from(\"data\")), String::from(\"dt\"));\n    assert_eq!(candidate(String::from(\"lambs\")), String::from(\"lms\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_227_min_of_three", "prompt": "/// Write a function to find minimum of three numbers.\nfn min_of_three(a: isize, b: isize, c: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = min_of_three;\n    assert_eq!(candidate(10, 20, 0), 0);\n    assert_eq!(candidate(19, 15, 18), 15);\n    assert_eq!(candidate(-10, -20, -30), -30);\n}\n", "language": "rs"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "/// Write a rsthon function to check whether all the bits are unset in the given range or not.\nfn all_Bits_Set_In_The_Given_Range(n: isize, l: isize, r: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = all_Bits_Set_In_The_Given_Range;\n    assert_eq!(candidate(4, 1, 2), true);\n    assert_eq!(candidate(17, 2, 4), true);\n    assert_eq!(candidate(39, 4, 6), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "/// Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfn re_arrange_array(arr: Vec<isize>, n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = re_arrange_array;\n    assert_eq!(candidate(vec![-1, 2, -3, 4, 5, 6, -7, 8, 9], 9), vec![-1, -3, -7, 4, 5, 6, 2, 8, 9]);\n    assert_eq!(candidate(vec![12, -14, -26, 13, 15], 5), vec![-14, -26, 12, 13, 15]);\n    assert_eq!(candidate(vec![10, 24, 36, -42, -39, -78, 85], 7), vec![-42, -39, -78, 10, 24, 36, 85]);\n}\n", "language": "rs"}, {"task_id": "mbpp_230_replace_blank", "prompt": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_234_volume_cube", "prompt": "/// Write a function to find the volume of a cube given its side length.\nfn volume_cube(l: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = volume_cube;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(2), 8);\n    assert_eq!(candidate(5), 125);\n}\n", "language": "rs"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "/// Write a rsthon function to count the number of non-empty substrings of a given string.\nfn number_of_substrings(str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = number_of_substrings;\n    assert_eq!(candidate(String::from(\"abc\")), 6);\n    assert_eq!(candidate(String::from(\"abcd\")), 10);\n    assert_eq!(candidate(String::from(\"abcde\")), 15);\n}\n", "language": "rs"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "/// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfn get_total_number_of_sequences(m: isize, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = get_total_number_of_sequences;\n    assert_eq!(candidate(10, 4), 4);\n    assert_eq!(candidate(5, 2), 6);\n    assert_eq!(candidate(16, 3), 84);\n}\n", "language": "rs"}, {"task_id": "mbpp_242_count_charac", "prompt": "/// Write a function to count the total number of characters in a string.\nfn count_charac(str1: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_charac;\n    assert_eq!(candidate(String::from(\"python programming\")), 18);\n    assert_eq!(candidate(String::from(\"language\")), 8);\n    assert_eq!(candidate(String::from(\"words\")), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "/// Write a rsthon function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n", "language": "rs"}, {"task_id": "mbpp_245_max_sum", "prompt": "/// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfn max_sum(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_sum;\n    assert_eq!(candidate(vec![1, 15, 51, 45, 33, 100, 12, 18, 9]), 194);\n    assert_eq!(candidate(vec![80, 60, 30, 40, 20, 10]), 210);\n    assert_eq!(candidate(vec![2, 3, 14, 16, 21, 23, 29, 30]), 138);\n}\n", "language": "rs"}, {"task_id": "mbpp_247_lps", "prompt": "/// Write a function to find the length of the longest palindromic subsequence in the given string.\nfn lps(str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = lps;\n    assert_eq!(candidate(String::from(\"TENS FOR TENS\")), 5);\n    assert_eq!(candidate(String::from(\"CARDIO FOR CARDS\")), 7);\n    assert_eq!(candidate(String::from(\"PART OF THE JOURNEY IS PART\")), 9);\n}\n", "language": "rs"}, {"task_id": "mbpp_249_intersection_array", "prompt": "/// Write a function to find the intersection of two vectors.\nfn intersection_array(array_nums1: Vec<isize>, array_nums2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = intersection_array;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![1, 2, 4, 8, 9]), vec![1, 2, 8, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![3, 5, 7, 9]), vec![3, 5, 7, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![10, 20, 30, 40]), vec![10]);\n}\n", "language": "rs"}, {"task_id": "mbpp_250_count_X", "prompt": "/// Write a rsthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfn count_X(tup: Vec<isize>, x: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_X;\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4), 0);\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10), 3);\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_251_insert_element", "prompt": "/// Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfn insert_element(list: Vec<String>, element: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = insert_element;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Black\")], String::from(\"c\")), vec![String::from(\"c\"), String::from(\"Red\"), String::from(\"c\"), String::from(\"Green\"), String::from(\"c\"), String::from(\"Black\")]);\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"java\")], String::from(\"program\")), vec![String::from(\"program\"), String::from(\"python\"), String::from(\"program\"), String::from(\"java\")]);\n    assert_eq!(candidate(vec![String::from(\"happy\"), String::from(\"sad\")], String::from(\"laugh\")), vec![String::from(\"laugh\"), String::from(\"happy\"), String::from(\"laugh\"), String::from(\"sad\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_252_convert", "prompt": "/// Write a rsthon function to convert complex numbers to polar coordinates.\nfn convert(numbers: isize) -> (f64, f64) {\n", "test": "}\n\nfn main() {\n    let candidate = convert;\n    assert_eq!(candidate(1), (1.0, 0.0));\n    assert_eq!(candidate(4), (4.0, 0.0));\n    assert_eq!(candidate(5), (5.0, 0.0));\n}\n", "language": "rs"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "/// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\nfn combinations_colors(l: Vec<String>, n: isize) -> Vec<Vec<String>> {\n", "test": "}\n\nfn main() {\n    let candidate = combinations_colors;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 1), vec![vec![String::from(\"Red\")], vec![String::from(\"Green\")], vec![String::from(\"Blue\")]]);\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 2), vec![vec![String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\")]]);\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 3), vec![vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\"), String::from(\"Blue\")]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "/// Write a rsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfn count_Primes_nums(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_Primes_nums;\n    assert_eq!(candidate(5), 2);\n    assert_eq!(candidate(10), 4);\n    assert_eq!(candidate(100), 25);\n}\n", "language": "rs"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "/// Write a function that takes in two numbers and returns a vector with the second number and then the first number.\nfn swap_numbers(a: isize, b: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = swap_numbers;\n    assert_eq!(candidate(10, 20), vec![20, 10]);\n    assert_eq!(candidate(15, 17), vec![17, 15]);\n    assert_eq!(candidate(100, 200), vec![200, 100]);\n}\n", "language": "rs"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "/// Write a function to maximize the given two vectors.\nfn maximize_elements(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = maximize_elements;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 7], vec![4, 9], vec![2, 9], vec![7, 10]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![7, 8], vec![5, 10], vec![3, 10], vec![8, 11]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![8, 9], vec![6, 11], vec![4, 11], vec![9, 12]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_260_newman_prime", "prompt": "/// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfn newman_prime(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = newman_prime;\n    assert_eq!(candidate(3), 7);\n    assert_eq!(candidate(4), 17);\n    assert_eq!(candidate(5), 41);\n}\n", "language": "rs"}, {"task_id": "mbpp_261_division_elements", "prompt": "/// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfn division_elements(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = division_elements;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (2, 2, 2, 3));\n    assert_eq!(candidate((12, 6, 8, 16), (6, 3, 4, 4)), (2, 2, 2, 4));\n    assert_eq!(candidate((20, 14, 36, 18), (5, 7, 6, 9)), (4, 2, 6, 2));\n}\n", "language": "rs"}, {"task_id": "mbpp_264_dog_age", "prompt": "/// Write a function to calculate a dog's age in dog's years.\nfn dog_age(h_age: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = dog_age;\n    assert_eq!(candidate(12), 61);\n    assert_eq!(candidate(15), 73);\n    assert_eq!(candidate(24), 109);\n}\n", "language": "rs"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "/// Write a function to find the lateral surface area of a cube given its side length.\nfn lateralsurface_cube(l: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = lateralsurface_cube;\n    assert_eq!(candidate(5), 100);\n    assert_eq!(candidate(9), 324);\n    assert_eq!(candidate(10), 400);\n}\n", "language": "rs"}, {"task_id": "mbpp_267_square_Sum", "prompt": "/// Write a rsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfn square_Sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = square_Sum;\n    assert_eq!(candidate(2), 10);\n    assert_eq!(candidate(3), 35);\n    assert_eq!(candidate(4), 84);\n}\n", "language": "rs"}, {"task_id": "mbpp_268_find_star_num", "prompt": "/// Write a function to find the n'th star number.\nfn find_star_num(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_star_num;\n    assert_eq!(candidate(3), 37);\n    assert_eq!(candidate(4), 73);\n    assert_eq!(candidate(5), 121);\n}\n", "language": "rs"}, {"task_id": "mbpp_269_ascii_value", "prompt": "/// Write a function to find the ascii value of a character.\nfn ascii_value(k: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = ascii_value;\n    assert_eq!(candidate(String::from(\"A\")), 65);\n    assert_eq!(candidate(String::from(\"R\")), 82);\n    assert_eq!(candidate(String::from(\"S\")), 83);\n}\n", "language": "rs"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "/// Write a rsthon function to find the sum of even numbers at even positions of a vector.\nfn sum_even_and_even_index(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_even_and_even_index;\n    assert_eq!(candidate(vec![5, 6, 12, 1, 18, 8]), 30);\n    assert_eq!(candidate(vec![3, 20, 17, 9, 2, 10, 18, 13, 6, 18]), 26);\n    assert_eq!(candidate(vec![5, 6, 12, 1]), 12);\n}\n", "language": "rs"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "/// Write a rsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfn even_Power_Sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = even_Power_Sum;\n    assert_eq!(candidate(2), 1056);\n    assert_eq!(candidate(3), 8832);\n    assert_eq!(candidate(1), 32);\n}\n", "language": "rs"}, {"task_id": "mbpp_272_rear_extract", "prompt": "/// Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfn rear_extract(test_list: Vec<(isize, String, isize)>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = rear_extract;\n    assert_eq!(candidate(vec![(1, String::from(\"Rash\"), 21), (2, String::from(\"Varsha\"), 20), (3, String::from(\"Kil\"), 19)]), vec![21, 20, 19]);\n    assert_eq!(candidate(vec![(1, String::from(\"Sai\"), 36), (2, String::from(\"Ayesha\"), 25), (3, String::from(\"Salman\"), 45)]), vec![36, 25, 45]);\n    assert_eq!(candidate(vec![(1, String::from(\"Sudeep\"), 14), (2, String::from(\"Vandana\"), 36), (3, String::from(\"Dawood\"), 56)]), vec![14, 36, 56]);\n}\n", "language": "rs"}, {"task_id": "mbpp_273_substract_elements", "prompt": "/// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfn substract_elements(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> (isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = substract_elements;\n    assert_eq!(candidate((10, 4, 5), (2, 5, 18)), (8, -1, -13));\n    assert_eq!(candidate((11, 2, 3), (24, 45, 16)), (-13, -43, -13));\n    assert_eq!(candidate((7, 18, 9), (10, 11, 12)), (-3, 7, -3));\n}\n", "language": "rs"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "/// Write a rsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfn even_binomial_Coeff_Sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = even_binomial_Coeff_Sum;\n    assert_eq!(candidate(4), 8);\n    assert_eq!(candidate(6), 32);\n    assert_eq!(candidate(2), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_277_dict_filter", "prompt": "use std::collections::HashMap;\n\n/// Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n", "test": "}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n", "language": "rs"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "/// Write a function to find the nth decagonal number.\nfn is_num_decagonal(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = is_num_decagonal;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(7), 175);\n    assert_eq!(candidate(10), 370);\n}\n", "language": "rs"}, {"task_id": "mbpp_280_sequential_search", "prompt": "/// Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfn sequential_search(dlist: Vec<isize>, item: isize) -> (bool, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = sequential_search;\n    assert_eq!(candidate(vec![11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31), (true, 3));\n    assert_eq!(candidate(vec![12, 32, 45, 62, 35, 47, 44, 61], 61), (true, 7));\n    assert_eq!(candidate(vec![9, 10, 17, 19, 22, 39, 48, 56], 48), (true, 6));\n}\n", "language": "rs"}, {"task_id": "mbpp_281_all_unique", "prompt": "/// Write a rsthon function to check if the elements of a given vector are unique or not.\nfn all_unique(test_list: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = all_unique;\n    assert_eq!(candidate(vec![1, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_282_sub_list", "prompt": "/// Write a function to subtract two vectors element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n", "language": "rs"}, {"task_id": "mbpp_283_validate", "prompt": "/// Write a rsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = validate;\n    assert_eq!(candidate(1234), true);\n    assert_eq!(candidate(51241), false);\n    assert_eq!(candidate(321), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfn text_match_two_three(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_match_two_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "/// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_sub_array_sum_repeated;\n    assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);\n    assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);\n    assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);\n}\n", "language": "rs"}, {"task_id": "mbpp_287_square_Sum", "prompt": "/// Write a rsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfn square_Sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = square_Sum;\n    assert_eq!(candidate(2), 20);\n    assert_eq!(candidate(3), 56);\n    assert_eq!(candidate(4), 120);\n}\n", "language": "rs"}, {"task_id": "mbpp_290_max_length", "prompt": "/// Write a function to find the vector of maximum length in a vector of vectors.\nfn max_length(list1: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n", "test": "}\n\nfn main() {\n    let candidate = max_length;\n    assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));\n    assert_eq!(candidate(vec![vec![1], vec![5, 7], vec![10, 12, 14, 15]]), (4, vec![10, 12, 14, 15]));\n    assert_eq!(candidate(vec![vec![5], vec![15, 20, 25]]), (3, vec![15, 20, 25]));\n}\n", "language": "rs"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n", "language": "rs"}, {"task_id": "mbpp_292_find", "prompt": "/// Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n", "language": "rs"}, {"task_id": "mbpp_295_sum_div", "prompt": "/// Write a function to return the sum of all divisors of a number.\nfn sum_div(number: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_div;\n    assert_eq!(candidate(8), 7);\n    assert_eq!(candidate(12), 16);\n    assert_eq!(candidate(7), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "/// Write a rsthon function to count inversions in a vector.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_299_max_aggregate", "prompt": "/// Write a function to calculate the maximum aggregate from the vector of tuples.\nfn max_aggregate(stdata: Vec<(String, isize)>) -> (String, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = max_aggregate;\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 90), (String::from(\"Sabah Colley\"), 88), (String::from(\"Peter Nichols\"), 7), (String::from(\"Juan Whelan\"), 122), (String::from(\"Sabah Colley\"), 84)]), (String::from(\"Juan Whelan\"), 212));\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 50), (String::from(\"Sabah Colley\"), 48), (String::from(\"Peter Nichols\"), 37), (String::from(\"Juan Whelan\"), 22), (String::from(\"Sabah Colley\"), 14)]), (String::from(\"Juan Whelan\"), 72));\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 10), (String::from(\"Sabah Colley\"), 20), (String::from(\"Peter Nichols\"), 30), (String::from(\"Juan Whelan\"), 40), (String::from(\"Sabah Colley\"), 50)]), (String::from(\"Sabah Colley\"), 70));\n}\n", "language": "rs"}, {"task_id": "mbpp_304_find_Element", "prompt": "/// Write a rsthon function to find element at a given index after number of rotations.\nfn find_Element(arr: Vec<isize>, ranges: Vec<Vec<isize>>, rotations: isize, index: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_Element;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![vec![0, 2], vec![0, 3]], 2, 1), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![vec![0, 1], vec![0, 2]], 1, 2), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![vec![0, 1], vec![0, 2]], 1, 1), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_305_start_withp", "prompt": "/// Write a function to return two words from a vector of words starting with letter 'p'.\nfn start_withp(words: Vec<String>) -> (String, String) {\n", "test": "}\n\nfn main() {\n    let candidate = start_withp;\n    assert_eq!(candidate(vec![String::from(\"Python PHP\"), String::from(\"Java JavaScript\"), String::from(\"c c++\")]), (String::from(\"Python\"), String::from(\"PHP\")));\n    assert_eq!(candidate(vec![String::from(\"Python Programming\"), String::from(\"Java Programming\")]), (String::from(\"Python\"), String::from(\"Programming\")));\n    assert_eq!(candidate(vec![String::from(\"Pqrst Pqr\"), String::from(\"qrstuv\")]), (String::from(\"Pqrst\"), String::from(\"Pqr\")));\n}\n", "language": "rs"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfn max_sum_increasing_subseq(a: Vec<isize>, n: isize, index: isize, k: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_sum_increasing_subseq;\n    assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 4, 6), 11);\n    assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 2, 5), 7);\n    assert_eq!(candidate(vec![11, 15, 19, 21, 26, 28, 31], 7, 2, 4), 71);\n}\n", "language": "rs"}, {"task_id": "mbpp_308_large_product", "prompt": "/// Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nfn large_product(nums1: Vec<isize>, nums2: Vec<isize>, N: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = large_product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 3), vec![60, 54, 50]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 4), vec![60, 54, 50, 48]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 5), vec![60, 54, 50, 48, 45]);\n}\n", "language": "rs"}, {"task_id": "mbpp_309_maximum", "prompt": "/// Write a rsthon function to find the maximum of two numbers.\nfn maximum(a: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(5, 10), 10);\n    assert_eq!(candidate(-1, -2), -1);\n    assert_eq!(candidate(9, 7), 9);\n}\n", "language": "rs"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "/// Write a function to convert a given string to a vector of characters.\nfn string_to_tuple(str1: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = string_to_tuple;\n    assert_eq!(candidate(String::from(\"python 3.0\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\"), String::from(\"3\"), String::from(\".\"), String::from(\"0\")]);\n    assert_eq!(candidate(String::from(\"item1\")), vec![String::from(\"i\"), String::from(\"t\"), String::from(\"e\"), String::from(\"m\"), String::from(\"1\")]);\n    assert_eq!(candidate(String::from(\"15.10\")), vec![String::from(\"1\"), String::from(\"5\"), String::from(\".\"), String::from(\"1\"), String::from(\"0\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "/// Write a rsthon function to find the highest power of 2 that is less than or equal to n.\nfn highest_Power_of_2(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = highest_Power_of_2;\n    assert_eq!(candidate(10), 8);\n    assert_eq!(candidate(19), 16);\n    assert_eq!(candidate(32), 32);\n}\n", "language": "rs"}, {"task_id": "mbpp_389_find_lucas", "prompt": "/// Write a function to find the n'th lucas number.\nfn find_lucas(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_lucas;\n    assert_eq!(candidate(9), 76);\n    assert_eq!(candidate(4), 7);\n    assert_eq!(candidate(3), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfn get_max_sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = get_max_sum;\n    assert_eq!(candidate(60), 106);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(2), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_393_max_length_list", "prompt": "/// Write a function to find the vector with maximum length.\nfn max_length_list(input_list: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n", "test": "}\n\nfn main() {\n    let candidate = max_length_list;\n    assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5], vec![1, 2, 3, 4], vec![1, 2, 3], vec![1, 2], vec![1]]), (5, vec![1, 2, 3, 4, 5]));\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![6, 7, 8, 9], vec![10, 11, 12]]), (4, vec![6, 7, 8, 9]));\n}\n", "language": "rs"}, {"task_id": "mbpp_394_check_distinct", "prompt": "/// Write a function to check if given vector contains no duplicates.\nfn check_distinct(test_tup: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_distinct;\n    assert_eq!(candidate(vec![1, 4, 5, 6, 1, 4]), false);\n    assert_eq!(candidate(vec![1, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 6]), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "/// Write a rsthon function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n", "test": "}\n\nfn main() {\n    let candidate = first_non_repeating_character;\n    assert_eq!(candidate(String::from(\"abcabc\")), None);\n    assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));\n}\n", "language": "rs"}, {"task_id": "mbpp_396_check_char", "prompt": "/// Write a function to check whether the given string starts and ends with the same character or not.\nfn check_char(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = check_char;\n    assert_eq!(candidate(String::from(\"abba\")), String::from(\"Valid\"));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"Valid\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"Invalid\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_397_median_numbers", "prompt": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = median_numbers;\n    assert_eq!(candidate(25, 55, 65), 55.0);\n    assert_eq!(candidate(20, 10, 30), 20.0);\n    assert_eq!(candidate(15, 45, 75), 45.0);\n}\n", "language": "rs"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "/// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nfn bitwise_xor(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = bitwise_xor;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (15, 6, 5, 10));\n    assert_eq!(candidate((11, 5, 7, 10), (6, 3, 4, 4)), (13, 6, 3, 14));\n    assert_eq!(candidate((12, 6, 8, 11), (7, 4, 5, 6)), (11, 2, 13, 13));\n}\n", "language": "rs"}, {"task_id": "mbpp_400_extract_freq", "prompt": "/// Write a function to extract the number of unique tuples in the given vector.\nfn extract_freq(test_list: Vec<(isize, isize)>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = extract_freq;\n    assert_eq!(candidate(vec![(3, 4), (1, 2), (4, 3), (5, 6)]), 3);\n    assert_eq!(candidate(vec![(4, 15), (2, 3), (5, 4), (6, 7)]), 4);\n    assert_eq!(candidate(vec![(5, 16), (2, 3), (6, 5), (6, 9)]), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "/// Write a function to perform index wise addition of vector elements in the given two nested vectors.\nfn add_nested_tuples(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = add_nested_tuples;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![7, 10], vec![7, 14], vec![3, 10], vec![8, 13]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![9, 12], vec![9, 16], vec![5, 12], vec![10, 15]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![11, 14], vec![11, 18], vec![7, 14], vec![12, 17]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_404_minimum", "prompt": "/// Write a rsthon function to find the minimum of two numbers.\nfn minimum(a: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = minimum;\n    assert_eq!(candidate(1, 2), 1);\n    assert_eq!(candidate(-5, -4), -5);\n    assert_eq!(candidate(0, 0), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_406_find_Parity", "prompt": "/// Write a rsthon function to find whether the parity of a given number is odd.\nfn find_Parity(x: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = find_Parity;\n    assert_eq!(candidate(12), false);\n    assert_eq!(candidate(7), true);\n    assert_eq!(candidate(10), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "/// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "/// Write a function to find the minimum product from the pairs of tuples within a given vector.\nfn min_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = min_product_tuple;\n    assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 8);\n    assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 30);\n    assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 100);\n}\n", "language": "rs"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_412_remove_odd", "prompt": "/// Write a rsthon function to remove odd numbers from a given vector.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n", "language": "rs"}, {"task_id": "mbpp_414_overlapping", "prompt": "/// Write a rsthon function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_415_max_Product", "prompt": "/// Write a rsthon function to find a pair with highest product from a given vector of integers.\nfn max_Product(arr: Vec<isize>) -> (isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = max_Product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 7, 0, 8, 4]), (7, 8));\n    assert_eq!(candidate(vec![0, -1, -2, -4, 5, 0, -6]), (-4, -6));\n    assert_eq!(candidate(vec![1, 2, 3]), (2, 3));\n}\n", "language": "rs"}, {"task_id": "mbpp_417_group_tuples", "prompt": "/// Write a function to find common first element in given vector of vectors.\nfn group_tuples(Input: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "test": "}\n\nfn main() {\n    let candidate = group_tuples;\n    assert_eq!(candidate(vec![vec![String::from(\"x\"), String::from(\"y\")], vec![String::from(\"x\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]), vec![vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"a\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]), vec![vec![String::from(\"f\"), String::from(\"g\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "/// Write a rsthon function to find the cube sum of first n even natural numbers.\nfn cube_Sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = cube_Sum;\n    assert_eq!(candidate(2), 72);\n    assert_eq!(candidate(3), 288);\n    assert_eq!(candidate(4), 800);\n}\n", "language": "rs"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "/// Write a function to concatenate each element of tuple by the delimiter.\nfn concatenate_tuple(test_tup: (String, String, isize, String)) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = concatenate_tuple;\n    assert_eq!(candidate((String::from(\"ID\"), String::from(\"is\"), 4, String::from(\"UTS\"))), String::from(\"ID-is-4-UTS\"));\n    assert_eq!(candidate((String::from(\"QWE\"), String::from(\"is\"), 4, String::from(\"RTY\"))), String::from(\"QWE-is-4-RTY\"));\n    assert_eq!(candidate((String::from(\"ZEN\"), String::from(\"is\"), 4, String::from(\"OP\"))), String::from(\"ZEN-is-4-OP\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "/// Write a rsthon function to find the average of cubes of first n natural numbers.\nfn find_Average_Of_Cube(n: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = find_Average_Of_Cube;\n    assert_eq!(candidate(2), 4.5);\n    assert_eq!(candidate(3), 12.0);\n    assert_eq!(candidate(1), 1.0);\n}\n", "language": "rs"}, {"task_id": "mbpp_424_extract_rear", "prompt": "/// Write a function to extract only the rear index element of each string in the given tuple.\nfn extract_rear(test_tuple: (String, String, String)) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = extract_rear;\n    assert_eq!(candidate((String::from(\"Mers\"), String::from(\"for\"), String::from(\"Vers\"))), vec![String::from(\"s\"), String::from(\"r\"), String::from(\"s\")]);\n    assert_eq!(candidate((String::from(\"Avenge\"), String::from(\"for\"), String::from(\"People\"))), vec![String::from(\"e\"), String::from(\"r\"), String::from(\"e\")]);\n    assert_eq!(candidate((String::from(\"Gotta\"), String::from(\"get\"), String::from(\"go\"))), vec![String::from(\"a\"), String::from(\"t\"), String::from(\"o\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "/// Write a function to filter odd numbers.\nfn filter_oddnumbers(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = filter_oddnumbers;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 3, 5, 7, 9]);\n    assert_eq!(candidate(vec![10, 20, 45, 67, 84, 93]), vec![45, 67, 93]);\n    assert_eq!(candidate(vec![5, 7, 9, 8, 6, 4, 3]), vec![5, 7, 9, 3]);\n}\n", "language": "rs"}, {"task_id": "mbpp_427_change_date_format", "prompt": "/// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfn change_date_format(dt: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = change_date_format;\n    assert_eq!(candidate(String::from(\"2026-01-02\")), String::from(\"02-01-2026\"));\n    assert_eq!(candidate(String::from(\"2020-11-13\")), String::from(\"13-11-2020\"));\n    assert_eq!(candidate(String::from(\"2021-04-26\")), String::from(\"26-04-2021\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_428_shell_sort", "prompt": "/// Write a function to sort the given vector by using shell sort.\nfn shell_sort(my_list: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = shell_sort;\n    assert_eq!(candidate(vec![12, 23, 4, 5, 3, 2, 12, 81, 56, 95]), vec![2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);\n    assert_eq!(candidate(vec![24, 22, 39, 34, 87, 73, 68]), vec![22, 24, 34, 39, 68, 73, 87]);\n    assert_eq!(candidate(vec![32, 30, 16, 96, 82, 83, 74]), vec![16, 30, 32, 74, 82, 83, 96]);\n}\n", "language": "rs"}, {"task_id": "mbpp_429_and_tuples", "prompt": "/// Write a function to extract the elementwise and tuples from the given two tuples.\nfn and_tuples(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = and_tuples;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (0, 0, 2, 1));\n    assert_eq!(candidate((1, 2, 3, 4), (5, 6, 7, 8)), (1, 2, 3, 0));\n    assert_eq!(candidate((8, 9, 11, 12), (7, 13, 14, 17)), (0, 9, 10, 0));\n}\n", "language": "rs"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "/// Write a function to find the directrix of a parabola.\nfn parabola_directrix(a: isize, b: isize, c: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = parabola_directrix;\n    assert_eq!(candidate(5, 3, 2), -198);\n    assert_eq!(candidate(9, 8, 4), -2336);\n    assert_eq!(candidate(2, 4, 6), -130);\n}\n", "language": "rs"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n", "language": "rs"}, {"task_id": "mbpp_433_check_greater", "prompt": "/// Write a function to check whether the entered number is greater than the elements of the given vector.\nfn check_greater(arr: Vec<isize>, number: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_greater;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 4), false);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 6], 8), true);\n    assert_eq!(candidate(vec![9, 7, 4, 8, 6, 1], 11), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_434_text_match_one", "prompt": "/// Write a function that matches a string that has an a followed by one or more b's.\nfn text_match_one(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_match_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abba\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_435_last_Digit", "prompt": "/// Write a rsthon function to find the last digit of a given number.\nfn last_Digit(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = last_Digit;\n    assert_eq!(candidate(123), 3);\n    assert_eq!(candidate(25), 5);\n    assert_eq!(candidate(30), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_436_neg_nos", "prompt": "/// Write a rsthon function to return the negative numbers in a vector.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n", "language": "rs"}, {"task_id": "mbpp_437_remove_odd", "prompt": "/// Write a function to remove odd characters in a string.\nfn remove_odd(str1: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(String::from(\"python\")), String::from(\"yhn\"));\n    assert_eq!(candidate(String::from(\"program\")), String::from(\"rga\"));\n    assert_eq!(candidate(String::from(\"language\")), String::from(\"agae\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "/// Write a function to count bidirectional tuple pairs.\nfn count_bidirectional(test_list: Vec<(isize, isize)>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_bidirectional;\n    assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]), 3);\n    assert_eq!(candidate(vec![(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]), 2);\n    assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "/// Write a function to join a vector of multiple integers into a single integer.\nfn multiple_to_single(L: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = multiple_to_single;\n    assert_eq!(candidate(vec![11, 33, 50]), 113350);\n    assert_eq!(candidate(vec![-1, 2, 3, 4, 5, 6]), -123456);\n    assert_eq!(candidate(vec![10, 15, 20, 25]), 10152025);\n}\n", "language": "rs"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "/// Write a function to find the first adverb and their positions in a given sentence.\nfn find_adverb_position(text: String) -> (isize, isize, String) {\n", "test": "}\n\nfn main() {\n    let candidate = find_adverb_position;\n    assert_eq!(candidate(String::from(\"clearly!! we can see the sky\")), (0, 7, String::from(\"clearly\")));\n    assert_eq!(candidate(String::from(\"seriously!! there are many roses\")), (0, 9, String::from(\"seriously\")));\n    assert_eq!(candidate(String::from(\"unfortunately!! sita is going to home\")), (0, 13, String::from(\"unfortunately\")));\n}\n", "language": "rs"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "/// Write a function to find the surface area of a cube of a given size.\nfn surfacearea_cube(l: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = surfacearea_cube;\n    assert_eq!(candidate(5), 150);\n    assert_eq!(candidate(3), 54);\n    assert_eq!(candidate(10), 600);\n}\n", "language": "rs"}, {"task_id": "mbpp_442_positive_count", "prompt": "/// Write a function to find the ration of positive numbers in a vector of integers.\nfn positive_count(nums: Vec<isize>) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = positive_count;\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.54);\n    assert_eq!(candidate(vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.69);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.56);\n}\n", "language": "rs"}, {"task_id": "mbpp_443_largest_neg", "prompt": "/// Write a rsthon function to find the largest negative number from the given vector.\nfn largest_neg(list1: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = largest_neg;\n    assert_eq!(candidate(vec![1, 2, 3, -4, -6]), -6);\n    assert_eq!(candidate(vec![1, 2, 3, -8, -9]), -9);\n    assert_eq!(candidate(vec![1, 2, 3, 4, -1]), -1);\n}\n", "language": "rs"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "/// Write a function to trim each vector by k in the given vectors.\nfn trim_tuple(test_list: Vec<Vec<isize>>, K: isize) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = trim_tuple;\n    assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 2), vec![vec![2], vec![9], vec![2], vec![2]]);\n    assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 1), vec![vec![3, 2, 1], vec![4, 9, 2], vec![1, 2, 3], vec![8, 2, 1]]);\n    assert_eq!(candidate(vec![vec![7, 8, 4, 9], vec![11, 8, 12, 4], vec![4, 1, 7, 8], vec![3, 6, 9, 7]], 1), vec![vec![8, 4], vec![8, 12], vec![1, 7], vec![6, 9]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "/// Write a function to perform index wise multiplication of vector elements in the given two vectors.\nfn index_multiplication(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = index_multiplication;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 21], vec![12, 45], vec![2, 9], vec![7, 30]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![14, 32], vec![20, 60], vec![6, 20], vec![16, 44]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![24, 45], vec![30, 77], vec![12, 33], vec![27, 60]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_447_cube_nums", "prompt": "/// Write a function to find cubes of individual elements in a vector.\nfn cube_nums(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = cube_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15]), vec![1728, 3375]);\n}\n", "language": "rs"}, {"task_id": "mbpp_448_cal_sum", "prompt": "/// Write a function to calculate the sum of perrin numbers.\nfn cal_sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = cal_sum;\n    assert_eq!(candidate(9), 49);\n    assert_eq!(candidate(10), 66);\n    assert_eq!(candidate(11), 88);\n}\n", "language": "rs"}, {"task_id": "mbpp_450_extract_string", "prompt": "/// Write a function to extract specified size of strings from a given vector of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "/// Write a function to remove all whitespaces from the given string.\nfn remove_whitespaces(text1: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_whitespaces;\n    assert_eq!(candidate(String::from(\" Google    Flutter \")), String::from(\"GoogleFlutter\"));\n    assert_eq!(candidate(String::from(\" Google    Dart \")), String::from(\"GoogleDart\"));\n    assert_eq!(candidate(String::from(\" iOS    Swift \")), String::from(\"iOSSwift\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_452_loss_amount", "prompt": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n", "language": "rs"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "/// Write a rsthon function to find the sum of even factors of a number.\nfn sumofFactors(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sumofFactors;\n    assert_eq!(candidate(18), 26);\n    assert_eq!(candidate(30), 48);\n    assert_eq!(candidate(6), 8);\n}\n", "language": "rs"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "/// Write a function that matches a word containing 'z'.\nfn text_match_wordz(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_match_wordz;\n    assert_eq!(candidate(String::from(\"pythonz.\")), true);\n    assert_eq!(candidate(String::from(\"xyz.\")), true);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "/// Write a function to check whether the given month number contains 31 days or not.\nfn check_monthnumb_number(monthnum2: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_monthnumb_number;\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(6), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "/// Write a function to reverse each string in a given vector of string values.\nfn reverse_string_list(stringlist: Vec<String>) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = reverse_string_list;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\"), String::from(\"White\"), String::from(\"Black\")]), vec![String::from(\"deR\"), String::from(\"neerG\"), String::from(\"eulB\"), String::from(\"etihW\"), String::from(\"kcalB\")]);\n    assert_eq!(candidate(vec![String::from(\"john\"), String::from(\"amal\"), String::from(\"joel\"), String::from(\"george\")]), vec![String::from(\"nhoj\"), String::from(\"lama\"), String::from(\"leoj\"), String::from(\"egroeg\")]);\n    assert_eq!(candidate(vec![String::from(\"jack\"), String::from(\"john\"), String::from(\"mary\")]), vec![String::from(\"kcaj\"), String::from(\"nhoj\"), String::from(\"yram\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "/// Write a function to find the area of a rectangle.\nfn rectangle_area(l: isize, b: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = rectangle_area;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(10, 5), 50);\n    assert_eq!(candidate(4, 2), 8);\n}\n", "language": "rs"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_460_Extract", "prompt": "/// Write a rsthon function to get the first element of each subvector.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n", "language": "rs"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "/// Write a rsthon function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "/// Write a function to find the maximum product subvector of the given vector.\nfn max_subarray_product(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_subarray_product;\n    assert_eq!(candidate(vec![1, -2, -3, 0, 7, -8, -2]), 112);\n    assert_eq!(candidate(vec![6, -3, -10, 0, 2]), 180);\n    assert_eq!(candidate(vec![-2, -40, 0, -2, -3]), 80);\n}\n", "language": "rs"}, {"task_id": "mbpp_464_check_value", "prompt": "use std::collections::HashMap;\n\n/// Write a function to check if all values are same in a HashMap.\nfn check_value(dict: HashMap<String, isize>, n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_value;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 10), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 12), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 5), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_468_max_product", "prompt": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfn max_product(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n", "language": "rs"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "/// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfn add_pairwise(test_tup: (isize, isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = add_pairwise;\n    assert_eq!(candidate((1, 5, 7, 8, 10)), (6, 12, 15, 18));\n    assert_eq!(candidate((2, 6, 8, 9, 11)), (8, 14, 17, 20));\n    assert_eq!(candidate((3, 7, 9, 10, 12)), (10, 16, 19, 22));\n}\n", "language": "rs"}, {"task_id": "mbpp_471_find_remainder", "prompt": "/// Write a rsthon function to find the product of the vector multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "/// Write a rsthon function to check whether the given vector contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_474_replace_char", "prompt": "/// Write a function to replace characters in a string.\nfn replace_char(str1: String, ch: String, newch: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = replace_char;\n    assert_eq!(candidate(String::from(\"polygon\"), String::from(\"y\"), String::from(\"l\")), String::from(\"pollgon\"));\n    assert_eq!(candidate(String::from(\"character\"), String::from(\"c\"), String::from(\"a\")), String::from(\"aharaater\"));\n    assert_eq!(candidate(String::from(\"python\"), String::from(\"l\"), String::from(\"a\")), String::from(\"python\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_475_sort_counter", "prompt": "use std::collections::HashMap;\n\n/// Write a function to sort a HashMap by value.\nfn sort_counter(dict1: HashMap<String, isize>) -> Vec<(String, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_counter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 81), (String::from(\"Physics\"), 83), (String::from(\"Chemistry\"), 87)])), vec![(String::from(\"Chemistry\"), 87), (String::from(\"Physics\"), 83), (String::from(\"Math\"), 81)]);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)])), vec![(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)]);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 900), (String::from(\"Physics\"), 1000), (String::from(\"Chemistry\"), 1250)])), vec![(String::from(\"Chemistry\"), 1250), (String::from(\"Physics\"), 1000), (String::from(\"Math\"), 900)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_476_big_sum", "prompt": "/// Write a rsthon function to find the sum of the largest and smallest value in a given vector.\nfn big_sum(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = big_sum;\n    assert_eq!(candidate(vec![1, 2, 3]), 4);\n    assert_eq!(candidate(vec![-1, 2, 3, 4]), 3);\n    assert_eq!(candidate(vec![2, 3, 6]), 8);\n}\n", "language": "rs"}, {"task_id": "mbpp_477_is_lower", "prompt": "/// Write a rsthon function to convert the given string to lower case.\nfn is_lower(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = is_lower;\n    assert_eq!(candidate(String::from(\"InValid\")), String::from(\"invalid\"));\n    assert_eq!(candidate(String::from(\"TruE\")), String::from(\"true\"));\n    assert_eq!(candidate(String::from(\"SenTenCE\")), String::from(\"sentence\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "/// Write a function to remove lowercase substrings from a given string.\nfn remove_lowercase(str1: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_lowercase;\n    assert_eq!(candidate(String::from(\"PYTHon\")), String::from(\"PYTH\"));\n    assert_eq!(candidate(String::from(\"FInD\")), String::from(\"FID\"));\n    assert_eq!(candidate(String::from(\"STRinG\")), String::from(\"STRG\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_479_first_Digit", "prompt": "/// Write a rsthon function to find the first digit of a given number.\nfn first_Digit(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = first_Digit;\n    assert_eq!(candidate(123), 1);\n    assert_eq!(candidate(456), 4);\n    assert_eq!(candidate(12), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_554_Split", "prompt": "/// Write a rsthon function which takes a vector of integers and only returns the odd ones.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), vec![1, 3, 5]);\n    assert_eq!(candidate(vec![10, 11, 12, 13]), vec![11, 13]);\n    assert_eq!(candidate(vec![7, 8, 9, 1]), vec![7, 9, 1]);\n}\n", "language": "rs"}, {"task_id": "mbpp_555_difference", "prompt": "/// Write a rsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfn difference(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = difference;\n    assert_eq!(candidate(3), 30);\n    assert_eq!(candidate(5), 210);\n    assert_eq!(candidate(2), 6);\n}\n", "language": "rs"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "/// Write a rsthon function to count the number of pairs whose xor value is odd.\nfn find_Odd_Pair(A: Vec<isize>, N: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_Odd_Pair;\n    assert_eq!(candidate(vec![5, 4, 7, 2, 1], 5), 6);\n    assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11], 7), 12);\n    assert_eq!(candidate(vec![1, 2, 3], 3), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_557_toggle_string", "prompt": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "/// Write a rsthon function to find the sum of the per-digit difference between two integers.\nfn digit_distance_nums(n1: isize, n2: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = digit_distance_nums;\n    assert_eq!(candidate(1, 2), 1);\n    assert_eq!(candidate(23, 56), 6);\n    assert_eq!(candidate(123, 256), 7);\n}\n", "language": "rs"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "/// Write a function to find the sum of the largest contiguous subvector in the given vector.\nfn max_sub_array_sum(a: Vec<isize>, size: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_sub_array_sum;\n    assert_eq!(candidate(vec![-2, -3, 4, -1, -2, 1, 5, -3], 8), 7);\n    assert_eq!(candidate(vec![-3, -4, 5, -2, -3, 2, 6, -4], 8), 8);\n    assert_eq!(candidate(vec![-4, -5, 6, -3, -4, 3, 7, -5], 8), 10);\n}\n", "language": "rs"}, {"task_id": "mbpp_560_union_elements", "prompt": "/// Write a function to find the union of the elements of two given vectors and output them in sorted order.\nfn union_elements(test_tup1: Vec<isize>, test_tup2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = union_elements;\n    assert_eq!(candidate(vec![3, 4, 5, 6], vec![5, 7, 4, 10]), vec![3, 4, 5, 6, 7, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![3, 4, 5, 6]), vec![1, 2, 3, 4, 5, 6]);\n    assert_eq!(candidate(vec![11, 12, 13, 14], vec![13, 15, 16, 17]), vec![11, 12, 13, 14, 15, 16, 17]);\n}\n", "language": "rs"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "/// Write a rsthon function to find the length of the longest subvectors.\nfn Find_Max_Length(lst: Vec<Vec<isize>>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = Find_Max_Length;\n    assert_eq!(candidate(vec![vec![1], vec![1, 4], vec![5, 6, 7, 8]]), 4);\n    assert_eq!(candidate(vec![vec![0, 1], vec![2, 2], vec![3, 2, 1]]), 3);\n    assert_eq!(candidate(vec![vec![7], vec![22, 23], vec![13, 14, 15], vec![10, 20, 30, 40, 50]]), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "/// Write a rsthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n", "language": "rs"}, {"task_id": "mbpp_565_split", "prompt": "/// Write a rsthon function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n", "test": "}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n", "language": "rs"}, {"task_id": "mbpp_566_sum_digits", "prompt": "/// Write a function to get the sum of the digits of a non-negative integer.\nfn sum_digits(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_digits;\n    assert_eq!(candidate(345), 12);\n    assert_eq!(candidate(12), 3);\n    assert_eq!(candidate(97), 16);\n}\n", "language": "rs"}, {"task_id": "mbpp_567_issort_list", "prompt": "/// Write a function to check whether a specified vector is sorted or not.\nfn issort_list(list1: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = issort_list;\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 16, 17]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 20, 17]), false);\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 15, 14, 20]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "/// Write a function to sort each subvector of strings in a given vector of vectors.\nfn sort_sublists(list1: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_sublists;\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"d\"), String::from(\"c\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"f\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"c\"), String::from(\"d\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"e\"), String::from(\"f\")]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "/// Write a rsthon function to remove duplicate numbers from a given number of vectors.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n", "language": "rs"}, {"task_id": "mbpp_573_unique_product", "prompt": "/// Write a rsthon function to calculate the product of the unique numbers in a given vector.\nfn unique_product(list_data: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = unique_product;\n    assert_eq!(candidate(vec![10, 20, 30, 40, 20, 50, 60, 40]), 720000000);\n    assert_eq!(candidate(vec![1, 2, 3, 1]), 6);\n    assert_eq!(candidate(vec![7, 8, 9, 0, 1, 1]), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "/// Write a function to find the surface area of a cylinder.\nfn surfacearea_cylinder(r: isize, h: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = surfacearea_cylinder;\n    assert_eq!(candidate(10, 5), 942.45);\n    assert_eq!(candidate(4, 5), 226.18800000000002);\n    assert_eq!(candidate(4, 10), 351.848);\n}\n", "language": "rs"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "/// Write a rsthon function to check whether a vector is subvector of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "/// Write a rsthon function to find the last digit in factorial of a given number.\nfn last_Digit_Factorial(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = last_Digit_Factorial;\n    assert_eq!(candidate(4), 4);\n    assert_eq!(candidate(21), 0);\n    assert_eq!(candidate(30), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "/// Write a function to interleave 3 vectors of the same length into a single flat vector.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n", "language": "rs"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "/// Write a function to find the dissimilar elements in the given two tuples.\nfn find_dissimilar(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = find_dissimilar;\n    assert_eq!(candidate((3, 4, 5, 6), (5, 7, 4, 10)), (3, 6, 7, 10));\n    assert_eq!(candidate((1, 2, 3, 4), (7, 2, 3, 9)), (1, 4, 7, 9));\n    assert_eq!(candidate((21, 11, 25, 26), (26, 34, 21, 36)), (34, 36, 11, 25));\n}\n", "language": "rs"}, {"task_id": "mbpp_581_surface_Area", "prompt": "/// Write a rsthon function to find the surface area of a square rsramid with a given base edge and height.\nfn surface_Area(b: isize, s: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = surface_Area;\n    assert_eq!(candidate(3, 4), 33);\n    assert_eq!(candidate(4, 5), 56);\n    assert_eq!(candidate(1, 2), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_583_catalan_number", "prompt": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n", "language": "rs"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfn find_adverbs(text: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = find_adverbs;\n    assert_eq!(candidate(String::from(\"Clearly, he has no excuse for such behavior.\")), String::from(\"0-7: Clearly\"));\n    assert_eq!(candidate(String::from(\"Please handle the situation carefuly\")), String::from(\"28-36: carefuly\"));\n    assert_eq!(candidate(String::from(\"Complete the task quickly\")), String::from(\"18-25: quickly\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_586_split_Arr", "prompt": "/// Write a rsthon function to split a vector at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n", "language": "rs"}, {"task_id": "mbpp_588_big_diff", "prompt": "/// Write a rsthon function to find the difference between largest and smallest value in a given vector.\nfn big_diff(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = big_diff;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 3);\n    assert_eq!(candidate(vec![4, 5, 12]), 8);\n    assert_eq!(candidate(vec![9, 2, 3]), 7);\n}\n", "language": "rs"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n", "language": "rs"}, {"task_id": "mbpp_591_swap_List", "prompt": "/// Write a rsthon function to interchange the first and last elements in a vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n", "language": "rs"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "/// Write a rsthon function to find the sum of the product of consecutive binomial co-efficients.\nfn sum_Of_product(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_Of_product;\n    assert_eq!(candidate(3), 15);\n    assert_eq!(candidate(4), 56);\n    assert_eq!(candidate(1), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "/// Write a function to find the difference of the first even and first odd number of a given vector.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n", "language": "rs"}, {"task_id": "mbpp_597_find_kth", "prompt": "/// Write a function to find kth element from the given two sorted vectors.\nfn find_kth(arr1: Vec<isize>, arr2: Vec<isize>, k: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_kth;\n    assert_eq!(candidate(vec![2, 3, 6, 7, 9], vec![1, 4, 8, 10], 5), 6);\n    assert_eq!(candidate(vec![100, 112, 256, 349, 770], vec![72, 86, 113, 119, 265, 445, 892], 7), 256);\n    assert_eq!(candidate(vec![3, 4, 7, 8, 10], vec![2, 5, 9, 11], 6), 8);\n}\n", "language": "rs"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_599_sum_average", "prompt": "/// Write a function to find sum and average of first n natural numbers.\nfn sum_average(number: isize) -> (isize, f64) {\n", "test": "}\n\nfn main() {\n    let candidate = sum_average;\n    assert_eq!(candidate(10), (55, 5.5));\n    assert_eq!(candidate(15), (120, 8.0));\n    assert_eq!(candidate(20), (210, 10.5));\n}\n", "language": "rs"}, {"task_id": "mbpp_600_is_Even", "prompt": "/// Write a rsthon function to check whether the given number is even or not.\nfn is_Even(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_Even;\n    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(2), true);\n    assert_eq!(candidate(3), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "/// Write a rsthon function to find the first repeated character in a given string.\nfn first_repeated_char(str1: String) -> Option<String> {\n", "test": "}\n\nfn main() {\n    let candidate = first_repeated_char;\n    assert_eq!(candidate(String::from(\"abcabc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"abc\")), None);\n    assert_eq!(candidate(String::from(\"123123\")), Some(String::from(\"1\")));\n}\n", "language": "rs"}, {"task_id": "mbpp_603_get_ludic", "prompt": "/// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfn get_ludic(n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = get_ludic;\n    assert_eq!(candidate(10), vec![1, 2, 3, 5, 7]);\n    assert_eq!(candidate(25), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);\n    assert_eq!(candidate(45), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);\n}\n", "language": "rs"}, {"task_id": "mbpp_604_reverse_words", "prompt": "/// Write a function to reverse words seperated by spaces in a given string.\nfn reverse_words(s: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = reverse_words;\n    assert_eq!(candidate(String::from(\"python program\")), String::from(\"program python\"));\n    assert_eq!(candidate(String::from(\"java language\")), String::from(\"language java\"));\n    assert_eq!(candidate(String::from(\"indian man\")), String::from(\"man indian\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_605_prime_num", "prompt": "/// Write a function to check if the given integer is a prime number.\nfn prime_num(num: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = prime_num;\n    assert_eq!(candidate(13), true);\n    assert_eq!(candidate(7), true);\n    assert_eq!(candidate(-1010), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_606_radian_degree", "prompt": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n", "language": "rs"}, {"task_id": "mbpp_607_find_literals", "prompt": "/// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfn find_literals(text: String, pattern: String) -> (String, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = find_literals;\n    assert_eq!(candidate(String::from(\"The quick brown fox jumps over the lazy dog.\"), String::from(\"fox\")), (String::from(\"fox\"), 16, 19));\n    assert_eq!(candidate(String::from(\"Its been a very crazy procedure right\"), String::from(\"crazy\")), (String::from(\"crazy\"), 16, 21));\n    assert_eq!(candidate(String::from(\"Hardest choices required strongest will\"), String::from(\"will\")), (String::from(\"will\"), 35, 39));\n}\n", "language": "rs"}, {"task_id": "mbpp_608_bell_Number", "prompt": "/// Write a rsthon function to find nth bell number.\nfn bell_Number(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = bell_Number;\n    assert_eq!(candidate(2), 2);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4), 15);\n}\n", "language": "rs"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "/// Write a rsthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfn remove_kth_element(list1: Vec<isize>, L: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = remove_kth_element;\n    assert_eq!(candidate(vec![1, 1, 2, 3, 4, 4, 5, 1], 3), vec![1, 1, 3, 4, 4, 5, 1]);\n    assert_eq!(candidate(vec![0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4), vec![0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);\n    assert_eq!(candidate(vec![10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5), vec![10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);\n}\n", "language": "rs"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "/// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n", "language": "rs"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "/// Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfn cummulative_sum(test_list: Vec<Vec<isize>>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = cummulative_sum;\n    assert_eq!(candidate(vec![vec![1, 3], vec![5, 6, 7], vec![2, 6]]), 30);\n    assert_eq!(candidate(vec![vec![2, 4], vec![6, 7, 8], vec![3, 7]]), 37);\n    assert_eq!(candidate(vec![vec![3, 5], vec![7, 8, 9], vec![4, 8]]), 44);\n}\n", "language": "rs"}, {"task_id": "mbpp_615_average_tuple", "prompt": "/// Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfn average_tuple(nums: Vec<Vec<isize>>) -> Vec<f64> {\n", "test": "}\n\nfn main() {\n    let candidate = average_tuple;\n    assert_eq!(candidate(vec![vec![10, 10, 10, 12], vec![30, 45, 56, 45], vec![81, 80, 39, 32], vec![1, 2, 3, 4]]), vec![30.5, 34.25, 27.0, 23.25]);\n    assert_eq!(candidate(vec![vec![1, 1, -5], vec![30, -15, 56], vec![81, -60, -39], vec![-10, 2, 3]]), vec![25.5, -18.0, 3.75]);\n    assert_eq!(candidate(vec![vec![100, 100, 100, 120], vec![300, 450, 560, 450], vec![810, 800, 390, 320], vec![10, 20, 30, 40]]), vec![305.0, 342.5, 270.0, 232.5]);\n}\n", "language": "rs"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "/// Write a function which takes two tuples of the same length and performs the element wise modulo.\nfn tuple_modulo(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = tuple_modulo;\n    assert_eq!(candidate((10, 4, 5, 6), (5, 6, 7, 5)), (0, 4, 5, 1));\n    assert_eq!(candidate((11, 5, 6, 7), (6, 7, 8, 6)), (5, 5, 6, 1));\n    assert_eq!(candidate((12, 6, 7, 8), (7, 8, 9, 7)), (5, 6, 7, 1));\n}\n", "language": "rs"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "/// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfn min_Jumps(steps: (isize, isize), d: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = min_Jumps;\n    assert_eq!(candidate((3, 4), 11), 3.5);\n    assert_eq!(candidate((3, 4), 0), 0.0);\n    assert_eq!(candidate((11, 14), 11), 1.0);\n}\n", "language": "rs"}, {"task_id": "mbpp_618_div_list", "prompt": "/// Write a function to divide two vectors element wise.\nfn div_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<f64> {\n", "test": "}\n\nfn main() {\n    let candidate = div_list;\n    assert_eq!(candidate(vec![4, 5, 6], vec![1, 2, 3]), vec![4.0, 2.5, 2.0]);\n    assert_eq!(candidate(vec![3, 2], vec![1, 4]), vec![3.0, 0.5]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![1.8, 1.7142857142857142]);\n}\n", "language": "rs"}, {"task_id": "mbpp_619_move_num", "prompt": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_622_get_median", "prompt": "/// Write a function to find the median of two sorted vectors of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n", "language": "rs"}, {"task_id": "mbpp_623_nth_nums", "prompt": "/// Write a function to compute the n-th power of each number in a vector.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n", "language": "rs"}, {"task_id": "mbpp_624_is_upper", "prompt": "/// Write a rsthon function to convert a given string to uppercase.\nfn is_upper(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = is_upper;\n    assert_eq!(candidate(String::from(\"person\")), String::from(\"PERSON\"));\n    assert_eq!(candidate(String::from(\"final\")), String::from(\"FINAL\"));\n    assert_eq!(candidate(String::from(\"Valid\")), String::from(\"VALID\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_625_swap_List", "prompt": "/// Write a rsthon function to interchange the first and last element in a given vector.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), vec![4, 2, 3, 4, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n", "language": "rs"}, {"task_id": "mbpp_626_triangle_area", "prompt": "/// Write a rsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(-1), None);\n    assert_eq!(candidate(0), Some(0));\n    assert_eq!(candidate(2), Some(4));\n}\n", "language": "rs"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "/// Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n", "language": "rs"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "/// Write a function to replace all spaces in the given string with '%20'.\nfn replace_spaces(string: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"My Name is Dawood\")), String::from(\"My%20Name%20is%20Dawood\"));\n    assert_eq!(candidate(String::from(\"I am a Programmer\")), String::from(\"I%20am%20a%20Programmer\"));\n    assert_eq!(candidate(String::from(\"I love Coding\")), String::from(\"I%20love%20Coding\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_629_Split", "prompt": "/// Write a rsthon function to find even numbers from a vector of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n", "language": "rs"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "/// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfn get_coordinates(test_tup: (isize, isize)) -> Vec<Vec<isize>> {\n", "test": "}\n\nfn main() {\n    let candidate = get_coordinates;\n    assert_eq!(candidate((3, 4)), vec![vec![2, 3], vec![2, 4], vec![2, 5], vec![3, 3], vec![3, 4], vec![3, 5], vec![4, 3], vec![4, 4], vec![4, 5]]);\n    assert_eq!(candidate((4, 5)), vec![vec![3, 4], vec![3, 5], vec![3, 6], vec![4, 4], vec![4, 5], vec![4, 6], vec![5, 4], vec![5, 5], vec![5, 6]]);\n    assert_eq!(candidate((5, 6)), vec![vec![4, 5], vec![4, 6], vec![4, 7], vec![5, 5], vec![5, 6], vec![5, 7], vec![6, 5], vec![6, 6], vec![6, 7]]);\n}\n", "language": "rs"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfn replace_spaces(text: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"Jumanji The Jungle\")), String::from(\"Jumanji_The_Jungle\"));\n    assert_eq!(candidate(String::from(\"The_Avengers\")), String::from(\"The Avengers\"));\n    assert_eq!(candidate(String::from(\"Fast and Furious\")), String::from(\"Fast_and_Furious\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_632_move_zero", "prompt": "/// Write a rsthon function to move all zeroes to the end of the given vector.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n", "language": "rs"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "/// Write a rsthon function to find the sum of xor of all pairs of numbers in the given vector.\nfn pair_xor_Sum(arr: Vec<isize>, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = pair_xor_Sum;\n    assert_eq!(candidate(vec![5, 9, 7, 6], 4), 47);\n    assert_eq!(candidate(vec![7, 3, 5], 3), 12);\n    assert_eq!(candidate(vec![7, 3], 2), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_635_heap_sort", "prompt": "/// Write a function to sort the given vector.\nfn heap_sort(iterable: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = heap_sort;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 9, 2, 4, 6, 8, 0]), vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 25, 58]), vec![14, 22, 25, 25, 35, 58, 65, 75, 85]);\n    assert_eq!(candidate(vec![7, 1, 9, 5]), vec![1, 5, 7, 9]);\n}\n", "language": "rs"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_638_wind_chill", "prompt": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n", "language": "rs"}, {"task_id": "mbpp_639_sample_nam", "prompt": "/// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n", "language": "rs"}, {"task_id": "mbpp_640_remove_parenthesis", "prompt": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "/// Write a function to find the nth nonagonal number.\nfn is_nonagonal(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = is_nonagonal;\n    assert_eq!(candidate(10), 325);\n    assert_eq!(candidate(15), 750);\n    assert_eq!(candidate(18), 1089);\n}\n", "language": "rs"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfn text_match_wordz_middle(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_match_wordz_middle;\n    assert_eq!(candidate(String::from(\"pythonzabc.\")), true);\n    assert_eq!(candidate(String::from(\"zxyabc.\")), false);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "/// Write a rsthon function to reverse a vector upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n", "language": "rs"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "use std::collections::HashMap;\n\n/// Write a function to add a HashMap to the tuple. The output should be a tuple.\nfn add_dict_to_tuple(test_tup: (isize, isize, isize), test_dict: HashMap<String, isize>) -> (isize, isize, isize, HashMap<String, isize>) {\n", "test": "}\n\nfn main() {\n    let candidate = add_dict_to_tuple;\n    assert_eq!(candidate((4, 5, 6), HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])), (4, 5, 6, HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])));\n    assert_eq!(candidate((1, 2, 3), HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])), (1, 2, 3, HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])));\n    assert_eq!(candidate((8, 9, 10), HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])), (8, 9, 10, HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])));\n}\n", "language": "rs"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "/// Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfn maxAverageOfPath(cost: Vec<Vec<isize>>) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = maxAverageOfPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![6, 5, 4], vec![7, 3, 9]]), 5.2);\n    assert_eq!(candidate(vec![vec![2, 3, 4], vec![7, 6, 5], vec![8, 4, 10]]), 6.2);\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![8, 7, 6], vec![9, 5, 11]]), 7.2);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]]), 5.8);\n}\n", "language": "rs"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "/// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfn power_base_sum(base: isize, power: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = power_base_sum;\n    assert_eq!(candidate(2, 100), 115);\n    assert_eq!(candidate(8, 10), 37);\n    assert_eq!(candidate(8, 15), 62);\n    assert_eq!(candidate(3, 3), 9);\n}\n", "language": "rs"}, {"task_id": "mbpp_728_sum_list", "prompt": "/// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfn sum_list(lst1: Vec<isize>, lst2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sum_list;\n    assert_eq!(candidate(vec![10, 20, 30], vec![15, 25, 35]), vec![25, 45, 65]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![5, 6, 7]), vec![6, 8, 10]);\n    assert_eq!(candidate(vec![15, 20, 30], vec![15, 45, 75]), vec![30, 65, 105]);\n}\n", "language": "rs"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "/// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfn lateralsurface_cone(r: isize, h: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = lateralsurface_cone;\n    assert_eq!(candidate(5, 12), 204.20352248333654);\n    assert_eq!(candidate(10, 15), 566.3586699569488);\n    assert_eq!(candidate(19, 17), 1521.8090132193388);\n}\n", "language": "rs"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "/// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfn replace_specialchar(text: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = replace_specialchar;\n    assert_eq!(candidate(String::from(\"Python language, Programming language.\")), String::from(\"Python:language::Programming:language:\"));\n    assert_eq!(candidate(String::from(\"a b c,d e f\")), String::from(\"a:b:c:d:e:f\"));\n    assert_eq!(candidate(String::from(\"ram reshma,ram rahim\")), String::from(\"ram:reshma:ram:rahim\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "/// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "/// Write a rsthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\nfn sum_Of_Subarray_Prod(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_Of_Subarray_Prod;\n    assert_eq!(candidate(vec![1, 2, 3]), 20);\n    assert_eq!(candidate(vec![1, 2]), 5);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 84);\n}\n", "language": "rs"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "/// Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n", "language": "rs"}, {"task_id": "mbpp_736_left_insertion", "prompt": "/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-data-structure-exercise-24.php\nfn left_insertion(a: Vec<isize>, x: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = left_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_737_check_str", "prompt": "/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfn check_str(string: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_str;\n    assert_eq!(candidate(String::from(\"annie\")), true);\n    assert_eq!(candidate(String::from(\"dawood\")), false);\n    assert_eq!(candidate(String::from(\"Else\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "/// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-recursion-exercise-9.php\nfn geometric_sum(n: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = geometric_sum;\n    assert_eq!(candidate(7), 1.9921875);\n    assert_eq!(candidate(4), 1.9375);\n    assert_eq!(candidate(8), 1.99609375);\n}\n", "language": "rs"}, {"task_id": "mbpp_739_find_Index", "prompt": "/// Write a rsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_Index;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 14);\n    assert_eq!(candidate(4), 45);\n}\n", "language": "rs"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "use std::collections::HashMap;\n\n/// Write a function to convert the given tuple to a key-value HashMap using adjacent elements. https://www.geeksforgeeks.org/rsthon-convert-tuple-to-adjacent-pair-HashMap/\nfn tuple_to_dict(test_tup: (isize, isize, isize, isize, isize, isize)) -> HashMap<isize, isize> {\n", "test": "}\n\nfn main() {\n    let candidate = tuple_to_dict;\n    assert_eq!(candidate((1, 5, 7, 10, 13, 5)), HashMap::from([(1, 5), (7, 10), (13, 5)]));\n    assert_eq!(candidate((1, 2, 3, 4, 5, 6)), HashMap::from([(1, 2), (3, 4), (5, 6)]));\n    assert_eq!(candidate((7, 8, 9, 10, 11, 12)), HashMap::from([(7, 8), (9, 10), (11, 12)]));\n}\n", "language": "rs"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "/// Write a rsthon function to check whether all the characters are same or not.\nfn all_Characters_Same(s: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = all_Characters_Same;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"aaa\")), true);\n    assert_eq!(candidate(String::from(\"data\")), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n", "test": "}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n", "language": "rs"}, {"task_id": "mbpp_743_rotate_right", "prompt": "/// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/rsthon-program-right-rotate-vector-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n", "language": "rs"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n", "language": "rs"}, {"task_id": "mbpp_746_sector_area", "prompt": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n", "test": "}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n", "language": "rs"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "/// Write a function to put spaces between words starting with capital letters in a given string.\nfn capital_words_spaces(str1: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = capital_words_spaces;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"PythonProgrammingExamples\")), String::from(\"Python Programming Examples\"));\n    assert_eq!(candidate(String::from(\"GetReadyToBeCodingFreak\")), String::from(\"Get Ready To Be Coding Freak\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_749_sort_numeric_strings", "prompt": "/// Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/rsthon-sort-numeric-strings-in-a-vector/\nfn sort_numeric_strings(nums_str: Vec<String>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = sort_numeric_strings;\n    assert_eq!(candidate(vec![String::from(\"4\"), String::from(\"12\"), String::from(\"45\"), String::from(\"7\"), String::from(\"0\"), String::from(\"100\"), String::from(\"200\"), String::from(\"-12\"), String::from(\"-500\")]), vec![-500, -12, 0, 4, 7, 12, 45, 100, 200]);\n    assert_eq!(candidate(vec![String::from(\"2\"), String::from(\"3\"), String::from(\"8\"), String::from(\"4\"), String::from(\"7\"), String::from(\"9\"), String::from(\"8\"), String::from(\"2\"), String::from(\"6\"), String::from(\"5\"), String::from(\"1\"), String::from(\"6\"), String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"6\"), String::from(\"9\"), String::from(\"1\"), String::from(\"2\")]), vec![1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"3\"), String::from(\"5\"), String::from(\"7\"), String::from(\"1\"), String::from(\"3\"), String::from(\"13\"), String::from(\"15\"), String::from(\"17\"), String::from(\"5\"), String::from(\"7 \"), String::from(\"9\"), String::from(\"1\"), String::from(\"11\")]), vec![1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);\n}\n", "language": "rs"}, {"task_id": "mbpp_750_add_tuple", "prompt": "/// Write a function to add the given tuple to the given vector.\nfn add_tuple(test_list: Vec<isize>, test_tup: (isize, isize)) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = add_tuple;\n    assert_eq!(candidate(vec![5, 6, 7], (9, 10)), vec![5, 6, 7, 9, 10]);\n    assert_eq!(candidate(vec![6, 7, 8], (10, 11)), vec![6, 7, 8, 10, 11]);\n    assert_eq!(candidate(vec![7, 8, 9], (11, 12)), vec![7, 8, 9, 11, 12]);\n}\n", "language": "rs"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "/// Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\nfn check_min_heap(arr: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_min_heap;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 10, 15]), true);\n    assert_eq!(candidate(vec![2, 10, 4, 5, 3, 15]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfn jacobsthal_num(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = jacobsthal_num;\n    assert_eq!(candidate(5), 11);\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(4), 5);\n    assert_eq!(candidate(13), 2731);\n}\n", "language": "rs"}, {"task_id": "mbpp_753_min_k", "prompt": "/// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/rsthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cors of test cases\nfn min_k(test_list: Vec<(String, isize)>, K: isize) -> Vec<(String, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = min_k;\n    assert_eq!(candidate(vec![(String::from(\"Manjeet\"), 10), (String::from(\"Akshat\"), 4), (String::from(\"Akash\"), 2), (String::from(\"Nikhil\"), 8)], 2), vec![(String::from(\"Akash\"), 2), (String::from(\"Akshat\"), 4)]);\n    assert_eq!(candidate(vec![(String::from(\"Sanjeev\"), 11), (String::from(\"Angat\"), 5), (String::from(\"Akash\"), 3), (String::from(\"Nepin\"), 9)], 3), vec![(String::from(\"Akash\"), 3), (String::from(\"Angat\"), 5), (String::from(\"Nepin\"), 9)]);\n    assert_eq!(candidate(vec![(String::from(\"tanmay\"), 14), (String::from(\"Amer\"), 11), (String::from(\"Ayesha\"), 9), (String::from(\"SKD\"), 16)], 1), vec![(String::from(\"Ayesha\"), 9)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "/// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rsthon-exercises/re/rsthon-re-exercise-3.php\nfn text_match_zero_one(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_match_zero_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"dsabbbba\")), true);\n    assert_eq!(candidate(String::from(\"asbbbba\")), false);\n    assert_eq!(candidate(String::from(\"abaaa\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "/// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/rsthon-program-to-count-the-pairs-of-reverse-strings/\nfn count_reverse_pairs(test_list: Vec<String>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_reverse_pairs;\n    assert_eq!(candidate(vec![String::from(\"julia\"), String::from(\"best\"), String::from(\"tseb\"), String::from(\"for\"), String::from(\"ailuj\")]), 2);\n    assert_eq!(candidate(vec![String::from(\"geeks\"), String::from(\"best\"), String::from(\"for\"), String::from(\"skeeg\")]), 1);\n    assert_eq!(candidate(vec![String::from(\"makes\"), String::from(\"best\"), String::from(\"sekam\"), String::from(\"for\"), String::from(\"rof\")]), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_759_is_decimal", "prompt": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_760_unique_Element", "prompt": "/// Write a rsthon function to check whether a vector of numbers contains only one distinct element or not.\nfn unique_Element(arr: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = unique_Element;\n    assert_eq!(candidate(vec![1, 1, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "/// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfn check_monthnumber_number(monthnum3: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_monthnumber_number;\n    assert_eq!(candidate(6), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(12), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "/// Write a rsthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfn find_min_diff(arr: Vec<isize>, n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_min_diff;\n    assert_eq!(candidate(vec![1, 5, 3, 19, 18, 25], 6), 1);\n    assert_eq!(candidate(vec![4, 3, 2, 6], 4), 1);\n    assert_eq!(candidate(vec![30, 5, 20, 9], 4), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_764_number_ctr", "prompt": "/// Write a rsthon function to count number of digits in a given string.\nfn number_ctr(str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = number_ctr;\n    assert_eq!(candidate(String::from(\"program2bedone\")), 1);\n    assert_eq!(candidate(String::from(\"3wonders\")), 1);\n    assert_eq!(candidate(String::from(\"123\")), 3);\n    assert_eq!(candidate(String::from(\"3wond-1ers2\")), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_765_is_polite", "prompt": "/// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfn is_polite(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = is_polite;\n    assert_eq!(candidate(7), 11);\n    assert_eq!(candidate(4), 7);\n    assert_eq!(candidate(9), 13);\n}\n", "language": "rs"}, {"task_id": "mbpp_766_pair_wise", "prompt": "/// Write a function to return a vector of all pairs of consecutive items in a given vector.\nfn pair_wise(l1: Vec<isize>) -> Vec<(isize, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = pair_wise;\n    assert_eq!(candidate(vec![1, 1, 2, 3, 3, 4, 4, 5]), vec![(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), vec![(1, 5), (5, 7), (7, 9), (9, 10)]);\n    assert_eq!(candidate(vec![5, 1, 9, 7, 10]), vec![(5, 1), (1, 9), (9, 7), (7, 10)]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "/// Write a rsthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n", "language": "rs"}, {"task_id": "mbpp_769_Diff", "prompt": "/// Write a rsthon function to get the difference between two vectors.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n", "language": "rs"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "/// Write a rsthon function to find the sum of fourth power of first n odd natural numbers.\nfn odd_num_sum(n: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = odd_num_sum;\n    assert_eq!(candidate(2), 82);\n    assert_eq!(candidate(3), 707);\n    assert_eq!(candidate(4), 3108);\n}\n", "language": "rs"}, {"task_id": "mbpp_771_check_expression", "prompt": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_772_remove_length", "prompt": "/// Write a function to remove all the words with k length in the given string.\nfn remove_length(test_str: String, K: isize) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_length;\n    assert_eq!(candidate(String::from(\"The person is most value tet\"), 3), String::from(\"person is most value\"));\n    assert_eq!(candidate(String::from(\"If you told me about this ok\"), 4), String::from(\"If you me about ok\"));\n    assert_eq!(candidate(String::from(\"Forces of darkeness is come into the play\"), 4), String::from(\"Forces of darkeness is the\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "/// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfn occurance_substring(text: String, pattern: String) -> Option<(String, isize, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = occurance_substring;\n    assert_eq!(candidate(String::from(\"python programming, python language\"), String::from(\"python\")), Some((String::from(\"python\"), 0, 6)));\n    assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"programming\")), Some((String::from(\"programming\"), 7, 18)));\n    assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"language\")), Some((String::from(\"language\"), 31, 39)));\n    assert_eq!(candidate(String::from(\"c++ programming, c++ language\"), String::from(\"python\")), None);\n}\n", "language": "rs"}, {"task_id": "mbpp_775_odd_position", "prompt": "/// Write a rsthon function to check whether every odd index contains odd numbers of a given vector.\nfn odd_position(nums: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = odd_position;\n    assert_eq!(candidate(vec![2, 1, 4, 3, 6, 7, 6, 3]), true);\n    assert_eq!(candidate(vec![4, 1, 2]), true);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_776_count_vowels", "prompt": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_vowels;\n    assert_eq!(candidate(String::from(\"bestinstareels\")), 7);\n    assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);\n    assert_eq!(candidate(String::from(\"amazonprime\")), 5);\n}\n", "language": "rs"}, {"task_id": "mbpp_777_find_sum", "prompt": "/// Write a rsthon function to find the sum of non-repeated elements in a given vector.\nfn find_sum(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = find_sum;\n    assert_eq!(candidate(vec![1, 2, 3, 1, 1, 4, 5, 6]), 21);\n    assert_eq!(candidate(vec![1, 10, 9, 4, 2, 10, 10, 45, 4]), 71);\n    assert_eq!(candidate(vec![12, 10, 9, 45, 2, 10, 10, 45, 10]), 78);\n}\n", "language": "rs"}, {"task_id": "mbpp_780_find_combinations", "prompt": "/// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/rsthon-combinations-of-sum-with-tuples-in-tuple-vector/\nfn find_combinations(test_list: Vec<(isize, isize)>) -> Vec<(isize, isize)> {\n", "test": "}\n\nfn main() {\n    let candidate = find_combinations;\n    assert_eq!(candidate(vec![(2, 4), (6, 7), (5, 1), (6, 10)]), vec![(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]);\n    assert_eq!(candidate(vec![(3, 5), (7, 8), (6, 2), (7, 11)]), vec![(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]);\n    assert_eq!(candidate(vec![(4, 6), (8, 9), (7, 3), (8, 12)]), vec![(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]);\n}\n", "language": "rs"}, {"task_id": "mbpp_781_count_divisors", "prompt": "/// Write a rsthon function to check whether the count of divisors is even. https://www.w3resource.com/rsthon-exercises/basic/rsthon-basic-1-exercise-24.php\nfn count_divisors(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = count_divisors;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(100), false);\n    assert_eq!(candidate(125), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "/// Write a rsthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\nfn odd_length_sum(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = odd_length_sum;\n    assert_eq!(candidate(vec![1, 2, 4]), 14);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), 15);\n    assert_eq!(candidate(vec![1, 7]), 8);\n}\n", "language": "rs"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfn rgb_to_hsv(r: isize, g: isize, b: isize) -> Vec<f64> {\n", "test": "}\n\nfn main() {\n    let candidate = rgb_to_hsv;\n    assert_eq!(candidate(255, 255, 255), vec![0.0, 0.0, 100.0]);\n    assert_eq!(candidate(0, 215, 0), vec![120.0, 100.0, 84.31372549019608]);\n    assert_eq!(candidate(10, 215, 110), vec![149.26829268292684, 95.34883720930233, 84.31372549019608]);\n}\n", "language": "rs"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "/// Write a function to find the product of first even and odd number of a given vector.\nfn mul_even_odd(list1: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = mul_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 10);\n}\n", "language": "rs"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "/// Write a function to convert tuple string to integer tuple.\nfn tuple_str_int(test_str: String) -> (isize, isize, isize) {\n", "test": "}\n\nfn main() {\n    let candidate = tuple_str_int;\n    assert_eq!(candidate(String::from(\"(7, 8, 9)\")), (7, 8, 9));\n    assert_eq!(candidate(String::from(\"(1, 2, 3)\")), (1, 2, 3));\n    assert_eq!(candidate(String::from(\"(4, 5, 6)\")), (4, 5, 6));\n    assert_eq!(candidate(String::from(\"(7, 81, 19)\")), (7, 81, 19));\n}\n", "language": "rs"}, {"task_id": "mbpp_786_right_insertion", "prompt": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_787_text_match_three", "prompt": "/// Write a function that matches a string that has an a followed by three 'b'.\nfn text_match_three(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_match_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"caacabbbba\")), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_788_new_tuple", "prompt": "/// Write a function to create a new tuple from the given string and vector.\nfn new_tuple(test_list: Vec<String>, test_str: String) -> (String, String, String) {\n", "test": "}\n\nfn main() {\n    let candidate = new_tuple;\n    assert_eq!(candidate(vec![String::from(\"WEB\"), String::from(\"is\")], String::from(\"best\")), (String::from(\"WEB\"), String::from(\"is\"), String::from(\"best\")));\n    assert_eq!(candidate(vec![String::from(\"We\"), String::from(\"are\")], String::from(\"Developers\")), (String::from(\"We\"), String::from(\"are\"), String::from(\"Developers\")));\n    assert_eq!(candidate(vec![String::from(\"Part\"), String::from(\"is\")], String::from(\"Wrong\")), (String::from(\"Part\"), String::from(\"is\"), String::from(\"Wrong\")));\n}\n", "language": "rs"}, {"task_id": "mbpp_790_even_position", "prompt": "/// Write a rsthon function to check whether every even index contains even numbers of a given vector.\nfn even_position(nums: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = even_position;\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n    assert_eq!(candidate(vec![2, 1, 4]), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_792_count_list", "prompt": "/// Write a rsthon function to count the number of vectors in a given number of vectors.\nfn count_list(input_list: Vec<Vec<isize>>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_list;\n    assert_eq!(candidate(vec![vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), 4);\n    assert_eq!(candidate(vec![vec![1, 2], vec![2, 3], vec![4, 5]]), 3);\n    assert_eq!(candidate(vec![vec![1, 0], vec![2, 0]]), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_793_last", "prompt": "/// Write a rsthon function to find the last position of an element in a sorted vector.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "/// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfn text_starta_endb(text: String) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = text_starta_endb;\n    assert_eq!(candidate(String::from(\"aabbbb\")), true);\n    assert_eq!(candidate(String::from(\"aabAbbbc\")), false);\n    assert_eq!(candidate(String::from(\"accddbbjjj\")), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_796_return_sum", "prompt": "use std::collections::HashMap;\n\n/// Write function to find the sum of all items in the given HashMap.\nfn return_sum(dict: HashMap<String, isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = return_sum;\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 100), (String::from(\"b\"), 200), (String::from(\"c\"), 300)])), 600);\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 25), (String::from(\"b\"), 18), (String::from(\"c\"), 45)])), 88);\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 36), (String::from(\"b\"), 39), (String::from(\"c\"), 49)])), 124);\n}\n", "language": "rs"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "/// Write a rsthon function to find the sum of all odd natural numbers within the range l and r.\nfn sum_in_range(l: isize, r: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = sum_in_range;\n    assert_eq!(candidate(2, 5), 8);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 13), 40);\n}\n", "language": "rs"}, {"task_id": "mbpp_798__sum", "prompt": "/// Write a rsthon function to find the sum of a vector.\nfn _sum(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = _sum;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![15, 12, 13, 10]), 50);\n    assert_eq!(candidate(vec![0, 1, 2]), 3);\n}\n", "language": "rs"}, {"task_id": "mbpp_799_left_rotate", "prompt": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n", "language": "rs"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "/// Write a function to remove all whitespaces from a string.\nfn remove_all_spaces(text: String) -> String {\n", "test": "}\n\nfn main() {\n    let candidate = remove_all_spaces;\n    assert_eq!(candidate(String::from(\"python  program\")), String::from(\"pythonprogram\"));\n    assert_eq!(candidate(String::from(\"python   programming    language\")), String::from(\"pythonprogramminglanguage\"));\n    assert_eq!(candidate(String::from(\"python                     program\")), String::from(\"pythonprogram\"));\n    assert_eq!(candidate(String::from(\"   python                     program\")), String::from(\"pythonprogram\"));\n}\n", "language": "rs"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "/// Write a rsthon function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_802_count_rotation", "prompt": "/// Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfn count_rotation(arr: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n", "language": "rs"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfn is_perfect_square(n: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_perfect_square;\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(36), true);\n    assert_eq!(candidate(14), false);\n    assert_eq!(candidate(196), true);\n    assert_eq!(candidate(125), false);\n    assert_eq!(candidate(15625), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_804_is_product_even", "prompt": "/// Write a function to check whether the product of numbers in a vector is even or not.\nfn is_product_even(arr: Vec<isize>) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = is_product_even;\n    assert_eq!(candidate(vec![1, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 4]), true);\n    assert_eq!(candidate(vec![1, 1]), false);\n}\n", "language": "rs"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "/// Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n", "test": "}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n", "language": "rs"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n", "language": "rs"}, {"task_id": "mbpp_807_first_odd", "prompt": "/// Write a rsthon function to find the first odd number in a given vector of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n", "test": "}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n", "language": "rs"}, {"task_id": "mbpp_808_check_K", "prompt": "/// Write a function to check if the given tuples contain the k or not.\nfn check_K(test_tup: Vec<isize>, K: isize) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_K;\n    assert_eq!(candidate(vec![10, 4, 5, 6, 8], 6), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 7), false);\n    assert_eq!(candidate(vec![7, 8, 9, 44, 11, 12], 11), true);\n}\n", "language": "rs"}, {"task_id": "mbpp_809_check_smaller", "prompt": "/// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfn check_smaller(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> bool {\n", "test": "}\n\nfn main() {\n    let candidate = check_smaller;\n    assert_eq!(candidate((1, 2, 3), (2, 3, 4)), false);\n    assert_eq!(candidate((4, 5, 6), (3, 4, 5)), true);\n    assert_eq!(candidate((11, 12, 13), (10, 11, 12)), true);\n}\n", "language": "rs"}]