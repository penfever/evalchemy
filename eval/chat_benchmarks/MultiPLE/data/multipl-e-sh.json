[{"task_id": "HumanEval_0_has_close_elements", "prompt": "#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n", "test": "}\n\ncandidate() {\n    has_close_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.3\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.05\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.95\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\" \"0.8\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\" \"0.1\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"1.0\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"0.5\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_1_separate_paren_groups", "prompt": "#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n", "test": "}\n\ncandidate() {\n    separate_paren_groups \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"(()()) ((())) () ((())()())\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"() (()) ((())) (((())))\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"(()(())((())))\" ]]\n    [[ $(candidate \"( ) (( )) (( )( ))\") = \"() (()) (()())\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_2_truncate_number", "prompt": "#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n", "test": "}\n\ncandidate() {\n    truncate_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3.5\") = \"0.5\" ]]\n    [[ $(candidate \"1.25\") = \"0.25\" ]]\n    [[ $(candidate \"123.0\") = \"0.0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_3_below_zero", "prompt": "#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n", "test": "}\n\ncandidate() {\n    below_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"1 2 -3 1 2 -3\") = \"false\" ]]\n    [[ $(candidate \"1 2 -4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -4\") = \"false\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4 -5\") = \"true\" ]]\n    [[ $(candidate \"1 -2 2 -2 5 -5 4 -4\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_4_mean_absolute_deviation", "prompt": "#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n", "test": "}\n\ncandidate() {\n    mean_absolute_deviation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0\") = \"0.5\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0\") = \"1.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"1.2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_5_intersperse", "prompt": "#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n", "test": "}\n\ncandidate() {\n    intersperse \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"7\") = \"\" ]]\n    [[ $(candidate \"5 6 3 2\" \"8\") = \"5 8 6 8 3 8 2\" ]]\n    [[ $(candidate \"2 2 2\" \"2\") = \"2 2 2 2 2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_6_parse_nested_parens", "prompt": "#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n", "test": "}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_8_sum_product", "prompt": "#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n", "test": "}\n\ncandidate() {\n    sum_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0 1\" ]]\n    [[ $(candidate \"1 1 1\") = \"3 1\" ]]\n    [[ $(candidate \"100 0\") = \"100 0\" ]]\n    [[ $(candidate \"3 5 7\") = \"15 105\" ]]\n    [[ $(candidate \"10\") = \"10 10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_9_rolling_max", "prompt": "#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n", "test": "}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_10_make_palindrome", "prompt": "#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n", "test": "}\n\ncandidate() {\n    make_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x\") = \"x\" ]]\n    [[ $(candidate \"xyz\") = \"xyzyx\" ]]\n    [[ $(candidate \"xyx\") = \"xyx\" ]]\n    [[ $(candidate \"jerry\") = \"jerryrrej\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_11_string_xor", "prompt": "#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n", "test": "}\n\ncandidate() {\n    string_xor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"111000\" \"101010\") = \"010010\" ]]\n    [[ $(candidate \"1\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0101\" \"0000\") = \"0101\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_12_longest", "prompt": "#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n", "test": "}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_13_greatest_common_divisor", "prompt": "#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n", "test": "}\n\ncandidate() {\n    greatest_common_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"7\") = \"1\" ]]\n    [[ $(candidate \"10\" \"15\") = \"5\" ]]\n    [[ $(candidate \"49\" \"14\") = \"7\" ]]\n    [[ $(candidate \"144\" \"60\") = \"12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_14_all_prefixes", "prompt": "#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n", "test": "}\n\ncandidate() {\n    all_prefixes \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"asdfgh\") = \"a as asd asdf asdfg asdfgh\" ]]\n    [[ $(candidate \"WWW\") = \"W WW WWW\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_15_string_sequence", "prompt": "#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n", "test": "}\n\ncandidate() {\n    string_sequence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"3\") = \"0 1 2 3\" ]]\n    [[ $(candidate \"10\") = \"0 1 2 3 4 5 6 7 8 9 10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_16_count_distinct_characters", "prompt": "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n", "test": "}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\" ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\") = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_17_parse_music", "prompt": "#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n", "test": "}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_18_how_many_times", "prompt": "#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n", "test": "}\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_19_sort_numbers", "prompt": "#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n", "test": "}\n\ncandidate() {\n    sort_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"three\") = \"three\" ]]\n    [[ $(candidate \"three five nine\") = \"three five nine\" ]]\n    [[ $(candidate \"five zero four seven nine eight\") = \"zero four five seven eight nine\" ]]\n    [[ $(candidate \"six five four three two one zero\") = \"zero one two three four five six\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_20_find_closest_elements", "prompt": "#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n", "test": "}\n\ncandidate() {\n    find_closest_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\") = \"3.9 4.0\" ]]\n    [[ $(candidate \"1.0 2.0 5.9 4.0 5.0\") = \"5.0 5.9\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.2\") = \"2.0 2.2\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 2.0\") = \"2.0 2.0\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\") = \"2.2 3.1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_21_rescale_to_unit", "prompt": "#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n", "test": "}\n\ncandidate() {\n    rescale_to_unit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2.0 49.9\") = \"0.0 1.0\" ]]\n    [[ $(candidate \"100.0 49.9\") = \"1.0 0.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"0.0 0.25 0.5 0.75 1.0\" ]]\n    [[ $(candidate \"2.0 1.0 5.0 3.0 4.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n    [[ $(candidate \"12.0 11.0 15.0 13.0 14.0\") = \"0.25 0.0 1.0 0.5 0.75\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_22_filter_integers", "prompt": "#!/bin/bash\n# Filter given list of any sh values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n", "test": "}\n\ncandidate() {\n    filter_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"4   23.2 9 adasd\") = \"4 9\" ]]\n    [[ $(candidate \"3 c 3 3 a b\") = \"3 3 3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_23_strlen", "prompt": "#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n", "test": "}\n\ncandidate() {\n    strlen \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"x\") = \"1\" ]]\n    [[ $(candidate \"asdasnakj\") = \"9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_24_largest_divisor", "prompt": "#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n", "test": "}\n\ncandidate() {\n    largest_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n    [[ $(candidate \"10\") = \"5\" ]]\n    [[ $(candidate \"100\") = \"50\" ]]\n    [[ $(candidate \"49\") = \"7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_25_factorize", "prompt": "#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n", "test": "}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_26_remove_duplicates", "prompt": "#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n", "test": "}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_27_flip_case", "prompt": "#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n", "test": "}\n\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_28_concatenate", "prompt": "#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n", "test": "}\n\ncandidate() {\n    concatenate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"x y z\") = \"xyz\" ]]\n    [[ $(candidate \"x y z w k\") = \"xyzwk\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_30_get_positive", "prompt": "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n", "test": "}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_31_is_prime", "prompt": "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n", "test": "}\n\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_33_sort_third", "prompt": "#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n", "test": "}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_34_unique", "prompt": "#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n", "test": "}\n\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_35_max_element", "prompt": "#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n", "test": "}\n\ncandidate() {\n    max_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"5 3 -5 2 -3 3 9 0 124 1 -10\") = \"124\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_36_fizz_buzz", "prompt": "#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n", "test": "}\n\ncandidate() {\n    fizz_buzz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"50\") = \"0\" ]]\n    [[ $(candidate \"78\") = \"2\" ]]\n    [[ $(candidate \"79\") = \"3\" ]]\n    [[ $(candidate \"100\") = \"3\" ]]\n    [[ $(candidate \"200\") = \"6\" ]]\n    [[ $(candidate \"4000\") = \"192\" ]]\n    [[ $(candidate \"10000\") = \"639\" ]]\n    [[ $(candidate \"100000\") = \"8026\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_37_sort_even", "prompt": "#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n", "test": "}\n\ncandidate() {\n    sort_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1 2 3\" ]]\n    [[ $(candidate \"5 3 -5 2 -3 3 9 0 123 1 -10\") = \"-10 3 -5 2 -3 3 5 0 9 1 123\" ]]\n    [[ $(candidate \"5 8 -12 4 23 2 3 11 12 -10\") = \"-12 8 3 4 5 2 12 11 23 -10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_39_prime_fib", "prompt": "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n", "test": "}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_40_triples_sum_to_zero", "prompt": "#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n", "test": "}\n\ncandidate() {\n    triples_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -1\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"1 2 5 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 9 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"1 3 5 -100\") = \"false\" ]]\n    [[ $(candidate \"100 3 5 -100\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_41_car_race_collision", "prompt": "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n", "test": "}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_42_incr_list", "prompt": "#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n", "test": "}\n\ncandidate() {\n    incr_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"3 2 1\") = \"4 3 2\" ]]\n    [[ $(candidate \"5 2 5 2 3 3 9 0 123\") = \"6 3 6 3 4 4 10 1 124\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_43_pairs_sum_to_zero", "prompt": "#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n", "test": "}\n\ncandidate() {\n    pairs_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 -5 3 5 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 30\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 3 2 31\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 30\") = \"false\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 31\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_44_change_base", "prompt": "#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n", "test": "}\n\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") = \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\" \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_45_triangle_area", "prompt": "#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n", "test": "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"3\") = \"7.5\" ]]\n    [[ $(candidate \"2\" \"2\") = \"2.0\" ]]\n    [[ $(candidate \"10\" \"8\") = \"40.0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_46_fib4", "prompt": "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n", "test": "}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_47_median", "prompt": "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n", "test": "}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_48_is_palindrome", "prompt": "#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n", "test": "}\n\ncandidate() {\n    is_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"aba\") = \"true\" ]]\n    [[ $(candidate \"aaaaa\") = \"true\" ]]\n    [[ $(candidate \"zbcd\") = \"false\" ]]\n    [[ $(candidate \"xywyx\") = \"true\" ]]\n    [[ $(candidate \"xywyz\") = \"false\" ]]\n    [[ $(candidate \"xywzx\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_49_modp", "prompt": "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n", "test": "}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_51_remove_vowels", "prompt": "#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n", "test": "}\n\ncandidate() {\n    remove_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"abcdef\\nghijklm\") = \"bcdf\\nghjklm\" ]]\n    [[ $(candidate \"fedcba\") = \"fdcb\" ]]\n    [[ $(candidate \"eeeee\") = \"\" ]]\n    [[ $(candidate \"acBAA\") = \"cB\" ]]\n    [[ $(candidate \"EcBOO\") = \"cB\" ]]\n    [[ $(candidate \"ybcd\") = \"ybcd\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_52_below_threshold", "prompt": "#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n", "test": "}\n\ncandidate() {\n    below_threshold \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\" \"100\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"5\") = \"false\" ]]\n    [[ $(candidate \"1 20 4 10\" \"21\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\" \"22\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"11\") = \"true\" ]]\n    [[ $(candidate \"1 8 4 10\" \"10\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_53_add", "prompt": "#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n", "test": "}\n\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1\" \"0\") = \"1\" ]]\n    [[ $(candidate \"2\" \"3\") = \"5\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate \"7\" \"5\") = \"12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_54_same_chars", "prompt": "#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n", "test": "}\n\ncandidate() {\n    same_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") = \"true\" ]]\n    [[ $(candidate \"abcd\" \"dddddddabc\") = \"true\" ]]\n    [[ $(candidate \"dddddddabc\" \"abcd\") = \"true\" ]]\n    [[ $(candidate \"eabcd\" \"dddddddabc\") = \"false\" ]]\n    [[ $(candidate \"abcd\" \"dddddddabcf\") = \"false\" ]]\n    [[ $(candidate \"eabcdzzzz\" \"dddzzzzzzzddddabc\") = \"false\" ]]\n    [[ $(candidate \"aabb\" \"aaccc\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_55_fib", "prompt": "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n", "test": "}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate \"12\") = \"144\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_56_correct_bracketing", "prompt": "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n", "test": "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_57_monotonic", "prompt": "#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n", "test": "}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_58_common", "prompt": "#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n", "test": "}\n\ncandidate() {\n    common \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\") = \"1 5 653\" ]]\n    [[ $(candidate \"5 3 2 8\" \"3 2\") = \"2 3\" ]]\n    [[ $(candidate \"4 3 2 8\" \"3 2 4\") = \"2 3 4\" ]]\n    [[ $(candidate \"4 3 2 8\" \"\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_59_largest_prime_factor", "prompt": "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n", "test": "}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_60_sum_to_n", "prompt": "#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n", "test": "}\n\ncandidate() {\n    sum_to_n \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"66\" ]]\n    [[ $(candidate \"30\") = \"465\" ]]\n    [[ $(candidate \"100\") = \"5050\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_61_correct_bracketing", "prompt": "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n", "test": "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_62_derivative", "prompt": "#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n", "test": "}\n\ncandidate() {\n    derivative \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"1 4 12 20\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 6\" ]]\n    [[ $(candidate \"3 2 1\") = \"2 2\" ]]\n    [[ $(candidate \"3 2 1 0 4\") = \"2 2 0 16\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_63_fibfib", "prompt": "#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n", "test": "}\n\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\") = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\") = \"927\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_64_vowels_count", "prompt": "#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n", "test": "}\n\ncandidate() {\n    vowels_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"2\" ]]\n    [[ $(candidate \"Alone\") = \"3\" ]]\n    [[ $(candidate \"key\") = \"2\" ]]\n    [[ $(candidate \"bye\") = \"1\" ]]\n    [[ $(candidate \"keY\") = \"2\" ]]\n    [[ $(candidate \"bYe\") = \"1\" ]]\n    [[ $(candidate \"ACEDY\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_65_circular_shift", "prompt": "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n", "test": "}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_66_digitSum", "prompt": "#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n", "test": "}\n\ncandidate() {\n    digitSum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abAB\") = \"131\" ]]\n    [[ $(candidate \"abcCd\") = \"67\" ]]\n    [[ $(candidate \"helloE\") = \"69\" ]]\n    [[ $(candidate \"woArBld\") = \"131\" ]]\n    [[ $(candidate \"aAaaaXa\") = \"153\" ]]\n    [[ $(candidate \" How are yOu?\") = \"151\" ]]\n    [[ $(candidate \"You arE Very Smart\") = \"327\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_67_fruit_distribution", "prompt": "#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n", "test": "}\n\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_68_pluck", "prompt": "#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n", "test": "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_69_search", "prompt": "#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n", "test": "}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_70_strange_sort_list", "prompt": "#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n", "test": "}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_71_triangle_area", "prompt": "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n", "test": "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_72_will_it_fly", "prompt": "#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n", "test": "}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_73_smallest_change", "prompt": "#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n", "test": "}\n\ncandidate() {\n    smallest_change \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 4 7 9 6\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 3 2 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 4 4 2\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 2 1\") = \"0\" ]]\n    [[ $(candidate \"3 1 1 3\") = \"0\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_74_total_match", "prompt": "#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n", "test": "}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_75_is_multiply_prime", "prompt": "#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n", "test": "}\n\ncandidate() {\n    is_multiply_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"false\" ]]\n    [[ $(candidate \"30\") = \"true\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"125\") = \"true\" ]]\n    [[ $(candidate \"105\") = \"true\" ]]\n    [[ $(candidate \"126\") = \"false\" ]]\n    [[ $(candidate \"729\") = \"false\" ]]\n    [[ $(candidate \"891\") = \"false\" ]]\n    [[ $(candidate \"1001\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_76_is_simple_power", "prompt": "#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n", "test": "}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_77_iscube", "prompt": "#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n", "test": "}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_78_hex_key", "prompt": "#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n", "test": "}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_79_decimal_to_binary", "prompt": "#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n", "test": "}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_80_is_happy", "prompt": "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n", "test": "}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_81_numerical_letter_grade", "prompt": "#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n", "test": "}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_82_prime_length", "prompt": "#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n", "test": "}\n\ncandidate() {\n    prime_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\") = \"true\" ]]\n    [[ $(candidate \"abcdcba\") = \"true\" ]]\n    [[ $(candidate \"kittens\") = \"true\" ]]\n    [[ $(candidate \"orange\") = \"false\" ]]\n    [[ $(candidate \"wow\") = \"true\" ]]\n    [[ $(candidate \"world\") = \"true\" ]]\n    [[ $(candidate \"MadaM\") = \"true\" ]]\n    [[ $(candidate \"Wow\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"HI\") = \"true\" ]]\n    [[ $(candidate \"go\") = \"true\" ]]\n    [[ $(candidate \"gogo\") = \"false\" ]]\n    [[ $(candidate \"aaaaaaaaaaaaaaa\") = \"false\" ]]\n    [[ $(candidate \"Madam\") = \"true\" ]]\n    [[ $(candidate \"M\") = \"false\" ]]\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_83_starts_one_ends", "prompt": "#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n", "test": "}\n\ncandidate() {\n    starts_one_ends \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"2\") = \"18\" ]]\n    [[ $(candidate \"3\") = \"180\" ]]\n    [[ $(candidate \"4\") = \"1800\" ]]\n    [[ $(candidate \"5\") = \"18000\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_84_solve", "prompt": "#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n", "test": "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1000\") = \"1\" ]]\n    [[ $(candidate \"150\") = \"110\" ]]\n    [[ $(candidate \"147\") = \"1100\" ]]\n    [[ $(candidate \"333\") = \"1001\" ]]\n    [[ $(candidate \"963\") = \"10010\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_85_add", "prompt": "#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n", "test": "}\n\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 88\") = \"88\" ]]\n    [[ $(candidate \"4 5 6 7 2 122\") = \"122\" ]]\n    [[ $(candidate \"4 0 6 7\") = \"0\" ]]\n    [[ $(candidate \"4 4 6 8\") = \"12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_86_anti_shuffle", "prompt": "#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n", "test": "}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_87_get_row", "prompt": "#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n", "test": "}\n\ncandidate() {\n    get_row \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 4\\n1 0\\n2 5\\n2 0\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\" \"2\") = \"0 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 1 3 4 5 6\\n1 2 1 4 5 6\\n1 2 3 1 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 0\\n2 1\\n2 0\\n3 2\\n3 0\\n4 3\\n4 0\\n5 4\\n5 0\\n6 5\\n6 0\" ]]\n    [[ $(candidate \"\" \"1\") = \"\" ]]\n    [[ $(candidate \"1\" \"2\") = \"\" ]]\n    [[ $(candidate \"\\n1\\n1 2 3\" \"3\") = \"2 2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_88_sort_array", "prompt": "#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n", "test": "}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_89_encrypt", "prompt": "#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n", "test": "}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_90_next_smallest", "prompt": "#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n", "test": "}\n\ncandidate() {\n    next_smallest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2\" ]]\n    [[ $(candidate \"5 1 4 3 2\") = \"2\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"1 1\") = \"None\" ]]\n    [[ $(candidate \"1 1 1 1 0\") = \"1\" ]]\n    [[ $(candidate \"1 1\") = \"None\" ]]\n    [[ $(candidate \"-35 34 12 -45\") = \"-35\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_91_is_bored", "prompt": "#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n", "test": "}\n\ncandidate() {\n    is_bored \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\") = \"0\" ]]\n    [[ $(candidate \"Is the sky blue?\") = \"0\" ]]\n    [[ $(candidate \"I love It \\!\") = \"1\" ]]\n    [[ $(candidate \"bIt\") = \"0\" ]]\n    [[ $(candidate \"I feel good today. I will be productive. will kill It\") = \"2\" ]]\n    [[ $(candidate \"You and I are going for a walk\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_92_any_int", "prompt": "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n", "test": "}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_93_encode", "prompt": "#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n", "test": "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n    [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\") = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\") = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_94_skjkasdkd", "prompt": "#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n", "test": "}\n\ncandidate() {\n    skjkasdkd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\") = \"10\" ]]\n    [[ $(candidate \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\") = \"25\" ]]\n    [[ $(candidate \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\") = \"13\" ]]\n    [[ $(candidate \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\") = \"11\" ]]\n    [[ $(candidate \"0 81 12 3 1 21\") = \"3\" ]]\n    [[ $(candidate \"0 8 1 2 1 7\") = \"7\" ]]\n    [[ $(candidate \"8191\") = \"19\" ]]\n    [[ $(candidate \"8191 123456 127 7\") = \"19\" ]]\n    [[ $(candidate \"127 97 8192\") = \"10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_95_check_dict_case", "prompt": "#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n", "test": "}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_96_count_up_to", "prompt": "#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n", "test": "}\n\ncandidate() {\n    count_up_to \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"2 3\" ]]\n    [[ $(candidate \"6\") = \"2 3 5\" ]]\n    [[ $(candidate \"7\") = \"2 3 5\" ]]\n    [[ $(candidate \"10\") = \"2 3 5 7\" ]]\n    [[ $(candidate \"0\") = \"\" ]]\n    [[ $(candidate \"22\") = \"2 3 5 7 11 13 17 19\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n    [[ $(candidate \"18\") = \"2 3 5 7 11 13 17\" ]]\n    [[ $(candidate \"47\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43\" ]]\n    [[ $(candidate \"101\") = \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_97_multiply", "prompt": "#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n", "test": "}\n\ncandidate() {\n    multiply \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"148\" \"412\") = \"16\" ]]\n    [[ $(candidate \"19\" \"28\") = \"72\" ]]\n    [[ $(candidate \"2020\" \"1851\") = \"0\" ]]\n    [[ $(candidate \"14\" \"-15\") = \"20\" ]]\n    [[ $(candidate \"76\" \"67\") = \"42\" ]]\n    [[ $(candidate \"17\" \"27\") = \"49\" ]]\n    [[ $(candidate \"0\" \"1\") = \"0\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_98_count_upper", "prompt": "#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n", "test": "}\n\ncandidate() {\n    count_upper \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aBCdEf\") = \"1\" ]]\n    [[ $(candidate \"abcdefg\") = \"0\" ]]\n    [[ $(candidate \"dBBE\") = \"0\" ]]\n    [[ $(candidate \"B\") = \"0\" ]]\n    [[ $(candidate \"U\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"EEEE\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_99_closest_integer", "prompt": "#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n", "test": "}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_100_make_a_pile", "prompt": "#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n", "test": "}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_101_words_string", "prompt": "#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n", "test": "}\n\ncandidate() {\n    words_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi, my name is John\") = \"Hi my name is John\" ]]\n    [[ $(candidate \"One, two, three, four, five, six\") = \"One two three four five six\" ]]\n    [[ $(candidate \"Hi, my name\") = \"Hi my name\" ]]\n    [[ $(candidate \"One,, two, three, four, five, six,\") = \"One two three four five six\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"ahmed     , gamal\") = \"ahmed gamal\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_102_choose_num", "prompt": "#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n", "test": "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\") = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_103_rounded_avg", "prompt": "#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n", "test": "}\n\ncandidate() {\n    rounded_avg \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"5\") = \"0b11\" ]]\n    [[ $(candidate \"7\" \"13\") = \"0b1010\" ]]\n    [[ $(candidate \"964\" \"977\") = \"0b1111001010\" ]]\n    [[ $(candidate \"996\" \"997\") = \"0b1111100100\" ]]\n    [[ $(candidate \"560\" \"851\") = \"0b1011000010\" ]]\n    [[ $(candidate \"185\" \"546\") = \"0b101101110\" ]]\n    [[ $(candidate \"362\" \"496\") = \"0b110101101\" ]]\n    [[ $(candidate \"350\" \"902\") = \"0b1001110010\" ]]\n    [[ $(candidate \"197\" \"233\") = \"0b11010111\" ]]\n    [[ $(candidate \"7\" \"5\") = \"-1\" ]]\n    [[ $(candidate \"5\" \"1\") = \"-1\" ]]\n    [[ $(candidate \"5\" \"5\") = \"0b101\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_104_unique_digits", "prompt": "#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n", "test": "}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_105_by_length", "prompt": "#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n", "test": "}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_106_f", "prompt": "#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n", "test": "}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1 2 6 24 15\" ]]\n    [[ $(candidate \"7\") = \"1 2 6 24 15 720 28\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"1 2 6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_107_even_odd_palindrome", "prompt": "#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n", "test": "}\n\ncandidate() {\n    even_odd_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"8 13\" ]]\n    [[ $(candidate \"12\") = \"4 6\" ]]\n    [[ $(candidate \"3\") = \"1 2\" ]]\n    [[ $(candidate \"63\") = \"6 8\" ]]\n    [[ $(candidate \"25\") = \"5 6\" ]]\n    [[ $(candidate \"19\") = \"4 6\" ]]\n    [[ $(candidate \"9\") = \"4 5\" ]]\n    [[ $(candidate \"1\") = \"0 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_108_count_nums", "prompt": "#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n", "test": "}\n\ncandidate() {\n    count_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 0\") = \"0\" ]]\n    [[ $(candidate \"1 1 2 -2 3 4 5\") = \"6\" ]]\n    [[ $(candidate \"1 6 9 -6 0 1 5\") = \"5\" ]]\n    [[ $(candidate \"1 100 98 -7 1 -1\") = \"4\" ]]\n    [[ $(candidate \"12 23 34 -45 -56 0\") = \"5\" ]]\n    [[ $(candidate \"0 1\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_109_move_one_ball", "prompt": "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n", "test": "}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_110_exchange", "prompt": "#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n", "test": "}\n\ncandidate() {\n    exchange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\" \"1 2 3 4\") = \"YES\" ]]\n    [[ $(candidate \"1 2 3 4\" \"1 5 3 4\") = \"NO\" ]]\n    [[ $(candidate \"1 2 3 4\" \"2 1 4 3\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 4\") = \"YES\" ]]\n    [[ $(candidate \"5 7 3\" \"2 6 3\") = \"NO\" ]]\n    [[ $(candidate \"3 2 6 1 8 9\" \"3 5 5 1 1 1\") = \"NO\" ]]\n    [[ $(candidate \"100 200\" \"200 200\") = \"YES\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_111_histogram", "prompt": "#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n", "test": "}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_112_reverse_delete", "prompt": "#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n", "test": "}\n\ncandidate() {\n    reverse_delete \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\" \"ae\") = \"bcd false\" ]]\n    [[ $(candidate \"abcdef\" \"b\") = \"acdef false\" ]]\n    [[ $(candidate \"abcdedcba\" \"ab\") = \"cdedc true\" ]]\n    [[ $(candidate \"dwik\" \"w\") = \"dik false\" ]]\n    [[ $(candidate \"a\" \"a\") = \" true\" ]]\n    [[ $(candidate \"abcdedcba\" \"\") = \"abcdedcba true\" ]]\n    [[ $(candidate \"abcdedcba\" \"v\") = \"abcdedcba true\" ]]\n    [[ $(candidate \"vabba\" \"v\") = \"abba true\" ]]\n    [[ $(candidate \"mamma\" \"mia\") = \" true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_114_minSubArraySum", "prompt": "#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n", "test": "}\n\ncandidate() {\n    minSubArraySum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 4 1 2 4\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 -3\") = \"-6\" ]]\n    [[ $(candidate \"-1 -2 -3 2 -10\") = \"-14\" ]]\n    [[ $(candidate \"-9999999999999999\") = \"-9999999999999999\" ]]\n    [[ $(candidate \"0 10 20 1000000\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"100 -1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"10 11 13 8 3 4\") = \"3\" ]]\n    [[ $(candidate \"100 -33 32 -1 0 -2\") = \"-33\" ]]\n    [[ $(candidate \"-10\") = \"-10\" ]]\n    [[ $(candidate \"7\") = \"7\" ]]\n    [[ $(candidate \"1 -1\") = \"-1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_115_max_fill", "prompt": "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n", "test": "}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_116_sort_array", "prompt": "#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n", "test": "}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 2 3 4\") = \"1 2 4 3 5\" ]]\n    [[ $(candidate \"-2 -3 -4 -5 -6\") = \"-4 -2 -6 -5 -3\" ]]\n    [[ $(candidate \"1 0 2 3 4\") = \"0 1 2 4 3\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"2 5 77 4 5 3 5 7 2 3 4\") = \"2 2 4 4 3 3 5 5 5 7 77\" ]]\n    [[ $(candidate \"3 6 44 12 32 5\") = \"32 3 5 6 12 44\" ]]\n    [[ $(candidate \"2 4 8 16 32\") = \"2 4 8 16 32\" ]]\n    [[ $(candidate \"2 4 8 16 32\") = \"2 4 8 16 32\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_117_select_words", "prompt": "#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n", "test": "}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_118_get_closest_vowel", "prompt": "#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n", "test": "}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\" ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\" ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\" ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_119_match_parens", "prompt": "#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n", "test": "}\n\ncandidate() {\n    match_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()( )\") = \"Yes\" ]]\n    [[ $(candidate \") )\") = \"No\" ]]\n    [[ $(candidate \"(()(()) ())())\") = \"No\" ]]\n    [[ $(candidate \")()) (()()(\") = \"Yes\" ]]\n    [[ $(candidate \"(()))) (()())((\") = \"Yes\" ]]\n    [[ $(candidate \"() ())\") = \"No\" ]]\n    [[ $(candidate \"(()( ()))()\") = \"Yes\" ]]\n    [[ $(candidate \"(((( ((())\") = \"No\" ]]\n    [[ $(candidate \")(() (()(\") = \"No\" ]]\n    [[ $(candidate \")( )(\") = \"No\" ]]\n    [[ $(candidate \"( )\") = \"Yes\" ]]\n    [[ $(candidate \") (\") = \"Yes\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_120_maximum", "prompt": "#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n", "test": "}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_121_solution", "prompt": "#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n", "test": "}\n\ncandidate() {\n    solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 8 7 1\") = \"12\" ]]\n    [[ $(candidate \"3 3 3 3 3\") = \"9\" ]]\n    [[ $(candidate \"30 13 24 321\") = \"0\" ]]\n    [[ $(candidate \"5 9\") = \"5\" ]]\n    [[ $(candidate \"2 4 8\") = \"0\" ]]\n    [[ $(candidate \"30 13 23 32\") = \"23\" ]]\n    [[ $(candidate \"3 13 2 9\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_122_add_elements", "prompt": "#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n", "test": "}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_123_get_odd_collatz", "prompt": "#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n", "test": "}\n\ncandidate() {\n    get_odd_collatz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"14\") = \"1 5 7 11 13 17\" ]]\n    [[ $(candidate \"5\") = \"1 5\" ]]\n    [[ $(candidate \"12\") = \"1 3 5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_124_valid_date", "prompt": "#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n", "test": "}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_125_split_words", "prompt": "#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n", "test": "}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_126_is_sorted", "prompt": "#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n", "test": "}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_127_intersection", "prompt": "#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n", "test": "}\n\ncandidate() {\n    intersection \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\" \"2 3\") = \"NO\" ]]\n    [[ $(candidate \"-1 1\" \"0 4\") = \"NO\" ]]\n    [[ $(candidate \"-3 -1\" \"-5 5\") = \"YES\" ]]\n    [[ $(candidate \"-2 2\" \"-4 0\") = \"YES\" ]]\n    [[ $(candidate \"-11 2\" \"-1 -1\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"3 5\") = \"NO\" ]]\n    [[ $(candidate \"1 2\" \"1 2\") = \"NO\" ]]\n    [[ $(candidate \"-2 -2\" \"-3 -2\") = \"NO\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_128_prod_signs", "prompt": "#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n", "test": "}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_129_minPath", "prompt": "#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n", "test": "}\n\ncandidate() {\n    minPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\" \"3\") = \"1 2 1\" ]]\n    [[ $(candidate \"5 9 3\\n4 1 6\\n7 8 2\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\" \"4\") = \"1 2 1 2\" ]]\n    [[ $(candidate \"6 4 13 10\\n5 7 12 1\\n3 16 11 15\\n8 14 9 2\" \"7\") = \"1 10 1 10 1 10 1\" ]]\n    [[ $(candidate \"8 14 9 2\\n6 4 13 15\\n5 7 1 12\\n3 10 11 16\" \"5\") = \"1 7 1 7 1\" ]]\n    [[ $(candidate \"11 8 7 2\\n5 16 14 4\\n9 3 15 6\\n12 13 10 1\" \"9\") = \"1 6 1 6 1 6 1 6 1\" ]]\n    [[ $(candidate \"12 13 10 1\\n9 3 15 6\\n5 16 14 4\\n11 8 7 2\" \"12\") = \"1 6 1 6 1 6 1 6 1 6 1 6\" ]]\n    [[ $(candidate \"2 7 4\\n3 1 5\\n6 8 9\" \"8\") = \"1 3 1 3 1 3 1 3\" ]]\n    [[ $(candidate \"6 1 5\\n3 8 9\\n2 7 4\" \"8\") = \"1 5 1 5 1 5 1 5\" ]]\n    [[ $(candidate \"1 2\\n3 4\" \"10\") = \"1 2 1 2 1 2 1 2 1 2\" ]]\n    [[ $(candidate \"1 3\\n3 2\" \"10\") = \"1 3 1 3 1 3 1 3 1 3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_130_tri", "prompt": "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n", "test": "}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_131_digits", "prompt": "#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n", "test": "}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_132_is_nested", "prompt": "#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n", "test": "}\n\ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n    [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_133_sum_squares", "prompt": "#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n", "test": "}\n\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 3.0 5.0 7.0\") = \"84\" ]]\n    [[ $(candidate \"1.4 4.2 0.0\") = \"29\" ]]\n    [[ $(candidate \"-2.4 1.0 1.0\") = \"6\" ]]\n    [[ $(candidate \"100.0 1.0 15.0 2.0\") = \"10230\" ]]\n    [[ $(candidate \"10000.0 10000.0\") = \"200000000\" ]]\n    [[ $(candidate \"-1.4 4.6 6.3\") = \"75\" ]]\n    [[ $(candidate \"-1.4 17.9 18.9 19.9\") = \"1086\" ]]\n    [[ $(candidate \"0.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0\") = \"1\" ]]\n    [[ $(candidate \"-1.0 1.0 0.0\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "prompt": "#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n", "test": "}\n\ncandidate() {\n    check_if_last_char_is_a_letter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\") = \"false\" ]]\n    [[ $(candidate \"apple pi e\") = \"true\" ]]\n    [[ $(candidate \"eeeee\") = \"false\" ]]\n    [[ $(candidate \"A\") = \"true\" ]]\n    [[ $(candidate \"Pumpkin pie \") = \"false\" ]]\n    [[ $(candidate \"Pumpkin pie 1\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"eeeee e \") = \"false\" ]]\n    [[ $(candidate \"apple pie\") = \"false\" ]]\n    [[ $(candidate \"apple pi e \") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_135_can_arrange", "prompt": "#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n", "test": "}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_136_largest_smallest_integers", "prompt": "#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n", "test": "}\n\ncandidate() {\n    largest_smallest_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 1 3 5 7\") = \"None 1\" ]]\n    [[ $(candidate \"2 4 1 3 5 7 0\") = \"None 1\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 -2\") = \"-2 1\" ]]\n    [[ $(candidate \"4 5 3 6 2 7 -7\") = \"-7 2\" ]]\n    [[ $(candidate \"7 3 8 4 9 2 5 -9\") = \"-9 2\" ]]\n    [[ $(candidate \"\") = \"None None\" ]]\n    [[ $(candidate \"0\") = \"None None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6\") = \"-1 None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6 0\") = \"-1 None\" ]]\n    [[ $(candidate \"-6 -4 -4 -3 1\") = \"-3 1\" ]]\n    [[ $(candidate \"-6 -4 -4 -3 -100 1\") = \"-3 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_137_compare_one", "prompt": "#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n", "test": "}\n\ncandidate() {\n    compare_one \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"2\" ]]\n    [[ $(candidate \"1\" \"2.5\") = \"2.5\" ]]\n    [[ $(candidate \"2\" \"3\") = \"3\" ]]\n    [[ $(candidate \"5\" \"6\") = \"6\" ]]\n    [[ $(candidate \"1\" \"2,3\") = \"2,3\" ]]\n    [[ $(candidate \"5,1\" \"6\") = \"6\" ]]\n    [[ $(candidate \"1\" \"2\") = \"2\" ]]\n    [[ $(candidate \"1\" \"1\") = \"None\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_138_is_equal_to_sum_even", "prompt": "#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n", "test": "}\n\ncandidate() {\n    is_equal_to_sum_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"8\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"false\" ]]\n    [[ $(candidate \"12\") = \"true\" ]]\n    [[ $(candidate \"13\") = \"false\" ]]\n    [[ $(candidate \"16\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_139_special_factorial", "prompt": "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n", "test": "}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_140_fix_spaces", "prompt": "#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n", "test": "}\n\ncandidate() {\n    fix_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Example\") = \"Example\" ]]\n    [[ $(candidate \"Mudasir Hanif \") = \"Mudasir_Hanif_\" ]]\n    [[ $(candidate \"Yellow Yellow  Dirty  Fellow\") = \"Yellow_Yellow__Dirty__Fellow\" ]]\n    [[ $(candidate \"Exa   mple\") = \"Exa-mple\" ]]\n    [[ $(candidate \"   Exa 1 2 2 mple\") = \"-Exa_1_2_2_mple\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_141_file_name_check", "prompt": "#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n", "test": "}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_142_sum_squares", "prompt": "#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n", "test": "}\n\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"6\" ]]\n    [[ $(candidate \"1 4 9\") = \"14\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1 1 1 1 1 1\") = \"9\" ]]\n    [[ $(candidate \"-1 -1 -1 -1 -1 -1 -1 -1 -1\") = \"-3\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"-1 -5 2 -1 -5\") = \"-126\" ]]\n    [[ $(candidate \"-56 -99 1 0 -2\") = \"3030\" ]]\n    [[ $(candidate \"-1 0 0 0 0 0 0 0 -1\") = \"0\" ]]\n    [[ $(candidate \"-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37\") = \"-14196\" ]]\n    [[ $(candidate \"-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10\") = \"-1448\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_143_words_in_sentence", "prompt": "#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n", "test": "}\n\ncandidate() {\n    words_in_sentence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"This is a test\") = \"is\" ]]\n    [[ $(candidate \"lets go for swimming\") = \"go for\" ]]\n    [[ $(candidate \"there is no place available here\") = \"there is no place\" ]]\n    [[ $(candidate \"Hi I am Hussein\") = \"Hi am Hussein\" ]]\n    [[ $(candidate \"go for it\") = \"go for it\" ]]\n    [[ $(candidate \"here\") = \"\" ]]\n    [[ $(candidate \"here is\") = \"is\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_144_simplify", "prompt": "#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n", "test": "}\n\ncandidate() {\n    simplify \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/6\" \"2/1\") = \"false\" ]]\n    [[ $(candidate \"5/1\" \"3/1\") = \"true\" ]]\n    [[ $(candidate \"7/10\" \"10/2\") = \"false\" ]]\n    [[ $(candidate \"2/10\" \"50/10\") = \"true\" ]]\n    [[ $(candidate \"7/2\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"11/6\" \"6/1\") = \"true\" ]]\n    [[ $(candidate \"2/3\" \"5/2\") = \"false\" ]]\n    [[ $(candidate \"5/2\" \"3/5\") = \"false\" ]]\n    [[ $(candidate \"2/4\" \"8/4\") = \"true\" ]]\n    [[ $(candidate \"2/4\" \"4/2\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"5/1\") = \"true\" ]]\n    [[ $(candidate \"1/5\" \"1/5\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_145_order_by_points", "prompt": "#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n", "test": "}\n\ncandidate() {\n    order_by_points \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 11 -1 -11 -12\") = \"-1 -11 1 -12 11\" ]]\n    [[ $(candidate \"1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46\") = \"0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -11 -32 43 54 -98 2 -3\") = \"-3 -32 -98 -11 1 2 43 54\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11\") = \"1 10 2 11 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"0 6 6 -76 -21 23 4\") = \"-76 -21 0 4 23 6 6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_146_specialFilter", "prompt": "#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n", "test": "}\n\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\") = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\") = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_147_get_max_triples", "prompt": "#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n", "test": "}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_148_bf", "prompt": "#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n", "test": "}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_149_sorted_list_sum", "prompt": "#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n", "test": "}\n\ncandidate() {\n    sorted_list_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aa a aaa\") = \"aa\" ]]\n    [[ $(candidate \"school AI asdf b\") = \"AI asdf school\" ]]\n    [[ $(candidate \"d b c a\") = \"\" ]]\n    [[ $(candidate \"d dcba abcd a\") = \"abcd dcba\" ]]\n    [[ $(candidate \"AI ai au\") = \"AI ai au\" ]]\n    [[ $(candidate \"a b b c c a\") = \"\" ]]\n    [[ $(candidate \"aaaa bbbb dd cc\") = \"cc dd aaaa bbbb\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_150_x_or_y", "prompt": "#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n", "test": "}\n\ncandidate() {\n    x_or_y \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"34\" \"12\") = \"34\" ]]\n    [[ $(candidate \"15\" \"8\" \"5\") = \"5\" ]]\n    [[ $(candidate \"3\" \"33\" \"5212\") = \"33\" ]]\n    [[ $(candidate \"1259\" \"3\" \"52\") = \"3\" ]]\n    [[ $(candidate \"7919\" \"-1\" \"12\") = \"-1\" ]]\n    [[ $(candidate \"3609\" \"1245\" \"583\") = \"583\" ]]\n    [[ $(candidate \"91\" \"56\" \"129\") = \"129\" ]]\n    [[ $(candidate \"6\" \"34\" \"1234\") = \"1234\" ]]\n    [[ $(candidate \"1\" \"2\" \"0\") = \"0\" ]]\n    [[ $(candidate \"2\" \"2\" \"0\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_151_double_the_difference", "prompt": "#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n", "test": "}\n\ncandidate() {\n    double_the_difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"5.0 4.0\") = \"25\" ]]\n    [[ $(candidate \"0.1 0.2 0.3\") = \"0\" ]]\n    [[ $(candidate \"-10.0 -20.0 -30.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0 -2.0 8.0\") = \"0\" ]]\n    [[ $(candidate \"0.2 3.0 5.0\") = \"34\" ]]\n    [[ $(candidate \"-9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0\") = \"165\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_152_compare", "prompt": "#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n", "test": "}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_153_Strongest_Extension", "prompt": "#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n", "test": "}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_154_cycpattern_check", "prompt": "#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n", "test": "}\n\ncandidate() {\n    cycpattern_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xyzw\" \"xyw\") = \"false\" ]]\n    [[ $(candidate \"yello\" \"ell\") = \"true\" ]]\n    [[ $(candidate \"whattup\" \"ptut\") = \"false\" ]]\n    [[ $(candidate \"efef\" \"fee\") = \"true\" ]]\n    [[ $(candidate \"abab\" \"aabb\") = \"false\" ]]\n    [[ $(candidate \"winemtt\" \"tinem\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_155_even_odd_count", "prompt": "#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n", "test": "}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_156_int_to_mini_roman", "prompt": "#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n", "test": "}\n\ncandidate() {\n    int_to_mini_roman \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"19\") = \"xix\" ]]\n    [[ $(candidate \"152\") = \"clii\" ]]\n    [[ $(candidate \"251\") = \"ccli\" ]]\n    [[ $(candidate \"426\") = \"cdxxvi\" ]]\n    [[ $(candidate \"500\") = \"d\" ]]\n    [[ $(candidate \"1\") = \"i\" ]]\n    [[ $(candidate \"4\") = \"iv\" ]]\n    [[ $(candidate \"43\") = \"xliii\" ]]\n    [[ $(candidate \"90\") = \"xc\" ]]\n    [[ $(candidate \"94\") = \"xciv\" ]]\n    [[ $(candidate \"532\") = \"dxxxii\" ]]\n    [[ $(candidate \"900\") = \"cm\" ]]\n    [[ $(candidate \"994\") = \"cmxciv\" ]]\n    [[ $(candidate \"1000\") = \"m\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_157_right_angle_triangle", "prompt": "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n", "test": "}\n\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\" ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\" ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") = \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_158_find_max", "prompt": "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n", "test": "}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_159_eat", "prompt": "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n", "test": "}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_160_do_algebra", "prompt": "#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n", "test": "}\n\ncandidate() {\n    do_algebra \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"** * +\" \"2 3 4 5\") = \"37\" ]]\n    [[ $(candidate \"+ * -\" \"2 3 4 5\") = \"9\" ]]\n    [[ $(candidate \"// *\" \"7 3 4\") = \"8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_161_solve", "prompt": "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n", "test": "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\") = \"#CCC\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_162_string_to_md5", "prompt": "#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n", "test": "}\n\ncandidate() {\n    string_to_md5 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\") = \"3e25960a79dbc69b674cd4ec67a72c62\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"A B C\") = \"0ef78513b0cb8cef12743f5aeb35f888\" ]]\n    [[ $(candidate \"password\") = \"5f4dcc3b5aa765d61d8327deb882cf99\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "HumanEval_163_generate_integers", "prompt": "#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n", "test": "}\n\ncandidate() {\n    generate_integers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"10\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"10\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"132\" \"2\") = \"2 4 6 8\" ]]\n    [[ $(candidate \"17\" \"89\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_3_is_not_prime", "prompt": "#!/bin/bash\n# Write a sh function to identify non-prime numbers.\n#\n# $1 is an integer\nis_not_prime() {\n", "test": "}\n\ncandidate() {\n    is_not_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"35\") = \"true\" ]]\n    [[ $(candidate \"37\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_4_heap_queue_largest", "prompt": "#!/bin/bash\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n", "test": "}\n\ncandidate() {\n    heap_queue_largest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_6_differ_At_One_Bit_Pos", "prompt": "#!/bin/bash\n# Write a sh function to check whether the two numbers differ at one bit position only or not.\n#\n# $1 is an integer\n# $2 is an integer\ndiffer_At_One_Bit_Pos() {\n", "test": "}\n\ncandidate() {\n    differ_At_One_Bit_Pos \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"13\" \"9\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\") = \"false\" ]]\n    [[ $(candidate \"2\" \"4\") = \"false\" ]]\n    [[ $(candidate \"2\" \"3\") = \"true\" ]]\n    [[ $(candidate \"5\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"5\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_8_square_nums", "prompt": "#!/bin/bash\n# Write a function to find squares of individual elements in a list.\n#\n# $1 is a space-separated list\nsquare_nums() {\n", "test": "}\n\ncandidate() {\n    square_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 4 9 16 25 36 49 64 81 100\" ]]\n    [[ $(candidate \"10 20 30\") = \"100 400 900\" ]]\n    [[ $(candidate \"12 15\") = \"144 225\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_9_find_Rotations", "prompt": "#!/bin/bash\n# Write a sh function to find the minimum number of rotations (greater than 0) required to get the same string.\n#\n# $1 is a string\nfind_Rotations() {\n", "test": "}\n\ncandidate() {\n    find_Rotations \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aaaa\") = \"1\" ]]\n    [[ $(candidate \"ab\") = \"2\" ]]\n    [[ $(candidate \"abc\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_11_remove_Occ", "prompt": "#!/bin/bash\n# Write a sh function to remove first and last occurrence of a given character from the string.\n#\n# $1 is a string\n# $2 is a string\nremove_Occ() {\n", "test": "}\n\ncandidate() {\n    remove_Occ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"l\") = \"heo\" ]]\n    [[ $(candidate \"abcda\" \"a\") = \"bcd\" ]]\n    [[ $(candidate \"PHP\" \"P\") = \"H\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_12_sort_matrix", "prompt": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n", "test": "}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_14_find_Volume", "prompt": "#!/bin/bash\n# Write a sh function to find the volume of a triangular prism.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_Volume() {\n", "test": "}\n\ncandidate() {\n    find_Volume \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"8\" \"6\") = \"240\" ]]\n    [[ $(candidate \"3\" \"2\" \"2\") = \"6\" ]]\n    [[ $(candidate \"1\" \"2\" \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_16_text_lowercase_underscore", "prompt": "#!/bin/bash\n# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n#\n# $1 is a string\ntext_lowercase_underscore() {\n", "test": "}\n\ncandidate() {\n    text_lowercase_underscore \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aab_cbbbc\") = \"true\" ]]\n    [[ $(candidate \"aab_Abbbc\") = \"false\" ]]\n    [[ $(candidate \"Aaab_abbbc\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_17_square_perimeter", "prompt": "#!/bin/bash\n# Write a function that returns the perimeter of a square given its side length as input.\n#\n# $1 is an integer\nsquare_perimeter() {\n", "test": "}\n\ncandidate() {\n    square_perimeter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"40\" ]]\n    [[ $(candidate \"5\") = \"20\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_18_remove_dirty_chars", "prompt": "#!/bin/bash\n# Write a function to remove characters from the first string which are present in the second string.\n#\n# $1 is a string\n# $2 is a string\nremove_dirty_chars() {\n", "test": "}\n\ncandidate() {\n    remove_dirty_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"probasscurve\" \"pros\") = \"bacuve\" ]]\n    [[ $(candidate \"digitalindia\" \"talent\") = \"digiidi\" ]]\n    [[ $(candidate \"exoticmiles\" \"toxic\") = \"emles\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_19_test_duplicate", "prompt": "#!/bin/bash\n# Write a function to find whether a given array of integers contains any duplicate element.\n#\n# $1 is a space-separated list\ntest_duplicate() {\n", "test": "}\n\ncandidate() {\n    test_duplicate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 4\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 2 3 3 4 4 5\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_20_is_woodall", "prompt": "#!/bin/bash\n# Write a function to check if the given number is woodball or not.\n#\n# $1 is an integer\nis_woodall() {\n", "test": "}\n\ncandidate() {\n    is_woodall \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"383\") = \"true\" ]]\n    [[ $(candidate \"254\") = \"false\" ]]\n    [[ $(candidate \"200\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_56_checks", "prompt": "#!/bin/bash\n# Write a sh function to check if a given number is one less than twice its reverse.\n#\n# $1 is an integer\nchecks() {\n", "test": "}\n\ncandidate() {\n    checks \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"70\") = \"false\" ]]\n    [[ $(candidate \"23\") = \"false\" ]]\n    [[ $(candidate \"73\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_57_find_Max_Num", "prompt": "#!/bin/bash\n# Write a sh function to find the largest number that can be formed with the given list of digits.\n#\n# $1 is a space-separated list\nfind_Max_Num() {\n", "test": "}\n\ncandidate() {\n    find_Max_Num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"321\" ]]\n    [[ $(candidate \"4 5 6 1\") = \"6541\" ]]\n    [[ $(candidate \"1 2 3 9\") = \"9321\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_58_opposite_Signs", "prompt": "#!/bin/bash\n# Write a sh function to check whether the given two integers have opposite sign or not.\n#\n# $1 is an integer\n# $2 is an integer\nopposite_Signs() {\n", "test": "}\n\ncandidate() {\n    opposite_Signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"-2\") = \"true\" ]]\n    [[ $(candidate \"3\" \"2\") = \"false\" ]]\n    [[ $(candidate \"-10\" \"-10\") = \"false\" ]]\n    [[ $(candidate \"-2\" \"2\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_59_is_octagonal", "prompt": "#!/bin/bash\n# Write a function to find the nth octagonal number.\n#\n# $1 is an integer\nis_octagonal() {\n", "test": "}\n\ncandidate() {\n    is_octagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"65\" ]]\n    [[ $(candidate \"10\") = \"280\" ]]\n    [[ $(candidate \"15\") = \"645\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_61_count_Substrings", "prompt": "#!/bin/bash\n# Write a sh function to count the number of substrings with the sum of digits equal to their length.\n#\n# $1 is a string\ncount_Substrings() {\n", "test": "}\n\ncandidate() {\n    count_Substrings \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"112112\") = \"6\" ]]\n    [[ $(candidate \"111\") = \"6\" ]]\n    [[ $(candidate \"1101112\") = \"12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_62_smallest_num", "prompt": "#!/bin/bash\n# Write a sh function to find smallest number in a list.\n#\n# $1 is a space-separated list\nsmallest_num() {\n", "test": "}\n\ncandidate() {\n    smallest_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 1 45 99\") = \"1\" ]]\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n    [[ $(candidate \"45 46 50 60\") = \"45\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_63_max_difference", "prompt": "#!/bin/bash\n# Write a function to find the maximum difference between available pairs in the given list list.\n#\n# $1 is a newline-separated, space-separated list\nmax_difference() {\n", "test": "}\n\ncandidate() {\n    max_difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 5\\n1 7\\n10 3\\n1 2\") = \"7\" ]]\n    [[ $(candidate \"4 6\\n2 17\\n9 13\\n11 12\") = \"15\" ]]\n    [[ $(candidate \"12 35\\n21 27\\n13 23\\n41 22\") = \"23\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_65_recursive_list_sum", "prompt": "#!/bin/bash\n# Write a function to flatten a list and sum all of its elements.\n#\n# $1 is a newline-separated, space-separated list\nrecursive_list_sum() {\n", "test": "}\n\ncandidate() {\n    recursive_list_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"21\" ]]\n    [[ $(candidate \"7 10 15 14 19 41\") = \"106\" ]]\n    [[ $(candidate \"10 20 30 40 50 60\") = \"210\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_66_pos_count", "prompt": "#!/bin/bash\n# Write a sh function to count the number of positive numbers in a list.\n#\n# $1 is a space-separated list\npos_count() {\n", "test": "}\n\ncandidate() {\n    pos_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 3 -4\") = \"2\" ]]\n    [[ $(candidate \"3 4 5 -1\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_67_bell_number", "prompt": "#!/bin/bash\n# Write a function to find the number of ways to partition a set of Bell numbers.\n#\n# $1 is an integer\nbell_number() {\n", "test": "}\n\ncandidate() {\n    bell_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"10\") = \"115975\" ]]\n    [[ $(candidate \"56\") = \"6775685320645824322581483068371419745979053216268760300\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_68_is_Monotonic", "prompt": "#!/bin/bash\n# Write a sh function to check whether the given array is monotonic or not.\n#\n# $1 is a space-separated list\nis_Monotonic() {\n", "test": "}\n\ncandidate() {\n    is_Monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6 5 4 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 2 3\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_69_is_sublist", "prompt": "#!/bin/bash\n# Write a function to check whether a list contains the given sublist or not.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_sublist() {\n", "test": "}\n\ncandidate() {\n    is_sublist \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 3 5 7\" \"3 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 3 5 7\" \"4 3\") = \"true\" ]]\n    [[ $(candidate \"2 4 3 5 7\" \"1 6\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_70_get_equal", "prompt": "#!/bin/bash\n# Write a function to find whether all the given lists have equal length or not.\n#\n# $1 is a newline-separated, space-separated list\nget_equal() {\n", "test": "}\n\ncandidate() {\n    get_equal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11 22 33\\n44 55 66\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"1 2\\n3 4\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_71_comb_sort", "prompt": "#!/bin/bash\n# Write a function to sort a list of elements.\n#\n# $1 is a space-separated list\ncomb_sort() {\n", "test": "}\n\ncandidate() {\n    comb_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 15 37 25 79\") = \"5 15 25 37 79\" ]]\n    [[ $(candidate \"41 32 15 19 22\") = \"15 19 22 32 41\" ]]\n    [[ $(candidate \"99 15 13 47\") = \"13 15 47 99\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_72_dif_Square", "prompt": "#!/bin/bash\n# Write a sh function to check whether the given number can be represented as the difference of two squares or not.\n#\n# $1 is an integer\ndif_Square() {\n", "test": "}\n\ncandidate() {\n    dif_Square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"15\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_74_is_samepatterns", "prompt": "#!/bin/bash\n# Write a function to check whether it follows the sequence given in the patterns array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_samepatterns() {\n", "test": "}\n\ncandidate() {\n    is_samepatterns \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"red green green\" \"a b b\") = \"true\" ]]\n    [[ $(candidate \"red green greenn\" \"a b b\") = \"false\" ]]\n    [[ $(candidate \"red green greenn\" \"a b\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_75_find_tuples", "prompt": "#!/bin/bash\n# Write a function to find lists which have all elements divisible by k from the given list of lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nfind_tuples() {\n", "test": "}\n\ncandidate() {\n    find_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6 24 12\\n7 9 6\\n12 18 21\" \"6\") = \"6 24 12\" ]]\n    [[ $(candidate \"5 25 30\\n4 2 3\\n7 8 9\" \"5\") = \"5 25 30\" ]]\n    [[ $(candidate \"7 9 16\\n8 16 4\\n19 17 18\" \"4\") = \"8 16 4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_77_is_Diff", "prompt": "#!/bin/bash\n# Write a sh function to find whether a number is divisible by 11.\n#\n# $1 is an integer\nis_Diff() {\n", "test": "}\n\ncandidate() {\n    is_Diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345\") = \"false\" ]]\n    [[ $(candidate \"1212112\") = \"true\" ]]\n    [[ $(candidate \"1212\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_79_word_len", "prompt": "#!/bin/bash\n# Write a sh function to check whether the length of the word is odd or not.\n#\n# $1 is a string\nword_len() {\n", "test": "}\n\ncandidate() {\n    word_len \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hadoop\") = \"false\" ]]\n    [[ $(candidate \"great\") = \"true\" ]]\n    [[ $(candidate \"structure\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_80_tetrahedral_number", "prompt": "#!/bin/bash\n# Write a function to find the nth tetrahedral number.\n#\n# $1 is an integer\ntetrahedral_number() {\n", "test": "}\n\ncandidate() {\n    tetrahedral_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"35\" ]]\n    [[ $(candidate \"6\") = \"56\" ]]\n    [[ $(candidate \"7\") = \"84\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_83_get_Char", "prompt": "#!/bin/bash\n# Write a sh function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n#\n# $1 is a string\nget_Char() {\n", "test": "}\n\ncandidate() {\n    get_Char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"f\" ]]\n    [[ $(candidate \"gfg\") = \"t\" ]]\n    [[ $(candidate \"ab\") = \"c\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_84_sequence", "prompt": "#!/bin/bash\n# Write a function to find the nth number in the newman conway sequence.\n#\n# $1 is an integer\nsequence() {\n", "test": "}\n\ncandidate() {\n    sequence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"6\" ]]\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_86_centered_hexagonal_number", "prompt": "#!/bin/bash\n# Write a function to find nth centered hexagonal number.\n#\n# $1 is an integer\ncentered_hexagonal_number() {\n", "test": "}\n\ncandidate() {\n    centered_hexagonal_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"271\" ]]\n    [[ $(candidate \"2\") = \"7\" ]]\n    [[ $(candidate \"9\") = \"217\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_87_merge_dictionaries_three", "prompt": "#!/bin/bash\n# Write a function to merge three dictionaries into a single CSV.\n#\n# $1 is a two column CSV in key,value order\n# $2 is a two column CSV in key,value order\n# $3 is a two column CSV in key,value order\nmerge_dictionaries_three() {\n", "test": "}\n\ncandidate() {\n    merge_dictionaries_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"G,Green\\nW,White\" \"O,Orange\\nW,White\\nB,Black\") = \"B,Black\\nR,Red\\nP,Pink\\nG,Green\\nW,White\\nO,Orange\" ]]\n    [[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"G,Green\\nW,White\" \"L,lavender\\nB,Blue\") = \"W,White\\nP,Pink\\nB,Black\\nR,Red\\nG,Green\\nL,lavender\" ]]\n    [[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"L,lavender\\nB,Blue\" \"G,Green\\nW,White\") = \"B,Black\\nP,Pink\\nR,Red\\nG,Green\\nL,lavender\\nW,White\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_88_freq_count", "prompt": "#!/bin/bash\n# Write a function to get the frequency of all the elements in a list, returned as a CSV.\n#\n# $1 is a space-separated list\nfreq_count() {\n", "test": "}\n\ncandidate() {\n    freq_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 10 10 10 20 20 20 20 40 40 50 50 30\") = \"10,4\\n20,4\\n40,2\\n50,2\\n30,1\" ]]\n    [[ $(candidate \"1 2 3 4 3 2 4 1 3 1 4\") = \"1,3\\n2,2\\n3,3\\n4,3\" ]]\n    [[ $(candidate \"5 6 7 4 9 10 4 5 6 7 9 5\") = \"10,1\\n5,3\\n6,2\\n7,2\\n4,2\\n9,2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_89_closest_num", "prompt": "#!/bin/bash\n# Write a function to find the closest smaller number than n.\n#\n# $1 is an integer\nclosest_num() {\n", "test": "}\n\ncandidate() {\n    closest_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11\") = \"10\" ]]\n    [[ $(candidate \"7\") = \"6\" ]]\n    [[ $(candidate \"12\") = \"11\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_90_len_log", "prompt": "#!/bin/bash\n# Write a sh function to find the length of the longest word.\n#\n# $1 is a space-separated list\nlen_log() {\n", "test": "}\n\ncandidate() {\n    len_log \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python PHP bigdata\") = \"7\" ]]\n    [[ $(candidate \"a ab abc\") = \"3\" ]]\n    [[ $(candidate \"small big tall\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_91_find_substring", "prompt": "#!/bin/bash\n# Write a function to check if a string is present as a substring in a given list of string values.\n#\n# $1 is a space-separated list\n# $2 is a string\nfind_substring() {\n", "test": "}\n\ncandidate() {\n    find_substring \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"red black white green orange\" \"ack\") = \"true\" ]]\n    [[ $(candidate \"red black white green orange\" \"abc\") = \"false\" ]]\n    [[ $(candidate \"red black white green orange\" \"ange\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_92_is_undulating", "prompt": "#!/bin/bash\n# Write a function to check whether the given number is undulating or not.\n#\n# $1 is an integer\nis_undulating() {\n", "test": "}\n\ncandidate() {\n    is_undulating \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1212121\") = \"true\" ]]\n    [[ $(candidate \"1991\") = \"false\" ]]\n    [[ $(candidate \"121\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_93_power", "prompt": "#!/bin/bash\n# Write a function to calculate the value of 'a' to the power 'b'.\n#\n# $1 is an integer\n# $2 is an integer\npower() {\n", "test": "}\n\ncandidate() {\n    power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\") = \"81\" ]]\n    [[ $(candidate \"2\" \"3\") = \"8\" ]]\n    [[ $(candidate \"5\" \"5\") = \"3125\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_94_index_minimum", "prompt": "#!/bin/bash\n# Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n#\n# $1 is a newline-separated, space-separated list\nindex_minimum() {\n", "test": "}\n\ncandidate() {\n    index_minimum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Rash 143\\nManjeet 200\\nVarsha 100\") = \"Varsha\" ]]\n    [[ $(candidate \"Yash 185\\nDawood 125\\nSanya 175\") = \"Dawood\" ]]\n    [[ $(candidate \"Sai 345\\nSalman 145\\nAyesha 96\") = \"Ayesha\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_95_Find_Min_Length", "prompt": "#!/bin/bash\n# Write a sh function to find the length of the smallest list in a list of lists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Min_Length() {\n", "test": "}\n\ncandidate() {\n    Find_Min_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 2\") = \"1\" ]]\n    [[ $(candidate \"1 2\\n1 2 3\\n1 2 3 4\") = \"2\" ]]\n    [[ $(candidate \"3 3 3\\n4 4 4 4\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_96_divisor", "prompt": "#!/bin/bash\n# Write a sh function to find the number of divisors of a given integer.\n#\n# $1 is an integer\ndivisor() {\n", "test": "}\n\ncandidate() {\n    divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"4\" ]]\n    [[ $(candidate \"12\") = \"6\" ]]\n    [[ $(candidate \"9\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_97_frequency_lists", "prompt": "#!/bin/bash\n# Write a function to find frequency of each element in a flattened list of lists, returned in a CSV.\n#\n# $1 is a newline-separated, space-separated list\nfrequency_lists() {\n", "test": "}\n\ncandidate() {\n    frequency_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 2\\n4 5 6 2\\n7 8 9 5\") = \"1,1\\n2,3\\n3,1\\n4,1\\n5,2\\n6,1\\n7,1\\n8,1\\n9,1\" ]]\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\") = \"1,1\\n2,1\\n3,1\\n4,1\\n5,1\\n6,1\\n7,1\\n8,1\\n9,1\\n10,1\\n11,1\\n12,1\" ]]\n    [[ $(candidate \"20 30 40 17\\n18 16 14 13\\n10 20 30 40\") = \"20,2\\n30,2\\n40,2\\n17,1\\n18,1\\n16,1\\n14,1\\n13,1\\n10,1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_99_decimal_to_binary", "prompt": "#!/bin/bash\n# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n#\n# $1 is an integer\ndecimal_to_binary() {\n", "test": "}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\") = \"1000\" ]]\n    [[ $(candidate \"18\") = \"10010\" ]]\n    [[ $(candidate \"7\") = \"111\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_100_next_smallest_palindrome", "prompt": "#!/bin/bash\n# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n#\n# $1 is an integer\nnext_smallest_palindrome() {\n", "test": "}\n\ncandidate() {\n    next_smallest_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"99\") = \"101\" ]]\n    [[ $(candidate \"1221\") = \"1331\" ]]\n    [[ $(candidate \"120\") = \"121\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_101_kth_element", "prompt": "#!/bin/bash\n# Write a function to find the kth element in the given array using 1-based indexing.\n#\n# $1 is a space-separated list\n# $2 is an integer\nkth_element() {\n", "test": "}\n\ncandidate() {\n    kth_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 3 5 7 19\" \"2\") = \"3\" ]]\n    [[ $(candidate \"17 24 8 23\" \"3\") = \"8\" ]]\n    [[ $(candidate \"16 21 25 36 4\" \"4\") = \"36\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_102_snake_to_camel", "prompt": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n", "test": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_103_eulerian_num", "prompt": "#!/bin/bash\n# Write a function to find the Eulerian number a(n, m).\n#\n# $1 is an integer\n# $2 is an integer\neulerian_num() {\n", "test": "}\n\ncandidate() {\n    eulerian_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"1\") = \"4\" ]]\n    [[ $(candidate \"4\" \"1\") = \"11\" ]]\n    [[ $(candidate \"5\" \"3\") = \"26\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_105_count", "prompt": "#!/bin/bash\n# Write a sh function to count true booleans in the given list.\n#\n# $1 is a space-separated list\ncount() {\n", "test": "}\n\ncandidate() {\n    count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"true false true\") = \"2\" ]]\n    [[ $(candidate \"false false\") = \"0\" ]]\n    [[ $(candidate \"true true true\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_106_add_lists", "prompt": "#!/bin/bash\n# Write a function to append the given list to the given lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_lists() {\n", "test": "}\n\ncandidate() {\n    add_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\" \"9 10\") = \"9 10 5 6 7\" ]]\n    [[ $(candidate \"6 7 8\" \"10 11\") = \"10 11 6 7 8\" ]]\n    [[ $(candidate \"7 8 9\" \"11 12\") = \"11 12 7 8 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_108_merge_sorted_list", "prompt": "#!/bin/bash\n# Write a function to merge three lists into a single sorted list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\nmerge_sorted_list() {\n", "test": "}\n\ncandidate() {\n    merge_sorted_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 24 15 4 5 29 110\" \"19 20 11 56 25 233 154\" \"24 26 54 48\") = \"4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233\" ]]\n    [[ $(candidate \"1 3 5 6 8 9\" \"2 5 7 11\" \"1 4 7 8 12\") = \"1 1 2 3 4 5 5 6 7 7 8 8 9 11 12\" ]]\n    [[ $(candidate \"18 14 10 9 8 7 9 3 2 4 1\" \"25 35 22 85 14 65 75 25 58\" \"12 74 9 50 61 41\") = \"1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_109_odd_Equivalent", "prompt": "#!/bin/bash\n# Write a sh function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n#\n# $1 is a string\n# $2 is an integer\nodd_Equivalent() {\n", "test": "}\n\ncandidate() {\n    odd_Equivalent \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"011001\" \"6\") = \"3\" ]]\n    [[ $(candidate \"11011\" \"5\") = \"4\" ]]\n    [[ $(candidate \"1010\" \"4\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_113_check_integer", "prompt": "#!/bin/bash\n# Write a function to check if a string represents an integer or not.\n#\n# $1 is a string\ncheck_integer() {\n", "test": "}\n\ncandidate() {\n    check_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"12345\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_116_tuple_to_int", "prompt": "#!/bin/bash\n# Write a function to convert a given list of positive integers into a single integer.\n#\n# $1 is a space-separated list\ntuple_to_int() {\n", "test": "}\n\ncandidate() {\n    tuple_to_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"123\" ]]\n    [[ $(candidate \"4 5 6\") = \"456\" ]]\n    [[ $(candidate \"5 6 7\") = \"567\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_117_list_to_float", "prompt": "#!/bin/bash\n# Write a function to convert all possible convertible elements in a list of lists to floats.\n#\n# $1 is a newline-separated, space-separated list\nlist_to_float() {\n", "test": "}\n\ncandidate() {\n    list_to_float \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\\n1 26.45\\n7.32 8\\n4 8\") = \"3.0 4.0\\n1.0 26.45\\n7.32 8.0\\n4.0 8.0\" ]]\n    [[ $(candidate \"4 4\\n2 27\\n4.12 9\\n7 11\") = \"4.0 4.0\\n2.0 27.0\\n4.12 9.0\\n7.0 11.0\" ]]\n    [[ $(candidate \"6 78\\n5 26.45\\n1.33 4\\n82 13\") = \"6.0 78.0\\n5.0 26.45\\n1.33 4.0\\n82.0 13.0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_118_string_to_list", "prompt": "#!/bin/bash\n# Write a function to convert a string to a list of strings split on the space character.\n#\n# $1 is a string\nstring_to_list() {\n", "test": "}\n\ncandidate() {\n    string_to_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python programming\") = \"python programming\" ]]\n    [[ $(candidate \"lists tuples strings\") = \"lists tuples strings\" ]]\n    [[ $(candidate \"write a program\") = \"write a program\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_119_search", "prompt": "#!/bin/bash\n# Write a sh function to find the element that appears only once in a sorted array.\n#\n# $1 is a space-separated list\nsearch() {\n", "test": "}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 1 3 3 4 4 5 5 7 7 8\") = \"8\" ]]\n    [[ $(candidate \"1 2 2 3 3 4 4\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_120_max_product_tuple", "prompt": "#!/bin/bash\n# Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n#\n# $1 is a newline-separated, space-separated list\nmax_product_tuple() {\n", "test": "}\n\ncandidate() {\n    max_product_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 7\\n2 6\\n1 8\\n4 9\") = \"36\" ]]\n    [[ $(candidate \"10 20\\n15 2\\n5 10\") = \"200\" ]]\n    [[ $(candidate \"11 44\\n10 15\\n20 5\\n12 9\") = \"484\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_123_amicable_numbers_sum", "prompt": "#!/bin/bash\n# Write a function to sum all amicable numbers from 1 to a specified number.\n#\n# $1 is an integer\namicable_numbers_sum() {\n", "test": "}\n\ncandidate() {\n    amicable_numbers_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"999\") = \"504\" ]]\n    [[ $(candidate \"9999\") = \"31626\" ]]\n    [[ $(candidate \"99\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_125_find_length", "prompt": "#!/bin/bash\n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n#\n# $1 is a string\nfind_length() {\n", "test": "}\n\ncandidate() {\n    find_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11000010001\") = \"6\" ]]\n    [[ $(candidate \"10111\") = \"1\" ]]\n    [[ $(candidate \"11011101100101\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_126_sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of common divisors of two given numbers.\n#\n# $1 is an integer\n# $2 is an integer\nsum() {\n", "test": "}\n\ncandidate() {\n    sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"15\") = \"6\" ]]\n    [[ $(candidate \"100\" \"150\") = \"93\" ]]\n    [[ $(candidate \"4\" \"6\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_127_multiply_int", "prompt": "#!/bin/bash\n# Write a function to multiply two integers.\n#\n# $1 is an integer\n# $2 is an integer\nmultiply_int() {\n", "test": "}\n\ncandidate() {\n    multiply_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\") = \"200\" ]]\n    [[ $(candidate \"5\" \"10\") = \"50\" ]]\n    [[ $(candidate \"4\" \"8\") = \"32\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_128_long_words", "prompt": "#!/bin/bash\n# Write a function to find words that are longer than n characters from a given list of words.\n#\n# $1 is an integer\n# $2 is a string\nlong_words() {\n", "test": "}\n\ncandidate() {\n    long_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"python is a programming language\") = \"python programming language\" ]]\n    [[ $(candidate \"2\" \"writing a program\") = \"writing program\" ]]\n    [[ $(candidate \"5\" \"sorting list\") = \"sorting\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_129_magic_square_test", "prompt": "#!/bin/bash\n# Write a function to calculate whether the matrix is a magic square.\n#\n# $1 is a newline-separated, space-separated list\nmagic_square_test() {\n", "test": "}\n\ncandidate() {\n    magic_square_test \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7 12 1 14\\n2 13 8 11\\n16 3 10 5\\n9 6 15 4\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 8\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 7\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_130_max_occurrences", "prompt": "#!/bin/bash\n# Write a function to find the item with maximum frequency in a given list.\n#\n# $1 is a space-separated list\nmax_occurrences() {\n", "test": "}\n\ncandidate() {\n    max_occurrences \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2\") = \"2\" ]]\n    [[ $(candidate \"2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18\") = \"8\" ]]\n    [[ $(candidate \"10 20 20 30 40 90 80 50 30 20 50 10\") = \"20\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_131_reverse_vowels", "prompt": "#!/bin/bash\n# Write a sh function to reverse only the vowels of a given string (where y is not a vowel).\n#\n# $1 is a string\nreverse_vowels() {\n", "test": "}\n\ncandidate() {\n    reverse_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"Python\" ]]\n    [[ $(candidate \"USA\") = \"ASU\" ]]\n    [[ $(candidate \"ab\") = \"ab\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_132_tup_string", "prompt": "#!/bin/bash\n# Write a function to convert a list to a string.\n#\n# $1 is a space-separated list\ntup_string() {\n", "test": "}\n\ncandidate() {\n    tup_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"e x e r c i s e s\") = \"exercises\" ]]\n    [[ $(candidate \"p y t h o n\") = \"python\" ]]\n    [[ $(candidate \"p r o g r a m\") = \"program\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_133_sum_negativenum", "prompt": "#!/bin/bash\n# Write a function to calculate the sum of the negative numbers of a given list of numbers.\n#\n# $1 is a space-separated list\nsum_negativenum() {\n", "test": "}\n\ncandidate() {\n    sum_negativenum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\") = \"-32\" ]]\n    [[ $(candidate \"10 15 -14 13 -18 12 -20\") = \"-52\" ]]\n    [[ $(candidate \"19 -65 57 39 152 -639 121 44 90 -190\") = \"-894\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_135_hexagonal_num", "prompt": "#!/bin/bash\n# Write a function to find the nth hexagonal number.\n#\n# $1 is an integer\nhexagonal_num() {\n", "test": "}\n\ncandidate() {\n    hexagonal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"190\" ]]\n    [[ $(candidate \"5\") = \"45\" ]]\n    [[ $(candidate \"7\") = \"91\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two", "prompt": "#!/bin/bash\n# Write a sh function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n#\n# $1 is an integer\nis_Sum_Of_Powers_Of_Two() {\n", "test": "}\n\ncandidate() {\n    is_Sum_Of_Powers_Of_Two \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"7\") = \"false\" ]]\n    [[ $(candidate \"14\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_141_pancake_sort", "prompt": "#!/bin/bash\n# Write a function to sort a list of elements.\n#\n# $1 is a space-separated list\npancake_sort() {\n", "test": "}\n\ncandidate() {\n    pancake_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 79 25 38 69\") = \"15 25 38 69 79\" ]]\n    [[ $(candidate \"98 12 54 36 85\") = \"12 36 54 85 98\" ]]\n    [[ $(candidate \"41 42 32 12 23\") = \"12 23 32 41 42\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_142_count_samepair", "prompt": "#!/bin/bash\n# Write a function to count number items that are identical in the same position of three given lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\ncount_samepair() {\n", "test": "}\n\ncandidate() {\n    count_samepair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 9\" \"2 1 3 1 2 6 7 9\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 8\" \"2 1 3 1 2 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 2 6 7 8\" \"2 2 3 1 2 6 7 8\" \"2 1 3 1 2 6 7 8\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_143_find_lists", "prompt": "#!/bin/bash\n# Write a function to find number of lists present in the given list.\n#\n# $1 is a space-separated list\nfind_lists() {\n", "test": "}\n\ncandidate() {\n    find_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\") = \"2\" ]]\n    [[ $(candidate \"1 2\\n3 4\\n5 6\") = \"3\" ]]\n    [[ $(candidate \"9 8 7 6 5 4 3 2 1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_145_max_Abs_Diff", "prompt": "#!/bin/bash\n# Write a sh function to find the maximum difference between any two elements in a given array.\n#\n# $1 is a space-separated list\nmax_Abs_Diff() {\n", "test": "}\n\ncandidate() {\n    max_Abs_Diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 5 3\") = \"4\" ]]\n    [[ $(candidate \"9 3 2 5 1\") = \"8\" ]]\n    [[ $(candidate \"3 2 1\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_160_find_solution", "prompt": "#!/bin/bash\n# Write a function that returns integers x and y that satisfy ax + by = n as a list, or return None if no solution exists.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_solution() {\n", "test": "}\n\ncandidate() {\n    find_solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"7\") = \"2 1\" ]]\n    [[ $(candidate \"4\" \"2\" \"7\") = \"None\" ]]\n    [[ $(candidate \"1\" \"13\" \"17\") = \"4 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_161_remove_elements", "prompt": "#!/bin/bash\n# Write a function to remove all elements from a given list present in another list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nremove_elements() {\n", "test": "}\n\ncandidate() {\n    remove_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2 4 6 8\") = \"1 3 5 7 9 10\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"1 3 5 7\") = \"2 4 6 8 9 10\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5 7\") = \"1 2 3 4 6 8 9 10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_162_sum_series", "prompt": "#!/bin/bash\n# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n#\n# $1 is an integer\nsum_series() {\n", "test": "}\n\ncandidate() {\n    sum_series \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"12\" ]]\n    [[ $(candidate \"10\") = \"30\" ]]\n    [[ $(candidate \"9\") = \"25\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_164_are_equivalent", "prompt": "#!/bin/bash\n# Write a function to determine if the sum of the divisors of two integers are the same.\n#\n# $1 is an integer\n# $2 is an integer\nare_equivalent() {\n", "test": "}\n\ncandidate() {\n    are_equivalent \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"36\" \"57\") = \"false\" ]]\n    [[ $(candidate \"2\" \"4\") = \"false\" ]]\n    [[ $(candidate \"23\" \"47\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_165_count_char_position", "prompt": "#!/bin/bash\n# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n#\n# $1 is a string\ncount_char_position() {\n", "test": "}\n\ncandidate() {\n    count_char_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xbcefg\") = \"2\" ]]\n    [[ $(candidate \"ABcED\") = \"3\" ]]\n    [[ $(candidate \"AbgdeF\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_166_find_even_pair", "prompt": "#!/bin/bash\n# Write a function that counts the number of pairs of integers in a list that xor to an even number.\n#\n# $1 is a space-separated list\nfind_even_pair() {\n", "test": "}\n\ncandidate() {\n    find_even_pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 7 2 1\") = \"4\" ]]\n    [[ $(candidate \"7 2 8 1 0 5 11\") = \"9\" ]]\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_167_next_power_of_2", "prompt": "#!/bin/bash\n# Write a sh function to find the smallest power of 2 greater than or equal to n.\n#\n# $1 is an integer\nnext_power_of_2() {\n", "test": "}\n\ncandidate() {\n    next_power_of_2 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"5\") = \"8\" ]]\n    [[ $(candidate \"17\") = \"32\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_168_frequency", "prompt": "#!/bin/bash\n# Write a function to count the number of occurrences of a number in a given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfrequency() {\n", "test": "}\n\ncandidate() {\n    frequency \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4\") = \"0\" ]]\n    [[ $(candidate \"1 2 2 3 3 3 4\" \"3\") = \"3\" ]]\n    [[ $(candidate \"0 1 2 3 1 2\" \"1\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_170_sum_range_list", "prompt": "#!/bin/bash\n# Write a function to find the sum of numbers in a list within a range specified by two indices.\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nsum_range_list() {\n", "test": "}\n\ncandidate() {\n    sum_range_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"8\" \"10\") = \"29\" ]]\n    [[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"5\" \"7\") = \"16\" ]]\n    [[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"7\" \"10\") = \"38\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_171_perimeter_pentagon", "prompt": "#!/bin/bash\n# Write a function to find the perimeter of a regular pentagon from the length of its sides.\n#\n# $1 is an integer\nperimeter_pentagon() {\n", "test": "}\n\ncandidate() {\n    perimeter_pentagon \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"25\" ]]\n    [[ $(candidate \"10\") = \"50\" ]]\n    [[ $(candidate \"15\") = \"75\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_172_count_occurance", "prompt": "#!/bin/bash\n# Write a function to count the number of occurence of the string 'std' in a given string.\n#\n# $1 is a string\ncount_occurance() {\n", "test": "}\n\ncandidate() {\n    count_occurance \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"letstdlenstdporstd\") = \"3\" ]]\n    [[ $(candidate \"truststdsolensporsd\") = \"1\" ]]\n    [[ $(candidate \"makestdsostdworthit\") = \"2\" ]]\n    [[ $(candidate \"stds\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_222_check_type", "prompt": "#!/bin/bash\n# Write a function to check if all the elements in list have same data type or not.\n#\n# $1 is a $Any\ncheck_type() {\n", "test": "}\n\ncandidate() {\n    check_type \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7 3 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 4\") = \"false\" ]]\n    [[ $(candidate \"3 2 1 4 5\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_223_is_majority", "prompt": "#!/bin/bash\n# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nis_majority() {\n", "test": "}\n\ncandidate() {\n    is_majority \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 3 3 3 10\" \"7\" \"3\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 4 4 4 6 6\" \"8\" \"4\") = \"false\" ]]\n    [[ $(candidate \"1 1 1 2 2\" \"5\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 2\" \"5\" \"1\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_224_count_Set_Bits", "prompt": "#!/bin/bash\n# Write a sh function to count the number of set bits (binary digits with value 1) in a given number.\n#\n# $1 is an integer\ncount_Set_Bits() {\n", "test": "}\n\ncandidate() {\n    count_Set_Bits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"4\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_226_odd_values_string", "prompt": "#!/bin/bash\n# Write a sh function to remove the characters which have odd index values of a given string.\n#\n# $1 is a string\nodd_values_string() {\n", "test": "}\n\ncandidate() {\n    odd_values_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdef\") = \"ace\" ]]\n    [[ $(candidate \"python\") = \"pto\" ]]\n    [[ $(candidate \"data\") = \"dt\" ]]\n    [[ $(candidate \"lambs\") = \"lms\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_227_min_of_three", "prompt": "#!/bin/bash\n# Write a function to find minimum of three numbers.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmin_of_three() {\n", "test": "}\n\ncandidate() {\n    min_of_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\" \"0\") = \"0\" ]]\n    [[ $(candidate \"19\" \"15\" \"18\") = \"15\" ]]\n    [[ $(candidate \"-10\" \"-20\" \"-30\") = \"-30\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range", "prompt": "#!/bin/bash\n# Write a sh function to check whether all the bits are unset in the given range or not.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nall_Bits_Set_In_The_Given_Range() {\n", "test": "}\n\ncandidate() {\n    all_Bits_Set_In_The_Given_Range \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\" \"1\" \"2\") = \"true\" ]]\n    [[ $(candidate \"17\" \"2\" \"4\") = \"true\" ]]\n    [[ $(candidate \"39\" \"4\" \"6\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_229_re_arrange_array", "prompt": "#!/bin/bash\n# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n#\n# $1 is a space-separated list\n# $2 is an integer\nre_arrange_array() {\n", "test": "}\n\ncandidate() {\n    re_arrange_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 2 -3 4 5 6 -7 8 9\" \"9\") = \"-1 -3 -7 4 5 6 2 8 9\" ]]\n    [[ $(candidate \"12 -14 -26 13 15\" \"5\") = \"-14 -26 12 13 15\" ]]\n    [[ $(candidate \"10 24 36 -42 -39 -78 85\" \"7\") = \"-42 -39 -78 10 24 36 85\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_230_replace_blank", "prompt": "#!/bin/bash\n# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n#\n# $1 is a string\n# $2 is a string\nreplace_blank() {\n", "test": "}\n\ncandidate() {\n    replace_blank \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello people\" \"@\") = \"hello@people\" ]]\n    [[ $(candidate \"python program language\" \"\\$\") = \"python\\$program\\$language\" ]]\n    [[ $(candidate \"blank space\" \"-\") = \"blank-space\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_234_volume_cube", "prompt": "#!/bin/bash\n# Write a function to find the volume of a cube given its side length.\n#\n# $1 is an integer\nvolume_cube() {\n", "test": "}\n\ncandidate() {\n    volume_cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"27\" ]]\n    [[ $(candidate \"2\") = \"8\" ]]\n    [[ $(candidate \"5\") = \"125\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_238_number_of_substrings", "prompt": "#!/bin/bash\n# Write a sh function to count the number of non-empty substrings of a given string.\n#\n# $1 is a string\nnumber_of_substrings() {\n", "test": "}\n\ncandidate() {\n    number_of_substrings \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"6\" ]]\n    [[ $(candidate \"abcd\") = \"10\" ]]\n    [[ $(candidate \"abcde\") = \"15\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_239_get_total_number_of_sequences", "prompt": "#!/bin/bash\n# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n#\n# $1 is an integer\n# $2 is an integer\nget_total_number_of_sequences() {\n", "test": "}\n\ncandidate() {\n    get_total_number_of_sequences \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"4\") = \"4\" ]]\n    [[ $(candidate \"5\" \"2\") = \"6\" ]]\n    [[ $(candidate \"16\" \"3\") = \"84\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_240_replace_list", "prompt": "#!/bin/bash\n# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nreplace_list() {\n", "test": "}\n\ncandidate() {\n    replace_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 10\" \"2 4 6 8\") = \"1 3 5 7 9 2 4 6 8\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"5 6 7 8\") = \"1 2 3 4 5 6 7 8\" ]]\n    [[ $(candidate \"red blue green\" \"yellow\") = \"red blue yellow\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_242_count_charac", "prompt": "#!/bin/bash\n# Write a function to count the total number of characters in a string.\n#\n# $1 is a string\ncount_charac() {\n", "test": "}\n\ncandidate() {\n    count_charac \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python programming\") = \"18\" ]]\n    [[ $(candidate \"language\") = \"8\" ]]\n    [[ $(candidate \"words\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_244_next_Perfect_Square", "prompt": "#!/bin/bash\n# Write a sh function to find the next perfect square greater than a given number.\n#\n# $1 is an integer\nnext_Perfect_Square() {\n", "test": "}\n\ncandidate() {\n    next_Perfect_Square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"35\") = \"36\" ]]\n    [[ $(candidate \"6\") = \"9\" ]]\n    [[ $(candidate \"9\") = \"16\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_245_max_sum", "prompt": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n", "test": "}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_247_lps", "prompt": "#!/bin/bash\n# Write a function to find the length of the longest palindromic subsequence in the given string.\n#\n# $1 is a string\nlps() {\n", "test": "}\n\ncandidate() {\n    lps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TENS FOR TENS\") = \"5\" ]]\n    [[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]\n    [[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_249_intersection_array", "prompt": "#!/bin/bash\n# Write a function to find the intersection of two arrays.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection_array() {\n", "test": "}\n\ncandidate() {\n    intersection_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 7 8 9 10\" \"1 2 4 8 9\") = \"1 2 8 9\" ]]\n    [[ $(candidate \"1 2 3 5 7 8 9 10\" \"3 5 7 9\") = \"3 5 7 9\" ]]\n    [[ $(candidate \"1 2 3 5 7 8 9 10\" \"10 20 30 40\") = \"10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_250_count_X", "prompt": "#!/bin/bash\n# Write a sh function that takes in a list and an element and counts the occcurences of the element in the list.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncount_X() {\n", "test": "}\n\ncandidate() {\n    count_X \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"4\") = \"0\" ]]\n    [[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"10\") = \"3\" ]]\n    [[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"8\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_251_insert_element", "prompt": "#!/bin/bash\n# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n#\n# $1 is a space-separated list\n# $2 is a string\ninsert_element() {\n", "test": "}\n\ncandidate() {\n    insert_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Red Green Black\" \"c\") = \"c Red c Green c Black\" ]]\n    [[ $(candidate \"python java\" \"program\") = \"program python program java\" ]]\n    [[ $(candidate \"happy sad\" \"laugh\") = \"laugh happy laugh sad\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_252_convert", "prompt": "#!/bin/bash\n# Write a sh function to convert complex numbers to polar coordinates.\n#\n# $1 is an integer\nconvert() {\n", "test": "}\n\ncandidate() {\n    convert \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1.0 0.0\" ]]\n    [[ $(candidate \"4\") = \"4.0 0.0\" ]]\n    [[ $(candidate \"5\") = \"5.0 0.0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_253_count_integer", "prompt": "#!/bin/bash\n# Write a sh function that returns the number of integer elements in a given list.\n#\n# $1 is a newline-separated, space-separated list\ncount_integer() {\n", "test": "}\n\ncandidate() {\n    count_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 abc 1.2\") = \"2\" ]]\n    [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 1.2 4 5.1\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_255_combinations_colors", "prompt": "#!/bin/bash\n# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncombinations_colors() {\n", "test": "}\n\ncandidate() {\n    combinations_colors \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Red Green Blue\" \"1\") = \"Red\\nGreen\\nBlue\" ]]\n    [[ $(candidate \"Red Green Blue\" \"2\") = \"Red Red\\nRed Green\\nRed Blue\\nGreen Green\\nGreen Blue\\nBlue Blue\" ]]\n    [[ $(candidate \"Red Green Blue\" \"3\") = \"Red Red Red\\nRed Red Green\\nRed Red Blue\\nRed Green Green\\nRed Green Blue\\nRed Blue Blue\\nGreen Green Green\\nGreen Green Blue\\nGreen Blue Blue\\nBlue Blue Blue\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_256_count_Primes_nums", "prompt": "#!/bin/bash\n# Write a sh function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n#\n# $1 is an integer\ncount_Primes_nums() {\n", "test": "}\n\ncandidate() {\n    count_Primes_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"2\" ]]\n    [[ $(candidate \"10\") = \"4\" ]]\n    [[ $(candidate \"100\") = \"25\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_257_swap_numbers", "prompt": "#!/bin/bash\n# Write a function that takes in two numbers and returns a list with the second number and then the first number.\n#\n# $1 is an integer\n# $2 is an integer\nswap_numbers() {\n", "test": "}\n\ncandidate() {\n    swap_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\") = \"20 10\" ]]\n    [[ $(candidate \"15\" \"17\") = \"17 15\" ]]\n    [[ $(candidate \"100\" \"200\") = \"200 100\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_259_maximize_elements", "prompt": "#!/bin/bash\n# Write a function to maximize the given two lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nmaximize_elements() {\n", "test": "}\n\ncandidate() {\n    maximize_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"6 7\\n4 9\\n2 9\\n7 10\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"7 8\\n5 10\\n3 10\\n8 11\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"8 9\\n6 11\\n4 11\\n9 12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_260_newman_prime", "prompt": "#!/bin/bash\n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n#\n# $1 is an integer\nnewman_prime() {\n", "test": "}\n\ncandidate() {\n    newman_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"7\" ]]\n    [[ $(candidate \"4\") = \"17\" ]]\n    [[ $(candidate \"5\") = \"41\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_261_division_elements", "prompt": "#!/bin/bash\n# Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndivision_elements() {\n", "test": "}\n\ncandidate() {\n    division_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"2 2 2 3\" ]]\n    [[ $(candidate \"12 6 8 16\" \"6 3 4 4\") = \"2 2 2 4\" ]]\n    [[ $(candidate \"20 14 36 18\" \"5 7 6 9\") = \"4 2 6 2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_262_split_two_parts", "prompt": "#!/bin/bash\n# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nsplit_two_parts() {\n", "test": "}\n\ncandidate() {\n    split_two_parts \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 2\\n3 4 4 5 1\" ]]\n    [[ $(candidate \"a b c d\" \"2\") = \"a b\\nc d\" ]]\n    [[ $(candidate \"p y t h o n\" \"4\") = \"p y t h\\no n\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_264_dog_age", "prompt": "#!/bin/bash\n# Write a function to calculate a dog's age in dog's years.\n#\n# $1 is an integer\ndog_age() {\n", "test": "}\n\ncandidate() {\n    dog_age \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\") = \"61\" ]]\n    [[ $(candidate \"15\") = \"73\" ]]\n    [[ $(candidate \"24\") = \"109\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_265_list_split", "prompt": "#!/bin/bash\n# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n#\n# $1 is a space-separated list\n# $2 is an integer\nlist_split() {\n", "test": "}\n\ncandidate() {\n    list_split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n\" \"3\") = \"a d g j m\\nb e h k n\\nc f i l\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\" \"3\") = \"1 4 7 10 13\\n2 5 8 11 14\\n3 6 9 12\" ]]\n    [[ $(candidate \"python java C C++ DBMS SQL\" \"2\") = \"python C DBMS\\njava C++ SQL\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_266_lateralsurface_cube", "prompt": "#!/bin/bash\n# Write a function to find the lateral surface area of a cube given its side length.\n#\n# $1 is an integer\nlateralsurface_cube() {\n", "test": "}\n\ncandidate() {\n    lateralsurface_cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"100\" ]]\n    [[ $(candidate \"9\") = \"324\" ]]\n    [[ $(candidate \"10\") = \"400\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_267_square_Sum", "prompt": "#!/bin/bash\n# Write a sh function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n#\n# $1 is an integer\nsquare_Sum() {\n", "test": "}\n\ncandidate() {\n    square_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"10\" ]]\n    [[ $(candidate \"3\") = \"35\" ]]\n    [[ $(candidate \"4\") = \"84\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_268_find_star_num", "prompt": "#!/bin/bash\n# Write a function to find the n'th star number.\n#\n# $1 is an integer\nfind_star_num() {\n", "test": "}\n\ncandidate() {\n    find_star_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"37\" ]]\n    [[ $(candidate \"4\") = \"73\" ]]\n    [[ $(candidate \"5\") = \"121\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_269_ascii_value", "prompt": "#!/bin/bash\n# Write a function to find the ascii value of a character.\n#\n# $1 is a string\nascii_value() {\n", "test": "}\n\ncandidate() {\n    ascii_value \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"A\") = \"65\" ]]\n    [[ $(candidate \"R\") = \"82\" ]]\n    [[ $(candidate \"S\") = \"83\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_270_sum_even_and_even_index", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of even numbers at even positions of a list.\n#\n# $1 is a space-separated list\nsum_even_and_even_index() {\n", "test": "}\n\ncandidate() {\n    sum_even_and_even_index \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 12 1 18 8\") = \"30\" ]]\n    [[ $(candidate \"3 20 17 9 2 10 18 13 6 18\") = \"26\" ]]\n    [[ $(candidate \"5 6 12 1\") = \"12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_271_even_Power_Sum", "prompt": "#!/bin/bash\n# Write a sh function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n#\n# $1 is an integer\neven_Power_Sum() {\n", "test": "}\n\ncandidate() {\n    even_Power_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1056\" ]]\n    [[ $(candidate \"3\") = \"8832\" ]]\n    [[ $(candidate \"1\") = \"32\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_272_rear_extract", "prompt": "#!/bin/bash\n# Write a function that takes in a list of lists and returns a list containing the rear element of each list.\n#\n# $1 is a newline-separated, space-separated list\nrear_extract() {\n", "test": "}\n\ncandidate() {\n    rear_extract \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 Rash 21\\n2 Varsha 20\\n3 Kil 19\") = \"21 20 19\" ]]\n    [[ $(candidate \"1 Sai 36\\n2 Ayesha 25\\n3 Salman 45\") = \"36 25 45\" ]]\n    [[ $(candidate \"1 Sudeep 14\\n2 Vandana 36\\n3 Dawood 56\") = \"14 36 56\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_273_substract_elements", "prompt": "#!/bin/bash\n# Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsubstract_elements() {\n", "test": "}\n\ncandidate() {\n    substract_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5\" \"2 5 18\") = \"8 -1 -13\" ]]\n    [[ $(candidate \"11 2 3\" \"24 45 16\") = \"-13 -43 -13\" ]]\n    [[ $(candidate \"7 18 9\" \"10 11 12\") = \"-3 7 -3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_274_even_binomial_Coeff_Sum", "prompt": "#!/bin/bash\n# Write a sh function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n#\n# $1 is an integer\neven_binomial_Coeff_Sum() {\n", "test": "}\n\ncandidate() {\n    even_binomial_Coeff_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"8\" ]]\n    [[ $(candidate \"6\") = \"32\" ]]\n    [[ $(candidate \"2\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_278_count_first_elements", "prompt": "#!/bin/bash\n# Write a function to find the number of elements that occurs before the list element in the given list.\n#\n# $1 is a newline-separated, space-separated list\ncount_first_elements() {\n", "test": "}\n\ncandidate() {\n    count_first_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 4 6 10\") = \"3\" ]]\n    [[ $(candidate \"2 9 5 7 11\") = \"2\" ]]\n    [[ $(candidate \"11 15 5 8 2 3 8\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_279_is_num_decagonal", "prompt": "#!/bin/bash\n# Write a function to find the nth decagonal number.\n#\n# $1 is an integer\nis_num_decagonal() {\n", "test": "}\n\ncandidate() {\n    is_num_decagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"27\" ]]\n    [[ $(candidate \"7\") = \"175\" ]]\n    [[ $(candidate \"10\") = \"370\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_280_sequential_search", "prompt": "#!/bin/bash\n# Write a function that takes in an array and element and returns a list containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n#\n# $1 is a space-separated list\n# $2 is an integer\nsequential_search() {\n", "test": "}\n\ncandidate() {\n    sequential_search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11 23 58 31 56 77 43 12 65 19\" \"31\") = \"true 3\" ]]\n    [[ $(candidate \"12 32 45 62 35 47 44 61\" \"61\") = \"true 7\" ]]\n    [[ $(candidate \"9 10 17 19 22 39 48 56\" \"48\") = \"true 6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_281_all_unique", "prompt": "#!/bin/bash\n# Write a sh function to check if the elements of a given list are unique or not.\n#\n# $1 is a space-separated list\nall_unique() {\n", "test": "}\n\ncandidate() {\n    all_unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n    [[ $(candidate \"1 2 1 2\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_282_sub_list", "prompt": "#!/bin/bash\n# Write a function to subtract two lists element-wise.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsub_list() {\n", "test": "}\n\ncandidate() {\n    sub_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"-3 -3 -3\" ]]\n    [[ $(candidate \"1 2\" \"3 4\") = \"-2 -2\" ]]\n    [[ $(candidate \"90 120\" \"50 70\") = \"40 50\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_283_validate", "prompt": "#!/bin/bash\n# Write a sh function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n#\n# $1 is an integer\nvalidate() {\n", "test": "}\n\ncandidate() {\n    validate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1234\") = \"true\" ]]\n    [[ $(candidate \"51241\") = \"false\" ]]\n    [[ $(candidate \"321\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_284_check_element", "prompt": "#!/bin/bash\n# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n#\n# $1 is a space-separated list\n# $2 is a $Any\ncheck_element() {\n", "test": "}\n\ncandidate() {\n    check_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"green orange black white\" \"blue\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4\" \"7\") = \"false\" ]]\n    [[ $(candidate \"green green green green\" \"green\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_285_text_match_two_three", "prompt": "#!/bin/bash\n# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n#\n# $1 is a string\ntext_match_two_three() {\n", "test": "}\n\ncandidate() {\n    text_match_two_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abbbba\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_286_max_sub_array_sum_repeated", "prompt": "#!/bin/bash\n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nmax_sub_array_sum_repeated() {\n", "test": "}\n\ncandidate() {\n    max_sub_array_sum_repeated \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 -30 -1\" \"4\" \"3\") = \"30\" ]]\n    [[ $(candidate \"-1 10 20\" \"3\" \"2\") = \"59\" ]]\n    [[ $(candidate \"-1 -2 -3\" \"3\" \"3\") = \"-1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_287_square_Sum", "prompt": "#!/bin/bash\n# Write a sh function takes in an integer n and returns the sum of squares of first n even natural numbers.\n#\n# $1 is an integer\nsquare_Sum() {\n", "test": "}\n\ncandidate() {\n    square_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"20\" ]]\n    [[ $(candidate \"3\") = \"56\" ]]\n    [[ $(candidate \"4\") = \"120\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_290_max_length", "prompt": "#!/bin/bash\n# Write a function to find the list of maximum length in a list of lists.\n#\n# $1 is a newline-separated, space-separated list\nmax_length() {\n", "test": "}\n\ncandidate() {\n    max_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1\\n5 7\\n10 12 14 15\") = \"4 10 12 14 15\" ]]\n    [[ $(candidate \"5\\n15 20 25\") = \"3 15 20 25\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_291_count_no_of_ways", "prompt": "#!/bin/bash\n# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n#\n# $1 is an integer\n# $2 is an integer\ncount_no_of_ways() {\n", "test": "}\n\ncandidate() {\n    count_no_of_ways \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"4\") = \"16\" ]]\n    [[ $(candidate \"3\" \"2\") = \"6\" ]]\n    [[ $(candidate \"4\" \"4\") = \"228\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_292_find", "prompt": "#!/bin/bash\n# Write a sh function to find quotient of two numbers (rounded down to the nearest integer).\n#\n# $1 is an integer\n# $2 is an integer\nfind() {\n", "test": "}\n\ncandidate() {\n    find \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"3\") = \"3\" ]]\n    [[ $(candidate \"4\" \"2\") = \"2\" ]]\n    [[ $(candidate \"20\" \"5\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_293_otherside_rightangle", "prompt": "#!/bin/bash\n# Write a function to find the third side of a right angled triangle.\n#\n# $1 is an integer\n# $2 is an integer\notherside_rightangle() {\n", "test": "}\n\ncandidate() {\n    otherside_rightangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"8\") = \"10.63014581273465\" ]]\n    [[ $(candidate \"3\" \"4\") = \"5\" ]]\n    [[ $(candidate \"7\" \"15\") = \"16.55294535724685\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_294_max_val", "prompt": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n", "test": "}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_295_sum_div", "prompt": "#!/bin/bash\n# Write a function to return the sum of all divisors of a number.\n#\n# $1 is an integer\nsum_div() {\n", "test": "}\n\ncandidate() {\n    sum_div \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\") = \"7\" ]]\n    [[ $(candidate \"12\") = \"16\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_296_get_Inv_Count", "prompt": "#!/bin/bash\n# Write a sh function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n", "test": "}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_297_flatten_list", "prompt": "#!/bin/bash\n# Write a function to flatten a given nested list structure.\n#\n# $1 is a newline-separated, space-separated list\nflatten_list() {\n", "test": "}\n\ncandidate() {\n    flatten_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 10 20 30 40 50 60 70 80 90 100 110 120\") = \"0 10 20 30 40 50 60 70 80 90 100 110 120\" ]]\n    [[ $(candidate \"10 20\\n40\\n30 56 25\\n10 20\\n33\\n40\") = \"10 20 40 30 56 25 10 20 33 40\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n10 11 12\\n7 8 9\") = \"1 2 3 4 5 6 10 11 12 7 8 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_304_find_Element", "prompt": "#!/bin/bash\n# Write a sh function to find element at a given index after number of rotations.\n#\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\n# $3 is an integer\n# $4 is an integer\nfind_Element() {\n", "test": "}\n\ncandidate() {\n    find_Element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"0 2\\n0 3\" \"2\" \"1\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4\" \"0 1\\n0 2\" \"1\" \"2\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"0 1\\n0 2\" \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_306_max_sum_increasing_subseq", "prompt": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n", "test": "}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_308_large_product", "prompt": "#!/bin/bash\n# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nlarge_product() {\n", "test": "}\n\ncandidate() {\n    large_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"3\") = \"60 54 50\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"4\") = \"60 54 50 48\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"5\") = \"60 54 50 48 45\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_309_maximum", "prompt": "#!/bin/bash\n# Write a sh function to find the maximum of two numbers.\n#\n# $1 is an integer\n# $2 is an integer\nmaximum() {\n", "test": "}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"10\") = \"10\" ]]\n    [[ $(candidate \"-1\" \"-2\") = \"-1\" ]]\n    [[ $(candidate \"9\" \"7\") = \"9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_310_string_to_tuple", "prompt": "#!/bin/bash\n# Write a function to convert a given string to a list of characters.\n#\n# $1 is a string\nstring_to_tuple() {\n", "test": "}\n\ncandidate() {\n    string_to_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python 3.0\") = \"p y t h o n 3 . 0\" ]]\n    [[ $(candidate \"item1\") = \"i t e m 1\" ]]\n    [[ $(candidate \"15.10\") = \"1 5 . 1 0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_388_highest_Power_of_2", "prompt": "#!/bin/bash\n# Write a sh function to find the highest power of 2 that is less than or equal to n.\n#\n# $1 is an integer\nhighest_Power_of_2() {\n", "test": "}\n\ncandidate() {\n    highest_Power_of_2 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"8\" ]]\n    [[ $(candidate \"19\") = \"16\" ]]\n    [[ $(candidate \"32\") = \"32\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_389_find_lucas", "prompt": "#!/bin/bash\n# Write a function to find the n'th lucas number.\n#\n# $1 is an integer\nfind_lucas() {\n", "test": "}\n\ncandidate() {\n    find_lucas \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"76\" ]]\n    [[ $(candidate \"4\") = \"7\" ]]\n    [[ $(candidate \"3\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_390_add_string", "prompt": "#!/bin/bash\n# Write a function to apply a given format string to all of the elements in a list.\n#\n# $1 is a space-separated list\n# $2 is a string\nadd_string() {\n", "test": "}\n\ncandidate() {\n    add_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\" \"temp{0}\") = \"temp1 temp2 temp3 temp4\" ]]\n    [[ $(candidate \"a b c d\" \"python{0}\") = \"pythona pythonb pythonc pythond\" ]]\n    [[ $(candidate \"5 6 7 8\" \"string{0}\") = \"string5 string6 string7 string8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_392_get_max_sum", "prompt": "#!/bin/bash\n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n#\n# $1 is an integer\nget_max_sum() {\n", "test": "}\n\ncandidate() {\n    get_max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"60\") = \"106\" ]]\n    [[ $(candidate \"10\") = \"12\" ]]\n    [[ $(candidate \"2\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_393_max_length_list", "prompt": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n", "test": "}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_394_check_distinct", "prompt": "#!/bin/bash\n# Write a function to check if given list contains no duplicates.\n#\n# $1 is a space-separated list\ncheck_distinct() {\n", "test": "}\n\ncandidate() {\n    check_distinct \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 5 6 1 4\") = \"false\" ]]\n    [[ $(candidate \"1 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 6\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_395_first_non_repeating_character", "prompt": "#!/bin/bash\n# Write a sh function to find the first non-repeated character in a given string.\n#\n# $1 is a string\nfirst_non_repeating_character() {\n", "test": "}\n\ncandidate() {\n    first_non_repeating_character \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcabc\") = \"None\" ]]\n    [[ $(candidate \"abc\") = \"a\" ]]\n    [[ $(candidate \"ababc\") = \"c\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_396_check_char", "prompt": "#!/bin/bash\n# Write a function to check whether the given string starts and ends with the same character or not.\n#\n# $1 is a string\ncheck_char() {\n", "test": "}\n\ncandidate() {\n    check_char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abba\") = \"Valid\" ]]\n    [[ $(candidate \"a\") = \"Valid\" ]]\n    [[ $(candidate \"abcd\") = \"Invalid\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_397_median_numbers", "prompt": "#!/bin/bash\n# Write a function to find the median of three numbers.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmedian_numbers() {\n", "test": "}\n\ncandidate() {\n    median_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25\" \"55\" \"65\") = \"55.0\" ]]\n    [[ $(candidate \"20\" \"10\" \"30\") = \"20.0\" ]]\n    [[ $(candidate \"15\" \"45\" \"75\") = \"45.0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_398_sum_of_digits", "prompt": "#!/bin/bash\n# Write a function to compute the sum of digits of each number of a given list.\n#\n# $1 is a space-separated list\nsum_of_digits() {\n", "test": "}\n\ncandidate() {\n    sum_of_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 2 56\") = \"14\" ]]\n    [[ $(candidate \"10 20 4 5 b 70 a\") = \"19\" ]]\n    [[ $(candidate \"10 20 -4 5 -70\") = \"19\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_399_bitwise_xor", "prompt": "#!/bin/bash\n# Write a function to perform the mathematical bitwise xor operation across the given lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nbitwise_xor() {\n", "test": "}\n\ncandidate() {\n    bitwise_xor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"15 6 5 10\" ]]\n    [[ $(candidate \"11 5 7 10\" \"6 3 4 4\") = \"13 6 3 14\" ]]\n    [[ $(candidate \"12 6 8 11\" \"7 4 5 6\") = \"11 2 13 13\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_400_extract_freq", "prompt": "#!/bin/bash\n# Write a function to extract the number of unique lists in the given list.\n#\n# $1 is a newline-separated, space-separated list\nextract_freq() {\n", "test": "}\n\ncandidate() {\n    extract_freq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\\n1 2\\n4 3\\n5 6\") = \"3\" ]]\n    [[ $(candidate \"4 15\\n2 3\\n5 4\\n6 7\") = \"4\" ]]\n    [[ $(candidate \"5 16\\n2 3\\n6 5\\n6 9\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_401_add_nested_tuples", "prompt": "#!/bin/bash\n# Write a function to perform index wise addition of list elements in the given two nested lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nadd_nested_tuples() {\n", "test": "}\n\ncandidate() {\n    add_nested_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"7 10\\n7 14\\n3 10\\n8 13\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"9 12\\n9 16\\n5 12\\n10 15\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"11 14\\n11 18\\n7 14\\n12 17\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_404_minimum", "prompt": "#!/bin/bash\n# Write a sh function to find the minimum of two numbers.\n#\n# $1 is an integer\n# $2 is an integer\nminimum() {\n", "test": "}\n\ncandidate() {\n    minimum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"1\" ]]\n    [[ $(candidate \"-5\" \"-4\") = \"-5\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_405_check_tuplex", "prompt": "#!/bin/bash\n# Write a function to check whether an element exists within a list.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a $Any\ncheck_tuplex() {\n", "test": "}\n\ncandidate() {\n    check_tuplex \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"w 3 r e s o u r c e\" \"r\") = \"true\" ]]\n    [[ $(candidate \"w 3 r e s o u r c e\" \"5\") = \"false\" ]]\n    [[ $(candidate \"w 3 r e s o u r c e\" \"3\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_406_find_Parity", "prompt": "#!/bin/bash\n# Write a sh function to find whether the parity of a given number is odd.\n#\n# $1 is an integer\nfind_Parity() {\n", "test": "}\n\ncandidate() {\n    find_Parity \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\") = \"false\" ]]\n    [[ $(candidate \"7\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_407_rearrange_bigger", "prompt": "#!/bin/bash\n# Write a function to create the next bigger number by rearranging the digits of a given number.\n#\n# $1 is an integer\nrearrange_bigger() {\n", "test": "}\n\ncandidate() {\n    rearrange_bigger \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\") = \"21\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"102\") = \"120\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_408_k_smallest_pairs", "prompt": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n", "test": "}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_409_min_product_tuple", "prompt": "#!/bin/bash\n# Write a function to find the minimum product from the pairs of lists within a given list.\n#\n# $1 is a newline-separated, space-separated list\nmin_product_tuple() {\n", "test": "}\n\ncandidate() {\n    min_product_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 7\\n2 6\\n1 8\\n4 9\") = \"8\" ]]\n    [[ $(candidate \"10 20\\n15 2\\n5 10\") = \"30\" ]]\n    [[ $(candidate \"11 44\\n10 15\\n20 5\\n12 9\") = \"100\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_410_min_val", "prompt": "#!/bin/bash\n# Write a function to find the minimum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmin_val() {\n", "test": "}\n\ncandidate() {\n    min_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"2\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"15\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"20\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_411_snake_to_camel", "prompt": "#!/bin/bash\n# Write a function to convert the given snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n", "test": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"android_tv\") = \"AndroidTv\" ]]\n    [[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]\n    [[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_412_remove_odd", "prompt": "#!/bin/bash\n# Write a sh function to remove odd numbers from a given list.\n#\n# $1 is a space-separated list\nremove_odd() {\n", "test": "}\n\ncandidate() {\n    remove_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"2\" ]]\n    [[ $(candidate \"2 4 6\") = \"2 4 6\" ]]\n    [[ $(candidate \"10 20 3\") = \"10 20\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_414_overlapping", "prompt": "#!/bin/bash\n# Write a sh function to check whether any value in a sequence exists in a sequence or not.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\noverlapping() {\n", "test": "}\n\ncandidate() {\n    overlapping \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"false\" ]]\n    [[ $(candidate \"1 4 5\" \"1 4 5\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_415_max_Product", "prompt": "#!/bin/bash\n# Write a sh function to find a pair with highest product from a given array of integers.\n#\n# $1 is a space-separated list\nmax_Product() {\n", "test": "}\n\ncandidate() {\n    max_Product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 7 0 8 4\") = \"7 8\" ]]\n    [[ $(candidate \"0 -1 -2 -4 5 0 -6\") = \"-4 -6\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_417_group_tuples", "prompt": "#!/bin/bash\n# Write a function to find common first element in given list of lists.\n#\n# $1 is a newline-separated, space-separated list\ngroup_tuples() {\n", "test": "}\n\ncandidate() {\n    group_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y\\nx z\\nw t\") = \"x y z\\nw t\" ]]\n    [[ $(candidate \"a b\\na c\\nd e\") = \"a b c\\nd e\" ]]\n    [[ $(candidate \"f g\\nf g\\nh i\") = \"f g g\\nh i\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_418_Find_Max", "prompt": "#!/bin/bash\n# Write a sh function to find the element of a list having maximum length.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max() {\n", "test": "}\n\ncandidate() {\n    Find_Max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"A\\nA B\\nA B C\") = \"A B C\" ]]\n    [[ $(candidate \"1\\n1 2\\n1 2 3\") = \"1 2 3\" ]]\n    [[ $(candidate \"1 1\\n1 2 3\\n1 5 6 1\") = \"1 5 6 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_419_round_and_sum", "prompt": "#!/bin/bash\n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n#\n# $1 is a newline-separated, space-separated list\nround_and_sum() {\n", "test": "}\n\ncandidate() {\n    round_and_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5\") = \"243\" ]]\n    [[ $(candidate \"5 2 9 24.3 29\") = \"345\" ]]\n    [[ $(candidate \"25.0 56.7 89.2\") = \"513\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_420_cube_Sum", "prompt": "#!/bin/bash\n# Write a sh function to find the cube sum of first n even natural numbers.\n#\n# $1 is an integer\ncube_Sum() {\n", "test": "}\n\ncandidate() {\n    cube_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"72\" ]]\n    [[ $(candidate \"3\") = \"288\" ]]\n    [[ $(candidate \"4\") = \"800\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_421_concatenate_tuple", "prompt": "#!/bin/bash\n# Write a function to concatenate each element of list by the delimiter.\n#\n# $1 is a space-separated list\nconcatenate_tuple() {\n", "test": "}\n\ncandidate() {\n    concatenate_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ID is 4 UTS\") = \"ID-is-4-UTS\" ]]\n    [[ $(candidate \"QWE is 4 RTY\") = \"QWE-is-4-RTY\" ]]\n    [[ $(candidate \"ZEN is 4 OP\") = \"ZEN-is-4-OP\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_422_find_Average_Of_Cube", "prompt": "#!/bin/bash\n# Write a sh function to find the average of cubes of first n natural numbers.\n#\n# $1 is an integer\nfind_Average_Of_Cube() {\n", "test": "}\n\ncandidate() {\n    find_Average_Of_Cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4.5\" ]]\n    [[ $(candidate \"3\") = \"12\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_424_extract_rear", "prompt": "#!/bin/bash\n# Write a function to extract only the rear index element of each string in the given list.\n#\n# $1 is a space-separated list\nextract_rear() {\n", "test": "}\n\ncandidate() {\n    extract_rear \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mers for Vers\") = \"s r s\" ]]\n    [[ $(candidate \"Avenge for People\") = \"e r e\" ]]\n    [[ $(candidate \"Gotta get go\") = \"a t o\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_425_count_element_in_list", "prompt": "#!/bin/bash\n# Write a function to count the number of sublists containing a particular element.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a $Any\ncount_element_in_list() {\n", "test": "}\n\ncandidate() {\n    count_element_in_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n5 7\\n1 11\\n1 15 7\" \"1\") = \"3\" ]]\n    [[ $(candidate \"A B\\nA C\\nA D E\\nB C D\" \"A\") = \"3\" ]]\n    [[ $(candidate \"A B\\nA C\\nA D E\\nB C D\" \"E\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_426_filter_oddnumbers", "prompt": "#!/bin/bash\n# Write a function to filter odd numbers.\n#\n# $1 is a space-separated list\nfilter_oddnumbers() {\n", "test": "}\n\ncandidate() {\n    filter_oddnumbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 3 5 7 9\" ]]\n    [[ $(candidate \"10 20 45 67 84 93\") = \"45 67 93\" ]]\n    [[ $(candidate \"5 7 9 8 6 4 3\") = \"5 7 9 3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_427_change_date_format", "prompt": "#!/bin/bash\n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n#\n# $1 is a string\nchange_date_format() {\n", "test": "}\n\ncandidate() {\n    change_date_format \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2026-01-02\") = \"02-01-2026\" ]]\n    [[ $(candidate \"2020-11-13\") = \"13-11-2020\" ]]\n    [[ $(candidate \"2021-04-26\") = \"26-04-2021\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_428_shell_sort", "prompt": "#!/bin/bash\n# Write a function to sort the given array by using shell sort.\n#\n# $1 is a space-separated list\nshell_sort() {\n", "test": "}\n\ncandidate() {\n    shell_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 23 4 5 3 2 12 81 56 95\") = \"2 3 4 5 12 12 23 56 81 95\" ]]\n    [[ $(candidate \"24 22 39 34 87 73 68\") = \"22 24 34 39 68 73 87\" ]]\n    [[ $(candidate \"32 30 16 96 82 83 74\") = \"16 30 32 74 82 83 96\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_429_and_tuples", "prompt": "#!/bin/bash\n# Write a function to extract the elementwise and lists from the given two lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nand_tuples() {\n", "test": "}\n\ncandidate() {\n    and_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"0 0 2 1\" ]]\n    [[ $(candidate \"1 2 3 4\" \"5 6 7 8\") = \"1 2 3 0\" ]]\n    [[ $(candidate \"8 9 11 12\" \"7 13 14 17\") = \"0 9 10 0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_430_parabola_directrix", "prompt": "#!/bin/bash\n# Write a function to find the directrix of a parabola.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nparabola_directrix() {\n", "test": "}\n\ncandidate() {\n    parabola_directrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"3\" \"2\") = \"-198\" ]]\n    [[ $(candidate \"9\" \"8\" \"4\") = \"-2336\" ]]\n    [[ $(candidate \"2\" \"4\" \"6\") = \"-130\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_431_common_element", "prompt": "#!/bin/bash\n# Write a function that takes two lists and returns true if they have at least one common element.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon_element() {\n", "test": "}\n\ncandidate() {\n    common_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"5 6 7 8 9\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9\") = \"None\" ]]\n    [[ $(candidate \"a b c\" \"d b e\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_432_median_trapezium", "prompt": "#!/bin/bash\n# Write a function to find the median length of a trapezium.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmedian_trapezium() {\n", "test": "}\n\ncandidate() {\n    median_trapezium \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\" \"25\" \"35\") = \"20\" ]]\n    [[ $(candidate \"10\" \"20\" \"30\") = \"15\" ]]\n    [[ $(candidate \"6\" \"9\" \"4\") = \"7.5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_433_check_greater", "prompt": "#!/bin/bash\n# Write a function to check whether the entered number is greater than the elements of the given array.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncheck_greater() {\n", "test": "}\n\ncandidate() {\n    check_greater \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"4\") = \"false\" ]]\n    [[ $(candidate \"2 3 4 5 6\" \"8\") = \"true\" ]]\n    [[ $(candidate \"9 7 4 8 6 1\" \"11\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_434_text_match_one", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an a followed by one or more b's.\n#\n# $1 is a string\ntext_match_one() {\n", "test": "}\n\ncandidate() {\n    text_match_one \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abba\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_435_last_Digit", "prompt": "#!/bin/bash\n# Write a sh function to find the last digit of a given number.\n#\n# $1 is an integer\nlast_Digit() {\n", "test": "}\n\ncandidate() {\n    last_Digit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"3\" ]]\n    [[ $(candidate \"25\") = \"5\" ]]\n    [[ $(candidate \"30\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_436_neg_nos", "prompt": "#!/bin/bash\n# Write a sh function to return the negative numbers in a list.\n#\n# $1 is a space-separated list\nneg_nos() {\n", "test": "}\n\ncandidate() {\n    neg_nos \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 4 5 -6\") = \"-1 -6\" ]]\n    [[ $(candidate \"-1 -2 3 4\") = \"-1 -2\" ]]\n    [[ $(candidate \"-7 -6 8 9\") = \"-7 -6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_437_remove_odd", "prompt": "#!/bin/bash\n# Write a function to remove odd characters in a string.\n#\n# $1 is a string\nremove_odd() {\n", "test": "}\n\ncandidate() {\n    remove_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"yhn\" ]]\n    [[ $(candidate \"program\") = \"rga\" ]]\n    [[ $(candidate \"language\") = \"agae\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_438_count_bidirectional", "prompt": "#!/bin/bash\n# Write a function to count bidirectional list pairs.\n#\n# $1 is a newline-separated, space-separated list\ncount_bidirectional() {\n", "test": "}\n\ncandidate() {\n    count_bidirectional \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6\\n1 2\\n6 5\\n9 1\\n6 5\\n2 1\") = \"3\" ]]\n    [[ $(candidate \"5 6\\n1 3\\n6 5\\n9 1\\n6 5\\n2 1\") = \"2\" ]]\n    [[ $(candidate \"5 6\\n1 2\\n6 5\\n9 2\\n6 5\\n2 1\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_439_multiple_to_single", "prompt": "#!/bin/bash\n# Write a function to join a list of multiple integers into a single integer.\n#\n# $1 is a space-separated list\nmultiple_to_single() {\n", "test": "}\n\ncandidate() {\n    multiple_to_single \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11 33 50\") = \"113350\" ]]\n    [[ $(candidate \"-1 2 3 4 5 6\") = \"-123456\" ]]\n    [[ $(candidate \"10 15 20 25\") = \"10152025\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_440_find_adverb_position", "prompt": "#!/bin/bash\n# Write a function to find the first adverb and their positions in a given sentence.\n#\n# $1 is a string\nfind_adverb_position() {\n", "test": "}\n\ncandidate() {\n    find_adverb_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"clearly\\!\\! we can see the sky\") = \"0 7 clearly\" ]]\n    [[ $(candidate \"seriously\\!\\! there are many roses\") = \"0 9 seriously\" ]]\n    [[ $(candidate \"unfortunately\\!\\! sita is going to home\") = \"0 13 unfortunately\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_441_surfacearea_cube", "prompt": "#!/bin/bash\n# Write a function to find the surface area of a cube of a given size.\n#\n# $1 is an integer\nsurfacearea_cube() {\n", "test": "}\n\ncandidate() {\n    surfacearea_cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"150\" ]]\n    [[ $(candidate \"3\") = \"54\" ]]\n    [[ $(candidate \"10\") = \"600\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_442_positive_count", "prompt": "#!/bin/bash\n# Write a function to find the ration of positive numbers in an array of integers.\n#\n# $1 is a space-separated list\npositive_count() {\n", "test": "}\n\ncandidate() {\n    positive_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 -1 -5 6 0 -3 -2 3 4 6 8\") = \"0.54\" ]]\n    [[ $(candidate \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"0.69\" ]]\n    [[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\") = \"0.56\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_443_largest_neg", "prompt": "#!/bin/bash\n# Write a sh function to find the largest negative number from the given list.\n#\n# $1 is a space-separated list\nlargest_neg() {\n", "test": "}\n\ncandidate() {\n    largest_neg \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 -4 -6\") = \"-6\" ]]\n    [[ $(candidate \"1 2 3 -8 -9\") = \"-9\" ]]\n    [[ $(candidate \"1 2 3 4 -1\") = \"-1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_444_trim_tuple", "prompt": "#!/bin/bash\n# Write a function to trim each list by k in the given lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\ntrim_tuple() {\n", "test": "}\n\ncandidate() {\n    trim_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 3 2 1 4\\n3 4 9 2 1\\n9 1 2 3 5\\n4 8 2 1 7\" \"2\") = \"2\\n9\\n2\\n2\" ]]\n    [[ $(candidate \"5 3 2 1 4\\n3 4 9 2 1\\n9 1 2 3 5\\n4 8 2 1 7\" \"1\") = \"3 2 1\\n4 9 2\\n1 2 3\\n8 2 1\" ]]\n    [[ $(candidate \"7 8 4 9\\n11 8 12 4\\n4 1 7 8\\n3 6 9 7\" \"1\") = \"8 4\\n8 12\\n1 7\\n6 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_445_index_multiplication", "prompt": "#!/bin/bash\n# Write a function to perform index wise multiplication of list elements in the given two lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nindex_multiplication() {\n", "test": "}\n\ncandidate() {\n    index_multiplication \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"6 21\\n12 45\\n2 9\\n7 30\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"14 32\\n20 60\\n6 20\\n16 44\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"24 45\\n30 77\\n12 33\\n27 60\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_446_count_Occurrence", "prompt": "#!/bin/bash\n# Write a sh function to count the occurence of all elements of list in a list.\n#\n# $1 is a $Any\n# $2 is a space-separated list\ncount_Occurrence() {\n", "test": "}\n\ncandidate() {\n    count_Occurrence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a a c b d\" \"a b\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 1 4 6 7 1 4\" \"1 4 7\") = \"6\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"1 2\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_447_cube_nums", "prompt": "#!/bin/bash\n# Write a function to find cubes of individual elements in a list.\n#\n# $1 is a space-separated list\ncube_nums() {\n", "test": "}\n\ncandidate() {\n    cube_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 8 27 64 125 216 343 512 729 1000\" ]]\n    [[ $(candidate \"10 20 30\") = \"1000 8000 27000\" ]]\n    [[ $(candidate \"12 15\") = \"1728 3375\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_448_cal_sum", "prompt": "#!/bin/bash\n# Write a function to calculate the sum of perrin numbers.\n#\n# $1 is an integer\ncal_sum() {\n", "test": "}\n\ncandidate() {\n    cal_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"49\" ]]\n    [[ $(candidate \"10\") = \"66\" ]]\n    [[ $(candidate \"11\") = \"88\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_450_extract_string", "prompt": "#!/bin/bash\n# Write a function to extract specified size of strings from a given list of string values.\n#\n# $1 is a space-separated list\n# $2 is an integer\nextract_string() {\n", "test": "}\n\ncandidate() {\n    extract_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python list exercises practice solution\" \"8\") = \"practice solution\" ]]\n    [[ $(candidate \"Python list exercises practice solution\" \"6\") = \"Python\" ]]\n    [[ $(candidate \"Python list exercises practice solution\" \"9\") = \"exercises\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_451_remove_whitespaces", "prompt": "#!/bin/bash\n# Write a function to remove all whitespaces from the given string.\n#\n# $1 is a string\nremove_whitespaces() {\n", "test": "}\n\ncandidate() {\n    remove_whitespaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \" Google    Flutter \") = \"GoogleFlutter\" ]]\n    [[ $(candidate \" Google    Dart \") = \"GoogleDart\" ]]\n    [[ $(candidate \" iOS    Swift \") = \"iOSSwift\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_452_loss_amount", "prompt": "#!/bin/bash\n# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n#\n# $1 is an integer\n# $2 is an integer\nloss_amount() {\n", "test": "}\n\ncandidate() {\n    loss_amount \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1500\" \"1200\") = \"0\" ]]\n    [[ $(candidate \"100\" \"200\") = \"100\" ]]\n    [[ $(candidate \"2000\" \"5000\") = \"3000\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_453_sumofFactors", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of even factors of a number.\n#\n# $1 is an integer\nsumofFactors() {\n", "test": "}\n\ncandidate() {\n    sumofFactors \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"18\") = \"26\" ]]\n    [[ $(candidate \"30\") = \"48\" ]]\n    [[ $(candidate \"6\") = \"8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_454_text_match_wordz", "prompt": "#!/bin/bash\n# Write a function that matches a word containing 'z'.\n#\n# $1 is a string\ntext_match_wordz() {\n", "test": "}\n\ncandidate() {\n    text_match_wordz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pythonz.\") = \"true\" ]]\n    [[ $(candidate \"xyz.\") = \"true\" ]]\n    [[ $(candidate \"  lang  .\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_455_check_monthnumb_number", "prompt": "#!/bin/bash\n# Write a function to check whether the given month number contains 31 days or not.\n#\n# $1 is an integer\ncheck_monthnumb_number() {\n", "test": "}\n\ncandidate() {\n    check_monthnumb_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"6\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_456_reverse_string_list", "prompt": "#!/bin/bash\n# Write a function to reverse each string in a given list of string values.\n#\n# $1 is a space-separated list\nreverse_string_list() {\n", "test": "}\n\ncandidate() {\n    reverse_string_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Red Green Blue White Black\") = \"deR neerG eulB etihW kcalB\" ]]\n    [[ $(candidate \"john amal joel george\") = \"nhoj lama leoj egroeg\" ]]\n    [[ $(candidate \"jack john mary\") = \"kcaj nhoj yram\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_457_Find_Min", "prompt": "#!/bin/bash\n# Write a sh function to find the sublist having minimum length.\n#\n# $1 is a newline-separated, space-separated list\nFind_Min() {\n", "test": "}\n\ncandidate() {\n    Find_Min \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 2\\n1 2 3\") = \"1\" ]]\n    [[ $(candidate \"1 1\\n1 1 1\\n1 2 7 8\") = \"1 1\" ]]\n    [[ $(candidate \"x\\nx y\\nx y z\") = \"x\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_458_rectangle_area", "prompt": "#!/bin/bash\n# Write a function to find the area of a rectangle.\n#\n# $1 is an integer\n# $2 is an integer\nrectangle_area() {\n", "test": "}\n\ncandidate() {\n    rectangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\") = \"200\" ]]\n    [[ $(candidate \"10\" \"5\") = \"50\" ]]\n    [[ $(candidate \"4\" \"2\") = \"8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_459_remove_uppercase", "prompt": "#!/bin/bash\n# Write a function to remove uppercase substrings from a given string.\n#\n# $1 is a string\nremove_uppercase() {\n", "test": "}\n\ncandidate() {\n    remove_uppercase \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"cAstyoUrFavoRitETVshoWs\") = \"cstyoravoitshos\" ]]\n    [[ $(candidate \"wAtchTheinTernEtrAdIo\") = \"wtchheinerntrdo\" ]]\n    [[ $(candidate \"VoicESeaRchAndreComMendaTionS\") = \"oiceachndreomendaion\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_460_Extract", "prompt": "#!/bin/bash\n# Write a sh function to get the first element of each sublist.\n#\n# $1 is a newline-separated, space-separated list\nExtract() {\n", "test": "}\n\ncandidate() {\n    Extract \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\\n3 4 5\\n6 7 8 9\") = \"1 3 6\" ]]\n    [[ $(candidate \"1 2 3\\n4 5\") = \"1 4\" ]]\n    [[ $(candidate \"9 8 1\\n1 2\") = \"9 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_461_upper_ctr", "prompt": "#!/bin/bash\n# Write a sh function to count the upper case characters in a given string.\n#\n# $1 is a string\nupper_ctr() {\n", "test": "}\n\ncandidate() {\n    upper_ctr \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"PYthon\") = \"1\" ]]\n    [[ $(candidate \"BigData\") = \"1\" ]]\n    [[ $(candidate \"program\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_462_combinations_list", "prompt": "#!/bin/bash\n# Write a function to find all possible combinations of the elements of a given list.\n#\n# $1 is a space-separated list\ncombinations_list() {\n", "test": "}\n\ncandidate() {\n    combinations_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"orange red green blue\") = \"\\norange\\nred\\nred orange\\ngreen\\ngreen orange\\ngreen red\\ngreen red orange\\nblue\\nblue orange\\nblue red\\nblue red orange\\nblue green\\nblue green orange\\nblue green red\\nblue green red orange\" ]]\n    [[ $(candidate \"red green blue white black orange\") = \"\\nred\\ngreen\\ngreen red\\nblue\\nblue red\\nblue green\\nblue green red\\nwhite\\nwhite red\\nwhite green\\nwhite green red\\nwhite blue\\nwhite blue red\\nwhite blue green\\nwhite blue green red\\nblack\\nblack red\\nblack green\\nblack green red\\nblack blue\\nblack blue red\\nblack blue green\\nblack blue green red\\nblack white\\nblack white red\\nblack white green\\nblack white green red\\nblack white blue\\nblack white blue red\\nblack white blue green\\nblack white blue green red\\norange\\norange red\\norange green\\norange green red\\norange blue\\norange blue red\\norange blue green\\norange blue green red\\norange white\\norange white red\\norange white green\\norange white green red\\norange white blue\\norange white blue red\\norange white blue green\\norange white blue green red\\norange black\\norange black red\\norange black green\\norange black green red\\norange black blue\\norange black blue red\\norange black blue green\\norange black blue green red\\norange black white\\norange black white red\\norange black white green\\norange black white green red\\norange black white blue\\norange black white blue red\\norange black white blue green\\norange black white blue green red\" ]]\n    [[ $(candidate \"red green black orange\") = \"\\nred\\ngreen\\ngreen red\\nblack\\nblack red\\nblack green\\nblack green red\\norange\\norange red\\norange green\\norange green red\\norange black\\norange black red\\norange black green\\norange black green red\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_463_max_subarray_product", "prompt": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n", "test": "}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_465_drop_empty", "prompt": "#!/bin/bash\n# Write a function to drop empty items from a given CSV.\n#\n# $1 is a two column CSV in key,value order\ndrop_empty() {\n", "test": "}\n\ncandidate() {\n    drop_empty \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"c1,Red\\nc2,Green\\nc3,None\") = \"c1,Red\\nc2,Green\" ]]\n    [[ $(candidate \"c1,Red\\nc2,None\\nc3,None\") = \"c1,Red\" ]]\n    [[ $(candidate \"c1,None\\nc2,Green\\nc3,None\") = \"c2,Green\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_468_max_product", "prompt": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n", "test": "}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_470_add_pairwise", "prompt": "#!/bin/bash\n# Write a function to find the pairwise addition of the neighboring elements of the given list.\n#\n# $1 is a space-separated list\nadd_pairwise() {\n", "test": "}\n\ncandidate() {\n    add_pairwise \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 8 10\") = \"6 12 15 18\" ]]\n    [[ $(candidate \"2 6 8 9 11\") = \"8 14 17 20\" ]]\n    [[ $(candidate \"3 7 9 10 12\") = \"10 16 19 22\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_471_find_remainder", "prompt": "#!/bin/bash\n# Write a sh function to find the product of the array multiplication modulo n.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_remainder() {\n", "test": "}\n\ncandidate() {\n    find_remainder \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100 10 5 25 35 14\" \"11\") = \"9\" ]]\n    [[ $(candidate \"1 1 1\" \"1\") = \"0\" ]]\n    [[ $(candidate \"1 2 1\" \"2\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_472_check_Consecutive", "prompt": "#!/bin/bash\n# Write a sh function to check whether the given list contains consecutive numbers or not.\n#\n# $1 is a space-separated list\ncheck_Consecutive() {\n", "test": "}\n\ncandidate() {\n    check_Consecutive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 5 6\") = \"false\" ]]\n    [[ $(candidate \"1 2 1\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_474_replace_char", "prompt": "#!/bin/bash\n# Write a function to replace characters in a string.\n#\n# $1 is a string\n# $2 is a string\n# $3 is a string\nreplace_char() {\n", "test": "}\n\ncandidate() {\n    replace_char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"polygon\" \"y\" \"l\") = \"pollgon\" ]]\n    [[ $(candidate \"character\" \"c\" \"a\") = \"aharaater\" ]]\n    [[ $(candidate \"python\" \"l\" \"a\") = \"python\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_475_sort_counter", "prompt": "#!/bin/bash\n# Write a function to sort a CSV by value.\n#\n# $1 is a two column CSV in key,value order\nsort_counter() {\n", "test": "}\n\ncandidate() {\n    sort_counter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Math,81\\nPhysics,83\\nChemistry,87\") = \"Chemistry 87\\nPhysics 83\\nMath 81\" ]]\n    [[ $(candidate \"Math,400\\nPhysics,300\\nChemistry,250\") = \"Math 400\\nPhysics 300\\nChemistry 250\" ]]\n    [[ $(candidate \"Math,900\\nPhysics,1000\\nChemistry,1250\") = \"Chemistry 1250\\nPhysics 1000\\nMath 900\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_476_big_sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of the largest and smallest value in a given array.\n#\n# $1 is a space-separated list\nbig_sum() {\n", "test": "}\n\ncandidate() {\n    big_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"4\" ]]\n    [[ $(candidate \"-1 2 3 4\") = \"3\" ]]\n    [[ $(candidate \"2 3 6\") = \"8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_477_is_lower", "prompt": "#!/bin/bash\n# Write a sh function to convert the given string to lower case.\n#\n# $1 is a string\nis_lower() {\n", "test": "}\n\ncandidate() {\n    is_lower \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"InValid\") = \"invalid\" ]]\n    [[ $(candidate \"TruE\") = \"true\" ]]\n    [[ $(candidate \"SenTenCE\") = \"sentence\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_478_remove_lowercase", "prompt": "#!/bin/bash\n# Write a function to remove lowercase substrings from a given string.\n#\n# $1 is a string\nremove_lowercase() {\n", "test": "}\n\ncandidate() {\n    remove_lowercase \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"PYTHon\") = \"PYTH\" ]]\n    [[ $(candidate \"FInD\") = \"FID\" ]]\n    [[ $(candidate \"STRinG\") = \"STRG\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_479_first_Digit", "prompt": "#!/bin/bash\n# Write a sh function to find the first digit of a given number.\n#\n# $1 is an integer\nfirst_Digit() {\n", "test": "}\n\ncandidate() {\n    first_Digit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"1\" ]]\n    [[ $(candidate \"456\") = \"4\" ]]\n    [[ $(candidate \"12\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_554_Split", "prompt": "#!/bin/bash\n# Write a sh function which takes a list of integers and only returns the odd ones.\n#\n# $1 is a space-separated list\nSplit() {\n", "test": "}\n\ncandidate() {\n    Split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"1 3 5\" ]]\n    [[ $(candidate \"10 11 12 13\") = \"11 13\" ]]\n    [[ $(candidate \"7 8 9 1\") = \"7 9 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_555_difference", "prompt": "#!/bin/bash\n# Write a sh function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n#\n# $1 is an integer\ndifference() {\n", "test": "}\n\ncandidate() {\n    difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"30\" ]]\n    [[ $(candidate \"5\") = \"210\" ]]\n    [[ $(candidate \"2\") = \"6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_556_find_Odd_Pair", "prompt": "#!/bin/bash\n# Write a sh function to count the number of pairs whose xor value is odd.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_Odd_Pair() {\n", "test": "}\n\ncandidate() {\n    find_Odd_Pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 7 2 1\" \"5\") = \"6\" ]]\n    [[ $(candidate \"7 2 8 1 0 5 11\" \"7\") = \"12\" ]]\n    [[ $(candidate \"1 2 3\" \"3\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_557_toggle_string", "prompt": "#!/bin/bash\n# Write a function to toggle the case of all characters in a string.\n#\n# $1 is a string\ntoggle_string() {\n", "test": "}\n\ncandidate() {\n    toggle_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"pYTHON\" ]]\n    [[ $(candidate \"Pangram\") = \"pANGRAM\" ]]\n    [[ $(candidate \"LIttLE\") = \"liTTle\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_558_digit_distance_nums", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of the per-digit difference between two integers.\n#\n# $1 is an integer\n# $2 is an integer\ndigit_distance_nums() {\n", "test": "}\n\ncandidate() {\n    digit_distance_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"1\" ]]\n    [[ $(candidate \"23\" \"56\") = \"6\" ]]\n    [[ $(candidate \"123\" \"256\") = \"7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_559_max_sub_array_sum", "prompt": "#!/bin/bash\n# Write a function to find the sum of the largest contiguous sublist in the given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmax_sub_array_sum() {\n", "test": "}\n\ncandidate() {\n    max_sub_array_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-2 -3 4 -1 -2 1 5 -3\" \"8\") = \"7\" ]]\n    [[ $(candidate \"-3 -4 5 -2 -3 2 6 -4\" \"8\") = \"8\" ]]\n    [[ $(candidate \"-4 -5 6 -3 -4 3 7 -5\" \"8\") = \"10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_560_union_elements", "prompt": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n", "test": "}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_562_Find_Max_Length", "prompt": "#!/bin/bash\n# Write a sh function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n", "test": "}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_563_extract_values", "prompt": "#!/bin/bash\n# Write a function to extract values between quotation marks from a string.\n#\n# $1 is a string\nextract_values() {\n", "test": "}\n\ncandidate() {\n    extract_values \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") = \"Python PHP Java\" ]]\n    [[ $(candidate \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") = \"python program language\" ]]\n    [[ $(candidate \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") = \"red blue green yellow\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_564_count_Pairs", "prompt": "#!/bin/bash\n# Write a sh function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncount_Pairs() {\n", "test": "}\n\ncandidate() {\n    count_Pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 1\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 1 1 1\" \"4\") = \"0\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"5\") = \"10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_565_split", "prompt": "#!/bin/bash\n# Write a sh function to split a string into characters.\n#\n# $1 is a string\nsplit() {\n", "test": "}\n\ncandidate() {\n    split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"p y t h o n\" ]]\n    [[ $(candidate \"Name\") = \"N a m e\" ]]\n    [[ $(candidate \"program\") = \"p r o g r a m\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_566_sum_digits", "prompt": "#!/bin/bash\n# Write a function to get the sum of the digits of a non-negative integer.\n#\n# $1 is an integer\nsum_digits() {\n", "test": "}\n\ncandidate() {\n    sum_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"345\") = \"12\" ]]\n    [[ $(candidate \"12\") = \"3\" ]]\n    [[ $(candidate \"97\") = \"16\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_567_issort_list", "prompt": "#!/bin/bash\n# Write a function to check whether a specified list is sorted or not.\n#\n# $1 is a space-separated list\nissort_list() {\n", "test": "}\n\ncandidate() {\n    issort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 6 8 10 12 14 16 17\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 6 8 10 12 14 20 17\") = \"false\" ]]\n    [[ $(candidate \"1 2 4 6 8 10 15 14 20\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_569_sort_sublists", "prompt": "#!/bin/bash\n# Write a function to sort each sublist of strings in a given list of lists.\n#\n# $1 is a newline-separated, space-separated list\nsort_sublists() {\n", "test": "}\n\ncandidate() {\n    sort_sublists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"green orange\\nblack white\\nwhite black orange\") = \"green orange\\nblack white\\nblack orange white\" ]]\n    [[ $(candidate \"green orange\\nblack\\ngreen orange\\nwhite\") = \"green orange\\nblack\\ngreen orange\\nwhite\" ]]\n    [[ $(candidate \"a b\\nd c\\ng h\\nf e\") = \"a b\\nc d\\ng h\\ne f\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_572_two_unique_nums", "prompt": "#!/bin/bash\n# Write a sh function to remove duplicate numbers from a given number of lists.\n#\n# $1 is a space-separated list\ntwo_unique_nums() {\n", "test": "}\n\ncandidate() {\n    two_unique_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 2 3 4 5\") = \"1 4 5\" ]]\n    [[ $(candidate \"1 2 3 2 4 5\") = \"1 3 4 5\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 2 3 4 5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_573_unique_product", "prompt": "#!/bin/bash\n# Write a sh function to calculate the product of the unique numbers in a given list.\n#\n# $1 is a space-separated list\nunique_product() {\n", "test": "}\n\ncandidate() {\n    unique_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 30 40 20 50 60 40\") = \"720000000\" ]]\n    [[ $(candidate \"1 2 3 1\") = \"6\" ]]\n    [[ $(candidate \"7 8 9 0 1 1\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_574_surfacearea_cylinder", "prompt": "#!/bin/bash\n# Write a function to find the surface area of a cylinder.\n#\n# $1 is an integer\n# $2 is an integer\nsurfacearea_cylinder() {\n", "test": "}\n\ncandidate() {\n    surfacearea_cylinder \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"5\") = \"942.45\" ]]\n    [[ $(candidate \"4\" \"5\") = \"226.18800000000002\" ]]\n    [[ $(candidate \"4\" \"10\") = \"351.848\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_576_is_Sub_Array", "prompt": "#!/bin/bash\n# Write a sh function to check whether a list is sublist of another or not.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_Sub_Array() {\n", "test": "}\n\ncandidate() {\n    is_Sub_Array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 3 5\" \"1 2\") = \"false\" ]]\n    [[ $(candidate \"1 2 1\" \"1 2 1\") = \"true\" ]]\n    [[ $(candidate \"1 0 2 2\" \"2 2 0\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_577_last_Digit_Factorial", "prompt": "#!/bin/bash\n# Write a sh function to find the last digit in factorial of a given number.\n#\n# $1 is an integer\nlast_Digit_Factorial() {\n", "test": "}\n\ncandidate() {\n    last_Digit_Factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"4\" ]]\n    [[ $(candidate \"21\") = \"0\" ]]\n    [[ $(candidate \"30\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_578_interleave_lists", "prompt": "#!/bin/bash\n# Write a function to interleave 3 lists of the same length into a single flat list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\ninterleave_lists() {\n", "test": "}\n\ncandidate() {\n    interleave_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7\" \"10 20 30 40 50 60 70\" \"100 200 300 400 500 600 700\") = \"1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700\" ]]\n    [[ $(candidate \"10 20\" \"15 2\" \"5 10\") = \"10 15 5 20 2 10\" ]]\n    [[ $(candidate \"11 44\" \"10 15\" \"20 5\") = \"11 10 20 44 15 5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_579_find_dissimilar", "prompt": "#!/bin/bash\n# Write a function to find the dissimilar elements in the given two lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nfind_dissimilar() {\n", "test": "}\n\ncandidate() {\n    find_dissimilar \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"7 2 3 9\") = \"1 4 7 9\" ]]\n    [[ $(candidate \"21 11 25 26\" \"26 34 21 36\") = \"34 36 11 25\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_580_extract_even", "prompt": "#!/bin/bash\n# Write a function to remove uneven elements in the nested mixed list.\n#\n# $1 is a space-separated list\nextract_even() {\n", "test": "}\n\ncandidate() {\n    extract_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 5 7 6 2 4 6 8\") = \"4 6 2 4 6 8\" ]]\n    [[ $(candidate \"5 6 8 7 4 8 7 9\") = \"6 8 4 8\" ]]\n    [[ $(candidate \"5 6 9 8 4 6 8 10\") = \"6 8 4 6 8 10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_581_surface_Area", "prompt": "#!/bin/bash\n# Write a sh function to find the surface area of a square shramid with a given base edge and height.\n#\n# $1 is an integer\n# $2 is an integer\nsurface_Area() {\n", "test": "}\n\ncandidate() {\n    surface_Area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\") = \"33\" ]]\n    [[ $(candidate \"4\" \"5\") = \"56\" ]]\n    [[ $(candidate \"1\" \"2\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_583_catalan_number", "prompt": "#!/bin/bash\n# Write a function which returns nth catalan number.\n#\n# $1 is an integer\ncatalan_number() {\n", "test": "}\n\ncandidate() {\n    catalan_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"16796\" ]]\n    [[ $(candidate \"9\") = \"4862\" ]]\n    [[ $(candidate \"7\") = \"429\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_584_find_adverbs", "prompt": "#!/bin/bash\n# Write a function to find the first adverb ending with ly and its positions in a given string.\n#\n# $1 is a string\nfind_adverbs() {\n", "test": "}\n\ncandidate() {\n    find_adverbs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Clearly, he has no excuse for such behavior.\") = \"0-7: Clearly\" ]]\n    [[ $(candidate \"Please handle the situation carefuly\") = \"28-36: carefuly\" ]]\n    [[ $(candidate \"Complete the task quickly\") = \"18-25: quickly\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_586_split_Arr", "prompt": "#!/bin/bash\n# Write a sh function to split a list at the nth eelment and add the first part to the end.\n#\n# $1 is a space-separated list\n# $2 is an integer\nsplit_Arr() {\n", "test": "}\n\ncandidate() {\n    split_Arr \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 10 5 6 52 36\" \"2\") = \"5 6 52 36 12 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"1\") = \"2 3 4 1\" ]]\n    [[ $(candidate \"0 1 2 3 4 5 6 7\" \"3\") = \"3 4 5 6 7 0 1 2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_587_list_tuple", "prompt": "#!/bin/bash\n# Write a function to convert a list to a list.\n#\n# $1 is a space-separated list\nlist_tuple() {\n", "test": "}\n\ncandidate() {\n    list_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 10 7 4 15 3\") = \"5 10 7 4 15 3\" ]]\n    [[ $(candidate \"2 4 5 6 2 3 4 4 7\") = \"2 4 5 6 2 3 4 4 7\" ]]\n    [[ $(candidate \"58 44 56\") = \"58 44 56\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_588_big_diff", "prompt": "#!/bin/bash\n# Write a sh function to find the difference between largest and smallest value in a given list.\n#\n# $1 is a space-separated list\nbig_diff() {\n", "test": "}\n\ncandidate() {\n    big_diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"3\" ]]\n    [[ $(candidate \"4 5 12\") = \"8\" ]]\n    [[ $(candidate \"9 2 3\") = \"7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_589_perfect_squares", "prompt": "#!/bin/bash\n# Write a function to find perfect squares between two given numbers.\n#\n# $1 is an integer\n# $2 is an integer\nperfect_squares() {\n", "test": "}\n\ncandidate() {\n    perfect_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"30\") = \"1 4 9 16 25\" ]]\n    [[ $(candidate \"50\" \"100\") = \"64 81 100\" ]]\n    [[ $(candidate \"100\" \"200\") = \"100 121 144 169 196\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_591_swap_List", "prompt": "#!/bin/bash\n# Write a sh function to interchange the first and last elements in a list.\n#\n# $1 is a space-separated list\nswap_List() {\n", "test": "}\n\ncandidate() {\n    swap_List \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 35 9 56 24\") = \"24 35 9 56 12\" ]]\n    [[ $(candidate \"1 2 3\") = \"3 2 1\" ]]\n    [[ $(candidate \"4 5 6\") = \"6 5 4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_592_sum_Of_product", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of the product of consecutive binomial co-efficients.\n#\n# $1 is an integer\nsum_Of_product() {\n", "test": "}\n\ncandidate() {\n    sum_Of_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"15\" ]]\n    [[ $(candidate \"4\") = \"56\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_593_removezero_ip", "prompt": "#!/bin/bash\n# Write a function to remove leading zeroes from an ip address.\n#\n# $1 is a string\nremovezero_ip() {\n", "test": "}\n\ncandidate() {\n    removezero_ip \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"216.08.094.196\") = \"216.8.94.196\" ]]\n    [[ $(candidate \"12.01.024\") = \"12.1.24\" ]]\n    [[ $(candidate \"216.08.094.0196\") = \"216.8.94.196\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_594_diff_even_odd", "prompt": "#!/bin/bash\n# Write a function to find the difference of the first even and first odd number of a given list.\n#\n# $1 is a space-separated list\ndiff_even_odd() {\n", "test": "}\n\ncandidate() {\n    diff_even_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 4 1 6 8\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_595_min_Swaps", "prompt": "#!/bin/bash\n# Write a sh function to count minimum number of swaps required to convert one binary number represented as a string to another.\n#\n# $1 is a string\n# $2 is a string\nmin_Swaps() {\n", "test": "}\n\ncandidate() {\n    min_Swaps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1101\" \"1110\") = \"1\" ]]\n    [[ $(candidate \"111\" \"000\") = \"Not Possible\" ]]\n    [[ $(candidate \"111\" \"110\") = \"Not Possible\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_597_find_kth", "prompt": "#!/bin/bash\n# Write a function to find kth element from the given two sorted arrays.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nfind_kth() {\n", "test": "}\n\ncandidate() {\n    find_kth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 6 7 9\" \"1 4 8 10\" \"5\") = \"6\" ]]\n    [[ $(candidate \"100 112 256 349 770\" \"72 86 113 119 265 445 892\" \"7\") = \"256\" ]]\n    [[ $(candidate \"3 4 7 8 10\" \"2 5 9 11\" \"6\") = \"8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_598_armstrong_number", "prompt": "#!/bin/bash\n# Write a function to check whether the given number is armstrong or not.\n#\n# $1 is an integer\narmstrong_number() {\n", "test": "}\n\ncandidate() {\n    armstrong_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"153\") = \"true\" ]]\n    [[ $(candidate \"259\") = \"false\" ]]\n    [[ $(candidate \"4458\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_599_sum_average", "prompt": "#!/bin/bash\n# Write a function to find sum and average of first n natural numbers.\n#\n# $1 is an integer\nsum_average() {\n", "test": "}\n\ncandidate() {\n    sum_average \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55 5.5\" ]]\n    [[ $(candidate \"15\") = \"120 8.0\" ]]\n    [[ $(candidate \"20\") = \"210 10.5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_600_is_Even", "prompt": "#!/bin/bash\n# Write a sh function to check whether the given number is even or not.\n#\n# $1 is an integer\nis_Even() {\n", "test": "}\n\ncandidate() {\n    is_Even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"2\") = \"true\" ]]\n    [[ $(candidate \"3\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_602_first_repeated_char", "prompt": "#!/bin/bash\n# Write a sh function to find the first repeated character in a given string.\n#\n# $1 is a string\nfirst_repeated_char() {\n", "test": "}\n\ncandidate() {\n    first_repeated_char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcabc\") = \"a\" ]]\n    [[ $(candidate \"abc\") = \"None\" ]]\n    [[ $(candidate \"123123\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_603_get_ludic", "prompt": "#!/bin/bash\n# Write a function to get all lucid numbers smaller than or equal to a given integer.\n#\n# $1 is an integer\nget_ludic() {\n", "test": "}\n\ncandidate() {\n    get_ludic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"1 2 3 5 7\" ]]\n    [[ $(candidate \"25\") = \"1 2 3 5 7 11 13 17 23 25\" ]]\n    [[ $(candidate \"45\") = \"1 2 3 5 7 11 13 17 23 25 29 37 41 43\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_604_reverse_words", "prompt": "#!/bin/bash\n# Write a function to reverse words seperated by spaces in a given string.\n#\n# $1 is a string\nreverse_words() {\n", "test": "}\n\ncandidate() {\n    reverse_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python program\") = \"program python\" ]]\n    [[ $(candidate \"java language\") = \"language java\" ]]\n    [[ $(candidate \"indian man\") = \"man indian\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_605_prime_num", "prompt": "#!/bin/bash\n# Write a function to check if the given integer is a prime number.\n#\n# $1 is an integer\nprime_num() {\n", "test": "}\n\ncandidate() {\n    prime_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"13\") = \"true\" ]]\n    [[ $(candidate \"7\") = \"true\" ]]\n    [[ $(candidate \"-1010\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_606_radian_degree", "prompt": "#!/bin/bash\n# Write a function to convert degrees to radians.\n#\n# $1 is an integer\nradian_degree() {\n", "test": "}\n\ncandidate() {\n    radian_degree \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"90\") = \"1.5707963267948966\" ]]\n    [[ $(candidate \"60\") = \"1.0471975511965976\" ]]\n    [[ $(candidate \"120\") = \"2.0943951023931953\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_607_find_literals", "prompt": "#!/bin/bash\n# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n#\n# $1 is a string\n# $2 is a string\nfind_literals() {\n", "test": "}\n\ncandidate() {\n    find_literals \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") = \"fox 16 19\" ]]\n    [[ $(candidate \"Its been a very crazy procedure right\" \"crazy\") = \"crazy 16 21\" ]]\n    [[ $(candidate \"Hardest choices required strongest will\" \"will\") = \"will 35 39\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_608_bell_Number", "prompt": "#!/bin/bash\n# Write a sh function to find nth bell number.\n#\n# $1 is an integer\nbell_Number() {\n", "test": "}\n\ncandidate() {\n    bell_Number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"15\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_610_remove_kth_element", "prompt": "#!/bin/bash\n# Write a sh function which takes a list and returns a list with the same elements, but the k'th element removed.\n#\n# $1 is a space-separated list\n# $2 is an integer\nremove_kth_element() {\n", "test": "}\n\ncandidate() {\n    remove_kth_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 3 4 4 5 1\" ]]\n    [[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\" \"4\") = \"0 0 1 3 4 4 5 6 6 6 7 8 9 4 4\" ]]\n    [[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\" \"5\") = \"10 10 15 19 18 17 26 26 17 18 10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_611_max_of_nth", "prompt": "#!/bin/bash\n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_of_nth() {\n", "test": "}\n\ncandidate() {\n    max_of_nth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\\n1 3 5\\n8 9 19\" \"2\") = \"19\" ]]\n    [[ $(candidate \"6 7 8\\n2 4 6\\n9 10 20\" \"1\") = \"10\" ]]\n    [[ $(candidate \"7 8 9\\n3 5 7\\n10 11 21\" \"1\") = \"11\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_612_merge", "prompt": "#!/bin/bash\n# Write a sh function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n#\n# $1 is a newline-separated, space-separated list\nmerge() {\n", "test": "}\n\ncandidate() {\n    merge \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y\\na b\\nm n\") = \"x a m\\ny b n\" ]]\n    [[ $(candidate \"1 2\\n3 4\\n5 6\\n7 8\") = \"1 3 5 7\\n2 4 6 8\" ]]\n    [[ $(candidate \"x y z\\na b c\\nm n o\") = \"x a m\\ny b n\\nz c o\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_614_cummulative_sum", "prompt": "#!/bin/bash\n# Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n#\n# $1 is a newline-separated, space-separated list\ncummulative_sum() {\n", "test": "}\n\ncandidate() {\n    cummulative_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n5 6 7\\n2 6\") = \"30\" ]]\n    [[ $(candidate \"2 4\\n6 7 8\\n3 7\") = \"37\" ]]\n    [[ $(candidate \"3 5\\n7 8 9\\n4 8\") = \"44\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_615_average_tuple", "prompt": "#!/bin/bash\n# Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n#\n# $1 is a newline-separated, space-separated list\naverage_tuple() {\n", "test": "}\n\ncandidate() {\n    average_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 10 10 12\\n30 45 56 45\\n81 80 39 32\\n1 2 3 4\") = \"30.5 34.25 27.0 23.25\" ]]\n    [[ $(candidate \"1 1 -5\\n30 -15 56\\n81 -60 -39\\n-10 2 3\") = \"25.5 -18.0 3.75\" ]]\n    [[ $(candidate \"100 100 100 120\\n300 450 560 450\\n810 800 390 320\\n10 20 30 40\") = \"305.0 342.5 270.0 232.5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_616_tuple_modulo", "prompt": "#!/bin/bash\n# Write a function which takes two lists of the same length and performs the element wise modulo.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntuple_modulo() {\n", "test": "}\n\ncandidate() {\n    tuple_modulo \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6\" \"5 6 7 5\") = \"0 4 5 1\" ]]\n    [[ $(candidate \"11 5 6 7\" \"6 7 8 6\") = \"5 5 6 1\" ]]\n    [[ $(candidate \"12 6 7 8\" \"7 8 9 7\") = \"5 6 7 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_617_min_Jumps", "prompt": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n", "test": "}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_618_div_list", "prompt": "#!/bin/bash\n# Write a function to divide two lists element wise.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndiv_list() {\n", "test": "}\n\ncandidate() {\n    div_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 5 6\" \"1 2 3\") = \"4.0 2.5 2.0\" ]]\n    [[ $(candidate \"3 2\" \"1 4\") = \"3.0 0.5\" ]]\n    [[ $(candidate \"90 120\" \"50 70\") = \"1.8 1.7142857142857142\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_619_move_num", "prompt": "#!/bin/bash\n# Write a function to move all the numbers to the end of the given string.\n#\n# $1 is a string\nmove_num() {\n", "test": "}\n\ncandidate() {\n    move_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"I1love143you55three3000thousand\") = \"Iloveyouthreethousand1143553000\" ]]\n    [[ $(candidate \"Avengers124Assemble\") = \"AvengersAssemble124\" ]]\n    [[ $(candidate \"Its11our12path13to14see15things16do17things\") = \"Itsourpathtoseethingsdothings11121314151617\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_622_get_median", "prompt": "#!/bin/bash\n# Write a function to find the median of two sorted lists of same size.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nget_median() {\n", "test": "}\n\ncandidate() {\n    get_median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 12 15 26 38\" \"2 13 17 30 45\" \"5\") = \"16.0\" ]]\n    [[ $(candidate \"2 4 8 9\" \"7 13 19 28\" \"4\") = \"8.5\" ]]\n    [[ $(candidate \"3 6 14 23 36 42\" \"2 18 27 39 49 55\" \"6\") = \"25.0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_623_nth_nums", "prompt": "#!/bin/bash\n# Write a function to compute the n-th power of each number in a list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nnth_nums() {\n", "test": "}\n\ncandidate() {\n    nth_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"1 4 9 16 25 36 49 64 81 100\" ]]\n    [[ $(candidate \"10 20 30\" \"3\") = \"1000 8000 27000\" ]]\n    [[ $(candidate \"12 15\" \"5\") = \"248832 759375\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_624_is_upper", "prompt": "#!/bin/bash\n# Write a sh function to convert a given string to uppercase.\n#\n# $1 is a string\nis_upper() {\n", "test": "}\n\ncandidate() {\n    is_upper \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"person\") = \"PERSON\" ]]\n    [[ $(candidate \"final\") = \"FINAL\" ]]\n    [[ $(candidate \"Valid\") = \"VALID\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_625_swap_List", "prompt": "#!/bin/bash\n# Write a sh function to interchange the first and last element in a given list.\n#\n# $1 is a space-separated list\nswap_List() {\n", "test": "}\n\ncandidate() {\n    swap_List \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3 2 1\" ]]\n    [[ $(candidate \"1 2 3 4 4\") = \"4 2 3 4 1\" ]]\n    [[ $(candidate \"4 5 6\") = \"6 5 4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_626_triangle_area", "prompt": "#!/bin/bash\n# Write a sh function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n#\n# $1 is an integer\ntriangle_area() {\n", "test": "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1\") = \"None\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"2\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_627_find_First_Missing", "prompt": "#!/bin/bash\n# Write a sh function to find the smallest missing number from a sorted list of natural numbers.\n#\n# $1 is a space-separated list\nfind_First_Missing() {\n", "test": "}\n\ncandidate() {\n    find_First_Missing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3\") = \"4\" ]]\n    [[ $(candidate \"0 1 2 6 9\") = \"3\" ]]\n    [[ $(candidate \"2 3 5 8 9\") = \"0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_628_replace_spaces", "prompt": "#!/bin/bash\n# Write a function to replace all spaces in the given string with '%20'.\n#\n# $1 is a string\nreplace_spaces() {\n", "test": "}\n\ncandidate() {\n    replace_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"My Name is Dawood\") = \"My%20Name%20is%20Dawood\" ]]\n    [[ $(candidate \"I am a Programmer\") = \"I%20am%20a%20Programmer\" ]]\n    [[ $(candidate \"I love Coding\") = \"I%20love%20Coding\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_629_Split", "prompt": "#!/bin/bash\n# Write a sh function to find even numbers from a list of numbers.\n#\n# $1 is a space-separated list\nSplit() {\n", "test": "}\n\ncandidate() {\n    Split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2 4\" ]]\n    [[ $(candidate \"4 5 6 7 8 0 1\") = \"4 6 8 0\" ]]\n    [[ $(candidate \"8 12 15 19\") = \"8 12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_630_get_coordinates", "prompt": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n", "test": "}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_631_replace_spaces", "prompt": "#!/bin/bash\n# Write a function to replace whitespaces with an underscore and vice versa in a given string.\n#\n# $1 is a string\nreplace_spaces() {\n", "test": "}\n\ncandidate() {\n    replace_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jumanji The Jungle\") = \"Jumanji_The_Jungle\" ]]\n    [[ $(candidate \"The_Avengers\") = \"The Avengers\" ]]\n    [[ $(candidate \"Fast and Furious\") = \"Fast_and_Furious\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_632_move_zero", "prompt": "#!/bin/bash\n# Write a sh function to move all zeroes to the end of the given list.\n#\n# $1 is a space-separated list\nmove_zero() {\n", "test": "}\n\ncandidate() {\n    move_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 0 2 0 3 4\") = \"1 2 3 4 0 0\" ]]\n    [[ $(candidate \"2 3 2 0 0 4 0 5 0\") = \"2 3 2 4 5 0 0 0 0\" ]]\n    [[ $(candidate \"0 1 0 1 1\") = \"1 1 1 0 0\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_633_pair_xor_Sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of xor of all pairs of numbers in the given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\npair_xor_Sum() {\n", "test": "}\n\ncandidate() {\n    pair_xor_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 9 7 6\" \"4\") = \"47\" ]]\n    [[ $(candidate \"7 3 5\" \"3\") = \"12\" ]]\n    [[ $(candidate \"7 3\" \"2\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_635_heap_sort", "prompt": "#!/bin/bash\n# Write a function to sort the given list.\n#\n# $1 is a space-separated list\nheap_sort() {\n", "test": "}\n\ncandidate() {\n    heap_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]\n    [[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_637_noprofit_noloss", "prompt": "#!/bin/bash\n# Write a function to check whether the given amount has no profit and no loss\n#\n# $1 is an integer\n# $2 is an integer\nnoprofit_noloss() {\n", "test": "}\n\ncandidate() {\n    noprofit_noloss \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1500\" \"1200\") = \"false\" ]]\n    [[ $(candidate \"100\" \"100\") = \"true\" ]]\n    [[ $(candidate \"2000\" \"5000\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_638_wind_chill", "prompt": "#!/bin/bash\n# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n#\n# $1 is an integer\n# $2 is an integer\nwind_chill() {\n", "test": "}\n\ncandidate() {\n    wind_chill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"120\" \"35\") = \"40\" ]]\n    [[ $(candidate \"40\" \"20\") = \"19\" ]]\n    [[ $(candidate \"10\" \"8\") = \"6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_639_sample_nam", "prompt": "#!/bin/bash\n# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n#\n# $1 is a space-separated list\nsample_nam() {\n", "test": "}\n\ncandidate() {\n    sample_nam \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"sally Dylan rebecca Diana Joanne keith\") = \"16\" ]]\n    [[ $(candidate \"php res Python abcd Java aaa\") = \"10\" ]]\n    [[ $(candidate \"abcd Python abba aba\") = \"6\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_641_is_nonagonal", "prompt": "#!/bin/bash\n# Write a function to find the nth nonagonal number.\n#\n# $1 is an integer\nis_nonagonal() {\n", "test": "}\n\ncandidate() {\n    is_nonagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"325\" ]]\n    [[ $(candidate \"15\") = \"750\" ]]\n    [[ $(candidate \"18\") = \"1089\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_643_text_match_wordz_middle", "prompt": "#!/bin/bash\n# Write a function that checks if a strings contains 'z', except at the start and end of the word.\n#\n# $1 is a string\ntext_match_wordz_middle() {\n", "test": "}\n\ncandidate() {\n    text_match_wordz_middle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pythonzabc.\") = \"true\" ]]\n    [[ $(candidate \"zxyabc.\") = \"false\" ]]\n    [[ $(candidate \"  lang  .\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_644_reverse_Array_Upto_K", "prompt": "#!/bin/bash\n# Write a sh function to reverse an array upto a given position.\n#\n# $1 is a space-separated list\n# $2 is an integer\nreverse_Array_Upto_K() {\n", "test": "}\n\ncandidate() {\n    reverse_Array_Upto_K \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\" \"4\") = \"4 3 2 1 5 6\" ]]\n    [[ $(candidate \"4 5 6 7\" \"2\") = \"5 4 6 7\" ]]\n    [[ $(candidate \"9 8 7 6 5\" \"3\") = \"7 8 9 6 5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_720_add_dict_to_tuple", "prompt": "#!/bin/bash\n# Write a function to add a CSV to the list. The output should be a list.\n#\n# $1 is a space-separated list\n# $2 is a two column CSV in key,value order\nadd_dict_to_tuple() {\n", "test": "}\n\ncandidate() {\n    add_dict_to_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 5 6\" \"MSAM,1\\nis,2\\nbest,3\") = \"4 5 6 MSAM,1\\nis,2\\nbest,3\" ]]\n    [[ $(candidate \"1 2 3\" \"UTS,2\\nis,3\\nWorst,4\") = \"1 2 3 UTS,2\\nis,3\\nWorst,4\" ]]\n    [[ $(candidate \"8 9 10\" \"POS,3\\nis,4\\nOkay,5\") = \"8 9 10 POS,3\\nis,4\\nOkay,5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_721_maxAverageOfPath", "prompt": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n", "test": "}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_723_count_same_pair", "prompt": "#!/bin/bash\n# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncount_same_pair() {\n", "test": "}\n\ncandidate() {\n    count_same_pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 9\") = \"4\" ]]\n    [[ $(candidate \"0 1 2 -1 -5 6 0 -3 -2 3 4 6 8\" \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"11\" ]]\n    [[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\" \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"1\" ]]\n    [[ $(candidate \"0 1 1 2\" \"0 1 2 2\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_724_power_base_sum", "prompt": "#!/bin/bash\n# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n#\n# $1 is an integer\n# $2 is an integer\npower_base_sum() {\n", "test": "}\n\ncandidate() {\n    power_base_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"100\") = \"115\" ]]\n    [[ $(candidate \"8\" \"10\") = \"37\" ]]\n    [[ $(candidate \"8\" \"15\") = \"62\" ]]\n    [[ $(candidate \"3\" \"3\") = \"9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_726_multiply_elements", "prompt": "#!/bin/bash\n# Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the list is equal to t_i * t_{i+1}.\n#\n# $1 is a space-separated list\nmultiply_elements() {\n", "test": "}\n\ncandidate() {\n    multiply_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 8 10\") = \"5 35 56 80\" ]]\n    [[ $(candidate \"2 4 5 6 7\") = \"8 20 30 42\" ]]\n    [[ $(candidate \"12 13 14 9 15\") = \"156 182 126 135\" ]]\n    [[ $(candidate \"12\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_728_sum_list", "prompt": "#!/bin/bash\n# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsum_list() {\n", "test": "}\n\ncandidate() {\n    sum_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 30\" \"15 25 35\") = \"25 45 65\" ]]\n    [[ $(candidate \"1 2 3\" \"5 6 7\") = \"6 8 10\" ]]\n    [[ $(candidate \"15 20 30\" \"15 45 75\") = \"30 65 105\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_730_consecutive_duplicates", "prompt": "#!/bin/bash\n# Write a function to remove consecutive duplicates of a given list.\n#\n# $1 is a space-separated list\nconsecutive_duplicates() {\n", "test": "}\n\ncandidate() {\n    consecutive_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\") = \"0 1 2 3 4 5 6 7 8 9 4\" ]]\n    [[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\") = \"10 15 19 18 17 26 17 18 10\" ]]\n    [[ $(candidate \"a a b c d d\") = \"a b c d\" ]]\n    [[ $(candidate \"a a b c d d a a\") = \"a b c d a\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_731_lateralsurface_cone", "prompt": "#!/bin/bash\n# Write a function to find the lateral surface area of a cone given radius r and the height h.\n#\n# $1 is an integer\n# $2 is an integer\nlateralsurface_cone() {\n", "test": "}\n\ncandidate() {\n    lateralsurface_cone \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"12\") = \"204.20352248333654\" ]]\n    [[ $(candidate \"10\" \"15\") = \"566.3586699569488\" ]]\n    [[ $(candidate \"19\" \"17\") = \"1521.8090132193388\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_732_replace_specialchar", "prompt": "#!/bin/bash\n# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n#\n# $1 is a string\nreplace_specialchar() {\n", "test": "}\n\ncandidate() {\n    replace_specialchar \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python language, Programming language.\") = \"Python:language::Programming:language:\" ]]\n    [[ $(candidate \"a b c,d e f\") = \"a:b:c:d:e:f\" ]]\n    [[ $(candidate \"ram reshma,ram rahim\") = \"ram:reshma:ram:rahim\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_733_find_first_occurrence", "prompt": "#!/bin/bash\n# Write a function to find the index of the first occurrence of a given number in a sorted array.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_first_occurrence() {\n", "test": "}\n\ncandidate() {\n    find_first_occurrence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 5 5 5 6 6 8 9 9 9\" \"5\") = \"1\" ]]\n    [[ $(candidate \"2 3 5 5 6 6 8 9 9 9\" \"5\") = \"2\" ]]\n    [[ $(candidate \"2 4 1 5 6 6 8 9 9 9\" \"6\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_734_sum_Of_Subarray_Prod", "prompt": "#!/bin/bash\n# Write a sh function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n#\n# $1 is a space-separated list\nsum_Of_Subarray_Prod() {\n", "test": "}\n\ncandidate() {\n    sum_Of_Subarray_Prod \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"20\" ]]\n    [[ $(candidate \"1 2\") = \"5\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"84\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_735_toggle_middle_bits", "prompt": "#!/bin/bash\n# Write a sh function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n#\n# $1 is an integer\ntoggle_middle_bits() {\n", "test": "}\n\ncandidate() {\n    toggle_middle_bits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"15\" ]]\n    [[ $(candidate \"10\") = \"12\" ]]\n    [[ $(candidate \"11\") = \"13\" ]]\n    [[ $(candidate \"65\") = \"127\" ]]\n    [[ $(candidate \"77\") = \"115\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_736_left_insertion", "prompt": "#!/bin/bash\n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/sh-exercises/data-structures-and-algorithms/sh-data-structure-exercise-24.php\n#\n# $1 is a space-separated list\n# $2 is an integer\nleft_insertion() {\n", "test": "}\n\ncandidate() {\n    left_insertion \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]\n    [[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_737_check_str", "prompt": "#!/bin/bash\n# Write a function to check whether the given string is starting with a vowel or not using regex.\n#\n# $1 is a string\ncheck_str() {\n", "test": "}\n\ncandidate() {\n    check_str \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"annie\") = \"true\" ]]\n    [[ $(candidate \"dawood\") = \"false\" ]]\n    [[ $(candidate \"Else\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_738_geometric_sum", "prompt": "#!/bin/bash\n# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/sh-exercises/data-structures-and-algorithms/sh-recursion-exercise-9.php\n#\n# $1 is an integer\ngeometric_sum() {\n", "test": "}\n\ncandidate() {\n    geometric_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"1.9921875\" ]]\n    [[ $(candidate \"4\") = \"1.9375\" ]]\n    [[ $(candidate \"8\") = \"1.99609375\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_739_find_Index", "prompt": "#!/bin/bash\n# Write a sh function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n#\n# $1 is an integer\nfind_Index() {\n", "test": "}\n\ncandidate() {\n    find_Index \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"14\" ]]\n    [[ $(candidate \"4\") = \"45\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_740_tuple_to_dict", "prompt": "#!/bin/bash\n# Write a function to convert the given list to a key-value CSV using adjacent elements. https://www.geeksforgeeks.org/sh-convert-list-to-adjacent-pair-CSV/\n#\n# $1 is a space-separated list\ntuple_to_dict() {\n", "test": "}\n\ncandidate() {\n    tuple_to_dict \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 10 13 5\") = \"1,5\\n7,10\\n13,5\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"1,2\\n3,4\\n5,6\" ]]\n    [[ $(candidate \"7 8 9 10 11 12\") = \"7,8\\n9,10\\n11,12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_741_all_Characters_Same", "prompt": "#!/bin/bash\n# Write a sh function to check whether all the characters are same or not.\n#\n# $1 is a string\nall_Characters_Same() {\n", "test": "}\n\ncandidate() {\n    all_Characters_Same \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"false\" ]]\n    [[ $(candidate \"aaa\") = \"true\" ]]\n    [[ $(candidate \"data\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_742_area_tetrahedron", "prompt": "#!/bin/bash\n# Write a function to caluclate the area of a tetrahedron.\n#\n# $1 is an integer\narea_tetrahedron() {\n", "test": "}\n\ncandidate() {\n    area_tetrahedron \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"15.588457268119894\" ]]\n    [[ $(candidate \"20\") = \"692.8203230275509\" ]]\n    [[ $(candidate \"10\") = \"173.20508075688772\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_743_rotate_right", "prompt": "#!/bin/bash\n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/sh-program-right-rotate-list-n/\n#\n# $1 is a space-separated list\n# $2 is an integer\nrotate_right() {\n", "test": "}\n\ncandidate() {\n    rotate_right \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"3\") = \"8 9 10 1 2 3 4 5 6 7\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"9 10 1 2 3 4 5 6 7 8\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5\") = \"6 7 8 9 10 1 2 3 4 5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_744_check_none", "prompt": "#!/bin/bash\n# Write a function to check if the given list has any none value or not.\n#\n# $1 is a $Any\ncheck_none() {\n", "test": "}\n\ncandidate() {\n    check_none \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6 None\") = \"true\" ]]\n    [[ $(candidate \"7 8 9 11 14\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 None\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_745_divisible_by_digits", "prompt": "#!/bin/bash\n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/sh-exercises/lambda/sh-lambda-exercise-24.php\n#\n# $1 is an integer\n# $2 is an integer\ndivisible_by_digits() {\n", "test": "}\n\ncandidate() {\n    divisible_by_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"22\") = \"1 2 3 4 5 6 7 8 9 11 12 15 22\" ]]\n    [[ $(candidate \"1\" \"15\") = \"1 2 3 4 5 6 7 8 9 11 12 15\" ]]\n    [[ $(candidate \"20\" \"25\") = \"22 24\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_746_sector_area", "prompt": "#!/bin/bash\n# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n#\n# $1 is an integer\n# $2 is an integer\nsector_area() {\n", "test": "}\n\ncandidate() {\n    sector_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\" \"45\") = \"6.283185307179586\" ]]\n    [[ $(candidate \"9\" \"45\") = \"31.808625617596654\" ]]\n    [[ $(candidate \"9\" \"361\") = \"None\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_747_lcs_of_three", "prompt": "#!/bin/bash\n# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n#\n# $1 is a string\n# $2 is a string\n# $3 is a string\nlcs_of_three() {\n", "test": "}\n\ncandidate() {\n    lcs_of_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") = \"2\" ]]\n    [[ $(candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") = \"5\" ]]\n    [[ $(candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_748_capital_words_spaces", "prompt": "#!/bin/bash\n# Write a function to put spaces between words starting with capital letters in a given string.\n#\n# $1 is a string\ncapital_words_spaces() {\n", "test": "}\n\ncandidate() {\n    capital_words_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"Python\" ]]\n    [[ $(candidate \"PythonProgrammingExamples\") = \"Python Programming Examples\" ]]\n    [[ $(candidate \"GetReadyToBeCodingFreak\") = \"Get Ready To Be Coding Freak\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_750_add_tuple", "prompt": "#!/bin/bash\n# Write a function to add the given list to the given list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_tuple() {\n", "test": "}\n\ncandidate() {\n    add_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\" \"9 10\") = \"5 6 7 9 10\" ]]\n    [[ $(candidate \"6 7 8\" \"10 11\") = \"6 7 8 10 11\" ]]\n    [[ $(candidate \"7 8 9\" \"11 12\") = \"7 8 9 11 12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_751_check_min_heap", "prompt": "#!/bin/bash\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n", "test": "}\n\ncandidate() {\n    check_min_heap \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]\n    [[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_752_jacobsthal_num", "prompt": "#!/bin/bash\n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n#\n# $1 is an integer\njacobsthal_num() {\n", "test": "}\n\ncandidate() {\n    jacobsthal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"11\" ]]\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"4\") = \"5\" ]]\n    [[ $(candidate \"13\") = \"2731\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_753_min_k", "prompt": "#!/bin/bash\n# Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/sh-find-minimum-k-records-from-list-list/ - in this case a verbatim cosh of test cases\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmin_k() {\n", "test": "}\n\ncandidate() {\n    min_k \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Manjeet 10\\nAkshat 4\\nAkash 2\\nNikhil 8\" \"2\") = \"Akash 2\\nAkshat 4\" ]]\n    [[ $(candidate \"Sanjeev 11\\nAngat 5\\nAkash 3\\nNepin 9\" \"3\") = \"Akash 3\\nAngat 5\\nNepin 9\" ]]\n    [[ $(candidate \"tanmay 14\\nAmer 11\\nAyesha 9\\nSKD 16\" \"1\") = \"Ayesha 9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_754_extract_index_list", "prompt": "#!/bin/bash\n# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\nextract_index_list() {\n", "test": "}\n\ncandidate() {\n    extract_index_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 3 4 5 6 7\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"1 7\" ]]\n    [[ $(candidate \"1 1 3 4 5 6 7\" \"0 1 2 3 4 6 5\" \"0 1 2 3 4 6 7\") = \"1 6\" ]]\n    [[ $(candidate \"1 1 3 4 6 5 6\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"1 5\" ]]\n    [[ $(candidate \"1 2 3 4 6 6 6\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_755_second_smallest", "prompt": "#!/bin/bash\n# Write a function to find the second smallest number in a list.\n#\n# $1 is a newline-separated, space-separated list\nsecond_smallest() {\n", "test": "}\n\ncandidate() {\n    second_smallest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 -8 -2 0 -2\") = \"-2\" ]]\n    [[ $(candidate \"1 1 -0.5 0 2 -2 -2\") = \"-0.5\" ]]\n    [[ $(candidate \"2 2\") = \"None\" ]]\n    [[ $(candidate \"2 2 2\") = \"None\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_756_text_match_zero_one", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/sh-exercises/re/sh-re-exercise-3.php\n#\n# $1 is a string\ntext_match_zero_one() {\n", "test": "}\n\ncandidate() {\n    text_match_zero_one \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abbbba\") = \"true\" ]]\n    [[ $(candidate \"dsabbbba\") = \"true\" ]]\n    [[ $(candidate \"asbbbba\") = \"false\" ]]\n    [[ $(candidate \"abaaa\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_757_count_reverse_pairs", "prompt": "#!/bin/bash\n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/sh-program-to-count-the-pairs-of-reverse-strings/\n#\n# $1 is a space-separated list\ncount_reverse_pairs() {\n", "test": "}\n\ncandidate() {\n    count_reverse_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"julia best tseb for ailuj\") = \"2\" ]]\n    [[ $(candidate \"geeks best for skeeg\") = \"1\" ]]\n    [[ $(candidate \"makes best sekam for rof\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_759_is_decimal", "prompt": "#!/bin/bash\n# Write a function to check whether a given string is a decimal number with a precision of 2.\n#\n# $1 is a string\nis_decimal() {\n", "test": "}\n\ncandidate() {\n    is_decimal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123.11\") = \"true\" ]]\n    [[ $(candidate \"e666.86\") = \"false\" ]]\n    [[ $(candidate \"3.124587\") = \"false\" ]]\n    [[ $(candidate \"1.11\") = \"true\" ]]\n    [[ $(candidate \"1.1.11\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_760_unique_Element", "prompt": "#!/bin/bash\n# Write a sh function to check whether a list of numbers contains only one distinct element or not.\n#\n# $1 is a space-separated list\nunique_Element() {\n", "test": "}\n\ncandidate() {\n    unique_Element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 1\") = \"true\" ]]\n    [[ $(candidate \"1 2 1 2\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_762_check_monthnumber_number", "prompt": "#!/bin/bash\n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n#\n# $1 is an integer\ncheck_monthnumber_number() {\n", "test": "}\n\ncandidate() {\n    check_monthnumber_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"12\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_763_find_min_diff", "prompt": "#!/bin/bash\n# Write a sh function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_min_diff() {\n", "test": "}\n\ncandidate() {\n    find_min_diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 3 19 18 25\" \"6\") = \"1\" ]]\n    [[ $(candidate \"4 3 2 6\" \"4\") = \"1\" ]]\n    [[ $(candidate \"30 5 20 9\" \"4\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_764_number_ctr", "prompt": "#!/bin/bash\n# Write a sh function to count number of digits in a given string.\n#\n# $1 is a string\nnumber_ctr() {\n", "test": "}\n\ncandidate() {\n    number_ctr \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"program2bedone\") = \"1\" ]]\n    [[ $(candidate \"3wonders\") = \"1\" ]]\n    [[ $(candidate \"123\") = \"3\" ]]\n    [[ $(candidate \"3wond-1ers2\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_765_is_polite", "prompt": "#!/bin/bash\n# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n#\n# $1 is an integer\nis_polite() {\n", "test": "}\n\ncandidate() {\n    is_polite \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"11\" ]]\n    [[ $(candidate \"4\") = \"7\" ]]\n    [[ $(candidate \"9\") = \"13\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_766_pair_wise", "prompt": "#!/bin/bash\n# Write a function to return a list of all pairs of consecutive items in a given list.\n#\n# $1 is a space-separated list\npair_wise() {\n", "test": "}\n\ncandidate() {\n    pair_wise \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 3 4 4 5\") = \"1 1\\n1 2\\n2 3\\n3 3\\n3 4\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"1 5\\n5 7\\n7 9\\n9 10\" ]]\n    [[ $(candidate \"5 1 9 7 10\") = \"5 1\\n1 9\\n9 7\\n7 10\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_767_get_pairs_count", "prompt": "#!/bin/bash\n# Write a sh function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n#\n# $1 is a space-separated list\n# $2 is an integer\nget_pairs_count() {\n", "test": "}\n\ncandidate() {\n    get_pairs_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 1 1\" \"2\") = \"6\" ]]\n    [[ $(candidate \"1 5 7 -1 5\" \"6\") = \"3\" ]]\n    [[ $(candidate \"1 -2 3\" \"1\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 3\" \"-3\") = \"1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_769_Diff", "prompt": "#!/bin/bash\n# Write a sh function to get the difference between two lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nDiff() {\n", "test": "}\n\ncandidate() {\n    Diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 15 20 25 30 35 40\" \"25 40 35\") = \"10 20 30 15\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 1\") = \"2 3 4 5 6 7\" ]]\n    [[ $(candidate \"1 2 3\" \"6 7 1\") = \"2 3 6 7\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_770_odd_num_sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of fourth power of first n odd natural numbers.\n#\n# $1 is an integer\nodd_num_sum() {\n", "test": "}\n\ncandidate() {\n    odd_num_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"82\" ]]\n    [[ $(candidate \"3\") = \"707\" ]]\n    [[ $(candidate \"4\") = \"3108\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_771_check_expression", "prompt": "#!/bin/bash\n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n#\n# $1 is a string\ncheck_expression() {\n", "test": "}\n\ncandidate() {\n    check_expression \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"{()}[{}]\") = \"true\" ]]\n    [[ $(candidate \"{()}[{]\") = \"false\" ]]\n    [[ $(candidate \"{()}[{}][]({})\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_772_remove_length", "prompt": "#!/bin/bash\n# Write a function to remove all the words with k length in the given string.\n#\n# $1 is a string\n# $2 is an integer\nremove_length() {\n", "test": "}\n\ncandidate() {\n    remove_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"The person is most value tet\" \"3\") = \"person is most value\" ]]\n    [[ $(candidate \"If you told me about this ok\" \"4\") = \"If you me about ok\" ]]\n    [[ $(candidate \"Forces of darkeness is come into the play\" \"4\") = \"Forces of darkeness is the\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_773_occurance_substring", "prompt": "#!/bin/bash\n# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n#\n# $1 is a string\n# $2 is a string\noccurance_substring() {\n", "test": "}\n\ncandidate() {\n    occurance_substring \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python programming, python language\" \"python\") = \"python 0 6\" ]]\n    [[ $(candidate \"python programming,programming language\" \"programming\") = \"programming 7 18\" ]]\n    [[ $(candidate \"python programming,programming language\" \"language\") = \"language 31 39\" ]]\n    [[ $(candidate \"c++ programming, c++ language\" \"python\") = \"None\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_775_odd_position", "prompt": "#!/bin/bash\n# Write a sh function to check whether every odd index contains odd numbers of a given list.\n#\n# $1 is a space-separated list\nodd_position() {\n", "test": "}\n\ncandidate() {\n    odd_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 4 3 6 7 6 3\") = \"true\" ]]\n    [[ $(candidate \"4 1 2\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_776_count_vowels", "prompt": "#!/bin/bash\n# Write a function to count those characters which have vowels as their neighbors in the given string.\n#\n# $1 is a string\ncount_vowels() {\n", "test": "}\n\ncandidate() {\n    count_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"bestinstareels\") = \"7\" ]]\n    [[ $(candidate \"partofthejourneyistheend\") = \"12\" ]]\n    [[ $(candidate \"amazonprime\") = \"5\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_777_find_sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of non-repeated elements in a given list.\n#\n# $1 is a space-separated list\nfind_sum() {\n", "test": "}\n\ncandidate() {\n    find_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 1 1 4 5 6\") = \"21\" ]]\n    [[ $(candidate \"1 10 9 4 2 10 10 45 4\") = \"71\" ]]\n    [[ $(candidate \"12 10 9 45 2 10 10 45 10\") = \"78\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_778_pack_consecutive_duplicates", "prompt": "#!/bin/bash\n# Write a function to pack consecutive duplicates of a given list elements into sublists.\n#\n# $1 is a space-separated list\npack_consecutive_duplicates() {\n", "test": "}\n\ncandidate() {\n    pack_consecutive_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\") = \"0 0\\n1\\n2\\n3\\n4 4\\n5\\n6 6 6\\n7\\n8\\n9\\n4 4\" ]]\n    [[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\") = \"10 10\\n15\\n19\\n18 18\\n17\\n26 26\\n17\\n18\\n10\" ]]\n    [[ $(candidate \"a a b c d d\") = \"a a\\nb\\nc\\nd d\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_780_find_combinations", "prompt": "#!/bin/bash\n# Write a function to find the combinations of sums with lists in the given list list. https://www.geeksforgeeks.org/sh-combinations-of-sum-with-lists-in-list-list/\n#\n# $1 is a newline-separated, space-separated list\nfind_combinations() {\n", "test": "}\n\ncandidate() {\n    find_combinations \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4\\n6 7\\n5 1\\n6 10\") = \"8 11\\n7 5\\n8 14\\n11 8\\n12 17\\n11 11\" ]]\n    [[ $(candidate \"3 5\\n7 8\\n6 2\\n7 11\") = \"10 13\\n9 7\\n10 16\\n13 10\\n14 19\\n13 13\" ]]\n    [[ $(candidate \"4 6\\n8 9\\n7 3\\n8 12\") = \"12 15\\n11 9\\n12 18\\n15 12\\n16 21\\n15 15\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_781_count_divisors", "prompt": "#!/bin/bash\n# Write a sh function to check whether the count of divisors is even. https://www.w3resource.com/sh-exercises/basic/sh-basic-1-exercise-24.php\n#\n# $1 is an integer\ncount_divisors() {\n", "test": "}\n\ncandidate() {\n    count_divisors \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"100\") = \"false\" ]]\n    [[ $(candidate \"125\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_782_odd_length_sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n#\n# $1 is a space-separated list\nodd_length_sum() {\n", "test": "}\n\ncandidate() {\n    odd_length_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\") = \"14\" ]]\n    [[ $(candidate \"1 2 1 2\") = \"15\" ]]\n    [[ $(candidate \"1 7\") = \"8\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_783_rgb_to_hsv", "prompt": "#!/bin/bash\n# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nrgb_to_hsv() {\n", "test": "}\n\ncandidate() {\n    rgb_to_hsv \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"255\" \"255\" \"255\") = \"0.0 0.0 100.0\" ]]\n    [[ $(candidate \"0\" \"215\" \"0\") = \"120.0 100.0 84.31372549019608\" ]]\n    [[ $(candidate \"10\" \"215\" \"110\") = \"149.26829268292684 95.34883720930233 84.31372549019608\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_784_mul_even_odd", "prompt": "#!/bin/bash\n# Write a function to find the product of first even and odd number of a given list.\n#\n# $1 is a space-separated list\nmul_even_odd() {\n", "test": "}\n\ncandidate() {\n    mul_even_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 4 1 6 8\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"10\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_785_tuple_str_int", "prompt": "#!/bin/bash\n# Write a function to convert list string to integer list.\n#\n# $1 is a string\ntuple_str_int() {\n", "test": "}\n\ncandidate() {\n    tuple_str_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(7, 8, 9)\") = \"7 8 9\" ]]\n    [[ $(candidate \"(1, 2, 3)\") = \"1 2 3\" ]]\n    [[ $(candidate \"(4, 5, 6)\") = \"4 5 6\" ]]\n    [[ $(candidate \"(7, 81, 19)\") = \"7 81 19\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_786_right_insertion", "prompt": "#!/bin/bash\n# Write a function to locate the right insertion point for a specified value in sorted order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nright_insertion() {\n", "test": "}\n\ncandidate() {\n    right_insertion \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]\n    [[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_787_text_match_three", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an a followed by three 'b'.\n#\n# $1 is a string\ntext_match_three() {\n", "test": "}\n\ncandidate() {\n    text_match_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abbbba\") = \"true\" ]]\n    [[ $(candidate \"caacabbbba\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_788_new_tuple", "prompt": "#!/bin/bash\n# Write a function to create a new list from the given string and list.\n#\n# $1 is a space-separated list\n# $2 is a string\nnew_tuple() {\n", "test": "}\n\ncandidate() {\n    new_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"WEB is\" \"best\") = \"WEB is best\" ]]\n    [[ $(candidate \"We are\" \"Developers\") = \"We are Developers\" ]]\n    [[ $(candidate \"Part is\" \"Wrong\") = \"Part is Wrong\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_790_even_position", "prompt": "#!/bin/bash\n# Write a sh function to check whether every even index contains even numbers of a given list.\n#\n# $1 is a space-separated list\neven_position() {\n", "test": "}\n\ncandidate() {\n    even_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\") = \"false\" ]]\n    [[ $(candidate \"2 1 4\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_791_remove_nested", "prompt": "#!/bin/bash\n# Write a function to remove lists from the given list.\n#\n# $1 is a $Any\nremove_nested() {\n", "test": "}\n\ncandidate() {\n    remove_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 4 6 10\") = \"1 5 7 10\" ]]\n    [[ $(candidate \"2 6 8 5 7 11\") = \"2 6 8 11\" ]]\n    [[ $(candidate \"3 7 9 6 8 12\") = \"3 7 9 12\" ]]\n    [[ $(candidate \"3 7 9 6 8 5 12 12\") = \"3 7 9 12\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_792_count_list", "prompt": "#!/bin/bash\n# Write a sh function to count the number of lists in a given number of lists.\n#\n# $1 is a newline-separated, space-separated list\ncount_list() {\n", "test": "}\n\ncandidate() {\n    count_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n5 7\\n9 11\\n13 15 17\") = \"4\" ]]\n    [[ $(candidate \"1 2\\n2 3\\n4 5\") = \"3\" ]]\n    [[ $(candidate \"1 0\\n2 0\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_793_last", "prompt": "#!/bin/bash\n# Write a sh function to find the last position of an element in a sorted array.\n#\n# $1 is a space-separated list\n# $2 is an integer\nlast() {\n", "test": "}\n\ncandidate() {\n    last \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 4\" \"1\") = \"2\" ]]\n    [[ $(candidate \"2 3 2 3 6 8 9\" \"3\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_794_text_starta_endb", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n#\n# $1 is a string\ntext_starta_endb() {\n", "test": "}\n\ncandidate() {\n    text_starta_endb \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aabbbb\") = \"true\" ]]\n    [[ $(candidate \"aabAbbbc\") = \"false\" ]]\n    [[ $(candidate \"accddbbjjj\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_796_return_sum", "prompt": "#!/bin/bash\n# Write function to find the sum of all items in the given CSV.\n#\n# $1 is a two column CSV in key,value order\nreturn_sum() {\n", "test": "}\n\ncandidate() {\n    return_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a,100\\nb,200\\nc,300\") = \"600\" ]]\n    [[ $(candidate \"a,25\\nb,18\\nc,45\") = \"88\" ]]\n    [[ $(candidate \"a,36\\nb,39\\nc,49\") = \"124\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_797_sum_in_range", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of all odd natural numbers within the range l and r.\n#\n# $1 is an integer\n# $2 is an integer\nsum_in_range() {\n", "test": "}\n\ncandidate() {\n    sum_in_range \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"5\") = \"8\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate \"7\" \"13\") = \"40\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_798__sum", "prompt": "#!/bin/bash\n# Write a sh function to find the sum of an array.\n#\n# $1 is a space-separated list\n_sum() {\n", "test": "}\n\ncandidate() {\n    _sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"6\" ]]\n    [[ $(candidate \"15 12 13 10\") = \"50\" ]]\n    [[ $(candidate \"0 1 2\") = \"3\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_799_left_rotate", "prompt": "#!/bin/bash\n# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n#\n# $1 is an integer\n# $2 is an integer\nleft_rotate() {\n", "test": "}\n\ncandidate() {\n    left_rotate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"64\" ]]\n    [[ $(candidate \"10\" \"2\") = \"40\" ]]\n    [[ $(candidate \"99\" \"3\") = \"792\" ]]\n    [[ $(candidate \"99\" \"3\") = \"792\" ]]\n    [[ $(candidate \"1\" \"3\") = \"8\" ]]\n    [[ $(candidate \"5\" \"3\") = \"40\" ]]\n    [[ $(candidate \"29\" \"3\") = \"232\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_800_remove_all_spaces", "prompt": "#!/bin/bash\n# Write a function to remove all whitespaces from a string.\n#\n# $1 is a string\nremove_all_spaces() {\n", "test": "}\n\ncandidate() {\n    remove_all_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python  program\") = \"pythonprogram\" ]]\n    [[ $(candidate \"python   programming    language\") = \"pythonprogramminglanguage\" ]]\n    [[ $(candidate \"python                     program\") = \"pythonprogram\" ]]\n    [[ $(candidate \"   python                     program\") = \"pythonprogram\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_801_test_three_equal", "prompt": "#!/bin/bash\n# Write a sh function to count the number of equal numbers from three given integers.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntest_three_equal() {\n", "test": "}\n\ncandidate() {\n    test_three_equal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"1\" \"1\") = \"3\" ]]\n    [[ $(candidate \"-1\" \"-2\" \"-3\") = \"0\" ]]\n    [[ $(candidate \"1\" \"2\" \"2\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_802_count_rotation", "prompt": "#!/bin/bash\n# Write a sh function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n", "test": "}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_803_is_perfect_square", "prompt": "#!/bin/bash\n# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n#\n# $1 is an integer\nis_perfect_square() {\n", "test": "}\n\ncandidate() {\n    is_perfect_square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"36\") = \"true\" ]]\n    [[ $(candidate \"14\") = \"false\" ]]\n    [[ $(candidate \"196\") = \"true\" ]]\n    [[ $(candidate \"125\") = \"false\" ]]\n    [[ $(candidate \"15625\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_804_is_product_even", "prompt": "#!/bin/bash\n# Write a function to check whether the product of numbers in a list is even or not.\n#\n# $1 is a space-separated list\nis_product_even() {\n", "test": "}\n\ncandidate() {\n    is_product_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n    [[ $(candidate \"1 2 1 4\") = \"true\" ]]\n    [[ $(candidate \"1 1\") = \"false\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_805_max_sum_list", "prompt": "#!/bin/bash\n# Write a function that returns the list in a list of lists whose sum of elements is the highest.\n#\n# $1 is a newline-separated, space-separated list\nmax_sum_list() {\n", "test": "}\n\ncandidate() {\n    max_sum_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n10 11 12\\n7 8 9\") = \"10 11 12\" ]]\n    [[ $(candidate \"3 2 1\\n6 5 4\\n12 11 10\") = \"12 11 10\" ]]\n    [[ $(candidate \"2 3 1\") = \"2 3 1\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_806_max_run_uppercase", "prompt": "#!/bin/bash\n# Write a function to find maximum run of uppercase characters in the given string.\n#\n# $1 is a string\nmax_run_uppercase() {\n", "test": "}\n\ncandidate() {\n    max_run_uppercase \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"GeMKSForGERksISBESt\") = \"5\" ]]\n    [[ $(candidate \"PrECIOusMOVemENTSYT\") = \"6\" ]]\n    [[ $(candidate \"GooGLEFluTTER\") = \"4\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_807_first_odd", "prompt": "#!/bin/bash\n# Write a sh function to find the first odd number in a given list of numbers.\n#\n# $1 is a space-separated list\nfirst_odd() {\n", "test": "}\n\ncandidate() {\n    first_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5\") = \"1\" ]]\n    [[ $(candidate \"2 4 1 3\") = \"1\" ]]\n    [[ $(candidate \"8 9 1\") = \"9\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_808_check_K", "prompt": "#!/bin/bash\n# Write a function to check if the given lists contain the k or not.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncheck_K() {\n", "test": "}\n\ncandidate() {\n    check_K \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6 8\" \"6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"7\") = \"false\" ]]\n    [[ $(candidate \"7 8 9 44 11 12\" \"11\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}, {"task_id": "mbpp_809_check_smaller", "prompt": "#!/bin/bash\n# Write a function to check if each element of second list is smaller than its corresponding element in the first list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncheck_smaller() {\n", "test": "}\n\ncandidate() {\n    check_smaller \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"2 3 4\") = \"false\" ]]\n    [[ $(candidate \"4 5 6\" \"3 4 5\") = \"true\" ]]\n    [[ $(candidate \"11 12 13\" \"10 11 12\") = \"true\" ]]\n}\n\nrun_test", "language": "sh"}]